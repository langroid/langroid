from typing import Any, Generator, TypeVar

import pandas as pd
from _typeshed import Incomplete
from pydantic import BaseModel

from langroid.mytypes import DocMetaData as DocMetaData
from langroid.mytypes import Document as Document

logger: Incomplete

def has_field(model_class: type[BaseModel], field_name: str) -> bool: ...
def flatten_pydantic_model(
    model: type[BaseModel], base_model: type[BaseModel] = ...
) -> type[BaseModel]: ...
def get_field_names(model: type[BaseModel]) -> list[str]: ...
def generate_simple_schema(
    model: type[BaseModel], exclude: list[str] = []
) -> dict[str, Any]: ...
def flatten_pydantic_instance(
    instance: BaseModel, prefix: str = "", force_str: bool = False
) -> dict[str, Any]: ...
def extract_fields(doc: BaseModel, fields: list[str]) -> dict[str, Any]: ...
def nested_dict_from_flat(
    flat_data: dict[str, Any], sub_dict: str = ""
) -> dict[str, Any]: ...
def pydantic_obj_from_flat_dict(
    flat_data: dict[str, Any], model: type[BaseModel], sub_dict: str = ""
) -> BaseModel: ...
def clean_schema(
    model: type[BaseModel], excludes: list[str] = []
) -> dict[str, Any]: ...
def temp_update(
    pydantic_object: BaseModel, updates: dict[str, Any]
) -> Generator[None, None, None]: ...

T = TypeVar("T", bound=BaseModel)

def temp_params(config: T, field: str, temp: T) -> Generator[None, None, None]: ...
def numpy_to_python_type(numpy_type: type[Any]) -> type[Any]: ...
def dataframe_to_pydantic_model(df: pd.DataFrame) -> type[BaseModel]: ...
def dataframe_to_pydantic_objects(df: pd.DataFrame) -> list[BaseModel]: ...
def first_non_null(series: pd.Series) -> Any | None: ...
def dataframe_to_document_model(
    df: pd.DataFrame,
    content: str = "content",
    metadata: list[str] = [],
    exclude: list[str] = [],
) -> type[BaseModel]: ...
def dataframe_to_documents(
    df: pd.DataFrame,
    content: str = "content",
    metadata: list[str] = [],
    doc_cls: type[BaseModel] | None = None,
) -> list[Document]: ...
def extra_metadata(document: Document, doc_cls: type[Document] = ...) -> list[str]: ...
def extend_document_class(d: Document) -> type[Document]: ...
