from typing import Iterable, Sequence, TypeVar

from _typeshed import Incomplete

from langroid.mytypes import Document as Document
from langroid.parsing.document_parser import DocumentType as DocumentType
from langroid.parsing.parser import Parser as Parser
from langroid.parsing.parser import ParsingConfig as ParsingConfig
from langroid.parsing.repo_loader import RepoLoader as RepoLoader
from langroid.parsing.url_loader import URLLoader as URLLoader
from langroid.parsing.urls import (
    get_urls_paths_bytes_indices as get_urls_paths_bytes_indices,
)

logger: Incomplete

def download_nltk_resource(resource: str) -> None: ...

T = TypeVar("T")

def batched(iterable: Iterable[T], n: int) -> Iterable[Sequence[T]]: ...
def generate_random_sentences(k: int) -> str: ...
def generate_random_text(num_sentences: int) -> str: ...
def closest_string(query: str, string_list: list[str]) -> str: ...
def split_paragraphs(text: str) -> list[str]: ...
def split_newlines(text: str) -> list[str]: ...
def number_segments(s: str, granularity: int = 1) -> str: ...
def number_sentences(s: str) -> str: ...
def parse_number_range_list(specs: str) -> list[int]: ...
def strip_k(s: str, k: int = 2) -> str: ...
def clean_whitespace(text: str) -> str: ...
def extract_numbered_segments(s: str, specs: str) -> str: ...
def extract_content_from_path(
    path: bytes | str | list[bytes | str],
    parsing: ParsingConfig,
    doc_type: str | DocumentType | None = None,
) -> str | list[str]: ...
