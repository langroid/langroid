from enum import Enum
from typing import Any, Generator

import fitz
import pdfplumber
import pypdf
from _typeshed import Incomplete
from PIL import Image

from langroid.exceptions import LangroidImportError as LangroidImportError
from langroid.mytypes import DocMetaData as DocMetaData
from langroid.mytypes import Document as Document
from langroid.parsing.parser import Parser as Parser
from langroid.parsing.parser import ParsingConfig as ParsingConfig

logger: Incomplete

class DocumentType(str, Enum):
    PDF: str
    DOCX: str
    DOC: str
    TXT: str

def find_last_full_char(possible_unicode: bytes) -> int: ...
def is_plain_text(path_or_bytes: str | bytes) -> bool: ...

class DocumentParser(Parser):
    @classmethod
    def create(
        cls,
        source: str | bytes,
        config: ParsingConfig,
        doc_type: str | DocumentType | None = None,
    ) -> DocumentParser: ...
    config: Incomplete
    source: str
    doc_bytes: Incomplete
    def __init__(self, source: str | bytes, config: ParsingConfig) -> None: ...
    @staticmethod
    def chunks_from_path_or_bytes(
        source: str | bytes,
        parser: Parser,
        doc_type: str | DocumentType | None = None,
        lines: int | None = None,
    ) -> list[Document]: ...
    def iterate_pages(self) -> Generator[tuple[int, Any], None, None]: ...
    def extract_text_from_page(self, page: Any) -> str: ...
    def fix_text(self, text: str) -> str: ...
    def get_doc(self) -> Document: ...
    def get_doc_chunks(self) -> list[Document]: ...

class FitzPDFParser(DocumentParser):
    def iterate_pages(self) -> Generator[tuple[int, fitz.Page], None, None]: ...
    def extract_text_from_page(self, page: fitz.Page) -> str: ...

class PyPDFParser(DocumentParser):
    def iterate_pages(self) -> Generator[tuple[int, pypdf.PageObject], None, None]: ...
    def extract_text_from_page(self, page: pypdf.PageObject) -> str: ...

class PDFPlumberParser(DocumentParser):
    def iterate_pages(
        self,
    ) -> Generator[tuple[int, pdfplumber.pdf.Page], None, None]: ...
    def extract_text_from_page(self, page: pdfplumber.pdf.Page) -> str: ...

class ImagePdfParser(DocumentParser):
    def iterate_pages(self) -> Generator[tuple[int, "Image"], None, None]: ...
    def extract_text_from_page(self, page: Image) -> str: ...

class UnstructuredPDFParser(DocumentParser):
    def iterate_pages(self) -> Generator[tuple[int, Any], None, None]: ...
    def extract_text_from_page(self, page: Any) -> str: ...

class UnstructuredDocxParser(DocumentParser):
    def iterate_pages(self) -> Generator[tuple[int, Any], None, None]: ...
    def extract_text_from_page(self, page: Any) -> str: ...

class UnstructuredDocParser(UnstructuredDocxParser):
    def iterate_pages(self) -> Generator[tuple[int, Any], None, None]: ...

class PythonDocxParser(DocumentParser):
    def iterate_pages(self) -> Generator[tuple[int, Any], None, None]: ...
    def extract_text_from_page(self, page: Any) -> str: ...
