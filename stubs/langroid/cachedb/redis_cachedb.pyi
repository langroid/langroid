from contextlib import AbstractContextManager
from typing import Any, TypeVar

from _typeshed import Incomplete

from langroid.cachedb.base import CacheDB as CacheDB
from langroid.cachedb.base import CacheDBConfig as CacheDBConfig

T = TypeVar("T", bound="RedisCache")
logger: Incomplete

class RedisCacheConfig(CacheDBConfig):
    fake: bool

class RedisCache(CacheDB):
    config: Incomplete
    pool: Incomplete
    def __init__(self, config: RedisCacheConfig) -> None: ...
    def redis_client(self) -> AbstractContextManager[T]: ...
    def close_all_connections(self) -> None: ...
    def clear(self) -> None: ...
    def clear_all(self) -> None: ...
    def store(self, key: str, value: Any) -> None: ...
    def retrieve(self, key: str) -> dict[str, Any] | str | None: ...
    def delete_keys(self, keys: list[str]) -> None: ...
    def delete_keys_pattern(self, pattern: str) -> None: ...
