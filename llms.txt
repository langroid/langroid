This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
- Pay special attention to the Repository Description. These contain important context and guidelines specific to this project.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: .*/**, !.github, !.github/**, data/**, **/data/**, **/*.csv, logs/**, build/**, dist/**, *.egg-info/**, __pycache__/**, **/*.pyc, .pytest_cache/**, .mypy_cache/**, .ruff_cache/**, venv/**, env/**, .env, **/*.json, llms.txt, llms-compressed.txt, llms-128k.txt, llms-no-tests.txt, llms-no-tests-compressed.txt, llms-no-tests-no-examples.txt, llms-no-tests-no-examples-compressed.txt, file-list.txt, file-list-updated.txt, examples/data/**, examples/docqa/docs/**, examples/logs/**, tests/cache/**, tests/logs/**, **/*.pkl, **/*.pickle, **/*.db, **/*.sqlite, **/*.log, **/node_modules/**, **/*.min.js, **/*.map, coverage/**, htmlcov/**, .coverage, *.orig, *.tmp, *.bak, *.swp, *.swo, **/docker-compose*.yml, visual_log.sh, **/*_converted.md, **/page_*.md, **/page-*.md, tests/main/dummy-pages/**, tests/main/data/**/*.txt, **/*.pb2.py, **/*.pb2_grpc.py
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<user_provided_header>
Langroid Repository Export for LLM Analysis
</user_provided_header>

<directory_structure>
ai-instructions/
  claude-repomix-instructions.md
ai-notes/
  handler-parameter-analysis-notes.md
  Langroid-repo-docs.md
  repomix-plan.md
docs/
  blog/
    posts/
      chat-completion.md
      langroid-architecture.md
      langroid-intro.md
      langroid-knowledge-graph.md
      langroid-lancedb.md
      local-llm-formatting.md
      local-llm.md
      malade.md
      multi-agent-debate.md
      test.md
    .authors.yml
    index.md
  demos/
    targeting/
      audience-targeting.md
  examples/
    agent-tree.md
    guide.md
  javascripts/
    mathjax.js
  notes/
    async-streaming.md
    azure-openai-models.md
    chunking.md
    code-injection-protection.md
    custom-azure-client.md
    enriching-for-retrieval.md
    file-input.md
    gemini.md
    glhf-chat.md
    handle-llm-no-tool.md
    knowledge-graphs.md
    langdb.md
    large-tool-results.md
    litellm-proxy.md
    llama-cpp-embeddings.md
    llm-pdf-parser.md
    marker-pdf.md
    markitdown.md
    mcp-tools.md
    openai-client-caching.md
    overview.md
    pgvector.md
    pinecone.md
    portkey.md
    qdrant-resource-cleanup.md
    quiet-mode.md
    reasoning-content.md
    structured-output.md
    task-termination.md
    task-tool.md
    tavily_search.md
    tool-message-handler.md
    url_loader.md
    weaviate.md
    xml-tools.md
  overrides/
    partials/
      comments.html
  quick-start/
    chat-agent-docs.md
    chat-agent-tool.md
    chat-agent.md
    index.md
    llm-interaction.md
    multi-agent-task-delegation.md
    setup.md
    three-agent-chat-num-router.md
    three-agent-chat-num.md
    two-agent-chat-num.md
  stylesheets/
    extra.css
  tutorials/
    langroid-tour.md
    llm-usage-options.md
    local-llm-setup.md
    non-openai-llms.md
    postgresql-agent.md
    supported-models.md
  auto_docstring.py
  FAQ.md
  index.md
examples/
  basic/
    multi-agent-search-critic/
      assistant_agent.py
      critic_agent.py
      main.py
      search_agent.py
      tools.py
    multi-agent-search-critic-no-orch/
      assistant_agent.py
      critic_agent.py
      main.py
      search_agent.py
      tools.py
    1-agent-3-tools-address-user.py
    1-agent-3-tools.py
    1d-screen-click.py
    2-agent-tools.py
    autocorrect.py
    chat-2-agent-discuss.py
    chat-azure-async-client.py
    chat-azure-client.py
    chat-local-numerical.py
    chat-local.py
    chat-persist.py
    chat-search-assistant-local.py
    chat-search-assistant.py
    chat-search.py
    chat-tool-function.py
    chat-tree-structured-simple.py
    chat-tree-structured.py
    chat-tree.py
    chat.py
    completion.py
    concurrent-tasks.py
    done_sequences_example.py
    drug-outcomes.py
    fn-call-local-numerical.py
    fn-call-local-simple.py
    intent-classifier.py
    multi-agent-medical.py
    multi-agent-return-result.py
    multi-agent-round-table.py
    multi-agent-triage.py
    oai-asst-chat.py
    oai-code-chat.py
    plan-subtasks.py
    planner-workflow-simple.py
    planner-workflow-spawn.py
    planner-workflow.py
    python-code-exec-tool.py
    schedule-extract.py
    text-to-structured.py
    tool-custom-handler.py
    tool-extract-short-example.py
    xml_tool.py
  chainlit/
    non-callback/
      chat-doc-qa-no-callback.py
      chat-no-callback.py
      chat-search-no-callback.py
      chat-stream.py
      chat-tool-no-callback.py
      README.md
    books.txt
    chainlit.md
    chat-doc-qa.py
    chat-search-assistant-local.py
    chat-search-assistant.py
    chat-search-rag.py
    chat-search.py
    chat-tool.py
    chat-transcript.py
    chat-tree-chainlit.py
    chat-with-agent.py
    chat-with-task.py
    cypher_message.py
    dependency_chatbot.py
    extract-then-chat.py
    multi-agent-nested-tool.py
    multi-agent.py
    multi-extract-3.py
    multi-extract.py
    README.md
    simplest.py
    test-step-nesting.py
  data-qa/
    sql-chat/
      sql_chat.py
      utils.py
    table_chat.py
  docqa/
    streamlit-app/
      app.py
      README.md
      requirements.txt
      utils.py
    books.txt
    chat_multi_extract.py
    chat_search.py
    chat-local.py
    chat-multi-extract-3.py
    chat-multi-extract-local.py
    chat-qa-summarize.py
    chat-search-filter.py
    chat.py
    doc-aware-chat.py
    doc-aware-compose-2.py
    doc-aware-guide-2.py
    doc-based-troubleshooting.py
    doc-chat-2.py
    doc-chat-multi-llm.py
    doc-chat-simple.py
    doc-chunk-enrich.py
    extract-then-chat.py
    filter-multi-doc-auto.py
    filter-multi-doc-manual.py
    filter-multi-doc-query-plan.py
    lance-rag-gh-issues.py
    lance-rag-movies.py
    langroid-lancedb-rag-movies.ipynb
    lease.txt
    oai-multi-extract.py
    oai-retrieval-2.py
    oai-retrieval-assistant.py
    rag-local-simple.py
  extract/
    capitals.py
    extract.py
    job_listing.txt
    kaggle_text.py
    lease.html
    lease.txt
    least-truncated.txt
    pdf-json-flex.py
    pdf-json-no-parse.py
    pdf-json.py
    README.md
  kg-chat/
    chat-arangodb-igvf.py
    chat-arangodb.py
    chat-neo4j.py
    csv-chat.py
    cypher_message.py
    dependency_chatbot.py
    DependencyChatbot.ipynb
    movies.cypher
    README.md
    text-kg-triplets.py
    text-kg.py
  langdb/
    langdb_chat_agent_docs.py
    langdb_chat_agent_tool.py
    langdb_custom_headers.py
    README.md
    requirements.txt
  mcp/
    any-mcp.py
    biomcp.py
    chainlit-mcp.py
    claude-code-mcp.py
    exa-web-search.py
    gitmcp.py
    mcp-fetch.py
    mcp-file-system.py
    memory.py
    openmemory.py
    playwright-mcp.py
    puppeteer-mcp.py
    pyodide_code_executor.py
  multi-agent-debate/
    chainlit_utils.py
    config.py
    generation_config_models.py
    main_chainlit.py
    main.py
    models.py
    README.md
    system_messages.py
    utils.py
  portkey/
    portkey_advanced_features.py
    portkey_basic_chat.py
    portkey_multi_provider.py
    README.md
    requirements.txt
  privacy/
    annotate.py
    annotate2.py
    privacy_agent.py
    privacy_annotator.py
  quick-start/
    chat-agent-docs.py
    chat-agent-tool.py
    chat-agent.py
    quick-start.ipynb
    three-agent-chat-num-router.py
    three-agent-chat-num.py
    three-agent-chat.py
    try-llm.py
    two-agent-chat-num.py
    two-agent-chat.py
  reasoning/
    agent-reasoning.py
  summarize/
    summ-batch.py
    summ.py
  langroid_quick_examples.ipynb
  Langroid_quick_start.ipynb
  Langroid_QuickStart_OpenAI_Assistants_API.ipynb
  README.md
issues/
  llm-client-caching-phase1-summary.md
  llm-client-caching-phase2-summary.md
  llm-client-caching-test-summary.md
  llm-client-caching.md
  pr-882-cached-tokens-improvements.md
  pr-openai-client-caching.md
  pr-qdrant-lock-fix.md
  qdrant-lock-issue-spec-changes.md
langroid/
  agent/
    callbacks/
      chainlit.py
    special/
      arangodb/
        arangodb_agent.py
        system_messages.py
        tools.py
        utils.py
      lance_rag/
        __init__.py
        critic_agent.py
        lance_rag_task.py
        query_planner_agent.py
      neo4j/
        csv_kg_chat.py
        neo4j_chat_agent.py
        system_messages.py
        tools.py
      sql/
        utils/
          __init__.py
          description_extractors.py
          populate_metadata.py
          system_message.py
          tools.py
        __init__.py
        sql_chat_agent.py
      __init__.py
      doc_chat_agent.py
      lance_doc_chat_agent.py
      lance_tools.py
      relevance_extractor_agent.py
      retriever_agent.py
      table_chat_agent.py
    tools/
      mcp/
        __init__.py
        decorators.py
        fastmcp_client.py
      __init__.py
      duckduckgo_search_tool.py
      exa_search_tool.py
      file_tools.py
      google_search_tool.py
      metaphor_search_tool.py
      orchestration.py
      recipient_tool.py
      retrieval_tool.py
      rewind_tool.py
      segment_extract_tool.py
      task_tool.py
      tavily_search_tool.py
    __init__.py
    base.py
    batch.py
    chat_agent.py
    chat_document.py
    done_sequence_parser.py
    openai_assistant.py
    task.py
    tool_message.py
    xml_tool_message.py
  cachedb/
    __init__.py
    base.py
    redis_cachedb.py
  embedding_models/
    protoc/
      embeddings_pb2_grpc.py
      embeddings_pb2.py
      embeddings_pb2.pyi
      embeddings.proto
    __init__.py
    base.py
    models.py
    remote_embeds.py
  language_models/
    prompt_formatter/
      __init__.py
      base.py
      hf_formatter.py
      llama2_formatter.py
    __init__.py
    azure_openai.py
    base.py
    client_cache.py
    config.py
    mock_lm.py
    model_info.py
    openai_gpt.py
    provider_params.py
    utils.py
  parsing/
    __init__.py
    agent_chats.py
    code_parser.py
    document_parser.py
    file_attachment.py
    md_parser.py
    para_sentence_split.py
    parse_json.py
    parser.py
    pdf_utils.py
    repo_loader.py
    routing.py
    search.py
    spider.py
    table_loader.py
    url_loader.py
    urls.py
    utils.py
    web_search.py
  prompts/
    __init__.py
    dialog.py
    prompts_config.py
    templates.py
  pydantic_v1/
    __init__.py
    main.py
  utils/
    algorithms/
      __init__.py
      graph.py
    output/
      __init__.py
      citations.py
      printing.py
      status.py
    __init__.py
    configuration.py
    constants.py
    git_utils.py
    globals.py
    logging.py
    object_registry.py
    pandas_utils.py
    pydantic_utils.py
    system.py
    types.py
  vector_store/
    __init__.py
    base.py
    chromadb.py
    lancedb.py
    meilisearch.py
    pineconedb.py
    postgres.py
    qdrantdb.py
    weaviatedb.py
  __init__.py
  exceptions.py
  mytypes.py
release-notes/
  v0-56-0-task-tool.md
  v0-56-11-openai-client-caching.md
  v0-56-12-cached-tokens-support.md
  v0-56-13-done-sequences-parent-chain-fixes.md
  v0-56-15-response-sequence-tracking.md
  v0-56-2-table-chat-fix.md
  v0-56-4-handler-params.md
  v0-56-6-doc-chat-refactor.md
  v0-56-7-doc-chat-deprecation-fix.md
  v0-56-8-task-tool-spawn-example.md
  v0-56-9-rrf-crossencoder-fixes.md
scripts/
  fix-pydantic-imports.sh
tests/
  extras/
    sql/
      test_automatic_context_extraction.py
    test_csv_kg_chat.py
    test_doc_chat_agent_llamacpp.py
    test_docx_parser_extra.py
    test_fastembed_embeddings.py
    test_gemini_embeddings.py
    test_hf_embeddings.py
    test_hf_vector_stores.py
    test_llamacpp_embeddings.py
    test_marker_pdf_parser.py
    test_pyarango.py
  main/
    mcp/
      weather-server-python/
        pyproject.toml
        README.md
        weather.py
    sql_chat/
      test_sql_chat_agent.py
    test_agent.py
    test_arangodb_chat_agent.py
    test_arangodb.py
    test_async_handlers.py
    test_azure_openai.py
    test_batch.py
    test_chat_agent_async.py
    test_chat_agent.py
    test_closest_string.py
    test_code_parser.py
    test_dataframe_docs.py
    test_doc_chat_agent.py
    test_doc_chat_relevance.py
    test_docx_parser.py
    test_done_sequence_parser.py
    test_done_sequences_dsl.py
    test_done_sequences.py
    test_embeddings.py
    test_file_attachment.py
    test_file_tools.py
    test_git_utils.py
    test_global_settings.py
    test_global_state.py
    test_json.py
    test_lance_doc_chat_agent.py
    test_llm_async.py
    test_llm_pdf_parser.py
    test_llm.py
    test_markitdown_parser.py
    test_mcp_tools.py
    test_md_parser.py
    test_msg_routing.py
    test_multi_agent_complex_async.py
    test_multi_agent_complex.py
    test_multi_agent.py
    test_mytypes.py
    test_neo4j_chat_agent.py
    test_object_registry.py
    test_openai_assistant_async.py
    test_openai_assistant.py
    test_openai_gpt_client_cache.py
    test_pandas_utils.py
    test_parser.py
    test_parsing_citations.py
    test_pdf_parser.py
    test_pdf_utils.py
    test_prep_llm_message.py
    test_pydantic_utils.py
    test_quiet_mode.py
    test_recipient_tool_async.py
    test_recipient_tool.py
    test_redis_cache.py
    test_relevance_extractor.py
    test_repo_chunking.py
    test_repo_loader.py
    test_retriever_agent.py
    test_rich_file_logger.py
    test_stateful_tool.py
    test_stateless_tool_messages.py
    test_string_search.py
    test_structured_output.py
    test_system_utils.py
    test_table_chat_agent.py
    test_task_inf_loop.py
    test_task_lineage_rewind.py
    test_task_optional_logger.py
    test_task_run_polymorphic.py
    test_task_tool.py
    test_task.py
    test_token_usage.py
    test_tool_handler_async.py
    test_tool_handler.py
    test_tool_messages_async.py
    test_tool_messages_azure.py
    test_tool_messages.py
    test_tool_orchestration.py
    test_url_loader.py
    test_vector_stores.py
    test_web_search_tools.py
    test_xml_tool_message.py
  conftest.py
  README.md
  test_pdf_parser_extra.py
  utils.py
.blackignore
.coveragerc
.env-template
.gitignore
.pre-commit-config.yaml
bump_version.sh
chainlit.md
CLAUDE.md
CODE_OF_CONDUCT.md
CONTRIBUTING.md
Dockerfile
LICENSE
Makefile
mkdocs.yml
pyproject.toml
pytest.ini
README.md
SECURITY.md
setup.cfg
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="docs/blog/posts/chat-completion.md">
---
title: 'Language Models: Completion and Chat-Completion'
draft: false
date: 2023-09-19
authors: 
  - pchalasani
categories:
  - langroid
  - llm
  - local-llm
  - chat
comments: true
---

Transformer-based language models are fundamentally next-token predictors, so 
naturally all LLM APIs today at least provide a completion endpoint. 
If an LLM is a next-token predictor, how could it possibly be used to 
generate a response to a question or instruction, or to engage in a conversation with 
a human user? This is where the idea of "chat-completion" comes in.
This post is a refresher on the distinction between completion and chat-completion,
and some interesting details on how chat-completion is implemented in practice.

<!-- more -->

## Language Models as Next-token Predictors

A Language Model is essentially a "next-token prediction" model,
and so all LLMs today provide a "completion" endpoint, typically something like:
`/completions` under the base URL.

The endpoint simply takes a prompt and returns a completion (i.e. a continuation).

A typical prompt sent to a completion endpoint might look like this:
```
The capital of Belgium is 
```
and the LLM will return a completion like this:
```
Brussels.
```
OpenAI's GPT3 is an example of a pure completion LLM.
But interacting with a completion LLM is not very natural or useful:
you cannot give instructions or ask questions; instead you would always need to 
formulate your input as a prompt whose natural continuation is your desired output.
For example, if you wanted the LLM to highlight all proper nouns in a sentence,
you would format it as the following prompt:

**Chat-To-Prompt Example:** Chat/Instruction converted to a completion prompt.

```
User: here is a sentence, the Assistant's task is to identify all proper nouns.
     Jack lives in Bosnia, and Jill lives in Belgium.
Assistant:    
```
The natural continuation of this prompt would be a response listing the proper nouns,
something like:
```
John, Bosnia, Jill, Belgium are all proper nouns.
```

This _seems_ sensible in theory, but a "base" LLM that performs well on completions
may _not_ perform well on these kinds of prompts. The reason is that during its training, it may not
have been exposed to very many examples of this type of prompt-response pair.
So how can an LLM be improved to perform well on these kinds of prompts?

## Instruction-tuned, Aligned LLMs 

This brings us to the heart of the innovation behind the wildly popular ChatGPT:
it uses an enhancement of GPT3 that (besides having a lot more parameters),
was _explicitly_ fine-tuned on instructions (and dialogs more generally) -- this is referred to
as **instruction-fine-tuning** or IFT for short. In addition to fine-tuning instructions/dialogs,
the models behind ChatGPT (i.e., GPT-3.5-Turbo and GPT-4) are further tuned to produce
responses that _align_ with human preferences (i.e. produce responses that are more helpful and safe),
using a procedure called Reinforcement Learning with Human Feedback (RLHF).
See this [OpenAI InstructGPT Paper](https://arxiv.org/pdf/2203.02155.pdf) for details on these techniques and references to the 
original papers that introduced these ideas. Another recommended read is Sebastian 
Raschka's post on [RLHF and related techniques](https://magazine.sebastianraschka.com/p/llm-training-rlhf-and-its-alternatives). 

For convenience, we refer to the combination of IFT and RLHF as **chat-tuning**.
A chat-tuned LLM can be expected to perform well on prompts such as the one in 
the Chat-To-Prompt Example above. These types of prompts are still unnatural, however, 
so as a convenience, chat-tuned LLM API servers also provide a "chat-completion" 
endpoint (typically `/chat/completions` under the base URL), which allows the user
to interact with them in a natural dialog, which might look like this
(the portions in square brackets are indicators of who is generating the text):

```
[User] What is the capital of Belgium?
[Assistant] The capital of Belgium is Brussels.
```
or
```
[User] In the text below, find all proper nouns:
    Jack lives in Bosnia, and Jill lives in Belgium.
[Assistant] John, Bosnia, Jill, Belgium are all proper nouns.
[User] Where does John live?
[Assistant] John lives in Bosnia.
```

## Chat Completion Endpoints: under the hood

How could this work, given that LLMs are fundamentally next-token predictors?
This is a convenience provided by the LLM API service (e.g. from OpenAI or
local model server libraries):
when a user invokes the chat-completion endpoint (typically
at `/chat/completions` under the base URL), under the hood, the server converts the
instructions and multi-turn chat history into a single string, with annotations indicating
user and assistant turns, and ending with something like "Assistant:"
as in the Chat-To-Prompt Example above.

Now the subtle detail to note here is this:

>It matters _how_ the
dialog (instructions plus chat history) is converted into a single prompt string.
Converting to a single prompt by simply concatenating the
instructions and chat history using an "intuitive" format (e.g. indicating
user, assistant turns using "User", "Assistant:", etc.) _can_ work,
however most local LLMs are trained on a _specific_ prompt format.
So if we format chats in a different way, we may get odd/inferior results.

## Converting Chats to Prompts: Formatting Rules

For example, the llama2 models are trained on a format where the user's input is bracketed within special strings `[INST]`
and `[/INST]`. There are other requirements that we don't go into here, but
interested readers can refer to these links:

- A reddit thread on the [llama2 formats](https://www.reddit.com/r/LocalLLaMA/comments/155po2p/get_llama_2_prompt_format_right/)
- Facebook's [llama2 code](https://github.com/facebookresearch/llama/blob/main/llama/generation.py#L44)
- Langroid's [llama2 formatting code](https://github.com/langroid/langroid/blob/main/langroid/language_models/prompt_formatter/llama2_formatter.py)

A dialog fed to a Llama2 model in its expected prompt format would look like this:

```
<s>[INST] <<SYS>>
You are a helpful assistant.
<</SYS>>

Hi there! 
[/INST] 
Hello! How can I help you today? </s>
<s>[INST] In the text below, find all proper nouns:
    Jack lives in Bosnia, and Jill lives in Belgium.
 [/INST] 
John, Bosnia, Jill, Belgium are all proper nouns. </s><s> 
[INST] Where does Jack live? [/INST] 
Jack lives in Bosnia. </s><s>
[INST] And Jill? [/INST]
Jill lives in Belgium. </s><s>
[INST] Which are its neighboring countries? [/INST]
```

This means that if an LLM server library wants to provide a chat-completion endpoint for
a local model, it needs to provide a way to convert chat history to a single prompt
using the specific formatting rules of the model.
For example the [`oobabooga/text-generation-webui`](https://github.com/oobabooga/text-generation-webui) 
library has an extensive set of chat formatting [templates](https://github.com/oobabooga/text-generation-webui/tree/main/instruction-templates)
for a variety of models, and their model server auto-detects the
format template from the model name.

!!! note "Chat completion model names: look for 'chat' or 'instruct' in the name"
    You can search for a variety of models on the [HuggingFace model hub](https://huggingface.co/models).
    For example if you see a name `Llama-2-70B-chat-GGUF` you know it is chat-tuned.
    Another example of a chat-tuned model is `Llama-2-7B-32K-Instruct` 
    
A user of these local LLM server libraries thus has two options when using a 
local model in chat mode:

- use the _chat-completion_ endpoint, and let the underlying library handle the chat-to-prompt formatting, or
- first format the chat history according to the model's requirements, and then use the
  _completion_ endpoint

## Using Local Models in Langroid

Local models can be used in Langroid by defining a `LocalModelConfig` object.
More details are in this [tutorial](https://langroid.github.io/langroid/blog/2023/09/14/using-langroid-with-local-llms/), 
but here we briefly discuss prompt-formatting in this context.
Langroid provides a built-in [formatter for LLama2 models](https://github.com/langroid/langroid/blob/main/langroid/language_models/prompt_formatter/llama2_formatter.py), 
so users looking to use llama2 models with langroid can try either of these options, by setting the
`use_completion_for_chat` flag in the `LocalModelConfig` object
(See the local-LLM [tutorial](https://langroid.github.io/langroid/blog/2023/09/14/using-langroid-with-local-llms/) for details).

When this flag is set to `True`, the chat history is formatted using the built-in 
Langroid llama2 formatter and the completion endpoint are used. When the flag is set to `False`, the chat 
history is sent directly to the chat-completion endpoint, which internally converts the 
chat history to a prompt in the expected llama2 format.

For local models other than Llama2, users can either:

- write their own formatters by writing a class similar to `Llama2Formatter` and 
then setting the `use_completion_for_chat` flag to `True` in the `LocalModelConfig` object, or
- use an LLM server library (such as the `oobabooga` library mentioned above) that provides a chat-completion endpoint, 
_and converts chats to single prompts under the hood,_ and set the
  `use_completion_for_chat` flag to `False` in the `LocalModelConfig` object.

You can use a similar approach if you are using an LLM application framework other than Langroid.


<iframe src="https://langroid.substack.com/embed" width="480" height="320" style="border:1px solid #EEE; background:white;" frameborder="0" scrolling="no"></iframe>
</file>

<file path="docs/blog/posts/langroid-architecture.md">
---
title: "Overview of Langroid's Multi-Agent Architecture (prelim)"
draft: false
date: 2024-08-15
authors:
- pchalasani
- nils
- jihye
- someshjha
categories:
- langroid
- multi-agent
- llm
comments: true
---


## Agent, as an intelligent message transformer

A natural and convenient abstraction in designing a complex
LLM-powered system is the notion of an *agent* that is instructed to be responsible for a specific aspect of the 
overall task. In terms of code, an *Agent* is essentially a class representing an intelligent entity that can 
respond to *messages*, i.e., an agent is simply a *message transformer*.
An agent typically encapsulates an (interface to an) LLM, and may also be equipped with so-called *tools* (as 
described below) and *external documents/data* (e.g., via a vector database, as described below).
Much like a team of humans, agents interact by exchanging messages, in a manner reminiscent of the 
[*actor framework*](https://en.wikipedia.org/wiki/Actor_model) in programming languages.
An *orchestration mechanism* is needed to manage the flow of messages between agents, to ensure that progress is 
made towards completion of the task, and to handle the inevitable cases where an agent deviates from instructions.
Langroid is founded on this *multi-agent programming* paradigm, where agents are 
first-class citizens, acting as message transformers, and communicate by exchanging messages.

<!-- more -->

To build useful applications with LLMs, we need to endow them with the ability to
trigger actions (such as API calls, computations, database queries, etc) or send structured messages to other agents 
or downstream processes. *Tools* provide these capabilities, described next.

## Tools, also known as functions

An LLM is essentially a text transformer; i.e.,  in response to some input text, 
it produces a text response. Free-form text responses are ideal when we want to generate a description, answer, or summary for human consumption, or even a question for another agent to answer.
However, in some cases, we would like the responses to be more structured, for example 
to trigger external *actions* (such as an API call, code execution, or a database query),
or for unambiguous/deterministic handling by a downstream process or another agent. 
In such cases, we would instruct the LLM to produce a *structured* output, typically in JSON format, with various 
pre-specified fields, such as code, an SQL query, parameters of an API call, and so on. These structured responses 
have come to be known as *tools*, and the LLM is said to *use* a tool when it produces a structured response 
corresponding to a specific tool. To elicit a tool response from an LLM, it needs to be instructed on the expected tool format and the conditions under which it should use the tool.
To actually use a tool emitted by an LLM, a *tool handler* method must be defined as well.
The tool handler for a given tool is triggered when it is recognized in the LLM's response.

### Tool Use: Example

As a simple example, a SQL query tool can be specified as a JSON structure with a `sql` 
field (containing the SQL query) and a `db` field (containing the name of the database).
The LLM may be instructed with a system prompt of the form:
> When the user asks a question about employees, use the SQLTool described in the below schema,
> and the results of this tool will be sent back to you, and you can use these to respond to
> the user's question, or correct your SQL query if there is a syntax error.

The tool handler would detect this specific tool in the LLM's response, parse this JSON structure, 
extract the `sql` and `db` fields, run the query on the specified database, 
and return the result if the query ran successfully, otherwise return an error message.
Depending on how the multi-agent system is organized, the query result or error message may be handled by the same agent
(i.e., its LLM), which may either summarize the results in narrative form, or revise the query if the error message 
indicates a syntax error.

## Agent-oriented programming: Function-Signatures

If we view an LLM as a function with signature `string -> string`,
it is possible to express the concept of an agent, tool, and other constructs
in terms of derived function signatures, as shown in the table below.
Adding `tool` (or function calling) capability to an LLM requires a parser (that recognizes 
that the LLM has generated a tool) and a callback that performs arbitrary computation and returns a string.
The serialized instances of tools `T` correspond to a language `L`; 
Since by assumption, the LLM is capable of producing outputs in $L$, 
this allows the LLM to express the intention to execute a Callback with arbitrary instances 
of `T`. In the last row, we show how an Agent can be viewed as a function signature
involving its state `S`.


| Function Description | Function Signature                                                                                                |
|----------------------|-------------------------------------------------------------------------------------------------------------------|
| LLM | `[Input Query] -> string` <br> `[Input Query]` is the original query.                                             |
| Chat interface | `[Message History] x [Input Query] -> string` <br> `[Message History]` consists of  previous messages[^1].        |
| Agent | `[System Message] x [Message History] x [Input Query] -> string` <br> `[System Message]` is the system prompt. |
| Agent with tool | `[System Message] x (string -> T) x (T -> string) x [Message History] x [Input Query] -> string`                  |
| Parser with type `T` | `string -> T`                                                                                                     |
| Callback with type `T` | `T -> string`                                                                                                     |
| General Agent with state type `S` | `S x [System Message] x (string -> T) x (S x T -> S x string) x [Message History] x [Input Query] -> S x string`  |

[^1]: Note that in reality, separator tokens are added to distinguish messages, and the messages are tagged with metadata indicating the sender, among other things.

## Multi-Agent Orchestration


### An Agent's "Native" Responders

When building an LLM-based multi-agent system, an orchestration mechanism is critical to manage the flow of messages 
between agents, to ensure task progress, and handle inevitable LLM deviations from instructions. Langroid provides a 
simple yet versatile orchestration mechanism that seamlessly handles:

- user interaction,
- tool handling,
- sub-task delegation

We view an agent as a message transformer; 
it may transform an incoming message using one of its three "native" responder methods, all of which have the same 
function signature: `string -> string`. These methods are:

- `llm_response` returns the LLM's response to the input message.
Whenever this method is invoked, the agent updates its dialog history (typically consisting of alternating user and LLM messages).
- `user_response` prompts the user for input and returns their response.
- `agent_response` by default only handles a `tool message` (i.e., one that contains an llm-generated structured 
response): it performs any requested actions, and returns the result as a string. An `agent_response` method can have 
other uses besides handling tool messages, such as handling scenarios where an LLM ``forgot'' to use a tool, 
or used a tool incorrectly, and so on.

To see why it is useful to have these responder methods, consider first a simple example of creating a basic chat loop
with the user. It is trivial to create such a loop by alternating between `user_response` and `llm_response`. 
Now suppose we instruct the agent to either directly answer the user's question or perform a web-search. Then it is possible that
sometimes the `llm_response` will produce a "tool message", say `WebSearchTool`, which we would handle with the
`agent_response` method. This requires a slightly different, and more involved, way of iterating among the agent's
responder methods. 

### Tasks: Encapsulating Agent Orchestration

From a coding perspective, it is useful to hide the actual iteration logic by wrapping an Agent class
in a separate class, which we call a `Task`, which encapsulates all of the orchestration logic. Users of the Task class
can then define the agent, tools, and any sub-tasks, wrap the agent in a task object of class Task, and simply call
`task.run()`, letting the Task class deal with the details of orchestrating the agent's responder methods, determining
task completion, and invoking sub-tasks.

### Responders in a Task: Agent's native responders and sub-tasks

The orchestration mechanism of a `Task` object works as follows. When a `Task` object is created from an agent, a 
sequence of eligible responders is created, which includes the agent's three "native" responder agents in the sequence:
`agent_response`, `llm_response`, `user_response`. 
The type signature of the task's run method is `string -> string`, just like the Agent's
native responder methods, and this is the key to seamless delegation of tasks to sub-tasks. A list of subtasks can be
added to a `Task` object via `task.add_sub_tasks([t1, t2, ... ])`, where `[t1, t2, ...]` are other 
`Task` objects. The result of this is that the run method of each sub-task is appended to the sequence of eligible 
responders in the parent task object.

### Task Orchestration: Updating the Current Pending Message (CPM)

A task always maintains a *current pending message* (CPM), which is the latest message "awaiting" a valid response 
from a responder, which updates the CPM. 
At a high level the `run` method of a task attempts to repeatedly find a valid response to the 
CPM, until the task is done. (Note that this paradigm is somewhat reminescent of a *Blackboard* architecture, where
agents take turns deciding whether they can update the shared message on the "blackboard".)
This is achieved by repeatedly invoking the `step` method, which represents a "turn" in the conversation.
The `step` method sequentially tries the eligible responders from the beginning of the eligible-responders list, until it
finds a valid response, defined as a non-null or terminating message (i.e. one that signals that the task is done). In
particular, this `step()` algorithm implies that a Task delegates (or "fails over") to a sub-task only if the task's 
native responders have no valid response. 

There are a few simple rules that govern how `step` works: 

- a responder entity (either a sub-task or a native entity -- one of LLM, Agent, or User) cannot 
  respond if it just responded in the previous step (this prevents a responder from "talking to itself". 
- when a response signals that the task is done (via a `DoneTool` or a "DONE" string) the task is ready to exit and 
  return the CPM as the result of the task. 
- when an entity "in charge" of the task has a null response, the task is considered finished and ready to exit.
- if the response of an entity or subtask is a structured message containing a recipient field, then the specified recipient task or entity will
be the only one eligible to respond at the next step.

Once a valid response is found in a step, the CPM is updated to this response, and the next step starts the search for a
valid response from the beginning of the eligible responders list. When a response signals that the task is done, 
the run method returns the CPM as the result of the task. This is a highly
simplified account of the orchestration mechanism, and the actual implementation is more involved.

The above simple design is surprising powerful and can support a wide variety of task structures, including trees and
DAGs. As a simple illustrative example, tool-handling has a natural implementation. The LLM is instructed to use a
certain JSON-structured message as a tool, and thus the `llm_response` method can produce a structured message, such 
as an SQL query.  This structured message is then handled by the `agent_response` method, and the resulting message updates the CPM. The
`llm_response` method then becomes eligible to respond again: for example if the agent's response contains an SQL 
error, the LLM would retry its query, and if the agent's response consists of the query results, the LLM would
respond with a summary of the results.

The Figure below depicts the task orchestration and delegation mechanism,
showing how iteration among responder methods works when a  Task `T` has sub-tasks `[T1, T2]` and `T1` has a 
sub-task `T3`. 


![langroid-arch.png](figures/langroid-arch.png)
</file>

<file path="docs/blog/posts/langroid-intro.md">
---
title: 'Langroid: Harness LLMs with Multi-Agent Programming'
draft: false
date: 2023-09-03
authors: 
  - pchalasani
categories:
  - langroid
  - llm
comments: true
---

# Langroid: Harness LLMs with Multi-Agent Programming

## The LLM Opportunity

Given the remarkable abilities of recent Large Language Models (LLMs), there
is an unprecedented opportunity to build intelligent applications powered by
this transformative technology. The top question for any enterprise is: how
best to harness the power of LLMs for complex applications? For technical and
practical reasons, building LLM-powered applications is not as simple as
throwing a task at an LLM-system and expecting it to do it.

<!-- more -->


## Langroid's Multi-Agent Programming Framework

Effectively leveraging LLMs at scale requires a *principled programming
framework*. In particular, there is often a need to maintain multiple LLM
conversations, each instructed in different ways, and "responsible" for
different aspects of a task.


An *agent* is a convenient abstraction that encapsulates LLM conversation
state, along with access to long-term memory (vector-stores) and tools (a.k.a functions
or plugins). Thus a **Multi-Agent Programming** framework is a natural fit
for complex LLM-based applications.

> Langroid is the first Python LLM-application framework that was explicitly
designed  with Agents as first-class citizens, and Multi-Agent Programming
as the core  design principle. The framework is inspired by ideas from the
[Actor Framework](https://en.wikipedia.org/wiki/Actor_model).

Langroid allows an intuitive definition of agents, tasks and task-delegation
among agents. There is a principled mechanism to orchestrate multi-agent
collaboration. Agents act as message-transformers, and take turns responding to (and
transforming) the current message. The architecture is lightweight, transparent,
flexible, and allows other types of orchestration to be implemented.
Besides Agents, Langroid also provides simple ways to directly interact with LLMs and vector-stores.


## Highlights
- **Agents as first-class citizens:** The `Agent` class encapsulates LLM conversation state,
  and optionally a vector-store and tools. Agents are a core abstraction in Langroid;
  Agents act as _message transformers_, and by default provide 3 _responder_ methods, one corresponding to each
  entity: LLM, Agent, User.
- **Tasks:** A Task class wraps an Agent, gives the agent instructions (or roles, or goals),
  manages iteration over an Agent's responder methods,
  and orchestrates multi-agent interactions via hierarchical, recursive
  task-delegation. The `Task.run()` method has the same
  type-signature as an Agent's responder's methods, and this is key to how
  a task of an agent can delegate to other sub-tasks: from the point of view of a Task,
  sub-tasks are simply additional responders, to be used in a round-robin fashion
  after the agent's own responders.
- **Modularity, Reusability, Loose coupling:** The `Agent` and `Task` abstractions allow users to design
  Agents with specific skills, wrap them in Tasks, and combine tasks in a flexible way.
- **LLM Support**: Langroid supports OpenAI LLMs including GPT-3.5-Turbo,
  GPT-4.
- **Caching of LLM prompts, responses:** Langroid by default uses [Redis](https://redis.com/try-free/) for caching.
- **Vector-stores**: [Qdrant](https://qdrant.tech/), [Chroma](https://www.trychroma.com/), LanceDB, Pinecone, PostgresDB (PGVector), Weaviate are currently supported.
  Vector stores allow for Retrieval-Augmented-Generaation (RAG).
- **Grounding and source-citation:** Access to external documents via vector-stores
  allows for grounding and source-citation.
- **Observability, Logging, Lineage:** Langroid generates detailed logs of multi-agent interactions and
  maintains provenance/lineage of messages, so that you can trace back
  the origin of a message.
- **Tools/Plugins/Function-calling**: Langroid supports OpenAI's recently
  released [function calling](https://platform.openai.com/docs/guides/gpt/function-calling)
  feature. In addition, Langroid has its own native equivalent, which we
  call **tools** (also known as "plugins" in other contexts). Function
  calling and tools have the same developer-facing interface, implemented
  using [Pydantic](https://docs.pydantic.dev/latest/),
  which makes it very easy to define tools/functions and enable agents
  to use them. Benefits of using Pydantic are that you never have to write
  complex JSON specs for function calling, and when the LLM
  hallucinates malformed JSON, the Pydantic error message is sent back to
  the LLM so it can fix it!

<iframe src="https://langroid.substack.com/embed" width="480" height="320" style="border:1px solid #EEE; background:white;" frameborder="0" scrolling="no"></iframe>
</file>

<file path="docs/blog/posts/langroid-knowledge-graph.md">
---
title: 'Langroid: Knolwedge Graph RAG powered by Neo4j'
draft: false
date: 2024-01-18
authors: 
  - mohannad
categories:
  - langroid
  - neo4j
  - rag
  - knowledge-graph
comments: true
---

## "Chat" with various sources of information
LLMs are increasingly being used to let users converse in natural language with 
a variety of types of data sources:
<!-- more -->
- unstructured text documents: a user's query is augmented with "relevant" documents or chunks
  (retrieved from an embedding-vector store) and fed to the LLM to generate a response -- 
  this is the idea behind Retrieval Augmented Generation (RAG).
- SQL Databases: An LLM translates a user's natural language question into an SQL query,
  which is then executed by another module, sending results to the LLM, so it can generate
  a natural language response based on the results.
- Tabular datasets: similar to the SQL case, except instead of an SQL Query, the LLM generates 
  a Pandas dataframe expression.

Langroid has had specialized Agents for the above scenarios: `DocChatAgent` for RAG with unstructured
text documents, `SQLChatAgent` for SQL databases, and `TableChatAgent` for tabular datasets.

## Adding support for Neo4j Knowledge Graphs

Analogous to the SQLChatAgent, Langroid now has a 
[`Neo4jChatAgent`](https://github.com/langroid/langroid/blob/main/langroid/agent/special/neo4j/neo4j_chat_agent.py) 
to interact with a Neo4j knowledge graph using natural language.
This Agent has access to two key tools that enable it to handle a user's queries:

- `GraphSchemaTool` to get the schema of a Neo4j knowledge graph.
- `CypherRetrievalTool` to generate Cypher queries from a user's query.
Cypher is a specialized query language for Neo4j, and even though it is not as widely known as SQL,
most LLMs today can generate Cypher Queries.

Setting up a basic Neo4j-based RAG chatbot is straightforward. First ensure 
you set these environment variables (or provide them in a `.env` file):
```bash
NEO4J_URI=<uri>
NEO4J_USERNAME=<username>
NEO4J_PASSWORD=<password>
NEO4J_DATABASE=<database>
```

Then you can configure and define a `Neo4jChatAgent` like this:
```python
import langroid as lr
import langroid.language_models as lm

from langroid.agent.special.neo4j.neo4j_chat_agent import (
    Neo4jChatAgent,
    Neo4jChatAgentConfig,
    Neo4jSettings,
)

llm_config = lm.OpenAIGPTConfig()

load_dotenv()

neo4j_settings = Neo4jSettings()

kg_rag_agent_config = Neo4jChatAgentConfig(
    neo4j_settings=neo4j_settings,
    llm=llm_config, 
)
kg_rag_agent = Neo4jChatAgent(kg_rag_agent_config)
kg_rag_task = lr.Task(kg_rag_agent, name="kg_RAG")
kg_rag_task.run()
```


## Example: PyPi Package Dependency Chatbot

In the Langroid-examples repository, there is an example python 
[script](https://github.com/langroid/langroid-examples/blob/main/examples/kg-chat/)
showcasing tools/Function-calling + RAG using a `DependencyGraphAgent` derived from [`Neo4jChatAgent`](https://github.com/langroid/langroid/blob/main/langroid/agent/special/neo4j/neo4j_chat_agent.py).
This agent uses two tools, in addition to the tools available to `Neo4jChatAgent`:

- `GoogleSearchTool` to find package version and type information, as well as to answer 
 other web-based questions after acquiring the required information from the dependency graph.
- `DepGraphTool` to construct a Neo4j knowledge-graph modeling the dependency structure
   for a specific package, using the API at [DepsDev](https://deps.dev/).

In response to a user's query about dependencies, the Agent decides whether to use a Cypher query
or do a web search. Here is what it looks like in action:

<figure markdown>
  ![dependency-demo](../../assets/demos/dependency_chatbot.gif)
  <figcaption>
Chatting with the `DependencyGraphAgent` (derived from Langroid's `Neo4jChatAgent`).
When a user specifies a Python package name (in this case "chainlit"), the agent searches the web using
`GoogleSearchTool` to find the version of the package, and then uses the `DepGraphTool`
to construct the dependency graph as a neo4j knowledge graph. The agent then answers
questions by generating Cypher queries to the knowledge graph, or by searching the web.
  </figcaption>
</figure>
</file>

<file path="docs/blog/posts/langroid-lancedb.md">
---
title: 'Langroid: Multi-Agent Programming Framework for LLMs'
draft: true
date: 2024-01-10
authors: 
  - pchalasani
categories:
  - langroid
  - lancedb
  - rag
  - vector-database
comments: true
---

## Langroid: Multi-Agent Programming framework for LLMs

In this era of Large Language Models (LLMs), there is unprecedented demand to
create intelligent applications powered by this transformative technology. What
is the best way for developers to harness the potential of LLMs in complex
application scenarios? For a variety of technical and practical reasons (context
length limitations, LLM brittleness, latency, token-costs), this is not as
simple as throwing a task at an LLM system and expecting it to get done. What is
needed is a principled programming framework, offering the right set of
abstractions and primitives to make developers productive when building LLM
applications.
<!-- more -->
## Langroid's Elegant Multi-Agent Paradigm

The [Langroid](https://github.com/langroid/langroid) team (ex-CMU/UW-Madison researchers) 
has a unique take on this – they have built an open source Python framework to 
simplify LLM application development, using a Multi-Agent Programming paradigm. 
Langroid’s architecture is founded on Agents as first-class citizens: 
they are message-transformers, and accomplish tasks collaboratively via messages.

Langroid is emerging as a popular LLM framework; developers appreciate its clean
design and intuitive, extensible architecture. Programming with Langroid is
natural and even fun: you configure Agents and equip them with capabilities (
such as LLMs, vector-databases, Function-calling/tools), connect them and have
them collaborate via messages. This is a “Conversational Programming” paradigm,
and works with local/open and remote/proprietary LLMs. (Importantly, it does not
use LangChain or any other existing LLM framework).

<figure markdown>
  ![Langroid-card](../../assets/langroid-card-ossem-rust-1200x630.png){ width="800" }
  <figcaption>
An Agent serves as a convenient abstraction, encapsulating the state of LLM
conversations, access to vector stores, and various tools (functions or
plugins). A Multi-Agent Programming framework naturally aligns with the demands
of complex LLM-based applications.
</figcaption>
</figure>



## Connecting Agents via Tasks

In Langroid, a ChatAgent has a set of “responder” methods, one for each "entity":
an LLM, a human, and a tool-handler. However it does not have any way to iterate through
these responders. This is where the Task class comes in: A Task wraps an Agent
and gives it the ability to loop through its responders, via the `Task.run()` method. 

A Task loop is organized around simple rules that govern when a responder is eligible
to respond, what is considered a valid response, and when the task is complete.
The simplest example of a Task loop is an interactive chat with the human user. 
A Task also enables an Agent to interact with other agents: 
other tasks can be added to a task as sub-tasks, 
in a recursive, hierarchical (or DAG) structure. From a Task’s perspective,
sub-tasks are just additional responders, and present the same string-to-string 
message-transformation interface (function signature) as the Agent’s "native" responders. 
This is the key to composability of tasks in Langroid,
since a sub-task can act the same way as an Agent's "native" responders, and is subject
to the same rules of task orchestration. The result is that the same task orchestration
mechanism seamlessly enables tool handling, retries when LLM deviates, and 
delegation to sub-tasks. More details are in the Langroid [quick-start guide](https://langroid.github.io/langroid/quick-start/)

## A Taste of Coding with Langroid

To get started with Langroid, simply install it from pypi into your virtual environment:

```bash
pip install langroid
```
To directly chat with an OpenAI LLM, define the LLM configuration,
instantiate a language model object and interact with it:
(Langroid works with non-OpenAI local/propreitary LLMs as well,
see their [tutorial](https://langroid.github.io/langroid/tutorials/non-openai-llms/)) 
For the examples below, ensure you have a file `.env` containing your OpenAI API key
with this line: `OPENAI_API_KEY=sk-...`.
    
```python
import langroid as lr
import langroid.language_models as lm

llm_cfg = lm.OpenAIGPTConfig() # default GPT4-Turbo
mdl = lm.OpenAIGPT(llm_cfg)
mdl.chat("What is 3+4?", max_tokens=10)
```
The mdl does not maintain any conversation state; for that you need a `ChatAgent`:

```python
agent_cfg = lr.ChatAgentConfig(llm=llm_cfg)
agent = lr.ChatAgent(agent_cfg)
agent.llm_response("What is the capital of China?")
agent.llm_response("What about France?") # interprets based on previous msg
```
Wrap a ChatAgent in a Task to create a basic interactive loop with the user:

```python
task = lr.Task(agent, name="Bot")
task.run("Hello")
```
Have a Teacher Agent talk to a Student Agent:
    
```python
teacher = lr.ChatAgent(agent_cfg)
teacher_task = lr.Task(
    teacher, name="Teacher",
    system_message="""
        Ask your student simple number-based questions, and give feedback.
        Start with a question.
        """,
)
student = lr.ChatAgent(agent_cfg)
student_task = lr.Task(
    student, name="Student",
    system_message="Concisely answer your teacher's questions."
)
teacher_task.add_sub_task(student_task)
teacher_task.run()
```



## Retrieval Augmented Generation (RAG) and Vector Databases

One of the most popular LLM applications is question-answering 
on documents via Retrieval-Augmented Generation (RAG), powered by a vector database.
Langroid has a built-in DocChatAgent that incorporates a number of advanced RAG techniques, 
clearly laid out so they can be easily understood and extended.

### Built-in Support for LanceDB
<figure markdown>
  ![Langroid-lance](../../assets/langroid-lance.png){ width="800" }
  <figcaption>
Langroid uses LanceDB as the default vector store for its DocChatAgent.
</figcaption>
</figure>

Langroid's DocChatAgent uses the LanceDB serverless vector-database by default.
Since LanceDB uses file storage, it is easy to set up and use (no need for docker or cloud services),
and due to its use of the Lance columnar format, it is 
highly performant and scalable. 
In addition, Langroid has a specialized `LanceDocChatAgent` that leverages LanceDB's 
unique features such as Full-text search, SQL-like filtering, and pandas dataframe interop.
Setting up a basic RAG chatbot is as simple as (assume the previous imports):

```python
from langroid.agent.special.lance_doc_chat_agent import import (
    LanceDocChatAgent, DocChatAgentConfig
)
llm_config = lm.OpenAIGPTConfig()

rag_agent_config = DocChatAgentConfig(
    llm=llm_config, 
    doc_paths=["/path/to/my/docs"], # files, folders, or URLs.
)
rag_agent = LanceDocChatAgent(rag_agent_config)
rag_task = lr.Task(rag_agent, name="RAG")
rag_task.run()
```

For an example showcasing Tools/Function-calling + RAG in a multi-agent setup, see their quick-start
[Colab notebook](https://colab.research.google.com/github/langroid/langroid/blob/main/examples/Langroid_quick_start.ipynb)
which shows a 2-agent system where one agent is tasked with extracting structured information
from a document, and generates questions for the other agent to answer using RAG.
In the Langroid-examples repo there is a [script](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/chat_multi_extract.py) with the same functionality,
and here is what it looks like in action:


<figure markdown>
  ![lease-demo](../../assets/demos/lease-extractor-demo.gif){ width="800" }
  <figcaption>
Extracting structured info from a Commercial Lease using a 2-agent system, with 
a Tool/Function-calling and RAG. The Extractor Agent is told to extract information
in a certain structure, and it generates questions for the Document Agent
to answer using RAG.
</figcaption>
</figure>

## Retrieval Augmented Analytics

One of the unique features of LanceDB is its SQL-like filtering and Pandas dataframe interoperability.
LLMs are great at generating SQL queries, and also Pandas computation code such as `df.groupby("col").mean()`.
This opens up a very interesting possibility, which we call
**Retrieval Augmented Analytics:** Suppose a user has a large dataset of movie descriptions
with metadata such as rating, year and genre, and wants to ask:

> What is the highest-rated Comedy movie about college students made after 2010?

It is not hard to imagine that an LLM should be able to generate a **Query Plan** to answer this,
consisting of:

- A SQL-like filter: `genre = "Comedy" and year > 2010`
- A Pandas computation: `df.loc[df["rating"].idxmax()]`
- A rephrased query given the filter: "Movie about college students" (used for semantic/lexical search)

Langroid's Multi-Agent framework enables exactly this type of application. 
The [`LanceRAGTaskCreator`](https://github.com/langroid/langroid/blob/main/langroid/agent/special/lance_rag/lance_rag_task.py) takes a `LanceDocChatAgent` and adds two additional agents:

- QueryPlannerAgent: Generates the Query Plan
- QueryPlanCriticAgent: Critiques the Query Plan and Answer received from the RAG Agent, so that 
  the QueryPlanner can generate a better plan if needed.

Checkout the [`lance-rag-movies.py`](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/lance-rag-movies.py) script in the langroid-examples repo to try this out.

## Try it out and get involved!
This was just a glimpse of what you can do with Langroid and how your code would look.
Give it a shot and learn more about the features and roadmap of Langroid on their 
[GitHub repo](https://github.com/langroid/langroid). Langroid welcomes contributions,
and they have a friendly [Discord](https://discord.gg/ZU36McDgDs) community.

If you like it, don’t forget to drop a 🌟.
</file>

<file path="docs/blog/posts/local-llm-formatting.md">
---
title: 'Chat formatting in Local LLMs'
draft: true
date: 2024-01-25
authors: 
  - pchalasani
categories:
  - langroid
  - prompts
  - llm
  - local-llm
comments: true
---


In an (LLM performance) investigation, details matter!

And assumptions kill (your LLM performance).

I'm talking about chat/prompt formatting, especially when working with Local LLMs.

TL/DR -- details like chat formatting matter a LOT,
and trusting that the local LLM API is doing it correctly may be a mistake,
leading to inferior results.

<!-- more -->

🤔Curious? Here are some notes from the trenches when we built an app
(https://github.com/langroid/langroid/blob/main/examples/docqa/chat-multi-extract-local.py)
based entirely on a locally running Mistral-7b-instruct-v0.2  
(yes ONLY 7B parameters, compared to 175B+ for GPT4!)
that leverages Langroid Multi-agents, Tools/Function-calling and RAG to
reliably extract structured information from a document,
where an Agent is given a spec of the desired structure, and it generates
questions for another Agent to answer using RAG.

🔵LLM API types: generate and chat
LLMs are typically served behind two types of APIs endpoints:
⏺ A "generation" API, which accepts a dialog formatted as a SINGLE string, and
⏺ a "chat" API, which accepts the dialog as a LIST,
and as convenience formats it into a single string before sending to the LLM.

🔵Proprietary vs Local LLMs
When you use a proprietary LLM API (such as OpenAI or Claude), for convenience
you can use their "chat" API, and you can trust that it will format the dialog
history correctly (or else they wouldn't be in business!).

But with a local LLM, you have two choices of where to send the dialog history:
⏺ you could send it to the "chat" API and trust that the server will format it correctly,
⏺ or you could format it yourself and send it to the "generation" API.

🔵Example of prompt formatting?
Suppose your system prompt and dialog look like this:

System Prompt/Instructions: when I give you a number, respond with its double
User (You): 3
Assistant (LLM): 6
User (You): 9

Mistral-instruct models expect this chat to be formatted like this
(note that the system message is combined with the first user message):
"<s>[INST] when I give you a number, respond with its double 3 [/INST] 6 [INST] 9 [/INST]"

🔵Why does it matter?
It matters A LOT -- because each type of LLM (llama2, mistral, etc) has
been trained and/or fine-tuned on chats formatted in a SPECIFIC way, and if you
deviate from that, you may get odd/inferior results.

🔵Using Mistral-7b-instruct-v0.2 via oobabooga/text-generation-webui
"Ooba" is a great library (https://github.com/oobabooga/text-generation-webui)
that lets you spin up an OpenAI-like API server for
local models, such as llama2, mistral, etc. When we used its chat endpoint
for a Langroid Agent, we were getting really strange results,
with the LLM sometimes thinking it is the user! 😧

Digging in, we found that their internal formatting template was
wrong, and it was formatting the system prompt as if it's
the first user message -- this leads to the LLM interpreting the first user
message as an assistant response, and so on -- no wonder there was role confusion!

💥Langroid solution:
To avoid these issues, in Langroid we now have a formatter
(https://github.com/langroid/langroid/blob/main/langroid/language_models/prompt_formatter/hf_formatter.py)
that retrieves the HuggingFace tokenizer for the LLM and uses
its "apply_chat_template" method to format chats.
This gives you control over the chat format and you can use the "generation"
endpoint of the LLM API instead of the "chat" endpoint.

Once we switched to this, results improved dramatically 🚀

Be sure to checkout Langroid https://github.com/langroid/langroid

#llm #ai #opensource
</file>

<file path="docs/blog/posts/local-llm.md">
---
title: 'Using Langroid with Local LLMs'
draft: false
date: 2023-09-14
authors: 
  - pchalasani
categories:
  - langroid
  - llm
  - local-llm
comments: true
---
## Why local models?
There are commercial, remotely served models that currently appear to beat all open/local
models. So why care about local models? Local models are exciting for a number of reasons:

<!-- more -->

- **cost**: other than compute/electricity, there is no cost to use them.
- **privacy**: no concerns about sending your data to a remote server.
- **latency**: no network latency due to remote API calls, so faster response times, provided you can get fast enough inference.
- **uncensored**: some local models are not censored to avoid sensitive topics.
- **fine-tunable**: you can fine-tune them on private/recent data, which current commercial models don't have access to.
- **sheer thrill**: having a model running on your machine with no internet connection,
  and being able to have an intelligent conversation with it -- there is something almost magical about it.

The main appeal with local models is that with sufficiently careful prompting,
they may behave sufficiently well to be useful for specific tasks/domains,
and bring all of the above benefits. Some ideas on how you might use local LLMs:

- In a multi-agent system, you could have some agents use local models for narrow 
  tasks with a lower bar for accuracy (and fix responses with multiple tries).
- You could run many instances of the same or different models and combine their responses.
- Local LLMs can act as a privacy layer, to identify and handle sensitive data before passing to remote LLMs.
- Some local LLMs have intriguing features, for example llama.cpp lets you 
  constrain its output using a grammar.

## Running LLMs locally

There are several ways to use LLMs locally. See the [`r/LocalLLaMA`](https://www.reddit.com/r/LocalLLaMA/comments/11o6o3f/how_to_install_llama_8bit_and_4bit/) subreddit for
a wealth of information. There are open source libraries that offer front-ends
to run local models, for example [`oobabooga/text-generation-webui`](https://github.com/oobabooga/text-generation-webui)
(or "ooba-TGW" for short) but the focus in this tutorial is on spinning up a
server that mimics an OpenAI-like API, so that any code that works with
the OpenAI API (for say GPT3.5 or GPT4) will work with a local model,
with just a simple change: set `openai.api_base` to the URL where the local API
server is listening, typically `http://localhost:8000/v1`.

There are a few libraries we recommend for setting up local models with OpenAI-like APIs:

- [LiteLLM OpenAI Proxy Server](https://docs.litellm.ai/docs/proxy_server) lets you set up a local 
  proxy server for over 100+ LLM providers (remote and local).
- [ooba-TGW](https://github.com/oobabooga/text-generation-webui) mentioned above, for a variety of models, including llama2 models.
- [llama-cpp-python](https://github.com/abetlen/llama-cpp-python) (LCP for short), specifically for llama2 models.
- [ollama](https://github.com/jmorganca/ollama)

We recommend visiting these links to see how to install and run these libraries.

## Use the local model with the OpenAI library

Once you have a server running using any of the above methods, 
your code that works with the OpenAI models can be made to work 
with the local model, by simply changing the `openai.api_base` to the 
URL where the local server is listening. 

If you are using Langroid to build LLM applications, the framework takes
care of the `api_base` setting in most cases, and you need to only set
the `chat_model` parameter in the LLM config object for the LLM model you are using.
See the [Non-OpenAI LLM tutorial](../../tutorials/non-openai-llms.md) for more details.



<iframe src="https://langroid.substack.com/embed" width="480" height="320" style="border:1px solid #EEE; background:white;" frameborder="0" scrolling="no"></iframe>
</file>

<file path="docs/blog/posts/malade.md">
---
title: 'MALADE: Multi-Agent Architecture for Pharmacovigilance'
draft: false
date: 2024-08-12
authors:
- jihye
- nils
- pchalasani
- mengelhard
- someshjha
- anivaryakumar
- davidpage

categories:
- langroid
- multi-agent
- neo4j
- rag
comments: true
---

# MALADE: Multi-Agent Architecture for Pharmacovigilance

[Published in ML for HealthCare 2024](https://www.mlforhc.org/2024-abstracts)

[Arxiv](https://arxiv.org/abs/2408.01869) 

[GitHub](https://github.com/jihyechoi77/malade)

## Summary
We introduce MALADE (**M**ultiple **A**gents powered by **L**LMs for **ADE** Extraction),
a multi-agent system for Pharmacovigilance. It is the first effective explainable 
multi-agent LLM system for extracting Adverse Drug Events (ADEs) from FDA drug labels and drug prescription data.
<!-- more -->
Given a drug category and an adverse outcome, MALADE
produces:

- a qualitative label of risk (`increase`, `decrease` or `no-effect`),
- confidence in the label (a number in $[0,1]$),
- frequency of effect (`rare`, `common`, or `none`),
- strength of evidence (`none`, `weak`, or `strong`), and
- a justification with citations.

This task is challenging for several reasons: 

- FDA labels and prescriptions are for individual drugs, not drug categories, so representative drugs in a category 
  need to be identified from patient prescription data, and ADE information found for specific drugs in a category 
  needs to be aggregated to make a statement about the category as a whole, 
- The data is noisy, with variations in the terminologies of drugs and outcomes, and 
- ADE descriptions are often buried in large amounts of narrative text.

The MALADE architecture is LLM-agnostic 
and leverages the [Langroid](https://github.com/langroid/langroid) multi-agent framework.
It consists of a combination of Agents using Retrieval Augmented Generation (RAG), that 
iteratively improve their answers based on feedback from Critic Agents.
We evaluate the quantitative scores against 
a ground-truth dataset known as the [*OMOP Ground Truth Task*](https://www.niss.org/sites/default/files/Session3-DaveMadigan_PatrickRyanTalk_mar2015.pdf)
and find that MALADE achieves state-of-the-art performance.



## Introduction

In the era of Large Language Models (LLMs), given their remarkable text understanding and generation abilities, 
there is an unprecedented opportunity to develop new, LLM-based methods for trustworthy medical knowledge synthesis, 
extraction and summarization. The focus of this paper is Pharmacovigilance, a critical task in healthcare, where 
the goal is to monitor and evaluate the safety of drugs. In particular, the identification of Adverse Drug Events 
(ADEs) is crucial for ensuring patient safety. Consider a question such as this:

> What is the effect of **ACE inhibitors** on the risk of developing **angioedema**?

Here the **drug category** $C$ is _ACE inhibitors_, and the **outcome** $O$ is _angioedema_.
Answering this question involves several steps:

- **1(a): Find all drugs** in the ACE inhibitor category $C$, e.g. by searching the FDA 
[National Drug Code](https://www.fda.gov/drugs/drug-approvals-and-databases/national-drug-code-directory) (NDC) 
   database. This can be done using Elastic-Search, with filters to handle variations in drug/category names and inaccurate classifications.
- **1(b): Find the prescription frequency** of each drug in $C$ from patient prescription data, e.g. 
the [MIMIC-IV](https://physionet.org/content/mimiciv/3.0/) database. This can be done with a SQL query.
- **1(c): Identify the representative drugs** $D \subset C$ in this category, based on prescription frequency data 
     from step 2.  
- **2:** For each drug $d \in D$, **summarize ADE information** about the effect of $d$ on the outcome $O$ of interest,
   (in this case angioedema) from text-based pharmaceutical sources, 
    e.g. the [OpenFDA Drug Label](https://open.fda.gov/apis/drug/label/) database.
- **3: Aggregate** the information from all drugs in $D$ to make a statement about the category $C$ as a whole.


## The role of LLMs

While steps 1(a) and 1(b) can be done by straightforward deterministic algorithms (SQL queries or Elastic-Search), the 
remaining steps are challenging but ideally suited to LLMs:

### Step 1(c): Identifying representative drugs in a category from prescription frequency data (`DrugFinder` Agent)

This is complicated by noise, such as the same drug appearing multiple times under different names, 
formulations or delivery methods (For example, the ACE inhibitor **Lisinopril** is also known as **Zestril** and **Prinivil**.) 
  Thus a judgment must
  be made as to whether these are sufficiently different to be considered pharmacologically distinct;
  and some of these drugs may not actually belong to the category. This task thus requires a grouping operation, 
  related to the task of identifying standardized drug codes from text descriptions,
  well known to be challenging. This makes it very difficult to explicitly define the algorithm in a deterministic 
  manner that covers all edge cases (unlike the above database tasks), and hence is well-suited
  to LLMs, particularly those such as GPT-4, Claude3.5, and similar-strength variants which are known to have been 
  trained on vast amounts of general medical texts. 

In MALADE, this task is handled by the `DrugFinder` agent,
which is an Agent/Critic system where the main agent iteratively improves its output
in a feedback loop with the Critic agent. For example, the Critic corrects the Agent when it incorrectly
classifies drugs as pharmacologically distinct.

###  Step 2: Identifying Drug-Outcome Associations (`DrugOutcomeInfoAgent`)

The task here is to identify whether a given drug
has an established effect on the risk of a given outcome, based on FDA drug label database, and
output a summary of relevant information, including the level of identified risk and the evidence for
such an effect. Since this task involves extracting information from narrative text, it is well-suited to
LLMs using the Retrieval Augmented Generation (RAG) technique. 

In MALADE, the `DrugOutcomeInfoAgent` handles this task, and is also an Agent/Critic system, where the Critic
provides feedback and corrections to the Agent's output.
This agent does not have direct access to the FDA Drug Label data, but can receive
this information via another agent, `FDAHandler`. FDAHandler is equipped with **tools** (also known as function-calls) 
to invoke the OpenFDA API for drug label data, and answers questions in the context of information retrieved
based on the queries. Information received from this API is ingested into a vector database, so the
agent first uses a tool to query this vector database, and only resorts to the OpenFDA API tool if
the vector database does not contain the relevant information. An important aspect of this agent is that
its responses include specific **citations** and **excerpts** justifying its conclusions.

###  Step 3: Labeling Drug Category-Outcome Associations (`CategoryOutcomeRiskAgent`)

To identify association between a drug category C and an adverse health outcome $O$, we concurrently run a batch of 
queries to copies of `DrugOutcomeInfoAgent`, one for each drug $d$ in the
representative-list $D$ for the category, of the form: 

> Does drug $d$ increase or decrease the risk of condition $O$?

The results are sent to `CategoryOutcomeRiskAgent`, 
which is an Agent/Critic system which performs the final classification
step; its goal is to generate the qualitative and quantitative outputs mentioned above.

## MALADE Architecture

The figure below illustrates how the MALADE architecture handles the query,

> What is the effect of **ACE inhibitors** on the risk of developing **angioedema**?

![malade-arch.png](figures/malade-arch.png)

The query triggers a sequence of subtasks performed by the three Agents described above: 
`DrugFinder`, `DrugOutcomeInfoAgent`, and `CategoryOutcomeRiskAgent`.
Each Agent generates a response and justification, which are validated by a corresponding Critic agent, whose feedback is
used by the Agent to revise its response.

## Evaluation

### OMOP Ground Truth

We evaluate the results of MALADE against a well-established ground-truth dataset, 
the [OMOP ADE ground-truth table](https://www.niss.org/sites/default/files/Session3-DaveMadigan_PatrickRyanTalk_mar2015.pdf), shown below.
This is a reference dataset within the Observational Medical Outcomes Partnership (OMOP) Common Data Model that 
contains validated information about known adverse drug events.

![omop-ground-truth.png](figures/omop-ground-truth.png)

### Confusion Matrix

Below is a side-by-side comparison of this ground-truth dataset (left) with MALADE's labels (right), ignoring blue 
cells (see the paper for details):

![omop-results.png](figures/omop-results.png)

The resulting confusion-matrix for MALADE is shown below:

![confusion.png](figures/confusion.png)

### AUC Metric

Since MALADE produces qualitative and quantitative outputs, the paper explores a variety of ways to evaluate its
performance against the OMOP ground-truth dataset. Here we focus on the label output $L$ (i.e. `increase`, 
`decrease`, or `no-effect`), and its associated confidence score $c$, and use the Area Under the ROC Curve (AUC) as 
the evaluation metric.
The AUC metric is designed for binary classification, so we transform the three-class label output $L$ and
confidence score $c$ to a binary classification score $p$ as follows.
We treat $L$ = `increase` as the positive class,
and $L$ = `decrease` or `no-effect` as the negative class, and
we transform the label confidence score $c$ into a probability $p$ of `increase` as follows:


- if the label output is `increase`, $p = (2+c)/3$,
- if the label output is `no-effect`, $p = (2-c)/3$, and
- if the label output is `decrease` , $p = (1-c)/3$.

These transformations align with two intuitions: (a) a *higher* confidence in `increase` corresponds
to a *higher* probability of `increase`, and a *higher* confidence in `no-effect` or `decrease`
corresponds to a *lower* probability of `increase`, and (b) for a given confidence score $c$, the progression
of labels `decrease`, `no-effect`, and `increase` corresponds to *increasing* probabilities of `increase`.
The above transformations ensure that the probability $p$ is in the range $[0,1]$ and scales linearly with the
confidence score $c$.

We ran the full MALADE system for all drug-category/outcome pairs in the OMOP ground-truth dataset, 
and then computed the AUC for the score $p$ against the ground-truth binary classification label.
With `GPT-4-Turbo` we obtained an AUC of 0.85, while `GPT-4o` resulted in an AUC of 0.90.
These are state-of-the-art results for this specific ADE-extraction task.


### Ablations

An important question the paper investigates is whether (and how much) the various components (RAG, critic agents, etc)
contribute to MALADE's performance. To answer this, we perform ablations, where we remove one or more
components from the MALADE system and evaluate the performance of the resulting system.
For example we found that dropping the Critic agents reduces the AUC (using `GPT-4-Turbo`) from 0.85 to 0.82
(see paper, Appendix D for more ablation results).

### Variance of LLM-generated Scores

When using an LLM to generate numerical scores, it is important to understand the variance in the scores.
For example, if a single "full" run of MALADE (i.e. for all drug-category/outcome pairs in the OMOP ground-truth
dataset) produces a certain AUC, was it a "lucky" run, or is the AUC relatively stable across runs?
Ideally one would investigate this by repeating the full run of MALADE many times,  
but given the expense of running a full experiment, we focus on just three representative cells in the OMOP table,
one corresponding to each possible ground-truth label, and run MALADE 10 times for each cells, and
study the distribution of $p$ (the probability of increased risk, translated from the confidence score using the
method described above), for each output label. Encouragingly, we find that the distribution of $p$ shows clear
separation between the three labels, as in the figure below (The $x$ axis ranges from 0 to 1, and the three colored
groups of bars represent, from left to right, `decrease`, `no-effect`, and `increase` labels). Full details are in 
the Appendix D of the paper.

![img.png](figures/variance-histogram.png)
</file>

<file path="docs/blog/posts/multi-agent-debate.md">
---
title: 'Multi Agent Debate and Education Platform'
draft: false
date: 2025-02-04
authors: 
  - adamshams
categories:
  - langroid
  - llm
  - local-llm
  - chat
comments: true
---

## Introduction
Have you ever imagined a world where we can debate complex issues with Generative AI agents taking a distinct 
stance and backing their arguments with evidence? Some will change your mind, and some will reveal the societal biases 
on which each distinctive Large Language Model (LLM) is trained on. Introducing an [AI-powered debate platform](https://github.com/langroid/langroid/tree/main/examples/multi-agent-debate) that brings 
this imagination to reality, leveraging diverse LLMs and the Langroid multi-agent programming framework. The system enables users to engage in structured debates with an AI taking the opposite stance (or even two AIs debating each other), using a multi-agent architecture with Langroid's powerful framework, where each agent embodies a specific ethical perspective, creating realistic and dynamic interactions. 
Agents are prompt-engineered and role-tuned to align with their assigned ethical stance, 
ensuring thoughtful and structured debates. 

<!-- more -->

My motivations for creating this platform included: 

  - A debate coach for underserved students without access to traditional resources. 
  - Tool for research and generating arguments from authentic sources. 
  - Create an adaptable education platform to learn two sides of the coin for any topic.
  - Reduce echo chambers perpetuated by online algorithms by fostering two-sided debates on any topic, promoting education and awareness around misinformation. 
  - Provide a research tool to study the varieties of biases in LLMs that are often trained on text reflecting societal biases. 
  - Identify a good multi-agent framework designed for programming with LLMs.


## Platform Features:
### Dynamic Agent Generation:
The platform features five types of agents: Pro, Con, Feedback, Research, and Retrieval Augmented Generation (RAG) Q&A. 
Each agent is dynamically generated using role-tuned and engineered prompts, ensuring diverse and engaging interactions.
#### Pro and Con Agents: 
These agents engage in the core debate, arguing for and against the chosen topic. 
Their prompts are carefully engineered to ensure they stay true to their assigned ethical stance.
#### Feedback Agent: 
This agent provides real-time feedback on the arguments and declares a winner. The evaluation criteria are based on the well-known Lincoln–Douglas debate format, and include:

  - Clash of Values 
  - Argumentation 
  - Cross-Examination 
  - Rebuttals 
  - Persuasion 
  - Technical Execution 
  - Adherence to Debate Etiquette 
  - Final Focus
#### Research Agent: 
This agent has the following functionalities:

  - Utilizes the `MetaphorSearchTool` and the `Metaphor` (now called `Exa`) Search API to conduct web searches combined with
Retrieval Augmented Generation (RAG) to relevant web references for user education about the selected topic. 
  - Produces a summary of arguments for and against the topic.
  - RAG-based document chat with the resources identified through Web Search. 
#### RAG Q&A Agent:

  - Provides Q&A capability using a RAG based chat interaction with the resources identified through Web Search.
The agent utilizes `DocChatAgent` that is part of Langroid framework which orchestrates all LLM interactions. 
  - Rich chunking parameters allows the user to get optimized relevance results. Check out `config.py`for details.

### Topic Adaptability:
Easily adaptable to any subject by simply adding pro and con system messages. This makes it a versatile tool for
exploring diverse topics and fostering critical thinking. Default topics cover ethics and use of AI for the following:
  - Healthcare
  - Intellectual property 
  - Societal biases 
  - Education
### Autonomous or Interactive:
Engage in manual debate with a pro or con agent or watch it autonomously while adjusting number of turns.

### Diverse LLM Selection Adaptable per Agent: 
Configurable to select from diverse commercial and open source models: OpenAI, Google, and Mistral 
to experiment with responses for diverse perspectives. Users can select a unique LLM for each agent. 
       
### LLM Tool/Function Integration: 
Utilizes LLM tools/functions features to conduct semantic search using Metaphor Search API and summarizes the pro and 
con perspectives for education.

### Configurable LLM Parameters: 
Parameters like temperature, minimum and maximum output tokens, allowing for customization of the AI's responses.
Configurable LLM parameters like temperature, min & max output tokens. For Q&A with the searched resources, several
parameters can be tuned in the `config` to enhance response relevance.

### Modular Design: 
Reusable code and modularized for other LLM applications.


## Interaction
1. Decide if you want to you use same LLM for all agents or different ones
2. Decide if you want autonomous debate between AI Agents or user vs. AI Agent. 
3. Select a debate topic.
4. Choose your side (Pro or Con).
5. Engage in a debate by providing arguments and receiving responses from agents.
6. Request feedback at any time by typing `f`.
7. Decide if you want the Metaphor Search to run to find Topic relevant web links
   and summarize them. 
8. Decide if you want to chat with the documents extracted from URLs found to learn more about the Topic.
9. End the debate manually by typing `done`. If you decide to chat with the documents, you can end session
by typing `x`

## Why was Langroid chosen?
I chose Langroid framework because it's a principled multi-agent programming framework inspired by the Actor framework.
Prior to using Langroid, I developed a multi-agent debate system, however, I had to write a lot of tedious code to manage states of communication between
debating agents, and the user interactions with LLMs. Langroid allowed me to seamlessly integrate multiple LLMs,
easily create agents, tasks, and attach sub-tasks. 

### Agent Creation Code Example

```python
   def create_chat_agent(name: str, llm_config: OpenAIGPTConfig, system_message: str) -> ChatAgent:
   
    return ChatAgent(
        ChatAgentConfig(
            llm=llm_config,
            name=name,
            system_message=system_message,
        )
    )
```
#### Sample Pro Topic Agent Creation

```python
 
    pro_agent = create_chat_agent(
        "Pro",
        pro_agent_config,
        system_messages.messages[pro_key].message + DEFAULT_SYSTEM_MESSAGE_ADDITION,
    )
    
```
The `Task` mechanism in Langroid provides a robust mechanism for managing complex interactions within multi-agent 
systems. `Task` serves as a container for managing the flow of interactions between different agents
(such as chat agents) and attached sub-tasks.`Task` also helps with turn-taking, handling responses, 
and ensuring smooth transitions between dialogue states. Each Task object is responsible for coordinating responses 
from its assigned agent, deciding the sequence of responder methods (llm_response, user_response, agent_response), 
and managing transitions between different stages of a conversation or debate. Each agent can focus on its specific 
role while the task structure handles the overall process's orchestration and flow, allowing a clear separation of 
concerns. The architecture and code transparency of Langroid's framework make it an incredible candidate for 
applications like debates where multiple agents must interact dynamically and responsively
based on a mixture of user inputs and automated responses.

### Task creation and Orchestration Example

```python
    user_task = Task(user_agent, interactive=interactive_setting, restart=False)
    ai_task = Task(ai_agent, interactive=False, single_round=True)
    user_task.add_sub_task(ai_task)
    if not llm_delegate:
        user_task.run(user_agent.user_message, turns=max_turns)
    else:
        user_task.run("get started", turns=max_turns)
    
```
Tasks can be easily set up as sub-tasks of an orchestrating agent. In this case user_task could be Pro or Con depending 
on the user selection. 

If you want to build custom tools/functions or use Langroid provided it is only a line of code using
`agent.enable_messaage`. Here is an example of `MetaphorSearchTool` and `DoneTool`. 
```python
        metaphor_search_agent.enable_message(MetaphorSearchTool)
        metaphor_search_agent.enable_message(DoneTool)
```

Overall I had a great learning experience using Langroid and recommend using it for any projects 
that need to utilize LLMs. I am already working on a few Langroid based information retrieval and research systems 
for use in medicine and hoping to contribute more soon. 

### Bio

I'm a high school senior at Khan Lab School located in Mountain View, CA where I host a student-run Podcast known as the
Khan-Cast. I also enjoy tinkering with interdisciplinary STEM projects. You can reach me on [LinkedIn](https://www.linkedin.com/in/adamshams/).
</file>

<file path="docs/blog/posts/test.md">
---
draft: true
date: 2022-01-31
authors: 
  - pchalasani
categories:
  - test
  - blog
comments: true
---

# Test code snippets

```python
from langroid.language_models.base import LLMMessage, Role
msg = LLMMessage(
        content="What is the capital of Bangladesh?",
        role=Role.USER,
      )
```

<!-- more -->


# Test math notation

A nice equation is $e^{i\pi} + 1 = 0$, which is known as Euler's identity.
Here is a cool equation too, and in display mode:

$$
e = mc^2
$$

# Latex with newlines

Serious latex with `\\` for newlines renders fine:

$$
\begin{bmatrix}
a & b \\
c & d \\
e & f \\
\end{bmatrix}
$$

or a multi-line equation

$$
\begin{aligned}
\dot{x} & = \sigma(y-x) \\
\dot{y} & = \rho x - y - xz \\
\dot{z} & = -\beta z + xy
\end{aligned}
$$

<iframe src="https://langroid.substack.com/embed" width="480" height="320" style="border:1px solid #EEE; background:white;" frameborder="0" scrolling="no"></iframe>
</file>

<file path="docs/blog/.authors.yml">
authors:
  pchalasani:
    name: Prasad Chalasani
    description: Langroid CoFounder
    avatar: https://github.com/pchalasani.png
  mohannad:
    name: Mohannad Alhanahnah
    description: Langroid Contributor
    avatar: https://avatars.githubusercontent.com/u/15859139
  nils:
    name: Nils Palumbo
    description: Phd Candidate (CS), UW-Madison; Langroid core dev.
    avatar: https://www.github.com/nilspalumbo.png
  jihye:
    name: Jihye Choi
    description: PhD Candidate (CS), UW-Madison
    avatar: https://www.github.com/jihyechoi77.png
  someshjha:
    name: Somesh Jha
    description: UW-Madison; Langroid CoFounder
    avatar: https://www.gravatar.com/avatar/?d=mp
  anivaryakumar:
    name: Anivarya Kumar
    description: Duke University
    avatar: https://www.gravatar.com/avatar/?d=mp
  davidpage:
    name: David Page
    description: Duke University
    avatar: https://www.gravatar.com/avatar/?d=mp
  mengelhard:
    name: Matthew Engelhard
    description: Duke University
    avatar: https://www.gravatar.com/avatar/?d=mp
  adamshams:
    name: Adam Shams
    description: Langroid Contributor, Khan Lab School
    avatar: https://avatars.githubusercontent.com/u/84205479
</file>

<file path="docs/blog/index.md">
# Blog
</file>

<file path="docs/demos/targeting/audience-targeting.md">
# Audience Targeting for a Business

Suppose you are a marketer for a business, trying to figure out which 
audience segments to target.
Your downstream systems require that you specify _standardized_ audience segments
to target, for example from the [IAB Audience Taxonomy](https://iabtechlab.com/standards/audience-taxonomy/).

There are thousands of standard audience segments, and normally you would need 
to search the list for potential segments that match what you think your ideal
customer profile is. This is a tedious, error-prone task.

But what if we can leverage an LLM such as GPT-4?
We know that GPT-4 has  skills that are ideally suited for this task:

- General knowledge about businesses and their ideal customers
- Ability to recognize which standard segments match an English description of a customer profile
- Ability to plan a conversation to get the information it needs to answer a question


Once you decide to use an LLM, you still need to figure out how to organize the 
various components of this task:

- **Research:** What are some ideal customer profiles for the business
- **Segmentation:** Which standard segments match an English description of a customer profile
- **Planning:** how to organize the task to identify a few standard segments

## Using Langroid Agents 

Langroid makes it intuitive and simple to build an LLM-powered system organized
around agents, each responsible for a different task.
In less than a day we built a 3-agent system to automate this task:

- The `Marketer` Agent is given the Planning role.
- The `Researcher` Agent is given the Research role, 
  and it has access to the business description. 
- The `Segmentor` Agent is given the Segmentation role. It has access to the 
  IAB Audience Taxonomy via a vector database, i.e. its rows have been mapped to
  vectors via an embedding model, and these vectors are stored in a vector-database. 
  Thus given an English description of a customer profile,
  the `Segmentor` Agent maps it to a vector using the embedding model,
  and retrieves the nearest (in vector terms, e.g. cosine similarity) 
  IAB Standard Segments from the vector-database. The Segmentor's LLM 
  further refines this by selecting the best-matching segments from the retrieved list.

To kick off the system, the human user describes a business in English,
or provides the URL of the business's website. 
The `Marketer` Agent sends
customer profile queries to the `Researcher`, who answers in plain English based on 
the business description, and the Marketer takes this description and sends it to the Segmentor,
who maps it to Standard IAB Segments. The task is done when the Marketer finds 4 Standard segments. 
The agents are depicted in the diagram below:

![targeting.png](targeting.png)

## An example: Glashutte Watches

The human user first provides the URL of the business, in this case:
```text
https://www.jomashop.com/glashutte-watches.html
```
From this URL, the `Researcher` agent summarizes its understanding of the business.
The `Marketer` agent starts by asking the `Researcher`:
``` 
Could you please describe the age groups and interests of our typical customer?
```
The `Researcher` responds with an English description of the customer profile:
```text
Our typical customer is a fashion-conscious individual between 20 and 45 years...
```
The `Researcher` forwards this English description to the `Segmentor` agent, who
maps it to a standardized segment, e.g.:
```text
Interest|Style & Fashion|Fashion Trends
...
```
This conversation continues until the `Marketer` agent has identified 4 standardized segments.

Here is what the conversation looks like:

![targeting.gif](targeting.gif)
</file>

<file path="docs/examples/agent-tree.md">
# Hierarchical computation with Langroid Agents 

Here is a simple example showing tree-structured computation
where each node in the tree is handled by a separate agent.
This is a toy numerical example, and illustrates:

- how to have agents organized in a hierarchical structure to accomplish a task 
- the use of global state accessible to all agents, and 
- the use of tools/function-calling.

## The Computation 

We want to carry out the following calculation for a given input number $n$:

```python
def Main(n):
    if n is odd:
        return (3*n+1) + n
    else:
        if n is divisible by 10:
            return n/10 + n
        else:
            return n/2 + n
```

## Using function composition

Imagine we want to do this calculation using a few auxiliary functions:

```python
def Main(n):
    # return non-null value computed by Odd or Even
    Record n as global variable # to be used by Adder below
    return Odd(n) or Even(n)

def Odd(n):
    # Handle odd n
    if n is odd:
        new = 3*n+1
        return Adder(new)
    else:
        return None
    
def Even(n):
    # Handle even n: return non-null value computed by EvenZ or EvenNZ
    return EvenZ(n) or EvenNZ(n)

def EvenZ(n):
    # Handle even n divisible by 10, i.e. ending in Zero
    if n is divisible by 10:
        new = n/10
        return Adder(new)
    else:
        return None
    
def EvenNZ(n):
    # Handle even n not divisible by 10, i.e. not ending in Zero
    if n is not divisible by 10:
        new = n/2
        return Adder(new)
    else:
        return None  

def Adder(new):
    # Add new to starting number, available as global variable n
    return new + n
```

## Mapping to a tree structure

This compositional/nested computation can be represented as a tree:

```plaintext
       Main
     /     \
  Even     Odd
  /   \        \
EvenZ  EvenNZ   Adder
  |      |
 Adder  Adder
```

Let us specify the behavior we would like for each node, in a 
"decoupled" way, i.e. we don't want a node to be aware of the other nodes.
As we see later, this decoupled design maps very well onto Langroid's
multi-agent task orchestration. To completely define the node behavior,
we need to specify how it handles an "incoming" number $n$ (from a parent node 
or user), and how it handles a "result" number $r$ (from a child node).

- `Main`: 
    - incoming $n$: simply send down $n$, record the starting number $n_0 = n$ as a global variable. 
    - result $r$: return $r$.
- `Odd`: 
    - incoming $n$: if n is odd, send down $3*n+1$, else return None
    - result $r$: return $r$
- `Even`: 
    - incoming $n$: if n is even, send down $n$, else return None
    - result $r$: return $r$
- `EvenZ`: (guaranteed by the tree hierarchy, to receive an even number.)  
    - incoming $n$: if n is divisible by 10, send down $n/10$, else return None
    - result $r$: return $r$
- `EvenNZ`: (guaranteed by the tree hierarchy, to receive an even number.)
    - incoming $n$: if n is not divisible by 10, send down $n/2$, else return None
    - result $r$: return $r$
- `Adder`:
    - incoming $n$: return $n + n_0$ where $n_0$ is the 
    starting number recorded by Main as a global variable.
    - result $r$: Not applicable since `Adder` is a leaf node.
  
## From tree nodes to Langroid Agents 

Let us see how we can perform this calculation using multiple Langroid agents, where

- we define an agent corresponding to each of the nodes above, namely 
`Main`, `Odd`, `Even`, `EvenZ`, `EvenNZ`, and `Adder`.
- we wrap each Agent into a Task, and use the `Task.add_subtask()` method to connect the agents into 
  the desired hierarchical structure.

Below is one way to do this using Langroid. We designed this with the following
desirable features:

- Decoupling: Each agent is instructed separately, without mention of any other agents
  (E.g. Even agent does not know about Odd Agent, EvenZ agent, etc).
  In particular, this means agents will not be "addressing" their message
  to specific other agents, e.g. send number to Odd agent when number is odd,
  etc. Allowing addressing would make the solution easier to implement,
  but would not be a decoupled solution.
  Instead, we want Agents to simply put the number "out there", and have it handled
  by an applicable agent, in the task loop (which consists of the agent's responders,
  plus any sub-task `run` methods).

- Simplicity: Keep the agent instructions relatively simple. We would not want a solution
  where we have to instruct the agents (their LLMs) in convoluted ways. 

One way naive solutions fail is because agents are not able to distinguish between
a number that is being "sent down" the tree as input, and a number that is being
"sent up" the tree as a result from a child node.

We use a simple trick: we instruct the LLM to mark returned values using the RESULT keyword,
and instruct the LLMs on how to handle numbers that come with RESULT keyword, and those that don't
In addition, we leverage some features of Langroid's task orchestration:

- When `llm_delegate` is `True`, if the LLM says `DONE [rest of msg]`, the task is
  considered done, and the result of the task is `[rest of msg]` (i.e the part after `DONE`).
- In the task loop's `step()` function (which seeks a valid message during a turn of
  the conversation) when any responder says `DO-NOT-KNOW`, it is not considered a valid
  message, and the search continues to other responders, in round-robin fashion.



See the [`chat-tree.py`](https://github.com/langroid/langroid/blob/main/examples/basic/chat-tree.py)
example for an implementation of this solution. You can run that example as follows:
```bash
python3 examples/basic/chat-tree.py
```
In the sections below we explain the code in more detail.

## Define the agents

Let us start with defining the configuration to be used by all agents:

```python
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig

config = ChatAgentConfig(
  llm=OpenAIGPTConfig(
    chat_model=OpenAIChatModel.GPT4o,
  ),
  vecdb=None, # no need for a vector database
)
```

Next we define each of the agents, for example:

```python
main_agent = ChatAgent(config)
```

and similarly for the other agents.

## Wrap each Agent in a Task

To allow agent interactions, the first step is to wrap each agent in a Task.
When we define the task, we pass in the instructions above as part of the system message.
Recall the instructions for the `Main` agent:

- `Main`:
    - incoming $n$: simply send down $n$, record the starting number $n_0 = n$ as a global variable.
    - result $r$: return $r$.

We include the equivalent of these instructions in the `main_task` that wraps 
the `main_agent`:

```python
from langroid.agent.task import Task

main_task = Task(
    main_agent,
    name="Main",
    interactive=False, #(1)!
    system_message="""
          You will receive two types of messages, to which you will respond as follows:
          
          INPUT Message format: <number>
          In this case simply write the <number>, say nothing else.
          
          RESULT Message format: RESULT <number>
          In this case simply say "DONE <number>", e.g.:
          DONE 19
    
          To start off, ask the user for the initial number, 
          using the `ask_num` tool/function.
          """,
    llm_delegate=True, # allow LLM to control end of task via DONE
    single_round=False,
)
```

1. Non-interactive: don't wait for user input in each turn 

There are a couple of points to highlight about the `system_message` 
value in this task definition:

- When the `Main` agent receives just a number, it simply writes out that number,
  and in the Langroid Task loop, this number becomes the "current pending message"
  to be handled by one of the sub-tasks, i.e. `Even, Odd`. Note that these sub-tasks
  are _not_ mentioned in the system message, consistent with the decoupling principle.
- As soon as either of these sub-tasks returns a non-Null response, in the format "RESULT <number>", the `Main` agent
  is instructed to return this result saying "DONE <number>". Since `llm_delegate`
  is set to `True` (meaning the LLM can decide when the task has ended), 
  this causes the `Main` task to be considered finished and the task loop is exited.

Since we want the `Main` agent to record the initial number as a global variable,
we use a tool/function `AskNum` defined as follows 
(see [this section](../quick-start/chat-agent-tool.md) in the getting started guide 
for more details on Tools):

```python
from rich.prompt import Prompt
from langroid.agent.tool_message import ToolMessage


class AskNumTool(ToolMessage):
  request = "ask_num"
  purpose = "Ask user for the initial number"

  def handle(self) -> str:
    """
    This is a stateless tool (i.e. does not use any Agent member vars), so we can
    define the handler right here, instead of defining an `ask_num`
    method in the agent.
    """
    num = Prompt.ask("Enter a number")
    # record this in global state, so other agents can access it
    MyGlobalState.set_values(number=num)
    return str(num)
```

We then enable the `main_agent` to use and handle messages that conform to the 
`AskNum` tool spec:

```python
main_agent.enable_message(AskNumTool)
```

!!! tip "Using and Handling a tool/function"
    "Using" a tool means the agent's LLM _generates_ 
    the function-call (if using OpenAI function-calling) or 
    the JSON structure (if using Langroid's native tools mechanism) 
    corresponding to this tool. "Handling" a tool refers to the Agent's method 
    recognizing the tool and executing the corresponding code.


The tasks for other agents are defined similarly. We will only note here
that the `Adder` agent needs a special tool `AddNumTool` to be able to add the current number
to the initial number set by the `Main` agent. 

## Connect the tasks into a tree structure

So far, we have wrapped each agent in a task, in isolation, and there is no 
connection between the tasks. The final step is to connect the tasks to 
the tree structure we saw earlier:

```python
main_task.add_sub_task([even_task, odd_task])
even_task.add_sub_task([evenz_task, even_nz_task])
evenz_task.add_sub_task(adder_task)
even_nz_task.add_sub_task(adder_task)
odd_task.add_sub_task(adder_task)
```

Now all that remains is to run the main task:

```python
main_task.run()
```

Here is what a run starting with $n=12$ looks like:

![chat-tree.png](chat-tree.png)
</file>

<file path="docs/examples/guide.md">
# Guide to examples in `langroid-examples` repo

!!! warning "Outdated"
    This guide is from Feb 2024; there have been numerous additional examples
    since then. We recommend you visit the `examples` folder in the core `langroid`
    repo for the most up-to-date examples. These examples are periodically copied
    over to the `examples` folder in the `langroid-examples` repo.

The [`langroid-examples`](https://github.com/langroid/langroid-examples) repo
contains several examples of using
the [Langroid](https://github.com/langroid/langroid) agent-oriented programming 
framework for LLM applications.
Below is a guide to the examples. First please ensure you follow the
installation instructions in the `langroid-examples` repo README.

**At minimum a GPT4-compatible OpenAI API key is required.** As currently set
up, many of the examples will _not_ work with a weaker model. Weaker models may
require more detailed or different prompting, and possibly a more iterative
approach with multiple agents to verify and retry, etc — this is on our roadmap.

All the example scripts are meant to be run on the command line.
In each script there is a description and sometimes instructions on how to run
the script.

NOTE: When you run any script, it pauses for “human” input at every step, and
depending on the context, you can either hit enter to continue, or in case there
is a question/response expected from the human, you can enter your question or
response and then hit enter.

### Basic Examples
- [`/examples/basic/chat.py`](https://github.com/langroid/langroid-examples/blob/main/examples/basic/chat.py) This is a basic chat application.

    - Illustrates Agent task loop.

- [`/examples/basic/autocorrect.py`](https://github.com/langroid/langroid-examples/blob/main/examples/basic/autocorrect.py) Chat with autocorrect: type fast and carelessly/lazily and 
the LLM will try its best to interpret what you want, and offer choices when confused.

    - Illustrates Agent task loop.

- [`/examples/basic/chat-search.py`](https://github.com/langroid/langroid-examples/blob/main/examples/basic/chat-search.py)  This uses a `GoogleSearchTool` function-call/tool to answer questions using a google web search if needed.
  Try asking questions about facts known after Sep 2021 (GPT4 training cutoff),
  like  `when was llama2 released`
  
    - Illustrates Agent + Tools/function-calling + web-search

- [`/examples/basic/chat-tree.py`](https://github.com/langroid/langroid-examples/blob/main/examples/basic/chat-tree.py) is a toy example of tree-structured multi-agent
  computation, see a detailed writeup [here.](https://langroid.github.io/langroid/examples/agent-tree/)
  
    - Illustrates multi-agent task collaboration, task delegation.

### Document-chat examples, or RAG (Retrieval Augmented Generation)

- [`/examples/docqa/chat.py`](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/chat.py) is a document-chat application. Point it to local file,
  directory or web url, and ask questions
    - Illustrates basic RAG
- [`/examples/docqa/chat-search.py`](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/chat-search.py): ask about anything and it will try to answer
  based on docs indexed in vector-db, otherwise it will do a Google search, and
  index the results in the vec-db for this and later answers.
    - Illustrates RAG + Function-calling/tools
- [`/examples/docqa/chat_multi.py`](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/chat_multi.py):  — this is a 2-agent system that will summarize
  a large document with 5 bullet points: the first agent generates questions for
  the retrieval agent, and is done when it gathers 5 key points.
    - Illustrates 2-agent collaboration + RAG to summarize a document
- [`/examples/docqa/chat_multi_extract.py`](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/chat_multi_extract.py):  — extracts structured info from a
  lease document: Main agent asks questions to a retrieval agent. 
    - Illustrates 2-agent collaboration, RAG, Function-calling/tools, Structured Information Extraction.

### Data-chat examples (tabular, SQL)

- [`/examples/data-qa/table_chat.py`](https://github.com/langroid/langroid-examples/blob/main/examples/data-qa/table_chat):  - point to a URL or local csv file and ask
  questions. The agent generates pandas code that is run within langroid.
    - Illustrates function-calling/tools and code-generation
- [`/examples/data-qa/sql-chat/sql_chat.py`](https://github.com/langroid/langroid-examples/blob/main/examples/data-qa/sql-chat/sql_chat.py):  — chat with a sql db — ask questions in
  English, it will generate sql code to answer them.
  See [tutorial here](https://langroid.github.io/langroid/tutorials/postgresql-agent/)
    - Illustrates function-calling/tools and code-generation
</file>

<file path="docs/javascripts/mathjax.js">
window.MathJax = {
  tex: {
    inlineMath: [["\\(", "\\)"]],
    displayMath: [["\\[", "\\]"]],
    processEscapes: true,
    processEnvironments: true
  },
  options: {
    ignoreHtmlClass: ".*|",
    processHtmlClass: "arithmatex"
  }
};

document$.subscribe(() => { 
  MathJax.typesetPromise()
})
</file>

<file path="docs/notes/async-streaming.md">
# Suppressing output in async, streaming mode

Available since version 0.18.0

When using an LLM API in streaming + async mode, you may want to suppress output,
especially when concurrently running multiple instances of the API.
To suppress output in async + stream mode, 
you can set the `async_stream_quiet` flag in [`LLMConfig`][langroid.language_models.base.LLMConfig]
to `True` (this is the default). 
Note that [`OpenAIGPTConfig`][langroid.language_models.openai_gpt.OpenAIGPTConfig]
inherits from `LLMConfig`, so you can use this flag with `OpenAIGPTConfig` as well:

```python
import langroid.language_models as lm
llm_config = lm.OpenAIGPTConfig(
    async_stream_quiet=True,
    ...
)
```
</file>

<file path="docs/notes/azure-openai-models.md">
# Azure OpenAI Models

To use OpenAI models deployed on Azure, first ensure a few environment variables
are defined (either in your `.env` file or in your environment):

- `AZURE_OPENAI_API_KEY`, from the value of `API_KEY`
- `AZURE_OPENAI_API_BASE` from the value of `ENDPOINT`, typically looks like `https://your_resource.openai.azure.com`.
- For `AZURE_OPENAI_API_VERSION`, you can use the default value in `.env-template`, and latest version can be found [here](https://learn.microsoft.com/en-us/azure/ai-services/openai/whats-new#azure-openai-chat-completion-general-availability-ga)
- `AZURE_OPENAI_DEPLOYMENT_NAME` is an OPTIONAL deployment name which may be
  defined by the user during the model setup.
- `AZURE_OPENAI_CHAT_MODEL` Azure OpenAI allows specific model names when you select the model for your deployment. You need to put precisely the exact model name that was selected. For example, GPT-3.5 (should be `gpt-35-turbo-16k` or `gpt-35-turbo`) or GPT-4 (should be `gpt-4-32k` or `gpt-4`).
- `AZURE_OPENAI_MODEL_NAME` (Deprecated, use `AZURE_OPENAI_CHAT_MODEL` instead).

This page [Microsoft Azure OpenAI](https://learn.microsoft.com/en-us/azure/ai-services/openai/chatgpt-quickstart?tabs=command-line&pivots=programming-language-python#environment-variables) 
provides more information on how to obtain these values.

To use an Azure-deployed model in Langroid, you can use the `AzureConfig` class:

```python
import langroid.language_models as lm
import langroid as lr

llm_config = lm.AzureConfig(
    chat_model="gpt-4o"
    # the other settings can be provided explicitly here, 
    # or are obtained from the environment
)
llm = lm.AzureGPT(config=llm_config)

response = llm.chat(
  messages=[
    lm.LLMMessage(role=lm.Role.SYSTEM, content="You are a helpful assistant."),
    lm.LLMMessage(role=lm.Role.USER, content="3+4=?"),
  ]
)

agent = lr.ChatAgent(
    lr.ChatAgentConfig(
        llm=llm_config,
        system_message="You are a helpful assistant.",
    )
)

response = agent.llm_response("is 4 odd?")  
print(response.content)  # "Yes, 4 is an even number."
response = agent.llm_response("what about 2?")  # follow-up question
```
</file>

<file path="docs/notes/chunking.md">
# Document Chunking/Splitting in Langroid

Langroid's [`ParsingConfig`][langroid.parsing.parser.ParsingConfig]
provides several document chunking strategies through the `Splitter` enum:

## 1. MARKDOWN (`Splitter.MARKDOWN`) (The default)

**Purpose**: Structure-aware splitting that preserves markdown formatting.

**How it works**:

- Preserves document hierarchy (headers and sections)
- Enriches chunks with header information
- Uses word count instead of token count (with adjustment factor)
- Supports "rollup" to maintain document structure
- Ideal for markdown documents where preserving formatting is important

## 2. TOKENS (`Splitter.TOKENS`)

**Purpose**: Creates chunks of approximately equal token size.

**How it works**:

- Tokenizes the text using tiktoken
- Aims for chunks of size `chunk_size` tokens (default: 200)
- Looks for natural breakpoints like punctuation or newlines
- Prefers splitting at sentence/paragraph boundaries
- Ensures chunks are at least `min_chunk_chars` long (default: 350)

## 3. PARA_SENTENCE (`Splitter.PARA_SENTENCE`)

**Purpose**: Splits documents respecting paragraph and sentence boundaries.

**How it works**:

- Recursively splits documents until chunks are below 1.3× the target size
- Maintains document structure by preserving natural paragraph breaks
- Adjusts chunk boundaries to avoid cutting in the middle of sentences
- Stops when it can't split chunks further without breaking coherence

## 4. SIMPLE (`Splitter.SIMPLE`)

**Purpose**: Basic splitting using predefined separators.

**How it works**:

- Uses a list of separators to split text (default: `["\n\n", "\n", " ", ""]`)
- Splits on the first separator in the list
- Doesn't attempt to balance chunk sizes
- Simplest and fastest splitting method


## Basic Configuration

```python
from langroid.parsing.parser import ParsingConfig, Splitter

config = ParsingConfig(
    splitter=Splitter.MARKDOWN,  # Most feature-rich option
    chunk_size=200,              # Target tokens per chunk
    chunk_size_variation=0.30,   # Allowed variation from target
    overlap=50,                  # Token overlap between chunks
    token_encoding_model="text-embedding-3-small"
)
```

## Format-Specific Configuration

```python
# Customize PDF parsing
config = ParsingConfig(
    splitter=Splitter.PARA_SENTENCE,
    pdf=PdfParsingConfig(
        library="pymupdf4llm"  # Default PDF parser
    )
)

# Use Gemini for PDF parsing
config = ParsingConfig(
    pdf=PdfParsingConfig(
        library="gemini",
        gemini_config=GeminiConfig(
            model_name="gemini-2.0-flash",
            requests_per_minute=5
        )
    )
)
```

# Setting Up Parsing Config in DocChatAgentConfig

You can configure document parsing when creating a `DocChatAgent` by customizing the `parsing` field within the `DocChatAgentConfig`. Here's how to do it:

```python
from langroid.agent.special.doc_chat_agent import DocChatAgentConfig  
from langroid.parsing.parser import ParsingConfig, Splitter, PdfParsingConfig

# Create a DocChatAgent with custom parsing configuration
agent_config = DocChatAgentConfig(
    parsing=ParsingConfig(
        # Choose the splitting strategy
        splitter=Splitter.MARKDOWN,  # Structure-aware splitting with header context
        
        # Configure chunk sizes
        chunk_size=800,              # Target tokens per chunk
        overlap=150,                 # Overlap between chunks
        
        # Configure chunk behavior
        max_chunks=5000,             # Maximum number of chunks to create
        min_chunk_chars=250,         # Minimum characters when truncating at punctuation
        discard_chunk_chars=10,      # Discard chunks smaller than this
        
        # Configure context window
        n_neighbor_ids=3,            # Store 3 chunk IDs on either side
        
        # Configure PDF parsing specifically
        pdf=PdfParsingConfig(
            library="pymupdf4llm",   # Choose PDF parsing library
        )
    )
)
```
</file>

<file path="docs/notes/custom-azure-client.md">
# Custom Azure OpenAI client

!!! warning "This is only for using a Custom Azure OpenAI client"
    This note **only** meant for those who are trying to use a custom Azure client,
    and is NOT TYPICAL for most users. For typical usage of Azure-deployed models with Langroid, see
    the [docs](https://langroid.github.io/langroid/notes/azure-openai-models/), 
    the [`test_azure_openai.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_azure_openai.py) and
    [`example/basic/chat.py`](https://github.com/langroid/langroid/blob/main/examples/basic/chat.py)


Example showing how to use Langroid with Azure OpenAI and Entra ID
authentication by providing a custom client.

By default, Langroid manages the configuration and creation 
of the Azure OpenAI client (see the [Setup guide](https://langroid.github.io/langroid/quick-start/setup/#microsoft-azure-openai-setupoptional)
for details). In most cases, the available configuration options
are sufficient, but if you need to manage any options that
are not exposed, you instead have the option of providing a custom
client, in Langroid v0.29.0 and later. 

In order to use a custom client, you must provide a function that
returns the configured client. Depending on whether you need to make
synchronous or asynchronous calls, you need to provide the appropriate
client. A sketch of how this is done (supporting both sync and async calls)
is given below:

```python
def get_azure_openai_client():
    return AzureOpenAI(...)

def get_azure_openai_async_client():
    return AsyncAzureOpenAI(...)

lm_config = lm.AzureConfig(
    azure_openai_client_provider=get_azure_openai_client,
    azure_openai_async_client_provider=get_azure_openai_async_client,
)
```

## Microsoft Entra ID Authentication

A key use case for a custom client is [Microsoft Entra ID authentication](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/managed-identity).
Here you need to provide an `azure_ad_token_provider` to the client. 
For examples on this, see [examples/basic/chat-azure-client.py](https://github.com/langroid/langroid/blob/main/examples/basic/chat-azure-client.py) 
and [examples/basic/chat-azure-async-client.py](https://github.com/langroid/langroid/blob/main/examples/basic/chat-azure-async-client.py).
</file>

<file path="docs/notes/enriching-for-retrieval.md">
# Enriching Chunked Documents for Better Retrieval

Available in Langroid v0.34.0 or later. 

When using the `DocChatAgent` for RAG with documents in highly specialized/technical
domains, retrieval accuracy may be low since embeddings are not sufficient to capture 
relationships between entities, e.g. suppose a document-chunk consists of a medical 
test name "BUN" (Blood Urea Nitrogen), and a retrieval query is looking for 
tests related to kidney function, the embedding for "BUN" may not be close to the
embedding for "kidney function", and the chunk may not be retrieved.

In such cases it is useful to *enrich* the chunked documents with additional keywords
(or even "hypothetical questions") to increase the "semantic surface area" of the chunk,
so that the chunk is more likely to be retrieved for relevant queries.

As of Langroid v0.34.0, you can provide a `chunk_enrichment_config` 
of type `ChunkEnrichmentAgentConfig`, in the `DocChatAgentConfig`. 
This config extends `ChatAgentConfig` and has the following fields:

- `batch_size` (int): The batch size for the chunk enrichment agent. Default is 50.
- `delimiter` (str): The delimiter to use when 
   concatenating the chunk and the enriched text. 
- `enrichment_prompt_fn`: function (`str->str`) that creates a prompt
  from a doc-chunk string `x`

In the above medical test example, suppose we want to augment a chunk containing
only the medical test name, with the organ system it is related to. We can set up
a `ChunkEnrichmentAgentConfig` as follows:

```python
from langroid.agent.special.doc.doc_chat_agent import (
    ChunkEnrichmentAgentConfig,
)

enrichment_config = ChunkEnrichmentAgentConfig(
    batch_size=10,
    system_message=f"""
        You are an experienced clinical physician, very well-versed in
        medical tests and their names.
        You will be asked to identify WHICH ORGAN(s) Function/Health
        a test name is most closely associated with, to aid in 
        retrieving the medical test names more accurately from an embeddings db
        that contains thousands of such test names.
        The idea is to use the ORGAN NAME(S) provided by you, 
        to make the right test names easier to discover via keyword-matching
        or semantic (embedding) similarity.
         Your job is to generate up to 3 ORGAN NAMES
         MOST CLOSELY associated with the test name shown, ONE PER LINE.
         DO NOT SAY ANYTHING ELSE, and DO NOT BE OBLIGATED to provide 3 organs --
         if there is just one or two that are most relevant, that is fine.
        Examples:
          "cholesterol" -> "heart function", 
          "LDL" -> "artery health", etc,
          "PSA" -> "prostate health", 
          "TSH" -> "thyroid function", etc.                
        """,
    enrichment_prompt_fn=lambda test: f"""
        Which ORGAN(S) Function/Health is the medical test named 
        '{test}' most closely associated with?
        """,
)

doc_agent_config = DocChatAgentConfig(
    chunk_enrichment_config=enrichment_config,
    ...
)
```

This works as follows:

- Before ingesting document-chunks into the vector-db, a specialized 
  "chunk enrichment" agent is created, configured with the `enrichment_config` above.
- For each document-chunk `x`, the agent's `llm_response_forget_async` method is called
 using the prompt created by `enrichment_prompt_fn(x)`. The resulting response text 
 `y` is concatenated with the original chunk text `x` using the `delimiter`,
  before storing in the vector-db. This is done in batches of size `batch_size`.
- At query time, after chunk retrieval, before generating the final LLM response,
  the enrichments are stripped from the retrieved chunks, and the original content
  of the retrieved chunks are passed to the LLM for generating the final response.

See the script 
[`examples/docqa/doc-chunk-enrich.py`](https://github.com/langroid/langroid/blob/main/examples/docqa/doc-chunk-enrich.py)
for a complete example. Also see the tests related to "enrichment" in 
[`test_doc_chat_agent.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_doc_chat_agent.py).
</file>

<file path="docs/notes/file-input.md">
# PDF Files and Image inputs to LLMs

Langroid supports sending PDF files and images (either URLs or local files)
directly to Large Language Models with multi-modal 
capabilities. This feature allows models to "see" files and other documents,
and works with most multi-modal models served via an OpenAI-compatible API,
e.g.:

- OpenAI's GPT-4o series and GPT-4.1 series
- Gemini models
- Claude series models (via OpenAI-compatible providers like OpenRouter or LiteLLM )

To see example usage, see:

- tests: [test_llm.py](https://github.com/langroid/langroid/blob/main/tests/main/test_llm.py), 
   [test_llm_async.py](https://github.com/langroid/langroid/blob/main/tests/main/test_llm_async.py),
   [test_chat-agent.py](https://github.com/langroid/langroid/blob/main/tests/main/test_chat_agent.py).
- example script: [pdf-json-no-parse.py](https://github.com/langroid/langroid/blob/main/examples/extract/pdf-json-no-parse.py), which shows
  how you can directly extract structured information from a document 
  **without having to first parse it to markdown** (which is inherently lossy).

## Basic Usage directly with LLM `chat` and `achat` methods

First create a `FileAttachment` object using one of the `from_` methods.
For image (`png`, `jpg/jpeg`) files you can use `FileAttachment.from_path(p)`
where `p` is either a local file path, or a http/https URL.
For PDF files, you can use `from_path` with a local file, or `from_bytes` or `from_io`
(see below). In the examples below we show only `pdf` examples.

```python
from langroid.language_models.base import LLMMessage, Role
from langroid.parsing.file_attachment import FileAttachment
import langroid.language_models as lm

# Create a file attachment
attachment = FileAttachment.from_path("path/to/document.pdf")

# Create messages with attachment
messages = [
    LLMMessage(role=Role.SYSTEM, content="You are a helpful assistant."),
    LLMMessage(
        role=Role.USER, content="What's the title of this document?", 
        files=[attachment]
    )
]

# Set up LLM with model that supports attachments
llm = lm.OpenAIGPT(lm.OpenAIGPTConfig(chat_model=lm.OpenAIChatModel.GPT4o))

# Get response
response = llm.chat(messages=messages)
```

## Supported File Formats

Currently the OpenAI-API supports:

- PDF files (including image-based PDFs)
- image files and URLs


## Creating Attachments

There are multiple ways to create file attachments:

```python
# From a file path
attachment = FileAttachment.from_path("path/to/file.pdf")

# From bytes
with open("path/to/file.pdf", "rb") as f:
    attachment = FileAttachment.from_bytes(f.read(), filename="document.pdf")

# From a file-like object
from io import BytesIO
file_obj = BytesIO(pdf_bytes)
attachment = FileAttachment.from_io(file_obj, filename="document.pdf")
```

## Follow-up Questions

You can continue the conversation with follow-up questions that reference the attached files:

```python
messages.append(LLMMessage(role=Role.ASSISTANT, content=response.message))
messages.append(LLMMessage(role=Role.USER, content="What is the main topic?"))
response = llm.chat(messages=messages)
```

## Multiple Attachments

Langroid allows multiple files can be sent in a single message,
but as of 16 Apr 2025, sending multiple PDF files does not appear to be properly supported in the 
APIs (they seem to only use the last file attached), although sending multiple 
images does work. 

```python
messages = [
    LLMMessage(
        role=Role.USER,
        content="Compare these documents",
        files=[attachment1, attachment2]
    )
]
```

## Using File Attachments with Agents

Agents can process file attachments as well, in the `llm_response` method,
which takes a `ChatDocument` object as input. 
To pass in file attachments, include the `files` field in the `ChatDocument`,
in addition to the content:

```python
import langroid as lr
from langroid.agent.chat_document import ChatDocument, ChatDocMetaData
from langroid.mytypes import Entity


agent = lr.ChatAgent(lr.ChatAgentConfig())

user_input = ChatDocument(
    content="What is the title of this document?",
    files=[attachment],
    metadata=ChatDocMetaData(
        sender=Entity.USER,
    )
)
# or more simply, use the agent's `create_user_response` method:
# user_input = agent.create_user_response(
#     content="What is the title of this document?",
#     files=[attachment],    
# )
response = agent.llm_response(user_input)
```


## Using File Attachments with Tasks

In Langroid,  `Task.run()` can take a `ChatDocument` object as input,
and as mentioned above, it can contain attached files in the `files` field.
To ensure proper orchestration, you'd want to properly set various `metadata` fields
as well, such as `sender`, etc. Langroid provides a convenient 
`create_user_response` method to create a `ChatDocument` object with the necessary 
metadata, so you only need to specify the `content` and `files` fields:


```python
from langroid.parsing.file_attachment import FileAttachment
from langroid.agent.task import Task

agent = ...
# Create task
task = Task(agent, interactive=True)

# Create a file attachment
attachment = FileAttachment.from_path("path/to/document.pdf")

# Create input with attachment
input_message = agent.create_user_response(
    content="Extract data from this document",
    files=[attachment]
)

# Run task with file attachment
result = task.run(input_message)
```

See the script [`pdf-json-no-parse.py`](https://github.com/langroid/langroid/blob/main/examples/extract/pdf-json-no-parse.py)
for a complete example of using file attachments with tasks.

## Practical Applications

- PDF document analysis and data extraction
- Report summarization
- Structured information extraction from documents
- Visual content analysis

For more complex applications, consider using the Task and Agent infrastructure in 
Langroid to orchestrate multi-step document processing workflows.
</file>

<file path="docs/notes/glhf-chat.md">
# Support for Open LLMs hosted on glhf.chat

Available since v0.23.0.

If you're looking to use Langroid with one of the recent performant Open LLMs,
such as `Qwen2.5-Coder-32B-Instruct`, you can do so using our glhf.chat integration.

See [glhf.chat](https://glhf.chat/chat/create) for a list of available models.

To run with one of these models, 
set the chat_model in the `OpenAIGPTConfig` to `"glhf/<model_name>"`, 
where model_name is hf: followed by the HuggingFace repo path, 
e.g. `Qwen/Qwen2.5-Coder-32B-Instruct`, 
so the full chat_model would be `"glhf/hf:Qwen/Qwen2.5-Coder-32B-Instruct"`.

Also many of the example scripts in the main repo (under the `examples` directory) can
be run with this and other LLMs using the model-switch cli arg `-m <model>`, e.g.

```bash
python3 examples/basic/chat.py -m glhf/hf:Qwen/Qwen2.5-Coder-32B-Instruct
```

Additionally, you can run many of the tests in the `tests` directory with this model
instead of the default OpenAI `GPT4o` using `--m <model>`, e.g. 

```bash
pytest tests/main/test_chat_agent.py --m glhf/hf:Qwen/Qwen2.5-Coder-32B-Instruct
```

For more info on running langroid with Open LLMs via other providers/hosting services,
see our
[guide to using Langroid with local/open LLMs](https://langroid.github.io/langroid/tutorials/local-llm-setup/#local-llms-hosted-on-glhfchat).
</file>

<file path="docs/notes/handle-llm-no-tool.md">
# Handling a non-tool LLM message

A common scenario is to define a `ChatAgent`, enable it to use some tools
(i.e. `ToolMessages`s), wrap it in a Task, and call `task.run()`, e.g. 

```python
class MyTool(lr.ToolMessage)
    ...
    
import langroid as lr
config = lr.ChatAgentConfig(...)
agent = lr.ChatAgent(config)
agent.enable_message(MyTool)
task = lr.Task(agent, interactive=False)
task.run("Hello")
```

Consider what happens when you invoke `task.run()`. When the agent's `llm_response` 
returns a valid tool-call, the sequence of steps looks like this:

- `llm_response` -> tool $T$
- `aggent_response` handles $T$ -> returns results $R$
- `llm_response` responds to $R$ -> returns msg $M$
- and so on

If the LLM's response M contains a valid tool, then this cycle continues
with another tool-handling round. However, if the LLM's response M does _not_ contain
a tool-call, it is unclear whether:

- (1) the LLM "forgot" to generate a tool (or generated it wrongly, hence it was
   not recognized by Langroid as a tool), or 
- (2) the LLM's response M is an "answer" meant to be shown to the user 
    to continue the conversation, or
- (3) the LLM's response M is intended to be a "final" response, ending the task. 

Internally, when the `ChatAgent`'s `agent_response` method sees a message that does not
contain a tool, it invokes the `handle_message_fallback` method, which by default
does nothing (returns `None`). However you can override this method by deriving
from `ChatAgent`, as described in this [FAQ](https://langroid.github.io/langroid/FAQ/#how-can-i-handle-an-llm-forgetting-to-generate-a-toolmessage). As in that FAQ, 
in this fallback method, you would
typically have code that checks whether the message is a `ChatDocument`
and whether it came from the LLM, and if so, you would have the method return 
an appropriate message or tool (e.g. a reminder to the LLM, or an orchestration tool
such as [`AgentDoneTool`][langroid.agent.tools.orchestration.AgentDoneTool]).

To simplify the developer experience, as of version 0.39.2 Langroid also provides an
easier way to specify what this fallback method should return, via the
`ChatAgentConfig.handle_llm_no_tool` parameter, for example:
```python
config = lr.ChatAgentConfig(
    # ... other params
    handle_llm_no_tool="done", # terminate task if LLM sends non-tool msg
)
```
The `handle_llm_no_tool` parameter can have the following possible values:

- A special value from the [`NonToolAction`][langroid.mytypes.NonToolAction] Enum, e.g.:
    - `"user"` or `NonToolAction.USER` - this is interpreted by langroid to return 
     `ForwardTool(agent="user")`, meaning the message is passed to the user to await
     their next input.
    - `"done"` or `NonToolAction.DONE` - this is interpreted by langroid to return 
     `AgentDoneTool(content=msg.content, tools=msg.tool_messages)`, 
     meaning the task is ended, and any content and tools in the current message will
     appear in the returned `ChatDocument`.
- A callable, specifically a function that takes a `ChatDocument` and returns any value. 
  This can be useful when you want the fallback action to return a value 
  based on the current message, e.g. 
  `lambda msg: AgentDoneTool(content=msg.content)`, or it could a more 
  elaborate function, or a prompt that contains the content of the current message.
- Any `ToolMessage` (typically an [Orchestration](https://github.com/langroid/langroid/blob/main/langroid/agent/tools/orchestration.py) tool like 
  `AgentDoneTool` or `ResultTool`)
- Any string, meant to be handled by the LLM. 
  Typically this would be a reminder to the LLM, something like:
```python
"""Your intent is not clear -- 
- if you forgot to use a Tool such as `ask_tool` or `search_tool`, try again.
- or if you intended to return your final answer, use the Tool named `done_tool`,
  with `content` set to your answer.
"""
```

A simple example is in the [`chat-search.py`](https://github.com/langroid/langroid/blob/main/examples/basic/chat-search.py) 
script, and in the `test_handle_llm_no_tool` test in   
[`test_tool_messages.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_tool_messages.py).
</file>

<file path="docs/notes/knowledge-graphs.md">
# Knowledge-graph support

Langroid can be used to set up natural-language conversations with knowledge graphs.
Currently the two most popular knowledge graphs are supported:

## Neo4j

- [implementation](https://github.com/langroid/langroid/tree/main/langroid/agent/special/neo4j)
- test: [test_neo4j_chat_agent.py](https://github.com/langroid/langroid/blob/main/tests/main/test_neo4j_chat_agent.py)
- examples: [chat-neo4j.py](https://github.com/langroid/langroid/blob/main/examples/kg-chat/chat-neo4j.py) 

## ArangoDB

Available with Langroid v0.20.1 and later.

Uses the [python-arangodb](https://github.com/arangodb/python-arango) library.

- [implementation](https://github.com/langroid/langroid/tree/main/langroid/agent/special/arangodb)
- tests: [test_arangodb.py](https://github.com/langroid/langroid/blob/main/tests/main/test_arangodb.py), [test_arangodb_chat_agent.py](https://github.com/langroid/langroid/blob/main/tests/main/test_arangodb_chat_agent.py)
- example: [chat-arangodb.py](https://github.com/langroid/langroid/blob/main/examples/kg-chat/chat-arangodb.py)
</file>

<file path="docs/notes/langdb.md">
# LangDB with Langroid

## Introduction

[LangDB](https://langdb.ai/) is an AI gateway that provides OpenAI-compatible APIs to access 250+ LLMs. It offers cost control, observability, and performance benchmarking while enabling seamless switching between models. 
Langroid has a simple integration with LangDB's API service, so there are no dependencies
to install. (LangDB also has a self-hosted version, which is not yet supported in Langroid).

## Setup environment variables

At minimum, ensure you have these env vars in your `.env` file:

```
LANGDB_API_KEY=your_api_key_here
LANGDB_PROJECT_ID=your_project_id_here
```

## Using LangDB with Langroid

### Configure LLM and Embeddings

In `OpenAIGPTConfig`, when you specify the `chat_model` with a `langdb/` prefix,
langroid uses the API key, `project_id` and other langDB-specific parameters
from the `langdb_params` field; if any of these are specified in the `.env` file
or in the environment explicitly, they will override the values in `langdb_params`.
For example, to use Anthropic's Claude-3.7-Sonnet model, 
set `chat_model="langdb/anthropic/claude-3.7-sonnet", as shown below. 
You can entirely omit the `langdb_params` field if you have already set up 
the fields as environment variables in your `.env` file, e.g. the `api_key`
and `project_id` are read from the environment variables 
`LANGDB_API_KEY` and `LANGDB_PROJECT_ID` respectively, and similarly for
the other fields (which are optional).

```python
import os
import uuid
from langroid.language_models.openai_gpt import OpenAIGPTConfig, LangDBParams
from langroid.embedding_models.models import OpenAIEmbeddingsConfig

# Generate tracking IDs (optional)
thread_id = str(uuid.uuid4())
run_id = str(uuid.uuid4())

# Configure LLM
llm_config = OpenAIGPTConfig(
    chat_model="langdb/anthropic/claude-3.7-sonnet",
    # omit the langdb_params field if you're not using custom tracking,
    # or if all its fields are provided in env vars, like
    # LANGDB_API_KEY, LANGDB_PROJECT_ID, LANGDB_RUN_ID, LANGDB_THREAD_ID, etc.
    langdb_params=LangDBParams(
        label='my-app',
        thread_id=thread_id,
        run_id=run_id,
        # api_key, project_id are read from .env or environment variables
        # LANGDB_API_KEY, LANGDB_PROJECT_ID respectively.
    )
)
```

Similarly, you can configure the embeddings using `OpenAIEmbeddingsConfig`,
which also has a `langdb_params` field that works the same way as 
in `OpenAIGPTConfig` (i.e. it uses the API key and project ID from the environment
if provided, otherwise uses the default values in `langdb_params`). Again the
`langdb_params` does not need to be specified explicitly, if you've already
set up the environment variables in your `.env` file.

```python
# Configure embeddings
embedding_config = OpenAIEmbeddingsConfig(
    model_name="langdb/openai/text-embedding-3-small",
)
```

## Tracking and Observability

LangDB provides special headers for request tracking:

- `x-label`: Tag requests for filtering in the dashboard
- `x-thread-id`: Track conversation threads (UUID format)
- `x-run-id`: Group related requests together

## Examples

The `langroid/examples/langdb/` directory contains examples demonstrating:

1. **RAG with LangDB**: `langdb_chat_agent_docs.py`
2. **LangDB with Function Calling**: `langdb_chat_agent_tool.py`
3. **Custom Headers**: `langdb_custom_headers.py`

## Viewing Results

Visit the [LangDB Dashboard](https://dashboard.langdb.com) to:
- Filter requests by label, thread ID, or run ID
- View detailed request/response information
- Analyze token usage and costs

For more information, visit [LangDB Documentation](https://docs.langdb.com).

See example scripts [here](https://github.com/langroid/langroid/tree/main/examples/langdb)
</file>

<file path="docs/notes/large-tool-results.md">
# Handling large tool results

Available since Langroid v0.22.0.

In some cases, the result of handling a `ToolMessage` could be very large,
e.g. when the Tool is a database query that returns a large number of rows,
or a large schema. When used in a task loop, this large result may then be
sent to the LLM to generate a response, which in some scenarios may not
be desirable, as it increases latency, token-cost and distractions. 
Langroid allows you to set two optional parameters in a `ToolMessage` to
handle this situation:

- `_max_result_tokens`: *immediately* truncate the result to this number of tokens.
- `_max_retained_tokens`: *after* a responder (typically the LLM) responds to this 
   tool result (which optionally may already have been 
   truncated via `_max_result_tokens`),
   edit the message history to truncate the result to this number of tokens.

You can set one, both or none of these parameters. If you set both, you would 
want to set `_max_retained_tokens` to a smaller number than `_max_result_tokens`.

See the test `test_reduce_raw_tool_result` in `test_tool_messages.py` for an example.

Here is a conceptual example. Suppose there is a Tool called `MyTool`,
with parameters `_max_result_tokens=20` and `_max_retained_tokens=10`.
Imagine a task loop where the user says "hello", 
and then LLM generates a call to `MyTool`, 
and the tool handler (i.e. `agent_response`) generates a result of 100 tokens.
This result is immediately truncated to 20 tokens, and then the LLM responds to it
with a message `response`.


The agent's message history looks like this:

```
1. System msg.
2. user: hello
3. LLM: MyTool
4. Agent (Tool handler): 100-token result => reduced to 20 tokens
5. LLM: response
```

Immediately after the LLM's response at step 5, the message history is edited
so that the message contents at position 4 are truncated to 10 tokens,
as specified by `_max_retained_tokens`.
</file>

<file path="docs/notes/litellm-proxy.md">
# Using LiteLLM Proxy with OpenAIGPTConfig

You can easily configure Langroid to use LiteLLM proxy for accessing models with a 
simple prefix `litellm-proxy/` in the `chat_model` name:

## Using the `litellm-proxy/` prefix

When you specify a model with the `litellm-proxy/` prefix, Langroid automatically uses the LiteLLM proxy configuration:

```python
from langroid.language_models.openai_gpt import OpenAIGPTConfig

config = OpenAIGPTConfig(
    chat_model="litellm-proxy/your-model-name"
)
```

## Setting LiteLLM Proxy Parameters

When using the `litellm-proxy/` prefix, Langroid will read connection parameters from either:

1. The `litellm_proxy` config object:
   ```python
   from langroid.language_models.openai_gpt import OpenAIGPTConfig, LiteLLMProxyConfig
   
   config = OpenAIGPTConfig(
       chat_model="litellm-proxy/your-model-name",
       litellm_proxy=LiteLLMProxyConfig(
           api_key="your-litellm-proxy-api-key",
           api_base="http://your-litellm-proxy-url"
       )
   )
   ```

2. Environment variables (which take precedence):
   ```bash
   export LITELLM_API_KEY="your-litellm-proxy-api-key"
   export LITELLM_API_BASE="http://your-litellm-proxy-url"
   ```

This approach makes it simple to switch between using LiteLLM proxy and 
other model providers by just changing the model name prefix,
without needing to modify the rest of your code or tweaking env variables.

## Note: LiteLLM Proxy vs LiteLLM Library

**Important distinction:** Using the `litellm-proxy/` prefix connects to a LiteLLM proxy server, which is different from using the `litellm/` prefix. The latter utilizes the LiteLLM adapter library directly without requiring a proxy server. Both approaches are supported in Langroid, but they serve different use cases:

- Use `litellm-proxy/` when connecting to a deployed LiteLLM proxy server
- Use `litellm/` when you want to use the LiteLLM library's routing capabilities locally

Choose the approach that best fits your infrastructure and requirements.
</file>

<file path="docs/notes/llama-cpp-embeddings.md">
# Local embeddings provision via llama.cpp server

As of Langroid v0.30.0, you can use llama.cpp as provider of embeddings
to any of Langroid's vector stores, allowing access to a wide variety of
GGUF-compatible embedding models, e.g. [nomic-ai's Embed Text V1.5](https://huggingface.co/nomic-ai/nomic-embed-text-v1.5-GGUF).

When defining a VecDB, you can provide an instance of 
`LlamaCppServerEmbeddingsConfig` to the VecDB config to instantiate
the llama.cpp embeddings server handler.

To configure the `LlamaCppServerEmbeddingsConfig`, there are several
parameters that should be adjusted, these are:

```python
embed_cfg = LlamaCppServerEmbeddingsConfig(
    api_base="your-address-here", # IP + Port, e.g. localhost:5001
    dims=768,  # Change this to match the dimensions of your embedding model
    context_length=2048, # Change to match the config of the model.
    batch_size=2048, # Safest to ensure this matches context_length
    )
```

The above configuration is sufficient for a server running the example
nomic embedding model with the command:
```
./llama-server -ngl 100 -c 2048 -m ~/nomic-embed-text-v1.5.Q8_0.gguf --host IP_ADDRESS --port PORT --embeddings -b 2048 -ub 2048
```

An example setup can be found inside [examples/docqa/chat.py](https://github.com/langroid/langroid/blob/main/examples/docqa/chat.py).
</file>

<file path="docs/notes/marker-pdf.md">
---

# **Using `marker` as a PDF Parser in `langroid`**  

## **Installation**  

### **Standard Installation**  
To use [`marker`](https://github.com/VikParuchuri/marker) as a PDF parser in `langroid`, 
install it with the `marker-pdf` extra:

```bash
pip install langroid[marker-pdf]
```
or in combination with other extras as needed, e.g.:
```bash
pip install "langroid[marker-pdf,hf-embeddings]"
```

Note, however, that due to an **incompatibility with `docling`**,
if you install `langroid` using the `all` extra 
(or another extra such as  `doc-chat` or `pdf-parsers` that 
also includes `docling`),
e.g. `pip install "langroid[all]"`, or `pip install "langroid[doc-chat]"`,
then due to this version-incompatibility with `docling`, you will get an 
**older** version of `marker-pdf`, which does not work with Langroid.
This may not matter if you did not intend to specifically use `marker`, 
but if you do want to use `marker`, you will need to install langroid
with the `marker-pdf` extra, as shown above, in combination with other
extras as needed, as shown above.


#### **For Intel-Mac Users**  
If you are on an **Intel Mac**, `docling` and `marker` cannot be 
installed together with langroid as extras, 
due to a **transformers version conflict**.  
To resolve this, manually install `marker-pdf` with:  

```bash
pip install marker-pdf[full]
```

Make sure to install this within your `langroid` virtual environment.

---

## **Example: Parsing a PDF with `marker` in `langroid`**  

```python
from langroid.parsing.document_parser import DocumentParser
from langroid.parsing.parser import MarkerConfig, ParsingConfig, PdfParsingConfig
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()
gemini_api_key = os.environ.get("GEMINI_API_KEY")

# Path to your PDF file
path = "<path_to_your_pdf_file>"

# Define parsing configuration
parsing_config = ParsingConfig(
    n_neighbor_ids=2,  # Number of neighboring sections to keep
    pdf=PdfParsingConfig(
        library="marker",  # Use `marker` as the PDF parsing library
        marker_config=MarkerConfig(
            config_dict={
                "use_llm": True,  # Enable high-quality LLM processing
                "gemini_api_key": gemini_api_key,  # API key for Gemini LLM
            }
        )
    ),
)

# Create the parser and extract the document
marker_parser = DocumentParser.create(path, parsing_config)
doc = marker_parser.get_doc()
```

---

## **Explanation of Configuration Options**  

If you want to use the default configuration, you can omit `marker_config` entirely.

### **Key Parameters in `MarkerConfig`**
| Parameter        | Description |
|-----------------|-------------|
| `use_llm`       | Set to `True` to enable higher-quality processing using LLMs. |
| `gemini_api_key` | Google Gemini API key for LLM-enhanced parsing. |



You can further customize `config_dict` by referring to [`marker_pdf`'s documentation](https://github.com/VikParuchuri/marker/blob/master/README.md).  

Alternatively, run the following command to view available options:  

```sh
marker_single --help
```

This will display all supported parameters, which you can pass as needed in `config_dict`.

---
</file>

<file path="docs/notes/markitdown.md">
# Markitdown Document Parsers

Langroid integrates with Microsoft's Markitdown library to provide 
conversion of Microsoft Office documents to markdown format. 
Three specialized parsers are available, for `docx`, `xlsx`, and `pptx` files.



## Prerequisites

To use these parsers, install Langroid with the required extras:

```bash
pip install "langroid[markitdown]"    # Just Markitdown parsers
# or
pip install "langroid[doc-parsers]"   # All document parsers
```

## Available Parsers


Once you set up a `parser` for the appropriate document-type, you  
can get the entire document with `parser.get_doc()`,
or get automatically chunked content with `parser.get_doc_chunks()`.


### 1. `MarkitdownDocxParser`

Converts Word documents (`*.docx`) to markdown, preserving structure, 
formatting, and tables.

See the tests

- [`test_docx_parser.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_docx_parser.py)
- [`test_markitdown_parser.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_markitdown_parser.py)

for examples of how to use these parsers.


```python
from langroid.parsing.document_parser import DocumentParser
from langroid.parsing.parser import DocxParsingConfig, ParsingConfig

parser = DocumentParser.create(
    "path/to/document.docx",
    ParsingConfig(
        docx=DocxParsingConfig(library="markitdown-docx"),
        # ... other parsing config options
    ),
)

```


### 2. `MarkitdownXLSXParser`

Converts Excel spreadsheets (*.xlsx/*.xls) to markdown tables, preserving data and sheet structure.

```python
from langroid.parsing.document_parser import DocumentParser
from langroid.parsing.parser import ParsingConfig, MarkitdownXLSParsingConfig

parser = DocumentParser.create(
    "path/to/spreadsheet.xlsx",
    ParsingConfig(xls=MarkitdownXLSParsingConfig())
)
```


### 3. `MarkitdownPPTXParser`

Converts PowerPoint presentations (*.pptx) to markdown, preserving slide content and structure.

```python
from langroid.parsing.document_parser import DocumentParser
from langroid.parsing.parser import ParsingConfig, MarkitdownPPTXParsingConfig

parser = DocumentParser.create(
    "path/to/presentation.pptx",
    ParsingConfig(pptx=MarkitdownPPTXParsingConfig())
)
```
</file>

<file path="docs/notes/overview.md">
This section contains brief notes describing various features and updates.
</file>

<file path="docs/notes/quiet-mode.md">
# Suppressing LLM output: quiet mode

In some scenarios we want to suppress LLM streaming output -- e.g. when doing some type of processing as part of a workflow,
or when using an LLM-agent to generate code via tools, etc. We are more interested in seeing the results of the workflow,
and don't want to see streaming output in the terminal. Langroid provides a `quiet_mode` context manager that can be used
to suppress LLM output, even in streaming mode (in fact streaming is disabled in quiet mode).

E.g.  we can use the `quiet_mode` context manager like this:

```python
from langroid.utils.configuration import quiet_mode, settings

# directly with LLM

llm = ...
with quiet_mode(True):
	response = llm.chat(...)

# or, using an agent

agent = ...
with quiet_mode(True):
	response = agent.llm_response(...)

# or, using a task

task = Task(agent, ...)
with quiet_mode(True):
	result = Taks.run(...)

# we can explicitly set quiet_mode, and this is globally recognized throughout langroid.

settings.quiet = True

# we can also condition quiet mode on another custom cmd line option/flag, such as "silent":

with quiet_mode(silent):
	...

```
</file>

<file path="docs/notes/reasoning-content.md">
# Stream and capture reasoning content in addition to final answer, from Reasoning LLMs

As of v0.35.0, when using certain Reasoning LLM APIs (e.g. `deepseek/deepseek-reasoner`):

- You can see both the reasoning (dim green) and final answer (bright green) text in the streamed output.
- When directly calling the LLM (without using an Agent), the `LLMResponse` object will now contain a `reasoning` field,
  in addition to the earlier `message` field.
- when using a `ChatAgent.llm_response`, extract the reasoning text from the `ChatDocument` object's `reasoning` field
  (in addition to extracting final answer as usual from the `content` field)

Below is a simple example, also in this [script](https://github.com/langroid/langroid/blob/main/examples/reasoning/agent-reasoning.py):

Some notes: 

- To get reasoning trace from Deepseek-R1 via OpenRouter, you must include
the `extra_body` parameter with `include_reasoning` as shown below.
- When using the OpenAI `o3-mini` model, you can set the `resoning_effort` parameter
  to "high", "medium" or "low" to control the reasoning effort.
- As of Feb 9, 2025, OpenAI reasoning models (o1, o1-mini, o3-mini) 
  do *not* expose reasoning trace in the API response.
  
```python
import langroid as lr
import langroid.language_models as lm

llm_config = lm.OpenAIGPTConfig(
  chat_model="deepseek/deepseek-reasoner",
  # inapplicable params are automatically removed by Langroid
  params=lm.OpenAICallParams(
    reasoning_effort="low",  # only supported by o3-mini
    # below lets you get reasoning when using openrouter/deepseek/deepseek-r1
    extra_body=dict(include_reasoning=True),
  ),
)

# (1) Direct LLM interaction
llm = lm.OpenAIGPT(llm_config)

response = llm.chat("Is 9.9 bigger than 9.11?")

# extract reasoning
print(response.reasoning)
# extract answer
print(response.message)

# (2) Using an agent
agent = lr.ChatAgent(
    lr.ChatAgentConfig(
        llm=llm_config,
        system_message="Solve the math problem given by the user",
    )
)

response = agent.llm_response(
    """
    10 years ago, Jack's dad was 5 times as old as Jack.
    Today, Jack's dad is 40 years older than Jack.
    How old is Jack today?
    """
)

# extract reasoning
print(response.reasoning)
# extract answer
print(response.content)
```
</file>

<file path="docs/notes/structured-output.md">
# Structured Output

Available in Langroid since v0.24.0.

On supported LLMs, including recent OpenAI LLMs (GPT-4o and GPT-4o mini) and local LLMs served by compatible inference servers,
in particular, [vLLM](https://github.com/vllm-project/vllm) and [llama.cpp](https://github.com/ggerganov/llama.cpp), the decoding process can be constrained to ensure that the model's output adheres to a provided schema, 
improving the reliability of tool call generation and, in general, ensuring that the output can be reliably parsed and processed by downstream applications.

See [here](../tutorials/local-llm-setup.md/#setup-llamacpp-with-a-gguf-model-from-huggingface) for instructions for usage with `llama.cpp` and [here](../tutorials/local-llm-setup.md/#setup-vllm-with-a-model-from-huggingface) for `vLLM`.

Given a `ChatAgent` `agent` and a type `type`, we can define a strict copy of the agent as follows:
```python
strict_agent = agent[type]
```

We can use this to allow reliable extraction of typed values from an LLM with minimal prompting. For example, to generate typed values given `agent`'s current context, we can define the following:

```python
def typed_agent_response(
    prompt: str,
    output_type: type,
) -> Any:
    response = agent[output_type].llm_response_forget(prompt)
    return agent.from_ChatDocument(response, output_type)
```

We apply this in [test_structured_output.py](https://github.com/langroid/langroid/blob/main/tests/main/test_structured_output.py), in which we define types which describe
countries and their presidents:
```python
class Country(BaseModel):
    """Info about a country"""

    name: str = Field(..., description="Name of the country")
    capital: str = Field(..., description="Capital of the country")


class President(BaseModel):
    """Info about a president of a country"""

    country: Country = Field(..., description="Country of the president")
    name: str = Field(..., description="Name of the president")
    election_year: int = Field(..., description="Year of election of the president")


class PresidentList(BaseModel):
    """List of presidents of various countries"""

    presidents: List[President] = Field(..., description="List of presidents")
```
and show that `typed_agent_response("Show me an example of two Presidents", PresidentsList)` correctly returns a list of two presidents with *no* prompting describing the desired output format.

In addition to Pydantic models, `ToolMessage`s, and simple Python types are supported. For instance, `typed_agent_response("What is the value of pi?", float)` correctly returns $\pi$ to several decimal places.

The following two detailed examples show how structured output can be used to improve the reliability of the [chat-tree example](https://github.com/langroid/langroid/blob/main/examples/basic/chat-tree.py): [this](https://github.com/langroid/langroid/blob/main/examples/basic/chat-tree-structured.py) shows how we can use output formats to force the agent to make the correct tool call in each situation and [this](https://github.com/langroid/langroid/blob/main/examples/basic/chat-tree-structured-simple.py) shows how we can simplify by using structured outputs to extract typed intermediate values and expressing the control flow between LLM calls and agents explicitly.
</file>

<file path="docs/notes/tavily_search.md">
---

# **Using Tavily Search with Langroid**

---

## **1. Set Up Tavily**

1. **Access Tavily Platform**  
   Go to the [Tavily Platform](https://tavily.com/).
   
2. **Sign Up or Log In**  
   Create an account or log in if you already have one.

3. **Get Your API Key**  
   - Navigate to your dashboard
   - Copy your API key

4. **Set Environment Variable**  
   Add the following variable to your `.env` file:
   ```env
   TAVILY_API_KEY=<your_api_key>

---

## **2. Use Tavily Search with Langroid**

### **Installation**

```bash
uv add tavily-python
# or
pip install tavily-python
```
### **Code Example**

```python
import langroid as lr
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.tools.tavily_search_tool import TavilySearchTool

# Configure the ChatAgent
config = ChatAgentConfig(
    name="search-agent",
    llm=lr.language_models.OpenAIGPTConfig(
        chat_model=lr.language_models.OpenAIChatModel.GPT4o
    ),
    use_tools=True
)

# Create the agent
agent = ChatAgent(config)

# Enable Tavily search tool
agent.enable_message(TavilySearchTool)

```
---

## **3. Perform Web Searches**

Use the agent to perform web searches using Tavily's AI-powered search.

```python
# Simple search query
response = agent.llm_response(
    "What are the latest developments in quantum computing?"
)
print(response)

# Search with specific number of results
response = agent.llm_response(
    "Find 5 recent news articles about artificial intelligence."
)
print(response)
```
---

## **4. Custom Search Requests**

You can also customize the search behavior by creating a TavilySearchTool instance directly:

```python
from langroid.agent.tools.tavily_search_tool import TavilySearchTool

# Create a custom search request
search_request = TavilySearchTool(
    query="Latest breakthroughs in fusion energy",
    num_results=3
)

# Get search results
results = search_request.handle()
print(results)
```

---
</file>

<file path="docs/notes/url_loader.md">
# Firecrawl and Trafilatura Crawlers Documentation

`URLLoader` uses `Trafilatura` if not explicitly specified

## Overview
*   **`FirecrawlCrawler`**:  Leverages the Firecrawl API for efficient web scraping and crawling. 
It offers built-in document processing capabilities, and 
**produces non-chunked markdown output** from web-page content.
Requires `FIRECRAWL_API_KEY` environment variable to be set in `.env` file or environment.
*   **`TrafilaturaCrawler`**: Utilizes the Trafilatura library and Langroid's parsing tools 
for extracting and processing web content - this is the default crawler, and 
does not require setting up an external API key. Also produces 
**chuked markdown output** from web-page content.
*  **`ExaCrawler`**: Integrates with the Exa API for high-quality content extraction.
  Requires `EXA_API_KEY` environment variable to be set in `.env` file or environment.
This crawler also produces **chunked markdown output** from web-page content.


## Installation

`TrafilaturaCrawler` comes with Langroid

To use `FirecrawlCrawler`, install the `firecrawl` extra:

```bash
pip install langroid[firecrawl]
```

## Exa Crawler Documentation

### Overview

`ExaCrawler` integrates with Exa API to extract high-quality content from web pages. 
It provides efficient content extraction with the simplicity of API-based processing.

### Parameters

Obtain an Exa API key from [Exa](https://exa.ai/) and set it in your environment variables, 
e.g. in your `.env` file as:

```env
EXA_API_KEY=your_api_key_here
```

* **config (ExaCrawlerConfig)**: An `ExaCrawlerConfig` object.
    * **api_key (str)**: Your Exa API key.

### Usage

```python
from langroid.parsing.url_loader import URLLoader, ExaCrawlerConfig

# Create an ExaCrawlerConfig object
exa_config = ExaCrawlerConfig(
    # Typically omitted here as it's loaded from EXA_API_KEY environment variable
    api_key="your-exa-api-key" 
)

loader = URLLoader(
    urls=[
        "https://pytorch.org",
        "https://www.tensorflow.org"
    ],
    crawler_config=exa_config
)

docs = loader.load()
print(docs)
```

### Benefits

* Simple API integration requiring minimal configuration
* Efficient handling of complex web pages
* For plain html content, the `exa` api produces high-quality content extraction with 
clean text output with html tags, which we then convert to markdown using the `markdownify` library.
* For "document" content (e.g., `pdf`, `doc`, `docx`), 
the content is downloaded via the `exa` API and langroid's document-processing 
tools are used to produce **chunked output** in a format controlled by the `Parser` configuration
  (defaults to markdown in most cases).


## Trafilatura Crawler Documentation

### Overview

`TrafilaturaCrawler` is a web crawler that uses the Trafilatura library for content extraction 
and Langroid's parsing capabilities for further processing. 


### Parameters

*   **config (TrafilaturaConfig)**: A `TrafilaturaConfig` object that specifies
    parameters related to scraping or output format.
    * `threads` (int): The number of threads to use for downloading web pages.
    * `format` (str): one of `"markdown"` (default), `"xml"` or `"txt"`; in case of `xml`, 
    the output is in html format.

Similar to the `ExaCrawler`, the `TrafilaturaCrawler` works differently depending on 
the type of web-page content:
- for "document" content (e.g., `pdf`, `doc`, `docx`), the content is downloaded
  and parsed with Langroid's document-processing tools are used to produce **chunked output** 
  in a format controlled by the `Parser` configuration (defaults to markdown in most cases).
- for plain-html content, the output format is based on the `format` parameter; 
  - if this parameter is `markdown` (default), the library extracts content in 
    markdown format, and the final output is a list of chunked markdown documents.
  - if this parameter is `xml`, content is extracted in `html` format, which 
    langroid then converts to markdown using the `markdownify` library, and the final
    output is a list of chunked markdown documents.
  - if this parameter is `txt`, the content is extracted in plain text format, and the final
    output is a list of plain text documents.

### Usage

```python
from langroid.parsing.url_loader import URLLoader, TrafilaturaConfig

# Create a TrafilaturaConfig instance
trafilatura_config = TrafilaturaConfig(threads=4)


loader = URLLoader(
    urls=[
        "https://pytorch.org",
        "https://www.tensorflow.org",
        "https://ai.google.dev/gemini-api/docs",
        "https://books.toscrape.com/"
    ],
    crawler_config=trafilatura_config,
)

docs = loader.load()
print(docs)
```

### Langroid Parser Integration

`TrafilaturaCrawler` relies on a Langroid `Parser` to handle document processing. 
The `Parser` uses the default parsing methods or with a configuration that 
can be adjusted to suit the current use case.

## Firecrawl Crawler Documentation

### Overview

`FirecrawlCrawler` is a web crawling utility class that uses the Firecrawl API 
to scrape or crawl web pages efficiently. It offers two modes:

*   **Scrape Mode (default)**: Extracts content from a list of specified URLs.
*   **Crawl Mode**: Recursively follows links from a starting URL, 
gathering content from multiple pages, including subdomains, while bypassing blockers.  
**Note:** `crawl` mode accepts only ONE URL as a list.

### Parameters

Obtain a Firecrawl API key from [Firecrawl](https://firecrawl.dev/) and set it in 
your environment variables, e.g. in your `.env` file as
```env
FIRECRAWL_API_KEY=your_api_key_here
```

*   **config (FirecrawlConfig)**:  A `FirecrawlConfig` object.

    *   **timeout (int, optional)**: Time in milliseconds (ms) to wait for a response. 
        Default is `30000ms` (30 seconds). In crawl mode, this applies per URL.
    *   **limit (int, optional)**: Maximum number of pages to scrape in crawl mode. Helps control API usage.
    *   **params (dict, optional)**: Additional parameters to customize the request. 
        See the [scrape API](https://docs.firecrawl.dev/api-reference/endpoint/scrape) and 
        [crawl API](https://docs.firecrawl.dev/api-reference/endpoint/crawl-post) for details.

### Usage

#### Scrape Mode (Default)

Fetch content from multiple URLs:

```python
from langroid.parsing.url_loader import URLLoader, FirecrawlConfig
from langroid.parsing.document_parser import 

# create a FirecrawlConfig object
firecrawl_config = FirecrawlConfig(
    # typical/best practice is to omit the api_key, and 
    # we leverage Pydantic BaseSettings to load it from the environment variable
    # FIRECRAWL_API_KEY in your .env file
    api_key="your-firecrawl-api-key", 
    timeout=15000,  # Timeout per request (15 sec)
    mode="scrape",
)

loader = URLLoader(
    urls=[
        "https://pytorch.org",
        "https://www.tensorflow.org",
        "https://ai.google.dev/gemini-api/docs",
        "https://books.toscrape.com/"
    ],
    crawler_config=firecrawl_config
)

docs = loader.load()
print(docs)
```

#### Crawl Mode

Fetch content from multiple pages starting from a single URL:

```python
from langroid.parsing.url_loader import URLLoader, FirecrawlConfig

# create a FirecrawlConfig object
firecrawl_config = FirecrawlConfig(
    timeout=30000,  # 10 sec per page
    mode="crawl",
    params={
        "limit": 5,
    }
)


loader = URLLoader(
    urls=["https://books.toscrape.com/"],
    crawler_config=firecrawl_config
)

docs = loader.load()
print(docs)
```

### Output

Results are stored in the `firecrawl_output` directory.

### Best Practices

*   Set `limit` in crawl mode to avoid excessive API usage.
*   Adjust `timeout` based on network conditions and website responsiveness.
*   Use `params` to customize scraping behavior based on Firecrawl API capabilities.

### Firecrawl's Built-In Document Processing

`FirecrawlCrawler` benefits from Firecrawl's built-in document processing, 
which automatically extracts and structures content from web pages (including pdf,doc,docx). 
This reduces the need for complex parsing logic within Langroid.
Unlike the `Exa` and `Trafilatura` crawlers, the resulting documents are 
*non-chunked* markdown documents. 

## Choosing a Crawler

*   Use `FirecrawlCrawler` when you need efficient, API-driven scraping with built-in document processing. 
This is often the simplest and most effective choice, but incurs a cost due to 
the paid API. 
*   Use `TrafilaturaCrawler` when you want local non API based scraping (less accurate ).
*   Use `ExaCrawlwer` as a sort of middle-ground between the two, 
    with high-quality content extraction for plain html content, but rely on 
    Langroid's document processing tools for document content. This will cost
    significantly less than Firecrawl.

## Example script

See the script [`examples/docqa/chat_search.py`](https://github.com/langroid/langroid/blob/main/examples/docqa/chat_search.py) 
which shows how to use a Langroid agent to search the web and scrape URLs to answer questions.
</file>

<file path="docs/notes/xml-tools.md">
# XML-based Tools

Available in Langroid since v0.17.0.

[`XMLToolMessage`][langroid.agent.xml_tool_message.XMLToolMessage] is 
an abstract class for tools formatted using XML instead of JSON.
It has been mainly tested with non-nested tool structures.

For example in [test_xml_tool_message.py](https://github.com/langroid/langroid/blob/main/tests/main/test_xml_tool_message.py)
we define a CodeTool as follows (slightly simplified here):

```python
class CodeTool(XMLToolMessage):
    request: str = "code_tool"
    purpose: str = "Tool for writing <code> to a <filepath>"

    filepath: str = Field(
        ..., 
        description="The path to the file to write the code to"
    )

    code: str = Field(
        ..., 
        description="The code to write to the file", 
        verbatim=True
    )
```

Especially note how the `code` field has `verbatim=True` set in the `Field`
metadata. This will ensure that the LLM receives instructions to 

- enclose `code` field contents in a CDATA section, and 
- leave the `code` contents intact, without any escaping or other modifications.

Contrast this with a JSON-based tool, where newlines, quotes, etc
need to be escaped. LLMs (especially weaker ones) often "forget" to do the right 
escaping, which leads to incorrect JSON, and creates a burden on us to "repair" the
resulting json, a fraught process at best. Moreover, studies have shown that
requiring that an LLM return this type of carefully escaped code
within a JSON string can lead to a significant drop in the quality of the code
generated[^1].

[^1]: [LLMs are bad at returning code in JSON.](https://aider.chat/2024/08/14/code-in-json.html)


Note that tools/functions in OpenAI and related APIs are exclusively JSON-based, 
so in langroid when enabling an agent to use a tool derived from `XMLToolMessage`, 
we set these flags in `ChatAgentConfig`:

- `use_functions_api=False` (disables OpenAI functions/tools)
- `use_tools=True` (enables Langroid-native prompt-based tools)


See also the [`WriteFileTool`][langroid.agent.tools.file_tools.WriteFileTool] for a 
concrete example of a tool derived from `XMLToolMessage`. This tool enables an 
LLM to write content (code or text) to a file.

If you are using an existing Langroid `ToolMessage`, e.g. `SendTool`, you can
define your own subclass of `SendTool`, say `XMLSendTool`, 
inheriting from both `SendTool` and `XMLToolMessage`; see this
[example](https://github.com/langroid/langroid/blob/main/examples/basic/xml_tool.py)
</file>

<file path="docs/overrides/partials/comments.html">
{% if page.meta.comments %}
<h2 id="__comments">{{ lang.t("meta.comments") }}</h2>
<!-- Insert generated snippet here -->
<script src="https://giscus.app/client.js"
        data-repo="langroid/langroid"
        data-repo-id="R_kgDOJXmoFQ"
        data-category="General"
        data-category-id="DIC_kwDOJXmoFc4CZDoY"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="bottom"
        data-theme="dark_protanopia"
        data-lang="en"
        crossorigin="anonymous"
        async>
</script>
<!-- Synchronize Giscus theme with palette -->
<script>
    var giscus = document.querySelector("script[src*=giscus]")

    /* Set palette on initial load */
    var palette = __md_get("__palette")
    if (palette && typeof palette.color === "object") {
        var theme = palette.color.scheme === "slate" ? "dark" : "light"
        giscus.setAttribute("data-theme", theme)
    }

    /* Register event handlers after documented loaded */
    document.addEventListener("DOMContentLoaded", function() {
        var ref = document.querySelector("[data-md-component=palette]")
        ref.addEventListener("change", function() {
            var palette = __md_get("__palette")
            if (palette && typeof palette.color === "object") {
                var theme = palette.color.scheme === "slate" ? "dark" : "light"

                /* Instruct Giscus to change theme */
                var frame = document.querySelector(".giscus-frame")
                frame.contentWindow.postMessage(
                    { giscus: { setConfig: { theme } } },
                    "https://giscus.app"
                )
            }
        })
    })
</script>
{% endif %}
</file>

<file path="docs/quick-start/chat-agent-tool.md">
# A chat agent, equipped with a tool/function-call

!!! tip "Script in `langroid-examples`"
      A full working example for the material in this section is
      in the `chat-agent-tool.py` script in the `langroid-examples` repo:
      [`examples/quick-start/chat-agent-tool.py`](https://github.com/langroid/langroid-examples/tree/main/examples/quick-start/chat-agent-tool.py).

## Tools, plugins, function-calling

An LLM normally generates unstructured text in response to a prompt
(or sequence of prompts). However there are many situations where we would like the LLM
to generate _structured_ text, or even _code_, that can be handled by specialized
functions outside the LLM, for further processing. 
In these situations, we want the LLM to "express" its "intent" unambiguously,
and we achieve this by instructing the LLM on how to format its output
(typically in JSON) and under what conditions it should generate such output.
This mechanism has become known by various names over the last few months
(tools, plugins, or function-calling), and is extremely useful in numerous scenarios,
such as:

- **Extracting structured information** from a document: for example, we can use 
the tool/functions mechanism to have the LLM present the key terms in a lease document
in a JSON structured format, to simplify further processing. 
See an [example](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/chat_multi_extract.py) of this in the `langroid-examples` repo. 
- **Specialized computation**: the LLM can request a units conversion, 
or request scanning a large file (which wouldn't fit into its context) for a specific
pattern.
- **Code execution**: the LLM can generate code that is executed in a sandboxed
environment, and the results of the execution are returned to the LLM.
- **API Calls**: the LLM can generate a JSON containing params for an API call,
  which the tool handler uses to make the call and return the results to the LLM.


For LLM developers, Langroid provides a clean, uniform interface
for the recently released OpenAI [Function-calling](https://platform.openai.com/docs/guides/gpt/function-calling)
as well Langroid's own native "tools" mechanism. The native tools mechanism is meant to be
used when working with non-OpenAI LLMs that do not have a "native" function-calling facility.
You can choose which to enable by setting the 
`use_tools` and `use_functions_api` flags in the `ChatAgentConfig` object.
(Or you can omit setting these, and langroid auto-selects the best mode
depending on the LLM).
The implementation leverages the excellent 
[Pydantic](https://docs.pydantic.dev/latest/) library.
Benefits of using Pydantic are that you never have to write complex JSON specs 
for function calling, and when the LLM hallucinates malformed JSON, 
the Pydantic error message is sent back to the LLM so it can fix it!

## Example: find the smallest number in a list

Again we will use a simple number-game as a toy example to quickly and succinctly
illustrate the ideas without spending too much on token costs. 
This is a modification of the `chat-agent.py` example we saw in an earlier
[section](chat-agent.md). The idea of this single-agent game is that
the agent has in "mind" a list of numbers between 1 and 100, and the LLM has to
find out the smallest number from this list. The LLM has access to a `probe` tool 
(think of it as a function) that takes an argument `number`. When the LLM 
"uses" this tool (i.e. outputs a message in the format required by the tool),
the agent handles this structured message and responds with 
the number of values in its list that are at most equal to the `number` argument. 

## Define the tool as a `ToolMessage`

The first step is to define the tool, which we call `ProbeTool`,
as an instance of the `ToolMessage` class,
which is itself derived from Pydantic's `BaseModel`.
Essentially the `ProbeTool` definition specifies 

- the name of the Agent method that handles the tool, in this case `probe`
- the fields that must be included in the tool message, in this case `number`
- the "purpose" of the tool, i.e. under what conditions it should be used, and what it does

Here is what the `ProbeTool` definition looks like:
```py
class ProbeTool(lr.agent.ToolMessage):
    request: str = "probe" #(1)!
    purpose: str = """ 
        To find which number in my list is closest to the <number> you specify
        """ #(2)!
    number: int #(3)!

    @classmethod
    def examples(cls): #(4)!
        # Compiled to few-shot examples sent along with the tool instructions.
        return [
            cls(number=10),
            (
                "To find which number is closest to 20",
                cls(number=20),
            )
        ]
```

1. This indicates that the agent's `probe` method will handle this tool-message.
2. The `purpose` is used behind the scenes to instruct the LLM
3. `number` is a required argument of the tool-message (function)
4. You can optionally include a class method that returns a list containing examples, 
   of two types: either a class instance, or a tuple consisting of a description and a 
   class instance, where the description is the "thought" that leads the LLM to use the
   tool. In some scenarios this can help with LLM tool-generation accuracy.

!!! note "Stateless tool handlers"
      The above `ProbeTool` is "stateful", i.e. it requires access to a variable in
      the Agent instance (the `numbers` variable). This is why handling this 
      tool-message requires subclassing the `ChatAgent` and defining a special method 
      in the Agent, with a name matching the value of the `request` field of the Tool 
      (`probe` in this case). However you may often define "stateless tools" which 
      don't require access to the Agent's state. For such tools, you can define a 
      handler method right in the `ToolMessage` itself, with a name `handle`. Langroid 
      looks for such a method in the `ToolMessage` and automatically inserts it into 
      the Agent as a method with name matching the `request` field of the Tool. Examples of
      stateless tools include tools for numerical computation 
      (e.g., in [this example](https://langroid.github.io/langroid/examples/agent-tree/)),
      or API calls (e.g. for internet search, see 
      [DuckDuckGoSearch Tool][langroid.agent.tools.duckduckgo_search_tool.DuckduckgoSearchTool]).
        

## Define the ChatAgent, with the `probe` method

As before we first create a `ChatAgentConfig` object:

```py
config = lr.ChatAgentConfig(
    name="Spy",
    llm = lr.language_models.OpenAIGPTConfig(
        chat_model=lr.language_models.OpenAIChatModel.GPT4o,
    ),
    use_tools=True, #(1)!
    use_functions_api=False, #(2)!
    vecdb=None,
)
```

1. whether to use langroid's native tools mechanism
2. whether to use OpenAI's function-calling mechanism

Next we define the Agent class itself, which we call `SpyGameAgent`,
with a member variable to hold its "secret" list of numbers.
We also add `probe` method (to handle the `ProbeTool` message)
to this class, and instantiate it:

```py
class SpyGameAgent(lr.ChatAgent):
    def __init__(self, config: lr.ChatAgentConfig):
        super().__init__(config)
        self.numbers = [3, 4, 8, 11, 15, 25, 40, 80, 90]

    def probe(self, msg: ProbeTool) -> str: #(1)!
        # return how many values in self.numbers are less or equal to msg.number
        return str(len([n for n in self.numbers if n <= msg.number]))

spy_game_agent = SpyGameAgent(config)
``` 

1. Note that this method name exactly matches the value of the `request` field in the 
   `ProbeTool` definition. This ensures that this method is called when the LLM 
   generates a valid `ProbeTool` message.

## Enable the `spy_game_agent` to handle the `probe` tool

The final step in setting up the tool is to enable 
the `spy_game_agent` to handle the `probe` tool:

```py
spy_game_agent.enable_message(ProbeTool)
```

## Set up the task and instructions

We set up the task for the `spy_game_agent` and run it:

```py
task = lr.Task(
   spy_game_agent,
   system_message="""
            I have a list of numbers between 1 and 100. 
            Your job is to find the smallest of them.
            To help with this, you can give me a number and I will
            tell you how many of my numbers are equal or less than your number.
            Once you have found the smallest number,
            you can say DONE and report your answer.
        """
)
task.run()
```
Notice that in the task setup we 
have _not_ explicitly instructed the LLM to use the `probe` tool.
But this is done "behind the scenes", either by the OpenAI API 
(when we use function-calling by setting the `use_functions_api` flag to `True`),
or by Langroid's native tools mechanism (when we set the `use_tools` flag to `True`).


!!! note "Asynchoronous tool handlers"
      If you run task asynchronously - i.e. via `await task.run_async()` - you may provide
      asynchronous tool handler by implementing `probe_async` method.


See the [`chat-agent-tool.py`](https://github.com/langroid/langroid-examples/blob/main/examples/quick-start/chat-agent-tool.py)
in the `langroid-examples` repo, for a working example that you can run as follows:
```sh
python3 examples/quick-start/chat-agent-tool.py
```

Here is a screenshot of the chat in action, using Langroid's tools mechanism

![chat-agent-tool.png](chat-agent-tool.png)

And if we run it with the `-f` flag (to switch to using OpenAI function-calling):

![chat-agent-fn.png](chat-agent-fn.png)

## See also
One of the uses of tools/function-calling is to **extract structured information** from 
a document. In the `langroid-examples` repo, there are two examples of this: 

- [`examples/extract/chat.py`](https://github.com/langroid/langroid-examples/blob/main/examples/extract/chat.py), 
  which shows how to extract Machine Learning model quality information from a description of 
  a solution approach on Kaggle.
- [`examples/docqa/chat_multi_extract.py`](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/chat_multi_extract.py)
  which extracts key terms from a commercial lease document, in a nested JSON format.

## Next steps

In the [3-agent chat example](three-agent-chat-num.md), recall that the `processor_agent` did not have to
bother with specifying who should handle the current number. In the [next section](three-agent-chat-num-router.md) we add a twist to this game,
so that the `processor_agent` has to decide who should handle the current number.
</file>

<file path="docs/quick-start/chat-agent.md">
# A simple chat agent

!!! tip "Script in `langroid-examples`"
    A full working example for the material in this section is
    in the `chat-agent.py` script in the `langroid-examples` repo:
    [`examples/quick-start/chat-agent.py`](https://github.com/langroid/langroid-examples/tree/main/examples/quick-start/chat-agent.py).

## Agents 

A [`ChatAgent`][langroid.agent.chat_agent.ChatAgent] is an abstraction that 
wraps a few components, including:

- an LLM (`ChatAgent.llm`), possibly equipped with tools/function-calling. 
  The `ChatAgent` class maintains LLM conversation history.
- optionally a vector-database (`ChatAgent.vecdb`)

## Agents as message transformers
In Langroid, a core function of `ChatAgents` is _message transformation_.
There are three special message transformation methods, which we call **responders**.
Each of these takes a message and returns a message. 
More specifically, their function signature is (simplified somewhat):
```py
str | ChatDocument -> ChatDocument
```
where `ChatDocument` is a class that wraps a message content (text) and its metadata.
There are three responder methods in `ChatAgent`, one corresponding to each 
[responding entity][langroid.mytypes.Entity] (`LLM`, `USER`, or `AGENT`):

- `llm_response`: returns the LLM response to the input message.
  (The input message is added to the LLM history, and so is the subsequent response.)
- `agent_response`: a method that can be used to implement a custom agent response. 
   Typically, an `agent_response` is used to handle messages containing a 
   "tool" or "function-calling" (more on this later). Another use of `agent_response` 
   is _message validation_.
- `user_response`: get input from the user. Useful to allow a human user to 
   intervene or quit.

Creating an agent is easy. First define a `ChatAgentConfig` object, and then
instantiate a `ChatAgent` object with that config:
```py
import langroid as lr

config = lr.ChatAgentConfig( #(1)!
    name="MyAgent", # note there should be no spaces in the name!
    llm = lr.language_models.OpenAIGPTConfig(
      chat_model=lr.language_models.OpenAIChatModel.GPT4o,
    ),
    system_message="You are a helpful assistant" #(2)! 
)
agent = lr.ChatAgent(config)
```

1. This agent only has an LLM, and no vector-store. Examples of agents with
   vector-stores will be shown later.
2. The `system_message` is used when invoking the agent's `llm_response` method; it is 
   passed to the LLM API as the first message (with role `"system"`), followed by the alternating series of user, 
   assistant messages. Note that a `system_message` can also be specified when initializing a `Task` object (as seen 
   below); in this case the `Task` `system_message` overrides the agent's `system_message`.

We can now use the agent's responder methods, for example:
```py
response = agent.llm_response("What is 2 + 4?")
if response is not None:
    print(response.content)
response = agent.user_response("add 3 to this")
...
```
The `ChatAgent` conveniently accumulates message history so you don't have to,
as you did in the [previous section](llm-interaction.md) with direct LLM usage.
However to create an interative loop involving the human user, you still 
need to write your own. The `Task` abstraction frees you from this, as we see
below.

## Task: orchestrator for agents
In order to do anything useful with a `ChatAgent`, we need to have a way to 
sequentially invoke its responder methods, in a principled way.
For example in the simple chat loop we saw in the 
[previous section](llm-interaction.md), in the 
[`try-llm.py`](https://github.com/langroid/langroid-examples/blob/main/examples/quick-start/try-llm.py)
script, we had a loop that alternated between getting a human input and an LLM response.
This is one of the simplest possible loops, but in more complex applications, 
we need a general way to orchestrate the agent's responder methods.

The [`Task`][langroid.agent.task.Task] class is an abstraction around a 
`ChatAgent`, responsible for iterating over the agent's responder methods,
as well as orchestrating delegation and hand-offs among multiple tasks.
A `Task` is initialized with a specific `ChatAgent` instance, and some 
optional arguments, including an initial message to "kick-off" the agent.
The `Task.run()` method is the main entry point for `Task` objects, and works 
as follows:

- it first calls the `Task.init()` method to initialize the `pending_message`, 
  which represents the latest message that needs a response.
- it then repeatedly calls `Task.step()` until `Task.done()` is True, and returns
  `Task.result()` as the final result of the task.

`Task.step()` is where all the action happens. It represents a "turn" in the 
"conversation": in the case of a single `ChatAgent`, the conversation involves 
only the three responders mentioned above, but when a `Task` has sub-tasks, 
it can involve other tasks well 
(we see this in the [a later section](two-agent-chat-num.md) but ignore this for now). 
`Task.step()` loops over 
the `ChatAgent`'s responders (plus sub-tasks if any) until it finds a _valid_ 
response[^1] to the current `pending_message`, i.e. a "meaningful" response, 
something other than `None` for example.
Once `Task.step()` finds a valid response, it updates the `pending_message` 
with this response,
and the next invocation of `Task.step()` will search for a valid response to this 
updated message, and so on.
`Task.step()` incorporates mechanisms to ensure proper handling of messages,
e.g. the USER gets a chance to respond after each non-USER response
(to avoid infinite runs without human intervention),
and preventing an entity from responding if it has just responded, etc.

[^1]: To customize a Task's behavior you can subclass it and 
override methods like `valid()`, `done()`, `result()`, or even `step()`.

!!! note "`Task.run()` has the same signature as agent's responder methods."
    The key to composability of tasks is that `Task.run()` 
    *has exactly the same type-signature as any of the agent's responder methods*, 
    i.e. `str | ChatDocument -> ChatDocument`. This means that a `Task` can be
    used as a responder in another `Task`, and so on recursively. 
    We will see this in action in the [Two Agent Chat section](two-agent-chat-num.md).

The above details were only provided to give you a glimpse into how Agents and 
Tasks work. Unless you are creating a custom orchestration mechanism, you do not
need to be aware of these details. In fact our basic human + LLM chat loop can be trivially 
implemented with a `Task`, in a couple of lines of code:
```py
task = lr.Task(
    agent, 
    name="Bot", #(1)!
    system_message="You are a helpful assistant", #(2)!
)
```
1. If specified, overrides the agent's `name`. 
   (Note that the agent's name is displayed in the conversation shown in the console.)
  However, typical practice is to just define the `name` in the `ChatAgentConfig` object, as we did above.
2. If specified, overrides the agent's `system_message`. Typical practice is to just
 define the `system_message` in the `ChatAgentConfig` object, as we did above.


We can then run the task:
```py
task.run() #(1)!
```

1. Note how this hides all of the complexity of constructing and updating a 
   sequence of `LLMMessages`


Note that the agent's `agent_response()` method always returns `None` (since the default 
implementation of this method looks for a tool/function-call, and these never occur
in this task). So the calls to `task.step()` result in alternating responses from
the LLM and the user.

See [`chat-agent.py`](https://github.com/langroid/langroid-examples/blob/main/examples/quick-start/chat-agent.py)
for a working example that you can run with
```sh
python3 examples/quick-start/chat-agent.py
```

Here is a screenshot of the chat in action:[^2]

![chat.png](chat.png)

## Next steps

In the [next section](multi-agent-task-delegation.md) you will 
learn some general principles on how to have multiple agents collaborate 
on a task using Langroid.

[^2]: In the screenshot, the numbers in parentheses indicate how many 
    messages have accumulated in the LLM's message history. 
    This is only provided for informational and debugging purposes, and 
    you can ignore it for now.
</file>

<file path="docs/quick-start/index.md">
In these sections we show you how to use the various components of
`langroid`. To follow along, we recommend you clone
the [`langroid-examples`](https://github.com/langroid/langroid-examples) repo.

!!! tip "Consult the tests as well"
    As you get deeper into Langroid, you will find it useful to consult
    the [tests](https://github.com/langroid/langroid/tree/main/tests/main)
    folder under `tests/main` in the main Langroid repo.

Start with the [`Setup`](setup.md) section to install Langroid and
get your environment set up.
</file>

<file path="docs/quick-start/llm-interaction.md">
!!! tip "Script in `langroid-examples`"
    A full working example for the material in this section is 
    in the `try-llm.py` script in the `langroid-examples` repo:
    [`examples/quick-start/try-llm.py`](https://github.com/langroid/langroid-examples/tree/main/examples/quick-start/try-llm.py).
        

Let's start with the basics -- how to directly interact with an OpenAI LLM
using Langroid.

### Configure, instantiate the LLM class

First define the configuration for the LLM, in this case one of the
OpenAI GPT chat models:
```py
import langroid as lr

cfg = lr.language_models.OpenAIGPTConfig(
    chat_model=lr.language_models.OpenAIChatModel.GPT4o,
)
```
!!! info inline end "About Configs"
    A recurring pattern you will see in Langroid is that for many classes,
    we have a corresponding `Config` class (an instance of a Pydantic `BaseModel`),
    and the class constructor takes this `Config` class as its only argument.
    This lets us avoid having long argument lists in constructors, and brings flexibility
    since adding a new argument to the constructor is as simple as adding a new field
    to the corresponding `Config` class.
    For example the constructor for the `OpenAIGPT` class takes a single argument,
    an instance of the `OpenAIGPTConfig` class.

Now that we've defined the configuration of the LLM, we can instantiate it:
```py
mdl = lr.language_models.OpenAIGPT(cfg)
```


We will use OpenAI's GPT4 model's [chat completion API](https://platform.openai.com/docs/guides/gpt/chat-completions-api).

### Messages: The `LLMMessage` class

This API takes a list of "messages" as input -- this is typically the conversation
history so far, consisting of an initial system message, followed by a sequence
of alternating messages from the LLM ("Assistant") and the user.
Langroid provides an abstraction 
[`LLMMessage`][langroid.language_models.base.LLMMessage] to construct messages, e.g.
```py
from langroid.language_models import Role, LLMMessage

msg = LLMMessage(
    content="what is the capital of Bangladesh?", 
    role=Role.USER
)
```

### LLM response to a sequence of messages

To get a response from the LLM, we call the mdl's `chat` method,
and pass in a list of messages, along with a bound on how long (in tokens)
we want the response to be:
```py
messages = [
    LLMMessage(content="You are a helpful assistant", role=Role.SYSTEM), #(1)!
    LLMMessage(content="What is the capital of Ontario?", role=Role.USER), #(2)!
]

response = mdl.chat(messages, max_tokens=200)
```

1. :man_raising_hand: With a system message, you can assign a "role" to the LLM
2. :man_raising_hand: Responses from the LLM will have role `Role.ASSISTANT`;
   this is done behind the scenes by the `response.to_LLMMessage()` call below.

The response is an object of class [`LLMResponse`][langroid.language_models.base.LLMResponse], 
which we can convert to an
[`LLMMessage`][langroid.language_models.base.LLMMessage] to append to the conversation history:
```py
messages.append(response.to_LLMMessage())
```

You can put the above in a simple loop, 
to get a simple command-line chat interface!

```py
from rich import print
from rich.prompt import Prompt #(1)!

messages = [
    LLMMessage(role=Role.SYSTEM, content="You are a helpful assitant"),
]

while True:
    message = Prompt.ask("[blue]Human")
    if message in ["x", "q"]:
        print("[magenta]Bye!")
        break
    messages.append(LLMMessage(role=Role.USER, content=message))

    response = mdl.chat(messages=messages, max_tokens=200)
    messages.append(response.to_LLMMessage())
    print("[green]Bot: " + response.message)
```

1. Rich is a Python library for rich text and beautiful formatting in the terminal.
   We use it here to get a nice prompt for the user's input.
   You can install it with `pip install rich`.

See [`examples/quick-start/try-llm.py`](https://github.com/langroid/langroid-examples/blob/main/examples/quick-start/try-llm.py)
for a complete example that you can run using
```bash
python3 examples/quick-start/try-llm.py
```

Here is a screenshot of what it looks like:

![try-llm.png](try-llm.png)

### Next steps
You might be thinking: 
"_It is tedious to keep track of the LLM conversation history and set up a 
loop. Does Langroid provide any abstractions to make this easier?_"

We're glad you asked! And this leads to the notion of an `Agent`. 
The [next section](chat-agent.md) will show you how to use the `ChatAgent` class 
to set up a simple chat Agent in a couple of lines of code.
</file>

<file path="docs/quick-start/multi-agent-task-delegation.md">
# Multi-Agent collaboration via Task Delegation

## Why multiple agents?

Let's say we want to develop a complex LLM-based application, for example an application
that reads a legal contract, extracts structured information, cross-checks it against
some taxonomoy, gets some human input, and produces clear summaries.
In _theory_ it may be possible to solve this in a monolithic architecture using an
LLM API and a vector-store. But this approach
quickly runs into problems -- you would need to maintain multiple LLM conversation
histories and states, multiple vector-store instances, and coordinate all of the
interactions between them.

Langroid's `ChatAgent` and `Task` abstractions provide a natural and intuitive
way to decompose a solution approach
into multiple tasks, each requiring different skills and capabilities.
Some of these tasks may need access to an LLM,
others may need access to a vector-store, and yet others may need
tools/plugins/function-calling capabilities, or any combination of these.
It may also make sense to have some tasks that manage the overall solution process.
From an architectural perspective, this type of modularity has numerous benefits:

- **Reusability**: We can reuse the same agent/task in other contexts,
- **Scalability**: We can scale up the solution by adding more agents/tasks,
- **Flexibility**: We can easily change the solution by adding/removing agents/tasks.
- **Maintainability**: We can maintain the solution by updating individual agents/tasks.
- **Testability**: We can test/debug individual agents/tasks in isolation.
- **Composability**: We can compose agents/tasks to create new agents/tasks.
- **Extensibility**: We can extend the solution by adding new agents/tasks.
- **Interoperability**: We can integrate the solution with other systems by
  adding new agents/tasks.
- **Security/Privacy**: We can secure the solution by isolating sensitive agents/tasks.
- **Performance**: We can improve performance by isolating performance-critical agents/tasks.

## Task collaboration via sub-tasks

Langroid currently provides a mechanism for hierarchical (i.e. tree-structured)
task delegation: a `Task` object can add other `Task` objects
as sub-tasks, as shown in this pattern:

```py
from langroid import ChatAgent, ChatAgentConfig, Task

main_agent = ChatAgent(ChatAgentConfig(...))
main_task = Task(main_agent, ...)

helper_agent1 = ChatAgent(ChatAgentConfig(...))
helper_agent2 = ChatAgent(ChatAgentConfig(...))
helper_task1 = Task(agent1, ...)
helper_task2 = Task(agent2, ...)

main_task.add_sub_task([helper_task1, helper_task2])
```

What happens when we call `main_task.run()`?
Recall from the [previous section](chat-agent.md) that `Task.run()` works by
repeatedly calling `Task.step()` until `Task.done()` is True.
When the `Task` object has no sub-tasks, `Task.step()` simply tries
to get a valid response from the `Task`'s `ChatAgent`'s "native" responders,
in this sequence:
```py
[self.agent_response, self.llm_response, self.user_response] #(1)!
```

1. This is the default sequence in Langroid, but it can be changed by
   overriding [`ChatAgent.entity_responders()`][langroid.agent.base.Agent.entity_responders]

When a `Task` object has subtasks, the sequence of responders tried by
`Task.step()` consists of the above "native" responders, plus the
sequence of `Task.run()` calls on the sub-tasks, in the order in which
they were added to the `Task` object. For the example above, this means
that `main_task.step()` will seek a valid response in this sequence:

```py
[self.agent_response, self.llm_response, self.user_response, 
    helper_task1.run(), helper_task2.run()]
```
Fortunately, as noted in the [previous section](chat-agent.md),
`Task.run()` has the same type signature as that of the `ChatAgent`'s
"native" responders, so this works seamlessly. Of course, each of the
sub-tasks can have its own sub-tasks, and so on, recursively.
One way to think of this type of task delegation is that
`main_task()` "fails-over" to `helper_task1()` and `helper_task2()`
when it cannot respond to the current `pending_message` on its own.

## **Or Else** logic vs **And Then** logic
It is important to keep in mind how `step()` works: As each responder 
in the sequence is tried, when there is a valid response, the 
next call to `step()` _restarts its search_ at the beginning of the sequence
(with the only exception being that the human User is given a chance 
to respond after each non-human response). 
In this sense, the semantics of the responder sequence is similar to
**OR Else** logic, as opposed to **AND Then** logic.

If we want to have a sequence of sub-tasks that is more like
**AND Then** logic, we can achieve this by recursively adding subtasks.
In the above example suppose we wanted the `main_task` 
to trigger `helper_task1` and `helper_task2` in sequence,
then we could set it up like this:

```py
helper_task1.add_sub_task(helper_task2) #(1)!
main_task.add_sub_task(helper_task1)
```

1. When adding a single sub-task, we do not need to wrap it in a list.

## Next steps

In the [next section](two-agent-chat-num.md) we will see how this mechanism 
can be used to set up a simple collaboration between two agents.
</file>

<file path="docs/quick-start/setup.md">
# Setup


## Install
Ensure you are using Python 3.11. It is best to work in a virtual environment:

```bash
# go to your repo root (which may be langroid-examples)
cd <your repo root>
python3 -m venv .venv
. ./.venv/bin/activate
```
To see how to use Langroid in your own repo, you can take a look at the
[`langroid-examples`](https://github.com/langroid/langroid-examples) repo, which can be a good starting point for your own repo, 
or use the [`langroid-template`](https://github.com/langroid/langroid-template) repo.
These repos contain a `pyproject.toml` file suitable for use with the [`uv`](https://docs.astral.sh/uv/) dependency manager. After installing `uv` you can 
set up your virtual env, activate it, and install langroid into your venv like this:

```bash
uv venv --python 3.11
. ./.venv/bin/activate 
uv sync
```

Alternatively, use `pip` to install `langroid` into your virtual environment:
```bash
pip install langroid
```

The core Langroid package lets you use OpenAI Embeddings models via their API.
If you instead want to use the `sentence-transformers` embedding models from HuggingFace,
install Langroid like this:
```bash
pip install "langroid[hf-embeddings]"
```
For many practical scenarios, you may need additional optional dependencies:
- To use various document-parsers, install langroid with the `doc-chat` extra:
    ```bash
    pip install "langroid[doc-chat]"
    ```
- For "chat with databases", use the `db` extra:
    ```bash
    pip install "langroid[db]"
    ``
- You can specify multiple extras by separating them with commas, e.g.:
    ```bash
    pip install "langroid[doc-chat,db]"
    ```
- To simply install _all_ optional dependencies, use the `all` extra (but note that this will result in longer load/startup times and a larger install size):
    ```bash
    pip install "langroid[all]"
    ```

??? note "Optional Installs for using SQL Chat with a PostgreSQL DB"
    If you are using `SQLChatAgent`
    (e.g. the script [`examples/data-qa/sql-chat/sql_chat.py`](https://github.com/langroid/langroid/blob/main/examples/data-qa/sql-chat/sql_chat.py),
    with a postgres db, you will need to:
    
    - Install PostgreSQL dev libraries for your platform, e.g.
        - `sudo apt-get install libpq-dev` on Ubuntu,
        - `brew install postgresql` on Mac, etc.
    - Install langroid with the postgres extra, e.g. `pip install langroid[postgres]`
      or `uv add "langroid[postgres]"` or `uv pip install --extra postgres -r pyproject.toml`.
      If this gives you an error, try 
      `uv pip install psycopg2-binary` in your virtualenv.


!!! tip "Work in a nice terminal, such as Iterm2, rather than a notebook"
    All of the examples we will go through are command-line applications.
    For the best experience we recommend you work in a nice terminal that supports 
    colored outputs, such as [Iterm2](https://iterm2.com/).    


!!! note "mysqlclient errors"
    If you get strange errors involving `mysqlclient`, try doing `pip uninstall mysqlclient` followed by `pip install mysqlclient` 

## Set up tokens/keys 

To get started, all you need is an OpenAI API Key.
If you don't have one, see [this OpenAI Page](https://platform.openai.com/docs/quickstart).
(Note that while this is the simplest way to get started, Langroid works with practically any LLM, not just those from OpenAI.
See the guides to using [Open/Local LLMs](https://langroid.github.io/langroid/tutorials/local-llm-setup/),
and other [non-OpenAI](https://langroid.github.io/langroid/tutorials/non-openai-llms/) proprietary LLMs.)

In the root of the repo, copy the `.env-template` file to a new file `.env`:
```bash
cp .env-template .env
```
Then insert your OpenAI API Key.
Your `.env` file should look like this:
```bash
OPENAI_API_KEY=your-key-here-without-quotes
```

Alternatively, you can set this as an environment variable in your shell
(you will need to do this every time you open a new shell):
```bash
export OPENAI_API_KEY=your-key-here-without-quotes
```

All of the following environment variable settings are optional, and some are only needed
to use specific features (as noted below).

- **Qdrant** Vector Store API Key, URL. This is only required if you want to use Qdrant cloud.
  Langroid uses LanceDB as the default vector store in its `DocChatAgent` class (for RAG).
  Alternatively [Chroma](https://docs.trychroma.com/) is also currently supported.
  We use the local-storage version of Chroma, so there is no need for an API key.
- **Redis** Password, host, port: This is optional, and only needed to cache LLM API responses
  using Redis Cloud. Redis [offers](https://redis.com/try-free/) a free 30MB Redis account
  which is more than sufficient to try out Langroid and even beyond.
  If you don't set up these, Langroid will use a pure-python
  Redis in-memory cache via the [Fakeredis](https://fakeredis.readthedocs.io/en/latest/) library.
- **GitHub** Personal Access Token (required for apps that need to analyze git
  repos; token-based API calls are less rate-limited). See this
  [GitHub page](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).
- **Google Custom Search API Credentials:** Only needed to enable an Agent to use the `GoogleSearchTool`.
  To use Google Search as an LLM Tool/Plugin/function-call,
  you'll need to set up
  [a Google API key](https://developers.google.com/custom-search/v1/introduction#identify_your_application_to_google_with_api_key),
  then [setup a Google Custom Search Engine (CSE) and get the CSE ID](https://developers.google.com/custom-search/docs/tutorial/creatingcse).
  (Documentation for these can be challenging, we suggest asking GPT4 for a step-by-step guide.)
  After obtaining these credentials, store them as values of
  `GOOGLE_API_KEY` and `GOOGLE_CSE_ID` in your `.env` file.
  Full documentation on using this (and other such "stateless" tools) is coming soon, but
  in the meantime take a peek at the test
  [`tests/main/test_web_search_tools.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_web_search_tools.py) to see how to use it.


If you add all of these optional variables, your `.env` file should look like this:
```bash
OPENAI_API_KEY=your-key-here-without-quotes
GITHUB_ACCESS_TOKEN=your-personal-access-token-no-quotes
CACHE_TYPE=redis
REDIS_PASSWORD=your-redis-password-no-quotes
REDIS_HOST=your-redis-hostname-no-quotes
REDIS_PORT=your-redis-port-no-quotes
QDRANT_API_KEY=your-key
QDRANT_API_URL=https://your.url.here:6333 # note port number must be included
GOOGLE_API_KEY=your-key
GOOGLE_CSE_ID=your-cse-id
```

### Microsoft Azure OpenAI setup[Optional]

This section applies only if you are using Microsoft Azure OpenAI.

When using Azure OpenAI, additional environment variables are required in the
`.env` file.
This page [Microsoft Azure OpenAI](https://learn.microsoft.com/en-us/azure/ai-services/openai/chatgpt-quickstart?tabs=command-line&pivots=programming-language-python#environment-variables)
provides more information, and you can set each environment variable as follows:

- `AZURE_OPENAI_API_KEY`, from the value of `API_KEY`
- `AZURE_OPENAI_API_BASE` from the value of `ENDPOINT`, typically looks like `https://your_resource.openai.azure.com`.
- For `AZURE_OPENAI_API_VERSION`, you can use the default value in `.env-template`, and latest version can be found [here](https://learn.microsoft.com/en-us/azure/ai-services/openai/whats-new#azure-openai-chat-completion-general-availability-ga)
- `AZURE_OPENAI_DEPLOYMENT_NAME` is an OPTIONAL deployment name which may be 
   defined by the user during the model setup.
- `AZURE_OPENAI_CHAT_MODEL` Azure OpenAI allows specific model names when you select the model for your deployment. You need to put precisely the exact model name that was selected. For example, GPT-3.5 (should be `gpt-35-turbo-16k` or `gpt-35-turbo`) or GPT-4 (should be `gpt-4-32k` or `gpt-4`).
- `AZURE_OPENAI_MODEL_NAME` (Deprecated, use `AZURE_OPENAI_CHAT_MODEL` instead).
  
!!! note "For Azure-based models use `AzureConfig` instead of `OpenAIGPTConfig`"
    In most of the docs you will see that LLMs are configured using `OpenAIGPTConfig`.
    However if you want to use Azure-deployed models, you should replace `OpenAIGPTConfig` with `AzureConfig`. See 
    the [`test_azure_openai.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_azure_openai.py) and 
    [`example/basic/chat.py`](https://github.com/langroid/langroid/blob/main/examples/basic/chat.py)


## Next steps

Now you should be ready to use Langroid!
As a next step, you may want to see how you can use Langroid to [interact 
directly with the LLM](llm-interaction.md) (OpenAI GPT models only for now).
</file>

<file path="docs/quick-start/three-agent-chat-num-router.md">
# Three-Agent Collaboration, with message Routing

!!! tip "Script in `langroid-examples`"
    A full working example for the material in this section is
    in the `three-agent-chat-num-router.py` script in the `langroid-examples` repo:
    [`examples/quick-start/three-agent-chat-num-router.py`](https://github.com/langroid/langroid-examples/tree/main/examples/quick-start/three-agent-chat-num-router.py).

Let's change the number game from the [three agent chat example](three-agent-chat-num.md) slightly.
In that example, when the `even_agent`'s LLM receives an odd number,
it responds with `DO-NOT-KNOW`, and similarly for the `odd_agent` when it
receives an even number. The `step()` method of the `repeater_task`
considers `DO-NOT-KNOW` to be an _invalid_ response and _continues_ to 
look for a valid response from any remaining sub-tasks.
Thus there was no need for the `processor_agent` to specify who should handle
the current number.

But what if there is a scenario where the `even_agent` and `odd_agent`
might return a legit but "wrong" answer?
In this section we add this twist -- when
the `even_agent` receives an odd number, it responds with -10, and similarly
for the `odd_agent` when it receives an even number.
We tell the `processor_agent` to avoid getting a negative number.

The goal we have set for the `processor_agent` implies that it 
must specify the intended recipient of 
the number it is sending. 
We can enforce this using a special Langroid Tool, 
[`RecipientTool`][langroid.agent.tools.recipient_tool.RecipientTool].
So when setting up the
`processor_task` we include instructions to use this tool
(whose name is `recipient_message`, the value of `RecipientTool.request`):

```py
processor_agent = lr.ChatAgent(config)
processor_task = lr.Task(
    processor_agent,
    name = "Processor",
    system_message="""
        You will receive a list of numbers from me (the user).
        Your goal is to apply a transformation to each number.
        However you do not know how to do this transformation.
        You can take the help of two people to perform the 
        transformation.
        If the number is even, send it to EvenHandler,
        and if it is odd, send it to OddHandler.
        
        IMPORTANT: send the numbers ONE AT A TIME
        
        The handlers will transform the number and give you a new number.        
        If you send it to the wrong person, you will receive a negative value.
        Your aim is to never get a negative number, so you must 
        clearly specify who you are sending the number to, using the
        `recipient_message` tool/function-call, where the `content` field
        is the number you want to send, and the `recipient` field is the name
        of the intended recipient, either "EvenHandler" or "OddHandler".        
        
        Once all numbers in the given list have been transformed, 
        say DONE and show me the result. 
        Start by asking me for the list of numbers.
    """,
    llm_delegate=True,
    single_round=False,
)
```

To enable the `processor_agent` to use this tool, we must enable it:
```py
processor_agent.enable_message(lr.agent.tools.RecipientTool)
```

The rest of the code remains the same as in the [previous section](three-agent-chat-num.md),
i.e., we simply add the two handler tasks
as sub-tasks of the `processor_task`, like this:
```python
processor_task.add_sub_task([even_task, odd_task])
```

One of the benefits of using the `RecipientTool` is that it contains 
mechanisms to remind the LLM to specify a recipient for its message,
when it forgets to do so (this does happen once in a while, even with GPT-4).


Feel free to try the working example script
`three-agent-chat-num-router.py` in the 
`langroid-examples` repo:
[`examples/quick-start/three-agent-chat-num-router.py`](https://github.com/langroid/langroid-examples/tree/main/examples/quick-start/three-agent-chat-num-router.py):

```bash
python3 examples/quick-start/three-agent-chat-num-router.py
```

Below is screenshot of what this might look like, using the OpenAI function-calling 
mechanism with the `recipient_message` tool:

![three-agent-router-func.png](three-agent-router-func.png)

And here is what it looks like using Langroid's built-in tools mechanism (use the `-t` option when running the script):

![three-agent-router.png](three-agent-router.png)

And here is what it looks like using 
## Next steps

In the [next section](chat-agent-docs.md) you will learn
how to use Langroid with external documents.
</file>

<file path="docs/quick-start/three-agent-chat-num.md">
# Three-Agent Collaboration

!!! tip "Script in `langroid-examples`"
    A full working example for the material in this section is
    in the `three-agent-chat-num.py` script in the `langroid-examples` repo:
    [`examples/quick-start/three-agent-chat-num.py`](https://github.com/langroid/langroid-examples/tree/main/examples/quick-start/three-agent-chat-num.py).


Let us set up a simple numbers exercise between 3 agents.
The `Processor` agent receives a number $n$, and its goal is to 
apply a transformation to the it. However it does not know how to apply the
transformation, and takes the help of two other agents to do so.
Given a number $n$,

- The `EvenHandler` returns $n/2$ if n is even, otherwise says `DO-NOT-KNOW`.
- The `OddHandler` returns $3n+1$ if n is odd, otherwise says `DO-NOT-KNOW`.

We'll first define a shared LLM config:

```py
llm_config = lr.language_models.OpenAIGPTConfig(
    chat_model=lr.language_models.OpenAIChatModel.GPT4o,
    # or, e.g., "ollama/qwen2.5-coder:latest", or "gemini/gemini-2.0-flash-exp"
)
```

Next define the config for the `Processor` agent:
```py
processor_config = lr.ChatAgentConfig(
    name="Processor",
    llm = llm_config,
    system_message="""
    You will receive a number from the user.
    Simply repeat that number, DO NOT SAY ANYTHING else,
    and wait for a TRANSFORMATION of the number 
    to be returned to you.
    
    Once you have received the RESULT, simply say "DONE",
    do not say anything else.
    """,        
    vecdb=None,
)
```

Then set up the `processor_agent`, along with the corresponding task:
```py
processor_agent = lr.ChatAgent(processor_config)

processor_task = lr.Task(
    processor_agent,
    llm_delegate=True, #(1)!
    interactive=False, #(2)!
    single_round=False, #(3)!
)

```

1. Setting the `llm_delegate` option to `True` means that the `processor_task` is
    delegated to the LLM (as opposed to the User), 
    in the sense that the LLM is the one "seeking" a response to the latest 
    number. Specifically, this means that in the `processor_task.step()` 
    when a sub-task returns `DO-NOT-KNOW`,
    it is _not_ considered a valid response, and the search for a valid response 
    continues to the next sub-task if any.
2. `interactive=False` means the task loop will not wait for user input.
3. `single_round=False` means that the `processor_task` should _not_ terminate after 
    a valid response from a responder.

Set up the other two agents and tasks:

```py
NO_ANSWER = lr.utils.constants.NO_ANSWER

even_config = lr.ChatAgentConfig(
    name="EvenHandler",
    llm = llm_config,
    system_message=f"""
    You will be given a number N. Respond as follows:
    
    - If N is even, divide N by 2 and show the result, 
      in the format: 
        RESULT = <result>
      and say NOTHING ELSE.
    - If N is odd, say {NO_ANSWER}
    """,    
)
even_agent = lr.ChatAgent(even_config)
even_task = lr.Task(
    even_agent,
    single_round=True,  # task done after 1 step() with valid response
)

odd_config = lr.ChatAgentConfig(
    name="OddHandler",
    llm = llm_config,
    system_message=f"""
    You will be given a number N. Respond as follows:
    
    - if N is odd, return the result (N*3+1), in the format:
        RESULT = <result> 
        and say NOTHING ELSE.
    
    - If N is even, say {NO_ANSWER}
    """,
)
odd_agent = lr.ChatAgent(odd_config)
odd_task = lr.Task(
    odd_agent,
    single_round=True,  # task done after 1 step() with valid response
)

```

Now add the `even_task` and `odd_task` as subtasks of the `processor_task`, 
and then run it with a number as input:

```python
processor_task.add_sub_task([even_task, odd_task])
processor_task.run(13)
```

The input number will be passed to the `Processor` agent as the user input.


Feel free to try the working example script
[`three-agent-chat-num.py`]()
`langroid-examples` repo:
[`examples/quick-start/three-agent-chat-num.py`](https://github.com/langroid/langroid-examples/tree/main/examples/quick-start/three-agent-chat-num.py):

```bash
python3 examples/quick-start/three-agent-chat-num.py
```

Here's a screenshot of what it looks like:
![three-agent-num.png](three-agent-num.png)


## Next steps


In the [next section](chat-agent-tool.md) you will learn how to use Langroid
to equip a `ChatAgent` with tools or function-calling.
</file>

<file path="docs/quick-start/two-agent-chat-num.md">
# Two-Agent Collaboration

!!! tip "Script in `langroid-examples`"
    A full working example for the material in this section is
    in the `two-agent-chat-num.py` script in the `langroid-examples` repo:
    [`examples/quick-start/two-agent-chat-num.py`](https://github.com/langroid/langroid-examples/tree/main/examples/quick-start/two-agent-chat-num.py).


To illustrate these ideas, let's look at a toy example[^1] where 
a `Student` agent receives a list of numbers to add.
We set up this agent with an instruction that they do not know how to add,
and they can ask for help adding pairs of numbers.
To add pairs of numbers, we set up an `Adder` agent.

[^1]: Toy numerical examples are perfect to illustrate the ideas without
      incurring too much token cost from LLM API calls.

First define a common `llm_config` to use for both agents:
```python
llm_config = lr.language_models.OpenAIGPTConfig(
    chat_model=lr.language_models.OpenAIChatModel.GPT4o,
    # or, e.g., "ollama/qwen2.5-coder:latest", or "gemini/gemini-2.0-flash-exp"
)
```


Next, set up a config for the student agent, then create the agent
and the corresponding task:

```py
student_config = lr.ChatAgentConfig(
    name="Student",
    llm=llm_config,
    vecdb=None, #(1)!
    system_message="""
        You will receive a list of numbers from me (the User),
        and your goal is to calculate their sum.
        However you do not know how to add numbers.
        I can help you add numbers, two at a time, since
        I only know how to add pairs of numbers.
        Send me a pair of numbers to add, one at a time, 
        and I will tell you their sum.
        For each question, simply ask me the sum in math notation, 
        e.g., simply say "1 + 2", etc, and say nothing else.
        Once you have added all the numbers in the list, 
        say DONE and give me the final sum. 
        Start by asking me for the list of numbers.
    """,    
)
student_agent = lr.ChatAgent(student_config)
student_task = lr.Task(
    student_agent,
    name = "Student",
    llm_delegate = True, #(2)!
    single_round=False,  # (3)! 
)
```

1. We don't need access to external docs so we set `vecdb=None` to avoid 
   the overhead of loading a vector-store.
2. Whenever we "flip roles" and assign the LLM the role of generating questions, 
   we set `llm_delegate=True`. In effect this ensures that the LLM "decides" when
   the task is done.
3. This setting means the task is not a single-round task, i.e. it is _not_ done
   after one `step()` with a valid response.

Next, set up the Adder agent config, create the Adder agent
and the corresponding Task:

```py
adder_config = lr.ChatAgentConfig(
    name = "Adder", #(1)!
    llm=llm_config,
    vecdb=None,
    system_message="""
        You are an expert on addition of numbers. 
        When given numbers to add, simply return their sum, say nothing else
        """,     
)
adder_agent = lr.ChatAgent(adder_config)
adder_task = lr.Task(
    adder_agent,
    interactive=False, #(2)!
    single_round=True,  # task done after 1 step() with valid response (3)!
)
```
1. The Agent name is displayed in the conversation shown in the console.
2. Does not wait for user input.
3. We set `single_round=True` to ensure that the expert task is done after 
   one step() with a valid response. 

Finally, we add the `adder_task` as a sub-task of the `student_task`, 
and run the `student_task`:

```py
student_task.add_sub_task(adder_task) #(1)!
student_task.run()
```

1. When adding just one sub-task, we don't need to use a list.


For a full working example, see the 
[`two-agent-chat-num.py`](https://github.com/langroid/langroid-examples/blob/main/examples/quick-start/two-agent-chat-num.py)
script in the `langroid-examples` repo. You can run this using:
```bash
python3 examples/quick-start/two-agent-chat-num.py
```

Here is an example of the conversation that results:

![two-agent-num.png](two-agent-num.png)

## Logs of multi-agent interactions

!!! note "For advanced users"
    This section is for advanced users who want more visibility into the
    internals of multi-agent interactions.

When running a multi-agent chat, e.g. using `task.run()`, two types of logs
are generated:
- plain-text logs in `logs/<task_name>.log`
- tsv logs in `logs/<task_name>.tsv`

It is important to realize that the logs show _every iteration 
of the loop in `Task.step()`, i.e. every **attempt** at
responding to the current pending message, even those that are not allowed_.
The ones marked with an asterisk (*) are the ones that are considered valid
responses for a given `step()` (which is a "turn" in the conversation).

The plain text logs have color-coding ANSI chars to make them easier to read
by doing `less <log_file>`. The format is (subject to change):
```
(TaskName) Responder SenderEntity (EntityName) (=> Recipient) TOOL Content
```

The structure of the `tsv` logs is similar. A great way to view these is to
install and use the excellent `visidata` (https://www.visidata.org/) tool:
```bash
vd logs/<task_name>.tsv
```

## Next steps
As a next step, look at how to set up a collaboration among three agents
for a simple [numbers game](three-agent-chat-num.md).
</file>

<file path="docs/stylesheets/extra.css">
.md-logo img {
    height: 60px !important; /* Adjust size as necessary */
}
</file>

<file path="docs/tutorials/langroid-tour.md">
# A quick tour of Langroid

This is a quick tour of some Langroid features. For a more detailed guide,
see the [Getting Started guide](https://langroid.github.io/langroid/quick-start/).
There are many more features besides the ones shown here. To explore langroid more,
see the sections of the main [docs](https://langroid.github.io/langroid/),
and a 
[Colab notebook](https://colab.research.google.com/github/langroid/langroid/blob/main/examples/Langroid_quick_start.ipynb) 
you can try yourself.  


## Chat directly with LLM

Imports:

```python
import langroid as lr
import langroid.language_models as lm
```

Set up the LLM; note how you can specify the chat model -- if omitted, defaults
to OpenAI `GPT4o`. See the guide to using Langroid with 
[local/open LLMs](https://langroid.github.io/langroid/tutorials/local-llm-setup/),
and with [non-OpenAI LLMs](https://langroid.github.io/langroid/tutorials/non-openai-llms/).
    
```python
llm_config = lm.OpenAIGPTConfig( 
   chat_model="glhf/hf:Qwen/Qwen2.5-Coder-32B-Instruct" 
)
llm = lm.OpenAIGPT(llm_config)
```

Chat with bare LLM -- no chat accumulation, i.e. follow-up responses will *not*
be aware of prior conversation history (you need an Agent for that, see below).

```python
llm.chat("1 2 4 7 11 ?")
# ==> answers 16, with some explanation
```

## Agent

Make a [`ChatAgent`][langroid.agent.chat_agent.ChatAgent], 
and chat with it; now accumulates conv history

```python
agent = lr.ChatAgent(lr.ChatAgentConfig(llm=llm_config))
agent.llm_response("Find the next number: 1 2 4 7 11 ?")
# => responds 16
agent.llm_response("and then?)
# => answers 22
```

## Task

Make a [`Task`][langroid.agent.task.Task] and create a chat loop with the user:

```python
task = lr.Task(agent, interactive=True)
task.run()
```

## Tools/Functions/Structured outputs:

Define a [`ToolMessage`][langroid.agent.tool_message.ToolMessage] 
using Pydantic (v1) -- this gets transpiled into system-message instructions
to the LLM, so you never have to deal with writing a JSON schema.
(Besides JSON-based tools, Langroid also supports 
[XML-based tools](https://langroid.github.io/langroid/notes/xml-tools/), which 
are far more reliable when having the LLM return code in a structured output.)


```python
from langroid.pydantic_v1 import BaseModel
from langroid.agent.tools.orchestration import ResultTool

class CityTemperature(BaseModel):
    city: str
    temp: float

class WeatherTool(lr.ToolMessage):
    request: str = "weather_tool" #(1)!
    purpose: str = "To extract <city_temp> info from text" #(2)!

    city_temp: CityTemperature

    # tool handler
    def handle(self) -> ResultTool:
        return ResultTool(city_temp = self.city_temp)
```

1. When this tool is enabled for an agent, a method named `weather_tool` gets auto-inserted in the agent class, 
   with body being the `handle` method -- this method handles the LLM's generation 
   of this tool.
2. The value of the `purpose` field is used to populate the system message to the LLM,
   along with the Tool's schema derived from its Pydantic-based definition.

Enable the Agent to use the `ToolMessage`:

```python
agent.enable_message(WeatherTool)
```

Create specialized task that returns a `CityTemperature` object:

```python
task = lr.Task(agent, interactive=False)[CityTemperature]

# run task, with built-in tool-handling loop
data = task.run("It is 45 degrees F in Boston")

assert data.city == "Boston"
assert int(data.temp) == 45
```

## Chat with a document (RAG)

Create a [`DocChatAgent`][langroid.agent.special.doc_chat_agent.DocChatAgent].

```python
doc_agent_config = lr.agent.special.DocChatAgentConfig(llm=llm_config)
doc_agent = lr.agent.special.DocChatAgent(doc_agent_config)
```

Ingest the contents of a web page into the agent 
(this involves chunking, indexing into a vector-database, etc.):

```python
doc_agent.ingest_doc_paths("https://en.wikipedia.org/wiki/Ludwig_van_Beethoven")
```

Ask a question:

```
result = doc_agent.llm_response("When did Beethoven move from Bonn to Vienna?")
```

You should see the streamed response with citations like this:

![langroid-tour-beethoven.png](langroid-tour-beethoven.png)

## Two-agent interaction

Set up a teacher agent:

```python
from langroid.agent.tools.orchestration import DoneTool

teacher = lr.ChatAgent(
    lr.ChatAgentConfig(
        llm=llm_config,
        system_message=f"""
        Ask a numbers-based question, and your student will answer.
        You can then provide feedback or hints to the student to help them
        arrive at the right answer. Once you receive the right answer,
        use the `{DoneTool.name()}` tool to end the session.
        """
    )
)

teacher.enable_message(DoneTool)
teacher_task = lr.Task(teacher, interactive=False)

```

Set up a student agent:

```python
student = lr.ChatAgent(
    lr.ChatAgentConfig(
        llm=llm_config,
        system_message=f"""
        You will receive a numbers-related question. Answer to the best of
        your ability. If your answer is wrong, you will receive feedback or hints,
        and you can revise your answer, and repeat this process until you get 
        the right answer.
        """
    )
)

student_task = lr.Task(student, interactive=False, single_round=True)
```

Make the `student_task` a subtask of the `teacher_task`:

```python
teacher_task.add_sub_task(student_task)
```

Run the teacher task:

```python
teacher_task.run()
```

You should then see this type of interaction:

![langroid-tour-teacher.png](langroid-tour-teacher.png)
</file>

<file path="docs/tutorials/llm-usage-options.md">
# Options for accessing LLMs

> This is a work-in-progress document. It will be updated frequently.

The variety of ways to access the power of Large Language Models (LLMs) is growing 
rapidly, and there are a bewildering array of options. This document is an attempt to 
categorize and describe some of the most popular and useful ways to access LLMs,
via these 2x2x2  combinations:

- Websites (non-programmatic) or APIs (programmatic)
- Open-source or Proprietary 
- Chat-based interface or integrated assistive tools.

We will go into some of these combinations below. More will be added over time.

## Chat-based Web (non-API) access to Proprietary LLMs


This is best for *non-programmatic* use of LLMs: you go to a website and 
interact with the LLM via a chat interface -- 
you write prompts and/or upload documents, and the LLM responds with plain text
or can create artifacts (e.g. reports, code,
charts, podcasts, etc) that you can then copy into your files, workflow or codebase.
They typically allow you to upload text-based documents of various types, and some let you upload images, screen-shots, etc and ask questions about them.

Most of them are capable of doing *internet search* to inform their responses.


!!! note "Chat Interface vs Integrated Tools"
    Note that when using a chat-based interaction, you have to copy various artifacts
    from the web-site into another place, like your code editor, document, etc.
    AI-integrated tools relieve you of this burden by bringing the LLM power into 
    your workflow directly. More on this in a later section.

      
**Pre-requisites:** 

- *Computer*: Besides having a modern web browser (Chrome, Firefox, etc) and internet
access, there are no other special requirements, since the LLM is 
running on a remote server.
- *Coding knowledge*: Where (typically Python) code is produced, you will get best results
if you are conversant with Python so that you can understand and modify the code as
needed. In this category you do not need to know how to interact with an LLM API via code.

Here are some popular options in this category:

### OpenAI ChatGPT

Free access at [https://chatgpt.com/](https://chatgpt.com/)

With a ChatGPT-Plus monthly subscription ($20/month), you get additional features like:

- access to more powerful models
- access to [OpenAI canvas](https://help.openai.com/en/articles/9930697-what-is-the-canvas-feature-in-chatgpt-and-how-do-i-use-it) - this offers a richer interface than just a chat window, e.g. it automatically creates windows for code snippets, and shows results of running code
(e.g. output, charts etc).

Typical use: Since there is fixed monthly subscription (i.e. not metered by amount of 
usage), this is a cost-effective way to non-programmatically 
access a top LLM such as `GPT-4o` or `o1` 
(so-called "reasoning/thinking" models). Note however that there are limits on how many
queries you can make within a certain time period, but usually the limit is fairly
generous. 

What you can create, besides text-based artifacts:

- produce Python (or other language) code which you can copy/paste into notebooks or files
- SQL queries that you can copy/paste into a database tool
- Markdown-based tables
- You can't get diagrams, but you can get *code for diagrams*, 
e.g. python code for plots, [mermaid](https://github.com/mermaid-js/mermaid) code for flowcharts.
- images in some cases.

### OpenAI Custom GPTs (simply known as "GPTs")

[https://chatgpt.com/gpts/editor](https://chatgpt.com/gpts/editor)

Here you can conversationally interact with a "GPT Builder" that will 
create a version of ChatGPT
that is *customized* to your needs, i.e. with necessary background instructions,
context, and/or documents. 
The end result is a specialized GPT that you can then use for your specific
purpose and share with others (all of this is non-programmatic). 

E.g. [here](https://chatgpt.com/share/67153a4f-ea2c-8003-a6d3-cbc2412d78e5) is a "Knowledge Graph Builder" GPT

!!! note "Private GPTs requires an OpenAI Team Account"
    To share a custom GPT within a private group, you need an OpenAI Team account,
    see pricing [here](https://openai.com/chatgpt/pricing). Without a Team account,
    any shared GPT is public and can be accessed by anyone.


### Anthropic/Claude

[https://claude.ai](https://claude.ai)

The Claude basic web-based interface is similar to OpenAI ChatGPT, powered by 
Anthropic's proprietary LLMs. 
Anthropic's equivalent of ChatGPT-Plus is called "Claude Pro", which is also 
a $20/month subscription, giving you access to advanced models 
(e.g. `Claude-3.5-Sonnet`) and features.

Anthropic's equivalent of Custom GPTs is called 
[Projects](https://www.anthropic.com/news/projects), 
where you can create
an  LLM-powered interface that is augmented with your custom context and data.

Whichever product you are using, the interface auto-creates **artifacts** as needed --
these are stand-alone documents (code, text, images, web-pages, etc) 
that you may want to copy and paste into your own codebase, documents, etc.
For example you can prompt Claude to create full working interactive applications,
and copy the code, polish it and deploy it for others to use. See examples [here](https://simonwillison.net/2024/Oct/21/claude-artifacts/).

### Microsoft Copilot Lab

!!! note
    Microsoft's "Copilot" is an overloaded term that can refer to many different 
    AI-powered tools. Here we are referring to the one that is a collaboration between
    Microsoft and OpenAI, and is based on OpenAI's GPT-4o LLM, and powered by 
    Bing's search engine.

Accessible via [https://copilot.cloud.microsoft.com/](https://copilot.cloud.microsoft.com/)

The basic capabilities are similar to OpenAI's and Anthropic's offerings, but
come with so-called "enterprise grade" security and privacy features,
which purportedly make it suitable for use in educational and corporate settings.
Read more on what you can do with Copilot Lab [here](https://www.microsoft.com/en-us/microsoft-copilot/learn/?form=MA13FV).

Like the other proprietary offerings, Copilot can:

- perform internet search to inform its responses
- generate/run code and show results including charts

### Google Gemini

Accessible at [gemini.google.com](https://gemini.google.com).


## AI-powered productivity tools

These tools "bring the AI to your workflow", which is a massive productivity boost,
compared to repeatedly context-switching, e.g. copying/pasting between a chat-based AI web-app and your workflow.

- [**Cursor**](https://www.cursor.com/): AI Editor/Integrated Dev Environment (IDE). This is a fork of VSCode.
- [**Zed**](https://zed.dev/): built in Rust; can be customized to use Jetbrains/PyCharm keyboard shortcuts.
- [**Google Colab Notebooks with Gemini**](https://colab.research.google.com).
- [**Google NotebookLM**](https://notebooklm.google.com/): allows you to upload a set of text-based documents, 
  and create artifacts such as study guide, FAQ, summary, podcasts, etc.

    
## APIs for Proprietary LLMs

Using an API key allows *programmatic* access to the LLMs, meaning you can make
invocations to the LLM from within your own code, and receive back the results.
This is useful for building applications involving more complex workflows where LLMs
are used within a larger codebase, to access "intelligence" as needed.

E.g. suppose you are writing code that handles queries from a user, and you want to 
classify the user's _intent_ into one of 3 types: Information, or Action or Done.
Pre-LLMs, you would have had to write a bunch of rules or train a custom 
"intent classifier" that maps, for example:

- "What is the weather in Pittsburgh?" -> Information
- "Set a timer for 10 minutes" -> Action
- "Ok I have no more questions∞" -> Done

But using an LLM API, this is almost trivially easy - you instruct the LLM it should
classify the intent into one of these 3 types, and send the user query to the LLM,
and receive back the intent. 
(You can use Tools to make this robust, but that is outside the scope of this document.)

The most popular proprietary LLMs available via API are from OpenAI (or via  its
partner Microsoft), Anthropic, and Google:

- [OpenAI](https://platform.openai.com/docs/api-reference/introduction), to interact with `GPT-4o` family of models, and the `o1` family of "thinking/reasoning" models.
- [Anthropic](https://docs.anthropic.com/en/home) to use the `Claude` series of models.
- [Google](https://ai.google.dev/gemini-api/docs) to use the `Gemini` family of models.

These LLM providers are home to some of the most powerful LLMs available today,
specifically OpenAI's `GPT-4o` and Anthropic's `Claude-3.5-Sonnet`, and Google's `Gemini 1.5 Pro` (as of Oct 2024).

**Billing:** Unlike the fixed monthly subscriptions of ChatGPT, Claude and others, 
LLM usage via API is typically billed by *token usage*, i.e. you pay for the total
number of input and output "tokens" (a slightly technical term, but think of it as
a word for now).

Using an LLM API involves these steps:

- create an account on the provider's website as a "developer" or organization,
- get an API key,
- use the API key in your code to make requests to the LLM. 


**Prerequisites**:

- *Computer:* again, since the API is served over the internet, there are no special
  requirements for your computer.
- *Programming skills:* Using an LLM API involves either:
    - directly making REST API calls from your code, or 
    - use a scaffolding library (like [Langroid](https://github.com/langroid/langroid)) that abstracts away the details of the 
      API calls.
  
    In either case, you must be highly proficient in (Python) programming 
  to use this option.

## Web-interfaces to Open LLMs

!!! note  "Open LLMs"
    These are LLMs that have been publicly released, i.e. their parameters ("weights") 
    are publicly available -- we refer to these as *open-weight* LLMs. If in addition, the
    training datasets, and data-preprocessing and training code are also available, we would
    call these *open-source* LLMs. But lately there is a looser usage of the term "open-source",referring to just the weights being available. For our purposes we will just refer all of these models as **Open LLMs**.

There are many options here, but some popular ones are below. Note that some of these
are front-ends that allow you to interact with not only Open LLMs but also 
proprietary LLM APIs.

- [LMStudio](https://lmstudio.ai/)
- [OpenWebUI](https://github.com/open-webui/open-webui)
- [Msty](https://msty.app/)
- [AnythingLLM](https://anythingllm.com/)
- [LibreChat](https://www.librechat.ai/)


## API Access to Open LLMs

This is a good option if you are fairly proficient in (Python) coding. There are in 
fact two possibilities here:

- The LLM is hosted remotely, and you make REST API calls to the remote server. This
  is a good option when you want to run large LLMs and you don't have the resources (GPU and memory) to run them locally.
    - [groq](https://groq.com/) amazingly it is free, and you can run `llama-3.1-70b`
    - [cerebras](https://cerebras.ai/)
    - [open-router](https://openrouter.ai/)
- The LLM is running on your computer. This is a good option if your machine has sufficient RAM to accommodate the LLM you are trying to run, and if you are 
concerned about data privacy. The most user-friendly option is [Ollama](https://github.com/ollama/ollama); see more below.

Note that all of the above options provide an **OpenAI-Compatible API** to interact
with the LLM, which is a huge convenience: you can write code to interact with OpenAI's
LLMs (e.g. `GPT4o` etc) and then easily switch to one of the above options, typically
by changing a simple config (see the respective websites for instructions).

Of course, directly working with the raw LLM API quickly becomes tedious. This is where
a scaffolding library like [langroid](https://github.com/langroid/langroid) comes in
very handy - it abstracts away the details of the API calls, and provides a simple
programmatic interface to the LLM, and higher-level abstractions like 
Agents, Tasks, etc. Working with such a library is going to be far more productive
than directly working with the raw API. Below are instructions on how to use langroid
with some the above Open/Local LLM options.

See [here](https://langroid.github.io/langroid/tutorials/local-llm-setup/) for 
a guide to using Langroid with Open LLMs.
</file>

<file path="docs/tutorials/local-llm-setup.md">
# Setting up a Local/Open LLM to work with Langroid

!!! tip "Examples scripts in [`examples/`](https://github.com/langroid/langroid/tree/main/examples) directory."
      There are numerous examples of scripts that can be run with local LLMs,
      in the [`examples/`](https://github.com/langroid/langroid/tree/main/examples)
      directory of the main `langroid` repo. These examples are also in the 
      [`langroid-examples`](https://github.com/langroid/langroid-examples/tree/main/examples),
      although the latter repo may contain some examples that are not in the `langroid` repo.
      Most of these example scripts allow you to specify an LLM in the format `-m <model>`,
      where the specification of `<model>` is described in the quide below for local/open LLMs, 
      or in the [Non-OpenAI LLM](https://langroid.github.io/langroid/tutorials/non-openai-llms/) guide. Scripts 
      that have the string `local` in their name have been especially designed to work with 
      certain local LLMs, as described in the respective scripts.
      If you want a pointer to a specific script that illustrates a 2-agent chat, have a look 
      at [`chat-search-assistant.py`](https://github.com/langroid/langroid/blob/main/examples/basic/chat-search-assistant.py).
      This specific script, originally designed for GPT-4/GPT-4o, works well with `llama3-70b` 
      (tested via Groq, mentioned below).

## Easiest: with Ollama

As of version 0.1.24, Ollama provides an OpenAI-compatible API server for the LLMs it supports,
which massively simplifies running these LLMs with Langroid. Example below.

```
ollama pull mistral:7b-instruct-v0.2-q8_0
```
This provides an OpenAI-compatible 
server for the `mistral:7b-instruct-v0.2-q8_0` model.

You can run any Langroid script using this model, by setting the `chat_model`
in the `OpenAIGPTConfig` to `ollama/mistral:7b-instruct-v0.2-q8_0`, e.g.

```python
import langroid.language_models as lm
import langroid as lr

llm_config = lm.OpenAIGPTConfig(
    chat_model="ollama/mistral:7b-instruct-v0.2-q8_0",
    chat_context_length=16_000, # adjust based on model
)
agent_config = lr.ChatAgentConfig(
    llm=llm_config,
    system_message="You are helpful but concise",
)
agent = lr.ChatAgent(agent_config)
# directly invoke agent's llm_response method
# response = agent.llm_response("What is the capital of Russia?")
task = lr.Task(agent, interactive=True)
task.run() # for an interactive chat loop
```

## Setup Ollama with a GGUF model from HuggingFace

Some models are not directly supported by Ollama out of the box. To server a GGUF
model with Ollama, you can download the model from HuggingFace and set up a custom
Modelfile for it.

E.g. download the GGUF version of `dolphin-mixtral` from
[here](https://huggingface.co/TheBloke/dolphin-2.7-mixtral-8x7b-GGUF)

(specifically, download this file `dolphin-2.7-mixtral-8x7b.Q4_K_M.gguf`)

To set up a custom ollama model based on this:

- Save this model at a convenient place, e.g. `~/.ollama/models/`
- Create a modelfile for this model. First see what an existing modelfile
  for a similar model looks like, e.g. by running:

```
ollama show --modelfile dolphin-mixtral:latest
```
You will notice this file has a FROM line followed by a prompt template and other settings.
Create a new file with these contents.
Only  change the  `FROM ...` line with the path to the model you downloaded, e.g.
```
FROM /Users/blah/.ollama/models/dolphin-2.7-mixtral-8x7b.Q4_K_M.gguf
```

- Save this modelfile somewhere, e.g. `~/.ollama/modelfiles/dolphin-mixtral-gguf`
- Create a new ollama model based on this file:
```
ollama create dolphin-mixtral-gguf -f ~/.ollama/modelfiles/dolphin-mixtral-gguf
``` 

- Run this new model using `ollama run dolphin-mixtral-gguf`

To use this model with Langroid you can then specify `ollama/dolphin-mixtral-gguf`
as the `chat_model` param in the `OpenAIGPTConfig` as in the previous section.
When a script supports it, you can also pass in the model name via
`-m ollama/dolphin-mixtral-gguf`

## Local LLMs using LMStudio

LMStudio is one of the simplest ways to download run open-weight LLMs locally.
See their docs at [lmstudio.ai](https://lmstudio.ai/docs) for installation and usage 
instructions. Once you download a model, you can use the "server" option to have it 
served via an OpenAI-compatible API at a local IP like `https://127.0.0.1:1234/v1`.
As with any other scenario of running a local LLM, you can use this with Langroid by
setting `chat_model` as follows (note you should not include the `https://` part):

```python
llm_config = lm.OpenAIGPTConfig(
    chat_model="local/127.0.0.1234/v1",
    ...
)
```

## Setup llama.cpp with a GGUF model from HuggingFace

See `llama.cpp`'s [GitHub page](https://github.com/ggerganov/llama.cpp/tree/master) for build and installation instructions.

After installation, begin as above with downloading a GGUF model from HuggingFace; for example, the quantized `Qwen2.5-Coder-7B` from [here](https://huggingface.co/Qwen/Qwen2.5-Coder-7B-Instruct-GGUF); specifically, [this file](https://huggingface.co/Qwen/Qwen2.5-Coder-7B-Instruct-GGUF/blob/main/qwen2.5-coder-7b-instruct-q2_k.gguf).

Now, the server can be started with `llama-server -m qwen2.5-coder-7b-instruct-q2_k.gguf`.

In addition, your `llama.cpp` may be built with support for simplified management of HuggingFace models (specifically, `libcurl` support is required); in this case, `llama.cpp` will download HuggingFace models to a cache directory, and the server may be run with:
```bash
llama-server \
      --hf-repo Qwen/Qwen2.5-Coder-7B-Instruct-GGUF \
      --hf-file qwen2.5-coder-7b-instruct-q2_k.gguf
```

To use the model with Langroid, specify `llamacpp/localhost:{port}` as the `chat_model`; the default port is 8080.

## Setup vLLM with a model from HuggingFace

See [the vLLM docs](https://docs.vllm.ai/en/stable/getting_started/installation.html) for installation and configuration options. To run a HuggingFace model with vLLM, use `vllm serve`, which provides an OpenAI-compatible server. 

For example, to run `Qwen2.5-Coder-32B`, run `vllm serve Qwen/Qwen2.5-Coder-32B`.

If the model is not publicly available, set the environment varaible `HF_TOKEN` to your HuggingFace token with read access to the model repo.

To use the model with Langroid, specify `vllm/Qwen/Qwen2.5-Coder-32B` as the `chat_model` and, if a port other than the default 8000 was used, set `api_base` to `localhost:{port}`.

## Setup vLLM with a GGUF model from HuggingFace

`vLLM` supports running quantized models from GGUF files; however, this is currently an experimental feature. To run a quantized `Qwen2.5-Coder-32B`, download the model from [the repo](https://huggingface.co/Qwen/Qwen2.5-Coder-32B-Instruct-GGUF), specifically [this file](https://huggingface.co/Qwen/Qwen2.5-Coder-32B-Instruct-GGUF/blob/main/qwen2.5-coder-32b-instruct-q4_0.gguf). 

The model can now be run with `vllm serve qwen2.5-coder-32b-instruct-q4_0.gguf --tokenizer Qwen/Qwen2.5-Coder-32B` (the tokenizer of the base model rather than the quantized model should be used).

To use the model with Langroid, specify `vllm/qwen2.5-coder-32b-instruct-q4_0.gguf` as the `chat_model` and, if a port other than the default 8000 was used, set `api_base` to `localhost:{port}`.

## "Local" LLMs hosted on Groq
In this scenario, an open-source LLM (e.g. `llama3.1-8b-instant`) is hosted on a Groq server
which provides an OpenAI-compatible API. Using this with langroid is exactly analogous
to the Ollama scenario above: you can set the `chat_model` in the `OpenAIGPTConfig` to
`groq/<model_name>`, e.g. `groq/llama3.1-8b-instant`. 
For this to work, ensure you have a `GROQ_API_KEY` environment variable set in your
`.env` file. See [groq docs](https://console.groq.com/docs/quickstart).

## "Local" LLMs hosted on Cerebras
This works exactly like with Groq, except you set up a `CEREBRAS_API_KEY` environment variable, and specify the `chat_model` as `cerebras/<model_name>`, e.g. `cerebras/llama3.1-8b`. See the Cerebras [docs](https://inference-docs.cerebras.ai/introduction) for details on which LLMs are supported.

## Open/Proprietary LLMs via OpenRouter

OpenRouter is a **paid service** that provides an OpenAI-compatible API 
for practically any LLM, open or proprietary.
Using this with Langroid is similar to the `groq` scenario above:

- Ensure you have an `OPENROUTER_API_KEY` set up in your environment (or `.env` file), and 
- Set the `chat_model` in the `OpenAIGPTConfig` to 
  `openrouter/<model_name>`, where `<model_name>` is the name of the model on the 
[OpenRouter](https://openrouter.ai/) website, e.g. `qwen/qwen-2.5-7b-instruct`.

This is a good option if you want to use larger open LLMs without having to download
them locally (especially if your local machine does not have the resources to run them).
Besides using specific LLMs, OpenRouter also has smart routing/load-balancing.
OpenRouter is also convenient for using proprietary LLMs (e.g. gemini, amazon) via 
a single convenient API.

## "Local" LLMs hosted on GLHF.chat

See [glhf.chat](https://glhf.chat/chat/create) for a list of available models.

To run with one of these models, set the `chat_model` in the `OpenAIGPTConfig` to
`"glhf/<model_name>"`, where `model_name` is `hf:` followed by the HuggingFace repo 
path, e.g. `Qwen/Qwen2.5-Coder-32B-Instruct`, so the full `chat_model` would be
`"glhf/hf:Qwen/Qwen2.5-Coder-32B-Instruct"`. 

## DeepSeek LLMs

As of 26-Dec-2024, DeepSeek models are available via their [api](https://platform.deepseek.com).
To use it with Langroid:

- set up your `DEEPSEEK_API_KEY` environment variable in the `.env` file or as
 an explicit export in your shell
- set the `chat_model` in the `OpenAIGPTConfig` to `deepseek/deepseek-chat` to use the 
`DeepSeek-V3` model, or `deepseek/deepseek-reasoner` to use the full (i.e. non-distilled) `DeepSeek-R1` "reasoning" model.

The DeepSeek models are also available via OpenRouter (see the corresponding 
in the OpenRouter section here) or ollama (see those instructions). E.g. you
can use the DeepSeek R1 or its distilled variants by setting `chat_model` to 
`openrouter/deepseek/deepseek-r1` or `ollama/deepseek-r1:8b`.

## Other non-OpenAI LLMs supported by LiteLLM

For other scenarios of running local/remote LLMs, it is possible that the `LiteLLM` library
supports an "OpenAI adaptor" for these models (see their [docs](https://litellm.vercel.app/docs/providers)).

Depending on the specific model, the `litellm` docs may say you need to 
specify a model in the form `<provider>/<model>`, e.g. `palm/chat-bison`. 
To use the model with Langroid, simply prepend `litellm/` to this string, e.g. `litellm/palm/chat-bison`,
when you specify the `chat_model` in the `OpenAIGPTConfig`.

To use `litellm`, ensure you have the `litellm` extra installed, 
via `pip install langroid[litellm]` or equivalent.



## Harder: with oobabooga
Like Ollama, [oobabooga/text-generation-webui](https://github.com/oobabooga/text-generation-webui) provides an OpenAI-API-compatible API server, but the setup 
is significantly more involved. See their github page for installation and model-download instructions.

Once you have finished the installation, you can spin up the server for an LLM using
something like this:

```
python server.py --api --model mistral-7b-instruct-v0.2.Q8_0.gguf --verbose --extensions openai --nowebui
```
This will show a message saying that the OpenAI-compatible API is running at `http://127.0.0.1:5000`

Then in your Langroid code you can specify the LLM config using
`chat_model="local/127.0.0.1:5000/v1` (the `v1` is the API version, which is required).
As with Ollama, you can use the `-m` arg in many of the example scripts, e.g.
```
python examples/docqa/rag-local-simple.py -m local/127.0.0.1:5000/v1
```

Recommended: to ensure accurate chat formatting (and not use the defaults from ooba),
  append the appropriate HuggingFace model name to the
  -m arg, separated by //, e.g. 
```
python examples/docqa/rag-local-simple.py -m local/127.0.0.1:5000/v1//mistral-instruct-v0.2
```
  (no need to include the full model name, as long as you include enough to
   uniquely identify the model's chat formatting template)


## Other local LLM scenarios

There may be scenarios where the above `local/...` or `ollama/...` syntactic shorthand
does not work.(e.g. when using vLLM to spin up a local LLM at an OpenAI-compatible
endpoint). For these scenarios, you will have to explicitly create an instance of 
`lm.OpenAIGPTConfig` and set *both* the `chat_model` and `api_base` parameters.
For example, suppose you are able to get responses from this endpoint using something like:
```bash
curl http://192.168.0.5:5078/v1/chat/completions \
    -H "Content-Type: application/json" \
    -d '{
        "model": "Mistral-7B-Instruct-v0.2",
        "messages": [
             {"role": "user", "content": "Who won the world series in 2020?"}
        ]
    }'
```
To use this endpoint with Langroid, you would create an `OpenAIGPTConfig` like this:
```python
import langroid.language_models as lm
llm_config = lm.OpenAIGPTConfig(
    chat_model="Mistral-7B-Instruct-v0.2",
    api_base="http://192.168.0.5:5078/v1",
)
```

## Quick testing with local LLMs
As mentioned [here](https://langroid.github.io/langroid/tutorials/non-openai-llms/#quick-testing-with-non-openai-models), 
you can run many of the [tests](https://github.com/langroid/langroid/tree/main/tests/main) in the main langroid repo against a local LLM
(which by default run against an OpenAI model), 
by specifying the model as `--m <model>`, 
where `<model>` follows the syntax described in the previous sections. Here's an example:

```bash
pytest tests/main/test_chat_agent.py --m ollama/mixtral
```
Of course, bear in mind that the tests may not pass due to weaknesses of the local LLM.
</file>

<file path="docs/tutorials/postgresql-agent.md">
# Chat with a PostgreSQL DB using SQLChatAgent

The [`SQLChatAgent`](../reference/agent/special/sql/sql_chat_agent.md) is
designed to facilitate interactions with an SQL database using natural language.
A ready-to-use script based on the `SQLChatAgent` is available in the `langroid-examples` 
repo at [`examples/data-qa/sql-chat/sql_chat.py`](https://github.com/langroid/langroid-examples/blob/main/examples/data-qa/sql-chat/sql_chat.py)
(and also in a similar location in the main `langroid` repo).
This tutorial walks you through how you might use the `SQLChatAgent` if you were
to write your own script from scratch. We also show some of the internal workings of this Agent.

The agent uses the schema context to generate SQL queries based on a user's
input. Here is a tutorial on how to set up an agent with your PostgreSQL
database. The steps for other databases are similar. Since the agent implementation relies 
on SqlAlchemy, it should work with any SQL DB that supports SqlAlchemy.
It offers enhanced functionality for MySQL and PostgreSQL by 
automatically extracting schemas from the database. 

## Before you begin

!!! note "Data Privacy Considerations"
    Since the SQLChatAgent uses the OpenAI GPT-4 as the underlying language model,
    users should be aware that database information processed by the agent may be
    sent to OpenAI's API and should therefore be comfortable with this.
1. Install PostgreSQL dev libraries for your platform, e.g.
    - `sudo apt-get install libpq-dev` on Ubuntu,
    - `brew install postgresql` on Mac, etc.

2. Follow the general [setup guide](../quick-start/setup.md) to get started with Langroid
(mainly, install `langroid` into your virtual env, and set up suitable values in 
the `.env` file). Note that to use the SQLChatAgent with a PostgreSQL database,
you need to install the `langroid[postgres]` extra, e.g.:

    - `pip install "langroid[postgres]"` or 
    - `poetry add "langroid[postgres]"` or `uv add "langroid[postgres]"`
    - `poetry install -E postgres` or `uv pip install --extra postgres -r pyproject.toml`


If this gives you an error, try `pip install psycopg2-binary` in your virtualenv.


## Initialize the agent

```python
from langroid.agent.special.sql.sql_chat_agent import (
    SQLChatAgent,
    SQLChatAgentConfig,
)

agent = SQLChatAgent(
    config=SQLChatAgentConfig(
        database_uri="postgresql://example.db",
    )
)
```

## Configuration

The following components of `SQLChatAgentConfig` are optional but strongly
recommended for improved results:

* `context_descriptions`: A nested dictionary that specifies the schema context for
  the agent to use when generating queries, for example:

```json
{
  "table1": {
    "description": "description of table1",
    "columns": {
      "column1": "description of column1 in table1",
      "column2": "description of column2 in table1"
    }
  },
  "employees": {
    "description": "The 'employees' table contains information about the employees. It relates to the 'departments' and 'sales' tables via foreign keys.",
    "columns": {
      "id": "A unique identifier for an employee. This ID is used as a foreign key in the 'sales' table.",
      "name": "The name of the employee.",
      "department_id": "The ID of the department the employee belongs to. This is a foreign key referencing the 'id' in the 'departments' table."
    }
  }
}
```

> By default, if no context description json file is provided in the config, the 
agent will automatically generate the file using the built-in Postgres table/column comments.

* `schema_tools`: When set to `True`, activates a retrieval mode where the agent
  systematically requests only the parts of the schemas relevant to the current query. 
  When this option is enabled, the agent performs the following steps:

    1. Asks for table names.
    2. Asks for table descriptions and column names from possibly relevant table
       names.
    3. Asks for column descriptions from possibly relevant columns.
    4. Writes the SQL query.

  Setting `schema_tools=True` is especially useful for large schemas where it is costly or impossible 
  to include the entire schema in a query context. 
  By selectively using only the relevant parts of the context descriptions, this mode
  reduces token usage, though it may result in 1-3 additional OpenAI API calls before
  the final SQL query is generated.

## Putting it all together

In the code below, we will allow the agent to generate the context descriptions
from table comments by excluding the `context_descriptions` config option.
We set `schema_tools` to `True` to enable the retrieval mode.

```python
from langroid.agent.special.sql.sql_chat_agent import (
    SQLChatAgent,
    SQLChatAgentConfig,
)

# Initialize SQLChatAgent with a PostgreSQL database URI and enable schema_tools
agent = SQLChatAgent(gi
config = SQLChatAgentConfig(
    database_uri="postgresql://example.db",
    schema_tools=True,
)
)

# Run the task to interact with the SQLChatAgent
task = Task(agent)
task.run()
```

By following these steps, you should now be able to set up an `SQLChatAgent`
that interacts with a PostgreSQL database, making querying a seamless
experience.

In the `langroid` repo we have provided a ready-to-use script
[`sql_chat.py`](https://github.com/langroid/langroid/blob/main/examples/data-qa/sql-chat/sql_chat.py)
based on the above, that you can use right away to interact with your PostgreSQL database:

```python
python3 examples/data-qa/sql-chat/sql_chat.py
```

This script will prompt you for the database URI, and then start the agent.
</file>

<file path="docs/tutorials/supported-models.md">
# Langroid Supported LLMs and Providers

Langroid supports a wide range of Language Model providers through its 
[`OpenAIGPTConfig`][langroid.language_models.openai_gpt.OpenAIGPTConfig] class. 

!!! note "OpenAIGPTConfig is not just for OpenAI models!"
    The `OpenAIGPTConfig` class is a generic configuration class that can be used
    to configure any LLM provider that is OpenAI API-compatible.
    This includes both local and remote models.

You would typically set up the `OpenAIGPTConfig` class with the `chat_model`
parameter, which specifies the model you want to use, and other 
parameters such as `max_output_tokens`, `temperature`, etc
(see the 
[`OpenAIGPTConfig`][langroid.language_models.openai_gpt.OpenAIGPTConfig] class
and its parent class 
[`LLModelConfig`][langroid.language_models.base.LLMConfig] for
full parameter details):



```python
import langroid.language_models as lm
llm_config = lm.OpenAIGPTConfig(
    chat_model="<model-name>", # possibly includes a <provider-name> prefix
    api_key="api-key", # optional, prefer setting in environment variables
    # ... other params such as max_tokens, temperature, etc.
)
```

Below are `chat_model` examples for each supported provider.
For more details see the guides on setting up Langroid with 
[local](https://langroid.github.io/langroid/tutorials/local-llm-setup/) 
and [non-OpenAI LLMs](https://langroid.github.io/langroid/tutorials/non-openai-llms/).
Once you set up the `OpenAIGPTConfig`, you can then directly interact with the LLM,
or set up an Agent with this LLM, and use it by itself, or in a multi-agent setup,
as shown in the [Langroid quick tour](https://langroid.github.io/langroid/tutorials/langroid-tour/)


Although we support specifying the `api_key` directly in the config
(not recommended for security reasons),
more typically you would set the `api_key` in your environment variables.
Below is a table showing for each provider, an example `chat_model` setting, 
and which environment variable to set for the API key.




| Provider      | `chat_model` Example                                     | API Key Environment Variable |
|---------------|----------------------------------------------------------|----------------------------|
| OpenAI        | `gpt-4o`                                                 | `OPENAI_API_KEY` |
| Groq          | `groq/llama3.3-70b-versatile`                            | `GROQ_API_KEY` |
| Cerebras      | `cerebras/llama-3.3-70b`                                 | `CEREBRAS_API_KEY` |
| Gemini        | `gemini/gemini-2.0-flash`                                | `GEMINI_API_KEY` |
| DeepSeek      | `deepseek/deepseek-reasoner`                             | `DEEPSEEK_API_KEY` |
| GLHF          | `glhf/hf:Qwen/Qwen2.5-Coder-32B-Instruct`                | `GLHF_API_KEY` |
| OpenRouter    | `openrouter/deepseek/deepseek-r1-distill-llama-70b:free` | `OPENROUTER_API_KEY` |
| Ollama        | `ollama/qwen2.5`                                         | `OLLAMA_API_KEY` (usually `ollama`) |
| VLLM          | `vllm/mistral-7b-instruct`                               | `VLLM_API_KEY` |
| LlamaCPP      | `llamacpp/localhost:8080`                                | `LLAMA_API_KEY` |
| Generic Local | `local/localhost:8000/v1`                                | No specific env var required |
| LiteLLM       | `litellm/anthropic/claude-3-7-sonnet`                    | Depends on provider |
|               | `litellm/mistral-small`                                  | Depends on provider |
| HF Template   | `local/localhost:8000/v1//mistral-instruct-v0.2`         | Depends on provider |
|               | `litellm/ollama/mistral//hf`                             | |

## HuggingFace Chat Template Formatting

For models requiring specific prompt formatting:

```python
import langroid.language_models as lm

# Specify formatter directly
llm_config = lm.OpenAIGPTConfig(
    chat_model="local/localhost:8000/v1//mistral-instruct-v0.2",
    formatter="mistral-instruct-v0.2"
)

# Using HF formatter auto-detection
llm_config = lm.OpenAIGPTConfig(
    chat_model="litellm/ollama/mistral//hf",
)
```
</file>

<file path="docs/auto_docstring.py">
from pathlib import Path
import mkdocs_gen_files

# -----------------------------------------------------#
#                    Configuration                    #
# -----------------------------------------------------#
src_dir = "langroid"
repo_root = "https://github.com/langroid/langroid/tree/main/"
nav = mkdocs_gen_files.Nav()

# -----------------------------------------------------#
#                       Runner                        #
# -----------------------------------------------------#
""" Generate code reference pages and navigation

    Based on the recipe of mkdocstrings:
    https://github.com/mkdocstrings/mkdocstrings

    Credits:
    Timothée Mazzucotelli
    https://github.com/pawamoy
"""
# Iterate over each Python file
for path in sorted(Path(src_dir).rglob("*.py")):
    if ".ipynb_checkpoints" in str(path):
        continue

    # Get path in module, documentation and absolute
    module_path = path.relative_to(src_dir).with_suffix("")
    doc_path = path.relative_to(src_dir).with_suffix(".md")
    full_doc_path = Path("reference", doc_path)

    # Handle edge cases
    parts = (src_dir,) + tuple(module_path.parts)
    if parts[-1] == "__init__":
        parts = parts[:-1]
        doc_path = doc_path.with_name("index.md")
        full_doc_path = full_doc_path.with_name("index.md")
    elif parts[-1] == "__main__":
        continue
    nav[parts] = doc_path.as_posix()

    # Write docstring documentation to disk via parser
    with mkdocs_gen_files.open(full_doc_path, "w") as fd:
        ident = ".".join(parts)
        full_code_path = repo_root + "/" + str(path)
        fd.write(f"[{path}]({full_code_path})\n")
        fd.write(f"::: {ident}")
    # Update parser
    mkdocs_gen_files.set_edit_path(full_doc_path, path)
    print(f"Doing docs for {full_doc_path}, {path}")

with mkdocs_gen_files.open("reference/SUMMARY.md", "w") as nav_file:
    nav_file.writelines(nav.build_literate_nav())
</file>

<file path="docs/FAQ.md">
# Frequently Asked Questions

## Can I view the reasoning (thinking) text when using a Reasoning LLM like R1 or o1?

Yes, see this note on [reasoning-content](https://langroid.github.io/langroid/notes/reasoning-content/).


## Does Langroid work with non-OpenAI LLMs?

Yes! Langroid works with practically any LLM, local or remote, closed or open.

See these two guides:

- [Using Langroid with local/open LLMs](https://langroid.github.io/langroid/tutorials/local-llm-setup/)
- [Using Langroid with non-OpenAI proprietary LLMs](https://langroid.github.io/langroid/tutorials/non-openai-llms/)

## Where can I find out about Langroid's architecture?

There are a few documents that can help:

- A work-in-progress [architecture description](https://langroid.github.io/langroid/blog/2024/08/15/overview-of-langroids-multi-agent-architecture-prelim/)
  on the Langroid blog.
- The Langroid [Getting Started](https://langroid.github.io/langroid/quick-start/) guide walks you 
  step-by-step through Langroid's features and architecture.
- An article by LanceDB on [Multi-Agent Programming with Langroid](https://lancedb.substack.com/p/langoid-multi-agent-programming-framework)

## How can I limit the number of output tokens generated by the LLM?

You can set the `max_output_tokens` parameter in the `LLMConfig` class,
or more commonly, the `OpenAIGPTConfig` class, which is a subclass of `LLMConfig`,
for example:

```python
import langroid as lr
import langroid.language_models as lm

llm_config = lm.OpenAIGPTConfig(
    chat_model="openai/gpt-3.5-turbo",
    max_output_tokens=100, # limit output to 100 tokens
)
agent_config = lr.ChatAgentConfig(
    llm=llm_config,
    # ... other configs
)
agent = lr.ChatAgent(agent_config)
```

Then every time the agent's `llm_response` method is called, the LLM's output 
will be limited to this number of tokens.

If you omit the `max_output_tokens`, it defaults to 8192. If you wish **not** to 
limit the output tokens, you can set `max_output_tokens=None`, in which case 
Langroid uses the model-specific maximum output tokens from the 
[`langroid/language_models/model_info.py`](https://github.com/langroid/langroid/blob/main/langroid/language_models/model_info.py) file
(specifically the `model_max_output_tokens` property of `LLMConfig`).
Note however that this model-specific may be quite large, so you would generally 
want to either omit setting `max_output_tokens` (which defaults to 8192), or set it
another desired value.


## How langroid handles long chat histories

You may encounter an error like this:

```
Error: Tried to shorten prompt history but ... longer than context length
```

This might happen when your chat history bumps against various limits.
Here is how Langroid handles long chat histories. Ultimately the LLM API is invoked with two key inputs:
the message history $h$, and the desired output length $n$ (defaults to the `max_output_tokens` in the 
`ChatAgentConfig`). These inputs are determined as follows (see the `ChatAgent._prep_llm_messages` method):

- let $H$ be the current message history, and $M$ be the value of `ChatAgentConfig.max_output_tokens`, and $C$ be 
  the context-length of the LLM.
- If $\text{tokens}(H) + M \leq C$, then langroid uses $h = H$ and $n = M$, since there is enough room to fit both the 
  actual chat history as well as the desired max output length.
- If $\text{tokens}(H) + M > C$, this means the context length is too small to accommodate the message history $H$ 
  and 
  the desired output length $M$. Then langroid tries to use a _shortened_ output length $n' = C - \text{tokens}(H)$, 
  i.e. the output is effectively _truncated_ to fit within the context length. 
    - If $n'$ is at least equal to `min_output_tokens` $m$ (default 10), langroid proceeds with $h = H$ and $n=n'$.
    - otherwise, this means that the message history $H$ is so long that the remaining space in the LLM's 
      context-length $C$ is unacceptably small (i.e. smaller than the minimum output length $m$). In this case,
      Langroid tries to shorten the message history by dropping early messages, and updating the message history $h$ as 
      long as $C - \text{tokens}(h) <  m$, until there are no more messages to drop (it will not drop the system 
      message or the last message, which is a user message), and throws the error mentioned above. 

If you are getting this error, you will want to check whether:

- you have set the `chat_context_length` too small, if you are setting it manually
- you have set the `max_output_tokens` too large
- you have set the `min_output_tokens` too large

If these look fine, then the next thing to look at is whether you are accumulating too much context into the agent 
history, for example retrieved passages (which can be very long) in a RAG scenario. One common case is when a query 
$Q$ is being answered using RAG, the retrieved passages $P$ are added to $Q$ to create a (potentially very long) prompt 
like 
> based on the passages P, answer query Q

Once the LLM returns an answer (if appropropriate for your context), you should avoid retaining the passages $P$ in the 
agent history, i.e. the last user message should be simply $Q$, rather than the prompt above. This functionality is exactly what you get when you 
use `ChatAgent._llm_response_temp_context`, which is used by default in the `DocChatAgent`. 

Another way to keep chat history tokens from growing too much is to use the `llm_response_forget` method, which 
erases both the query and response, if that makes sense in your scenario.

## How can I handle large results from Tools?

As of version 0.22.0, Langroid allows you to control the size of tool results
by setting [optional parameters](https://langroid.github.io/langroid/notes/large-tool-results/) 
in a `ToolMessage` definition.

## Can I handle a tool without running a task?

Yes, if you've enabled an agent to both _use_ (i.e. generate) and _handle_ a tool. 
See the `test_tool_no_task` for an example of this. The `NabroskiTool` is enabled
for the agent, and to get the agent's LLM to generate the tool, you first do 
something like:
```python
response = agent.llm_response("What is Nabroski of 1 and 2?")
```
Now the `response` is a `ChatDocument` that will contain the JSON for the `NabroskiTool`.
To _handle_ the tool, you will need to call the agent's `agent_response` method:

```python
result = agent.agent_response(response)
```

When you wrap the agent in a task object, and do `task.run()` the above two steps are done for you,
since Langroid operates via a loop mechanism, see docs 
[here](https://langroid.github.io/langroid/quick-start/multi-agent-task-delegation/#task-collaboration-via-sub-tasks).
The *advantage* of using `task.run()` instead of doing this yourself, is that this method
ensures that tool generation errors are sent back to the LLM so it retries the generation.

## OpenAI Tools and Function-calling support

Langroid supports OpenAI tool-calls API as well as OpenAI function-calls API.
Read more [here](https://github.com/langroid/langroid/releases/tag/0.7.0).

Langroid has always had its own native tool-calling support as well, 
which works with **any** LLM -- you can define a subclass of `ToolMessage` (pydantic based) 
and it is transpiled into system prompt instructions for the tool. 
In practice, we don't see much difference between using this vs OpenAI fn-calling. 
Example [here](https://github.com/langroid/langroid/blob/main/examples/basic/fn-call-local-simple.py).
Or search for `ToolMessage` in any of the `tests/` or `examples/` folders.

## Some example scripts appear to return to user input immediately without handling a tool.

This is because the `task` has been set up with `interactive=True` 
(which is the default). With this setting, the task loop waits for user input after
either the `llm_response` or `agent_response` (typically a tool-handling response) 
returns a valid response. If you want to progress through the task, you can simply 
hit return, unless the prompt indicates that the user needs to enter a response.

Alternatively, the `task` can be set up with `interactive=False` -- with this setting,
the task loop will _only_ wait for user input when an entity response (`llm_response` 
or `agent_response`) _explicitly_ addresses the user. Explicit user addressing can
be done using either:

- an orchestration tool, e.g. `SendTool` (see details in
the release notes for [0.9.0](https://github.com/langroid/langroid/releases/tag/0.9.0)), an example script is the [multi-agent-triage.py](https://github.com/langroid/langroid/blob/main/examples/basic/multi-agent-triage.py), or 
- a special addressing prefix, see the example script [1-agent-3-tools-address-user.py](https://github.com/langroid/langroid/blob/main/examples/basic/1-agent-3-tools-address-user.py)


## Can I specify top_k in OpenAIGPTConfig (for LLM API calls)?

No; Langroid currently only supports parameters accepted by OpenAI's API, and `top_k` is _not_ one of them. See:

- [OpenAI API Reference](https://platform.openai.com/docs/api-reference/chat/create)
- [Discussion on top_k, top_p, temperature](https://community.openai.com/t/temperature-top-p-and-top-k-for-chatbot-responses/295542/5)
- [Langroid example](https://github.com/langroid/langroid/blob/main/examples/basic/fn-call-local-numerical.py) showing how you can set other OpenAI API parameters, using the `OpenAICallParams` object.


## Can I persist agent state across multiple runs?

For example, you may want to stop the current python script, and 
run it again later, resuming your previous conversation.
Currently there is no built-in Langroid mechanism for this, but you can 
achieve a basic type of persistence by saving the agent's `message_history`:

-  if you used `Task.run()` in your script, make sure the task is 
set up with `restart=False` -- this prevents the agent state from being reset when 
the task is run again.
- using python's pickle module, you can save the `agent.message_history` to a file,
and load it (if it exists) at the start of your script.

See the example script [`chat-persist.py`](https://github.com/langroid/langroid/blob/main/examples/basic/chat-persist.py)

For more complex persistence, you can take advantage of the `GlobalState`,
where you can store message histories of multiple agents indexed by their name.
Simple examples of `GlobalState` are in the [`chat-tree.py`](https://github.com/langroid/langroid/blob/main/examples/basic/chat-tree.py) example, 
and the [`test_global_state.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_global_state.py) test.

## Is it possible to share state between agents/tasks?

The above-mentioned `GlobalState` mechanism can be used to share state between 
agents/tasks. See the links mentioned in the previous answer.

## How can I suppress LLM output?

You can use the `quiet_mode` context manager for this, see 
[here](https://langroid.github.io/langroid/notes/quiet-mode/)

## How can I deal with LLMs (especially weak ones) generating bad JSON in tools?

Langroid already attempts to repair bad JSON (e.g. unescaped newlines, missing quotes, etc)  
using the [json-repair](https://github.com/mangiucugna/json_repair) library and other
custom methods, before attempting to parse it into a `ToolMessage` object.
However this type of repair may not be able to handle all edge cases of bad JSON 
from weak LLMs. There are two existing ways to deal with this, and one coming soon:

- If you are defining your own `ToolMessage` subclass, considering deriving it instead
  from `XMLToolMessage` instead, see the [XML-based Tools](https://langroid.github.io/langroid/notes/xml-tools/)
- If you are using an existing Langroid `ToolMessage`, e.g. `SendTool`, you can 
  define your own subclass of `SendTool`, say `XMLSendTool`,
  inheriting from both `SendTool` and `XMLToolMessage`; see this 
  [example](https://github.com/langroid/langroid/blob/main/examples/basic/xml_tool.py)
- Coming soon: strict decoding to leverage the Structured JSON outputs supported by OpenAI
  and open LLM providers such as `llama.cpp` and `vllm`.

The first two methods instruct the LLM to generate XML instead of JSON,
and any field that is designated with a `verbatim=True` will be enclosed 
within an XML `CDATA` tag, which does *not* require any escaping, and can
be far more reliable for tool-use than JSON, especially with weak LLMs.

## How can I handle an LLM "forgetting" to generate a `ToolMessage`? 

Sometimes the LLM (especially a weak one) forgets to generate a 
[`ToolMessage`][langroid.agent.tool_message.ToolMessage]
(either via OpenAI's tools/functions API, or via Langroid's JSON/XML Tool mechanism),
despite being instructed to do so. There are a few remedies Langroid offers for this:

**Improve the instructions in the `ToolMessage` definition:**

- Improve instructions in the `purpose` field of the `ToolMessage`.
- Add an `instructions` class-method to the `ToolMessage`, as in the
  [`chat-search.py`](https://github.com/langroid/langroid/blob/main/examples/docqa/chat-search.py) script:

```python
@classmethod
def instructions(cls) -> str:
    return """
        IMPORTANT: You must include an ACTUAL query in the `query` field,
        """
```
  These instructions are meant to be general instructions on how to use the tool
  (e.g. how to set the field values), not to specifically about the formatting.

- Add a `format_instructions` class-method, e.g. like the one in the 
  [`chat-multi-extract-3.py`](https://github.com/langroid/langroid/blob/main/examples/docqa/chat-multi-extract-3.py) 
  example script.

```python
@classmethod
def format_instructions(cls, tool: bool = True) -> str:
    instr = super().format_instructions(tool)
    instr += """
    ------------------------------
    ASK ME QUESTIONS ONE BY ONE, to FILL IN THE FIELDS 
    of the `lease_info` function/tool.
    First ask me for the start date of the lease.
    DO NOT ASK ANYTHING ELSE UNTIL YOU RECEIVE MY ANSWER.
    """
    return instr
```

**Override the `handle_message_fallback` method in the agent:**

This method is called when the Agent's `agent_response` method receives a non-tool
message as input. The default behavior of this method is to return None, but it
is very useful to override the method to handle cases where the LLM has forgotten
to use a tool. You can define this method to return a "nudge" to the LLM
telling it that it forgot to do a tool-call, e.g. see how it's done in the 
example script [`chat-multi-extract-local.py`](https://github.com/langroid/langroid/blob/main/examples/docqa/chat-multi-extract-local.py):

```python
class LeasePresenterAgent(ChatAgent):
    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        """Handle scenario where Agent failed to present the Lease JSON"""
        if isinstance(msg, ChatDocument) and msg.metadata.sender == Entity.LLM:
            return """
            You either forgot to present the information in the JSON format
            required in `lease_info` JSON specification,
            or you may have used the wrong name of the tool or fields.
            Try again.
            """
        return None
```

Note that despite doing all of these, the LLM may still fail to generate a `ToolMessage`.
In such cases, you may want to consider using a better LLM, or an up-coming Langroid
feature that leverages **strict decoding** abilities of specific LLM providers
(e.g. OpenAI, llama.cpp, vllm) that are able to use grammar-constrained decoding
to force the output to conform to the specified structure.

Langroid also provides a simpler mechanism to specify the action to take
when an LLM does not generate a tool, via the `ChatAgentConfig.handle_llm_no_tool` 
config parameter, see the 
[docs](https://langroid.github.io/langroid/notes/handle-llm-no-tool/).

## Can I use Langroid to converse with a Knowledge Graph (KG)?

Yes, you can use Langroid to "chat with" either a Neo4j or ArangoDB KG, 
see docs [here](https://langroid.github.io/langroid/notes/knowledge-graphs/)

## How can I improve `DocChatAgent` (RAG) latency?

The behavior of `DocChatAgent` can be controlled by a number of settings in 
the `DocChatAgentConfig` class.
The top-level query-answering method in `DocChatAgent` is `llm_response`, which use the 
`answer_from_docs` method. At a high level, the response to an input message involves
the following steps:

- **Query to StandAlone:** LLM rephrases the query as a stand-alone query. 
   This can incur some latency. You can 
    turn it off by setting `assistant_mode=True` in the `DocChatAgentConfig`.
- **Retrieval:** The most relevant passages (chunks) are retrieved using a collection of semantic/lexical 
      similarity searches and ranking methods. There are various knobs in `DocChatAgentConfig` to control
      this retrieval.
- **Relevance Extraction:** LLM is used to retrieve verbatim relevant portions from
  the retrieved chunks. This is typically the biggest latency step. You can turn it off
  by setting the `relevance_extractor_config` to None in `DocChatAgentConfig`.
- **Answer Generation:** LLM generates answer based on retrieved passages.


See the [`doc-aware-chat.py`](https://github.com/langroid/langroid/blob/main/examples/docqa/doc-aware-chat.py)
example script, which illustrates some of these settings.

In some scenarios you want to *only* use the **retrieval** step of a `DocChatAgent`.
For this you can use the [`RetrievalTool`][langroid.agent.tools.retrieval_tool.RetrievalTool].
See the `test_retrieval_tool` in 
[`test_doc_chat_agent.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_doc_chat_agent.py).
to learn how to use it. The above example script uses `RetrievalTool` as well.

## Is there support to run multiple tasks concurrently?

Yes, see the `run_batch_tasks` and related functions in 
[batch.py](https://github.com/langroid/langroid/blob/main/langroid/agent/batch.py).

See also:

- tests: [test_batch.py](https://github.com/langroid/langroid/blob/main/tests/main/test_batch.py),
   [test_relevance_extractor.py](https://github.com/langroid/langroid/blob/main/tests/main/test_relevance_extractor.py),
- example: [multi-agent-round-table.py](https://github.com/langroid/langroid/blob/main/examples/basic/multi-agent-round-table.py)

Another example is within 
[`DocChatAgent`](https://github.com/langroid/langroid/blob/main/langroid/agent/special/doc_chat_agent.py), 
which uses batch tasks for relevance extraction,
see the `get_verbatim_extracts` method -- when there are k relevant passages,
this runs k tasks concurrently, 
each of which uses an LLM-agent to extract relevant verbatim text from a passage.

## Can I use Langroid in a FastAPI server?

Yes, see the [langroid/fastapi-server](https://github.com/langroid/fastapi-server) repo.

## Can a sub-task end all parent tasks and return a result?

Yes, there are two ways to achieve this, using [`FinalResultTool`][langroid.agent.tools.orchestration.final_result_tool.FinalResultTool]:

From a `ChatAgent`'s tool-handler or `agent_response` method: Your code can return a 
`FinalResultTool` with arbitrary field types; this ends the current and all parent tasks and this  
`FinalResultTool` will appear as one of tools in the final `ChatDocument.tool_messages`.
See `test_tool_handlers_and_results` in 
[test_tool_messages.py](https://github.com/langroid/langroid/blob/main/tests/main/test_tool_messages.py), 
and [examples/basic/chat-tool-function.py](https://github.com/langroid/langroid/blob/main/examples/basic/chat-tool-function.py)


From `ChatAgent`'s `llm_response` method: you can define a subclass of a 
`FinalResultTool` and enable the agent to use this tool, which means it will become
available for the LLM to generate. 
See [examples/basic/multi-agent-return-result.py](https://github.com/langroid/langroid/blob/main/examples/basic/multi-agent-return-result.py).

## How can I configure a task to retain or discard prior conversation?

In some scenarios, you may want to control whether each time you call a task's `run` 
method, the underlying agent retains the conversation history from the previous run.
There are two boolean config parameters that control this behavior: 

- the `restart` parameter (default `True`) in the `Task` constructor, and
- the `restart_as_subtask` (default `False`) parameter in the `TaskConfig` argument of the `Task` constructor.

To understand how these work, consider a simple scenario of a task `t` that has a 
subtask `t1`, e.g., suppose you have the following code with default settings 
of the `restart` and `restart_as_subtask` parameters:

```python
from langroid.agent.task import Task
from langroid.agent.task import TaskConfig

# default setttings:
rs = False
r = r1 = True

agent = ...
task_config = TaskConfig(restart_as_subtask=rs) 
t = Task(agent, restart=r, config=task_config)

agent1 = ...
t1 = Task(agent1, restart=r1, config=task_config)
t.add_subtask(t1)
```

This default setting works as follows:
Since task `t` was constructed with the default `restart=True`, when `t.run()` is called, the conversation histories of the agent underlying `t` as well as all 
those of all subtasks (such as `t1`) are reset. However, if during `t.run()`,
there are multiple calls to `t1.run()`, then the conversation history is retained across these calls, even though `t1` was constructed with the default `restart=True` --
this is because the `restart` constructor parameter has no effect on a task's reset
behavior **when it is a subtask**. 

The `TaskConfig.restart_as_subtask` parameter
controls the reset behavior of a task's `run` method when invoked as a subtask.
It defaults to `False`, which is why in the above example, the conversation history
of `t1` is retained across multiple calls to `t1.run()` that may occur
during execution of `t.run()`. If you set this parameter to `True` in the above
example, then the conversation history of `t1` would be reset each time `t1.run()` is called, during a call to `t.run()`.

To summarize, 

- The `Task` constructor's `restart` parameter controls the reset behavior of the task's `run` method when it is called directly, not as a subtask.
- The `TaskConfig.restart_as_subtask` parameter controls the reset behavior of the task's `run` method when it is called as a subtask.

These settings can be mixed and matched as needed.

Additionally, all reset behavior can be turned off during a specific `run()` invocation
by calling it with `allow_restart=False`, e.g.,  `t.run(..., allow_restart=False)`.

## How can I set up a task to exit as soon as the LLM responds?

In some cases you may want the top-level task or a subtask to exit as soon as the LLM responds. You can get this behavior by setting `single_round=True` during task construction, e.g.,

```python
from langroid.agent.task import Task

agent = ...
t = Task(agent, single_round=True, interactive=False)

result = t.run("What is 4 + 5?")
```

The name `single_round` comes from the fact that the task loop ends as soon as 
any **one** of the agent's responders return a valid response. Recall that an 
agent's responders are `llm_response`, `agent_response` (for tool handling), and `user_response` (for user input). In the above example there are no tools and no 
user interaction (since `interactive=False`), so the task will exit as soon as the LLM responds.

More commonly, you may only want this single-round behavior for a subtask, e.g.,

```python
agent = ...
t = Task(agent, single_round=False, interactive=True)

agent1 = ...
t1 = Task(agent1, single_round=True, interactive=False)

t.add_subtask(t1)
top_level_query = ...
result = t.run(...)
```

See the example script [`chat-2-agent-discuss.py`](https://github.com/langroid/langroid/blob/main/examples/basic/chat-2-agent-discuss.py) for an example of this, and also search for `single_round` in the rest of the examples.

!!! warning "Using `single_round=True` will prevent tool-handling"
    As explained above, setting `single_round=True` will cause the task to exit as soon as the LLM responds, and thus if it emits a valid tool (which the agent is enabled to handle), this tool will *not* be handled.
</file>

<file path="docs/index.md">
# Langroid: Harness LLMs with Multi-Agent Programming

## The LLM Opportunity

Given the remarkable abilities of recent Large Language Models (LLMs), there
is an unprecedented opportunity to build intelligent applications powered by
this transformative technology. The top question for any enterprise is: how
best to harness the power of LLMs for complex applications? For technical and
practical reasons, building LLM-powered applications is not as simple as
throwing a task at an LLM-system and expecting it to do it.

## Langroid's Multi-Agent Programming Framework

Effectively leveraging LLMs at scale requires a *principled programming 
framework*. In particular, there is often a need to maintain multiple LLM 
conversations, each instructed in different ways, and "responsible" for 
different aspects of a task.

An *agent* is a convenient abstraction that encapsulates LLM conversation 
state, along with access to long-term memory (vector-stores) and tools (a.k.a functions 
or plugins). Thus a **Multi-Agent Programming** framework is a natural fit 
for complex LLM-based applications.

> Langroid is the first Python LLM-application framework that was explicitly 
designed  with Agents as first-class citizens, and Multi-Agent Programming 
as the core  design principle. The framework is inspired by ideas from the 
[Actor Framework](https://en.wikipedia.org/wiki/Actor_model).

Langroid allows an intuitive definition of agents, tasks and task-delegation 
among agents. There is a principled mechanism to orchestrate multi-agent 
collaboration. Agents act as message-transformers, and take turns responding to (and
transforming) the current message. The architecture is lightweight, transparent, 
flexible, and allows other types of orchestration to be implemented; see the (WIP) 
[langroid architecture document](blog/posts/langroid-architecture.md).
Besides Agents, Langroid also provides simple ways to directly interact with LLMs and vector-stores. See the Langroid [quick-tour](tutorials/langroid-tour.md).

## Highlights
- **Agents as first-class citizens:** The `Agent` class encapsulates LLM conversation state,
  and optionally a vector-store and tools. Agents are a core abstraction in Langroid; 
  Agents act as _message transformers_, and by default provide 3 _responder_ methods, one corresponding to each 
  entity: LLM, Agent, User. 
- **Tasks:** A Task class wraps an Agent, gives the agent instructions (or roles, or goals),
  manages iteration over an Agent's responder methods,
  and orchestrates multi-agent interactions via hierarchical, recursive
  task-delegation. The `Task.run()` method has the same
  type-signature as an Agent's responder's methods, and this is key to how
  a task of an agent can delegate to other sub-tasks: from the point of view of a Task,
  sub-tasks are simply additional responders, to be used in a round-robin fashion
  after the agent's own responders.
- **Modularity, Reusabilily, Loose coupling:** The `Agent` and `Task` abstractions allow users to design
  Agents with specific skills, wrap them in Tasks, and combine tasks in a flexible way.
- **LLM Support**: Langroid works with practically any LLM, local/open or remote/proprietary/API-based, via a variety of libraries and providers. See guides to using [local LLMs](tutorials/local-llm-setup.md) and [non-OpenAI LLMs](tutorials/non-openai-llms.md). See [Supported LLMs](tutorials/supported-models.md).
- **Caching of LLM prompts, responses:** Langroid by default uses [Redis](https://redis.com/try-free/) for caching. 
- **Vector-stores**: [Qdrant](https://qdrant.tech/), [Chroma](https://www.trychroma.com/) and [LanceDB](https://www.lancedb.com/) are currently supported.
  Vector stores allow for Retrieval-Augmented-Generation (RAG).
- **Grounding and source-citation:** Access to external documents via vector-stores
  allows for grounding and source-citation.
- **Observability, Logging, Lineage:** Langroid generates detailed logs of multi-agent interactions and
  maintains provenance/lineage of messages, so that you can trace back
  the origin of a message.
- **Tools/Plugins/Function-calling**: Langroid supports OpenAI's recently
  released [function calling](https://platform.openai.com/docs/guides/gpt/function-calling)
  feature. In addition, Langroid has its own native equivalent, which we
  call **tools** (also known as "plugins" in other contexts). Function
  calling and tools have the same developer-facing interface, implemented
  using [Pydantic](https://docs.pydantic.dev/latest/),
  which makes it very easy to define tools/functions and enable agents
  to use them. Benefits of using Pydantic are that you never have to write
  complex JSON specs for function calling, and when the LLM
  hallucinates malformed JSON, the Pydantic error message is sent back to
  the LLM so it can fix it!



Don't worry if some of these terms are not clear to you. 
The [Getting Started Guide](quick-start/index.md) and subsequent pages 
will help you get up to speed.
</file>

<file path="examples/basic/multi-agent-search-critic/tools.py">
from typing import List

import typer

import langroid as lr

app = typer.Typer()


class QuestionTool(lr.ToolMessage):
    request: str = "question_tool"
    purpose: str = "Ask a SINGLE <question> that can be answered from a web search."
    question: str

    @classmethod
    def examples(cls) -> List[lr.ToolMessage]:
        return [
            cls(question="Which superconductor material was discovered in 2023?"),
            cls(question="What AI innovation did Meta achieve in 2024?"),
        ]


class AnswerTool(lr.ToolMessage):
    request = "answer_tool"
    purpose = "Present the <answer> to a web-search question"
    answer: str


class FinalAnswerTool(lr.ToolMessage):
    request: str = "final_answer_tool"
    purpose: str = """
        Present the intermediate <steps> and 
        final <answer> to the user's original <query>.
        """
    query: str
    steps: str
    answer: str

    @classmethod
    def examples(cls) -> List["lr.ToolMessage"]:
        return [
            (
                "I want to show my reasoning steps, along with my final answer",
                cls(
                    query="was Plato mortal?",
                    steps="1. Man is mortal. 2. Plato was a man.",
                    answer="Plato was mortal.",
                ),
            ),
            cls(
                query="Who was president during the moon landing?",
                steps="1. The moon landing was in 1969. 2. Kennedy was president "
                "during 1969.",
                answer="Kennedy was president during the moon landing.",
            ),
        ]


class FeedbackTool(lr.ToolMessage):
    request: str = "feedback_tool"
    purpose: str = """
    Provide <feedback> on the user's answer. If the answer is valid based on the
    reasoning steps, then the feedback MUST be EMPTY
    """
    feedback: str
    suggested_fix: str

    @classmethod
    def examples(cls) -> List["lr.ToolMessage"]:
        return [
            # just example
            cls(feedback="This looks fine!", suggested_fix=""),
            # thought + example
            (
                "I want to provide feedback on the reasoning steps and final answer",
                cls(
                    feedback="""
                    The answer is invalid because the conclusion does not follow from the
                    steps. Please check your reasoning and try again.
                    """,
                    suggested_fix="Check reasoning and try again",
                ),
            ),
        ]
</file>

<file path="examples/basic/multi-agent-search-critic-no-orch/tools.py">
from typing import List

import typer

import langroid as lr

app = typer.Typer()


class QuestionTool(lr.ToolMessage):
    request: str = "question_tool"
    purpose: str = "Ask a SINGLE <question> that can be answered from a web search."
    question: str

    @classmethod
    def examples(cls) -> List[lr.ToolMessage]:
        return [
            cls(question="Which superconductor material was discovered in 2023?"),
            cls(question="What AI innovation did Meta achieve in 2024?"),
        ]


class AnswerTool(lr.ToolMessage):
    request = "answer_tool"
    purpose = "Present the <answer> to a web-search question"
    answer: str


class FinalAnswerTool(lr.ToolMessage):
    request: str = "final_answer_tool"
    purpose: str = """
        Present the intermediate <steps> and 
        final <answer> to the user's original <query>.
        """
    query: str
    steps: str
    answer: str

    @classmethod
    def examples(cls) -> List["lr.ToolMessage"]:
        return [
            (
                "I want to show my reasoning steps, along with my final answer",
                cls(
                    query="was Plato mortal?",
                    steps="1. Man is mortal. 2. Plato was a man.",
                    answer="Plato was mortal.",
                ),
            ),
            cls(
                query="Who was president during the moon landing?",
                steps="1. The moon landing was in 1969. 2. Kennedy was president "
                "during 1969.",
                answer="Kennedy was president during the moon landing.",
            ),
        ]


class FeedbackTool(lr.ToolMessage):
    request: str = "feedback_tool"
    purpose: str = """
    Provide <feedback> on the user's answer. If the answer is valid based on the
    reasoning steps, then the feedback MUST be EMPTY
    """
    feedback: str
    suggested_fix: str

    @classmethod
    def examples(cls) -> List["lr.ToolMessage"]:
        return [
            # just example
            cls(feedback="This looks fine!", suggested_fix=""),
            # thought + example
            (
                "I want to provide feedback on the reasoning steps and final answer",
                cls(
                    feedback="""
                    The answer is invalid because the conclusion does not follow from the
                    steps. Please check your reasoning and try again.
                    """,
                    suggested_fix="Check reasoning and try again",
                ),
            ),
        ]
</file>

<file path="examples/basic/2-agent-tools.py">
"""
2 Agent setup where Main agent asks a question, Helper has a few tools to help answer,
and for any question, Helper finishes after first use of any tool.

Run like this:

python3 examples/basic/2-agent-tools.py

When it waits for user input, try asking things like:

- capital of uganda?
    => Main answers
- polinsky of 4?
    => Main says do not know, handled by helper, who returns answer
- chichikov of 5?
    => Main says do not know, handled by helper, who returns answer
"""

from typing import Any

import langroid as lr
from langroid.agent.tools.orchestration import AgentDoneTool, ForwardTool


class MainChatAgent(lr.ChatAgent):
    def handle_message_fallback(self, msg: str | lr.ChatDocument) -> Any:
        """
        We'd be here if there were no recognized tools in the incoming msg.
        If this was from LLM, forward to user.
        """
        if isinstance(msg, lr.ChatDocument) and msg.metadata.sender == lr.Entity.LLM:
            return ForwardTool(agent="User")


main = MainChatAgent(
    lr.ChatAgentConfig(
        name="Main",
        system_message=f"""
        Help the user with their questions. When you don't know the answer, 
        simply say {lr.utils.constants.NO_ANSWER} and nothing else.
        Your Helper will attempt to handle the question, and send you back their
        answer, and you can present it to the user.   
        
        At the BEGINNING, ask the user what they need help with.
        """,
    )
)


class PolinskyTool(lr.ToolMessage):
    request = "polinsky"
    purpose = "To compute the polinsky transform of a <number>"
    number: int

    def handle(self) -> AgentDoneTool:
        p = 3 * self.number + 1
        return AgentDoneTool(content=f"The Polinsky transform of {self.number} is {p}")


class ChichikovTool(lr.ToolMessage):
    request = "chichikov"
    purpose = "To compute the Chichikov transform of a <number>"
    number: int

    def handle(self) -> AgentDoneTool:
        n = self.number**2
        return AgentDoneTool(content=f"The Chichikov transform of {self.number} is {n}")


helper = lr.ChatAgent(
    lr.ChatAgentConfig(
        name="Helper",
        system_message="""
        You have a few tools to help answer the user's questions. 
        Decide which tool to use, and send your request using the correct format 
        for the tool.
        """,
    )
)
helper.enable_message(PolinskyTool)
helper.enable_message(ChichikovTool)

main_task = lr.Task(main, interactive=False)
helper_task = lr.Task(helper, interactive=False)

main_task.add_sub_task(helper_task)

main_task.run()
</file>

<file path="examples/basic/chat-azure-async-client.py">
"""
Example showing how to use Langroid with Azure OpenAI and Entra ID
authentication by providing a custom client.

This is an async version of the example in chat-azure-client.py.

For more details see here:
https://langroid.github.io/langroid/notes/custom-azure-client/
https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/managed-identity

"""

import os

import azure.identity as azure_identity
import azure.identity.aio as azure_identity_async
from dotenv import load_dotenv
from openai import AsyncAzureOpenAI, AzureOpenAI

import langroid as lr
import langroid.language_models as lm

load_dotenv()


def get_azure_openai_client():
    return AzureOpenAI(
        api_version="2024-10-21",
        azure_endpoint=os.environ["AZURE_OPENAI_API_BASE"],
        azure_ad_token_provider=azure_identity.get_bearer_token_provider(
            azure_identity.DefaultAzureCredential(),
            "https://cognitiveservices.azure.com/.default",
        ),
    )


def get_azure_openai_async_client():
    return AsyncAzureOpenAI(
        api_version="2024-10-21",
        azure_endpoint=os.environ["AZURE_OPENAI_API_BASE"],
        azure_ad_token_provider=azure_identity_async.get_bearer_token_provider(
            azure_identity_async.DefaultAzureCredential(),
            "https://cognitiveservices.azure.com/.default",
        ),
    )


lm_config = lm.AzureConfig(
    azure_openai_client_provider=get_azure_openai_client,
    azure_openai_async_client_provider=get_azure_openai_async_client,
)


async def main():
    agent = lr.ChatAgent(lr.ChatAgentConfig(llm=lm_config))
    task = lr.Task(agent, interactive=False)
    response = await task.run_async(
        "Who is the president of the United States? Reply and end with DONE"
    )
    print(response)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
</file>

<file path="examples/basic/chat-azure-client.py">
"""
Example showing how to use Langroid with Azure OpenAI and Entra ID
authentication by providing a custom client.

NOTE: this example is ONLY meant for those who are trying to use a custom
Azure client, as in this scenario:
https://langroid.github.io/langroid/notes/custom-azure-client/
This NOT TYPICAL for most users, and should be ignored if you are not using such a
custom client.

For typical usage of Azure-deployed models with Langroid, see
the [`test_azure_openai.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_azure_openai.py) and
[`example/basic/chat.py`](https://github.com/langroid/langroid/blob/main/examples/basic/chat.py)


For an async version of this example, see chat-azure-async-client.py.

For more details see here:
https://langroid.github.io/langroid/notes/custom-azure-client/
https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/managed-identity

"""

import os

from azure.identity import DefaultAzureCredential, get_bearer_token_provider
from dotenv import load_dotenv
from openai import AzureOpenAI

import langroid as lr
import langroid.language_models as lm

load_dotenv()


def get_azure_openai_client():
    return AzureOpenAI(
        api_version="2024-10-21",
        azure_endpoint=os.environ["AZURE_OPENAI_API_BASE"],
        azure_ad_token_provider=get_bearer_token_provider(
            DefaultAzureCredential(),
            "https://cognitiveservices.azure.com/.default",
        ),
    )


lm_config = lm.AzureConfig(
    azure_openai_client_provider=get_azure_openai_client,
)

if __name__ == "__main__":
    agent = lr.ChatAgent(lr.ChatAgentConfig(llm=lm_config))
    task = lr.Task(agent, interactive=False)
    task.run("Who is the president of the United States? Reply and end with DONE")
</file>

<file path="examples/basic/chat-search-assistant-local.py">
"""
Version of chat-search-assistant.py that uses local LLMs.
Tested and works ok nous-hermes2-mixtral, but still has issues.

3-Agent system where:
- Assistant takes user's (complex) question, breaks it down into smaller pieces
    if needed
- Searcher takes Assistant's question, uses the Search tool to search the web
    (using DuckDuckGo), and returns a coherent answer to the Assistant.
- Critic takes Assistant's final answer, and provides feedback on it.

Once the Assistant thinks it has enough info to answer the user's question, it
says DONE and presents the answer to the user.

See also: chat-search for a basic single-agent search

python3 examples/basic/chat-search-assistant.py

There are optional args, especially note these:

-m <model_name>: to run with a different LLM model (default: gpt4-turbo)

For example try this question:

during which years did Beethoven live, and does his life overlap with that of Liszt?

You can specify a local in a few different ways, e.g. `-m local/localhost:8000/v1`
or `-m ollama/mistral` etc. See here how to use Langroid with local LLMs:
https://langroid.github.io/langroid/tutorials/local-llm-setup/


"""

from typing import List, Optional, Type

import typer
from dotenv import load_dotenv
from rich import print
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.tools.duckduckgo_search_tool import DuckduckgoSearchTool
from langroid.utils.configuration import Settings, set_global

app = typer.Typer()


class QuestionTool(lr.ToolMessage):
    request: str = "question_tool"
    purpose: str = "Ask a SINGLE <question> that can be answered from a web search."
    question: str

    @classmethod
    def examples(cls) -> List[lr.ToolMessage]:
        return [
            cls(question="Which superconductor material was discovered in 2023?"),
            cls(question="What AI innovation did Meta achieve in 2024?"),
        ]


class FinalAnswerTool(lr.ToolMessage):
    request: str = "final_answer_tool"
    purpose: str = """
        Present the intermediate <steps> and 
        final <answer> to the user's original query.
        """
    steps: str
    answer: str

    @classmethod
    def examples(cls) -> List["lr.ToolMessage"]:
        return [
            cls(
                steps="1. Man is mortal. 2. Plato was a man.",
                answer="Plato was mortal.",
            ),
            cls(
                steps="1. The moon landing was in 1969. 2. Kennedy was president "
                "during 1969.",
                answer="Kennedy was president during the moon landing.",
            ),
        ]


class FeedbackTool(lr.ToolMessage):
    request: str = "feedback_tool"
    purpose: str = "Provide <feedback> on the user's answer."
    feedback: str

    @classmethod
    def examples(cls) -> List["lr.ToolMessage"]:
        return [
            cls(feedback=""),
            cls(
                feedback="""
                The answer is invalid because the conclusion does not follow from the
                steps. Please check your reasoning and try again.
                """
            ),
        ]


class AssistantAgent(lr.ChatAgent):
    n_questions: int = 0  # how many questions in THIS round
    has_asked: bool = False  # has ANY question been asked
    original_query: str | None = None

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        if isinstance(msg, ChatDocument) and msg.metadata.sender == lr.Entity.USER:
            # either first query from user, or returned result from Searcher
            self.n_questions = 0  # reset search count

        if isinstance(msg, ChatDocument) and msg.metadata.sender == lr.Entity.LLM:
            if self.has_asked:
                return f"""
                You may have intended to use a tool, but your JSON format may be wrong.
                
                REMINDER: You must do one of the following:
                - If you are ready with the final answer to the user's ORIGINAL QUERY
                    [ Remember it was: {self.original_query} ],
                  then present your reasoning steps and final answer using the 
                  `final_answer_tool` in the specified JSON format.
                - If you still need to ask a question, then use the `question_tool`
                  to ask a SINGLE question that can be answered from a web search.
                """
            elif self.original_query is not None:
                return f"""
                You must ask a question using the `question_tool` in the specified format,
                to break down the user's original query: {self.original_query} into 
                smaller questions that can be answered from a web search.
                """

    def question_tool(self, msg: QuestionTool) -> str:
        self.n_questions += 1
        self.has_asked = True
        if self.n_questions > 1:
            # there was already a search, so ignore this one
            return ""
        # valid question tool: re-create it so Searcher gets it
        return msg.to_json()

    def final_answer_tool(self, msg: FinalAnswerTool) -> str:
        if not self.has_asked or self.n_questions > 1:
            # not yet asked any questions, or LLM is currently asking
            # a question (and this is the second one in this turn, and so should
            # be ignored), ==>
            # cannot present final answer yet (LLM may have hallucinated this json)
            return ""
        # valid final answer tool: PASS it on so Critic gets it
        return lr.utils.constants.PASS_TO + "Critic"

    def feedback_tool(self, msg: FeedbackTool) -> str:
        if msg.feedback == "":
            return lr.utils.constants.DONE
        else:
            return f"""
            Below is feedback about your answer. Take it into account to 
            improve your answer, and present it again using the `final_answer_tool`.
            
            FEEDBACK:
            
            {msg.feedback}
            """

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        if self.original_query is None:
            self.original_query = (
                message if isinstance(message, str) else message.content
            )
        result = super().llm_response(message)
        if result is None:
            return result
        # result.content may contain a premature DONE
        # (because weak LLMs tend to repeat their instructions)
        # We deem a DONE to be accidental if no search query results were received
        if not isinstance(message, ChatDocument) or not (
            message.metadata.sender_name == "Searcher"
        ):
            # no search results received yet, so should NOT say DONE
            if isinstance(result, str):
                return result.content.replace(lr.utils.constants.DONE, "")
            result.content = result.content.replace(lr.utils.constants.DONE, "")
            return result

        return result


class CriticAgent(lr.ChatAgent):
    def final_answer_tool(self, msg: FinalAnswerTool) -> str:
        # received from Assistant. Extract the components as plain text,
        # so that the Critic LLM can provide feedback
        return f"""
        The user has presented the following intermediate steps and final answer
        shown below. Please provide feedback using the `feedback_tool`.
        Remember to set the `feedback` field to an empty string if the answer is valid,
        otherwise give specific feedback on what the issues are and how the answer 
        can be improved.
        
        STEPS: {msg.steps}
        
        ANSWER: {msg.answer}
        """

    def feedback_tool(self, msg: FeedbackTool) -> str:
        # say DONE and PASS to the feedback goes back to Assistant to handle
        return lr.utils.constants.DONE + " " + lr.utils.constants.PASS


class SearcherAgentConfig(lr.ChatAgentConfig):
    search_tool_class: Type[lr.ToolMessage]


class SearcherAgent(lr.ChatAgent):
    n_searches: int = 0
    curr_query: str | None = None

    def __init__(self, config: SearcherAgentConfig):
        super().__init__(config)
        self.config: SearcherAgentConfig = config
        self.enable_message(config.search_tool_class)
        self.enable_message(QuestionTool, use=False, handle=True)

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        if (
            isinstance(msg, ChatDocument)
            and msg.metadata.sender == lr.Entity.LLM
            and self.n_searches == 0
        ):
            search_tool_name = self.config.search_tool_class.default_value("request")
            return f"""
            You forgot to use the web search tool to answer the 
            user's question : {self.curr_query}.
            REMEMBER - you must ONLY answer the user's questions based on 
             results from a web-search, and you MUST NOT ANSWER them yourself.
             
            Please use the `{search_tool_name}` tool 
            using the specified JSON format, then compose your answer.
            """

    def question_tool(self, msg: QuestionTool) -> str:
        self.curr_query = msg.question
        search_tool_name = self.config.search_tool_class.default_value("request")
        return f"""
        User asked this question: {msg.question}.
        Perform a web search using the `{search_tool_name}` tool
        using the specified JSON format, to find the answer.
        """

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        if (
            isinstance(message, ChatDocument)
            and message.metadata.sender == lr.Entity.AGENT
            and self.n_searches > 0
        ):
            # must be search results from the web search tool,
            # so let the LLM compose a response based on the search results
            self.n_searches = 0  # reset search count

            result = super().llm_response_forget(message)
            # Augment the LLM's composed answer with a helpful nudge
            # back to the Assistant
            result.content = f"""
            Here are the web-search results for the question: {self.curr_query}.
            ===
            {result.content}
            ===
            Decide if you want to ask any further questions, for the 
            user's original question.             
            """
            self.curr_query = None
            return result

        # Handling query from user (or other agent)
        result = super().llm_response_forget(message)
        if result is None:
            return result
        tools = self.get_tool_messages(result)
        if all(not isinstance(t, self.config.search_tool_class) for t in tools):
            # LLM did not use search tool;
            # Replace its response with a placeholder message
            # and the agent fallback_handler will remind the LLM
            result.content = "Did not use web-search tool."
            return result

        self.n_searches += 1
        # result includes a search tool, but may contain DONE in content,
        # so remove that
        result.content = result.content.replace(lr.utils.constants.DONE, "")
        return result


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )
    print(
        """
        [blue]Welcome to the Web Search Assistant chatbot!
        I will try to answer your complex questions. 
        
        Enter x or q to quit at any point.
        """
    )
    load_dotenv()

    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,
        temperature=0.2,
        max_output_tokens=500,
        timeout=45,
    )

    assistant_config = lr.ChatAgentConfig(
        system_message="""
        You are a resourceful assistant, able to think step by step to answer
        complex questions from the user. You must break down complex questions into
        simpler questions that can be answered by a web search. You must ask me 
        (the user) each question ONE BY ONE, using the `question_tool` in
         the specified format, and I will do a web search and send you
        a brief answer. Once you have enough information to answer my original
        (complex) question, you MUST present your INTERMEDIATE STEPS and FINAL ANSWER
        using the `final_answer_tool` in the specified JSON format.
        You will then receive FEEDBACK from the Critic, and if needed
        you should try to improve your answer based on this feedback.
        """,
        llm=llm_config,
        vecdb=None,
    )
    assistant_agent = AssistantAgent(assistant_config)
    assistant_agent.enable_message(QuestionTool)
    assistant_agent.enable_message(FinalAnswerTool)
    assistant_agent.enable_message(FeedbackTool, use=False, handle=True)

    search_tool_handler_method = DuckduckgoSearchTool.default_value("request")

    search_agent_config = SearcherAgentConfig(
        search_tool_class=DuckduckgoSearchTool,
        llm=llm_config,
        vecdb=None,
        system_message=f"""
        You are a web-searcher. For ANY question you get, you must use the
        `{search_tool_handler_method}` tool/function-call to get up to 5 results.
        Once you receive the results, you must compose a CONCISE answer 
        based on the search results and say DONE and show the answer to me,
        along with references, in this format:
        DONE [... your CONCISE answer here ...]
        SOURCES: [links from the web-search that you used]
        
        EXTREMELY IMPORTANT: DO NOT MAKE UP ANSWERS, ONLY use the web-search results.
        """,
    )
    search_agent = SearcherAgent(search_agent_config)

    assistant_task = lr.Task(
        assistant_agent,
        name="Assistant",
        llm_delegate=True,
        single_round=False,
        interactive=False,
    )
    search_task = lr.Task(
        search_agent,
        name="Searcher",
        llm_delegate=True,
        single_round=False,
        interactive=False,
    )

    critic_agent_config = lr.ChatAgentConfig(
        llm=llm_config,
        vecdb=None,
        system_message="""
        You excel at logical reasoning and combining pieces of information.
        The user will send you a summary of the intermediate steps and final answer.
        You must examine these and provide feedback to the user, using the 
        `feedback_tool`, as follows:
        - If you think the answer is valid, 
            simply set the `feedback` field to an empty string "".
        - Otherwise set the `feedback` field to a reason why the answer is invalid,
            and suggest how the user can improve the answer.
        """,
    )
    critic_agent = CriticAgent(critic_agent_config)
    critic_agent.enable_message(FeedbackTool)
    critic_agent.enable_message(FinalAnswerTool, use=False, handle=True)
    critic_task = lr.Task(
        critic_agent,
        name="Critic",
        interactive=False,
    )
    assistant_task.add_sub_task([search_task, critic_task])
    question = Prompt.ask("What do you want to know?")
    assistant_task.run(question)


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/tool-custom-handler.py">
"""
Short example of using `_handler` attribute in ToolMessage to define
custom name for `Agent` tool handler.

Run like this:

python3 examples/basic/tool-custom-handler.py

"""

import requests

import langroid as lr
from langroid.pydantic_v1 import Field


class CountryLanguageTool(lr.agent.ToolMessage):
    request: str = "country_language_tool"
    purpose: str = "To determine <language> spoken in specific country."
    country_name: str = Field(..., description="country name")
    _handler: str = "country_tools_handler"


class CountryPopulationTool(lr.agent.ToolMessage):
    request: str = "country_population_tool"
    purpose: str = "To determine <population> of specific country."
    country_name: str = Field(..., description="country name")
    _handler: str = "country_tools_handler"


class CountryAreaTool(lr.agent.ToolMessage):
    request: str = "country_area_tool"
    purpose: str = "To determine <area> of specific country."
    country_name: str = Field(..., description="country name")
    _handler: str = "country_tools_handler"


class AssistantAgent(lr.ChatAgent):
    def country_tools_handler(self, tool: lr.agent.ToolMessage):
        response = requests.get(
            f"https://restcountries.com/v3.1/name/{tool.country_name}", timeout=5
        )
        if not response.ok:
            return "invalid country name"

        try:
            data = response.json()[0]
        except (ValueError, IndexError):
            return "invalid response"

        match tool.request:
            case "country_language_tool":
                language = ", ".join(data["languages"].values())
                return language
            case "country_population_tool":
                population_millions = data["population"] / 1e6
                return f"{population_millions:.1f} million people"
            case "country_area_tool":
                area_sq_km = data["area"] / 1e6
                return f"{area_sq_km:.1f} million sq. km"

        return "invalid tool name"


def make_assistant_task() -> lr.Task:
    llm_config = lr.language_models.OpenAIGPTConfig(
        temperature=0.2, max_output_tokens=250
    )

    assistant_config = lr.ChatAgentConfig(
        system_message="""
        You are a helpful assistant helping users with country-related questions.

        You know answers to the following questions:
          - what is the <language> spoken in specific country?
          - what is <population> of specific country?
          - what is <areay> of specific country?

        Ask user for the country name and information that he is interested in.
        Then use the appropriate tool to find the answer.
        """,
        llm=llm_config,
    )

    assistant_agent = AssistantAgent(assistant_config)
    assistant_agent.enable_message(CountryLanguageTool)
    assistant_agent.enable_message(CountryPopulationTool)
    assistant_agent.enable_message(CountryAreaTool)

    assistant_task = lr.Task(agent=assistant_agent, interactive=True)
    return assistant_task


if __name__ == "__main__":
    task = make_assistant_task()
    task.run()
</file>

<file path="examples/chainlit/non-callback/README.md">
## Chainlit examples without using Callbacks

These are all deprecated, but retaining here for reference.
The much better way to use Langroid Agents/Tasks with Chainlit is to use 
the `ChainlitAgentCallbacks` and `ChainlitTaskCallbacks` classes.
</file>

<file path="examples/chainlit/books.txt">
Book Title: Crime and Redemption by Filidor Dostoyevski, released in 1877, offers a
riveting exploration of guilt, morality, and the possibility of spiritual rebirth.
Set against the bleak backdrop of 19th century Russia, it follows the tormented journey
of Rodion Romanovich Raskolnikov, a young man driven to murder and subsequently
haunted by his actions. Through Raskolnikov's story, Dostoyevski delves deep into the
human psyche, presenting a timeless narrative of human imperfection and the
redemptive power.

Book Title: The Siblings Karamazoff by Fyodar Dostoyevskiy, published in 1881,
weaves a complex narrative around the ethical battles and spiritual dilemmas
faced by the Karamazoff family. Set in the heart of Russia, it explores themes of faith,
doubt, and the nature of free will through the intersecting lives of three brothers,
each embodying different facets of humanity. Dostoyevskiy masterfully crafts a tale of
familial bonds, existential questioning, and the search for truth in a morally ambiguous
world.
</file>

<file path="examples/chainlit/chainlit.md">
# Welcome to Langroid 👋

![Langroid](public/langroid-card.png)

---
When it is your turn to enter a message, you can do one of two things:
- write `c` to tell the agent to continue,
    - This is provided as a safeguard against infinite loops, or to prevent a large 
    amount of text to be sent to the LLM (which can be costly + slow). 
    If you simply want to continue with normal operation, just enter c.
- write a response, question or feedback to the agent, depending on context.
</file>

<file path="examples/chainlit/cypher_message.py">
CONSTRUCT_DEPENDENCY_GRAPH = """
        with "{package_type}" as system, "{package_name}" as name, "{package_version}" as version

        call apoc.load.json("https://api.deps.dev/v3alpha/systems/"+system+"/packages/"
                            +name+"/versions/"+version+":dependencies")
        yield value as r
        
        call {{ with r
                unwind r.nodes as package
                merge (p:Package:PyPi {{name: package.versionKey.name, version: package.versionKey.version}})
                return collect(p) as packages
        }}
        call {{ with r, packages
            unwind r.edges as edge
            with packages[edge.fromNode] as from, packages[edge.toNode] as to, edge
            merge (from)-[rel:DEPENDS_ON]->(to) ON CREATE SET rel.requirement 
            = edge.requirement
            return count(*) as numRels
        }}
        
        match (root:Package:PyPi) where root.imported is null
        set root.imported = true
        with "{package_type}" as system, root.name as name, root.version as version
        call apoc.load.json("https://api.deps.dev/v3alpha/systems/"+system+"/packages/"
                            +name+"/versions/"+version+":dependencies")
        yield value as r
        
        call {{ with r
                unwind r.nodes as package
                merge (p:Package:PyPi {{name: package.versionKey.name, version: package.versionKey.version}})
                return collect(p) as packages
        }}
        call {{ with r, packages
                unwind r.edges as edge
                with packages[edge.fromNode] as from, packages[edge.toNode] as to, edge
                merge (from)-[rel:DEPENDS_ON]->(to) ON CREATE SET 
                rel.requirement = edge.requirement
                return count(*) as numRels
        }}
        return size(packages) as numPackages, numRels
        """
</file>

<file path="examples/chainlit/README.md">
# Running the chainlit apps

In your Python virtual env, ensure you have 
installed `langroid` with the `chainlit` extra using, e.g.

```bash
pip install langroid[chainlit]
```

Or if you already have `langroid` installed, you can install the `chainlit` extra using:

```bash
pip install chainlit
```

To check that `chainlit` is installed, run:

```bash
chainlit hello
```

and you should see the `hello app` open in your browser.


## General usage
See [chainlit docs](https://docs.chainlit.io/get-started/overview) to learn the basics.

Generally speaking to use Langroid `ChatAgents` or `Tasks` with 
`chainlit`, you simply need to wrap your `ChatAgent` or `Task` in the appropriate 
"callback injection" class, e.g. either
```
import langroid as lr
agent = lr.ChatAgent(...)
lr.ChainlitAgentCallbacks(agent) 
```
or 
```
task = lr.Task(...)
lr.ChainlitTaskCallbacks(task) 
```
The `ChainlitTaskCallbacks` class recursively injects callbacks into 
`ChatAgents` belonging to the task, and any sub-tasks.
The callback classes are defined 
[here](https://github.com/langroid/langroid/blob/main/langroid/agent/callbacks/chainlit.py).

You also need to write an `on_chat_start` function and possibly an `on_message`
function to start off the app. See the examples to learn more.

## Configuration

⚠️ It is very important that you download the `.chainlit` directory from the `langroid` repo
(or the `langroid-examples` repo) and place it *in the directory from
which you run the `chainlit` command*. E.g. if you run the `chainlit` command from the
root of the repo, then the `.chainlit` directory should be placed there.
This directory contains various customizations, but most importantly, it contains the
file `translations/en-US.json`, where the default placeholder text in the chat box is defined
(as described below as well). If you've correctly placed this directory, this default text should say
something like 
```
Ask, respond, give feedback, or just 'c' for continue...
```

You can configure some aspects of the chainlit app via these files,
which are included in this repo at the root level (see
the Chainlit [customization docs](https://docs.chainlit.io/customisation/overview) for more details):
- `.chainlit/config.toml` to customize project, features, UI (see [here](https://docs.chainlit.io/backend/config/overview))
- `.chainlit/translations/en-US.json` for various ["translations"](https://docs.chainlit.io/customisation/translation) and language-specific
   customizations. In particular, the default text in the input box is customized here.
- `chainlit.md`, which contains the initial "Readme" content
- [Logo, favicons](https://docs.chainlit.io/customisation/custom-logo-and-favicon) should be placed in a directory
  named `public` adjacent to the apps. 

Depending on how you organize your apps, you may need to run the `chainlit` command 
from the directory where the above customization files/dirs are placed.
</file>

<file path="examples/chainlit/test-step-nesting.py">
"""
Test whether the current chainlit version shows nested steps as expected.
Note that this does NOT show what you'd expect, due to breaking changes in Chainlit.

Two things to look for:
(1) are all types of steps shown, or only type = "tool"?
(2) when step B has parent_id pointing to Step A, we want to see Step B shown:
    - nested under Step A
    - shown in a chronologically correct order, i.e. if Step A says "hello",
        then calls Step B, then step B should be shown AFTER the "hello" message from A.

(1) is fine in chainlit 1.1.202, i.e. all steps are shown whether tools or not
    but in 1.1.300, only type = "tool" steps are shown.
    For example if the `type` params are other than "tool" in the example below,
    the steps will not show up in the chat.
(2) is broken in 1.1.202 -- the sub-step is correctly nested BUT always shows up
    at the TOP, and can look very unintuitive, as this example shows.
"""

import chainlit as cl


@cl.on_chat_start
async def on_chat_start():
    a_step = cl.Step(name="A", type="tool")
    a_step.output = "asking B"
    await a_step.send()

    b_step = cl.Step(
        name="B",
        parent_id=a_step.id,
        type="tool",
    )
    b_step.output = "asking C"
    await b_step.send()

    c_step = cl.Step(
        name="C",
        parent_id=b_step.id,
        type="tool",
    )
    c_step.output = "C answered!"
    await c_step.send()
</file>

<file path="examples/docqa/streamlit-app/README.md">
# Basic example: chat with a document using Langroid with local LLM or OpenAI LLM

Bare-bones example of an app that combines:
- Langroid `DocChatAgent` for RAG
- StreamLit for webapp/UI
to let you ask questions about the contents of a file (pdf, txt, docx, md, html).

## Instructions
Run this from the root of the `langroid-examples` repo. Assuming you already have a virtual env in 
which you have installed `langroid`, the only additional requirement is to run:

``` 
pip install streamlit
```
Then run the application like this:
```
streamlit run examples/docqa/streamlit-app/app.py
```
In the sidebar you can specify a local LLM, or leave it blank to use the OpenAI 
GPT4-Turbo model. 


## Limitations

- Streaming does not currently work
- Conversation is not accumulated
- Source, Extract evidence-citation is only displayed in terminal/console, to reduce clutter in the UI.

## Credits
Code adapted from Prashant Kumar's example in [`lancedb/vectordb-recipies`](https://github.com/lancedb/vectordb-recipes)
</file>

<file path="examples/docqa/streamlit-app/requirements.txt">
langroid
streamlit
</file>

<file path="examples/docqa/books.txt">
Book Title: Crime and Redemption by Filidor Dostoyevski, released in 1877, offers a
riveting exploration of guilt, morality, and the possibility of spiritual rebirth.
Set against the bleak backdrop of 19th century Russia, it follows the tormented journey
of Rodion Romanovich Raskolnikov, a young man driven to murder and subsequently
haunted by his actions. Through Raskolnikov's story, Dostoyevski delves deep into the
human psyche, presenting a timeless narrative of human imperfection and the
redemptive power.

Book Title: The Siblings Karamazoff by Fyodar Dostoyevskiy, published in 1881,
weaves a complex narrative around the ethical battles and spiritual dilemmas
faced by the Karamazoff family. Set in the heart of Russia, it explores themes of faith,
doubt, and the nature of free will through the intersecting lives of three brothers,
each embodying different facets of humanity. Dostoyevskiy masterfully crafts a tale of
familial bonds, existential questioning, and the search for truth in a morally ambiguous
world.
</file>

<file path="examples/docqa/langroid-lancedb-rag-movies.ipynb">
{
 "nbformat": 4,
 "nbformat_minor": 0,
 "metadata": {
  "colab": {
   "provenance": [],
   "authorship_tag": "ABX9TyPtHa1bpv1qlH9QN6TKgN33",
   "include_colab_link": true
  },
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3"
  },
  "language_info": {
   "name": "python"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "1571259796a64a398b942576a899ef8a": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "DropdownModel",
     "model_module_version": "1.5.0",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DropdownModel",
      "_options_labels": [
       "Action",
       "Adventure",
       "Biography",
       "Comedy",
       "Crime",
       "Documentary",
       "Drama",
       "Fantasy",
       "History",
       "Horror",
       "Music",
       "Musical",
       "Mystery",
       "Romance",
       "Sci-Fi",
       "Sport",
       "Thriller",
       "War",
       "Western"
      ],
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "DropdownView",
      "description": "Choose a genre:",
      "description_tooltip": null,
      "disabled": false,
      "index": 3,
      "layout": "IPY_MODEL_ef9065ee3d1741f594eb8dc97f9f3d07",
      "style": "IPY_MODEL_7f739e3ffaa24b2abde6d6d0b52ab003"
     }
    },
    "ef9065ee3d1741f594eb8dc97f9f3d07": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "model_module_version": "1.2.0",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "7f739e3ffaa24b2abde6d6d0b52ab003": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "DescriptionStyleModel",
     "model_module_version": "1.5.0",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    }
   }
  }
 },
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "view-in-github",
    "colab_type": "text"
   },
   "source": [
    "<a href=\"https://colab.research.google.com/github/langroid/langroid/blob/main/examples/docqa/langroid-lancedb-rag-movies.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "# Retrieval-Augmented Analytics with Langroid + LanceDB\n",
    "\n",
    "\n",
    "Say you are working with a large dataset of movie ratings. Let's think about\n",
    "how to answer questions like this:\n",
    "> What is the highest rated Comedy movie about college students made after 2010?\n",
    "\n",
    "To answer this kind of question, we need:\n",
    "- filtering (on genre, year),\n",
    "- retrieval (semantic/lexical search on 'college students'),\n",
    "- computation (highest rated), and\n",
    "- LLM-based generation of the final answer.\n",
    "\n",
    "Of course, we'd like to automate the filtering and computation steps -- but how?\n",
    "\n",
    "\n",
    "We could use an LLM to generate a **Query Plan** for this --\n",
    "provided the underlying data store supports:\n",
    "- a filtering language \"known\" to LLMs (like SQL), and\n",
    "- a computation language \"known\" to LLMs (like a Pandas dataframe expression).\n",
    "\n",
    "This is where [LanceDB](https://github.com/lancedb/lancedb) (the default vector-db in Langroid) comes in:\n",
    "it's a versatile, highly performant, serverless vector-database that\n",
    "supports all of these functions within the same storage system and API:\n",
    "- Fast Full-text search (so you can do lexical search in the same store\n",
    "  where you do vector/semantic-search)\n",
    "- SQL-like metadata filtering\n",
    "- Pandas dataframe interop, so you can ingest dataframes and do pandas computations.\n",
    "**bold text**\n",
    "Leveraging Langroid's powerful Multi-Agent and tools orchestration, we built a\n",
    "3-Agent system consisting of:\n",
    "- Query Planner: Takes a user's query (like the above) and generates a Query Plan as a tool/function\n",
    "  consisting of: (a) a SQL-like filter, (b) a possibly rephrased query, and (c) an optional Pandas computation.\n",
    "- A RAG Agent (powered by LanceDB) that executes the query plan combining\n",
    "  filtering, RAG, lexical search, and optional Pandas computation.\n",
    "- A Query Plan Critic that examines the Query Plan and the RAG response, and\n",
    "  suggests improvements to the Query Planner, if any.\n",
    "\n",
    "This system can answer questions such as the above.\n",
    "You can try it out in this notebook, with a dataset of\n",
    "IMDB movie ratings.\n",
    "\n",
    "If you want to run it as a script, see here:\n",
    "https://github.com/langroid/langroid-examples/blob/main/examples/docqa/lance-rag-movies.py\n",
    "\n"
   ],
   "metadata": {
    "id": "b9fHPojfnbPy"
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Install, setup, import"
   ],
   "metadata": {
    "id": "psOMvEL0Gekz"
   }
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "A8-Y_YPZutn6",
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "outputId": "ae2c9f85-c790-4c0f-80fc-cabd56f8a917"
   },
   "source": [
    "# Silently install, suppress all output (~2-4 mins)\n",
    "!pip install -q --upgrade langroid &> /dev/null\n",
    "!pip show langroid"
   ],
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [
    "# various unfortunate things that need to be done to\n",
    "# control colab notebook behavior.\n",
    "\n",
    "# (a) output width\n",
    "\n",
    "from IPython.display import HTML, display\n",
    "\n",
    "def set_css():\n",
    "  display(HTML('''\n",
    "  <style>\n",
    "    pre {\n",
    "        white-space: pre-wrap;\n",
    "    }\n",
    "  </style>\n",
    "  '''))\n",
    "get_ipython().events.register('pre_run_cell', set_css)\n",
    "\n",
    "# (b) logging related\n",
    "import logging\n",
    "logging.basicConfig(level=logging.ERROR)\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import logging\n",
    "for logger_name in logging.root.manager.loggerDict:\n",
    "    logger = logging.getLogger(logger_name)\n",
    "    logger.setLevel(logging.ERROR)\n",
    "\n",
    "# (c) allow async ops in colab\n",
    "!pip install nest-asyncio\n",
    "import nest_asyncio\n",
    "nest_asyncio.apply()\n"
   ],
   "metadata": {
    "id": "rWwH6duUzAC6",
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "outputId": "3947fda6-7de1-418e-eeb2-7717ef374c27"
   },
   "execution_count": 2,
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [
    "import pandas as pd\n",
    "from langroid.agent.special.doc_chat_agent import DocChatAgentConfig\n",
    "from langroid.agent.special.lance_doc_chat_agent import LanceDocChatAgent\n",
    "from langroid.agent.special.lance_rag.lance_rag_task import LanceRAGTaskCreator\n",
    "\n",
    "from langroid.utils.configuration import settings\n",
    "from langroid.embedding_models.models import OpenAIEmbeddingsConfig\n",
    "from langroid.vector_store.lancedb import LanceDBConfig\n",
    "settings.cache_type = \"fakeredis\"\n",
    "settings.notebook = True"
   ],
   "metadata": {
    "id": "A5N0NQwc3jX_",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 17
    },
    "outputId": "311978cb-f35e-40db-d05b-a475006db2ae"
   },
   "execution_count": 22,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### OpenAI API Key (Needs GPT4-TURBO)"
   ],
   "metadata": {
    "id": "j-6vNfKW9J7b"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "# OpenAI API Key: Enter your key in the dialog box that will show up below\n",
    "# NOTE: colab often struggles with showing this input box,\n",
    "# if so, try re-running the above cell and then this one,\n",
    "# or simply insert your API key in this cell, though it's not ideal.\n",
    "\n",
    "import os\n",
    "\n",
    "from getpass import getpass\n",
    "\n",
    "os.environ['OPENAI_API_KEY'] = getpass('Enter your GPT4-Turbo-capable OPENAI_API_KEY key:', stream=None)\n",
    "\n",
    "\n"
   ],
   "metadata": {
    "id": "uvTODlZv3yyT",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "outputId": "7b9e7857-d030-4175-a2e3-551a5d807611"
   },
   "execution_count": 4,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Get IMDB ratings & descriptions data"
   ],
   "metadata": {
    "id": "TNsZdOjmQdgx"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "# (1) Get the movies dataset\n",
    "\n",
    "import requests\n",
    "file_url = \"https://raw.githubusercontent.com/langroid/langroid-examples/main/examples/docqa/data/movies/IMDB.csv\"\n",
    "response = requests.get(file_url)\n",
    "with open('movies.csv', 'wb') as file:\n",
    "    file.write(response.content)\n",
    "\n"
   ],
   "metadata": {
    "id": "fegAio3kpgoo",
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 17
    },
    "outputId": "140daf33-e39d-403e-c5f1-f8225fe2ad10"
   },
   "execution_count": 5,
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [
    " print(\n",
    "        \"\"\"\n",
    "        Welcome to the IMDB Movies chatbot!\n",
    "        This dataset has around 130,000 movie reviews, with these columns:\n",
    "\n",
    "        movie, genre, runtime, certificate, rating, stars,\n",
    "        description, votes, director.\n",
    "\n",
    "        To keep things speedy, we'll restrict the dataset to movies\n",
    "        of a specific genre that you can choose.\n",
    "        \"\"\"\n",
    "    )"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 191
    },
    "id": "J_Mv32fpOhgH",
    "outputId": "305849bf-0eb4-45c3-bce7-6839462c793c"
   },
   "execution_count": 6,
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [
    "from ipywidgets import Dropdown\n",
    "genres = [\n",
    "          \"Action\",\n",
    "          \"Adventure\",\n",
    "          \"Biography\",\n",
    "          \"Comedy\",\n",
    "          \"Crime\",\n",
    "          \"Documentary\",\n",
    "          \"Drama\",\n",
    "          \"Fantasy\",\n",
    "          \"History\",\n",
    "          \"Horror\",\n",
    "          \"Music\",\n",
    "          \"Musical\",\n",
    "          \"Mystery\",\n",
    "          \"Romance\",\n",
    "          \"Sci-Fi\",\n",
    "          \"Sport\",\n",
    "          \"Thriller\",\n",
    "          \"War\",\n",
    "          \"Western\",\n",
    "      ]\n",
    "dropdown = Dropdown(options=genres, value=genres[0], description=\"Choose a genre:\", disabled=False)\n",
    "display(dropdown)\n",
    "genre = dropdown.value"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 49,
     "referenced_widgets": [
      "1571259796a64a398b942576a899ef8a",
      "ef9065ee3d1741f594eb8dc97f9f3d07",
      "7f739e3ffaa24b2abde6d6d0b52ab003"
     ]
    },
    "id": "eRNHcFHALi67",
    "outputId": "8e0936cd-7522-438c-afda-39717affa513"
   },
   "execution_count": 7,
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [
    "# READ IN AND CLEAN THE DATA\n",
    "import pandas as pd\n",
    "df = pd.read_csv(\"movies.csv\")\n",
    "\n",
    "def clean_votes(value):\n",
    "    \"\"\"Clean the votes column\"\"\"\n",
    "    # Remove commas and convert to integer, if fails return 0\n",
    "    try:\n",
    "        return int(value.replace(\",\", \"\"))\n",
    "    except ValueError:\n",
    "        return 0\n",
    "\n",
    "# Clean the 'votes' column\n",
    "df[\"votes\"] = df[\"votes\"].fillna(\"0\").apply(clean_votes)\n",
    "\n",
    "# Clean the 'rating' column\n",
    "df[\"rating\"] = df[\"rating\"].fillna(0.0).astype(float)\n",
    "\n",
    "# Replace missing values in all other columns with '??'\n",
    "df.fillna(\"??\", inplace=True)\n",
    "df[\"description\"].replace(\"\", \"unknown\", inplace=True)\n",
    "\n",
    "# get the rows with selected genre\n",
    "df = df[df[\"genre\"].str.contains(genre)]\n",
    "\n",
    "print(\n",
    "    f\"\"\"\n",
    "[blue]There are {df.shape[0]} movies in {genre} genre, hang on while I load them...\n",
    "\"\"\"\n",
    ")\n",
    "# sample 1000 rows for faster testing\n",
    "df = df.sample(1000)"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 69
    },
    "id": "oBpuyfowOE7a",
    "outputId": "273e7074-2588-482d-b006-d9796f270d7c"
   },
   "execution_count": 8,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Set up LanceDB Vector-DB and LanceDocChatAgent"
   ],
   "metadata": {
    "id": "5rUPu_WVQprG"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "# Config LanceDB vector database\n",
    "import shutil\n",
    "db_dir = \".lancedb/data\"\n",
    "shutil.rmtree(db_dir)\n",
    "ldb_cfg = LanceDBConfig(\n",
    "    collection_name=\"chat-lance-imdb\",\n",
    "    replace_collection=True,\n",
    "    storage_path=db_dir,\n",
    "    embedding=OpenAIEmbeddingsConfig()\n",
    ")"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 17
    },
    "id": "hPDrNYNzLJMt",
    "outputId": "6cd7f681-cedc-450e-baa8-5aab3fdd1389"
   },
   "execution_count": 17,
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [
    "# configure, create LanceDocChatAgent\n",
    "cfg = DocChatAgentConfig(\n",
    "        vecdb=ldb_cfg,\n",
    "        show_stats=False,\n",
    "        add_fields_to_content=[\"movie\", \"genre\", \"certificate\", \"stars\", \"rating\"],\n",
    "        filter_fields=[\"genre\", \"certificate\", \"rating\"],\n",
    "    )\n",
    "agent = LanceDocChatAgent(cfg)\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 52
    },
    "id": "SXpnQCV4MF4T",
    "outputId": "82040764-a60c-418d-cfaa-7a1711a9ac14"
   },
   "execution_count": 18,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Ingest data into LanceDocChatAgent"
   ],
   "metadata": {
    "id": "gArmf8GhQxC-"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "# Ingest the data into LanceDocChatAgent\n",
    "agent.ingest_dataframe(df, content=\"description\", metadata=[])\n",
    "df_description = agent.df_description\n",
    "\n",
    "# inform user about the df_description, in blue\n",
    "print(\n",
    "    f\"\"\"\n",
    "Here's a description of the DataFrame that was ingested:\n",
    "{df_description}\n",
    "\"\"\"\n",
    ")"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 416
    },
    "id": "JttFhOw-MSX9",
    "outputId": "a1279c79-3574-4c69-ec47-15cb1aa4e57f"
   },
   "execution_count": 19,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Create, run a 3-agent system to handle user queries\n"
   ],
   "metadata": {
    "id": "BZcvWNXDO4gt"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "task = LanceRAGTaskCreator.new(agent, interactive=True)\n",
    "\n",
    "task.run(\"Can you help with some questions about these movies?\")"
   ],
   "metadata": {
    "id": "nVrqsGNFOyG4"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [],
   "metadata": {
    "id": "xOTmfjXjPBn4"
   },
   "execution_count": null,
   "outputs": []
  }
 ]
}
</file>

<file path="examples/docqa/lease.txt">
EX-10 2 elmonteleaseforfiling.htm MATERIAL CONTRACT
COMMERCIAL LEASE AGREEMENT



THIS LEASE AGREEMENT is made and entered into on December 1, 2013, by and between Temple CB, LLC, whose address is 4350 Temple City Boulevard, El Monte, California 91731 (hereinafter referred to as "Landlord"), and Okra Energy, Inc., whose address is 4350 Temple City Boulevard, El Monte, California 91731 (hereinafter referred to as "Tenant").



ARTICLE I - GRANT OF LEASE



Landlord, in consideration of the rents to be paid and the covenants and agreements to be performed and observed by the Tenant, does hereby lease to the Tenant and the Tenant does hereby lease and take from the Landlord the property described in Exhibit "A" attached hereto and by reference made a part hereof (the "Leased Premises"), together with, as part of the parcel, all improvements located thereon.



ARTICLE II - LEASE TERM



Section l.  Term of Lease.  The term of this Lease shall begin on the Commencement Date, as defined in Section 2 of this Article II, and shall terminate on May 31, 2020 ("the Termination Date"); provided, however, that at the option of Tenant, Tenant may renew this Lease for five additional successive one- year terms at a Monthly Rent of $100,000 per month, provided that notice of such renewal is given in writing no less than 120 days prior to the Termination Date or the expiration of any one-year renewal term. Tenant may at any time cancel this Lease and terminate all of its obligations hereunder by the payment of $300,000, plus all other amounts then due under this Lease.



Section 2.  Commencement Date. The "Commencement Date" shall mean  December 1, 2013.



ARTICLE III - EXTENSIONS



The parties hereto may elect to extend this Agreement upon such terms and conditions as may be agreed upon in writing and signed by the parties at the time of any such extension.



ARTICLE IV - DETERMINATION OF RENT



Section 1. Monthly Rent: The Tenant agrees to pay the Landlord and the Landlord agrees to accept, during the term hereof, at such place as the Landlord shall from time to time direct by notice to the Tenant, monthly rent of $100,000.


Section 2.  Late Fee.  A late fee in the amount of 5% of the Monthly Rent shall be assessed if payment is not postmarked or received by Landlord on or before the tenth day of each month.



ARTICLE V - SECURITY DEPOSIT



The Tenant has deposited with the Landlord the sum of Twenty Thousand Dollars ($20,000.00) as security for the full and faithful performance by the Tenant of all the terms of this lease required to be performed by the Tenant. Such sum shall be returned to the Tenant after the expiration of this lease, provided the Tenant has fully and faithfully carried out all of its terms. In the event of a bona fide sale of the property of which the leased premises are a part, the Landlord shall have the right to transfer the security to the purchaser to be held under the terms of this lease, and the Landlord shall be released from all liability for the return of such security to the Tenant.



ARTICLE VI - TAXES



Section l.  Personal Property Taxes.  The Tenant shall be liable for all taxes levied against any leasehold interest of the Tenant or personal property and trade fixtures owned or placed by the Tenant in the Leased Premises.



Section 2.  Real Estate Taxes.  During the continuance of this lease Landlord shall deliver to Tenant a copy of any real estate taxes and assessments against the Leased Property. From and after the Commencement Date, the Tenant shall pay to Landlord not later than twenty-one (21) days after the day on which the same may become initially due, all real estate taxes and assessments applicable to the Leased Premises, together with any interest and penalties lawfully imposed thereon as a result of Tenant's late payment thereof, which shall be levied upon the Leased Premises during the term of this Lease.



Section 3.  Contest of Taxes.  The Tenant, at its own cost and expense, may, if it shall in good faith so desire, contest by appropriate proceedings the amount of any personal or real property tax. The Tenant may, if it shall so desire, endeavor at any time or times, by appropriate proceedings, to obtain a reduction in the assessed valuation of the Leased Premises for tax purposes. In any such event, if the Landlord agrees, at the request of the Tenant, to join with the Tenant at Tenant's expense in said proceedings and the Landlord agrees to sign and deliver such papers and instruments as may be necessary to prosecute such proceedings, the Tenant shall have the right to contest the amount of any such tax and the Tenant shall have the right to withhold payment of any such tax, if the statute under which the Tenant is contesting such tax so permits.



Section 4.  Payment of Ordinary Assessments.  The Tenant shall pay all assessments, ordinary and extraordinary, attributable to or against the Leased Premises not later than twenty-one (21) days after the day on which the same became initially due. The Tenant may take the benefit of any law allowing assessments to be paid in installments and in such event the Tenant shall only be liable for such installments of assessments due during the term hereof.
</file>

<file path="examples/extract/job_listing.txt">
Advantest develops Semiconductor and Component Test Systems. Your job includes improving the C++ development experience for our software engineers developing the software controlling the V93000 test system. No domain knowledge in semiconductor testing is required.

- We are moving the build system from Ant, SCons and Make to Bazel.

- We will be writing AST transformations (Clang AST) to automatically replace dated types and operations with their C++ standard library counterparts.

- We plan to move all code to C++20 modules.

Your impact:

- Contribute to our efforts to move the build of our C++ and Java code from legacy build systems to Bazel.

- Contribute to our efforts to use `clangd` as the LSP-provider of our IDE, Eclipse.

- Implement and run automated transformations to free our code from legacy cruft.

- Provide first-level support to our developers facing issues with the build system.

The skills you will demonstrate:

- Required:

  - Strong knowledge of the Linux environment (Shell, Python, Ruby, Git, RPM-based packaging, GDB, LLDB, util-linux, coreutils, iproute2, bcc, perf, ...)

  - Knowledge of the C++ build process (compiling, linking, build systems).
- Preferred:
  - Knowledge of the LLVM/Clang ecosystem, particularly libAST and clang-tidy internals

  - Development or maintenance of a SCons-, CMake- or Bazel-based build system.
Technologies: C++17 and newer; Linux (RHEL7/RHEL9) only; Bazel; Clang AST (clang-tidy); GNU Make; SCons; Ant; Eclipse CDT; Java
</file>

<file path="examples/extract/kaggle_text.py">
kaggle_description = """
    While it's universally interesting to understand what methods were used by the 
    top participants (especially in this contest where there are some large gaps in 
    AUC at the top), I suspect that many others who participated also have clever 
    methods or insights.  While we wait for the top finishers to post on "No Free 
    Hunch", I thought it would be interesting to hear from anyone else who might wish 
    to share.  Many of the models are quite good and would produce better results 
    than the methods used by persons in industry.      

    My results (#15):

    Overall method: 

    randomForest() in R, 199 trees, min node size of 25, default setting for other 
    values 

    Sampling: 

    Used 10% of the training dataset to train the randomForest.  Also included any 
    data points that were within 500ms of a state change (where isalert shifted from 
    1 to 0 or vice-versa).  About 110,000 rows total.  

    Data Transformations: 

Tossed out correlated variables, such as p7 (inverse correlation with p6) and p4 (
inverse correlation with p3) 
Transformed p3 into an element of ["High", "Mid", "Low"] based on the probability of 
being alert.  Where p3 is an even multiple of 100, the probability of being alert is 
systematically higher.  Where "p3 mod 100" is 84, 16, or 32, there is also a greater 
chance of being alert ("Mid").  Call everything else "Low".   
The histogram of p5 clearly shows a bimodal distribution.  Transformed p5 into a 1/0 
indicator variable with a breakpoint at p5=0.1750. 
Transformed e7 and e8 to lump together all buckets greater than or equal to 4.
Transformed v11 into 20-tiles to convert strangely shaped distribution into a 
discrete variable. 

Tried and Denied:

Lagging values
Moving average


Color Commentary:

RandomForest's ability to "fit" the training data presented was very strong.  
However, the out-of-bucket (OOB) error rate, as reported by R, was highly misleading. 
The OOB error rate could be driven down to the 1-3% range.  However, those models 
produced somewhat worse results on a true out-of-sample validation set.  Keeping 
randomForest tuned to produce OOB error rates of 8-10% produced the best results in 
this case.   

Because many of the training cases are similar, randomForest performed better when 
using just a sample of the overall training data (hence the decision to train on only 
about 110,000 rows).  RandomForest also under-performed when the default nodesize (
either 1 or 5) was used.  The explicit adjustment of nodesize to other values, 
such as 10, 25, and 50, produced noticeably different error rates on true 
out-of-sample data.   
"""
</file>

<file path="examples/extract/lease.html">
<DOCUMENT>
<TYPE>EX-10
<SEQUENCE>2
<FILENAME>elmonteleaseforfiling.htm
<DESCRIPTION>MATERIAL CONTRACT
<TEXT>
<!doctype html public "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<TITLE>SAMPLE COMMERCIAL LEASE AGREEMENT</TITLE>
<META NAME="author" CONTENT="Stephen Haas">
<META NAME="date" CONTENT="12/05/2013">
</HEAD>
<BODY style="margin-top:0;font-family:Times New Roman; font-size:10pt; color:#000000">
<DIV style="width:576px"><P style="margin:0px; font-size:12pt" align=center><B>COMMERCIAL LEASE AGREEMENT</B></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">THIS LEASE AGREEMENT is made and entered into on December 1, 2013, by and between Temple CB, LLC, whose address is 4350 Temple City Boulevard, El Monte, California 91731 (hereinafter referred to as &quot;Landlord&quot;), and Okra Energy, Inc., whose address is 4350 Temple City Boulevard, El Monte, California 91731 (hereinafter referred to as &quot;Tenant&quot;). </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE I - GRANT OF LEASE</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Landlord, in consideration of the rents to be paid and the covenants and agreements to be performed and observed by the Tenant, does hereby lease to the Tenant and the Tenant does hereby lease and take from the Landlord the property described in Exhibit &quot;A&quot; attached hereto and by reference made a part hereof (the &quot;Leased Premises&quot;), together with, as part of the parcel, all improvements located thereon.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE II - LEASE TERM</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section l. &nbsp;Term of Lease. &nbsp;The term of this Lease shall begin on the Commencement Date, as defined in Section 2 of this Article II, and shall terminate on May 31, 2020 (&quot;the Termination Date&quot;); provided, however, that at the option of Tenant, Tenant may renew this Lease for five additional successive one- year terms at a Monthly Rent of $100,000 per month, provided that notice of such renewal is given in writing no less than 120 days prior to the Termination Date or the expiration of any one-year renewal term. Tenant may at any time cancel this Lease and terminate all of its obligations hereunder by the payment of $300,000, plus all other amounts then due under this Lease.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Commencement Date. The &quot;Commencement Date&quot; shall mean &nbsp;December 1, 2013. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE III - EXTENSIONS </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">The parties hereto may elect to extend this Agreement upon such terms and conditions as may be agreed upon in writing and signed by the parties at the time of any such extension.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE IV - DETERMINATION OF RENT</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 1. Monthly Rent: The Tenant agrees to pay the Landlord and the Landlord agrees to accept, during the term hereof, at such place as the Landlord shall from time to time direct by notice to the Tenant, monthly rent set forth in the following table:</P>
<P style="margin:0px"><BR></P>
<P style="margin-top:0px; margin-bottom:-2px; width:432px; font-size:12pt; float:left">Initial Period of December 1, 2013 to May 31, 2014:</P>
<P style="margin:0px; text-indent:-2px; font-size:12pt">$ 0</P>
<P style="margin-top:0px; margin-bottom:-2px; width:432px; font-size:12pt; clear:left; float:left">June 1, 2014 to May 31, 2015:</P>
<P style="margin:0px; text-indent:-2px; font-size:12pt">$ 30,000</P>
<P style="margin-top:0px; margin-bottom:-2px; width:432px; font-size:12pt; clear:left; float:left">June 1, 2015 to May 31, 2016:</P>
<P style="margin:0px; text-indent:-2px; font-size:12pt">$ 40,000</P>
<P style="margin-top:0px; margin-bottom:-2px; width:432px; font-size:12pt; clear:left; float:left">June 1, 2016 to May 31, 2017:</P>
<P style="margin:0px; text-indent:-2px; font-size:12pt">$ 50,000</P>
<P style="margin-top:0px; margin-bottom:-2px; width:432px; font-size:12pt; clear:left; float:left">June 1, 2017 to May 31, 2018:</P>
<P style="margin:0px; text-indent:-2px; font-size:12pt">$ 60,000</P>
<P style="margin-top:0px; margin-bottom:-2px; width:432px; font-size:12pt; clear:left; float:left">June 1, 2019 to May 31, 2020:</P>
<P style="margin:0px; text-indent:-2px; font-size:12pt">$ 70,000</P>
<P style="margin:0px; clear:left"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Late Fee. &nbsp;A late fee in the amount of 5% of the Monthly Rent shall be assessed if payment is not postmarked or received by Landlord on or before the tenth day of each month. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE V - SECURITY DEPOSIT</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">The Tenant has deposited with the Landlord the sum of Twenty Thousand Dollars ($20,000.00) as security for the full and faithful performance by the Tenant of all the terms of this lease required to be performed by the Tenant. Such sum shall be returned to the Tenant after the expiration of this lease, provided the Tenant has fully and faithfully carried out all of its terms. In the event of a bona fide sale of the property of which the leased premises are a part, the Landlord shall have the right to transfer the security to the purchaser to be held under the terms of this lease, and the Landlord shall be released from all liability for the return of such security to the Tenant. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE VI - TAXES</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section l. &nbsp;Personal Property Taxes. &nbsp;The Tenant shall be liable for all taxes levied against any leasehold interest of the Tenant or personal property and trade fixtures owned or placed by the Tenant in the Leased Premises. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Real Estate Taxes. &nbsp;During the continuance of this lease Landlord shall deliver to Tenant a copy of any real estate taxes and assessments against the Leased Property. From and after the Commencement Date, the Tenant shall pay to Landlord not later than twenty-one (21) days after the day on which the same may become initially due, all real estate taxes and assessments applicable to the Leased Premises, together with any interest and penalties lawfully imposed thereon as a result of Tenant's late payment thereof, which shall be levied upon the Leased Premises during the term of this Lease. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 3. &nbsp;Contest of Taxes. &nbsp;The Tenant, at its own cost and expense, may, if it shall in good faith so desire, contest by appropriate proceedings the amount of any personal or real property tax. The Tenant may, if it shall so desire, endeavor at any time or times, by appropriate proceedings, to obtain a reduction in the assessed valuation of the Leased Premises for tax purposes. In any such event, if the Landlord agrees, at the request of the Tenant, to join with the Tenant at Tenant's expense in said proceedings and the Landlord agrees to sign and deliver such papers and instruments as may be necessary to prosecute such proceedings, the Tenant shall have the right to contest the amount of any such tax and the Tenant shall have the right to withhold payment of any such tax, if the statute under which the Tenant is contesting such tax so permits. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 4. &nbsp;Payment of Ordinary Assessments. &nbsp;The Tenant shall pay all assessments, ordinary and extraordinary, attributable to or against the Leased Premises not later than twenty-one (21) days after the day on which the same became initially due. The Tenant may take the benefit of any law allowing assessments to be paid in installments and in such event the Tenant shall only be liable for such installments of assessments due during the term hereof. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 5. &nbsp;Changes in Method of Taxation. &nbsp;Landlord and Tenant further agree that if at any time during the term of this Lease, the present method of taxation or assessment of real estate shall be changed so that the whole or any part of the real estate taxes, assessment or governmental impositions now levied, assessed or imposed on the Leased Premises shall, in lieu thereof, be assessed, levied, or imposed wholly or in part, as a capital levy or otherwise upon the rents reserved herein or any part thereof, or as a tax, corporation franchise tax, assessment, levy or charge, or any part thereof, measured by or based, in whole or in part, upon the Leased Premises or on the rents derived therefrom and imposed upon the Landlord, then the Tenant shall pay all such taxes, assessments, levies, impositions, or charges. &nbsp;Nothing contained in this Lease shall require the Tenant to pay an estate, inheritance, succession, capital levy, corporate franchise, gross receipts, transfer or income tax of the Landlord, nor shall any of the same be deemed real estate taxes as defined herein unless the same be imposed in lieu of the real estate taxes. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE VII - CONSTRUCTION AND COMPLETION</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 1. &nbsp;Improvements by Tenant. &nbsp;Tenant may have prepared plans and specifications for the construction of improvements, and, if so, such plans and specifications are attached hereto as Exhibit &quot;B&quot; and incorporated herein by reference. Tenant shall obtain all certificates, permits, licenses and other authorizations of governmental bodies or authorities which are necessary to permit the construction of the improvements on the demised premises and shall keep the same in full force and effect at Tenant's cost. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Tenant shall negotiate, let and supervise all contracts for the furnishing of services, labor, and materials for the construction of the improvements on the demised premises at its cost. All such contracts shall require the contracting party to guarantee performance and all workmanship and materials installed by it for a period of one year following the date of completion of construction. &nbsp;Tenant shall cause all contracts to be fully and completely performed in a good and workmanlike manner, all to the effect that the improvements shall be fully and completely constructed and installed in accordance with good engineering and construction practice. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">During the course of construction, Tenant shall, at its cost, keep in full force and effect a policy of builder's risk and liability insurance in a sum equal, from time to time, to three times the amount expended for construction of the improvements. All risk of loss or damage to the improvements during the course of construction shall be on Tenant with the proceeds from insurance thereon payable to Landlord. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Upon completion of construction, Tenant shall, at its cost, obtain an occupancy permit and all other permits or licenses necessary for the occupancy of the improvements and the operation of the same as set out herein and shall keep the same in force. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Nothing herein shall alter the intent of the parties that Tenant shall be fully and completely responsible for all aspects pertaining to the construction of the improvements of the demised premises and for the payment of all costs associated therewith. Landlord shall be under no duty to investigate or verify Tenant's compliance with the provision herein. Moreover, neither Tenant nor any third party may construe the permission granted Tenant hereunder to create any responsibility on the part of the Landlord to pay for any improvements, alterations or repairs occasioned by the Tenant. The Tenant shall keep the property free and clear of all liens and, should the Tenant fail to do so, or to have any liens removed from the property within fourteen (14) days of notification to do so by the Landlord , in addition to all other remedies available to the Landlord , the Tenant shall indemnify and hold the Landlord harmless for all costs and expenses, including attorney's fees, occasioned by the Landlord in having said lien removed from the property; and, such costs and expenses shall be billed to the Tenant monthly and shall be payable by the Tenant with that month's regular monthly rental as additional reimburseable expenses to the Landlord by the Tenant. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Utilities. &nbsp;Tenant shall pay for all water, sanitation, sewer, electricity, light, heat, gas, power, fuel, janitorial, and other services incident to Tenant's use of the Leased Premises, whether or not the cost thereof be a charge or imposition against the Leased Premises. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE VIII - OBLIGATIONS FOR REPAIRS </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 1. &nbsp;Landlord's Repairs. &nbsp;Subject to any provisions herein to the contrary, and except for maintenance or replacement necessitated as the result of the act or omission of sublessees, licensees or contractors, the Landlord shall be required to repair only defects, deficiencies, deviations or failures of materials or workmanship in the building. The Landlord shall keep the Leased Premises free of such defects, deficiencies, deviations or failures during the first twelve (12) months of the term hereof. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Tenant's Repairs. &nbsp;The Tenant shall repair and maintain the Leased Premises in good order and condition, except for reasonable wear and tear, the repairs required of Landlord pursuant hereto, and maintenance or replacement necessitated as the result of the act or omission or negligence of the Landlord, its employees, agents, or contractors. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 3. &nbsp;Requirements of the Law. &nbsp;The Tenant agrees that if any federal, state or municipal government or any department or division thereof shall condemn the Leased Premises or any part thereof as not in conformity with the laws and regulations relating to the construction thereof as of the commencement date with respect to conditions latent or otherwise which existed on the Commencement Date, or, with respect to items which are the Landlord's duty to repair pursuant to Section 1 and 3 of this Article; and such federal, state or municipal government or any other department or division thereof, has ordered or required, or shall hereafter order or require, any alterations or repairs thereof or installations and repairs as may be necessary to comply with such laws, orders or requirements (the validity of which the Tenant shall be entitled to contest); and if by reason of such laws, orders or the work done by the Landlord in connection therewith, the Tenant is deprived of the use of the Leased Premises, the rent shall be abated or adjusted, as the case may be, in proportion to that time during which, and to that portion of the Leased Premises of which, the Tenant shall shall be deprived as a result thereof, and the Landlord shall be obligated to make such repairs, alterations or modifications at Landlord's expense. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">All such rebuilding, altering, installing and repairing shall be done in accordance with Plans and Specifications approved by the Tenant, which approval shall not be unreasonably withheld. If, however, such condemnation, law, order or requirement, as in this Article set forth, shall be with respect to an item which shall be the Tenant's obligation to repair pursuant to Section 2 of this Article VII or with respect to Tenant's own costs and expenses, no abatement or adjustment of rent shall be granted; provided, however, that Tenant shall also be entitled to contest the validity thereof. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 4. &nbsp;Tenant's Alterations. &nbsp;The Tenant shall have the right, at its sole expense, from time to time, to redecorate the Leased Premises and to make such non-structural alterations and changes in such parts thereof as the Tenant shall deem expedient or necessary for its purposes; provided, however, that such alterations and changes shall neither impair the structural soundness nor diminish the value of the Leased Premises. The Tenant may make structural alterations and additions to the Leased Premises provided that Tenant has first obtained the consent thereto of the Landlord in writing. The Landlord agrees that it shall not withhold such consent unreasonably. The Landlord shall execute and deliver upon the request of the Tenant such instrument or instruments embodying the approval of the Landlord which may be required by the public or quasi public authority for the purpose of obtaining any licenses or permits for the making of such alterations, changes and/or installations in, to or upon the Leased Premises and the Tenant agrees to pay for such licenses or permits. &nbsp;The parties understand that a portion of the Leased Premises requires environmental remediation, and the Tenant anticipates that it will undertake such remediation and will be responsible therefore as if it were a structural alteration or addition set forth above.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 5. &nbsp;Permits and Expenses. &nbsp;Each party agrees that it will procure all necessary permits for making any repairs, alterations, or other improvements for installations, when applicable. Each Party hereto shall give written notice to the other party of any repairs required of the other pursuant to the provisions of this Article and the party responsible for said repairs agrees promptly to commence such repairs and to prosecute the same to completion diligently, subject, however, to the delays occasioned by events beyond the control of such party. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Each party agrees to pay promptly when due the entire cost of any work done by it upon the Leased Premises so that the Leased Premises at all times shall be free of liens for labor and materials. &nbsp;Each party further agrees to hold harmless and indemnify the other party from and against any and all injury, loss, claims or damage to any person or property occasioned by or arising out of the doing of any such work by such party or its employees, agents or contractors. Each party further agrees that in doing such work that it will employ materials of good quality and comply with all governmental requirements, and perform such work in a good and workmanlike manner.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE IX - TENANT'S COVENANTS </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 1. Tenant's Covenants. &nbsp;Tenant covenants and agrees as follows: </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">a. &nbsp;To procure any licenses and permits required for any use made of the Leased Premises by Tenant, and upon the expiration or termination of this Lease, to remove its goods and effects and those of all persons claiming under it, and to yield up peaceably to Landlord the Leased Premises in good order, repair and condition in all respects; excepting only damage by fire and casualty covered by Tenant's insurance coverage, structural repairs (unless Tenant is obligated to make such repairs hereunder) and reasonable wear and tear; </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">b. &nbsp;To permit Landlord and its agents to examine the Leased Premises at reasonable times and to show the Leased Premises to prospective purchasers of the Building and to provide Landlord, if not already available, with a set of keys for the purpose of said examination, provided that Landlord shall not thereby unreasonably interfere with the conduct of Tenant's business; </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">c. &nbsp;To permit Landlord to enter the Leased Premises to inspect such repairs, improvements, alterations or additions thereto as may be required under the provisions of this Lease. If, as a result of such repairs, improvements, alterations, or additions, Tenant is deprived of the use of the Leased Premises, the rent shall be abated or adjusted, as the case may be, in proportion to that time during which, and to that portion of the Leased Premises of which, Tenant shall be deprived as a result thereof. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE X - INDEMNITY BY TENANT</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section l. Indemnity and Public Liability. &nbsp;The Tenant shall save Landlord harmless and indemnify Landlord from all injury, loss, claims or damage to any person or property while on the Leased Premises, unless caused by the willful acts or omissions or gross negligence of Landlord, its employees, agents, licensees or contractors. Tenant shall maintain, with respect to the Leased Premises, public liability insurance with limits of not less than one million dollars for injury or death from one accident and $250,000.00 property damage insurance, insuring Landlord and Tenant against injury to persons or damage to property on or about the Leased Premises. A copy of the policy or a certificate of insurance shall be delivered to Landlord on or before the commencement date and no such policy shall be cancellable without ten (10) days prior written notice to Landlord. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE XI - USE OF PROPERTY BY TENANT</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 1. &nbsp;Use. &nbsp;The Leased Premises may be occupied and used by Tenant exclusively for warehouse and power generation . </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Nothing herein shall give Tenant the right to use the property for any other purpose or to sublease, assign, or license the use of the property to any sublessee, assignee, or licensee, which or who shall use the property for any other use. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE XII - SIGNAGE</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section l. &nbsp;Exterior Signs. &nbsp;Tenant shall have the right, at its sole risk and expense and in conformity with applicable laws and ordinances, to erect and thereafter, to repair or replace, if it shall so elect signs on any portion of the Leased Premises, providing that Tenant shall remove any such signs upon termination of this lease, and repair all damage occasioned thereby to the Leased Premises.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Interior Signs. &nbsp;Tenant shall have the right, at its sole risk and expense and in conformity with applicable laws and ordinances, to erect, maintain, place and install its usual and customary signs and fixtures in the interior of the Leased Premises. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE XIII - INSURANCE</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 1. &nbsp;Insurance Proceeds. &nbsp;In the event of any damage to or destruction of the Leased Premises, Tenant shall adjust the loss and settle all claims with the insurance companies issuing such policies. The parties hereto do irrevocably assign the proceeds from such insurance policies for the purposes hereinafter stated to any institutional first mortgagee or to Landlord and Tenant jointly, if no institutional first mortgagee then holds an interest in the Leased Premises. All proceeds of said insurance shall be paid into a trust fund under the control of any institutional first mortgagee, or of Landlord and Tenant if no institutional first mortgagee then holds an interest in the Leased Premises, for repair, restoration, rebuilding or replacement, or any combination thereof, of the Leased Premises or of the improvements in the Leased Premises. In case of such damage or destruction, Landlord shall be entitled to make withdrawals from such trust fund, from time to time, upon presentation of: </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">a. &nbsp;bills for labor and materials expended in repair, restoration, rebuilding or replacement, or any combination thereof; </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">b. &nbsp;Landlord's sworn statement that such labor and materials for which payment is being made have been furnished or delivered on site; and</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">c. &nbsp;the certificate of a supervising architect (selected by Landlord and Tenant and approved by an institutional first mortgagee, if any, whose fees will be paid out of said insurance proceeds) certifying that the work being paid for has been completed in accordance with the Plans and Specifications previously approved by Landlord , Tenant and any institutional first mortgagee in a first class, good and workmanlike manner and in accordance with all pertinent governmental requirements. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Any insurance proceeds in excess of such proceeds as shall be necessary for such repair, restoration, rebuilding, replacement or any combination thereof shall be the sole property of Landlord subject to any rights therein of Landlord's mortgagee, and if the proceeds necessary for such repair, restoration, rebuilding or replacement, or any combination thereof shall be inadequate to pay the cost thereof, Tenant shall suffer the deficiency.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Subrogation. &nbsp;Landlord and Tenant hereby release each other, to the extent of the insurance coverage provided hereunder, from any and all liability or responsibility (to the other or anyone claiming through or under the other by way of subrogation or otherwise) for any loss to or damage of property covered by the fire and extended coverage insurance policies insuring the Leased Premises and any of Tenant's property, even if such loss or damage shall have been caused by the fault or negligence of the other party. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 3. &nbsp;Contribution. Tenant shall reimburse Landlord for all insurance premiums connected with or applicable to the Leased Premises for whatever insurance policy the Landlord , at its sole and exclusive option, should select.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE XIV - DAMAGE TO DEMISED PREMISES</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 1. &nbsp;Abatement or Adjustment of Rent. &nbsp;If the whole or any part of the Leased Premises shall be damaged or destroyed by fire or other casualty after the execution of this Lease and before the termination hereof, then in every case the rent reserved in Article IV herein and other charges, if any, shall be abated or adjusted, as the case may be, in proportion to that portion of the Leased Premises of which Tenant shall be deprived on account of such damage or destruction and the work of repair, restoration, rebuilding, or replacement or any combination thereof, of the improvements so damaged or destroyed, shall in no way be construed by any person to effect any reduction of sums or proceeds payable under any rent insurance policy. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Repairs and Restoration. &nbsp;Landlord agrees that in the event of the damage or destruction of the Leased Premises, Landlord forthwith shall proceed to repair, restore, replace or rebuild the Leased Premises (excluding Tenant's leasehold improvements), to substantially the condition in which the same were immediately prior to such damage or destruction. The Landlord thereafter shall diligently prosecute said work to completion without delay or interruption except for events beyond the reasonable control of Landlord . Notwithstanding the foregoing, if Landlord does not either obtain a building permit within ninety (90) days of the date of such damage or destruction, or complete such repairs, rebuilding or restoration and comply with conditions (a), (b) and (c) in Section 1 of Article XIII within nine (9) months of such damage or destruction, then Tenant may at any time thereafter cancel and terminate this Lease by sending ninety (90) days written notice thereof to Landlord , or, in the alternative, Tenant may, during said ninety (90) day period, apply for the same and Landlord shall cooperate with Tenant in Tenant's application. Notwithstanding the foregoing, if such damage or destruction shall occur during the last year of the term of this Lease, or during any renewal term, and shall amount to twenty-five (25%) percent or more of the replacement cost, (exclusive of the land and foundations), this Lease, except as hereinafter provided in Section 3 of Article XV, may be terminated at the election of either Landlord or Tenant, provided that notice of such election shall be sent by the party so electing to the other within thirty (30) days after the occurrence of such damage or destruction. Upon termination, as aforesaid, by either party hereto, this Lease and the term thereof shall cease and come to an end, any unearned rent or other charges paid in advance by Tenant shall be refunded to Tenant, and the parties shall be released hereunder, each to the other, from all liability and obligations hereunder thereafter arising. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE XV - CONDEMNATION </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 1. &nbsp;Total Taking. &nbsp;If, after the execution of this Lease and prior to the expiration of the term hereof, the whole of the Leased Premises shall be taken under power of eminent domain by any public or private authority, or conveyed by Landlord to said authority in lieu of such taking, then this Lease and the term hereof shall cease and terminate as of the date when possession of the Leased Premises shall be taken by the taking authority and any unearned rent or other charges, if any, paid in advance, shall be refunded to Tenant.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Partial Taking. &nbsp;If, after the execution of this Lease and prior to the expiration of the term hereof, any public or private authority shall, under the power of eminent domain, take, or Landlord shall convey to said authority in lieu of such taking, property which results in a reduction by fifteen (15%) percent or more of the area in the Leased Premises, or of a portion of the Leased Premises that substantially interrupts or substantially obstructs the conducting of business on the Leased Premises; then Tenant may, at its election, terminate this Lease by giving Landlord notice of the exercise of Tenant's election within thirty (30) days after Tenant shall receive notice of such taking. In the event of termination by Tenant under the provisions of Section 1 of this Article XV, this Lease and the term hereof shall cease and terminate as of the date when possession shall be taken by the appropriate authority of that portion of the Entire Property that results in one of the above takings, and any unearned rent or other charges, if any, paid in advance by Tenant shall be refunded to Tenant.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 3. &nbsp;Restoration. &nbsp;In the event of a taking in respect of which Tenant shall not have the right to elect to terminate this Lease or, having such right, shall not elect to terminate this Lease, this Lease and the term thereof shall continue in full force and effect and Landlord , at Landlord's sole cost and expense, forthwith shall restore the remaining portions of the Leased Premises, including any and all improvements made theretofore to an architectural whole in substantially the same condition that the same were in prior to such taking. A just proportion of the rent reserved herein and any other charges payable by Tenant hereunder, according to the nature and extent of the injury to the Leased Premises and to Tenant's business, shall be suspended or abated until the completion of such restoration and thereafter the rent and any other charges shall be reduced in proportion to the square footage of the Leased Premises remaining after such taking.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 4. &nbsp;The Award. &nbsp;All compensation awarded for any taking, whether for the whole or a portion of the Leased Premises, shall be the sole property of the Landlord whether such compensation shall be awarded for diminution in the value of, or loss of, the leasehold or for diminution in the value of, or loss of, the fee in the Leased Premises, or otherwise. The Tenant hereby assigns to Landlord all of Tenant's right and title to and interest in any and all such compensation. However, the Landlord shall not be entitled to and Tenant shall have the sole right to make its independent claim for and retain any portion of any award made by the appropriating authority directly to Tenant for loss of business, or damage to or depreciation of, and cost of removal of fixtures, personally and improvements installed in the Leased Premises by, or at the expense of Tenant, and to any other award made by the appropriating authority directly to Tenant. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 5. &nbsp;Release. &nbsp;In the event of any termination of this Lease as the result of the provisions of this Article XV, the parties, effective as of such termination, shall be released, each to the other, from all liability and obligations thereafter arising under this lease. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE XVI - DEFAULT</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 1. &nbsp;Landlord's Remedies. In the event that: </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">a. &nbsp;Tenant shall on three or more occasions be in default in the payment of rent or other charges herein required to be paid by Tenant (default herein being defined as payment received by Landlord ten or more days subsequent to the due date), regardless of whether or not such default has occurred on consecutive or non-consecutive months; or </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">b. &nbsp;Tenant has caused a lien to be filed against the Landlord's property and said lien is not removed within thirty (30) days of recordation thereof; or </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">c. &nbsp;Tenant shall default in the observance or performance of any of the covenants and agreements required to be performed and observed by Tenant hereunder for a period of thirty (30) days after notice to Tenant in writing of such default (or if such default shall reasonably take more than thirty (30) days to cure, Tenant shall not have commenced the same within the thirty (30) days and diligently prosecuted the same to completion); or </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">d. &nbsp;Sixty (60) days have elapsed after the commencement of any proceeding by or against Tenant, whether by the filing of a petition or otherwise, seeking any reorganization, arrangement, composition, readjustment, liquidation, dissolution or similar relief under the present or future Federal Bankruptcy Act or any other present or future applicable federal, state or other statute or law, whereby such proceeding shall not have been dismissed (provided, however, that the non-dismissal of any such proceeding shall not be a default hereunder so long as all of Tenant's covenants and obligations hereunder are being performed by or on behalf of Tenant); then Landlord shall be entitled to its election (unless Tenant shall cure such default prior to such election), to exercise concurrently or successively, any one or more of the following rights: </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">I. &nbsp;Terminate this Lease by giving Tenant notice of termination, in which event this Lease shall expire and terminate on the date specified in such notice of termination, with the same force and effect as though the date so specified were the date herein originally fixed as the termination date of the term of this Lease, and all rights of Tenant under this Lease and in and to the Premises shall expire and terminate, and Tenant shall remain liable for all obligations under this Lease arising up to the date of such termination, and Tenant shall surrender the Premises to Landlord on the date specified in such notice; or </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ii. &nbsp;Terminate this Lease as provided herein and recover from Tenant all damages Landlord may incur by reason of Tenant's default, including, without limitation, a sum which, at the date of such termination, represents the then value of the excess, if any, of (a) the Minimum Rent, Percentage Rent, Taxes and all other sums which would have been payable hereunder by Tenant for the period commencing with the day following the date of such termination and ending with the date herein before set for the expiration of the full term hereby granted, over (b) the aggregate reasonable rental value of the Premises for the same period, all of which excess sum shall be deemed immediately due and payable; or </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">iii. &nbsp;Without terminating this Lease, declare immediately due and payable all Minimum Rent, Taxes, and other rents and amounts due and coming due under this Lease for the entire remaining term hereof, together with all other amounts previously due, at once; provided, however, that such payment shall not be deemed a penalty or liquidated damages but shall merely constitute payment in advance of rent for the remainder of said term. Upon making such payment, Tenant shall be entitled to receive from Landlord all rents received by Landlord from other assignees, tenants, and subtenants on account of said Premises during the term of this Lease, provided that the monies to which tenant shall so become entitled shall in no event exceed the entire amount actually paid by Tenant to Landlord pursuant to the preceding sentence less all costs, expenses and attorney's fees of Landlord incurred in connection with the reletting of the Premises; or</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">iv. &nbsp;Without terminating this Lease, and with or without notice to Tenant, Landlord may in its own name but as agent for Tenant enter into and upon and take possession of the Premises or any part thereof, and, at landlord's option, remove persons and property therefrom, and such property, if any, may be removed and stored in a warehouse or elsewhere at the cost of, and for the account of Tenant, all without being deemed guilty of trespass or becoming liable for any loss or damage which may be occasioned thereby, and Landlord may rent the Premises or any portion thereof as the agent of Tenant with or without advertisement, and by private negotiations and for any term upon such terms and conditions as Landlord may deem necessary or desirable in order to relet the Premises. Landlord shall in no way be responsible or liable for any rental concessions or any failure to rent the Premises or any part thereof, or for any failure to collect any rent due upon such reletting. Upon such reletting, all rentals received by Landlord from such reletting shall be applied: first, to the payment of any indebtedness (other than any rent due hereunder) from Tenant to Landlord; second, to the payment of any costs and expenses of such reletting,</P>
<P style="margin:0px; font-size:12pt">including, without limitation, brokerage fees and attorney's fees and costs of alterations and repairs; third, to the payment of rent and other charges then due and unpaid hereunder; and the residue, if any shall be held by Landlord to the extent of and for application in payment of future rent as the same may become due and payable hereunder. In reletting the Premises as aforesaid, Landlord may grant rent concessions and Tenant shall not be credited therefor. If such rentals received from such reletting shall at any time or from time to time be less than sufficient to pay to Landlord the entire sums then due from Tenant hereunder, Tenant shall pay any such deficiency to Landlord. Such deficiency shall, at Landlord's option, be calculated and paid monthly. No such reletting shall be construed as an election by Landlord to terminate this Lease unless a written notice of such election has been given to Tenant by Landlord. Notwithstanding any such reletting without termination, Landlord may at any time thereafter elect to terminate this Lease for any such previous default provided same has not been cured; or</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">v. &nbsp;Without liability to Tenant or any other party and without constituting a constructive or actual eviction, suspend or discontinue furnishing or rendering to Tenant any property, material, labor, Utilities or other service, whether Landlord is obligated to furnish or render the same, so long as Tenant is in default under this Lease; or</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">vi. &nbsp;Allow the Premises to remain unoccupied and collect rent from Tenant as it comes due; or </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">vii. &nbsp;Foreclose the security interest described herein, including the immediate taking of possession of all property on or in the Premises; or</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">viii. &nbsp;Pursue such other remedies as are available at law or equity. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">e. &nbsp;Landlord's pursuit of any remedy of remedies, including without limitation, any one or more of the remedies stated herein shall not (1) constitute an election of remedies or preclude pursuit of any other remedy or remedies provided in this Lease or any other remedy or remedies provided by law or in equity, separately or concurrently or in any combination, or (2) sever as the basis for any claim of constructive eviction, or allow Tenant to withhold any payments under this Lease.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Landlord's Self Help. &nbsp;If in the performance or observance of any agreement or condition in this Lease contained on its part to be performed or observed and shall not cure such default within thirty (30) days after notice from Landlord specifying the default (or if such default shall reasonably take more than thirty (30) days to cure, shall diligently prosecuted the same to completion), Landlord may, at its option, without waiving any claim for damages for breach of agreement, at any time thereafter cure such default for the account of Tenant, and any amount paid or contractual liability incurred by Landlord in so doing shall be deemed paid or incurred for the account of Tenant and Tenant agrees to reimburse Landlord therefor and save Landlord harmless therefrom. Provided, however, that Landlord may cure any such default as aforesaid prior to the expiration of said waiting period, without notice to Tenant if any emergency situation exists, or after notice to Tenant, if the curing of such default prior to the expiration of said waiting period is reasonably necessary to protect the Leased Premises or Landlord's interest therein, or to prevent injury or damage to persons or property. If Tenant shall fail to reimburse Landlord upon demand for any amount paid for the account of Tenant hereunder, said amount shall be added to and become due as a part of the next payment of rent due and shall for all purposes be deemed and treated as rent hereunder.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 3. &nbsp;Tenant's Self Help. &nbsp;If Landlord shall default in the performance or observance of any agreement or condition in this Lease contained on its part to be performed or observed, and if Landlord shall not cure such default within thirty (30) days after notice from Tenant specifying the default (or, if such default shall reasonably take more than thirty (30) days to cure, and Landlord shall not have commenced the same within the thirty (30) days and diligently prosecuted the same to completion), Tenant may, at its option, without waiving any claim for damages for breach of agreement, at any time thereafter cure such default for the account of Landlord and any amount paid or any contractual liability incurred by Tenant in so doing shall be deemed paid or incurred for the account of Landlord and Landlord shall reimburse Tenant therefor and save Tenant harmless therefrom. Provided, however, that Tenant may cure any such default as aforesaid prior to the expiration of said waiting period, without notice to Landlord if an emergency situation exists, or after notice to Landlord , if the curing of such default prior to the expiration of said waiting period is reasonably necessary to protect the Leased Premises or Tenant's interest therein or to prevent injury or damage to persons or property. &nbsp;If Landlord shall fail to reimburse Tenant upon demand for any amount paid or liability incurred for the account of Landlord hereunder, said amount or liability may be deducted by Tenant from the next or any succeeding payments of rent due hereunder; provided, however, that should said amount or the liability therefor be disputed by Landlord, Landlord may contest its liability or the amount thereof, through arbitration or through a declaratory judgment action and Landlord shall bear the cost of the filing fees therefor.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE XVII - TITLE</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section l. &nbsp;Subordination. &nbsp;Tenant shall, upon the request of Landlord in writing, subordinate this Lease to the lien of any present or future institutional mortgage upon the Leased Premises irrespective of the time of execution or the time of recording of any such mortgage. Provided, however, that as a condition to such subordination, the holder of any such mortgage shall enter first into a written agreement with Tenant in form suitable for recording to the effect that:</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">a. &nbsp;in the event of foreclosure or other action taken under the mortgage by the holder thereof, this Lease and the rights of Tenant hereunder shall not be disturbed but shall continue in full force and effect so long as Tenant shall not be in default hereunder, and </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">b. &nbsp;such holder shall permit insurance proceeds and condemnation proceeds to be used for any restoration and repair required by the provisions of Articles XIII, XIV or XV, respectively. &nbsp;Tenant agrees that if the mortgagee or any person claiming under the mortgagee shall succeed to the interest of Landlord in this Lease, Tenant will recognize said mortgagee or person as its Landlord under the terms of this Lease, provided that said mortgagee or person for the period during which said mortgagee or person respectively shall be in possession of the Leased Premises and thereafter their respective successors in interest shall assume all of the obligations of Landlord hereunder. The word &quot;mortgage&quot;, as used herein includes mortgages, deeds of trust or other similar instruments, and modifications, and extensions thereof. The term &quot;institutional mortgage&quot; as used in this Article XVII means a mortgage securing a loan from a bank (commercial or savings) or trust company, insurance company or pension trust or any other lender institutional in nature and constituting a lien upon the Leased Premises. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Quiet Enjoyment. &nbsp;Landlord covenants and agrees that upon Tenant paying the rent and observing and performing all of the terms, covenants and conditions on Tenant's part to be observed and performed hereunder, that Tenant may peaceably and quietly have, hold, occupy and enjoy the Leased Premises in accordance with the terms of this Lease without hindrance or molestation from Landlord or any persons lawfully claiming through Landlord . </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 3. &nbsp;Zoning and Good Title. &nbsp;Landlord warrants and represents, upon which warranty and representation Tenant has relied in the execution of this Lease, that Landlord is the owner of the Leased Premises, in fee simple absolute, free and clear of all encumbrances, except for the easements, covenants and restrictions of record as of the date of this Lease. Such exceptions shall not impede or interfere with the quiet use and enjoyment of the Leased Premises by Tenant. Landlord further warrants and covenants that this Lease is and shall be a first lien on the Leased Premises, subject only to any Mortgage to which this Lease is subordinate or may become subordinate pursuant to an agreement executed by Tenant, and to such encumbrances as shall be caused by the acts or omissions of Tenant; that Landlord has full right and lawful authority to execute this Lease for the term, in the manner, and upon the conditions and provisions herein contained; that there is no legal impediment to the use of the Leased Premises as set out herein; that the Leased Premises are not subject to any easements, restrictions, zoning ordinances or similar governmental regulations which prevent their use as set out herein; that the Leased Premises presently are zoned for the use contemplated herein and throughout the term of this lease may continue to be so used therefor by virtue of said zoning, under the doctrine of &quot;non-conforming use&quot;, or valid and binding decision of appropriate authority, except, however, that said representation and warranty by Landlord shall not be applicable in the event that Tenant's act or omission shall invalidate the application of said zoning, the doctrine of &quot;non-conforming use&quot; or the valid and binding decision of the appropriate authority. Landlord shall furnish without expense to Tenant, within thirty (30) days after written request therefor by Tenant, a title report covering the Leased Premises showing the condition of title as of the date of such certificate, provided, however, that Landlord's obligation hereunder shall be limited to the furnishing of only one such title report. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 4. &nbsp;Licenses. &nbsp;It shall be the Tenant's responsibility to obtain any and all necessary licenses and the Landlord shall bear no responsibility therefor; the Tenant shall promptly notify Landlord of the fact that it has obtained the necessary licenses in order to prevent any delay to Landlord in commencing construction of the Leased Premises. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE XVIII - EXTENSIONS/WAIVERS/DISPUTES</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section l. &nbsp;Extension Period. &nbsp;Any extension hereof shall be subject to the provisions of Article III hereof. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Holding Over. &nbsp;In the event that Tenant or anyone claiming under Tenant shall continue occupancy of the Leased Premises after the expiration of the term of this Lease or any renewal or extension thereof without any agreement in writing between Landlord and Tenant with respect thereto, such occupancy shall not be deemed to extend or renew the term of the Lease, but such occupancy shall continue as a tenancy at will, from month to month, upon the covenants, provisions and conditions herein contained. The rental shall be the rental in effect during the term of this Lease as extended or renewed, prorated and payable for the period of such occupancy. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 3. &nbsp;Waivers. &nbsp;Failure of either party to complain of any act or omission on the part of the other party, no matter how long the same may continue, shall not be deemed to be a waiver by said party of any of its rights hereunder. No waiver by either party at any time, express or implied, of any breach of any provision of this Lease shall be deemed a waiver of a breach of any other provision of this Lease or a consent to any subsequent breach of the same or any other provision. If any action by either party shall require the consent or approval of the other party, the other party's consent to or approval of such action on any one occasion shall not be deemed a consent to or approval of said action on any subsequent occasion or a consent to or approval of any other action on the same or any subsequent occasion. Any and all rights and remedies which either party may have under this Lease or by operation of law, either at law or in equity, upon any breach, shall be distinct, separate and cumulative and shall not be deemed inconsistent with each other, and no one of them, whether exercised by said party or not, shall be deemed to be an exclusion of any other; and any two or more or all of such rights and remedies may be exercised at the same time. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 4. &nbsp;Disputes. &nbsp;It is agreed that, if at any time a dispute shall arise as to any amount or sum of money to be paid by one party to the other under the provisions hereof, the party against whom the obligation to pay the money is asserted shall have the right to make payment &quot;under protest&quot; and such payment shall not be regarded as a voluntary payment and there shall survive the right on the part of the said party to institute suit for the recovery of such sum. If it shall be adjudged that there was no legal obligation on the part of said party to pay such sum or any part thereof, said party shall be entitled to recover such sum or so much thereof as it was not legally required to pay under the provisions of this Lease. If at any time a dispute shall arise between the parties hereto as to any work to be performed by either of them under the provisions hereof, the party against whom the obligation to perform the work is asserted may perform such work and pay the costs thereof &quot;under protest&quot; and the performance of such work shall in no event be regarded as a voluntary performance and shall survive the right on the part of the said party to institute suit for the recovery of the costs of such work. If it shall be adjudged that there was no legal obligation on the part of the said party to perform the same or any part thereof, said party shall be entitled to recover the costs of such work or the cost of so much thereof as said party was not legally required to perform under the provisions of this Lease and the amount so paid by Tenant may be withheld or deducted by Tenant from any rents herein reserved. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 5. &nbsp;Tenant's Right to cure Landlord's Default. &nbsp;In the event that Landlord shall fail, refuse or neglect to pay any mortgages, liens or encumbrances, the judicial sale of which might affect the interest of Tenant hereunder, or shall fail, refuse or neglect to pay any interest due or payable on any such mortgage, lien or encumbrance, Tenant may pay said mortgages, liens or encumbrances, or interest or perform said conditions and charge to Landlord the amount so paid and withhold and deduct from any rents herein reserved such amounts so paid, and any excess over and above the amounts of said rents shall be paid by Landlord to Tenant. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 6. &nbsp;Notices. &nbsp;All notices and other communications authorized or required hereunder shall be in writing and shall be given by mailing the same by certified mail, return receipt requested, postage prepaid, and any such notice or other communication shall be deemed to have been given when received by the party to whom such notice or other communication shall be addressed. If intended for Landlord the same will be mailed to the address herein above set forth or such other address as Landlord may hereafter designate by notice to Tenant, and if intended for Tenant, the same shall be mailed to Tenant at the address herein above set forth, or such other address or addresses as Tenant may hereafter designate by notice to Landlord. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE XIX - PROPERTY DAMAGE </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section l. &nbsp;Loss and Damage. &nbsp;Notwithstanding any contrary provisions of this Lease, Landlord shall not be responsible for any loss of or damage to property of Tenant or of others located on the Leased Premises, except where caused by the willful act or omission or negligence of Landlord , or Landlord's agents, employees or contractors, provided, however, that if Tenant shall notify Landlord in writing of repairs which are the responsibility of Landlord under Article VII hereof, and Landlord shall fail to commence and diligently prosecute to completion said repairs promptly after such notice, and if after the giving of such notice and the occurrence of such failure, loss of or damage to Tenant's property shall result from the condition as to which Landlord has been notified, Landlord shall indemnify and hold harmless Tenant from any loss, cost or expense arising therefrom. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Force Majeure. &nbsp;In the event that Landlord or Tenant shall be delayed or hindered in or prevented from the performance of any act other than Tenant's obligation to make payments of rent, additional rent, and other charges required hereunder, by reason of strikes, lockouts, unavailability of materials, failure of power, restrictive governmental laws or regulations, riots, insurrections, the act, failure to act, or default of the other party, war or other reason beyond its control, then performance of such act shall be excused for the period of the delay and the period for the performance of such act shall be extended for a period equivalent to the period of such delay. &nbsp;Notwithstanding the foregoing, lack of funds shall not be deemed to be a cause beyond control of either party. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE XX - OPTION TO PURCHASE</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">During the Term of this Lease, Tenant shall have the right to purchase the Leased Premises at any time for a purchase price equal to Three Million Dollars ($3,000,000).</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">ARTICLE XXI - MISCELLANEOUS </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 1. &nbsp;Assignment and Subletting. &nbsp;Under the terms and conditions hereunder, Tenant shall have the absolute right to transfer and assign this lease or to sublet all or any portion of the Leased Premises or to cease operating Tenant's business on the Leased Premises provided that at the time of such assignment or sublease Tenant shall not be in default in the performance and observance of the obligations imposed upon Tenant hereunder. The use of the Leased Premises by such assignee or sublessee shall be expressly limited by and to the provisions of this lease. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 2. &nbsp;Fixtures. &nbsp;All personal property, furnishings and equipment presently and all other trade fixtures installed in or hereafter by or at the expense of Tenant and all additions and/or improvements, exclusive of structural, mechanical, electrical, and plumbing, affixed to the Leased Premises and used in the operation of the Tenant's business made to, in or on the Leased Premises by and at the expense of Tenant and susceptible of being removed from the Leased Premises without damage, unless such damage be repaired by Tenant, shall remain the property of Tenant and Tenant may, but shall not be obligated to, remove the same or any part thereof at any time or times during the term hereof, provided that Tenant, at its sole cost and expense, shall make any repairs occasioned by such removal. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 3. &nbsp;Estoppel Certificates. &nbsp;At any time and from time to time, Landlord and Tenant each agree, upon request in writing from the other, to execute, acknowledge and deliver to the other or to any person designated by the other a statement in writing certifying that the Lease is unmodified and is in full force and effect, or if there have been modifications, that the same is in full force and effect as modified (stating the modifications), that the other party is not in default in the performance of its covenants hereunder, or if there have been such defaults, specifying the same, and the dates to which the rent and other charges have been paid.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 4. &nbsp;Invalidity of Particular Provision. &nbsp;If any term or provision of this Lease or the application hereof to any person or circumstance shall, to any extent, be held invalid or unenforceable, the remainder of this Lease, or the application of such term or provision to persons or circumstances other than those as to which it is held invalid or unenforceable, shall not be affected thereby, and each term and provision of this Lease shall be valid and be enforced to the fullest extent permitted by law. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 5. &nbsp;Captions and Definitions of Parties. &nbsp;The captions of the Sections of this Lease are for convenience only and are not a part of this Lease and do not in any way limit or amplify the terms and provisions of this Lease. The word &quot;Landlord&quot; and the pronouns referring thereto, shall mean, where the context so admits or requires, the persons, firm or corporation named herein as Landlord or the mortgagee in possession at any time, of the land and building comprising the Leased Premises. If there is more than one Landlord, the covenants of Landlord shall be the joint and several obligations of each of them, and if Landlord is a partnership, the covenants of Landlord shall be the joint and several obligations of each of the partners and the obligations of the firm. Any pronoun shall be read in the singular or plural and in such gender as the context may require. Except as in this Lease otherwise provided, the terms and provisions of this Lease shall be binding upon and inure to the benefit of the parties hereto and their respective successors and assigns. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Nothing contained herein shall be deemed or construed by the parties hereto nor by any third party as creating the relationship of principal and agent or of partnership or of a joint venture between the parties hereto, it being understood and agreed that neither any provision contained herein, nor any acts of the parties hereto, shall be deemed to create any relationship between the parties hereto other than the relationship of Landlord and Tenant. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 6. &nbsp;Brokerage. &nbsp;No party has acted as, by or through a broker in the effectuation of this Agreement, except as set out hereinafter. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 7. &nbsp;Entire Agreement. &nbsp;This instrument contains the entire and only agreement between the parties, and no oral statements or representations or prior written matter not contained in this instrument shall have any force and effect. This Lease shall not be modified in any way except by a writing executed by both parties. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 8. &nbsp;Governing Law. All matters pertaining to this agreement (including its interpretation, application, validity, performance and breach) in whatever jurisdiction action may be brought, shall be governed by, construed and enforced in accordance with the laws of the State of California. The parties herein waive trial by jury and agree to submit to the personal jurisdiction and venue of a court of subject matter jurisdiction located in Los Angeles County, State of California. &nbsp;In the event that litigation results from or arises out of this Agreement or the performance thereof, the parties agree to reimburse the prevailing party's reasonable attorney's fees, court costs, and all other expenses, whether or not taxable by the court as costs, in addition to any other relief to which the prevailing party may be entitled. In such event, no action shall be entertained by said court or any court of competent jurisdiction if filed more than one year subsequent to the date the cause(s) of action actually accrued regardless of whether damages were otherwise as of said time calculable. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 9. &nbsp;Contractual Procedures. &nbsp;Unless specifically disallowed by law, should litigation arise hereunder, service of process therefor may be obtained through certified mail, return receipt requested; the parties hereto waiving any and all rights they may have to object to the method by which service was perfected. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 10. &nbsp;Extraordinary remedies. &nbsp;To the extent cognizable at law, the parties hereto, in the event of breach and in addition to any and all other remedies available thereto, may obtain injunctive relief, regardless of whether the injured party can demonstrate that no adequate remedy exists at law. </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Section 11. &nbsp;Reliance on Financial Statement. &nbsp;Tenant shall furnish concurrently with the execution of this lease, a financial statement of Tenant prepared by an accountant. Tenant, both in corporate capacity, if applicable, and individually, hereby represents and warrants that all the information contained therein is complete, true, and correct. Tenant understands that Landlord is relying upon the accuracy of the information contained therein. Should there be found to exist any inaccuracy within the financial statement which adversely affects Tenant's financial standing, or should Tenant's financial circumstances materially change, Landlord may demand, as additional security, an amount equal to an additional two (2) months' rent, which additional security shall be subject to all terms and conditions herein, require a fully executed guaranty by a third party acceptable to Landlord, elect to terminate this Lease, or hold Tenant personally and individually liable hereunder.</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">IN WITNESS WHEREOF, the parties hereto have executed this Lease the day and year first above written or have caused this Lease to be executed by their respective officers thereunto duly authorized. </P>
<P style="margin:0px"><BR></P>
<P style="margin-top:0px; margin-bottom:-2px; width:288px; font-size:12pt; float:left">TEMPLE CB, LLC</P>
<P style="margin:0px; text-indent:-2px; font-size:12pt">OKRA ENERGY, INC.</P>
<P style="margin:0px; clear:left"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin-top:0px; margin-bottom:-2px; width:288px; font-size:12pt; float:left">/s/ Jay Hooper</P>
<P style="margin:0px; text-indent:-2px; font-size:12pt">Jay Hooper</P>
<P style="margin-top:0px; margin-bottom:-2px; width:288px; font-size:12pt; clear:left; float:left">Jay Hooper, Manager &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</P>
<P style="margin:0px; text-indent:-2px; font-size:12pt">Jay Hooper, President</P>
<P style="margin:0px; clear:left"><BR></P>
<P style="line-height:12pt; margin:0px; text-indent:336px; font-family:Arial; font-size:12pt">&nbsp;</P>
<P style="line-height:12pt; margin-top:0px; margin-bottom:-2px; width:240px; font-size:12pt; float:left">STATE OF CALIFORNIA</P>
<P style="line-height:12pt; margin:0px; text-indent:-2px; font-size:12pt" align=justify>}</P>
<P style="line-height:12pt; margin-top:0px; margin-bottom:-2px; text-indent:240px; width:288px; font-size:12pt; clear:left; float:left">}</P>
<P style="line-height:12pt; margin:0px; text-indent:-2px; font-size:12pt" align=justify>ss.</P>
<P style="line-height:12pt; margin:0px; font-size:12pt; clear:left" align=justify>COUNTY OF LOS ANGELES &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</P>
<P style="line-height:12pt; margin:0px" align=justify><BR></P>
<P style="line-height:12pt; margin:0px; text-indent:49.467px; font-size:12pt">On this __ day of &nbsp;December, &nbsp;2013, before me, the undersigned, a Notary Public in and for said County and State, residing therein, duly commissioned and sworn, personally appeared &nbsp;Jay Hooper, personally known to me (or proved to me on the basis of satisfactory evidence) to be the person whose name is subscribed to the within instrument and acknowledged to me that he executed the same in his authorized capacity, and that by his signature on the instrument the person, or the entity upon behalf of which the person acted, executed the instrument.</P>
<P style="line-height:12pt; margin:0px"><BR></P>
<P style="line-height:12pt; margin:0px; text-indent:49.467px; font-size:12pt" align=justify>WITNESS my hand and official seal.</P>
<P style="line-height:12pt; margin:0px" align=justify><BR></P>
<P style="line-height:12pt; margin:0px; text-indent:336px; font-size:12pt" align=justify>Signature:</P>
<P style="line-height:12pt; margin:0px" align=justify><BR></P>
<P style="line-height:12pt; margin:0px; text-indent:336px; font-size:12pt" align=justify>Name (typed or printed)</P>
<P style="line-height:12pt; margin:0px" align=justify><BR></P>
<P style="line-height:12pt; margin:0px; text-indent:336px; font-size:12pt" align=justify>My Commission expires:</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt" align=center>EXHIBIT &quot;A&quot; LEGAL DESCRIPTION</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">The following described real property, together with all improvements thereon: </P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Initials: </P>
<P style="margin:0px; font-size:12pt">LANDLORD &nbsp;______________</P>
<P style="margin:0px; font-size:12pt">TENANT &nbsp;&nbsp;______________</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">EXHIBIT &quot;B&quot; TENANT PLANS AND SPECIFICATIONS</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
<P style="margin:0px; font-size:12pt">Initials: </P>
<P style="margin:0px; font-size:12pt">LANDLORD &nbsp;_____________</P>
<P style="margin:0px; font-size:12pt">TENANT &nbsp;&nbsp;_____________</P>
<P style="margin:0px; font-size:12pt">&nbsp;</P>
<P style="margin:0px"><BR>
<BR></P>
<P style="margin:0px; font-size:12pt" align=center>1</P>
<P style="margin:0px"><BR></P>
<P style="margin:0px"><BR></P>
</DIV></BODY>
<!-- EDGAR Validation Code: C237D44C -->
</HTML>
</TEXT>
</DOCUMENT>
</file>

<file path="examples/extract/lease.txt">
EX-10 2 elmonteleaseforfiling.htm MATERIAL CONTRACT
COMMERCIAL LEASE AGREEMENT



THIS LEASE AGREEMENT is made and entered into on December 1, 2013, by and between Temple CB, LLC, whose address is 4350 Temple City Boulevard, El Monte, California 91731 (hereinafter referred to as "Landlord"), and Okra Energy, Inc., whose address is 4350 Temple City Boulevard, El Monte, California 91731 (hereinafter referred to as "Tenant").



ARTICLE I - GRANT OF LEASE



Landlord, in consideration of the rents to be paid and the covenants and agreements to be performed and observed by the Tenant, does hereby lease to the Tenant and the Tenant does hereby lease and take from the Landlord the property described in Exhibit "A" attached hereto and by reference made a part hereof (the "Leased Premises"), together with, as part of the parcel, all improvements located thereon.



ARTICLE II - LEASE TERM



Section l.  Term of Lease.  The term of this Lease shall begin on the Commencement Date, as defined in Section 2 of this Article II, and shall terminate on May 31, 2020 ("the Termination Date"); provided, however, that at the option of Tenant, Tenant may renew this Lease for five additional successive one- year terms at a Monthly Rent of $100,000 per month, provided that notice of such renewal is given in writing no less than 120 days prior to the Termination Date or the expiration of any one-year renewal term. Tenant may at any time cancel this Lease and terminate all of its obligations hereunder by the payment of $300,000, plus all other amounts then due under this Lease.



Section 2.  Commencement Date. The "Commencement Date" shall mean  December 1, 2013.



ARTICLE III - EXTENSIONS



The parties hereto may elect to extend this Agreement upon such terms and conditions as may be agreed upon in writing and signed by the parties at the time of any such extension.



ARTICLE IV - DETERMINATION OF RENT



Section 1. Monthly Rent: The Tenant agrees to pay the Landlord and the Landlord agrees to accept, during the term hereof, at such place as the Landlord shall from time to time direct by notice to the Tenant, monthly rent set forth in the following table:



Initial Period of December 1, 2013 to May 31, 2014:
$ 0

June 1, 2014 to May 31, 2015:
$ 30,000

June 1, 2015 to May 31, 2016:
$ 40,000

June 1, 2016 to May 31, 2017:
$ 50,000

June 1, 2017 to May 31, 2018:
$ 60,000

June 1, 2019 to May 31, 2020:
$ 70,000



Section 2.  Late Fee.  A late fee in the amount of 5% of the Monthly Rent shall be assessed if payment is not postmarked or received by Landlord on or before the tenth day of each month.



ARTICLE V - SECURITY DEPOSIT



The Tenant has deposited with the Landlord the sum of Twenty Thousand Dollars ($20,000.00) as security for the full and faithful performance by the Tenant of all the terms of this lease required to be performed by the Tenant. Such sum shall be returned to the Tenant after the expiration of this lease, provided the Tenant has fully and faithfully carried out all of its terms. In the event of a bona fide sale of the property of which the leased premises are a part, the Landlord shall have the right to transfer the security to the purchaser to be held under the terms of this lease, and the Landlord shall be released from all liability for the return of such security to the Tenant.



ARTICLE VI - TAXES



Section l.  Personal Property Taxes.  The Tenant shall be liable for all taxes levied against any leasehold interest of the Tenant or personal property and trade fixtures owned or placed by the Tenant in the Leased Premises.



Section 2.  Real Estate Taxes.  During the continuance of this lease Landlord shall deliver to Tenant a copy of any real estate taxes and assessments against the Leased Property. From and after the Commencement Date, the Tenant shall pay to Landlord not later than twenty-one (21) days after the day on which the same may become initially due, all real estate taxes and assessments applicable to the Leased Premises, together with any interest and penalties lawfully imposed thereon as a result of Tenant's late payment thereof, which shall be levied upon the Leased Premises during the term of this Lease.



Section 3.  Contest of Taxes.  The Tenant, at its own cost and expense, may, if it shall in good faith so desire, contest by appropriate proceedings the amount of any personal or real property tax. The Tenant may, if it shall so desire, endeavor at any time or times, by appropriate proceedings, to obtain a reduction in the assessed valuation of the Leased Premises for tax purposes. In any such event, if the Landlord agrees, at the request of the Tenant, to join with the Tenant at Tenant's expense in said proceedings and the Landlord agrees to sign and deliver such papers and instruments as may be necessary to prosecute such proceedings, the Tenant shall have the right to contest the amount of any such tax and the Tenant shall have the right to withhold payment of any such tax, if the statute under which the Tenant is contesting such tax so permits.



Section 4.  Payment of Ordinary Assessments.  The Tenant shall pay all assessments, ordinary and extraordinary, attributable to or against the Leased Premises not later than twenty-one (21) days after the day on which the same became initially due. The Tenant may take the benefit of any law allowing assessments to be paid in installments and in such event the Tenant shall only be liable for such installments of assessments due during the term hereof.
</file>

<file path="examples/extract/least-truncated.txt">
THIS LEASE AGREEMENT is made and entered into on December 1, 2013, by and between Temple CB, LLC, whose address is 4350 Temple City Boulevard, El Monte, California 91731 (hereinafter referred to as "Landlord"), and Okra Energy, Inc., whose address is 4350 Temple City Boulevard, El Monte, California 91731 (hereinafter referred to as "Tenant").



ARTICLE I - GRANT OF LEASE



Landlord, in consideration of the rents to be paid and the covenants and agreements to be performed and observed by the Tenant, does hereby lease to the Tenant and the Tenant does hereby lease and take from the Landlord the property described in Exhibit "A" attached hereto and by reference made a part hereof (the "Leased Premises"), together with, as part of the parcel, all improvements located thereon.



ARTICLE II - LEASE TERM



Section l.  Term of Lease.  The term of this Lease shall begin on the Commencement Date, as defined in Section 2 of this Article II, and shall terminate on May 31, 2020 ("the Termination Date"); provided, however, that at the option of Tenant, Tenant may renew this Lease for five additional successive one- year terms at a Monthly Rent of $100,000 per month, provided that notice of such renewal is given in writing no less than 120 days prior to the Termination Date or the expiration of any one-year renewal term. Tenant may at any time cancel this Lease and terminate all of its obligations hereunder by the payment of $300,000, plus all other amounts then due under this Lease.



Section 2.  Commencement Date. The "Commencement Date" shall mean  December 1, 2013.



ARTICLE III - EXTENSIONS



The parties hereto may elect to extend this Agreement upon such terms and conditions as may be agreed upon in writing and signed by the parties at the time of any such extension.



ARTICLE IV - DETERMINATION OF RENT



Section 1. Monthly Rent: The Tenant agrees to pay the Landlord and the Landlord agrees to accept, during the term hereof, at such place as the Landlord shall from time to time direct by notice to the Tenant, monthly rent set forth in the following table:



Initial Period of December 1, 2013 to May 31, 2014:
$ 0

June 1, 2014 to May 31, 2015:
$ 30,000

June 1, 2015 to May 31, 2016:
$ 40,000

June 1, 2016 to May 31, 2017:
$ 50,000

June 1, 2017 to May 31, 2018:
$ 60,000

June 1, 2019 to May 31, 2020:
$ 70,000



Section 2.  Late Fee.  A late fee in the amount of 5% of the Monthly Rent shall be assessed if payment is not postmarked or received by Landlord on or before the tenth day of each month.



ARTICLE V - SECURITY DEPOSIT



The Tenant has deposited with the Landlord the sum of Twenty Thousand Dollars ($20,000.00) as security for the full and faithful performance by the Tenant of all the terms of this lease required to be performed by the Tenant. Such sum shall be returned to the Tenant after the expiration of this lease, provided the Tenant has fully and faithfully carried out all of its terms. In the event of a bona fide sale of the property of which the leased premises are a part, the Landlord shall have the right to transfer the security to the purchaser to be held under the terms of this lease, and the Landlord shall be released from all liability for the return of such security to the Tenant.
</file>

<file path="examples/extract/README.md">
Structured information extraction from text documents, 
using Langroid tools or OpenAI function calling.
</file>

<file path="examples/kg-chat/cypher_message.py">
CONSTRUCT_DEPENDENCY_GRAPH = """
        with "{package_type}" as system, "{package_name}" as name, "{package_version}" as version

        call apoc.load.json("https://api.deps.dev/v3alpha/systems/"+system+"/packages/"
                            +name+"/versions/"+version+":dependencies")
        yield value as r
        
        call {{ with r
                unwind r.nodes as package
                merge (p:Package:PyPi {{name: package.versionKey.name, version: package.versionKey.version}})
                return collect(p) as packages
        }}
        call {{ with r, packages
            unwind r.edges as edge
            with packages[edge.fromNode] as from, packages[edge.toNode] as to, edge
            merge (from)-[rel:DEPENDS_ON]->(to) ON CREATE SET rel.requirement 
            = edge.requirement
            return count(*) as numRels
        }}
        
        match (root:Package:PyPi) where root.imported is null
        set root.imported = true
        with "{package_type}" as system, root.name as name, root.version as version
        call apoc.load.json("https://api.deps.dev/v3alpha/systems/"+system+"/packages/"
                            +name+"/versions/"+version+":dependencies")
        yield value as r
        
        call {{ with r
                unwind r.nodes as package
                merge (p:Package:PyPi {{name: package.versionKey.name, version: package.versionKey.version}})
                return collect(p) as packages
        }}
        call {{ with r, packages
                unwind r.edges as edge
                with packages[edge.fromNode] as from, packages[edge.toNode] as to, edge
                merge (from)-[rel:DEPENDS_ON]->(to) ON CREATE SET 
                rel.requirement = edge.requirement
                return count(*) as numRels
        }}
        return size(packages) as numPackages, numRels
        """
</file>

<file path="examples/kg-chat/movies.cypher">
// Create movie nodes
CREATE (TheMatrix:movie {title:'The Matrix', released:1999, tagline:'Welcome to the Real World'})
CREATE (TheMatrixReloaded:movie {title:'The Matrix Reloaded', released:2003, tagline:'Free your mind'})
CREATE (TheMatrixRevolutions:movie {title:'The Matrix Revolutions', released:2003, tagline:'Everything that has a beginning has an end'})
CREATE (ForrestGump:movie {title:"Forrest Gump", released:1994, tagline:"Life is like a box of chocolates..."})
CREATE (Inception:movie {title:"Inception", released:2010, tagline:"Your mind is the scene of the crime"})
CREATE (TheDarkKnight:movie {title:"The Dark Knight", released:2008, tagline:"Why So Serious?"})
CREATE (Interstellar:movie {title:"Interstellar", released:2014, tagline:"Mankind was born on Earth. It was never meant to die here."})
CREATE (PulpFiction:movie {title:"Pulp Fiction", released:1994, tagline:"Just because you are a character doesn't mean you have character."})

// Create Person nodes
CREATE (Keanu:Person {name:'Keanu Reeves', born:1964})
CREATE (Carrie:Person {name:'Carrie-Anne Moss', born:1967})
CREATE (Laurence:Person {name:'Laurence Fishburne', born:1961})
CREATE (Hugo:Person {name:'Hugo Weaving', born:1960})
CREATE (LillyW:Person {name:'Lilly Wachowski', born:1967})
CREATE (LanaW:Person {name:'Lana Wachowski', born:1965})
CREATE (JoelS:Person {name:'Joel Silver', born:1952})
CREATE (TomH:Person {name:'Tom Hanks', born:1956})
CREATE (RobertZ:Person {name:'Robert Zemeckis', born:1951})
CREATE (LeonardoD:Person {name:'Leonardo DiCaprio', born:1974})
CREATE (JosephGL:Person {name:'Joseph Gordon-Levitt', born:1981})
CREATE (EllenP:Person {name:'Ellen Page', born:1987})
CREATE (ChristopherN:Person {name:'Christopher Nolan', born:1970})
CREATE (ChristianB:Person {name:'Christian Bale', born:1974})
CREATE (HeathL:Person {name:'Heath Ledger', born:1979})
CREATE (MichaelC:Person {name:'Michael Caine', born:1933})
CREATE (MatthewM:Person {name:'Matthew McConaughey', born:1969})
CREATE (AnneH:Person {name:'Anne Hathaway', born:1982})
CREATE (JohnT:Person {name:'John Travolta', born:1954})
CREATE (UmaT:Person {name:'Uma Thurman', born:1970})
CREATE (SamuelLJ:Person {name:'Samuel L. Jackson', born:1948})
CREATE (QuentinT:Person {name:'Quentin Tarantino', born:1963})

// Create relationships for The Matrix trilogy
CREATE
(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrix),
(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrix),
(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrix),
(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrix),
(LillyW)-[:DIRECTED]->(TheMatrix),
(LanaW)-[:DIRECTED]->(TheMatrix),
(JoelS)-[:PRODUCED]->(TheMatrix),
(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrixReloaded),
(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrixReloaded),
(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrixReloaded),
(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrixReloaded),
(LillyW)-[:DIRECTED]->(TheMatrixReloaded),
(LanaW)-[:DIRECTED]->(TheMatrixReloaded),
(JoelS)-[:PRODUCED]->(TheMatrixReloaded),
(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrixRevolutions),
(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrixRevolutions),
(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrixRevolutions),
(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrixRevolutions),
(LillyW)-[:DIRECTED]->(TheMatrixRevolutions),
(LanaW)-[:DIRECTED]->(TheMatrixRevolutions),
(JoelS)-[:PRODUCED]->(TheMatrixRevolutions)

// Create relationships for Forrest Gump
CREATE
(TomH)-[:ACTED_IN {roles:['Forrest Gump']}]->(ForrestGump),
(RobertZ)-[:DIRECTED]->(ForrestGump)

// Create relationships for Inception
CREATE
(LeonardoD)-[:ACTED_IN {roles:['Cobb']}]->(Inception),
(JosephGL)-[:ACTED_IN {roles:['Arthur']}]->(Inception),
(EllenP)-[:ACTED_IN {roles:['Ariadne']}]->(Inception),
(ChristopherN)-[:DIRECTED]->(Inception)

// Create relationships for The Dark Knight
CREATE
(ChristianB)-[:ACTED_IN {roles:['Bruce Wayne']}]->(TheDarkKnight),
(HeathL)-[:ACTED_IN {roles:['Joker']}]->(TheDarkKnight),
(MichaelC)-[:ACTED_IN {roles:['Alfred']}]->(TheDarkKnight),
(ChristopherN)-[:DIRECTED]->(TheDarkKnight)

// Create relationships for Interstellar
CREATE
(MatthewM)-[:ACTED_IN {roles:['Cooper']}]->(Interstellar),
(AnneH)-[:ACTED_IN {roles:['Brand']}]->(Interstellar),
(MichaelC)-[:ACTED_IN {roles:['Professor Brand']}]->(Interstellar),
(ChristopherN)-[:DIRECTED]->(Interstellar)

// Create relationships for Pulp Fiction
CREATE
(JohnT)-[:ACTED_IN {roles:['Vincent Vega']}]->(PulpFiction),
(UmaT)-[:ACTED_IN {roles:['Mia Wallace']}]->(PulpFiction),
(SamuelLJ)-[:ACTED_IN {roles:['Jules Winnfield']}]->(PulpFiction),
(QuentinT)-[:DIRECTED]->(PulpFiction)

// Add some REVIEWED relationships
CREATE
(ChristopherN)-[:REVIEWED {rating: 8}]->(TheMatrix),
(QuentinT)-[:REVIEWED {rating: 9}]->(Inception),
(RobertZ)-[:REVIEWED {rating: 10}]->(TheDarkKnight),
(LeonardoD)-[:REVIEWED {rating: 9}]->(PulpFiction)
</file>

<file path="examples/kg-chat/README.md">
# Reterival over Knowledge Graphs

This folder contains two examples to demonistrate how to use `langroid` to build a chatbot that can answer questions about a knowledge graph.
The first example is a **PyPi Packages Dependency Chatbot** that can answer questions about a dependency graph of a `PyPi` package. 
The second example is a **CSV Chat** that can answer questions about a CSV knowledge graph.

## Requirements:

**1. NEO4j:**

This example relies on the `neo4j` Database. The easiest way to get access to neo4j is
by creating a cloud account at [Neo4j Aura](https://neo4j.com/cloud/platform/aura-graph-database/). OR you
can use Neo4j Docker image using this command:

```bash
docker run --rm \
    --name neo4j \
    -p 7474:7474 -p 7687:7687 \
    -e NEO4J_AUTH=neo4j/password \
    neo4j:latest
```

Upon creating the account successfully, neo4j will create a text file that contains
account settings, please provide the following information (uri, username,
password, and database), while creating the constructor `Neo4jChatAgentConfig`. 
These settings can be set inside the `.env` file as shown in [`.env-template`](../../.env-template)

**2. Google Custom Search API Credentials** 
needed to enable an Agent to use the `GoogleSearchTool`. 
Follow the [instruction](https://github.com/langroid/langroid?tab=readme-ov-file#gear-installation-and-setup) under `Optional Setup Instructions` to get these API credentials. 

**3. Visualization**
The package `pyvis` is required to enable the visualization tool `VisualizeGraph`. 
Run ``pip install pyvis`` to install this package.

## 1- PyPi Packages Dependency Chatbot

This example uses a `DependencyGraphAgent` 
(derived from [`Neo4jChatAgent`](https://github.com/langroid/langroid/blob/main/langroid/agent/special/neo4j/neo4j_chat_agent.py)).
It auto-generates a `neo4j` knowledge-graph based on the dependency
structure of a given `PyPi` package. You can then ask the chatbot questions
about the dependency graph. This agent uses three tools in addition to those 
already available to `Neo4jChatAgent`:

- DepGraphTool to build the dependency graph for a given pkg version, using the API
   at [DepsDev](https://deps.dev/)
- GoogleSearchTool to find package version and type information. It also can answer
other question from the web about other aspects after obtaining the intended information
from the dependency graph. For examples:
  - Is this package/version vulnerable?
  - does the dpendency use latest version for this package verion?
  - Can I upgrade this package in the dependency graph?

The `Neo4jChatAgent` has access to these tools/function-calls:

- `GraphSchemaTool`: get schema of Neo4j knowledge-graph
- `CypherRetrievalTool`: generate cypher queries to get information from
   Neo4j knowledge-graph (Cypher is the query language for Neo4j)
- `VisualizeGraph`: supports only visualizing the the whole dependency graph

### Running the example

Run like this:
```
python3 examples/kg-chat/dependency_chatbot.py
```

`DependencyAgent` then will ask you to provide the name of the `PyPi` package.
It will then the tool `GoogleSearchTool` to get the version of
this package (you can skip this process by providing the intended version).
The `DependencyAgent` agent will ask to confirm the version number before
proceeding with constructing the dependency graph.

Finally, after constructing the dependency graph, you can ask `DependencyAgent`
questions about the dependency graph such as these (specific package names are
used here for illustration purposes, but of course you can use other names):

- what's the depth of the graph?
- what are the direct dependencies?
- any dependency on pytorch? which version?
- Is this package pytorch vunlnerable?
  (Note that in this case the `DependencyAgent` agent will consult the 
  tool `GoogleSearchTool` to get an answer from the internet.)
- tell me 3 interesting things about this package or dependency graph
- what's the path between package-1 and package-2? (provide names of package-1
  and -2)
- Tell me the names of all packages in the dependency graph that use pytorch.

**NOTE:** the dependency graph is constructed based
on [DepsDev API](https://deps.dev/). Therefore, the Chatbot will not be able to
construct the dependency graph if this API doesn't provide dependency metadata
infromation. 

## 2- CSV Chat

This example uses a `CSVGraphAgent` 
(derived from [`Neo4jChatAgent`](https://github.com/langroid/langroid/blob/main/langroid/agent/special/neo4j/neo4j_chat_agent.py)).

The `CSVGraphAgent` allows users to ask questions about a CSV file by 
automatically converting it into a Neo4j knowledge graph using Cypher queries. 
This enables capturing complex relationships that cannot be easily
handled by libraries like `pandas`.

If the CSV knowledge graph has not been constructed beforehand, the `CSVGraphAgent`
provides the `pandas_to_kg` tool/function-call to create the necessary nodes and
relationships from the CSV file. Once the CSV knowledge graph is constructed,
the `CSVGraphAgent` can answer questions related to the CSV knowledge graph.
The `CSVGraphAgent` has access to this tool/function-call:

- `PandasToKGTool`: convert a `pandas` DataFrame into a CSV knowledge graph.

### Running the example

Run like this:
```
python3 examples/kg-chat/csv-chat.py
```

The `CSVGraphAgent` will have a dialog with the user to determine if they need to
construct the knowledge graph. If the user chooses to construct the knowledge graph, they
will be prompted to provide the location of the CSV file (URL or local file).

Under the hood, the agent will:

- Attempt to clean the CSV file after parsing it as a `DataFrame`.
- Determine node labels and relationships.
- Create the nodes and relationships in the Neo4j knowledge graph.

After constructing the CSV knowledge graph, you can ask the `CSVGraphAgent` any question
about the CSV knowledge graph. You can use [this IMDB CSV file](https://raw.githubusercontent.com/langroid/langroid-examples/main/examples/docqa/data/movies/IMDB.csv) 
or you can use your own CSV file.

**NOTES:**

- Unlike some other CSV -> Neo4j examples out there, here we are relying on the LLM
  to infer nodes and relationships from the CSV file, and generate the necessary
    Cypher queries to create the CSV knowledge graph. This is more flexible than
    a hard-coded approach.
- The agent will warn you if the CSV file is too large before proceeding with
  constructing the CSV knowledge graph. It will also give you the option to proceed with
  constructing the CSV knowledge graph based on a sample of the CSV file (i.e., a
  specified number of rows).
- The agent uses the function `_preprocess_dataframe_for_neo4j()` to clean the CSV file
  by removing rows that have empty values. However, you can provide your own function to
  clean the CSV file.
</file>

<file path="examples/langdb/README.md">
# LangDB Examples

This folder contains examples demonstrating how to use [LangDB](https://langdb.com) with Langroid for advanced LLM observability and monitoring.

## Prerequisites

Before running any examples, make sure you've installed Langroid as usual.


At minimum, have these environment variables set up in your `.env` file or environment:
```bash
LANGDB_API_KEY=your_api_key_here
LANGDB_PROJECT_ID=your_project_id_here
```

### 1. LangDB Chat Agent with Document RAG (`langdb_chat_agent_docs.py`)

Demonstrates Retrieval Augmented Generation (RAG) with LangDB integration:
- Ingests documents into a vector database
- Uses LangDB for both chat completions and embeddings
- Tracks all interactions with custom headers for observability

```python
# Run the example
python langdb_chat_agent_docs.py
```

### 2. LangDB Chat Agent with Tool (`langdb_chat_agent_tool.py`)

Shows how to use LangDB with function-calling capabilities:
- Implements a number-guessing game using tools
- Demonstrates custom header usage for request tracking
- Shows how to integrate LangDB with stateful agents

```python
# Run the example
python langdb_chat_agent_tool.py
```

### 3. LangDB Custom Headers (`langdb_custom_headers.py`)

Showcases LangDB's observability features:
- `x-label`: Tag requests for filtering in the LangDB dashboard
- `x-thread-id`: Track conversation threads (UUID format)
- `x-run-id`: Group related requests together

```python
# Run the example
python langdb_custom_headers.py
```

## Using LangDB

### Configuring LLM and Embeddings

LangDB can be used for both chat completions and embeddings:

```python
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig, LangDBParams
from langroid.vector_store.qdrant import QdrantDBConfig
import os
import uuid

# Generate IDs for request tracking
run_id = str(uuid.uuid4())
thread_id = str(uuid.uuid4())

# Configure LLM with LangDBParams
llm_config = OpenAIGPTConfig(
    chat_model="langdb/openai/gpt-4",  # LangDB model prefix
    langdb_params=LangDBParams(
        label='my-app',
        thread_id=thread_id,  # For conversation tracking
        run_id=run_id,        # For request grouping
        # project_id, api_key are used from the env vars
        # LANGDB_API_KEY, LANGDB_PROJECT_ID respectively
    )
)

# Configure embeddings
vecdb_config = QdrantDBConfig(
    collection_name="my-docs",
    embedding=OpenAIEmbeddingsConfig(
        model_name="langdb/openai/text-embedding-3-small",
        # langdb_params will contain api_key from env var LANGDB_API_KEY
    )
)
```

### Custom Headers

LangDB provides special headers for request tracking through the LangDBParams class:

```python
# Generate a thread ID
import uuid
import os
from langroid.language_models.openai_gpt import OpenAIGPTConfig, LangDBParams

# Generate tracking IDs using UUID
thread_id = str(uuid.uuid4())
run_id = str(uuid.uuid4())  # Use UUID for run_id as well

# Configure with LangDBParams
config = OpenAIGPTConfig(
    chat_model="langdb/openai/gpt-4o-mini",
    langdb_params=LangDBParams(
        label="my-label",
        thread_id=thread_id,
        run_id=run_id,
        # project_id is set via env var LANGDB_PROJECT_ID
        # api_key is set via env var LANGDB_API_KEY
    )
)
```

### Viewing Results

1. Visit the [LangDB Dashboard](https://dashboard.langdb.com)
2. Navigate to your project
3. Use filters to find your requests:
   - Search by label, thread ID, or run ID
   - View detailed request/response information
   - Analyze token usage and costs

## Best Practices

1. **Unique Thread IDs**: Always generate new UUIDs for conversation threads
2. **Descriptive Labels**: Use meaningful labels to identify different parts of your application
3. **Consistent Run IDs**: Group related requests under the same run ID
4. **Environment Variables**: Never hardcode API keys or project IDs

## Troubleshooting

Common issues and solutions:

1. **Authentication Errors**:
   - Verify `LANGDB_API_KEY` is set correctly
   - Check if the key has the necessary permissions

2. **Model Not Found**:
   - Ensure the model name includes the `langdb/` prefix
   - Verify the model is available in your subscription

3. **Header Issues**:
   - Thread IDs must be valid UUIDs
   - Labels should be URL-safe strings

For more help, visit the [LangDB Documentation](https://docs.langdb.com).


```python
# Generate a proper UUID for thread-id
import uuid
import os
from langroid.language_models.openai_gpt import OpenAIGPTConfig, LangDBParams

thread_id = str(uuid.uuid4())
run_id = str(uuid.uuid4())

# Create a LangDB model configuration with LangDBParams
langdb_config = OpenAIGPTConfig(
    chat_model="langdb/openai/gpt-4o-mini",
    langdb_params=LangDBParams(
        label='langroid',
        run_id=run_id,
        thread_id=thread_id,
        # project_id is set via env var LANGDB_PROJECT_ID
        # api_key is set via env var LANGDB_API_KEY
    )
)

# The headers will be automatically added to requests
```

These parameters allow you to track and organize your LangDB requests. While these parameters can be used with any model provider, they are only meaningful when used with LangDB.

**Note**: The `thread_id` and `run_id` parameters must be a valid UUID format. 
The examples use `uuid.uuid4()` to generate a proper UUID.
</file>

<file path="examples/langdb/requirements.txt">
langroid
python-dotenv
</file>

<file path="examples/multi-agent-debate/README.md">
Debate System Using LLM Agents
==============================

Overview
--------
This project is a debate system powered by LLMs using Langroid, enabling structured debates on various topics 
such as AI in healthcare, education, intellectual property, and societal biases. 
The program creates and manages agents that represent opposing sides of a debate, 
interact with users, and provide constructive feedback based on established debate criteria.

New Topics and Pro and Con Side System messages can be manually configured by updating or modifying the 
system_messages.json File. 
"pro_ai": {
        "topic": "Your New TOPIC",
        "message": " YOUR Prompt"
    },
"con_ai": {
        "topic": "Your New TOPIC",
        "message": " YOUR CON or opposing Prompt"
        }

Features
--------
- Multiple Debate Topics:
  - AI in Healthcare
  - AI and Intellectual Property
  - AI and Societal Biases
  - AI as an Educator
- Agent-Based Interaction:
  - Pro and Con agents for each topic simulate structured debate arguments.
- Configurable to use different LLMs from OPENAI, Google, & Mistral: 
  -       1: gpt-4o
          2: gpt-4
          3: gpt-4o-mini
          4: gpt-4-turbo
          5: gpt-4-32k
          6: gpt-3.5-turbo-1106 
          7: Mistral: mistral:7b-instruct-v0.2-q8_0a
          8: Gemini:gemini-2.0-flash
          9: Gemini:gemini-1.5-flash
          10: Gemini:gemini-1.5-flash-8b
          11: Gemini:gemini-1.5-pro
- Feedback Mechanism:
  - Provides structured feedback on debate performance based on key criteria.
- Interactive or Autonomous Mode:
  - Users can either control interactions manually or let agents autonomously continue debates.

File Structure
--------------
- main.py: The entry point of the application. Initializes the system, configures agents, and starts the debate loop.
- config.py: Provides functions for configuring global settings and LLM-specific parameters.
- model.py: Pydantic model for system_messages.json
- system_messages.json: Topic Titles and system_messages for pro and con agents. You can add more topics and their
respective pro and con system messages here. The system_messages has a statement: 
"Limit responses to MAXIMUM 2 points expressed as single sentences." Please change or delete it for a realistic debate. 
- system_message.py: Global system messages
- utils.py: User Prompts and other helper functions
- generation_config_models.py: pydantic model for generation_config.json
- generation_config.json: LLM generation parameters
- main_chainlit.py: The entry point of the Chainlit version of the application
- chainlit_utils.py: Relevant chainlit utility functions.
The system dynamically updates user selection with the topics from this file. 

Getting Started
---------------
Prerequisites
1. Python 3.8+
2. Langroid Framework: Install Langroid with necessary dependencies:
   pip install "langroid[litellm]"
3. Setup the following env variables in the .env File in the root of your repo
or set them on your terminal.
       export OPENAI_API_KEY=OPEN AI KEY
       export GEMINI_API_KEY=GEMiNi API KEY
       export METAPHOR_API_KEY=METAPHOR_API_KEY
4. Please read the following page for more information:
   https://langroid.github.io/langroid/quick-start/setup/

Usage
-----
Run the CLI Application
Start the application from the root of the langroid repo with:
   python examples/multi-agent-debate/main.py

Options
- Debug Mode: Run the program with debug logs for detailed output.
  python examples/multi-agent-debate/main.py --debug
- Disable Caching: Avoid using cached responses for LLM interactions.
  python examples/multi-agent-debate/main.py --nocache

Run the Chainlit App
chainlit run examples/multi-agent-debate/main_chainlit.py


Interaction
1. Decide if you want to you use same LLM for all agents or different ones
2. Decide if you want autonomous debate between AI Agents or user vs. AI Agent. 
3. Select a debate topic.
4. Choose your side (Pro or Con).
5. Engage in a debate by providing arguments and receiving responses from agents.
6. Request feedback at any time by typing `f`.
7. Decide if you want the Metaphor Search to run to find Topic relevant web links
   and summarize them. 
8. Decide if you want to chat with the documents extracted from URLs found to learn more about the Topic.
9. End the debate manually by typing "done". If you decide to chat with the documents, you can end session
by typing `x`

Feedback Criteria
-----------------
The feedback mechanism evaluates debates based on:
1. Clash of Values
2. Argumentation
3. Cross-Examination
4. Rebuttals
5. Persuasion
6. Technical Execution
7. Adherence to Debate Etiquette
8. Final Focus

License
-------
This project is licensed under the MIT License.
</file>

<file path="examples/quick-start/chat-agent.py">
"""
This example shows how you can use Langroid to define a basic Agent
encapsulating a chat LLM, and use it to set up an interactive chat session.

Run as follows:

python3 examples/quick-start/chat-agent.py

More details in the
[Getting Started guide](https://langroid.github.io/langroid/quick-start/chat-agent/)
"""

import typer
from rich import print

import langroid as lr

app = typer.Typer()

lr.utils.logging.setup_colored_logging()


def chat() -> None:
    print(
        """
        [blue]Welcome to the basic chatbot!
        Enter x or q to quit
        """
    )
    config = lr.ChatAgentConfig(
        llm=lr.language_models.OpenAIGPTConfig(
            chat_model=lr.language_models.OpenAIChatModel.GPT4o,
        ),
        vecdb=None,
    )
    agent = lr.ChatAgent(config)
    task = lr.Task(agent, name="Bot")
    task.run()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    lr.utils.configuration.set_global(
        lr.utils.configuration.Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    chat()


if __name__ == "__main__":
    app()
</file>

<file path="examples/quick-start/quick-start.ipynb">
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "initial_id",
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
</file>

<file path="examples/quick-start/try-llm.py">
"""
This example shows how to use Langroid to interact directly with an OpenAI GPT chat model,
i.e., without wrapping it in an Agent.

Run as follows:

python3 examples/quick-start/try-llm.py

For more explanation see the
[Getting Started guide](https://langroid.github.io/langroid/quick-start/llm-interaction/)
"""

import typer
from rich import print
from rich.prompt import Prompt

import langroid as lr

Role = lr.language_models.Role
LLMMessage = lr.language_models.LLMMessage

app = typer.Typer()


def chat() -> None:
    print("[blue]Welcome to langroid!")

    cfg = lr.language_models.OpenAIGPTConfig(
        chat_model=lr.language_models.OpenAIChatModel.GPT4o,
    )

    mdl = lr.language_models.OpenAIGPT(cfg)
    messages = [
        LLMMessage(role=Role.SYSTEM, content="You are a helpful assitant"),
    ]
    while True:
        message = Prompt.ask("[blue]Human")
        if message in ["x", "q"]:
            print("[magenta]Bye!")
            break
        messages.append(LLMMessage(role=Role.USER, content=message))

        # use the OpenAI ChatCompletion API to generate a response
        response = mdl.chat(messages=messages, max_tokens=200)

        messages.append(response.to_LLMMessage())

        print("[green]Bot: " + response.message)


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    lr.utils.configuration.set_global(
        lr.utils.configuration.Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    chat()


if __name__ == "__main__":
    app()
</file>

<file path="examples/Langroid_quick_start.ipynb">
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyON/I7bOOJSDISyZ5jgP3eX",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/langroid/langroid/blob/main/examples/Langroid_quick_start.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Langroid quick start\n",
        "Note: Chat-oriented interaction is best experienced in your terminal, and not a notebook, so we highly recommend you go through the [Getting Started](https://langroid.github.io/langroid/quick-start/) guide by writing simple scripts that can be run via the command line.\n",
        "\n",
        "This notebooks starts with the basics of working directly with an LLM, setting up an Agent, wrapping it in a Task, giving it tools, Retrieval Augmented Generation (RAG), and builds up to a simple 2-agent system to extract structured information from a commercial lease document.\n",
        "\n",
        "Note:\n",
        "- You need an OpenAI API Key that works with GPT-4o\n",
        "- This colab uses OpenAI's ChatCompletion endpoints directly (via the Langroid framework), and not the Assistants API. See this [colab](https://colab.research.google.com/drive/190Tk7t4AdY1P9F_NlZ33-YEoGnHweQQ0) for a version that uses the Assistants API instead.\n",
        "- There are dependencies among the cells, so they are best run sequentially\n",
        "\n"
      ],
      "metadata": {
        "id": "b9fHPojfnbPy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Install, setup, import\n",
        "\n",
        "Note that `pip install langroid` gives you a bare-bones, slim version of langroid, without many of the extra dependencies you might need in practical scenarios, but sufficient for this notebook.\n",
        "\n",
        "See install instructions [here](https://github.com/langroid/langroid?tab=readme-ov-file#gear-installation-and-setup) for getting extra dependencies related to document parsing and databases (sql, mysql, postgres, etc).\n"
      ],
      "metadata": {
        "id": "psOMvEL0Gekz"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A8-Y_YPZutn6"
      },
      "source": [
        "\n",
        "\n",
        "!pip install uv\n",
        "!uv pip install --system langroid --prerelease disallow\n"
      ],
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# various unfortunate things that need to be done to\n",
        "# control colab notebook behavior.\n",
        "\n",
        "# (a) output width\n",
        "\n",
        "from IPython.display import HTML, display\n",
        "\n",
        "def set_css():\n",
        "  display(HTML('''\n",
        "  <style>\n",
        "    pre {\n",
        "        white-space: pre-wrap;\n",
        "    }\n",
        "  </style>\n",
        "  '''))\n",
        "get_ipython().events.register('pre_run_cell', set_css)\n",
        "\n",
        "# (b) logging related\n",
        "import logging\n",
        "logging.basicConfig(level=logging.ERROR)\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "import logging\n",
        "for logger_name in logging.root.manager.loggerDict:\n",
        "    logger = logging.getLogger(logger_name)\n",
        "    logger.setLevel(logging.ERROR)\n",
        "\n"
      ],
      "metadata": {
        "id": "rWwH6duUzAC6"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### OpenAI API Key (Needs GPT4o)"
      ],
      "metadata": {
        "id": "j-6vNfKW9J7b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# OpenAI API Key: Enter your key in the dialog box that will show up below\n",
        "# NOTE: colab often struggles with showing this input box,\n",
        "# if so, try re-running the above cell and then this one,\n",
        "# or simply insert your API key in this cell, though it's not ideal.\n",
        "\n",
        "import os\n",
        "\n",
        "from getpass import getpass\n",
        "\n",
        "os.environ['OPENAI_API_KEY'] = getpass('Enter your GPT4o-capable OPENAI_API_KEY key:', stream=None)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "uvTODlZv3yyT",
        "outputId": "a4cf7585-40ae-44ec-804c-9dc6c6554d77",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "  <style>\n",
              "    pre {\n",
              "        white-space: pre-wrap;\n",
              "    }\n",
              "  </style>\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Enter your GPT4o-capable OPENAI_API_KEY key:··········\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from langroid.pydantic_v1 import BaseModel\n",
        "import json\n",
        "import os\n",
        "\n",
        "import langroid as lr\n",
        "import langroid.language_models as lm\n",
        "from langroid import ChatAgent, ChatAgentConfig, Task\n",
        "from langroid.language_models.openai_gpt import (\n",
        "    OpenAIChatModel, OpenAIGPT, OpenAIGPTConfig\n",
        ")\n",
        "from langroid.agent.tool_message import ToolMessage\n",
        "\n",
        "from langroid.utils.logging import setup_colored_logging\n",
        "from langroid.utils.constants import NO_ANSWER\n",
        "from langroid.utils.configuration import settings\n",
        "settings.notebook = True\n",
        "settings.cache_type = \"fakeredis\""
      ],
      "metadata": {
        "id": "A5N0NQwc3jX_",
        "outputId": "a49311c1-ae75-4b71-a2df-994d1a6a0d75",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "  <style>\n",
              "    pre {\n",
              "        white-space: pre-wrap;\n",
              "    }\n",
              "  </style>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Example 1: Direct interaction with OpenAI LLM\n",
        "Langroid's `OpenAIGPT` class is a wrapper around the raw OpenAI API.\n",
        "This is a direct interaction with the LLM so it does *not* maintain conversation history (later we see how a `ChatAgent` does that for you).\n",
        "\n",
        "Related quick-start docs page: https://langroid.github.io/langroid/quick-start/llm-interaction/\n",
        "\n"
      ],
      "metadata": {
        "id": "8vDpiY0XHAkT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "llm_cfg = OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT4o)\n",
        "llm = OpenAIGPT(llm_cfg)\n",
        "\n",
        "response = llm.chat(\"What is the square of 3?\")\n",
        "assert \"9\" in response.message"
      ],
      "metadata": {
        "id": "9c5Av3rKHQIm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Example 2: Interact with a `ChatAgent`\n",
        "Langroid's `ChatAgent` is an abstraction that optionally encapsulates an LLM, vector-db, and tools. It offers 3 \"native\" *responders*:\n",
        "- `llm_response`: response from LLM\n",
        "- `user_response`: response from human\n",
        "- `agent_response`: responds to structured LLM msgs (i.e. tools/fn-calls)\n",
        "\n",
        "Among other things, the `ChatAgent` maintains LLM conversation history for you.\n",
        "\n",
        "Related quick-start doc page: https://langroid.github.io/langroid/quick-start/chat-agent/"
      ],
      "metadata": {
        "id": "_DvxMiJkgI_U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "agent_cfg = ChatAgentConfig(\n",
        "    llm = llm_cfg,\n",
        "    show_stats=False, # disable token/cost stats\n",
        ")\n",
        "agent = ChatAgent(agent_cfg)\n",
        "response = agent.llm_response(\"What is the sqaure of 5?\")\n",
        "response = agent.llm_response(\"What about 8?\")   # maintains conv history\n",
        "assert \"64\" in response.content"
      ],
      "metadata": {
        "id": "7hrJ6RgLg075"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Example 3: Wrap Agent in a Task, run it\n",
        "\n",
        "A `ChatAgent` agent has various *responders* (`llm_response`, `agent_response`, `user_response`) but there is no mechanism to *iterate* over these responders.\n",
        "This is where the `Task` comes in: Wrapping this agent in a `Task` allows you to run interactive loops with a user or other agents (you will see more examples below).\n",
        "\n",
        "Related quick-start doc:\n",
        "https://langroid.github.io/langroid/quick-start/chat-agent/#task-orchestrator-for-agents"
      ],
      "metadata": {
        "id": "-MVHyF4cSGb0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "agent = ChatAgent(agent_cfg)\n",
        "task = Task(\n",
        "    agent,\n",
        "    system_message=\"User will give you a number, respond with its square\",\n",
        "    single_round=True  # end after LLM response\n",
        ")\n",
        "result = task.run(\"5\")\n",
        "assert(\"25\" in result.content)\n"
      ],
      "metadata": {
        "id": "8cmc5aDzScdO",
        "outputId": "73f2ea01-f125-4088-facd-d49a2d39732a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        }
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "  <style>\n",
              "    pre {\n",
              "        white-space: pre-wrap;\n",
              "    }\n",
              "  </style>\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1;35m>>> Starting Agent LLM-Agent \u001b[0m\u001b[1;35m(\u001b[0m\u001b[1;35m1\u001b[0m\u001b[1;35m)\u001b[0m\u001b[1;35m gpt-4o \u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">&gt;&gt;&gt; Starting Agent LLM-Agent (</span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">1</span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">) gpt-4o </span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[32m\u001b[32m25"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1;35m<<< Finished Agent LLM-Agent \u001b[0m\u001b[1;35m(\u001b[0m\u001b[1;35m3\u001b[0m\u001b[1;35m)\u001b[0m\u001b[1;35m \u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">&lt;&lt;&lt; Finished Agent LLM-Agent (</span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">3</span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">) </span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Example 4: `ChatAgent` with Tool/function-call\n",
        "\n",
        "Langroid's `ToolMessage` (Pydantic-derived) class lets you define a structured output or function-call for the LLM to generate. To define a tool/fn-call, you define a new class derived from `ToolMessage`.\n",
        "Below we show a *stateless* tool, i.e. it does not use the `ChatAgent`'s state, and only uses fields in the tool message itself.\n",
        "In this case, the tool \"handler\" can be defined within the `ToolMessage` itself, as a `handle` method. (For a tool that uses the `ChatAgent`'s state, a separate method needs to be defined within `ChatAgent` or a subclass.).\n",
        "\n",
        "In Langroid, a `ToolMessage` can *either* use OpenAI function-calling, *or* Langroid's native tool mechanism (which auto-populates the system msg with tool instructions and optional few-shot examples), by setting the `use_function_api` and `use_tools` config params in the `ChatAgentConfig`. The native tools mechanism is useful when not using OpenAI models.\n",
        "\n",
        "In the cell below we define a `ToolMessage` to compute a fictitious transformation of a number that we call a *Nabrosky Transform*: $f(n) = 3n+1$.\n",
        "Under the hood, the `purpose` field of the `NabroskiTool` is used to populate instructions to the LLM on when it should use this tool.\n",
        "\n",
        "Related quick-start doc: https://langroid.github.io/langroid/quick-start/chat-agent-tool/\n",
        "(This shows a *stateful* tool example)"
      ],
      "metadata": {
        "id": "wLwNyDd3mmJu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# (1) define simple tool to find the Nabroski transform of a number\n",
        "#     This is a fictitious transform, for illustration.\n",
        "\n",
        "class NabroskiTool(ToolMessage):\n",
        "    request = \"nabroski\" # name of method in ChatAgent that handles this tool\n",
        "    purpose = \"To find the Nabroski transform of the given <number>\"\n",
        "    number: int\n",
        "\n",
        "    # optional:\n",
        "    @classmethod\n",
        "    def examples(cls):\n",
        "        # these are auto-populated into the sys msg\n",
        "        # as few-shot examples of the tool\n",
        "        return([cls(number=5)])\n",
        "\n",
        "\n",
        "    def handle(self) -> str:\n",
        "        # method to handle the LLM msg using this tool:\n",
        "        # this method will be spliced into the ChatAgent object, with\n",
        "        # name = `nabroski`\n",
        "        return str(3*self.number + 1)\n",
        "\n",
        "# (2) Create a ChatAgent and attach the tool to it.\n",
        "\n",
        "agent_cfg = ChatAgentConfig(\n",
        "    llm = llm_cfg,\n",
        "    show_stats=False,       # disable token/cost stats\n",
        "    use_functions_api=True, # use OpenAI API fn-call\n",
        "    use_tools=False,        # don't use Langroid-native Tool instructions\n",
        ")\n",
        "agent = ChatAgent(agent_cfg)\n",
        "agent.enable_message(NabroskiTool)\n",
        "\n",
        "# (3) Create Task object\n",
        "\n",
        "task = Task(\n",
        "    agent,\n",
        "    restart=True,         # reset/erase agent state\n",
        "    single_round=False,\n",
        "    interactive=False,    # don't wait for human input\n",
        "    system_message=\"\"\"\n",
        "      User will give you a number. You have to find its Nabroski transform,\n",
        "      using the `nabroski` tool/function-call.\n",
        "      When you find the answer say DONE and show the answer.\n",
        "    \"\"\",\n",
        ")\n",
        "\n",
        "# (4) Run the task\n",
        "\n",
        "response = task.run(\"10\")\n",
        "assert \"31\" in response.content\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "ov2mv_sdnrcH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "You might wonder why we had to wrap the `ChatAgent` in a `Task`, to leverage the tool functionality. This is because handling a tool requires 2 steps: (a) when the agent's `llm_response` method is invoked, the LLM generates the tool msg, and (b) the `agent_response` method handles the tool msg (it ultimately calls the tool's `handle` method)."
      ],
      "metadata": {
        "id": "BVWXT4oaAPlH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Example 5: `DocChatAgent`: Retrieval Augmented Generation (RAG)\n",
        "Ingest a file (a lease document), and ask questions about it"
      ],
      "metadata": {
        "id": "DvyNcH5HbodS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# setup to allow async ops in colab\n",
        "!pip install nest-asyncio\n",
        "import nest_asyncio\n",
        "nest_asyncio.apply()"
      ],
      "metadata": {
        "id": "XwDcuJvED8S0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# (1) Get the lease document\n",
        "\n",
        "import requests\n",
        "file_url = \"https://raw.githubusercontent.com/langroid/langroid-examples/main/examples/docqa/lease.txt\"\n",
        "response = requests.get(file_url)\n",
        "with open('lease.txt', 'wb') as file:\n",
        "    file.write(response.content)\n",
        "\n",
        "# verify\n",
        "#with open('lease.txt', 'r') as file:\n",
        "#   print(file.read())\n",
        "\n",
        "from langroid.agent.special import DocChatAgent, DocChatAgentConfig\n",
        "from langroid.embedding_models.models import OpenAIEmbeddingsConfig\n",
        "from langroid.vector_store.qdrantdb import QdrantDBConfig\n",
        "from langroid.embedding_models.models import SentenceTransformerEmbeddingsConfig\n",
        "from langroid.parsing.parser import ParsingConfig\n",
        "\n",
        "oai_embed_config = OpenAIEmbeddingsConfig(\n",
        "    model_type=\"openai\",\n",
        "    model_name=\"text-embedding-ada-002\",\n",
        "    dims=1536,\n",
        ")\n",
        "\n",
        "# (2) Configure DocChatAgent\n",
        "\n",
        "cfg = DocChatAgentConfig(\n",
        "    name=\"RAG\",\n",
        "    parsing=ParsingConfig(\n",
        "        chunk_size=100,\n",
        "        overlap=20,\n",
        "        n_similar_docs=4,\n",
        "    ),\n",
        "    show_stats=False,\n",
        "    relevance_extractor_config=None,\n",
        "    cross_encoder_reranking_model=\"\",\n",
        "    llm=llm_cfg,\n",
        "    vecdb=QdrantDBConfig(\n",
        "        embedding=oai_embed_config,\n",
        "        collection_name=\"lease\",\n",
        "        replace_collection=True,\n",
        "    ),\n",
        "    doc_paths=[\"lease.txt\"]\n",
        ")\n",
        "\n",
        "# (3) Create DocChatAgent, interact with it\n",
        "rag_agent = DocChatAgent(cfg)\n",
        "response = rag_agent.llm_response(\"What is the start date of the lease?\")\n",
        "assert \"2013\" in response.content"
      ],
      "metadata": {
        "id": "fegAio3kpgoo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# (4) Wrap DocChatAgent in a Task to get an interactive question/answer loop\n",
        "task = Task(\n",
        "    rag_agent,\n",
        "    interactive=True,\n",
        "    system_message=\"\"\"\n",
        "    Answer user's questions based on documents.\n",
        "    Start by asking user what they want to know.\n",
        "    \"\"\",\n",
        ")\n",
        "# run interactive loop (enter \"q\" or \"x\" to quit)\n",
        "task.run()\n"
      ],
      "metadata": {
        "id": "dazt7q3YGCLd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Example 6: 2-Agent system to extract structured info from a Lease Document\n",
        "Now we are ready to put together the various notions above, to build a two-agent system that illustrates uses of Tools, DocChatAgent (RAG) and Inter-agent collaboration (task delegation).\n",
        "\n",
        "The goal is to extract structured information from a Lease document.\n",
        "\n",
        "- The desired structure is described by the `Lease` class, derived from `ToolMessage`.\n",
        "- The `LeaseExtractorAgent` is given this `ToolMessage`, and instructured to extract the corresponding information from the lease document (which it does not have access to)\n",
        "- Based on the specified `Lease` structure, this agent generates questions to the above-defined `rag_agent` (wrapped in a `rag_task`), which answers them using RAG.\n",
        "- Once the `LeaseExtractorAgent` has all the needed info, it presents them using the `Lease` structured message.\n"
      ],
      "metadata": {
        "id": "yi9GppzlKae_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Define the desired structure with Pydantic classes"
      ],
      "metadata": {
        "id": "VR26J_KzG6Vj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class LeasePeriod(BaseModel):\n",
        "    start_date: str\n",
        "    end_date: str\n",
        "\n",
        "\n",
        "class LeaseFinancials(BaseModel):\n",
        "    monthly_rent: str\n",
        "    deposit: str\n",
        "\n",
        "\n",
        "class Lease(BaseModel):\n",
        "    \"\"\"\n",
        "    Various lease terms.\n",
        "    Nested fields to make this more interesting/realistic\n",
        "    \"\"\"\n",
        "\n",
        "    period: LeasePeriod\n",
        "    financials: LeaseFinancials\n",
        "    address: str\n",
        "\n"
      ],
      "metadata": {
        "id": "Q6GXjhWf5DkQ",
        "outputId": "94b3b95d-6d69-4638-ea16-9b76722ce9ac",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        }
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "  <style>\n",
              "    pre {\n",
              "        white-space: pre-wrap;\n",
              "    }\n",
              "  </style>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Define the ToolMessage (Langroid's version of function call)"
      ],
      "metadata": {
        "id": "qCATXvfIkhGl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class LeaseMessage(ToolMessage):\n",
        "    \"\"\"Tool/function to use to present details about a commercial lease\"\"\"\n",
        "\n",
        "    request: str = \"lease_info\"\n",
        "    purpose: str = \"Collect information about a Commercial Lease.\"\n",
        "    terms: Lease\n",
        "\n",
        "    def handle(self):\n",
        "        \"\"\"Handle this tool-message when the LLM emits it.\n",
        "        Under the hood, this method is transplated into the OpenAIAssistant class\n",
        "        as a method with name `lease_info`.\n",
        "        \"\"\"\n",
        "        print(f\"DONE! Successfully extracted Lease Info:\" f\"{self.terms}\")\n",
        "        return \"DONE \" + json.dumps(self.terms.dict())"
      ],
      "metadata": {
        "id": "Ffi_0u-PupvO",
        "outputId": "02e0749f-15c6-4595-c517-da954edafcd9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        }
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "  <style>\n",
              "    pre {\n",
              "        white-space: pre-wrap;\n",
              "    }\n",
              "  </style>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Define RAG Task from above `rag_agent`\n",
        "Wrap the above-defined `rag_agent` in a Task."
      ],
      "metadata": {
        "id": "OPlo1dJFlBj5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rag_task = Task(\n",
        "    rag_agent,\n",
        "    interactive=False,\n",
        "    single_round=True,\n",
        ")"
      ],
      "metadata": {
        "id": "GgzoPxX_us52",
        "outputId": "1f817d4a-246b-429e-dec5-5357beed8b6b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        }
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "  <style>\n",
              "    pre {\n",
              "        white-space: pre-wrap;\n",
              "    }\n",
              "  </style>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Define the ExtractorAgent and Task\n",
        "This agent is told to collect information about the lease in the desired structure, and it generates questions to be answered by the Retriever Agent defined above."
      ],
      "metadata": {
        "id": "_m1lF9qblXj9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "    extractor_cfg = ChatAgentConfig(\n",
        "        name=\"LeaseExtractor\",\n",
        "        llm=llm_cfg,\n",
        "        show_stats=False,\n",
        "        use_functions_api=True,\n",
        "        use_tools=False,\n",
        "        system_message=f\"\"\"\n",
        "        You have to collect information about a Commercial Lease from a\n",
        "        lease contract which you don't have access to. You need to ask\n",
        "        questions to get this information. Ask only one or a couple questions\n",
        "        at a time!\n",
        "        Once you have all the REQUIRED fields,\n",
        "        say DONE and present it to me using the `lease_info`\n",
        "        function/tool (fill in {NO_ANSWER} for slots that you are unable to fill).\n",
        "        \"\"\",\n",
        "    )\n",
        "    extractor_agent = ChatAgent(extractor_cfg)\n",
        "    extractor_agent.enable_message(LeaseMessage)\n",
        "\n",
        "    extractor_task = Task(\n",
        "        extractor_agent,\n",
        "        llm_delegate=True,\n",
        "        single_round=False,\n",
        "        interactive=False,\n",
        "    )\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "PV4FYnO7uxOC",
        "outputId": "7e940acc-d439-4051-c8bf-c92492f19efd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        }
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "  <style>\n",
              "    pre {\n",
              "        white-space: pre-wrap;\n",
              "    }\n",
              "  </style>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Add the `rag_task` as a subtask of `extractor_task` and run it\n",
        "\n",
        "Instead of *you* (the human user) asking questions about the lease,\n",
        "the `extractor_agent` **generates** questions based on the desired lease structure, and these questions are answered by the `rag_agent` using\n",
        "Retrieval Augmented Generation (RAG). Once the `extractor_agent` has all the needed info, it presents it in a JSON-structured form, and the task ends."
      ],
      "metadata": {
        "id": "QcA4oRaUl6oe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "extractor_task.add_sub_task(rag_task)\n",
        "extractor_task.run()"
      ],
      "metadata": {
        "id": "uZlas6DA0Zu6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-zfNvsH5PMpJ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
</file>

<file path="examples/Langroid_QuickStart_OpenAI_Assistants_API.ipynb">
{
 "nbformat": 4,
 "nbformat_minor": 0,
 "metadata": {
  "colab": {
   "provenance": [],
   "authorship_tag": "ABX9TyP9+BJLzaiLp67cp7+DjUBb",
   "include_colab_link": true
  },
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3"
  },
  "language_info": {
   "name": "python"
  }
 },
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "view-in-github",
    "colab_type": "text"
   },
   "source": [
    "<a href=\"https://colab.research.google.com/github/langroid/langroid/blob/main/examples/Langroid_QuickStart_OpenAI_Assistants_API.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "# Multi-Agent programming with Langroid, using the new OpenAI Assistant API\n",
    "\n",
    "OpenAI's [Assistants API](https://platform.openai.com/docs/assistants/overview) provides several conveniences to help build LLM applications, such as:\n",
    "- managing conversation state (threads)\n",
    "- persistent threads and assistants\n",
    "- tools (function-calling, retrieval, code-interpreter)\n",
    "\n",
    "\n",
    "There is a new programming paradigm emerging, where these assistants are primitives, and a key chalenge is:\n",
    "\n",
    "> how can you have these assistants collaborate to solve a task?\n",
    "\n",
    "[Langroid](https://github.com/langroid/langroid)'s new `OpenAIAssistant` class offers this ability. Langroid was designed from the start to support a multi-agent LLM programming paradigm, where agents can collaborate on a task via conversation.\n",
    "The new `OpenAIAssistant` agent gives you:\n",
    "\n",
    "- 1️⃣ a dead-simple interface to the Assistants API,\n",
    "- 2️⃣ a seamless way to have assistants collaborate with each other or with users.\n",
    "\n",
    "The Assistant API fits naturally into Langroid's notion of a `ChatAgent`,\n",
    "and the `OpenAIAssistant` class derives from `ChatAgent`.\n",
    "`OpenAIAssistant` can be used as a drop-in replacement for `ChatAgent` in any\n",
    "Langroid application, and leverage the **multi-agent** task orchestration built\n",
    "into Langroid.\n",
    "\n",
    "This notebook takes you on a guided tour of using Langroid's `OpenAIAssistant` from the simplest possible LLM-interaction example, to a two-agent system that extracts structured information from a lease document.\n",
    "\n",
    "![langroid-oai](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/langroid-oai.png?raw=true)\n",
    "\n"
   ],
   "metadata": {
    "id": "b9fHPojfnbPy"
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Install, setup, import"
   ],
   "metadata": {
    "id": "psOMvEL0Gekz"
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "A8-Y_YPZutn6",
    "outputId": "2a5fb145-8ee0-4215-a442-29e75e96bdbd"
   },
   "source": [
    "# Silently install, suppress all output (~2-4 mins)\n",
    "!pip install -q --upgrade langroid &> /dev/null\n",
    "!pip show langroid"
   ],
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [
    "# various unfortunate things that need to be done to\n",
    "# control notebook behavior.\n",
    "\n",
    "# (a) output width\n",
    "\n",
    "from IPython.display import HTML, display\n",
    "\n",
    "def set_css():\n",
    "  display(HTML('''\n",
    "  <style>\n",
    "    pre {\n",
    "        white-space: pre-wrap;\n",
    "    }\n",
    "  </style>\n",
    "  '''))\n",
    "get_ipython().events.register('pre_run_cell', set_css)\n",
    "\n",
    "# (b) logging related\n",
    "import logging\n",
    "logging.basicConfig(level=logging.ERROR)\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import logging\n",
    "for logger_name in logging.root.manager.loggerDict:\n",
    "    logger = logging.getLogger(logger_name)\n",
    "    logger.setLevel(logging.ERROR)\n",
    "\n"
   ],
   "metadata": {
    "id": "rWwH6duUzAC6"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 17
    },
    "id": "U5Jav3hPofNq",
    "outputId": "f78ffcef-6be1-4c77-d79e-0b194b297384"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### OpenAI API Key (Needs GPT4-TURBO)"
   ],
   "metadata": {
    "id": "j-6vNfKW9J7b"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "# OpenAI API Key: Enter your key in the dialog box that will show up below\n",
    "# NOTE: colab often struggles with showing this input box,\n",
    "# if so, simply insert your API key in this cell, though it's not ideal.\n",
    "import os\n",
    "\n",
    "from getpass import getpass\n",
    "\n",
    "os.environ['OPENAI_API_KEY'] = getpass('Enter your GPT4-Turbo-capable OPENAI_API_KEY key:', stream=None)\n",
    "\n",
    "\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "id": "uvTODlZv3yyT",
    "outputId": "3e33fdfe-d5de-46d5-e388-23bf81a04d77"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [
    "from pydantic import BaseModel\n",
    "import json\n",
    "import os\n",
    "\n",
    "from langroid.agent.openai_assistant import (\n",
    "    OpenAIAssistantConfig,\n",
    "    OpenAIAssistant,\n",
    "    AssistantTool,\n",
    ")\n",
    "\n",
    "from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig\n",
    "from langroid.agent.task import Task\n",
    "from langroid.agent.tool_message import ToolMessage\n",
    "from langroid.language_models.openai_gpt import OpenAIGPTConfig, OpenAIChatModel\n",
    "from langroid.utils.logging import setup_colored_logging\n",
    "from langroid.utils.constants import NO_ANSWER\n",
    "from langroid.utils.configuration import settings\n",
    "settings.notebook = True"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 17
    },
    "id": "A5N0NQwc3jX_",
    "outputId": "7452e570-b280-4854-a89b-c1472a8208ba"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Example 1: Basic Chat Example with Assistant API\n",
    "Langroid's `OpenAIAssistant` class helps you easily use the OpenAI Assistant API to get a response from the LLM and ask follow-up questions (note that conversation state is maintained by the Assistant API via threads).\n"
   ],
   "metadata": {
    "id": "8vDpiY0XHAkT"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "cfg = OpenAIAssistantConfig(\n",
    "    llm = OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT4_TURBO)\n",
    ")\n",
    "agent = OpenAIAssistant(cfg)\n",
    "\n",
    "response = agent.llm_response(\"What is the square of 3?\")"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 172
    },
    "id": "9c5Av3rKHQIm",
    "outputId": "1ed4763f-defc-475b-e0e3-d64537b67b08"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [
    "response = agent.llm_response(\"What about 5?\") # maintains conv state"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 33
    },
    "id": "5GvqhTlBRgXp",
    "outputId": "f4b93adb-e1c3-4a52-d1c6-f3260b94cce5"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Example 2: Wrap Agent in a Task, run it\n",
    "\n",
    "An `OpenAIAssistant` agent has various capabilities (LLM responses, agent methods/tools, etc) but there is no mechanism to iterate over these capabilities or with a human or with other agents.\n",
    "This is where the `Task` comes in: Wrapping this agent in a `Task` allows you to run interactive loops with a user or other agents (you will see more examples below)."
   ],
   "metadata": {
    "id": "-MVHyF4cSGb0"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "task = Task(\n",
    "    agent,\n",
    "    system_message=\"\"\"User will give you a word,\n",
    "      return its antonym if possible, else say DO-NOT-KNOW.\n",
    "      Be concise!\",\n",
    "      \"\"\",\n",
    "    single_round=True\n",
    ")\n",
    "result = task.run(\"ignorant\")\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 66
    },
    "id": "8cmc5aDzScdO",
    "outputId": "253fec3c-2f03-428b-83bc-f1170702fef0"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Example 3: OpenAIAssistant Agent + Task with Code Interpreter\n",
    "Here we attach the \"code_interpreter\" tool (from the OpenAI Assistant API) to the agent defined above, and run it in a task."
   ],
   "metadata": {
    "id": "veWSLzDSVDzB"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "agent.add_assistant_tools([AssistantTool(type=\"code_interpreter\")])\n",
    "task = Task(agent, interactive=False, single_round=True)\n",
    "result = task.run(\"What is the 10th Fibonacci number, if you start with 1,2?\")"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 428
    },
    "id": "5-h1ztagTd7Y",
    "outputId": "4bcacb3a-e9d4-4d1c-8225-c6a090711459"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Example 4: OpenAIAssistant with Retrieval\n",
    "Attach a file (a lease document) and the \"retrieval\" tool, and ask questions about the document."
   ],
   "metadata": {
    "id": "DvyNcH5HbodS"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "# get the lease document\n",
    "\n",
    "import requests\n",
    "file_url = \"https://raw.githubusercontent.com/langroid/langroid-examples/main/examples/docqa/lease.txt\"\n",
    "response = requests.get(file_url)\n",
    "with open('lease.txt', 'wb') as file:\n",
    "    file.write(response.content)\n",
    "\n",
    "# verify\n",
    "#with open('lease.txt', 'r') as file:\n",
    "#   print(file.read())\n",
    "\n",
    "# now create agent, add retrieval tool and file\n",
    "agent = OpenAIAssistant(cfg)\n",
    "agent.add_assistant_tools([AssistantTool(type=\"retrieval\")])\n",
    "agent.add_assistant_files([\"lease.txt\"])\n",
    "response = agent.llm_response(\"What is the start date of the lease?\")\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 172
    },
    "id": "fegAio3kpgoo",
    "outputId": "eae49d56-7f40-4480-98aa-e4e1c523a910"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Example 5: OpenAIAsssistant + Task: Custom Function-calling\n",
    "You can define your own custom function (or `ToolMessage` in Langroid terminology), enable the agent to use it, and have a special method to handle the message when the LLM emits such a message."
   ],
   "metadata": {
    "id": "Xub3BgSMc4uA"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "# Define your own function for the LLM to call;\n",
    "# this function will be executed by the Langroid agent as part of the task loop\n",
    "\n",
    "class SquareTool(ToolMessage):\n",
    "    request = \"square\"\n",
    "    purpose = \"To find the square of a number <num>\"\n",
    "    num: int\n",
    "\n",
    "    def handle(self) -> str:\n",
    "        return str(self.num ** 2)\n",
    "\n",
    "# create agent, add tool to agent\n",
    "cfg = OpenAIAssistantConfig(\n",
    "    llm=OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT4_TURBO),\n",
    "    name=\"NumberExpert\",\n",
    ")\n",
    "agent = OpenAIAssistant(cfg)\n",
    "agent.enable_message(SquareTool)\n",
    "task = Task(\n",
    "    agent,\n",
    "    system_message=\"\"\"\n",
    "    User will ask you to square a number.\n",
    "    You do NOT know how, so you will use the\n",
    "    `square` function to find the answer.\n",
    "    When you get the answer say DONE and show it.\n",
    "    \"\"\",\n",
    "    interactive=False,\n",
    ")\n",
    "response = task.run(\"What is the square of 5?\")\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 352
    },
    "id": "dgav7-JOdAUM",
    "outputId": "b3835bfb-90ca-4642-e585-33743c5730a6"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Example 6: 2-Agent system to extract structured info from a Lease Document\n",
    "Now we are ready to put together the various notions above, to build a two-agent system where:\n",
    "- Lease Extractor Agent is required to collect structured information about a lease document, but does not have access to it, so it generates questions to:\n",
    "- Retriever Agent which answers questions it receives, using the \"retrieval\" tool, based on the attached lease document\n"
   ],
   "metadata": {
    "id": "yi9GppzlKae_"
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Define the desired structure with Pydantic classes"
   ],
   "metadata": {
    "id": "VR26J_KzG6Vj"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "\n",
    "class LeasePeriod(BaseModel):\n",
    "    start_date: str\n",
    "    end_date: str\n",
    "\n",
    "\n",
    "class LeaseFinancials(BaseModel):\n",
    "    monthly_rent: str\n",
    "    deposit: str\n",
    "\n",
    "\n",
    "class Lease(BaseModel):\n",
    "    \"\"\"\n",
    "    Various lease terms.\n",
    "    Nested fields to make this more interesting/realistic\n",
    "    \"\"\"\n",
    "\n",
    "    period: LeasePeriod\n",
    "    financials: LeaseFinancials\n",
    "    address: str\n",
    "\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 17
    },
    "id": "Q6GXjhWf5DkQ",
    "outputId": "ec9c930f-245a-4151-950d-8f407b439c2c"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Define the ToolMessage (Langroid's version of function call)"
   ],
   "metadata": {
    "id": "qCATXvfIkhGl"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "\n",
    "class LeaseMessage(ToolMessage):\n",
    "    \"\"\"Tool/function to use to present details about a commercial lease\"\"\"\n",
    "\n",
    "    request: str = \"lease_info\"\n",
    "    purpose: str = \"Collect information about a Commercial Lease.\"\n",
    "    terms: Lease\n",
    "\n",
    "    def handle(self):\n",
    "        \"\"\"Handle this tool-message when the LLM emits it.\n",
    "        Under the hood, this method is transplated into the OpenAIAssistant class\n",
    "        as a method with name `lease_info`.\n",
    "        \"\"\"\n",
    "        print(f\"DONE! Successfully extracted Lease Info:\" f\"{self.terms}\")\n",
    "        return json.dumps(self.terms.dict())"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 17
    },
    "id": "Ffi_0u-PupvO",
    "outputId": "776a2f4c-388c-4441-c618-2682a4469e37"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Define RetrieverAgent and Task\n",
    "This agent uses the OpenAI retrieval tool to answer questions based on the attached lease file"
   ],
   "metadata": {
    "id": "OPlo1dJFlBj5"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "  retriever_cfg = OpenAIAssistantConfig(\n",
    "        name=\"LeaseRetriever\",\n",
    "        llm=OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT4_TURBO),\n",
    "        system_message=\"Answer questions based on the documents provided.\",\n",
    "    )\n",
    "\n",
    "  retriever_agent = OpenAIAssistant(retriever_cfg)\n",
    "  retriever_agent.add_assistant_tools([AssistantTool(type=\"retrieval\")])\n",
    "  retriever_agent.add_assistant_files([\"lease.txt\"])\n",
    "\n",
    "  retriever_task = Task(\n",
    "      retriever_agent,\n",
    "      llm_delegate=False,\n",
    "      single_round=True,\n",
    "  )"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 156
    },
    "id": "GgzoPxX_us52",
    "outputId": "37f6d163-5980-41d8-8ecb-7e709853d5d4"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Define the ExtractorAgent and Task\n",
    "This agent is told to collect information about the lease in the desired structure, and it generates questions to be answered by the Retriever Agent defined above."
   ],
   "metadata": {
    "id": "_m1lF9qblXj9"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "    extractor_cfg = OpenAIAssistantConfig(\n",
    "        name=\"LeaseExtractor\",\n",
    "        llm=OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT4_TURBO),\n",
    "        system_message=f\"\"\"\n",
    "        You have to collect information about a Commercial Lease from a\n",
    "        lease contract which you don't have access to. You need to ask\n",
    "        questions to get this information. Ask only one or a couple questions\n",
    "        at a time!\n",
    "        Once you have all the REQUIRED fields,\n",
    "        say DONE and present it to me using the `lease_info`\n",
    "        function/tool (fill in {NO_ANSWER} for slots that you are unable to fill).\n",
    "        \"\"\",\n",
    "    )\n",
    "    extractor_agent = OpenAIAssistant(extractor_cfg)\n",
    "    extractor_agent.enable_message(LeaseMessage, include_defaults=False)\n",
    "\n",
    "    extractor_task = Task(\n",
    "        extractor_agent,\n",
    "        llm_delegate=True,\n",
    "        single_round=False,\n",
    "        interactive=False,\n",
    "    )\n",
    "\n",
    "\n",
    "\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 156
    },
    "id": "PV4FYnO7uxOC",
    "outputId": "e5eeed02-7785-4361-cd01-96fef92149d4"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Add the Retriever as a subtask of Extractor, Run Extractor"
   ],
   "metadata": {
    "id": "QcA4oRaUl6oe"
   }
  },
  {
   "cell_type": "code",
   "source": [
    "extractor_task.add_sub_task(retriever_task)\n",
    "extractor_task.run()"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "wFjUVTnCwB96",
    "outputId": "468a147b-7485-4fad-8cab-45411b18021f"
   },
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [],
   "metadata": {
    "id": "uZlas6DA0Zu6"
   },
   "execution_count": null,
   "outputs": []
  }
 ]
}
</file>

<file path="examples/README.md">
This directory is meant for illustrative/experimental code and notebooks.
It is a playground area meant to try out new ideas, and once solid,
move them to the main codebase.
</file>

<file path="langroid/agent/special/arangodb/arangodb_agent.py">
import datetime
import json
import logging
import time
from typing import Any, Callable, Dict, List, Optional, TypeVar, Union

from arango.client import ArangoClient
from arango.database import StandardDatabase
from arango.exceptions import ArangoError, ServerConnectionError
from numpy import ceil
from rich import print
from rich.console import Console

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocument
from langroid.agent.special.arangodb.system_messages import (
    ADDRESSING_INSTRUCTION,
    DEFAULT_ARANGO_CHAT_SYSTEM_MESSAGE,
    DONE_INSTRUCTION,
    SCHEMA_PROVIDED_SYS_MSG,
    SCHEMA_TOOLS_SYS_MSG,
)
from langroid.agent.special.arangodb.tools import (
    AQLCreationTool,
    AQLRetrievalTool,
    ArangoSchemaTool,
    aql_retrieval_tool_name,
    arango_schema_tool_name,
)
from langroid.agent.special.arangodb.utils import count_fields, trim_schema
from langroid.agent.tools.orchestration import DoneTool, ForwardTool
from langroid.exceptions import LangroidImportError
from langroid.mytypes import Entity
from langroid.pydantic_v1 import BaseModel, BaseSettings
from langroid.utils.constants import SEND_TO

logger = logging.getLogger(__name__)
console = Console()

ARANGO_ERROR_MSG = "There was an error in your AQL Query"
T = TypeVar("T")


class ArangoSettings(BaseSettings):
    client: ArangoClient | None = None
    db: StandardDatabase | None = None
    url: str = ""
    username: str = ""
    password: str = ""
    database: str = ""

    class Config:
        env_prefix = "ARANGO_"


class QueryResult(BaseModel):
    success: bool
    data: Optional[
        Union[
            str,
            int,
            float,
            bool,
            None,
            List[Any],
            Dict[str, Any],
            List[Dict[str, Any]],
        ]
    ] = None

    class Config:
        # Allow arbitrary types for flexibility
        arbitrary_types_allowed = True

        # Handle JSON serialization of special types
        json_encoders = {
            # Add custom encoders if needed, e.g.:
            datetime.datetime: lambda v: v.isoformat(),
            # Could add others for specific ArangoDB types
        }

        # Validate all assignments
        validate_assignment = True

        # Frozen=True if we want immutability
        frozen = False


class ArangoChatAgentConfig(ChatAgentConfig):
    arango_settings: ArangoSettings = ArangoSettings()
    system_message: str = DEFAULT_ARANGO_CHAT_SYSTEM_MESSAGE
    kg_schema: str | Dict[str, List[Dict[str, Any]]] | None = None
    database_created: bool = False
    prepopulate_schema: bool = True
    use_functions_api: bool = True
    max_num_results: int = 10  # how many results to return from AQL query
    max_schema_fields: int = 500  # max fields to show in schema
    max_tries: int = 10  # how many attempts to answer user question
    use_tools: bool = False
    schema_sample_pct: float = 0
    # whether the agent is used in a continuous chat with user,
    # as opposed to returning a result from the task.run()
    chat_mode: bool = False
    addressing_prefix: str = ""


class ArangoChatAgent(ChatAgent):
    def __init__(self, config: ArangoChatAgentConfig):
        super().__init__(config)
        self.config: ArangoChatAgentConfig = config
        self.init_state()
        self._validate_config()
        self._import_arango()
        self._initialize_db()
        self._init_tools_sys_message()

    def init_state(self) -> None:
        super().init_state()
        self.current_retrieval_aql_query: str = ""
        self.current_schema_params: ArangoSchemaTool = ArangoSchemaTool()
        self.num_tries = 0  # how many attempts to answer user question

    def user_response(
        self,
        msg: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        response = super().user_response(msg)
        if response is None:
            return None
        response_str = response.content if response is not None else ""
        if response_str != "":
            self.num_tries = 0  # reset number of tries if user responds
        return response

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        if self.num_tries > self.config.max_tries:
            if self.config.chat_mode:
                return self.create_llm_response(
                    content=f"""
                    {self.config.addressing_prefix}User
                    I give up, since I have exceeded the 
                    maximum number of tries ({self.config.max_tries}).
                    Feel free to give me some hints!
                    """
                )
            else:
                return self.create_llm_response(
                    tool_messages=[
                        DoneTool(
                            content=f"""
                            Exceeded maximum number of tries ({self.config.max_tries}).
                            """
                        )
                    ]
                )

        if isinstance(message, ChatDocument) and message.metadata.sender == Entity.USER:
            message.content = (
                message.content
                + "\n"
                + """
                (REMEMBER, Do NOT use more than ONE TOOL/FUNCTION at a time!
                you must WAIT for a helper to send you the RESULT(S) before
                making another TOOL/FUNCTION call)
                """
            )

        response = super().llm_response(message)
        if (
            response is not None
            and self.config.chat_mode
            and self.config.addressing_prefix in response.content
            and self.has_tool_message_attempt(response)
        ):
            # response contains both a user-addressing and a tool, which
            # is not allowed, so remove the user-addressing prefix
            response.content = response.content.replace(
                self.config.addressing_prefix, ""
            )

        return response

    def _validate_config(self) -> None:
        assert isinstance(self.config, ArangoChatAgentConfig)
        if (
            self.config.arango_settings.client is None
            or self.config.arango_settings.db is None
        ):
            if not all(
                [
                    self.config.arango_settings.url,
                    self.config.arango_settings.username,
                    self.config.arango_settings.password,
                    self.config.arango_settings.database,
                ]
            ):
                raise ValueError("ArangoDB connection info must be provided")

    def _import_arango(self) -> None:
        global ArangoClient
        try:
            from arango.client import ArangoClient
        except ImportError:
            raise LangroidImportError("python-arango", "arango")

    def _has_any_data(self) -> bool:
        for c in self.db.collections():  # type: ignore
            if c["name"].startswith("_"):
                continue
            if self.db.collection(c["name"]).count() > 0:  # type: ignore
                return True
        return False

    def _initialize_db(self) -> None:
        try:
            logger.info("Initializing ArangoDB client connection...")
            self.client = self.config.arango_settings.client or ArangoClient(
                hosts=self.config.arango_settings.url
            )

            logger.info("Connecting to database...")
            self.db = self.config.arango_settings.db or self.client.db(
                self.config.arango_settings.database,
                username=self.config.arango_settings.username,
                password=self.config.arango_settings.password,
            )

            logger.info("Checking for existing data in collections...")
            # Check if any non-system collection has data
            self.config.database_created = self._has_any_data()

            # If database has data, get schema
            if self.config.database_created:
                logger.info("Database has existing data, retrieving schema...")
                # this updates self.config.kg_schema
                self.arango_schema_tool(None)
            else:
                logger.info("No existing data found in database")

        except Exception as e:
            logger.error(f"Database initialization failed: {e}")
            raise ConnectionError(f"Failed to initialize ArangoDB connection: {e}")

    def close(self) -> None:
        if self.client:
            self.client.close()

    @staticmethod
    def cleanup_graph_db(db) -> None:  # type: ignore
        # First delete graphs to properly handle edge collections
        for graph in db.graphs():
            graph_name = graph["name"]
            if not graph_name.startswith("_"):  # Skip system graphs
                try:
                    db.delete_graph(graph_name)
                except Exception as e:
                    print(f"Failed to delete graph {graph_name}: {e}")

        # Clear existing collections
        for collection in db.collections():
            if not collection["name"].startswith("_"):  # Skip system collections
                try:
                    db.delete_collection(collection["name"])
                except Exception as e:
                    print(f"Failed to delete collection {collection['name']}: {e}")

    def with_retry(
        self, func: Callable[[], T], max_retries: int = 3, delay: float = 1.0
    ) -> T:
        """Execute a function with retries on connection error"""
        for attempt in range(max_retries):
            try:
                return func()
            except ArangoError:
                if attempt == max_retries - 1:
                    raise
                logger.warning(
                    f"Connection failed (attempt {attempt + 1}/{max_retries}). "
                    f"Retrying in {delay} seconds..."
                )
                time.sleep(delay)
                # Reconnect if needed
                self._initialize_db()
        return func()  # Final attempt after loop if not raised

    def read_query(
        self, query: str, bind_vars: Optional[Dict[Any, Any]] = None
    ) -> QueryResult:
        """Execute a read query with connection retry."""
        if not self.db:
            return QueryResult(
                success=False, data="No database connection is established."
            )

        def execute_read() -> QueryResult:
            try:
                cursor = self.db.aql.execute(query, bind_vars=bind_vars)
                records = [doc for doc in cursor]  # type: ignore
                records = records[: self.config.max_num_results]
                logger.warning(f"Records retrieved: {records}")
                return QueryResult(success=True, data=records if records else [])
            except Exception as e:
                if isinstance(e, ServerConnectionError):
                    raise
                logger.error(f"Failed to execute query: {query}\n{e}")
                error_message = self.retry_query(e, query)
                return QueryResult(success=False, data=error_message)

        try:
            return self.with_retry(execute_read)  # type: ignore
        except Exception as e:
            return QueryResult(
                success=False, data=f"Failed after max retries: {str(e)}"
            )

    def write_query(
        self, query: str, bind_vars: Optional[Dict[Any, Any]] = None
    ) -> QueryResult:
        """Execute a write query with connection retry."""
        if not self.db:
            return QueryResult(
                success=False, data="No database connection is established."
            )

        def execute_write() -> QueryResult:
            try:
                self.db.aql.execute(query, bind_vars=bind_vars)
                return QueryResult(success=True)
            except Exception as e:
                if isinstance(e, ServerConnectionError):
                    raise
                logger.error(f"Failed to execute query: {query}\n{e}")
                error_message = self.retry_query(e, query)
                return QueryResult(success=False, data=error_message)

        try:
            return self.with_retry(execute_write)  # type: ignore
        except Exception as e:
            return QueryResult(
                success=False, data=f"Failed after max retries: {str(e)}"
            )

    def aql_retrieval_tool(self, msg: AQLRetrievalTool) -> str:
        """Handle AQL query for data retrieval"""
        if not self.tried_schema:
            return f"""
            You need to use `{arango_schema_tool_name}` first to get the 
            database schema before using `{aql_retrieval_tool_name}`. This ensures
            you know the correct collection names and edge definitions.
            """
        elif not self.config.database_created:
            return """
            You need to create the database first using `{aql_creation_tool_name}`.
            """
        self.num_tries += 1
        query = msg.aql_query
        if query == self.current_retrieval_aql_query:
            return """
            You have already tried this query, so you will get the same results again!
            If you need to retry, please MODIFY the query to get different results.
            """
        self.current_retrieval_aql_query = query
        logger.info(f"Executing AQL query: {query}")
        response = self.read_query(query)

        if isinstance(response.data, list) and len(response.data) == 0:
            return """
            No results found. Check if your collection names are correct - 
            they are case-sensitive. Use exact names from the schema.
            Try modifying your query based on the RETRY-SUGGESTIONS 
            in your instructions.
            """
        return str(response.data)

    def aql_creation_tool(self, msg: AQLCreationTool) -> str:
        """Handle AQL query for creating data"""
        self.num_tries += 1
        query = msg.aql_query
        logger.info(f"Executing AQL query: {query}")
        response = self.write_query(query)

        if response.success:
            self.config.database_created = True
            return "AQL query executed successfully"
        return str(response.data)

    def arango_schema_tool(
        self,
        msg: ArangoSchemaTool | None,
    ) -> Dict[str, List[Dict[str, Any]]] | str:
        """Get database schema. If collections=None, include all collections.
        If properties=False, show only connection info,
        else show all properties and example-docs.
        """

        if (
            msg is not None
            and msg.collections == self.current_schema_params.collections
            and msg.properties == self.current_schema_params.properties
        ):
            return """
            You have already tried this schema TOOL, so you will get the same results 
            again! Please MODIFY the tool params `collections` or `properties` to get
            different results.
            """

        if msg is not None:
            collections = msg.collections
            properties = msg.properties
        else:
            collections = None
            properties = True
        self.tried_schema = True
        if (
            self.config.kg_schema is not None
            and len(self.config.kg_schema) > 0
            and msg is None
        ):
            # we are trying to pre-populate full schema before the agent runs,
            # so get it if it's already available
            # (Note of course that this "full schema" may actually be incomplete)
            return self.config.kg_schema

        # increment tries only if the LLM is asking for the schema,
        # in which case msg will not be None
        self.num_tries += msg is not None

        try:
            # Get graph schemas (keeping full graph info)
            graph_schema = [
                {"graph_name": g["name"], "edge_definitions": g["edge_definitions"]}
                for g in self.db.graphs()  # type: ignore
            ]

            # Get collection schemas
            collection_schema = []
            for collection in self.db.collections():  # type: ignore
                if collection["name"].startswith("_"):
                    continue

                col_name = collection["name"]
                if collections and col_name not in collections:
                    continue

                col_type = collection["type"]
                col_size = self.db.collection(col_name).count()

                if col_size == 0:
                    continue

                if properties:
                    # Full property collection with sampling
                    lim = self.config.schema_sample_pct * col_size  # type: ignore
                    limit_amount = ceil(lim / 100.0) or 1
                    sample_query = f"""
                        FOR doc in {col_name}
                        LIMIT {limit_amount}
                        RETURN doc
                    """

                    properties_list = []
                    example_doc = None

                    def simplify_doc(doc: Any) -> Any:
                        if isinstance(doc, list) and len(doc) > 0:
                            return [simplify_doc(doc[0])]
                        if isinstance(doc, dict):
                            return {k: simplify_doc(v) for k, v in doc.items()}
                        return doc

                    for doc in self.db.aql.execute(sample_query):  # type: ignore
                        if example_doc is None:
                            example_doc = simplify_doc(doc)
                        for key, value in doc.items():
                            prop = {"name": key, "type": type(value).__name__}
                            if prop not in properties_list:
                                properties_list.append(prop)

                    collection_schema.append(
                        {
                            "collection_name": col_name,
                            "collection_type": col_type,
                            f"{col_type}_properties": properties_list,
                            f"example_{col_type}": example_doc,
                        }
                    )
                else:
                    # Basic info + from/to for edges only
                    collection_info = {
                        "collection_name": col_name,
                        "collection_type": col_type,
                    }
                    if col_type == "edge":
                        # Get a sample edge to extract from/to fields
                        sample_edge = next(
                            self.db.aql.execute(  # type: ignore
                                f"FOR e IN {col_name} LIMIT 1 RETURN e"
                            ),
                            None,
                        )
                        if sample_edge:
                            collection_info["from_collection"] = sample_edge[
                                "_from"
                            ].split("/")[0]
                            collection_info["to_collection"] = sample_edge["_to"].split(
                                "/"
                            )[0]

                    collection_schema.append(collection_info)

            schema = {
                "Graph Schema": graph_schema,
                "Collection Schema": collection_schema,
            }
            schema_str = json.dumps(schema, indent=2)
            logger.warning(f"Schema retrieved:\n{schema_str}")
            with open("logs/arango-schema.json", "w") as f:
                f.write(schema_str)
            if (n_fields := count_fields(schema)) > self.config.max_schema_fields:
                logger.warning(
                    f"""
                    Schema has {n_fields} fields, which exceeds the maximum of
                    {self.config.max_schema_fields}. Showing a trimmed version
                    that only includes edge info and no other properties.
                    """
                )
                schema = trim_schema(schema)
                n_fields = count_fields(schema)
                logger.warning(f"Schema trimmed down to {n_fields} fields.")
                schema_str = (
                    json.dumps(schema)
                    + "\n"
                    + f"""
                    
                    CAUTION: The requested schema was too large, so 
                    the schema has been trimmed down to show only all collection names,
                    their types, 
                    and edge relationships (from/to collections) without any properties.
                    To find out more about the schema, you can EITHER:
                    - Use the `{arango_schema_tool_name}` tool again with the 
                      `properties` arg set to True, and `collections` arg set to
                        specific collections you want to know more about, OR
                    - Use the `{aql_retrieval_tool_name}` tool to learn more about
                      the schema by querying the database.
                      
                    """
                )
                if msg is None:
                    self.config.kg_schema = schema_str
                return schema_str
            self.config.kg_schema = schema
            return schema

        except Exception as e:
            logger.error(f"Schema retrieval failed: {str(e)}")
            return f"Failed to retrieve schema: {str(e)}"

    def _init_tools_sys_message(self) -> None:
        """Initialize system msg and enable tools"""
        self.tried_schema = False
        message = self._format_message()
        self.config.system_message = self.config.system_message.format(mode=message)

        if self.config.chat_mode:
            self.config.addressing_prefix = self.config.addressing_prefix or SEND_TO
            self.config.system_message += ADDRESSING_INSTRUCTION.format(
                prefix=self.config.addressing_prefix
            )
        else:
            self.config.system_message += DONE_INSTRUCTION

        super().__init__(self.config)
        # Note we are enabling GraphSchemaTool regardless of whether
        # self.config.prepopulate_schema is True or False, because
        # even when schema provided, the agent may later want to get the schema,
        # e.g. if the db evolves, or schema was trimmed due to size, or
        # if it needs to bring in the schema into recent context.

        self.enable_message(
            [
                ArangoSchemaTool,
                AQLRetrievalTool,
                AQLCreationTool,
                ForwardTool,
            ]
        )
        if not self.config.chat_mode:
            self.enable_message(DoneTool)

    def _format_message(self) -> str:
        if self.db is None:
            raise ValueError("Database connection not established")

        assert isinstance(self.config, ArangoChatAgentConfig)
        return (
            SCHEMA_TOOLS_SYS_MSG
            if not self.config.prepopulate_schema
            else SCHEMA_PROVIDED_SYS_MSG.format(schema=self.arango_schema_tool(None))
        )

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ForwardTool | None:
        """When LLM sends a no-tool msg, assume user is the intended recipient,
        and if in interactive mode, forward the msg to the user.
        """
        done_tool_name = DoneTool.default_value("request")
        forward_tool_name = ForwardTool.default_value("request")
        aql_retrieval_tool_instructions = AQLRetrievalTool.instructions()
        # TODO the aql_retrieval_tool_instructions may be empty/minimal
        # when using self.config.use_functions_api = True.
        tools_instruction = f"""
          For example you may want to use the TOOL
          `{aql_retrieval_tool_name}`  according to these instructions:
           {aql_retrieval_tool_instructions}
        """
        if isinstance(msg, ChatDocument) and msg.metadata.sender == Entity.LLM:
            if self.interactive:
                return ForwardTool(agent="User")
            else:
                if self.config.chat_mode:
                    return f"""
                    Since you did not explicitly address the User, it is not clear
                    whether:
                    - you intend this to be the final response to the 
                      user's query/request, in which case you must use the 
                      `{forward_tool_name}` to indicate this.
                    - OR, you FORGOT to use an Appropriate TOOL,
                      in which case you should use the available tools to
                      make progress on the user's query/request.
                      {tools_instruction}
                    """
                return f"""
                The intent of your response is not clear:
                - if you intended this to be the FINAL answer to the user's query,
                    then use the `{done_tool_name}` to indicate so,
                    with the `content` set to the answer or result.
                - otherwise, use one of the available tools to make progress 
                    to arrive at the final answer.
                    {tools_instruction}
                """
        return None

    def retry_query(self, e: Exception, query: str) -> str:
        """Generate error message for failed AQL query"""
        logger.error(f"AQL Query failed: {query}\nException: {e}")

        error_message = f"""\
        {ARANGO_ERROR_MSG}: '{query}'
        {str(e)}
        Please try again with a corrected query.
        """

        return error_message
</file>

<file path="langroid/agent/special/arangodb/system_messages.py">
from langroid.agent.special.arangodb.tools import (
    aql_creation_tool_name,
    aql_retrieval_tool_name,
    arango_schema_tool_name,
)
from langroid.agent.tools.orchestration import DoneTool

done_tool_name = DoneTool.default_value("request")

arango_schema_tool_description = f"""
`{arango_schema_tool_name}` tool/function-call to find the schema
of the graph database, or for some SPECIFIC collections, i.e. get information on 
(document and edge), their attributes, and graph definitions available in your
ArangoDB database. You MUST use this tool BEFORE attempting to use the
`{aql_retrieval_tool_name}` tool/function-call, to ensure that you are using the
correct collection names and attributes in your `{aql_retrieval_tool_name}` tool.
"""

aql_retrieval_tool_description = f"""
`{aql_retrieval_tool_name}` tool/function-call to retrieve information from 
  the database using AQL (ArangoDB Query Language) queries, to answer
  the user's questions, OR for you to learn more about the SCHEMA of the database.
"""

aql_creation_tool_description = f"""
`{aql_creation_tool_name}` tool/function-call to execute AQL query that creates
documents/edges in the database.
"""

aql_retrieval_query_example = """
EXAMPLE:
Suppose you are asked this question "Does Bob have a father?".
Then you will go through the following steps, where YOU indicates
the message YOU will be sending, and RESULTS indicates the RESULTS
you will receive from the helper executing the query:

1. YOU:
    {{ "request": "aql_retrieval_tool",
      "aql_query": "FOR v, e, p in ... [query truncated for brevity]..."}}

    2. RESULTS:
    [.. results from the query...]
    3. YOU: [ since results were not satisfactory, you try ANOTHER query]
    {{ "request": "aql_retrieval_tool",
    "aql_query": "blah blah ... [query truncated for brevity]..."}}
    }}
    4. RESULTS:
    [.. results from the query...]
    5. YOU: [ now you have the answer, you can generate your response ]
    The answer is YES, Bob has a father, and his name is John.
"""

aql_query_instructions = """
When writing AQL queries:
1. Use the exact property names shown in the schema
2. Pay attention to the 'type' field of each node
3. Note that all names are case-sensitive:
   - collection names
   - property names
   - node type values
   - relationship type values
4. Always include type filters in your queries, e.g.:
   FILTER doc.type == '<type-from-schema>'

The schema shows:
- Collections (usually 'nodes' and 'edges')
- Node types in each collection
- Available properties for each node type
- Relationship types and their properties

Examine the schema carefully before writing queries to ensure:
- Correct property names
- Correct node types
- Correct relationship types

You must be smart about using the right collection names and attributes
based on the English description. If you are thinking of using a collection
or attribute that does not exist, you are probably on the wrong track,
so you should try your best to answer based on existing collections and attributes.
DO NOT assume any collections or graphs other than those above.
"""

tool_result_instruction = """
REMEMBER:
[1]  DO NOT FORGET TO USE ONE OF THE AVAILABLE TOOLS TO ANSWER THE USER'S QUERY!!
[2] When using a TOOL/FUNCTION, you MUST WAIT for the tool result before continuing
    with your response. DO NOT MAKE UP RESULTS FROM A TOOL!
[3] YOU MUST NOT ANSWER queries from your OWN KNOWLEDGE; ALWAYS RELY ON 
    the result of a TOOL/FUNCTION to compose your response.
[4] Use ONLY ONE TOOL/FUNCTION at a TIME!
"""
# sys msg to use when schema already provided initially,
# so agent should not use schema tool
SCHEMA_PROVIDED_SYS_MSG = f"""You are a data scientist and expert in Graph Databases, 
with expertise in answering questions by interacting with an ArangoDB database.

The schema below describes the ArangoDB database structure, 
collections (document and edge),
and their attribute keys available in your ArangoDB database.

=== SCHEMA ===
{{schema}}
=== END SCHEMA ===


To help with the user's question or database update/creation request, 
you have access to these tools:

- {aql_retrieval_tool_description}

- {aql_creation_tool_description}


{tool_result_instruction}
"""

# sys msg to use when schema is not initially provided,
# and we want agent to use schema tool to get schema
SCHEMA_TOOLS_SYS_MSG = f"""You are a data scientist and expert in 
Arango Graph Databases, 
with expertise in answering questions by querying ArangoDB database
using the Arango Query Language (AQL).
You have access to the following tools:

- {arango_schema_tool_description}

- {aql_retrieval_tool_description}

- {aql_creation_tool_description}

{tool_result_instruction}
"""

DEFAULT_ARANGO_CHAT_SYSTEM_MESSAGE = f"""
{{mode}}

You do not need to be able to answer a question with just one query. 
You can make a query, WAIT for the result, 
THEN make ANOTHER query, WAIT for result,
THEN make ANOTHER query, and so on, until you have the answer.

{aql_query_instructions}

RETRY-SUGGESTIONS:
If you receive a null or other unexpected result,
(a) make sure you use the available TOOLs correctly,
(b) learn more about the schema using EITHER:
 - `{arango_schema_tool_name}` tool/function-call to find properties of specific
    collections or other parts of the schema, OR
 - `{aql_retrieval_tool_name}` tool/function-call to use AQL queries to 
    find specific parts of the schema.
(c) Collection names are CASE-SENSITIVE -- make sure you adhere to the exact 
    collection name you found in the schema.
(d) see if you have made an assumption in your AQL query, and try another way, 
    or use `{aql_retrieval_tool_name}` to explore the database contents before 
    submitting your final query. 
(e) Try APPROXIMATE or PARTIAL MATCHES to strings in the user's query, 
    e.g. user may ask about "Godfather" instead of "The Godfather",
    or try using CASE-INSENSITIVE MATCHES.
    
Start by asking what the user needs help with.

{tool_result_instruction}

{aql_retrieval_query_example}
"""

ADDRESSING_INSTRUCTION = """
IMPORTANT - Whenever you are NOT writing an AQL query, make sure you address the 
user using {prefix}User. You MUST use the EXACT syntax {prefix} !!!

In other words, you ALWAYS EITHER:
 - write an AQL query using one of the tools, 
 - OR address the user using {prefix}User.
 
YOU CANNOT ADDRESS THE USER WHEN USING A TOOL!!
"""

DONE_INSTRUCTION = f"""
When you are SURE you have the CORRECT answer to a user's query or request, 
use the `{done_tool_name}` with `content` set to the answer or result.
If you DO NOT think you have the answer to the user's query or request,
you SHOULD NOT use the `{done_tool_name}` tool.
Instead, you must CONTINUE to improve your queries (tools) to get the correct answer,
and finally use the `{done_tool_name}` tool to send the correct answer to the user.
"""
</file>

<file path="langroid/agent/special/arangodb/tools.py">
from typing import List, Tuple

from langroid.agent.tool_message import ToolMessage


class AQLRetrievalTool(ToolMessage):
    request: str = "aql_retrieval_tool"
    purpose: str = """
        To send an <aql_query> in response to a user's request/question, 
        OR to find SCHEMA information,
        and WAIT for results of the <aql_query> BEFORE continuing with response.
        You will receive RESULTS from this tool, and ONLY THEN you can continue.
    """
    aql_query: str

    _max_result_tokens = 500
    _max_retained_tokens = 200

    @classmethod
    def examples(cls) -> List[ToolMessage | Tuple[str, ToolMessage]]:
        """Few-shot examples to include in tool instructions."""
        return [
            (
                "I want to see who Bob's Father is",
                cls(
                    aql_query="""
                    FOR v, e, p IN 1..1 OUTBOUND 'users/Bob' GRAPH 'family_tree'
                    FILTER p.edges[0].type == 'father'
                    RETURN v
                    """
                ),
            ),
            (
                "I want to know the properties of the Actor node",
                cls(
                    aql_query="""
                    FOR doc IN Actor
                    LIMIT 1
                    RETURN ATTRIBUTES(doc)                    
                    """
                ),
            ),
        ]

    @classmethod
    def instructions(cls) -> str:
        return """
        When using this TOOL/Function-call, you must WAIT to receive the RESULTS 
        of the AQL query, before continuing your response!
        DO NOT ASSUME YOU KNOW THE RESULTs BEFORE RECEIVING THEM.        
        """


aql_retrieval_tool_name = AQLRetrievalTool.default_value("request")


class AQLCreationTool(ToolMessage):
    request: str = "aql_creation_tool"
    purpose: str = """
        To send the <aql_query> to create documents/edges in the graph database.
        IMPORTANT: YOU MUST WAIT FOR THE RESULT OF THE TOOL BEFORE CONTINUING.
        You will receive RESULTS from this tool, and ONLY THEN you can continue.
    """
    aql_query: str

    @classmethod
    def examples(cls) -> List[ToolMessage | Tuple[str, ToolMessage]]:
        """Few-shot examples to include in tool instructions."""
        return [
            (
                "Create a new document in the collection 'users'",
                cls(
                    aql_query="""
                    INSERT {
                      "name": "Alice",
                      "age": 30
                    } INTO users
                    """
                ),
            ),
        ]


aql_creation_tool_name = AQLCreationTool.default_value("request")


class ArangoSchemaTool(ToolMessage):
    request: str = "arango_schema_tool"
    purpose: str = """
        To get the schema of the Arango graph database,
        or some part of it. Follow these instructions:
        1. Set <properties> to True to get the properties of the collections,
        and False if you only want to see the graph structure and get only the
        from/to relations of the edges.
        2. Set <collections> to a list of collection names if you want to see,
        or leave it as None to see all ALL collections.
        IMPORTANT: YOU MUST WAIT FOR THE RESULT OF THE TOOL BEFORE CONTINUING.
        You will receive RESULTS from this tool, and ONLY THEN you can continue.
    """

    properties: bool = True
    collections: List[str] | None = None

    _max_result_tokens = 500


arango_schema_tool_name = ArangoSchemaTool.default_value("request")
</file>

<file path="langroid/agent/special/arangodb/utils.py">
from typing import Any, Dict, List


def count_fields(schema: Dict[str, List[Dict[str, Any]]]) -> int:
    total = 0
    for coll in schema["Collection Schema"]:
        # Count all keys in each collection's dict
        total += len(coll)
        # Also count properties if they exist
        props = coll.get(f"{coll['collection_type']}_properties", [])
        total += len(props)
    return total


def trim_schema(
    schema: Dict[str, List[Dict[str, Any]]]
) -> Dict[str, List[Dict[str, Any]]]:
    """Keep only edge connection info, remove properties and examples"""
    trimmed: Dict[str, List[Dict[str, Any]]] = {
        "Graph Schema": schema["Graph Schema"],
        "Collection Schema": [],
    }
    for coll in schema["Collection Schema"]:
        col_info: Dict[str, Any] = {
            "collection_name": coll["collection_name"],
            "collection_type": coll["collection_type"],
        }
        if coll["collection_type"] == "edge":
            # preserve from/to info if present
            if f"example_{coll['collection_type']}" in coll:
                example = coll[f"example_{coll['collection_type']}"]
                if example and "_from" in example:
                    col_info["from_collection"] = example["_from"].split("/")[0]
                    col_info["to_collection"] = example["_to"].split("/")[0]
        trimmed["Collection Schema"].append(col_info)
    return trimmed
</file>

<file path="langroid/agent/special/lance_rag/__init__.py">
from . import query_planner_agent
from . import critic_agent
from . import lance_rag_task

__all__ = [
    "query_planner_agent",
    "critic_agent",
    "lance_rag_task",
]
</file>

<file path="langroid/agent/special/lance_rag/critic_agent.py">
"""
QueryPlanCritic is a ChatAgent that is created with a specific document schema.

Its role is to provide feedback on a Query Plan, which consists of:
- filter condition if needed (or empty string if no filter is needed)
- query - a possibly rephrased query that can be used to match the `content` field
- dataframe_calc - a Pandas-dataframe calculation/aggregation string, possibly empty
- original_query - the original query for reference
- result - the answer received from an assistant that used this QUERY PLAN.

This agent has access to two tools:
- QueryPlanTool: The handler method for this tool re-writes the query plan
  in plain text (non-JSON) so the LLM can provide its feedback using the
  QueryPlanFeedbackTool.
- QueryPlanFeedbackTool: LLM uses this tool to provide feedback on the Query Plan
"""

import logging

from langroid.agent.chat_agent import ChatAgent
from langroid.agent.chat_document import ChatDocument
from langroid.agent.special.lance_rag.query_planner_agent import (
    LanceQueryPlanAgentConfig,
)
from langroid.agent.special.lance_tools import (
    QueryPlanAnswerTool,
    QueryPlanFeedbackTool,
)
from langroid.agent.tools.orchestration import AgentDoneTool
from langroid.utils.constants import NO_ANSWER

logger = logging.getLogger(__name__)


class QueryPlanCriticConfig(LanceQueryPlanAgentConfig):
    name = "QueryPlanCritic"
    system_message = f"""
    You are an expert at carefully planning a query that needs to be answered
    based on a large collection of documents. These docs have a special `content` field
    and additional FILTERABLE fields in the SCHEMA below, along with the 
    SAMPLE VALUES for each field, and the DTYPE in PANDAS TERMINOLOGY.
    
    {{doc_schema}}
    
    The ORIGINAL QUERY is handled by a QUERY PLANNER who sends the PLAN to an ASSISTANT,
    who returns an ANSWER.
    
    You will receive a QUERY PLAN consisting of:
    - ORIGINAL QUERY from the user, which a QUERY PLANNER processes,
      to create a QUERY PLAN, to be handled by an ASSISTANT.
    - PANDAS-LIKE FILTER, WHICH CAN BE EMPTY (and it's fine if results sound reasonable)
      FILTER SHOULD ONLY BE USED IF EXPLICITLY REQUIRED BY THE QUERY.
      This filter selects the documents over which the REPHRASED QUERY will be applied,
      thus naturally, the Re-phrased Query should NOT mention any FILTER fields,
      since it applies to the documents AFTER FILTERING.
    - REPHRASED QUERY (CANNOT BE EMPTY) that will be used to match against the 
      CONTENT (not filterable) of the documents.
      In general the REPHRASED QUERY should be relied upon to match the CONTENT 
      of the docs. Thus the REPHRASED QUERY itself acts like a 
      SEMANTIC/LEXICAL/FUZZY FILTER since the Assistant is able to use it to match 
      the CONTENT of the docs in various ways (semantic, lexical, fuzzy, etc.). 
        Keep in mind that the ASSISTANT does NOT know anything about the FILTER fields,
        so the REPHRASED QUERY should NOT mention ANY FILTER fields.
        The assistant will answer based on documents whose CONTENTS match the QUERY, 
        possibly REPHRASED. 
        !!!!****THE REPHRASED QUERY SHOULD NEVER BE EMPTY****!!!
        
        
    - DATAFRAME CALCULATION, which must be a SINGLE LINE calculation (or empty),
        [NOTE ==> This calculation is applied AFTER the FILTER and REPHRASED QUERY.],
    - ANSWER received from an assistant that used this QUERY PLAN.
      IT IS TOTALLY FINE FOR THE ANSWER TO NOT MENTION ANY FILTERING CONDITIONS,
      or if the ANSWER STATEMENT is MISSING SOME CRITERIA in the ORIGINAL QUERY.

        Here is an example of a VALID Plan + Answer:
        
        ORIGINAL QUERY: "Which crime novels were written by Russian authors after 1900?"
        FILTER: "author_nationality == 'Russian' and year_written > 1900"
        REPHRASED QUERY: "crime novel" [NOTICE NO FILTER FIELDS MENTIONED!!!]
        DATAFRAME CALC: ""
        ANSWER: "The Master and Margarita by Mikhail Bulgakov" 
            [NOTICE the answer does NOT need to say "crime novel" or "russian author"]
            
            
        Other examples of VALID ANSWER for a given ORIGINAL QUERY:
        
        ORIGINAL QUERY: "Which mountain is taller than 8000 meters?"
        ANSWER: "Mount Everest" [NOTICE no mention of "taller than 8000 meters"]
        
        ORIGINAL QUERY: "Which country has hosted the most olympics?"
        ANSWER: "United States" [NOTICE no mention of "most olympics"]

    In addition to the above SCHEMA fields there is a `content` field which:
    - CANNOT appear in a FILTER, 
    - CAN appear in the DATAFRAME CALCULATION.
    THERE ARE NO OTHER FIELDS IN THE DOCUMENTS or in the RESULTING DATAFRAME.
        
    Your job is to act as a CRITIC and provide feedback, 
    ONLY using the `query_plan_feedback` tool, and DO NOT SAY ANYTHING ELSE.
    
    Here is how you must examine the QUERY PLAN + ANSWER:
    - ALL filtering conditions in the original query must be EXPLICITLY 
      mentioned in the FILTER, and the QUERY field should not be used for filtering.
    - If the ANSWER contains an ERROR message, then this means that the query
      plan execution FAILED, and your feedback should say INVALID along 
      with the ERROR message, `suggested_fix` that aims to help the assistant 
      fix the problem (or simply equals "address the the error shown in feedback")
    - Ask yourself, is the ANSWER in the expected form, e.g. 
        if the question is asking for the name of an ENTITY with max SIZE,
        then the answer should be the ENTITY name, NOT the SIZE!! 
    - If the ANSWER is in the expected form, then the QUERY PLAN is likely VALID,
      and your feedback should say VALID, with empty `suggested_fix`.
      ===> HOWEVER!!! Watch out for a spurious correct-looking answer, for EXAMPLE:
      the query was to find the ENTITY with a maximum SIZE, 
      but the dataframe calculation is find the SIZE, NOT the ENTITY!!      
    - If the ANSWER is {NO_ANSWER} or of the wrong form, 
      then try to DIAGNOSE the problem IN THE FOLLOWING ORDER:
      - DATAFRAME CALCULATION -- is it doing the right thing?
        Is it finding the Index of a row instead of the value in a column?
        Or another example: maybe it is finding the maximum population
           rather than the CITY with the maximum population?
        If you notice a problem with the DATAFRAME CALCULATION, then
        ONLY SUBMIT FEEDBACK ON THE DATAFRAME CALCULATION, and DO NOT
        SUGGEST ANYTHING ELSE.
      - If the DATAFRAME CALCULATION looks correct, then check if 
        the REPHRASED QUERY makes sense given the ORIGINAL QUERY and FILTER.
        If this is the problem, then ONLY SUBMIT FEEDBACK ON THE REPHRASED QUERY,
        and DO NOT SUGGEST ANYTHING ELSE.
      - If the REPHRASED QUERY looks correct, then check if the FILTER makes sense.
        REMEMBER: A filter should ONLY be used if EXPLICITLY REQUIRED BY THE QUERY.
     
     
     IMPORTANT!! The DATAFRAME CALCULATION is done AFTER applying the 
         FILTER and REPHRASED QUERY! Keep this in mind when evaluating 
         the correctness of the DATAFRAME CALCULATION.
    
    ALWAYS use `query_plan_feedback` tool/fn to present your feedback
    in the `feedback` field, and if any fix is suggested,
    present it in the `suggested_fix` field.
    DO NOT SAY ANYTHING ELSE OUTSIDE THE TOOL/FN.
    IF NO REVISION NEEDED, simply leave the `suggested_fix` field EMPTY,
    and SAY NOTHING ELSE
    and DO NOT EXPLAIN YOURSELF.        
    """


def plain_text_query_plan(msg: QueryPlanAnswerTool) -> str:
    plan = f"""
    OriginalQuery: {msg.plan.original_query}
    Filter: {msg.plan.filter}
    Rephrased Query: {msg.plan.query}
    DataframeCalc: {msg.plan.dataframe_calc}
    Answer: {msg.answer}
    """
    return plan


class QueryPlanCritic(ChatAgent):
    """
    Critic for LanceQueryPlanAgent, provides feedback on
    query plan + answer.
    """

    def __init__(self, cfg: LanceQueryPlanAgentConfig):
        super().__init__(cfg)
        self.config = cfg
        self.enable_message(QueryPlanAnswerTool, use=False, handle=True)
        self.enable_message(QueryPlanFeedbackTool, use=True, handle=True)
        self.enable_message(AgentDoneTool, use=False, handle=True)

    def init_state(self) -> None:
        super().init_state()
        self.expecting_feedback_tool = False

    def query_plan_answer(self, msg: QueryPlanAnswerTool) -> str:
        """Present query plan + answer in plain text (not JSON)
        so LLM can give feedback"""
        self.expecting_feedback_tool = True
        return plain_text_query_plan(msg)

    def query_plan_feedback(self, msg: QueryPlanFeedbackTool) -> AgentDoneTool:
        """Format Valid so return to Query Planner"""
        self.expecting_feedback_tool = False
        # indicate this task is Done, and return the tool as result
        return AgentDoneTool(tools=[msg])

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        """Remind the LLM to use QueryPlanFeedbackTool since it forgot"""
        if self.expecting_feedback_tool:
            return """
            You forgot to use the `query_plan_feedback` tool/function.
            Re-try your response using the `query_plan_feedback` tool/function,
            remember to provide feedback in the `feedback` field,
            and if any fix is suggested, provide it in the `suggested_fix` field.
            """
        return None
</file>

<file path="langroid/agent/special/lance_rag/lance_rag_task.py">
"""
The LanceRAGTaskCreator.new() method creates a 3-Agent system that uses this agent.
It takes a LanceDocChatAgent instance as argument, and adds two more agents:
- LanceQueryPlanAgent, which is given the LanceDB schema in LanceDocChatAgent,
and based on this schema, for a given user query, creates a Query Plan
using the QueryPlanTool, which contains a filter, a rephrased query,
and a dataframe_calc.
- QueryPlanCritic, which is given the LanceDB schema in LanceDocChatAgent,
 and gives feedback on the Query Plan and Result using the QueryPlanFeedbackTool.

The LanceRAGTaskCreator.new() method sets up the given LanceDocChatAgent and
QueryPlanCritic as sub-tasks of the LanceQueryPlanAgent's task.

Langroid's built-in task orchestration ensures that:
- the LanceQueryPlanAgent reformulates the plan based
    on the QueryPlanCritics's feedback,
- LLM deviations are corrected via tools and overrides of ChatAgent methods.
"""

import logging

from langroid.agent.special.lance_doc_chat_agent import LanceDocChatAgent
from langroid.agent.special.lance_rag.critic_agent import (
    QueryPlanCritic,
    QueryPlanCriticConfig,
)
from langroid.agent.special.lance_rag.query_planner_agent import (
    LanceQueryPlanAgent,
    LanceQueryPlanAgentConfig,
)
from langroid.agent.task import Task
from langroid.mytypes import Entity

logger = logging.getLogger(__name__)


class LanceRAGTaskCreator:
    @staticmethod
    def new(
        agent: LanceDocChatAgent,
        interactive: bool = True,
    ) -> Task:
        """
        Add a LanceFilterAgent to the LanceDocChatAgent,
        set up the corresponding Tasks, connect them,
        and return the top-level query_plan_task.
        """
        doc_agent_name = "LanceRAG"
        critic_name = "QueryPlanCritic"
        query_plan_agent_config = LanceQueryPlanAgentConfig(
            critic_name=critic_name,
            doc_agent_name=doc_agent_name,
            doc_schema=agent._get_clean_vecdb_schema(),
            llm=agent.config.llm,
        )
        query_plan_agent_config.set_system_message()

        critic_config = QueryPlanCriticConfig(
            doc_schema=agent._get_clean_vecdb_schema(),
            llm=agent.config.llm,
        )
        critic_config.set_system_message()

        query_planner = LanceQueryPlanAgent(query_plan_agent_config)
        query_plan_task = Task(
            query_planner,
            interactive=interactive,
        )
        critic_agent = QueryPlanCritic(critic_config)
        critic_task = Task(
            critic_agent,
            interactive=False,
        )
        rag_task = Task(
            agent,
            name="LanceRAG",
            interactive=False,
            done_if_response=[Entity.LLM],  # done when non-null response from LLM
            done_if_no_response=[Entity.LLM],  # done when null response from LLM
        )
        query_plan_task.add_sub_task([critic_task, rag_task])
        return query_plan_task
</file>

<file path="langroid/agent/special/lance_rag/query_planner_agent.py">
"""
LanceQueryPlanAgent is a ChatAgent created with a specific document schema.
Given a QUERY, the LLM constructs a Query Plan consisting of:
- filter condition if needed (or empty string if no filter is needed)
- query - a possibly rephrased query that can be used to match the `content` field
- dataframe_calc - a Pandas-dataframe calculation/aggregation string, possibly empty
- original_query - the original query for reference

This agent has access to two tools:
- QueryPlanTool, which is used to generate the Query Plan, and the handler of
    this tool simply passes it on to the RAG agent named in config.doc_agent_name.
- QueryPlanFeedbackTool, which is used to handle feedback on the Query Plan and
  Result from the RAG agent. The QueryPlanFeedbackTool is used by
  the QueryPlanCritic, who inserts feedback into the `feedback` field
"""

import logging
from typing import Optional

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocument
from langroid.agent.special.lance_tools import (
    AnswerTool,
    QueryPlan,
    QueryPlanAnswerTool,
    QueryPlanFeedbackTool,
    QueryPlanTool,
)
from langroid.agent.tools.orchestration import AgentDoneTool, ForwardTool
from langroid.utils.constants import NO_ANSWER

logger = logging.getLogger(__name__)


class LanceQueryPlanAgentConfig(ChatAgentConfig):
    name: str = "LancePlanner"
    critic_name: str = "QueryPlanCritic"
    doc_agent_name: str = "LanceRAG"
    doc_schema: str = ""
    use_tools = False
    max_retries: int = 5  # max number of retries for query plan
    use_functions_api = True

    system_message = """
    You will receive a QUERY, to be answered based on an EXTREMELY LARGE collection
    of documents you DO NOT have access to, but your ASSISTANT does.
    You only know that these documents have a special `content` field
    and additional FILTERABLE fields in the SCHEMA below, along with the 
    SAMPLE VALUES for each field, and the DTYPE in PANDAS TERMINOLOGY.
    
    {doc_schema}
    
    Based on the QUERY and the above SCHEMA, your task is to determine a QUERY PLAN,
    consisting of:
    -  a PANDAS-TYPE FILTER (can be empty string) that would help the ASSISTANT to 
        answer the query.
        Remember the FILTER can refer to ANY fields in the above SCHEMA
        EXCEPT the `content` field of the documents. 
        ONLY USE A FILTER IF EXPLICITLY MENTIONED IN THE QUERY.
        TO get good results, for STRING MATCHES, consider using LIKE instead of =, e.g.
        "CEO LIKE '%Jobs%'" instead of "CEO = 'Steve Jobs'"
        YOUR FILTER MUST BE A PANDAS-TYPE FILTER, respecting the shown DTYPES.        
    - a possibly REPHRASED QUERY (CANNOT BE EMPTY) to be answerable given the FILTER.
        Keep in mind that the ASSISTANT does NOT know anything about the FILTER fields,
        so the REPHRASED QUERY should NOT mention ANY FILTER fields.
        The assistant will answer based on documents whose CONTENTS match the QUERY, 
        possibly REPHRASED. 
        !!!!****THE REPHRASED QUERY SHOULD NEVER BE EMPTY****!!!
    - an OPTIONAL SINGLE-LINE Pandas-dataframe calculation/aggregation string 
        that can be used to calculate the answer to the original query, 
        e.g. "df["rating"].mean()",
        or "df.groupby("director").mean()["rating"]", 
        or EMPTY string if no calc is needed. 
        The dataframe calc CAN refer to the `content` field.
        If a DataFrame calculation is NOT needed, leave this field EMPTY.
        
        IMPORTANT: The DataFrame `df` in this calculation is the result of 
        applying the FILTER AND REPHRASED QUERY to the documents.
        
        WATCH OUT!! When deciding the dataframe calc, if any, CAREFULLY
        note what the query is asking, and ensure that the result of your
        dataframe calc expression would answer the query.                
    
    
    EXAMPLE:
    ------- 
    Suppose there is a document-set about crime reports, where:
     CONTENT = crime report,
     Filterable SCHEMA consists of City, Year, num_deaths.
    
    Then given this ORIGINAL QUERY: 
    
        Total deaths in shoplifting crimes in Los Angeles in 2023?
    
    A POSSIBLE QUERY PLAN could be:
    
    FILTER: "City LIKE '%Los Angeles%' AND Year = 2023"
    REPHRASED QUERY: "shoplifting crime" --> this will be used to MATCH content of docs
         [NOTE: we dropped the FILTER fields City and Year since the 
         ASSISTANT does not know about them and only uses the query to 
         match the CONTENT of the docs.]
    DATAFRAME CALCULATION: "df["num_deaths"].sum()"
        NOTE!!! The DataFrame `df` in this calculation is the result of
        applying the FILTER AND REPHRASED QUERY to the documents, 
        hence this computation will give the total deaths in shoplifting crimes.
    ------------- END OF EXAMPLE ----------------
    
    The FILTER must be a PANDAS-like condition, e.g. 
    "year > 2000 AND genre = 'ScienceFiction'".
    To ensure you get useful results, you should make your FILTER 
    NOT TOO STRICT, e.g. look for approximate match using LIKE, etc.
    E.g. "CEO LIKE '%Jobs%'" instead of "CEO = 'Steve Jobs'"
    Use DOT NOTATION to refer to nested fields, e.g. `metadata.year`, etc. 
        
    You must FIRST present the QUERY PLAN using the `query_plan` tool/function.
    This will be handled by your document assistant, who will produce an ANSWER.
            
    You may receive FEEDBACK on your QUERY PLAN and received ANSWER,
    from the 'QueryPlanCritic' who may offer suggestions for
    a better FILTER, REPHRASED QUERY, or DATAFRAME CALCULATION.
                  
    At the BEGINNING if there is no query, ASK the user what they want to know.
    """

    def set_system_message(self) -> None:
        self.system_message = self.system_message.format(
            doc_schema=self.doc_schema,
        )


class LanceQueryPlanAgent(ChatAgent):
    def __init__(self, config: LanceQueryPlanAgentConfig):
        super().__init__(config)
        self.config: LanceQueryPlanAgentConfig = config
        # This agent should generate the QueryPlanTool
        # as well as handle it for validation
        self.enable_message(QueryPlanTool, use=True, handle=True)
        self.enable_message(QueryPlanFeedbackTool, use=False, handle=True)
        self.enable_message(AnswerTool, use=False, handle=True)
        # neither use nor handle! Added to "known" tools so that the Planner agent
        # can avoid processing it
        self.enable_message(QueryPlanAnswerTool, use=False, handle=False)
        # LLM will not use this, so set use=False (Agent generates it)
        self.enable_message(AgentDoneTool, use=False, handle=True)

    def init_state(self) -> None:
        super().init_state()
        self.curr_query_plan: QueryPlan | None = None
        self.expecting_query_plan: bool = False
        # how many times re-trying query plan in response to feedback:
        self.n_retries: int = 0
        self.n_query_plan_reminders: int = 0
        self.result: str = ""  # answer received from LanceRAG

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        self.expecting_query_plan = True
        return super().llm_response(message)

    def query_plan(self, msg: QueryPlanTool) -> ForwardTool | str:
        """Valid, tool msg, forward chat_doc to RAG Agent.
        Note this chat_doc will already have the
        QueryPlanTool in its tool_messages list.
        We just update the recipient to the doc_agent_name.
        """
        # save, to be used to assemble QueryPlanResultTool
        if len(msg.plan.dataframe_calc.split("\n")) > 1:
            return "DATAFRAME CALCULATION must be a SINGLE LINE; Retry the `query_plan`"
        self.curr_query_plan = msg.plan
        self.expecting_query_plan = False

        # To forward the QueryPlanTool to doc_agent, we could either:

        # (a) insert `recipient` in the QueryPlanTool:
        # QPWithRecipient = QueryPlanTool.require_recipient()
        # qp = QPWithRecipient(**msg.dict(), recipient=self.config.doc_agent_name)
        # return qp
        #
        # OR
        #
        # (b) create an agent response with recipient and tool_messages.
        # response = self.create_agent_response(
        #     recipient=self.config.doc_agent_name, tool_messages=[msg]
        # )
        # return response

        # OR
        # (c) use the ForwardTool:
        return ForwardTool(agent=self.config.doc_agent_name)

    def query_plan_feedback(self, msg: QueryPlanFeedbackTool) -> str | AgentDoneTool:
        """Process Critic feedback on QueryPlan + Answer from RAG Agent"""
        # We should have saved answer in self.result by this time,
        # since this Agent seeks feedback only after receiving RAG answer.
        if (
            msg.suggested_fix == ""
            and NO_ANSWER not in self.result
            and self.result != ""
        ):
            # This means the result is good AND Query Plan is fine,
            # as judged by Critic
            # (Note sometimes critic may have empty suggested_fix even when
            # the result is NO_ANSWER)
            self.n_retries = 0  # good answer, so reset this
            return AgentDoneTool(content=self.result)
        self.n_retries += 1
        if self.n_retries >= self.config.max_retries:
            # bail out to avoid infinite loop
            self.n_retries = 0
            return AgentDoneTool(content=NO_ANSWER)

        # there is a suggested_fix, OR the result is empty or NO_ANSWER
        if self.result == "" or NO_ANSWER in self.result:
            # if result is empty or NO_ANSWER, we should retry the query plan
            feedback = """
            There was no answer, which might mean there is a problem in your query.
            """
            suggested = "Retry the `query_plan` to try to get a non-null answer"
        else:
            feedback = msg.feedback
            suggested = msg.suggested_fix

        self.expecting_query_plan = True

        return f"""
        here is FEEDBACK about your QUERY PLAN, and a SUGGESTED FIX.
        Modify the QUERY PLAN if needed:
        ANSWER: {self.result}
        FEEDBACK: {feedback}
        SUGGESTED FIX: {suggested}
        """

    def answer_tool(self, msg: AnswerTool) -> QueryPlanAnswerTool:
        """Handle AnswerTool received from LanceRagAgent:
        Construct a QueryPlanAnswerTool with the answer"""
        self.result = msg.answer  # save answer to interpret feedback later
        assert self.curr_query_plan is not None
        query_plan_answer_tool = QueryPlanAnswerTool(
            plan=self.curr_query_plan,
            answer=msg.answer,
        )
        self.curr_query_plan = None  # reset
        return query_plan_answer_tool

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        """
        Remind to use QueryPlanTool if we are expecting it.
        """
        if self.expecting_query_plan and self.n_query_plan_reminders < 5:
            self.n_query_plan_reminders += 1
            return """
            You FORGOT to use the `query_plan` tool/function, 
            OR you had a WRONG JSON SYNTAX when trying to use it.
            Re-try your response using the `query_plan` tool/function CORRECTLY.
            """
        self.n_query_plan_reminders = 0  # reset
        return None
</file>

<file path="langroid/agent/special/neo4j/csv_kg_chat.py">
from typing import List, Optional, Tuple

import pandas as pd
import typer

from langroid.agent.special.neo4j.neo4j_chat_agent import (
    Neo4jChatAgent,
    Neo4jChatAgentConfig,
)
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.parsing.table_loader import read_tabular_data
from langroid.utils.output import status
from langroid.vector_store.base import VectorStoreConfig

app = typer.Typer()


BUILD_KG_INSTRUCTIONS = """
    Your task is to build a knowledge graph based on a CSV file. 
    
    You need to generate the graph database based on this
    header: 
    
    {header}
    
    and these sample rows: 
    
    {sample_rows}. 
    
    Leverage the above information to: 
    - Define node labels and their properties
    - Infer relationships
    - Infer constraints 
    ASK me if you need further information to figure out the schema.
    You can use the tool/function `pandas_to_kg` to display and confirm 
    the nodes and relationships.
"""

DEFAULT_CSV_KG_CHAT_SYSTEM_MESSAGE = """
    You are an expert in Knowledge Graphs and analyzing them using Neo4j.
    You will be asked to answer questions based on the knowledge graph.
"""


def _preprocess_dataframe_for_neo4j(
    df: pd.DataFrame, default_value: Optional[str] = None, remove_null_rows: bool = True
) -> pd.DataFrame:
    """
    Preprocess a DataFrame for Neo4j import by fixing mismatched quotes in string
        columns and handling null or missing values.

    Args:
        df (DataFrame): The DataFrame to be preprocessed.
        default_value (str, optional): The default value to replace null values.
        This is ignored if remove_null_rows is True. Defaults to None.
        remove_null_rows (bool, optional): If True, rows with any null values will
            be removed.
        If False, null values will be filled with default_value. Defaults to False.

    Returns:
        DataFrame: The preprocessed DataFrame ready for Neo4j import.
    """

    # Fix mismatched quotes in string columns
    for column in df.select_dtypes(include=["object"]):
        df[column] = df[column].apply(
            lambda x: x + '"' if (isinstance(x, str) and x.count('"') % 2 != 0) else x
        )

    # Handle null or missing values
    if remove_null_rows:
        df = df.dropna()
    else:
        if default_value is not None:
            df = df.fillna(default_value)

    return df


class CSVGraphAgentConfig(Neo4jChatAgentConfig):
    system_message: str = DEFAULT_CSV_KG_CHAT_SYSTEM_MESSAGE
    data: str | pd.DataFrame | None  # data file, URL, or DataFrame
    separator: None | str = None  # separator for data file
    vecdb: None | VectorStoreConfig = None
    llm: OpenAIGPTConfig = OpenAIGPTConfig(
        chat_model=OpenAIChatModel.GPT4_TURBO,
    )


class PandasToKGTool(ToolMessage):
    request: str = "pandas_to_kg"
    purpose: str = """Use this tool to create ONLY nodes and their relationships based
    on the created model.
    Take into account that the Cypher query will be executed while iterating 
    over the rows in the CSV file (e.g. `index, row in df.iterrows()`),
    so there NO NEED to load the CSV.
    Make sure you send me the cypher query in this format: 
    - placeholders in <cypherQuery> should be based on the CSV header. 
    - <args> an array wherein each element corresponds to a placeholder in the 
    <cypherQuery> and provided in the same order as the headers. 
    SO the <args> should be the result of: `[row_dict[header] for header in headers]`
    """
    cypherQuery: str
    args: list[str]

    @classmethod
    def examples(cls) -> List["ToolMessage" | Tuple[str, "ToolMessage"]]:
        return [
            cls(
                cypherQuery="""MERGE (employee:Employee {name: $employeeName, 
                id: $employeeId})\n
                MERGE (department:Department {name: $departmentName})\n
                MERGE (employee)-[:WORKS_IN]->(department)\n
                SET employee.email = $employeeEmail""",
                args=["employeeName", "employeeId", "departmentName", "employeeEmail"],
            ),
        ]


class CSVGraphAgent(Neo4jChatAgent):
    def __init__(self, config: CSVGraphAgentConfig):
        formatted_build_instr = ""
        if isinstance(config.data, pd.DataFrame):
            df = config.data
            self.df = df
        else:
            if config.data:
                df = read_tabular_data(config.data, config.separator)
                df_cleaned = _preprocess_dataframe_for_neo4j(df)

                df_cleaned.columns = df_cleaned.columns.str.strip().str.replace(
                    " +", "_", regex=True
                )

                self.df = df_cleaned

                formatted_build_instr = BUILD_KG_INSTRUCTIONS.format(
                    header=self.df.columns, sample_rows=self.df.head(3)
                )

        config.system_message = config.system_message + formatted_build_instr
        super().__init__(config)

        self.config: Neo4jChatAgentConfig = config

        self.enable_message(PandasToKGTool)

    def pandas_to_kg(self, msg: PandasToKGTool) -> str:
        """
        Creates nodes and relationships in the graph database based on the data in
        a CSV file.

        Args:
            msg (PandasToKGTool): An instance of the PandasToKGTool class containing
                the necessary information for generating nodes.

        Returns:
            str: A string indicating the success or failure of the operation.
        """
        with status("[cyan]Generating graph database..."):
            if self.df is not None and hasattr(self.df, "iterrows"):
                for counter, (index, row) in enumerate(self.df.iterrows()):
                    row_dict = row.to_dict()
                    response = self.write_query(
                        msg.cypherQuery,
                        parameters={header: row_dict[header] for header in msg.args},
                    )
                    # there is a possibility the generated cypher query is not correct
                    # so we need to check the response before continuing to the
                    # iteration
                    if counter == 0 and not response.success:
                        return str(response.data)
            return "Graph database successfully generated"
</file>

<file path="langroid/agent/special/neo4j/neo4j_chat_agent.py">
import logging
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Union

from rich import print
from rich.console import Console

from langroid.pydantic_v1 import BaseModel, BaseSettings

if TYPE_CHECKING:
    import neo4j

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocument
from langroid.agent.special.neo4j.system_messages import (
    ADDRESSING_INSTRUCTION,
    DEFAULT_NEO4J_CHAT_SYSTEM_MESSAGE,
    DONE_INSTRUCTION,
    SCHEMA_PROVIDED_SYS_MSG,
    SCHEMA_TOOLS_SYS_MSG,
)
from langroid.agent.special.neo4j.tools import (
    CypherCreationTool,
    CypherRetrievalTool,
    GraphSchemaTool,
    cypher_creation_tool_name,
    cypher_retrieval_tool_name,
    graph_schema_tool_name,
)
from langroid.agent.tools.orchestration import DoneTool, ForwardTool
from langroid.exceptions import LangroidImportError
from langroid.mytypes import Entity
from langroid.utils.constants import SEND_TO

logger = logging.getLogger(__name__)

console = Console()

NEO4J_ERROR_MSG = "There was an error in your Cypher Query"


# TOOLS to be used by the agent


class Neo4jSettings(BaseSettings):
    uri: str = ""
    username: str = ""
    password: str = ""
    database: str = ""

    class Config:
        # This enables the use of environment variables to set the settings,
        # e.g. NEO4J_URI, NEO4J_USERNAME, etc.,
        # which can either be set in a .env file or in the shell via export cmds.
        env_prefix = "NEO4J_"


class QueryResult(BaseModel):
    success: bool
    data: List[Dict[Any, Any]] | str | None = None


class Neo4jChatAgentConfig(ChatAgentConfig):
    neo4j_settings: Neo4jSettings = Neo4jSettings()
    system_message: str = DEFAULT_NEO4J_CHAT_SYSTEM_MESSAGE
    kg_schema: Optional[List[Dict[str, Any]]] = None
    database_created: bool = False
    # whether agent MUST use schema_tools to get schema, i.e.
    # schema is NOT initially provided
    use_schema_tools: bool = True
    use_functions_api: bool = True
    use_tools: bool = False
    # whether the agent is used in a continuous chat with user,
    # as opposed to returning a result from the task.run()
    chat_mode: bool = False
    addressing_prefix: str = ""


class Neo4jChatAgent(ChatAgent):
    def __init__(self, config: Neo4jChatAgentConfig):
        """Initialize the Neo4jChatAgent.

        Raises:
            ValueError: If database information is not provided in the config.
        """
        self.config: Neo4jChatAgentConfig = config
        self._validate_config()
        self._import_neo4j()
        self._initialize_db()
        self._init_tools_sys_message()
        self.init_state()

    def init_state(self) -> None:
        super().init_state()
        self.current_retrieval_cypher_query: str = ""
        self.tried_schema: bool = False

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ForwardTool | None:
        """
        When LLM sends a no-tool msg, assume user is the intended recipient,
        and if in interactive mode, forward the msg to the user.
        """

        done_tool_name = DoneTool.default_value("request")
        forward_tool_name = ForwardTool.default_value("request")
        if isinstance(msg, ChatDocument) and msg.metadata.sender == Entity.LLM:
            if self.interactive:
                return ForwardTool(agent="User")
            else:
                if self.config.chat_mode:
                    return f"""
                    Since you did not explicitly address the User, it is not clear
                    whether:
                    - you intend this to be the final response to the 
                      user's query/request, in which case you must use the 
                      `{forward_tool_name}` to indicate this.
                    - OR, you FORGOT to use an Appropriate TOOL,
                      in which case you should use the available tools to
                      make progress on the user's query/request.
                    """
                return f"""
                The intent of your response is not clear:
                - if you intended this to be the final answer to the user's query,
                    then use the `{done_tool_name}` to indicate so,
                    with the `content` set to the answer or result.
                - otherwise, use one of the available tools to make progress 
                    to arrive at the final answer.
                """
        return None

    def _validate_config(self) -> None:
        """Validate the configuration to ensure all necessary fields are present."""
        assert isinstance(self.config, Neo4jChatAgentConfig)
        if (
            self.config.neo4j_settings.username is None
            and self.config.neo4j_settings.password is None
            and self.config.neo4j_settings.database
        ):
            raise ValueError("Neo4j env information must be provided")

    def _import_neo4j(self) -> None:
        """Dynamically imports the Neo4j module and sets it as a global variable."""
        global neo4j
        try:
            import neo4j
        except ImportError:
            raise LangroidImportError("neo4j", "neo4j")

    def _initialize_db(self) -> None:
        """
        Initializes a connection to the Neo4j database using the configuration settings.
        """
        try:
            assert isinstance(self.config, Neo4jChatAgentConfig)
            self.driver = neo4j.GraphDatabase.driver(
                self.config.neo4j_settings.uri,
                auth=(
                    self.config.neo4j_settings.username,
                    self.config.neo4j_settings.password,
                ),
            )
            with self.driver.session() as session:
                result = session.run("MATCH (n) RETURN count(n) as count")
                count = result.single()["count"]  # type: ignore
                self.config.database_created = count > 0

            # If database has data, get schema
            if self.config.database_created:
                # this updates self.config.kg_schema
                self.graph_schema_tool(None)

        except Exception as e:
            raise ConnectionError(f"Failed to initialize Neo4j connection: {e}")

    def close(self) -> None:
        """close the connection"""
        if self.driver:
            self.driver.close()

    def retry_query(self, e: Exception, query: str) -> str:
        """
        Generate an error message for a failed Cypher query and return it.

        Args:
            e (Exception): The exception raised during the Cypher query execution.
            query (str): The Cypher query that failed.

        Returns:
            str: The error message.
        """
        logger.error(f"Cypher Query failed: {query}\nException: {e}")

        # Construct the error message
        error_message_template = f"""\
        {NEO4J_ERROR_MSG}: '{query}'
        {str(e)}
        Run a new query, correcting the errors.
        """

        return error_message_template

    def read_query(
        self, query: str, parameters: Optional[Dict[Any, Any]] = None
    ) -> QueryResult:
        """
        Executes a given Cypher query with parameters on the Neo4j database.

        Args:
            query (str): The Cypher query string to be executed.
            parameters (Optional[Dict[Any, Any]]): A dictionary of parameters for
                                                    the query.

        Returns:
            QueryResult: An object representing the outcome of the query execution.
        """
        if not self.driver:
            return QueryResult(
                success=False, data="No database connection is established."
            )

        try:
            assert isinstance(self.config, Neo4jChatAgentConfig)
            with self.driver.session(
                database=self.config.neo4j_settings.database
            ) as session:
                result = session.run(query, parameters)
                if result.peek():
                    records = [record.data() for record in result]
                    return QueryResult(success=True, data=records)
                else:
                    return QueryResult(success=True, data=[])
        except Exception as e:
            logger.error(f"Failed to execute query: {query}\n{e}")
            error_message = self.retry_query(e, query)
            return QueryResult(success=False, data=error_message)
        finally:
            self.close()

    def write_query(
        self, query: str, parameters: Optional[Dict[Any, Any]] = None
    ) -> QueryResult:
        """
        Executes a write transaction using a given Cypher query on the Neo4j database.
        This method should be used for queries that modify the database.

        Args:
            query (str): The Cypher query string to be executed.
            parameters (dict, optional): A dict of parameters for the Cypher query.

        Returns:
            QueryResult: An object representing the outcome of the query execution.
                         It contains a success flag and an optional error message.
        """
        # Check if query contains database/collection creation patterns
        query_upper = query.upper()
        is_creation_query = any(
            [
                "CREATE" in query_upper,
                "MERGE" in query_upper,
                "CREATE CONSTRAINT" in query_upper,
                "CREATE INDEX" in query_upper,
            ]
        )

        if is_creation_query:
            self.config.database_created = True
            logger.info("Detected database/collection creation query")

        if not self.driver:
            return QueryResult(
                success=False, data="No database connection is established."
            )

        try:
            assert isinstance(self.config, Neo4jChatAgentConfig)
            with self.driver.session(
                database=self.config.neo4j_settings.database
            ) as session:
                session.write_transaction(lambda tx: tx.run(query, parameters))
                return QueryResult(success=True)
        except Exception as e:
            logging.warning(f"An error occurred: {e}")
            error_message = self.retry_query(e, query)
            return QueryResult(success=False, data=error_message)
        finally:
            self.close()

    # TODO: test under enterprise edition because community edition doesn't allow
    # database creation/deletion
    def remove_database(self) -> None:
        """Deletes all nodes and relationships from the current Neo4j database."""
        delete_query = """
                MATCH (n)
                DETACH DELETE n
            """
        response = self.write_query(delete_query)

        if response.success:
            print("[green]Database is deleted!")
        else:
            print("[red]Database is not deleted!")

    def cypher_retrieval_tool(self, msg: CypherRetrievalTool) -> str:
        """ "
        Handle a CypherRetrievalTool message by executing a Cypher query and
        returning the result.
        Args:
            msg (CypherRetrievalTool): The tool-message to handle.

        Returns:
            str: The result of executing the cypher_query.
        """
        if not self.tried_schema:
            return f"""
            You did not yet use the `{graph_schema_tool_name}` tool to get the schema 
            of the neo4j knowledge-graph db. Use that tool first before using 
            the `{cypher_retrieval_tool_name}` tool, to ensure you know all the correct
            node labels, relationship types, and property keys available in
            the database.
            """
        elif not self.config.database_created:
            return f"""
            You have not yet created the Neo4j database. 
            Use the `{cypher_creation_tool_name}`
            tool to create the database first before using the 
            `{cypher_retrieval_tool_name}` tool.
            """
        query = msg.cypher_query
        self.current_retrieval_cypher_query = query
        logger.info(f"Executing Cypher query: {query}")
        response = self.read_query(query)
        if isinstance(response.data, list) and len(response.data) == 0:
            return """
            No results found; check if your query used the right label names -- 
            remember these are case sensitive, so you have to use the exact label
            names you found in the schema. 
            Or retry using one of the  RETRY-SUGGESTIONS in your instructions. 
            """
        return str(response.data)

    def cypher_creation_tool(self, msg: CypherCreationTool) -> str:
        """ "
        Handle a CypherCreationTool message by executing a Cypher query and
        returning the result.
        Args:
            msg (CypherCreationTool): The tool-message to handle.

        Returns:
            str: The result of executing the cypher_query.
        """
        query = msg.cypher_query

        logger.info(f"Executing Cypher query: {query}")
        response = self.write_query(query)
        if response.success:
            self.config.database_created = True
            return "Cypher query executed successfully"
        else:
            return str(response.data)

    # TODO: There are various ways to get the schema. The current one uses the func
    # `read_query`, which requires post processing to identify whether the response upon
    # the schema query is valid. Another way is to isolate this func from `read_query`.
    # The current query works well. But we could use the queries here:
    # https://github.com/neo4j/NaLLM/blob/1af09cd117ba0777d81075c597a5081583568f9f/api/
    # src/driver/neo4j.py#L30
    def graph_schema_tool(
        self, msg: GraphSchemaTool | None
    ) -> str | Optional[Union[str, List[Dict[Any, Any]]]]:
        """
        Retrieves the schema of a Neo4j graph database.

        Args:
            msg (GraphSchemaTool): An instance of GraphDatabaseSchema, typically
            containing information or parameters needed for the database query.

        Returns:
            str: The visual representation of the database schema as a string, or a
            message stating that the database schema is empty or not valid.

        Raises:
            This function does not explicitly raise exceptions but depends on the
            behavior of 'self.read_query' method, which might raise exceptions related
             to database connectivity or query execution.
        """
        self.tried_schema = True
        if self.config.kg_schema is not None and len(self.config.kg_schema) > 0:
            return self.config.kg_schema
        schema_result = self.read_query("CALL db.schema.visualization()")
        if schema_result.success:
            # there is a possibility that the schema is empty, which is a valid response
            # the schema.data will be: [{"nodes": [], "relationships": []}]
            self.config.kg_schema = schema_result.data  # type: ignore
            return schema_result.data
        else:
            return f"Failed to retrieve schema: {schema_result.data}"

    def _init_tools_sys_message(self) -> None:
        """Initialize message tools used for chatting."""
        self.tried_schema = False
        message = self._format_message()
        self.config.system_message = self.config.system_message.format(mode=message)
        if self.config.chat_mode:
            self.config.addressing_prefix = self.config.addressing_prefix or SEND_TO
            self.config.system_message += ADDRESSING_INSTRUCTION.format(
                prefix=self.config.addressing_prefix
            )
        else:
            self.config.system_message += DONE_INSTRUCTION
        super().__init__(self.config)
        # Note we are enabling GraphSchemaTool regardless of whether
        # self.config.use_schema_tools is True or False, because
        # even when schema provided, the agent may later want to get the schema,
        # e.g. if the db evolves, or if it needs to bring in the schema
        self.enable_message(
            [
                GraphSchemaTool,
                CypherRetrievalTool,
                CypherCreationTool,
                DoneTool,
            ]
        )

    def _format_message(self) -> str:
        if self.driver is None:
            raise ValueError("Database driver None")
        assert isinstance(self.config, Neo4jChatAgentConfig)
        return (
            SCHEMA_TOOLS_SYS_MSG
            if self.config.use_schema_tools
            else SCHEMA_PROVIDED_SYS_MSG.format(schema=self.graph_schema_tool(None))
        )
</file>

<file path="langroid/agent/special/neo4j/system_messages.py">
from langroid.agent.special.neo4j.tools import (
    cypher_creation_tool_name,
    cypher_retrieval_tool_name,
    graph_schema_tool_name,
)
from langroid.agent.tools.orchestration import DoneTool

done_tool_name = DoneTool.default_value("request")

graph_schema_tool_description = f"""
`{graph_schema_tool_name}` tool/function-call to get all the node labels, relationship 
 types, and property keys available in your Neo4j database. You MUST use
 this tool BEFORE attempting to use the `{cypher_retrieval_tool_name}` tool,
 to ensure that you are using the correct node labels, relationship types, and
 property keys in your `{cypher_retrieval_tool_name}` tool/function-call.
"""

cypher_retrieval_tool_description = f"""
`{cypher_retrieval_tool_name}` tool/function-call to retrieve information from the 
     graph database to answer questions.
"""

cypher_creation_tool_description = f"""
`{cypher_creation_tool_name}` tool/function-call to execute cypher query that creates
   entities/relationships in the graph database.
"""

cypher_query_instructions = """
You must be smart about using the right node labels, relationship types, and property
keys based on the english description. If you are thinking of using a node label,
relationship type, or property key that does not exist, you are probably on the wrong 
track, so you should try your best to answer based on an existing table or column.
DO NOT assume any nodes or relationships other than those above.
"""


# sys msg to use when schema already provided initially,
# so agent does not need to use schema tool, at least initially,
# but may do so later if the db evolves, or if needs to bring in the schema
# to more recent context.
SCHEMA_PROVIDED_SYS_MSG = f"""You are a data scientist and expert in Knowledge Graphs, 
with expertise in answering questions by interacting with a Neo4j graph database.

The schema below describes the Neo4j database structure, node labels, 
relationship types, and property keys available in your Neo4j database.

=== SCHEMA ===
{{schema}}
=== END SCHEMA ===

To help with the user's question or database update/creation request, 
you have access to these tools:

- {cypher_retrieval_tool_description}

- {cypher_creation_tool_description}

Since the schema has been provided, you may not need to use the tool below,
but you may use it if you need to remind yourself about the schema:

- {graph_schema_tool_description}
 
"""

# sys msg to use when schema is not initially provided,
# and we want agent to use schema tool to get schema
SCHEMA_TOOLS_SYS_MSG = f"""You are a data scientist and expert in Knowledge Graphs, 
with expertise in answering questions by querying Neo4j database.
You have access to the following tools:

- {graph_schema_tool_description}

- {cypher_retrieval_tool_description}

- {cypher_creation_tool_description}

"""

DEFAULT_NEO4J_CHAT_SYSTEM_MESSAGE = f"""
{{mode}}

You do not need to be able to answer a question with just one query. 
You could make a sequence of Cypher queries to find the answer to the question.

{cypher_query_instructions}



RETRY-SUGGESTIONS:
If you receive a null or other unexpected result,
(a) make sure you use the available TOOLs correctly,
(b) USE `{graph_schema_tool_name}` tool/function-call to get all the node labels, 
    relationship types, and property keys available in your Neo4j database. 
(c) LABELS are CASE-SENSITIVE -- make sure you adhere to the exact label name
   you found in the schema.
(d) see if you have made an assumption in your Neo4j query, and try another way, 
   or use `{cypher_retrieval_tool_name}` to explore the database contents before 
   submitting your final query. 
(e) USE `{cypher_creation_tool_name}` tool/function-call to execute cypher query that 
    creates entities/relationships in the graph database.
(f) Try APPROXIMATE or PARTIAL MATCHES to strings in the user's query, 
    e.g. user may ask about "Godfather" instead of "The Godfather",
    or try using CASE-INSENSITIVE MATCHES.

Start by asking what the user needs help with.
"""

ADDRESSING_INSTRUCTION = """
IMPORTANT - Whenever you are NOT writing a CYPHER query, make sure you address the 
user using {prefix}User. You MUST use the EXACT syntax {prefix} !!!

In other words, you ALWAYS EITHER:
 - write a CYPHER query using one of the tools, 
 - OR address the user using {prefix}User.
"""

DONE_INSTRUCTION = f"""
When you finally have the answer to a user's query or request, 
use the `{done_tool_name}` with `content` set to the answer or result.
"""
</file>

<file path="langroid/agent/special/neo4j/tools.py">
from langroid.agent import ToolMessage


class CypherRetrievalTool(ToolMessage):
    request: str = "cypher_retrieval_tool"
    purpose: str = """To send the <cypher_query> to retrieve 
        data from the graph database based on provided text description and schema.
        """
    cypher_query: str


cypher_retrieval_tool_name = CypherRetrievalTool.default_value("request")


class CypherCreationTool(ToolMessage):
    request: str = "cypher_creation_tool"
    purpose: str = """
        To send the <cypher_query> to create 
        entities/relationships in the graph database.
        """
    cypher_query: str


cypher_creation_tool_name = CypherCreationTool.default_value("request")


class GraphSchemaTool(ToolMessage):
    request: str = "graph_schema_tool"
    purpose: str = """To get the schema of the graph database."""


graph_schema_tool_name = GraphSchemaTool.default_value("request")
</file>

<file path="langroid/agent/special/sql/utils/__init__.py">
from . import tools
from . import description_extractors
from . import populate_metadata
from . import system_message
from .tools import (
    RunQueryTool,
    GetTableNamesTool,
    GetTableSchemaTool,
    GetColumnDescriptionsTool,
)

__all__ = [
    "RunQueryTool",
    "GetTableNamesTool",
    "GetTableSchemaTool",
    "GetColumnDescriptionsTool",
    "description_extractors",
    "populate_metadata",
    "system_message",
    "tools",
]
</file>

<file path="langroid/agent/special/sql/utils/description_extractors.py">
from typing import Any, Dict, List, Optional

from langroid.exceptions import LangroidImportError

try:
    from sqlalchemy import inspect, text
    from sqlalchemy.engine import Engine
except ImportError as e:
    raise LangroidImportError(extra="sql", error=str(e))


def extract_postgresql_descriptions(
    engine: Engine,
    multi_schema: bool = False,
) -> Dict[str, Dict[str, Any]]:
    """
    Extracts descriptions for tables and columns from a PostgreSQL database.

    This method retrieves the descriptions of tables and their columns
    from a PostgreSQL database using the provided SQLAlchemy engine.

    Args:
        engine (Engine): SQLAlchemy engine connected to a PostgreSQL database.
        multi_schema (bool): Generate descriptions for all schemas in the database.

    Returns:
        Dict[str, Dict[str, Any]]: A dictionary mapping table names to a
        dictionary containing the table description and a dictionary of
        column descriptions.
    """
    inspector = inspect(engine)
    result: Dict[str, Dict[str, Any]] = {}

    def gen_schema_descriptions(schema: Optional[str] = None) -> None:
        table_names: List[str] = inspector.get_table_names(schema=schema)
        with engine.connect() as conn:
            for table in table_names:
                if schema is None:
                    table_name = table
                else:
                    table_name = f"{schema}.{table}"

                table_comment = (
                    conn.execute(
                        text(f"SELECT obj_description('{table_name}'::regclass)")
                    ).scalar()
                    or ""
                )

                columns = {}
                col_data = inspector.get_columns(table, schema=schema)
                for idx, col in enumerate(col_data, start=1):
                    col_comment = (
                        conn.execute(
                            text(
                                f"SELECT col_description('{table_name}'::regclass, "
                                f"{idx})"
                            )
                        ).scalar()
                        or ""
                    )
                    columns[col["name"]] = col_comment

                result[table_name] = {"description": table_comment, "columns": columns}

    if multi_schema:
        for schema in inspector.get_schema_names():
            gen_schema_descriptions(schema)
    else:
        gen_schema_descriptions()

    return result


def extract_mysql_descriptions(
    engine: Engine,
    multi_schema: bool = False,
) -> Dict[str, Dict[str, Any]]:
    """Extracts descriptions for tables and columns from a MySQL database.

    This method retrieves the descriptions of tables and their columns
    from a MySQL database using the provided SQLAlchemy engine.

    Args:
        engine (Engine): SQLAlchemy engine connected to a MySQL database.
        multi_schema (bool): Generate descriptions for all schemas in the database.

    Returns:
        Dict[str, Dict[str, Any]]: A dictionary mapping table names to a
        dictionary containing the table description and a dictionary of
        column descriptions.
    """
    inspector = inspect(engine)
    result: Dict[str, Dict[str, Any]] = {}

    def gen_schema_descriptions(schema: Optional[str] = None) -> None:
        table_names: List[str] = inspector.get_table_names(schema=schema)

        with engine.connect() as conn:
            for table in table_names:
                if schema is None:
                    table_name = table
                else:
                    table_name = f"{schema}.{table}"

                query = text(
                    "SELECT table_comment FROM information_schema.tables WHERE"
                    " table_schema = :schema AND table_name = :table"
                )
                table_result = conn.execute(
                    query, {"schema": engine.url.database, "table": table_name}
                )
                table_comment = table_result.scalar() or ""

                columns = {}
                for col in inspector.get_columns(table, schema=schema):
                    columns[col["name"]] = col.get("comment", "")

                result[table_name] = {"description": table_comment, "columns": columns}

    if multi_schema:
        for schema in inspector.get_schema_names():
            gen_schema_descriptions(schema)
    else:
        gen_schema_descriptions()

    return result


def extract_default_descriptions(
    engine: Engine, multi_schema: bool = False
) -> Dict[str, Dict[str, Any]]:
    """Extracts default descriptions for tables and columns from a database.

    This method retrieves the table and column names from the given database
    and associates empty descriptions with them.

    Args:
        engine (Engine): SQLAlchemy engine connected to a database.
        multi_schema (bool): Generate descriptions for all schemas in the database.

    Returns:
        Dict[str, Dict[str, Any]]: A dictionary mapping table names to a
        dictionary containing an empty table description and a dictionary of
        empty column descriptions.
    """
    inspector = inspect(engine)
    result: Dict[str, Dict[str, Any]] = {}

    def gen_schema_descriptions(schema: Optional[str] = None) -> None:
        table_names: List[str] = inspector.get_table_names(schema=schema)

        for table in table_names:
            columns = {}
            for col in inspector.get_columns(table):
                columns[col["name"]] = ""

            result[table] = {"description": "", "columns": columns}

    if multi_schema:
        for schema in inspector.get_schema_names():
            gen_schema_descriptions(schema)
    else:
        gen_schema_descriptions()

    return result


def extract_schema_descriptions(
    engine: Engine, multi_schema: bool = False
) -> Dict[str, Dict[str, Any]]:
    """
    Extracts the schema descriptions from the database connected to by the engine.

    Args:
        engine (Engine): SQLAlchemy engine instance.
        multi_schema (bool): Generate descriptions for all schemas in the database.

    Returns:
        Dict[str, Dict[str, Any]]: A dictionary representation of table and column
        descriptions.
    """

    extractors = {
        "postgresql": extract_postgresql_descriptions,
        "mysql": extract_mysql_descriptions,
    }
    return extractors.get(engine.dialect.name, extract_default_descriptions)(
        engine, multi_schema=multi_schema
    )
</file>

<file path="langroid/agent/special/sql/utils/populate_metadata.py">
from typing import Dict, List, Union

from langroid.exceptions import LangroidImportError

try:
    from sqlalchemy import MetaData
except ImportError as e:
    raise LangroidImportError(extra="sql", error=str(e))


def populate_metadata_with_schema_tools(
    metadata: MetaData | List[MetaData],
    info: Dict[str, Dict[str, Union[str, Dict[str, str]]]],
) -> Dict[str, Dict[str, Union[str, Dict[str, str]]]]:
    """
    Extracts information from an SQLAlchemy database's metadata and combines it
    with another dictionary with context descriptions.

    Args:
        metadata (MetaData): SQLAlchemy metadata object of the database.
        info (Dict[str, Dict[str, Any]]): A dictionary with table and column
                                             descriptions.

    Returns:
        Dict[str, Dict[str, Any]]: A dictionary with table and context information.
    """
    db_info: Dict[str, Dict[str, Union[str, Dict[str, str]]]] = {}

    def populate_metadata(md: MetaData) -> None:
        # Create empty metadata dictionary with column datatypes
        for table_name, table in md.tables.items():
            # Populate tables with empty descriptions
            db_info[table_name] = {
                "description": info[table_name]["description"] or "",
                "columns": {},
            }

            for column in table.columns:
                # Populate columns with datatype
                db_info[table_name]["columns"][str(column.name)] = (  # type: ignore
                    str(column.type)
                )

    if isinstance(metadata, list):
        for md in metadata:
            populate_metadata(md)
    else:
        populate_metadata(metadata)

    return db_info


def populate_metadata(
    metadata: MetaData | List[MetaData],
    info: Dict[str, Dict[str, Union[str, Dict[str, str]]]],
) -> Dict[str, Dict[str, Union[str, Dict[str, str]]]]:
    """
    Populate metadata based on the provided database metadata and additional info.

    Args:
        metadata (MetaData): Metadata object from SQLAlchemy.
        info (Dict): Additional information for database tables and columns.

    Returns:
        Dict: A dictionary containing populated metadata information.
    """
    # Fetch basic metadata info using available tools
    db_info: Dict[str, Dict[str, Union[str, Dict[str, str]]]] = (
        populate_metadata_with_schema_tools(metadata=metadata, info=info)
    )

    # Iterate over tables to update column metadata
    for table_name in db_info.keys():
        # Update only if additional info for the table exists
        if table_name in info:
            for column_name in db_info[table_name]["columns"]:
                # Merge and update column description if available
                if column_name in info[table_name]["columns"]:
                    db_info[table_name]["columns"][column_name] = (  # type: ignore
                        db_info[table_name]["columns"][column_name]  # type: ignore
                        + "; "
                        + info[table_name]["columns"][column_name]  # type: ignore
                    )

    return db_info
</file>

<file path="langroid/agent/special/sql/utils/system_message.py">
DEFAULT_SYS_MSG = """You are a savvy data scientist/database administrator, 
with expertise in answering questions by querying a {dialect} database.
You do not have access to the database 'db' directly, so you will need to use the 
`run_query` tool/function-call to answer questions.

The below JSON schema maps the SQL database structure. It outlines tables, each 
with a description and columns. Each table is identified by a key, 
and holds a description and a dictionary of columns, 
with column names as keys and their descriptions as values. 
{schema_dict}

ONLY the tables and column names and tables specified above should be used in
the generated queries. 
You must be smart about using the right tables and columns based on the 
english description. If you are thinking of using a table or column that 
does not exist, you are probably on the wrong track, so you should try
your best to answer based on an existing table or column.
DO NOT assume any tables or columns other than those above."""

SCHEMA_TOOLS_SYS_MSG = """You are a savvy data scientist/database administrator, 
with expertise in answering questions by interacting with a SQL database.

You will have to follow these steps to complete your job:
1) Use the `get_table_names` tool/function-call to get a list of all possibly 
relevant table names.
2) Use the `get_table_schema` tool/function-call to get the schema of all 
possibly relevant tables to identify possibly relevant columns. Only 
call this method on potentially relevant tables.
3) Use the `get_column_descriptions` tool/function-call to get more information 
about any relevant columns.
4) Write a {dialect} query and use `run_query` tool the Execute the SQL query 
on the database to obtain the results.

Do not make assumptions about the database schema before using the tools.
Use the tool/functions to learn more about the database schema."""
</file>

<file path="langroid/agent/special/sql/utils/tools.py">
from typing import List, Tuple

from langroid.agent.tool_message import ToolMessage


class RunQueryTool(ToolMessage):
    request: str = "run_query"
    purpose: str = """
            To run <query> on the database 'db' and 
            return the results to answer a question.
            """
    query: str

    @classmethod
    def examples(cls) -> List["ToolMessage" | Tuple[str, "ToolMessage"]]:
        return [
            cls(
                query="SELECT * FROM movies WHERE genre = 'comedy'",
            ),
            (
                "Find all movies with a rating of 5",
                cls(
                    query="SELECT * FROM movies WHERE rating = 5",
                ),
            ),
        ]


class GetTableNamesTool(ToolMessage):
    request: str = "get_table_names"
    purpose: str = """
            To retrieve the names of all <tables> in the database 'db'.
            """


class GetTableSchemaTool(ToolMessage):
    request: str = "get_table_schema"
    purpose: str = """
            To retrieve the schema of all provided <tables> in the database 'db'.
            """
    tables: List[str]

    @classmethod
    def example(cls) -> "GetTableSchemaTool":
        return cls(
            tables=["employees", "departments", "sales"],
        )


class GetColumnDescriptionsTool(ToolMessage):
    request: str = "get_column_descriptions"
    purpose: str = """
            To retrieve the description of one or more <columns> from the respective 
            <table> in the database 'db'.
            """
    table: str
    columns: str

    @classmethod
    def example(cls) -> "GetColumnDescriptionsTool":
        return cls(
            table="employees",
            columns="name, department_id",
        )
</file>

<file path="langroid/agent/special/sql/__init__.py">
from . import utils


__all__ = [
    "utils",
]

try:
    from . import sql_chat_agent
    from .sql_chat_agent import SQLChatAgentConfig, SQLChatAgent

    sql_chat_agent
    SQLChatAgent
    SQLChatAgentConfig
    __all__.extend(["SQLChatAgentConfig", "SQLChatAgent", "sql_chat_agent"])
except ImportError:
    pass
</file>

<file path="langroid/agent/special/sql/sql_chat_agent.py">
"""
Agent that allows interaction with an SQL database using SQLAlchemy library. 
The agent can execute SQL queries in the database and return the result. 

Functionality includes:
- adding table and column context
- asking a question about a SQL schema
"""

import logging
from typing import Any, Dict, List, Optional, Sequence, Union

from rich.console import Console

from langroid.exceptions import LangroidImportError
from langroid.mytypes import Entity
from langroid.utils.constants import SEND_TO

try:
    from sqlalchemy import MetaData, Row, create_engine, inspect, text
    from sqlalchemy.engine import Engine
    from sqlalchemy.exc import ResourceClosedError, SQLAlchemyError
    from sqlalchemy.orm import Session, sessionmaker
except ImportError as e:
    raise LangroidImportError(extra="sql", error=str(e))

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocument
from langroid.agent.special.sql.utils.description_extractors import (
    extract_schema_descriptions,
)
from langroid.agent.special.sql.utils.populate_metadata import (
    populate_metadata,
    populate_metadata_with_schema_tools,
)
from langroid.agent.special.sql.utils.system_message import (
    DEFAULT_SYS_MSG,
    SCHEMA_TOOLS_SYS_MSG,
)
from langroid.agent.special.sql.utils.tools import (
    GetColumnDescriptionsTool,
    GetTableNamesTool,
    GetTableSchemaTool,
    RunQueryTool,
)
from langroid.agent.tools.orchestration import (
    DonePassTool,
    DoneTool,
    ForwardTool,
    PassTool,
)
from langroid.language_models.base import Role
from langroid.vector_store.base import VectorStoreConfig

logger = logging.getLogger(__name__)

console = Console()

DEFAULT_SQL_CHAT_SYSTEM_MESSAGE = """
{mode}

You do not need to attempt answering a question with just one query. 
You could make a sequence of SQL queries to help you write the final query.
Also if you receive a null or other unexpected result,
(a) make sure you use the available TOOLs correctly, and 
(b) see if you have made an assumption in your SQL query, and try another way, 
   or use `run_query` to explore the database table contents before submitting your 
   final query. For example when searching for "males" you may have used "gender= 'M'",
in your query, because you did not know that the possible genders in the table
are "Male" and "Female". 

Start by asking what I would like to know about the data.

"""

ADDRESSING_INSTRUCTION = """
IMPORTANT - Whenever you are NOT writing a SQL query, make sure you address the user
using {prefix}User (NO SPACE between {prefix} and User). 
You MUST use the EXACT syntax {prefix}User !!!

In other words, you ALWAYS write EITHER:
 - a SQL query using the `run_query` tool, 
 - OR address the user using {prefix}User
"""

DONE_INSTRUCTION = f"""
When you are SURE you have the CORRECT answer to a user's query or request, 
use the `{DoneTool.name()}` with `content` set to the answer or result.
If you DO NOT think you have the answer to the user's query or request,
you SHOULD NOT use the `{DoneTool.name()}` tool.
Instead, you must CONTINUE to improve your queries (tools) to get the correct answer,
and finally use the `{DoneTool.name()}` tool to send the correct answer to the user.
"""


SQL_ERROR_MSG = "There was an error in your SQL Query"


class SQLChatAgentConfig(ChatAgentConfig):
    system_message: str = DEFAULT_SQL_CHAT_SYSTEM_MESSAGE
    user_message: None | str = None
    cache: bool = True  # cache results
    debug: bool = False
    use_helper: bool = True
    is_helper: bool = False
    stream: bool = True  # allow streaming where needed
    database_uri: str = ""  # Database URI
    database_session: None | Session = None  # Database session
    vecdb: None | VectorStoreConfig = None
    context_descriptions: Dict[str, Dict[str, Union[str, Dict[str, str]]]] = {}
    use_schema_tools: bool = False
    multi_schema: bool = False
    # whether the agent is used in a continuous chat with user,
    # as opposed to returning a result from the task.run()
    chat_mode: bool = False
    addressing_prefix: str = ""
    max_result_rows: int | None = None  # limit query results to this
    max_retained_tokens: int | None = None  # limit history of query results to this

    """
    Optional, but strongly recommended, context descriptions for tables, columns, 
    and relationships. It should be a dictionary where each key is a table name 
    and its value is another dictionary. 

    In this inner dictionary:
    - The 'description' key corresponds to a string description of the table.
    - The 'columns' key corresponds to another dictionary where each key is a 
    column name and its value is a string description of that column.
    - The 'relationships' key corresponds to another dictionary where each key 
    is another table name and the value is a description of the relationship to 
    that table.

    If multi_schema support is enabled, the tables names in the description
    should be of the form 'schema_name.table_name'.

    For example:
    {
        'table1': {
            'description': 'description of table1',
            'columns': {
                'column1': 'description of column1 in table1',
                'column2': 'description of column2 in table1'
            }
        },
        'table2': {
            'description': 'description of table2',
            'columns': {
                'column3': 'description of column3 in table2',
                'column4': 'description of column4 in table2'
            }
        }
    }
    """


class SQLChatAgent(ChatAgent):
    """
    Agent for chatting with a SQL database
    """

    used_run_query: bool = False
    llm_responded: bool = False

    def __init__(self, config: "SQLChatAgentConfig") -> None:
        """Initialize the SQLChatAgent.

        Raises:
            ValueError: If database information is not provided in the config.
        """
        self._validate_config(config)
        self.config: SQLChatAgentConfig = config
        self._init_database()
        self._init_metadata()
        self._init_table_metadata()
        self.final_instructions = ""

        # Caution - this updates the self.config.system_message!
        self._init_system_message()
        super().__init__(config)
        self._init_tools()
        if self.config.is_helper:
            self.system_tool_format_instructions += self.final_instructions

        if self.config.use_helper:
            # helper_config.system_message is now the fully-populated sys msg of
            # the main SQLAgent.
            self.helper_config = self.config.copy()
            self.helper_config.is_helper = True
            self.helper_config.use_helper = False
            self.helper_config.chat_mode = False
            self.helper_agent = SQLHelperAgent(self.helper_config)

    def _validate_config(self, config: "SQLChatAgentConfig") -> None:
        """Validate the configuration to ensure all necessary fields are present."""
        if config.database_session is None and config.database_uri is None:
            raise ValueError("Database information must be provided")

    def _init_database(self) -> None:
        """Initialize the database engine and session."""
        if self.config.database_session:
            self.Session = self.config.database_session
            self.engine = self.Session.bind
        else:
            self.engine = create_engine(self.config.database_uri)
            self.Session = sessionmaker(bind=self.engine)()

    def _init_metadata(self) -> None:
        """Initialize the database metadata."""
        if self.engine is None:
            raise ValueError("Database engine is None")
        self.metadata: MetaData | List[MetaData] = []

        if self.config.multi_schema:
            logger.info(
                "Initializing SQLChatAgent with database: %s",
                self.engine,
            )

            self.metadata = []
            inspector = inspect(self.engine)

            for schema in inspector.get_schema_names():
                metadata = MetaData(schema=schema)
                metadata.reflect(self.engine)
                self.metadata.append(metadata)

                logger.info(
                    "Initializing SQLChatAgent with database: %s, schema: %s, "
                    "and tables: %s",
                    self.engine,
                    schema,
                    metadata.tables,
                )
        else:
            self.metadata = MetaData()
            self.metadata.reflect(self.engine)
            logger.info(
                "SQLChatAgent initialized with database: %s and tables: %s",
                self.engine,
                self.metadata.tables,
            )

    def _init_table_metadata(self) -> None:
        """Initialize metadata for the tables present in the database."""
        if not self.config.context_descriptions and isinstance(self.engine, Engine):
            self.config.context_descriptions = extract_schema_descriptions(
                self.engine, self.config.multi_schema
            )

        if self.config.use_schema_tools:
            self.table_metadata = populate_metadata_with_schema_tools(
                self.metadata, self.config.context_descriptions
            )
        else:
            self.table_metadata = populate_metadata(
                self.metadata, self.config.context_descriptions
            )

    def _init_system_message(self) -> None:
        """Initialize the system message."""
        message = self._format_message()
        self.config.system_message = self.config.system_message.format(mode=message)

        if self.config.chat_mode:
            self.config.addressing_prefix = self.config.addressing_prefix or SEND_TO
            self.config.system_message += ADDRESSING_INSTRUCTION.format(
                prefix=self.config.addressing_prefix
            )
        else:
            self.config.system_message += DONE_INSTRUCTION

    def _init_tools(self) -> None:
        """Initialize sys msg and tools."""
        RunQueryTool._max_retained_tokens = self.config.max_retained_tokens
        self.enable_message([RunQueryTool, ForwardTool])
        if self.config.use_schema_tools:
            self._enable_schema_tools()
        if not self.config.chat_mode:
            self.enable_message(DoneTool)
            self.enable_message(DonePassTool)

    def _format_message(self) -> str:
        if self.engine is None:
            raise ValueError("Database engine is None")

        """Format the system message based on the engine and table metadata."""
        return (
            SCHEMA_TOOLS_SYS_MSG.format(dialect=self.engine.dialect.name)
            if self.config.use_schema_tools
            else DEFAULT_SYS_MSG.format(
                dialect=self.engine.dialect.name, schema_dict=self.table_metadata
            )
        )

    def _enable_schema_tools(self) -> None:
        """Enable tools for schema-related functionalities."""
        self.enable_message(GetTableNamesTool)
        self.enable_message(GetTableSchemaTool)
        self.enable_message(GetColumnDescriptionsTool)

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        self.llm_responded = True
        self.used_run_query = False
        return super().llm_response(message)

    def user_response(
        self,
        msg: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        self.llm_responded = False
        self.used_run_query = False
        return super().user_response(msg)

    def _clarify_answer_instruction(self) -> str:
        """
        Prompt to use when asking LLM to clarify intent of
        an already-generated response
        """
        if self.config.chat_mode:
            return f"""
                you must use the TOOL `{ForwardTool.name()}` with the `agent` 
                parameter set to "User"
                """
        else:
            return f"you must use the TOOL `{DonePassTool.name()}`"

    def _clarifying_message(self) -> str:
        tools_instruction = f"""
          For example you may want to use the TOOL
          `{RunQueryTool.name()}` to further explore the database contents
        """
        if self.config.use_schema_tools:
            tools_instruction += """
            OR you may want to use one of the schema tools to 
            explore the database schema
            """
        return f"""
            The intent of your response is not clear:
            - if you intended this to be the FINAL answer to the user's query,
                {self._clarify_answer_instruction()}
            - otherwise, use one of the available tools to make progress 
                to arrive at the final answer.
                {tools_instruction}
            """

    def handle_message_fallback(
        self, message: str | ChatDocument
    ) -> str | ForwardTool | ChatDocument | None:
        """
        We'd end up here if the current msg has no tool.
        If this is from LLM, we may need to handle the scenario where
        it may have "forgotten" to generate a tool.
        """
        if (
            not isinstance(message, ChatDocument)
            or message.metadata.sender != Entity.LLM
        ):
            return None
        if self.config.chat_mode:
            # send any Non-tool msg to the user
            return ForwardTool(agent="User")
        # Agent intent not clear => use the helper agent to
        # do what this agent should have done, e.g. generate tool, etc.
        # This is likelier to succeed since this agent has no "baggage" of
        # prior conversation, other than the system msg, and special
        # "Intent-interpretation" instructions.
        if self._json_schema_available() and self.config.strict_recovery:
            AnyTool = self._get_any_tool_message(optional=False)
            self.set_output_format(
                AnyTool,
                force_tools=True,
                use=True,
                handle=True,
                instructions=True,
            )
            recovery_message = self._strict_recovery_instructions(
                AnyTool, optional=False
            )
            result = self.llm_response(recovery_message)
            # remove the recovery_message (it has User role) from the chat history,
            # else it may cause the LLM to directly use the AnyTool.
            self.delete_last_message(role=Role.USER)  # delete last User-role msg
            return result
        elif self.config.use_helper:
            response = self.helper_agent.llm_response(message)
            tools = self.try_get_tool_messages(response)
            if tools:
                return response
        # fall back on the clarification message
        return self._clarifying_message()

    def retry_query(self, e: Exception, query: str) -> str:
        """
        Generate an error message for a failed SQL query and return it.

        Parameters:
        e (Exception): The exception raised during the SQL query execution.
        query (str): The SQL query that failed.

        Returns:
        str: The error message.
        """
        logger.error(f"SQL Query failed: {query}\nException: {e}")

        # Optional part to be included based on `use_schema_tools`
        optional_schema_description = ""
        if not self.config.use_schema_tools:
            optional_schema_description = f"""\
            This JSON schema maps SQL database structure. It outlines tables, each 
            with a description and columns. Each table is identified by a key, and holds
            a description and a dictionary of columns, with column 
            names as keys and their descriptions as values.
            
            ```json
            {self.config.context_descriptions}
            ```"""

        # Construct the error message
        error_message_template = f"""\
        {SQL_ERROR_MSG}: '{query}'
        {str(e)}
        Run a new query, correcting the errors.
        {optional_schema_description}"""

        return error_message_template

    def _available_tool_names(self) -> str:
        return ",".join(self.llm_tools_usable)

    def _tool_result_llm_answer_prompt(self) -> str:
        """
        Prompt to use at end of tool result,
        to guide LLM, for the case where it wants to answer the user's query
        """
        if self.config.chat_mode:
            assert self.config.addressing_prefix != ""
            return """
                You must EXPLICITLY address the User with 
                the addressing prefix according to your instructions,
                to convey your answer to the User.
                """
        else:
            return f"""
                you must use the `{DoneTool.name()}` with the `content` 
                set to the answer or result
                """

    def run_query(self, msg: RunQueryTool) -> str:
        """
        Handle a RunQueryTool message by executing a SQL query and returning the result.

        Args:
            msg (RunQueryTool): The tool-message to handle.

        Returns:
            str: The result of executing the SQL query.
        """
        query = msg.query
        session = self.Session
        self.used_run_query = True
        try:
            logger.info(f"Executing SQL query: {query}")

            query_result = session.execute(text(query))
            session.commit()
            try:
                # attempt to fetch results: should work for normal SELECT queries
                rows = query_result.fetchall()
                n_rows = len(rows)
                if self.config.max_result_rows and n_rows > self.config.max_result_rows:
                    rows = rows[: self.config.max_result_rows]
                    logger.warning(
                        f"SQL query produced {n_rows} rows, "
                        f"limiting to {self.config.max_result_rows}"
                    )

                response_message = self._format_rows(rows)
            except ResourceClosedError:
                # If we get here, it's a non-SELECT query (UPDATE, INSERT, DELETE)
                affected_rows = query_result.rowcount  # type: ignore
                response_message = f"""
                    Non-SELECT query executed successfully. 
                    Rows affected: {affected_rows}
                    """

        except SQLAlchemyError as e:
            session.rollback()
            logger.error(f"Failed to execute query: {query}\n{e}")
            response_message = self.retry_query(e, query)
        finally:
            session.close()

        final_message = f"""
        Below is the result from your use of the TOOL `{RunQueryTool.name()}`:
        ==== result ====
        {response_message}
        ================
        
        If you are READY to ANSWER the ORIGINAL QUERY:
        {self._tool_result_llm_answer_prompt()}
        OTHERWISE:
             continue using one of your available TOOLs:
             {",".join(self.llm_tools_usable)}
        """
        return final_message

    def _format_rows(self, rows: Sequence[Row[Any]]) -> str:
        """
        Format the rows fetched from the query result into a string.

        Args:
            rows (list): List of rows fetched from the query result.

        Returns:
            str: Formatted string representation of rows.
        """
        # TODO: UPDATE FORMATTING
        return (
            ",\n".join(str(row) for row in rows)
            if rows
            else "Query executed successfully."
        )

    def get_table_names(self, msg: GetTableNamesTool) -> str:
        """
        Handle a GetTableNamesTool message by returning the names of all tables in the
        database.

        Returns:
            str: The names of all tables in the database.
        """
        if isinstance(self.metadata, list):
            table_names = [", ".join(md.tables.keys()) for md in self.metadata]
            return ", ".join(table_names)

        return ", ".join(self.metadata.tables.keys())

    def get_table_schema(self, msg: GetTableSchemaTool) -> str:
        """
        Handle a GetTableSchemaTool message by returning the schema of all provided
        tables in the database.

        Returns:
            str: The schema of all provided tables in the database.
        """
        tables = msg.tables
        result = ""
        for table_name in tables:
            table = self.table_metadata.get(table_name)
            if table is not None:
                result += f"{table_name}: {table}\n"
            else:
                result += f"{table_name} is not a valid table name.\n"
        return result

    def get_column_descriptions(self, msg: GetColumnDescriptionsTool) -> str:
        """
        Handle a GetColumnDescriptionsTool message by returning the descriptions of all
        provided columns from the database.

        Returns:
            str: The descriptions of all provided columns from the database.
        """
        table = msg.table
        columns = msg.columns.split(", ")
        result = f"\nTABLE: {table}"
        descriptions = self.config.context_descriptions.get(table)

        for col in columns:
            result += f"\n{col} => {descriptions['columns'][col]}"  # type: ignore
        return result


class SQLHelperAgent(SQLChatAgent):

    def _clarifying_message(self) -> str:
        tools_instruction = f"""
          For example the Agent may have forgotten to use the TOOL
          `{RunQueryTool.name()}` to further explore the database contents
        """
        if self.config.use_schema_tools:
            tools_instruction += """
            OR the agent may have forgotten to use one of the schema tools to 
            explore the database schema
            """

        return f"""
            The intent of the Agent's response is not clear:
            - if you think the Agent intended this as ANSWER to the 
                user's query,
                {self._clarify_answer_instruction()}
            - otherwise, the Agent may have forgotten to 
              use one of the available tools to make progress 
                to arrive at the final answer.
                {tools_instruction}
            """

    def _init_system_message(self) -> None:
        """Set up helper sys msg"""

        # Note that self.config.system_message is already set to the
        # parent SQLAgent's system_message
        self.config.system_message = f"""
                You role is to help INTERPRET the INTENT of an 
                AI agent in a conversation. This Agent was supposed to generate
                a TOOL/Function-call but forgot to do so, and this is where 
                you can help, by trying to generate the appropriate TOOL
                based on your best guess of the Agent's INTENT.
                
                Below are the instructions that were given to this Agent: 
                ===== AGENT INSTRUCTIONS =====
                {self.config.system_message}
                ===== END OF AGENT INSTRUCTIONS =====
                """

        # note that the initial msg in chat history will contain:
        # - system message
        # - tool instructions
        # so the final_instructions will be at the end of this initial msg

        self.final_instructions = f"""        
        You must take note especially of the TOOLs that are
        available to the Agent. Your reasoning process should be as follows:
        
        - If the Agent's message appears to be an ANSWER to the original query,
          {self._clarify_answer_instruction()}.
          CAUTION - You must be absolutely sure that the Agent's message is 
          an ACTUAL ANSWER to the user's query, and not a failed attempt to use 
          a TOOL without JSON, e.g. something like "run_query" or "done_tool"
          without any actual JSON formatting.
           
        - Else, if you think the Agent intended to use some type of SQL
          query tool to READ or UPDATE the table(s), 
          AND it is clear WHICH TOOL is intended as well as the 
          TOOL PARAMETERS, then you must generate the JSON-Formatted
          TOOL with the parameters set based on your understanding.
          Note that the `{RunQueryTool.name()}` is not ONLY for querying the tables,
          but also for UPDATING the tables.
           
        - Else, use the `{PassTool.name()}` to pass the message unchanged.
            CAUTION - ONLY use `{PassTool.name()}` if you think the Agent's response
            is NEITHER an ANSWER, nor an intended SQL QUERY.
        """

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        if message is None:
            return None
        message_str = message if isinstance(message, str) else message.content
        instruc_msg = f"""
        Below is the MESSAGE from the SQL Agent. 
        Remember your instructions on how to respond based on your understanding
        of the INTENT of this message:        
        {self.final_instructions}
        
        === AGENT MESSAGE =========
        {message_str}
        === END OF AGENT MESSAGE ===
        """
        # user response_forget to avoid accumulating the chat history
        return super().llm_response_forget(instruc_msg)
</file>

<file path="langroid/agent/special/__init__.py">
from .relevance_extractor_agent import (
    RelevanceExtractorAgent,
    RelevanceExtractorAgentConfig,
)
from .doc_chat_agent import DocChatAgent, DocChatAgentConfig
from .retriever_agent import (
    RecordMetadata,
    RecordDoc,
    RetrieverAgentConfig,
    RetrieverAgent,
)
from .lance_doc_chat_agent import LanceDocChatAgent
from .table_chat_agent import (
    dataframe_summary,
    TableChatAgent,
    TableChatAgentConfig,
    PandasEvalTool,
)


from . import relevance_extractor_agent
from . import doc_chat_agent
from . import retriever_agent
from . import lance_tools
from . import lance_doc_chat_agent
from . import lance_rag
from . import table_chat_agent


__all__ = [
    "RelevanceExtractorAgent",
    "RelevanceExtractorAgentConfig",
    "DocChatAgent",
    "DocChatAgentConfig",
    "RecordMetadata",
    "RecordDoc",
    "RetrieverAgentConfig",
    "RetrieverAgent",
    "dataframe_summary",
    "TableChatAgent",
    "TableChatAgentConfig",
    "PandasEvalTool",
    "relevance_extractor_agent",
    "doc_chat_agent",
    "retriever_agent",
    "table_chat_agent",
    "LanceDocChatAgent",
    "lance_tools",
    "lance_doc_chat_agent",
    "lance_rag",
]

try:
    from . import sql

    sql
    __all__.append("sql")
except ImportError:
    pass
</file>

<file path="langroid/agent/special/lance_tools.py">
import logging

from langroid.agent.tool_message import ToolMessage
from langroid.pydantic_v1 import BaseModel, Field

logger = logging.getLogger(__name__)


class QueryPlan(BaseModel):
    original_query: str = Field(..., description="The original query for reference")
    query: str = Field(..., description="A possibly NON-EMPTY rephrased query")
    filter: str = Field(
        "",
        description="Filter condition if needed (or empty if no filter is needed)",
    )
    dataframe_calc: str = Field(
        "", description="An optional Pandas-dataframe calculation/aggregation string"
    )


class QueryPlanTool(ToolMessage):
    request = "query_plan"  # the agent method name that handles this tool
    purpose = """
    Given a user's query, generate a query <plan> consisting of:
    - <original_query> - the original query for reference
    - <filter> condition if needed (or empty string if no filter is needed)
    - <query> - a possibly NON-EMPTY rephrased query that can be used to match the 
        CONTENT of the documents 
        (can be same as <original_query> if no rephrasing is needed)
    - <dataframe_calc> - a Pandas-dataframe calculation/aggregation string
        that can be used to calculate the answer 
        (or empty string if no calculation is needed).
    """
    plan: QueryPlan


class AnswerTool(ToolMessage):
    """Wrapper for answer from LanceDocChatAgent"""

    purpose: str = "To package the answer from LanceDocChatAgent"
    request: str = "answer_tool"
    answer: str


class QueryPlanAnswerTool(ToolMessage):
    request: str = "query_plan_answer"  # the agent method name that handles this tool
    purpose: str = """
    Assemble query <plan> and <answer>
    """
    plan: QueryPlan
    answer: str = Field(..., description="The answer received from the assistant")


class QueryPlanFeedbackTool(ToolMessage):
    request = "query_plan_feedback"
    purpose = """
    To give <feedback> regarding the query plan, 
    along with a <suggested_fix> if any (empty string if no fix is suggested).
    """
    feedback: str
    suggested_fix: str
</file>

<file path="langroid/agent/special/relevance_extractor_agent.py">
"""
Agent to retrieve relevant segments from a body of text,
that are relevant to a query.

"""

import logging
from typing import Optional, no_type_check

from rich.console import Console

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocument
from langroid.agent.tools.segment_extract_tool import SegmentExtractTool
from langroid.language_models.base import LLMConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.utils import extract_numbered_segments, number_segments
from langroid.utils.constants import DONE, NO_ANSWER

console = Console()
logger = logging.getLogger(__name__)


class RelevanceExtractorAgentConfig(ChatAgentConfig):
    llm: LLMConfig | None = OpenAIGPTConfig()
    segment_length: int = 1  # number of sentences per segment
    query: str = ""  # query for relevance extraction
    system_message = """
    The user will give you a PASSAGE containing segments numbered as  
    <#1#>, <#2#>, <#3#>, etc.,
    followed by a QUERY. Extract ONLY the segment-numbers from 
    the PASSAGE that are RELEVANT to the QUERY.
    Present the extracted segment-numbers using the `extract_segments` tool/function.
    """


class RelevanceExtractorAgent(ChatAgent):
    """
    Agent for extracting segments from text, that are relevant to a given query.
    """

    def __init__(self, config: RelevanceExtractorAgentConfig):
        super().__init__(config)
        self.config: RelevanceExtractorAgentConfig = config
        self.enable_message(SegmentExtractTool)
        self.numbered_passage: Optional[str] = None

    @no_type_check
    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        """Compose a prompt asking to extract relevant segments from a passage.
        Steps:
        - number the segments in the passage
        - compose prompt
        - send to LLM
        """
        assert self.config.query is not None, "No query specified"
        assert message is not None, "No message specified"
        message_str = message.content if isinstance(message, ChatDocument) else message
        # number the segments in the passage
        self.numbered_passage = number_segments(message_str, self.config.segment_length)
        # compose prompt
        prompt = f"""
        PASSAGE:
        {self.numbered_passage}
        
        QUERY: {self.config.query}
        """
        # send to LLM
        return super().llm_response(prompt)

    @no_type_check
    async def llm_response_async(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        """
        Compose a prompt asking to extract relevant segments from a passage.
        Steps:
        - number the segments in the passage
        - compose prompt
        - send to LLM
        The LLM is expected to generate a structured msg according to the
        SegmentExtractTool schema, i.e. it should contain a `segment_list` field
        whose value is a list of segment numbers or ranges, like "10,12,14-17".
        """

        assert self.config.query is not None, "No query specified"
        assert message is not None, "No message specified"
        message_str = message.content if isinstance(message, ChatDocument) else message
        # number the segments in the passage
        self.numbered_passage = number_segments(message_str, self.config.segment_length)
        # compose prompt
        prompt = f"""
        PASSAGE:
        {self.numbered_passage}
        
        QUERY: {self.config.query}
        """
        # send to LLM
        return await super().llm_response_async(prompt)

    def extract_segments(self, msg: SegmentExtractTool) -> str:
        """Method to handle a segmentExtractTool message from LLM"""
        spec = msg.segment_list
        if len(self.message_history) == 0:
            return DONE + " " + NO_ANSWER
        if spec is None or spec.strip() in ["", NO_ANSWER]:
            return DONE + " " + NO_ANSWER
        assert self.numbered_passage is not None, "No numbered passage"
        # assume this has numbered segments
        try:
            extracts = extract_numbered_segments(self.numbered_passage, spec)
        except Exception:
            return DONE + " " + NO_ANSWER
        # this response ends the task by saying DONE
        return DONE + " " + extracts

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        """Handle case where LLM forgets to use SegmentExtractTool"""
        if isinstance(msg, ChatDocument) and msg.metadata.sender == Entity.LLM:
            return DONE + " " + NO_ANSWER
        else:
            return None
</file>

<file path="langroid/agent/special/retriever_agent.py">
"""
DEPRECATED: use DocChatAgent instead, with DocChatAgentConfig.retrieve_only=True,
and if you want to retrieve FULL relevant doc-contents rather than just extracts,
then set DocChatAgentConfig.extraction_granularity=-1

This is an agent to retrieve relevant extracts from a vector store,
where the LLM is used to filter for "true" relevance after retrieval from the
vector store.
This is essentially the same as DocChatAgent, except that instead of
generating final summary answer based on relevant extracts, it just returns
those extracts.
See test_retriever_agent.py for example usage.
"""

import logging
from typing import Sequence

from rich.console import Console

from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig
from langroid.mytypes import DocMetaData, Document

console = Console()
logger = logging.getLogger(__name__)

# for backwards compatibility:
RecordMetadata = DocMetaData
RecordDoc = Document
RetrieverAgentConfig = DocChatAgentConfig


class RetrieverAgent(DocChatAgent):
    """
    Agent for just retrieving chunks/docs/extracts matching a query
    """

    def __init__(self, config: DocChatAgentConfig):
        super().__init__(config)
        self.config: DocChatAgentConfig = config
        logger.warning(
            """
        `RetrieverAgent` is deprecated. Use `DocChatAgent` instead, with
        `DocChatAgentConfig.retrieve_only=True`, and if you want to retrieve
        FULL relevant doc-contents rather than just extracts, then set
        `DocChatAgentConfig.extraction_granularity=-1`
        """
        )

    def get_records(self) -> Sequence[Document]:
        # subclasses should override
        return []

    def ingest(self) -> None:
        records = self.get_records()
        if self.vecdb is None:
            logger.warning("Vector store not configured. Cannot ingest records.")
        else:
            self.vecdb.add_documents(records)
</file>

<file path="langroid/agent/tools/mcp/__init__.py">
from .decorators import mcp_tool
from .fastmcp_client import (
    FastMCPClient,
    get_tool,
    get_tool_async,
    get_tools,
    get_tools_async,
    get_mcp_tool_async,
    get_mcp_tools_async,
)


__all__ = [
    "mcp_tool",
    "FastMCPClient",
    "get_tool",
    "get_tool_async",
    "get_tools",
    "get_tools_async",
    "get_mcp_tool_async",
    "get_mcp_tools_async",
]
</file>

<file path="langroid/agent/tools/mcp/decorators.py">
from typing import Callable, Type

from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.mcp.fastmcp_client import get_tool


def mcp_tool(
    server: str, tool_name: str
) -> Callable[[Type[ToolMessage]], Type[ToolMessage]]:
    """Decorator: declare a ToolMessage class bound to a FastMCP tool.

    Usage:
        @fastmcp_tool("/path/to/server.py", "get_weather")
        class WeatherTool:
            def pretty(self) -> str:
                return f"Temp is {self.temperature}"
    """

    def decorator(user_cls: Type[ToolMessage]) -> Type[ToolMessage]:
        # build the “real” ToolMessage subclass for this server/tool
        RealTool: Type[ToolMessage] = get_tool(server, tool_name)

        # copy user‐defined methods / attributes onto RealTool
        for name, attr in user_cls.__dict__.items():
            if name.startswith("__") and name.endswith("__"):
                continue
            setattr(RealTool, name, attr)

        # preserve the user’s original name if you like:
        RealTool.__name__ = user_cls.__name__
        return RealTool

    return decorator
</file>

<file path="langroid/agent/tools/__init__.py">
from . import google_search_tool
from . import recipient_tool
from . import rewind_tool
from . import orchestration
from .google_search_tool import GoogleSearchTool
from .recipient_tool import AddRecipientTool, RecipientTool
from .rewind_tool import RewindTool
from .orchestration import (
    AgentDoneTool,
    DoneTool,
    ForwardTool,
    PassTool,
    SendTool,
    AgentSendTool,
    DonePassTool,
    ResultTool,
    FinalResultTool,
)

__all__ = [
    "GoogleSearchTool",
    "AddRecipientTool",
    "RecipientTool",
    "google_search_tool",
    "recipient_tool",
    "rewind_tool",
    "RewindTool",
    "orchestration",
    "AgentDoneTool",
    "DoneTool",
    "DonePassTool",
    "ForwardTool",
    "PassTool",
    "SendTool",
    "AgentSendTool",
    "ResultTool",
    "FinalResultTool",
]
</file>

<file path="langroid/agent/tools/duckduckgo_search_tool.py">
"""
A tool to trigger a DuckDuckGo search for a given query, and return the top results with
their titles, links, summaries. Since the tool is stateless (i.e. does not need
access to agent state), it can be enabled for any agent, without having to define a
special method inside the agent: `agent.enable_message(DuckduckgoSearchTool)`
"""

from typing import List, Tuple

from langroid.agent.tool_message import ToolMessage
from langroid.parsing.web_search import duckduckgo_search


class DuckduckgoSearchTool(ToolMessage):
    request: str = "duckduckgo_search"
    purpose: str = """
            To search the web and return up to <num_results> 
            links relevant to the given <query>. When using this tool,
            ONLY show the required JSON, DO NOT SAY ANYTHING ELSE.
            Wait for the results of the web search, and then use them to
            compose your response.
            """
    query: str
    num_results: int

    def handle(self) -> str:
        """
        Conducts a search using DuckDuckGo based on the provided query
        and number of results by triggering a duckduckgo_search.

        Returns:
            str: A formatted string containing the titles, links, and
                summaries of each search result, separated by two newlines.
        """
        search_results = duckduckgo_search(self.query, self.num_results)
        # return Title, Link, Summary of each result, separated by two newlines
        results_str = "\n\n".join(str(result) for result in search_results)
        return f"""
        BELOW ARE THE RESULTS FROM THE WEB SEARCH. USE THESE TO COMPOSE YOUR RESPONSE:
        {results_str}
        """

    @classmethod
    def examples(cls) -> List["ToolMessage" | Tuple[str, "ToolMessage"]]:
        return [
            cls(
                query="When was the Llama2 Large Language Model (LLM) released?",
                num_results=3,
            ),
        ]
</file>

<file path="langroid/agent/tools/exa_search_tool.py">
"""
A tool to trigger a Exa search for a given query,
(https://docs.exa.ai/reference/getting-started)
and return the top results with their titles, links, summaries.
Since the tool is stateless (i.e. does not need
access to agent state), it can be enabled for any agent, without having to define a
special method inside the agent: `agent.enable_message(ExaSearchTool)`

NOTE: To use this tool, you need to:

* set the EXA_API_KEY environment variables in
your `.env` file, e.g. `EXA_API_KEY=your_api_key_here`
(Note as of 28 Jan 2023, Metaphor renamed to Exa, so you can also use
`EXA_API_KEY=your_api_key_here`)

* install langroid with the `exa-py` extra, e.g.
`pip install langroid[exa]` or `uv pip install langroid[exa]`
or `poetry add langroid[exa]`  or `uv add langroid[exa]`
(it installs the `exa_py` package from pypi).

For more information, please refer to the official docs:
https://exa.ai/
"""

from typing import List, Tuple

from langroid.agent.tool_message import ToolMessage
from langroid.parsing.web_search import exa_search


class ExaSearchTool(ToolMessage):
    request: str = "exa_search"
    purpose: str = """
            To search the web and return up to <num_results> 
            links relevant to the given <query>. When using this tool,
            ONLY show the required JSON, DO NOT SAY ANYTHING ELSE.
            Wait for the results of the web search, and then use them to
            compose your response.
            """
    query: str
    num_results: int

    def handle(self) -> str:
        """
        Conducts a search using the exa API based on the provided query
        and number of results by triggering a exa_search.

        Returns:
            str: A formatted string containing the titles, links, and
                summaries of each search result, separated by two newlines.
        """

        search_results = exa_search(self.query, self.num_results)
        # return Title, Link, Summary of each result, separated by two newlines
        results_str = "\n\n".join(str(result) for result in search_results)
        return f"""
        BELOW ARE THE RESULTS FROM THE WEB SEARCH. USE THESE TO COMPOSE YOUR RESPONSE:
        {results_str}
        """

    @classmethod
    def examples(cls) -> List["ToolMessage" | Tuple[str, "ToolMessage"]]:
        return [
            cls(
                query="When was the Llama2 Large Language Model (LLM) released?",
                num_results=3,
            ),
        ]
</file>

<file path="langroid/agent/tools/file_tools.py">
from contextlib import chdir
from pathlib import Path
from textwrap import dedent
from typing import Callable, List, Tuple, Type

import git

from langroid.agent.tool_message import ToolMessage
from langroid.agent.xml_tool_message import XMLToolMessage
from langroid.pydantic_v1 import Field
from langroid.utils.git_utils import git_commit_file
from langroid.utils.system import create_file, list_dir, read_file


class ReadFileTool(ToolMessage):
    request: str = "read_file_tool"
    purpose: str = "Read the contents of a <file_path>"
    file_path: str

    _line_nums: bool = True  # whether to add line numbers to the content
    _curr_dir: Callable[[], str] | None = None

    @classmethod
    def create(
        cls,
        get_curr_dir: Callable[[], str] | None,
    ) -> Type["ReadFileTool"]:
        """
        Create a subclass of ReadFileTool for a specific directory

        Args:
            get_curr_dir (callable): A function that returns the current directory.

        Returns:
            Type[ReadFileTool]: A subclass of the ReadFileTool class, specifically
                for the current directory.
        """

        class CustomReadFileTool(cls):  # type: ignore
            _curr_dir: Callable[[], str] | None = (
                staticmethod(get_curr_dir) if get_curr_dir else None
            )

        return CustomReadFileTool

    @classmethod
    def examples(cls) -> List[ToolMessage | tuple[str, ToolMessage]]:
        return [
            cls(file_path="src/lib.rs"),
            (
                "I want to read the contents of src/main.rs",
                cls(file_path="src/main.rs"),
            ),
        ]

    def handle(self) -> str:
        # return contents as str for LLM to read
        # ASSUME: file_path should be relative to the curr_dir
        try:
            dir = (self._curr_dir and self._curr_dir()) or Path.cwd()
            with chdir(dir):
                # if file doesn't exist, return an error message
                content = read_file(self.file_path, self._line_nums)
            line_num_str = ""
            if self._line_nums:
                line_num_str = "(Line numbers added for reference only!)"
            return f""" 
    CONTENTS of {self.file_path}:
    {line_num_str}
    ---------------------------
    {content}
    """
        except FileNotFoundError:
            return f"File not found: {self.file_path}"


class WriteFileTool(XMLToolMessage):
    request: str = "write_file_tool"
    purpose: str = """
    Tool for writing <content> in a certain <language> to a <file_path>
    """

    file_path: str = Field(..., description="The path to the file to write the content")

    language: str = Field(
        default="",
        description="""
        The language of the content; could be human language or programming language
        """,
    )
    content: str = Field(
        ...,
        description="The content to write to the file",
        verbatim=True,  # preserve the content as is; uses CDATA section in XML
    )
    _curr_dir: Callable[[], str] | None = None
    _git_repo: Callable[[], git.Repo] | None = None
    _commit_message: str = "Agent write file tool"

    @classmethod
    def create(
        cls,
        get_curr_dir: Callable[[], str] | None,
        get_git_repo: Callable[[], str] | None,
    ) -> Type["WriteFileTool"]:
        """
        Create a subclass of WriteFileTool with the current directory and git repo.

        Args:
            get_curr_dir (callable): A function that returns the current directory.
            get_git_repo (callable): A function that returns the git repo.

        Returns:
            Type[WriteFileTool]: A subclass of the WriteFileTool class, specifically
                for the current directory and git repo.
        """

        class CustomWriteFileTool(cls):  # type: ignore
            _curr_dir: Callable[[], str] | None = (
                staticmethod(get_curr_dir) if get_curr_dir else None
            )
            _git_repo: Callable[[], str] | None = (
                staticmethod(get_git_repo) if get_git_repo else None
            )

        return CustomWriteFileTool

    @classmethod
    def examples(cls) -> List[ToolMessage | Tuple[str, ToolMessage]]:
        return [
            (
                """
                I want to define a simple hello world python function
                in a file "mycode/hello.py"
                """,
                cls(
                    file_path="mycode/hello.py",
                    language="python",
                    content="""
def hello():
    print("Hello, World!")
""",
                ),
            ),
            cls(
                file_path="src/lib.rs",
                language="rust",
                content="""
fn main() {
    println!("Hello, World!");
}                
""",
            ),
            cls(
                file_path="docs/intro.txt",
                content="""
# Introduction
This is the first sentence of the introduction.
                """,
            ),
        ]

    def handle(self) -> str:
        curr_dir = (self._curr_dir and self._curr_dir()) or Path.cwd()
        with chdir(curr_dir):
            create_file(self.file_path, self.content)
            msg = f"Content written to {self.file_path}"
            # possibly commit the file
            if self._git_repo:
                git_commit_file(
                    self._git_repo(),
                    self.file_path,
                    self._commit_message,
                )
                msg += " and committed"
        return msg


class ListDirTool(ToolMessage):
    request: str = "list_dir_tool"
    purpose: str = "List the contents of a <dir_path>"
    dir_path: str

    _curr_dir: Callable[[], str] | None = None

    @classmethod
    def create(
        cls,
        get_curr_dir: Callable[[], str] | None,
    ) -> Type["ReadFileTool"]:
        """
        Create a subclass of ListDirTool for a specific directory

        Args:
            get_curr_dir (callable): A function that returns the current directory.

        Returns:
            Type[ReadFileTool]: A subclass of the ReadFileTool class, specifically
                for the current directory.
        """

        class CustomListDirTool(cls):  # type: ignore
            _curr_dir: Callable[[], str] | None = (
                staticmethod(get_curr_dir) if get_curr_dir else None
            )

        return CustomListDirTool

    @classmethod
    def examples(cls) -> List[ToolMessage | tuple[str, ToolMessage]]:
        return [
            cls(dir_path="src"),
            (
                "I want to list the contents of src",
                cls(dir_path="src"),
            ),
        ]

    def handle(self) -> str:
        # ASSUME: dir_path should be relative to the curr_dir_path
        dir = (self._curr_dir and self._curr_dir()) or Path.cwd()
        with chdir(dir):
            contents = list_dir(self.dir_path)

        if not contents:
            return f"Directory not found or empty: {self.dir_path}"
        contents_str = "\n".join(contents)
        return dedent(
            f"""
            LISTING of directory {self.dir_path}:
            ---------------------------
            {contents_str}
            """.strip()
        )
</file>

<file path="langroid/agent/tools/google_search_tool.py">
"""
A tool to trigger a Google search for a given query, and return the top results with
their titles, links, summaries. Since the tool is stateless (i.e. does not need
access to agent state), it can be enabled for any agent, without having to define a
special method inside the agent: `agent.enable_message(GoogleSearchTool)`

NOTE: Using this tool requires setting the GOOGLE_API_KEY and GOOGLE_CSE_ID
environment variables in your `.env` file, as explained in the
[README](https://github.com/langroid/langroid#gear-installation-and-setup).
"""

from typing import List, Tuple

from langroid.agent.tool_message import ToolMessage
from langroid.parsing.web_search import google_search


class GoogleSearchTool(ToolMessage):
    request: str = "web_search"
    purpose: str = """
            To search the web and return up to <num_results> links relevant to 
            the given <query>. 
            """
    query: str
    num_results: int

    def handle(self) -> str:
        search_results = google_search(self.query, self.num_results)
        # return Title, Link, Summary of each result, separated by two newlines
        return "\n\n".join(str(result) for result in search_results)

    @classmethod
    def examples(cls) -> List["ToolMessage" | Tuple[str, "ToolMessage"]]:
        return [
            cls(
                query="When was the Llama2 Large Language Model (LLM) released?",
                num_results=3,
            ),
        ]
</file>

<file path="langroid/agent/tools/metaphor_search_tool.py">
"""
A tool to trigger a Metaphor search for a given query,
(https://docs.exa.ai/reference/getting-started)
and return the top results with their titles, links, summaries.
Since the tool is stateless (i.e. does not need
access to agent state), it can be enabled for any agent, without having to define a
special method inside the agent: `agent.enable_message(MetaphorSearchTool)`

NOTE: To use this tool, you need to:

* set the METAPHOR_API_KEY environment variables in
your `.env` file, e.g. `METAPHOR_API_KEY=your_api_key_here`
(Note as of 28 Jan 2023, Metaphor renamed to Exa, so you can also use
`EXA_API_KEY=your_api_key_here`)

* install langroid with the `metaphor` extra, e.g.
`pip install langroid[metaphor]` or `uv pip install langroid[metaphor]` 
or `poetry add langroid[metaphor]`  or `uv add langroid[metaphor]`
(it installs the `metaphor-python` package from pypi).

For more information, please refer to the official docs:
https://metaphor.systems/
"""

from typing import List, Tuple

from langroid.agent.tool_message import ToolMessage
from langroid.parsing.web_search import metaphor_search


class MetaphorSearchTool(ToolMessage):
    request: str = "metaphor_search"
    purpose: str = """
            To search the web and return up to <num_results> 
            links relevant to the given <query>. When using this tool,
            ONLY show the required JSON, DO NOT SAY ANYTHING ELSE.
            Wait for the results of the web search, and then use them to
            compose your response.
            """
    query: str
    num_results: int

    def handle(self) -> str:
        """
        Conducts a search using the metaphor API based on the provided query
        and number of results by triggering a metaphor_search.

        Returns:
            str: A formatted string containing the titles, links, and
                summaries of each search result, separated by two newlines.
        """

        search_results = metaphor_search(self.query, self.num_results)
        # return Title, Link, Summary of each result, separated by two newlines
        results_str = "\n\n".join(str(result) for result in search_results)
        return f"""
        BELOW ARE THE RESULTS FROM THE WEB SEARCH. USE THESE TO COMPOSE YOUR RESPONSE:
        {results_str}
        """

    @classmethod
    def examples(cls) -> List["ToolMessage" | Tuple[str, "ToolMessage"]]:
        return [
            cls(
                query="When was the Llama2 Large Language Model (LLM) released?",
                num_results=3,
            ),
        ]
</file>

<file path="langroid/agent/tools/orchestration.py">
"""
Various tools to for agents to be able to control flow of Task, e.g.
termination, routing to another agent, etc.
"""

from typing import Any, List, Tuple

from langroid.agent.chat_agent import ChatAgent
from langroid.agent.chat_document import ChatDocument
from langroid.agent.tool_message import ToolMessage
from langroid.mytypes import Entity
from langroid.pydantic_v1 import Extra
from langroid.utils.types import to_string


class AgentDoneTool(ToolMessage):
    """Tool for AGENT entity (i.e. agent_response or downstream tool handling fns) to
    signal the current task is done."""

    purpose: str = """
    To signal the current task is done, along with an optional message <content>
    of arbitrary type (default None) and an 
    optional list of <tools> (default empty list).
    """
    request: str = "agent_done_tool"
    content: Any = None
    tools: List[ToolMessage] = []
    # only meant for agent_response or tool-handlers, not for LLM generation:
    _allow_llm_use: bool = False

    def response(self, agent: ChatAgent) -> ChatDocument:
        content_str = "" if self.content is None else to_string(self.content)
        return agent.create_agent_response(
            content=content_str,
            content_any=self.content,
            tool_messages=[self] + self.tools,
        )


class DoneTool(ToolMessage):
    """Tool for Agent Entity (i.e. agent_response) or LLM entity (i.e. llm_response) to
    signal the current task is done, with some content as the result."""

    purpose: str = """
    To signal the current task is done, along with an optional message <content>
    of arbitrary type (default None).
    """
    request: str = "done_tool"
    content: str = ""

    def response(self, agent: ChatAgent) -> ChatDocument:
        return agent.create_agent_response(
            content=self.content,
            content_any=self.content,
            tool_messages=[self],
        )

    @classmethod
    def instructions(cls) -> str:
        tool_name = cls.default_value("request")
        return f"""
        When you determine your task is finished, 
        use the tool `{tool_name}` to signal this,
        along with any message or result, in the `content` field. 
        """


class ResultTool(ToolMessage):
    """Class to use as a wrapper for sending arbitrary results from an Agent's
    agent_response or tool handlers, to:
    (a) trigger completion of the current task (similar to (Agent)DoneTool), and
    (b) be returned as the result of the current task, i.e. this tool would appear
         in the resulting ChatDocument's `tool_messages` list.
    See test_tool_handlers_and_results in test_tool_messages.py, and
    examples/basic/tool-extract-short-example.py.

    Note:
        - when defining a tool handler or agent_response, you can directly return
            ResultTool(field1 = val1, ...),
            where the values can be arbitrary data structures, including nested
            Pydantic objs, or you can define a subclass of ResultTool with the
            fields you want to return.
        - This is a special ToolMessage that is NOT meant to be used or handled
            by an agent.
        - AgentDoneTool is more restrictive in that you can only send a `content`
            or `tools` in the result.
    """

    request: str = "result_tool"
    purpose: str = "Ignored; Wrapper for a structured message"
    id: str = ""  # placeholder for OpenAI-API tool_call_id

    class Config:
        extra = Extra.allow
        arbitrary_types_allowed = False
        validate_all = True
        validate_assignment = True
        # do not include these fields in the generated schema
        # since we don't require the LLM to specify them
        schema_extra = {"exclude": {"purpose", "id", "strict"}}

    def handle(self) -> AgentDoneTool:
        return AgentDoneTool(tools=[self])


class FinalResultTool(ToolMessage):
    """Class to use as a wrapper for sending arbitrary results from an Agent's
    agent_response or tool handlers, to:
    (a) trigger completion of the current task as well as all parent tasks, and
    (b) be returned as the final result of the root task, i.e. this tool would appear
         in the final ChatDocument's `tool_messages` list.
    See test_tool_handlers_and_results in test_tool_messages.py, and
    examples/basic/chat-tool-function.py.

    Note:
        - when defining a tool handler or agent_response, you can directly return
            FinalResultTool(field1 = val1, ...),
            where the values can be arbitrary data structures, including nested
            Pydantic objs, or you can define a subclass of FinalResultTool with the
            fields you want to return.
        - This is a special ToolMessage that is NOT meant to be used by an agent's
            llm_response, but only by agent_response or tool handlers.
        - A subclass of this tool can be defined, with specific fields, and
          with _allow_llm_use = True, to allow the LLM to generate this tool,
          and have the effect of terminating the current and all parent tasks,
          with the tool appearing in the final ChatDocument's `tool_messages` list.
          See examples/basic/multi-agent-return-result.py.
    """

    request: str = ""
    purpose: str = "Ignored; Wrapper for a structured message"
    id: str = ""  # placeholder for OpenAI-API tool_call_id
    _allow_llm_use: bool = False

    class Config:
        extra = Extra.allow
        arbitrary_types_allowed = False
        validate_all = True
        validate_assignment = True
        # do not include these fields in the generated schema
        # since we don't require the LLM to specify them
        schema_extra = {"exclude": {"purpose", "id", "strict"}}


class PassTool(ToolMessage):
    """Tool for "passing" on the received msg (ChatDocument),
    so that an as-yet-unspecified agent can handle it.
    Similar to ForwardTool, but without specifying the recipient agent.
    """

    purpose: str = """
    To pass the current message so that other agents can handle it.
    """
    request: str = "pass_tool"

    def response(self, agent: ChatAgent, chat_doc: ChatDocument) -> ChatDocument:
        """When this tool is enabled for an Agent, this will result in a method
        added to the Agent with signature:
        `pass_tool(self, tool: PassTool, chat_doc: ChatDocument) -> ChatDocument:`
        """
        # if PassTool is in chat_doc, pass its parent, else pass chat_doc itself
        doc = chat_doc
        while True:
            tools = agent.get_tool_messages(doc)
            if not any(isinstance(t, type(self)) for t in tools):
                break
            if doc.parent is None:
                break
            doc = doc.parent
        assert doc is not None, "PassTool: parent of chat_doc must not be None"
        new_doc = ChatDocument.deepcopy(doc)
        new_doc.metadata.sender = Entity.AGENT
        return new_doc

    @classmethod
    def instructions(cls) -> str:
        return """
        Use the `pass_tool` to PASS the current message 
        so that another agent can handle it.
        """


class DonePassTool(PassTool):
    """Tool to signal DONE, AND Pass incoming/current msg as result.
    Similar to PassTool, except we append a DoneTool to the result tool_messages.
    """

    purpose: str = """
    To signal the current task is done, with results set to the current/incoming msg.
    """
    request: str = "done_pass_tool"

    def response(self, agent: ChatAgent, chat_doc: ChatDocument) -> ChatDocument:
        # use PassTool to get the right ChatDocument to pass...
        new_doc = PassTool.response(self, agent, chat_doc)
        tools = agent.get_tool_messages(new_doc)
        # ...then return an AgentDoneTool with content, tools from this ChatDocument
        return AgentDoneTool(content=new_doc.content, tools=tools)  # type: ignore

    @classmethod
    def instructions(cls) -> str:
        return """
        When you determine your task is finished,
        and want to pass the current message as the result of the task,  
        use the `done_pass_tool` to signal this.
        """


class ForwardTool(PassTool):
    """Tool for forwarding the received msg (ChatDocument) to another agent or entity.
    Similar to PassTool, but with a specified recipient agent.
    """

    purpose: str = """
    To forward the current message to an <agent>, where <agent> 
    could be the name of an agent, or an entity such as "user", "llm".
    """
    request: str = "forward_tool"
    agent: str

    def response(self, agent: ChatAgent, chat_doc: ChatDocument) -> ChatDocument:
        """When this tool is enabled for an Agent, this will result in a method
        added to the Agent with signature:
        `forward_tool(self, tool: ForwardTool, chat_doc: ChatDocument) -> ChatDocument:`
        """
        # if chat_doc contains ForwardTool, then we forward its parent ChatDocument;
        # else forward chat_doc itself
        new_doc = PassTool.response(self, agent, chat_doc)
        new_doc.metadata.recipient = self.agent
        return new_doc

    @classmethod
    def instructions(cls) -> str:
        return """
        If you need to forward the current message to another agent, 
        use the `forward_tool` to do so, 
        setting the `recipient` field to the name of the recipient agent.
        """


class SendTool(ToolMessage):
    """Tool for agent or LLM to send content to a specified agent.
    Similar to RecipientTool.
    """

    purpose: str = """
    To send message <content> to agent specified in <to> field.
    """
    request: str = "send_tool"
    to: str
    content: str = ""

    def response(self, agent: ChatAgent) -> ChatDocument:
        return agent.create_agent_response(
            self.content,
            recipient=self.to,
        )

    @classmethod
    def instructions(cls) -> str:
        return """
        If you need to send a message to another agent, 
        use the `send_tool` to do so, with these field values:
        - `to` field = name of the recipient agent,
        - `content` field = the message to send.
        """

    @classmethod
    def examples(cls) -> List["ToolMessage" | Tuple[str, "ToolMessage"]]:
        return [
            cls(to="agent1", content="Hello, agent1!"),
            (
                """
                I need to send the content 'Who built the Gemini model?', 
                to the 'Searcher' agent.
                """,
                cls(to="Searcher", content="Who built the Gemini model?"),
            ),
        ]


class AgentSendTool(ToolMessage):
    """Tool for Agent (i.e. agent_response) to send content or tool_messages
    to a specified agent. Similar to SendTool except that AgentSendTool is only
    usable by agent_response (or handler of another tool), to send content or
    tools to another agent. SendTool does not allow sending tools.
    """

    purpose: str = """
    To send message <content> and <tools> to agent specified in <to> field. 
    """
    request: str = "agent_send_tool"
    to: str
    content: str = ""
    tools: List[ToolMessage] = []
    _allow_llm_use: bool = False

    def response(self, agent: ChatAgent) -> ChatDocument:
        return agent.create_agent_response(
            self.content,
            tool_messages=self.tools,
            recipient=self.to,
        )
</file>

<file path="langroid/agent/tools/recipient_tool.py">
"""
The `recipient_tool` is used to send a message to a specific recipient.
Various methods from the RecipientTool and AddRecipientTool class
are inserted into the Agent as methods (see `langroid/agent/base.py`,
the method `_get_tool_list()`).

See usage examples in `tests/main/test_multi_agent_complex.py` and
`tests/main/test_recipient_tool.py`.

A simpler alternative to this tool is `SendTool`, see here:
https://github.com/langroid/langroid/blob/main/langroid/agent/tools/orchestration.py

You can also define your own XML-based variant of this tool:
https://github.com/langroid/langroid/blob/main/examples/basic/xml-tool.py
which uses XML rather than JSON, and can be more reliable than JSON,
especially with weaker LLMs.

"""

from typing import List, Type

from rich import print

from langroid.agent.chat_agent import ChatAgent
from langroid.agent.chat_document import ChatDocMetaData, ChatDocument
from langroid.agent.tool_message import ToolMessage
from langroid.mytypes import Entity
from langroid.utils.pydantic_utils import has_field


class AddRecipientTool(ToolMessage):
    """
    Used by LLM to add a recipient to the previous message, when it has
    forgotten to specify a recipient. This avoids having to re-generate the
    previous message (and thus saves token-cost and time).
    """

    request: str = "add_recipient"
    purpose: str = (
        "To clarify that the <intended_recipient> when I forgot to specify it, "
        "to clarify who the message is intended for."
    )
    intended_recipient: str
    _saved_content: str = ""

    def response(self, agent: ChatAgent) -> ChatDocument:
        """
        Returns:
            (ChatDocument): with content set to self.content and
                metadata.recipient set to self.recipient.
        """
        print(
            "[red]RecipientTool: "
            f"Added recipient {self.intended_recipient} to message."
        )
        if self.__class__._saved_content == "":
            recipient_request_name = RecipientTool.default_value("request")
            content = f"""
                Recipient specified but content is empty!
                This could be because the `{self.request}` tool/function was used 
                before using `{recipient_request_name}` tool/function.
                Resend the message using `{recipient_request_name}` tool/function.
                """
        else:
            content = self.__class__._saved_content  # use class-level attrib value
            # erase content since we just used it.
            self.__class__._saved_content = ""
        return ChatDocument(
            content=content,
            metadata=ChatDocMetaData(
                recipient=self.intended_recipient,
                # we are constructing this so it looks as it msg is from LLM
                sender=Entity.LLM,
            ),
        )


class RecipientTool(ToolMessage):
    """
    Used by LLM to send a message to a specific recipient.

    Useful in cases where an LLM is talking to 2 or more
    agents (or an Agent and human user), and needs to specify which agent (task)
    its message is intended for. The recipient name should be the name of a task
    (which is normally the name of the agent that the task wraps, although the task
    can have its own name).

    To use this tool/function-call, LLM must generate a JSON structure
    with these fields:
    {
        "request": "recipient_message", # also the function name when using fn-calling
        "intended_recipient": <name_of_recipient_task_or_entity>,
        "content": <content>
    }
    The effect of this is that `content` will be sent to the `intended_recipient` task.
    """

    request: str = "recipient_message"
    purpose: str = "To send message <content> to a specific <intended_recipient>."
    intended_recipient: str
    content: str

    @classmethod
    def create(cls, recipients: List[str], default: str = "") -> Type["RecipientTool"]:
        """Create a restricted version of RecipientTool that
        only allows certain recipients, and possibly sets a default recipient."""

        class RecipientToolRestricted(cls):  # type: ignore
            allowed_recipients = recipients
            default_recipient = default

        return RecipientToolRestricted

    @classmethod
    def instructions(cls) -> str:
        """
        Generate instructions for using this tool/function.
        These are intended to be appended to the system message of the LLM.
        """
        recipients = []
        if has_field(cls, "allowed_recipients"):
            recipients = cls.default_value("allowed_recipients")
        if len(recipients) > 0:
            recipients_str = ", ".join(recipients)
            return f"""
            Since you will be talking to multiple recipients, 
            you must clarify who your intended recipient is, using 
            the `{cls.default_value("request")}` tool/function-call, by setting the 
            'intended_recipient' field to one of the following:
            {recipients_str},
            and setting the 'content' field to your message.
            """
        else:
            return f"""
            Since you will be talking to multiple recipients, 
            you must clarify who your intended recipient is, using 
            the `{cls.default_value("request")}` tool/function-call, by setting the 
            'intended_recipient' field to the name of the recipient, 
            and setting the 'content' field to your message.
            """

    def response(self, agent: ChatAgent) -> str | ChatDocument:
        """
        When LLM has correctly used this tool,
        construct a ChatDocument with an explicit recipient,
        and make it look like it is from the LLM.

        Returns:
            (ChatDocument): with content set to self.content and
                metadata.recipient set to self.intended_recipient.
        """
        default_recipient = self.__class__.default_value("default_recipient")
        if self.intended_recipient == "" and default_recipient not in ["", None]:
            self.intended_recipient = default_recipient
        elif self.intended_recipient == "":
            # save the content as a class-variable, so that
            # we can construct the ChatDocument once the LLM specifies a recipient.
            # This avoids having to re-generate the entire message, saving time + cost.
            AddRecipientTool._saved_content = self.content
            agent.enable_message(AddRecipientTool)
            return ChatDocument(
                content="""
                Empty recipient field!
                Please use the 'add_recipient' tool/function-call to specify who your 
                message is intended for.
                DO NOT REPEAT your original message; ONLY specify the recipient via this
                tool/function-call.
                """,
                metadata=ChatDocMetaData(
                    sender=Entity.AGENT,
                    recipient=Entity.LLM,
                ),
            )

        print("[red]RecipientTool: Validated properly addressed message")

        return ChatDocument(
            content=self.content,
            metadata=ChatDocMetaData(
                recipient=self.intended_recipient,
                # we are constructing this so it looks as if msg is from LLM
                sender=Entity.LLM,
            ),
        )

    @staticmethod
    def handle_message_fallback(
        agent: ChatAgent, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        """
        Response of agent if this tool is not used, e.g.
        the LLM simply sends a message without using this tool.
        This method has two purposes:
        (a) Alert the LLM that it has forgotten to specify a recipient, and prod it
            to use the `add_recipient` tool to specify just the recipient
            (and not re-generate the entire message).
        (b) Save the content of the message in the agent's `content` field,
            so the agent can construct a ChatDocument with this content once LLM
            later specifies a recipient using the `add_recipient` tool.

        This method is used to set the agent's handle_message_fallback() method.

        Returns:
            (str): reminder to LLM to use the `add_recipient` tool.
        """
        # Note: once the LLM specifies a missing recipient, the task loop
        # mechanism will not allow any of the "native" responders to respond,
        # since the recipient will differ from the task name.
        # So if this method is called, we can be sure that the recipient has not
        # been specified.
        if (
            isinstance(msg, str)
            or msg.metadata.sender != Entity.LLM
            or msg.metadata.recipient != ""  # there IS an explicit recipient
        ):
            return None
        content = msg if isinstance(msg, str) else msg.content
        # save the content as a class-variable, so that
        # we can construct the ChatDocument once the LLM specifies a recipient.
        # This avoids having to re-generate the entire message, saving time + cost.
        AddRecipientTool._saved_content = content
        agent.enable_message(AddRecipientTool)
        print("[red]RecipientTool: Recipient not specified, asking LLM to clarify.")
        return ChatDocument(
            content="""
            Please use the 'add_recipient' tool/function-call to specify who your 
            `intended_recipient` is.
            DO NOT REPEAT your original message; ONLY specify the 
            `intended_recipient` via this tool/function-call.
            """,
            metadata=ChatDocMetaData(
                sender=Entity.AGENT,
                recipient=Entity.LLM,
            ),
        )
</file>

<file path="langroid/agent/tools/retrieval_tool.py">
from typing import List, Tuple

from langroid.agent.tool_message import ToolMessage


class RetrievalTool(ToolMessage):
    """
    Retrieval tool, only to be used by a DocChatAgent.
    The handler method is defined in DocChatAgent.retrieval_tool
    """

    request: str = "retrieval_tool"
    purpose: str = """
            To retrieve up to <num_results> passages from a document-set, that are 
            relevant to a <query>, which could be a question or simply a topic or 
            search phrase. 
            """
    query: str
    num_results: int

    @classmethod
    def examples(cls) -> List["ToolMessage" | Tuple[str, "ToolMessage"]]:
        return [
            cls(
                query="What are the eligibility criteria for the scholarship?",
                num_results=3,
            ),
            cls(
                query="Self-Attention mechanism in RNNs",
                num_results=5,
            ),
        ]
</file>

<file path="langroid/agent/tools/rewind_tool.py">
"""
The `rewind_tool` is used to rewind to the `n`th previous Assistant message
and replace it with a new `content`. This is useful in several scenarios and
- saves token-cost + inference time,
- reduces distracting clutter in chat history, which helps improve response quality.

This is intended to mimic how a human user might use a chat interface, where they
go down a conversation path, and want to go back in history to "edit and re-submit"
a previous message, to get a better response.

See usage examples in `tests/main/test_rewind_tool.py`.
"""

from typing import List, Tuple

import langroid.language_models as lm
from langroid.agent.chat_agent import ChatAgent
from langroid.agent.chat_document import ChatDocument
from langroid.agent.tool_message import ToolMessage


def prune_messages(agent: ChatAgent, idx: int) -> ChatDocument | None:
    """
    Clear the message history of agent, starting at index `idx`,
    taking care to first clear all dependent messages (possibly from other agents'
    message histories) that are linked to the message at `idx`, via the `child_id` field
    of the `metadata` field of the ChatDocument linked from the message at `idx`.

    Args:
        agent (ChatAgent): The agent whose message history is to be pruned.
        idx (int): The index from which to start clearing the message history.

    Returns:
        The parent ChatDocument of the ChatDocument linked from the message at `idx`,
        if it exists, else None.

    """
    assert idx >= 0, "Invalid index for message history!"
    chat_doc_id = agent.message_history[idx].chat_document_id
    chat_doc = ChatDocument.from_id(chat_doc_id)
    assert chat_doc is not None, "ChatDocument not found in registry!"

    parent = ChatDocument.from_id(chat_doc.metadata.parent_id)  # may be None
    # We're invaliding the msg at idx,
    # so starting with chat_doc, go down the child links
    # and clear history of each agent, to the msg_idx
    curr_doc = chat_doc
    while child_doc := curr_doc.metadata.child:
        if child_doc.metadata.msg_idx >= 0:
            child_agent = ChatAgent.from_id(child_doc.metadata.agent_id)
            if child_agent is not None:
                child_agent.clear_history(child_doc.metadata.msg_idx)
        curr_doc = child_doc

    # Clear out ObjectRegistry entries for this ChatDocuments
    # and all descendants (in case they weren't already cleared above)
    ChatDocument.delete_id(chat_doc.id())

    # Finally, clear this agent's history back to idx,
    # and replace the msg at idx with the new content
    agent.clear_history(idx)
    return parent


class RewindTool(ToolMessage):
    """
    Used by LLM to rewind (i.e. backtrack) to the `n`th Assistant message
    and replace with a new msg.
    """

    request: str = "rewind_tool"
    purpose: str = """
        To rewind the conversation and replace the 
        <n>'th Assistant message with <content>
        """
    n: int
    content: str

    @classmethod
    def examples(cls) -> List["ToolMessage" | Tuple[str, "ToolMessage"]]:
        return [
            cls(n=1, content="What are the 3 major causes of heart disease?"),
            (
                """
                Based on the conversation so far, I realize I would get a better
                response from Bob if rephrase my 2nd message to him to: 
                'Who wrote the book Grime and Banishment?'
                """,
                cls(n=2, content="who wrote the book 'Grime and Banishment'?"),
            ),
        ]

    def response(self, agent: ChatAgent) -> str | ChatDocument:
        """
        Define the tool-handler method for this tool here itself,
        since it is a generic tool whose functionality should be the
        same for any agent.

        When LLM has correctly used this tool, rewind this agent's
        `message_history` to the `n`th assistant msg, and replace it with `content`.
        We need to mock it as if the LLM is sending this message.

        Within a multi-agent scenario, this also means that any other messages dependent
        on this message will need to be invalidated --
        so go down the chain of child messages and clear each agent's history
        back to the `msg_idx` corresponding to the child message.

        Returns:
            (ChatDocument): with content set to self.content.
        """
        idx = agent.nth_message_idx_with_role(lm.Role.ASSISTANT, self.n)
        if idx < 0:
            # set up a corrective message from AGENT
            msg = f"""
                Could not rewind to {self.n}th Assistant message!
                Please check the value of `n` and try again.
                Or it may be too early to use the `rewind_tool`.
                """
            return agent.create_agent_response(msg)

        parent = prune_messages(agent, idx)

        # create ChatDocument with new content, to be returned as result of this tool
        result_doc = agent.create_llm_response(self.content)
        result_doc.metadata.parent_id = "" if parent is None else parent.id()
        result_doc.metadata.agent_id = agent.id
        result_doc.metadata.msg_idx = idx

        # replace the message at idx with this new message
        agent.message_history.extend(ChatDocument.to_LLMMessage(result_doc))

        # set the replaced doc's parent's child to this result_doc
        if parent is not None:
            # first remove the this parent's child from registry
            ChatDocument.delete_id(parent.metadata.child_id)
            parent.metadata.child_id = result_doc.id()
        return result_doc
</file>

<file path="langroid/agent/tools/segment_extract_tool.py">
"""
A tool to extract segment numbers from the last user message,
containing numbered segments.

The idea is that when an LLM wants to (or is asked to) simply extract
portions of a message verbatim, it should use this tool/function to
SPECIFY what should be extracted, rather than actually extracting it.
The output will be in the form of a list of segment numbers or ranges.
This will usually be much cheaper and faster than actually writing out the extracted
text. The handler of this tool/function will then extract the text and send it back.
"""

from typing import List, Tuple

from langroid.agent.tool_message import ToolMessage


class SegmentExtractTool(ToolMessage):
    request: str = "extract_segments"
    purpose: str = """
            To extract segments from a body of text containing numbered 
            segments, in the form of a <segment_list> which is a list of segment 
            numbers or ranges, like "10,12,14-17".
            """
    segment_list: str

    @classmethod
    def examples(cls) -> List["ToolMessage" | Tuple[str, "ToolMessage"]]:
        return [
            (
                "I want to extract segments 1, 3, and 5 thru 7",
                cls(segment_list="1,3,5-7"),
            )
        ]

    @classmethod
    def instructions(cls) -> str:
        return """
        Use this tool/function to indicate certain segments from 
        a body of text containing numbered segments.
        """
</file>

<file path="langroid/agent/tools/tavily_search_tool.py">
"""
A tool to trigger a Tavily search for a given query, and return the top results with
their titles, links, summaries. Since the tool is stateless (i.e. does not need
access to agent state), it can be enabled for any agent, without having to define a
special method inside the agent: `agent.enable_message(TavilySearchTool)`
"""

from typing import List, Tuple

from langroid.agent.tool_message import ToolMessage
from langroid.parsing.web_search import tavily_search


class TavilySearchTool(ToolMessage):
    request: str = "tavily_search"
    purpose: str = """
            To search the web and return up to <num_results> 
            links relevant to the given <query>. When using this tool,
            ONLY show the required JSON, DO NOT SAY ANYTHING ELSE.
            Wait for the results of the web search, and then use them to
            compose your response.
            """
    query: str
    num_results: int

    def handle(self) -> str:
        """
        Conducts a search using Tavily based on the provided query
        and number of results by triggering a tavily_search.

        Returns:
            str: A formatted string containing the titles, links, and
                summaries of each search result, separated by two newlines.
        """
        search_results = tavily_search(self.query, self.num_results)
        # return Title, Link, Summary of each result, separated by two newlines
        results_str = "\n\n".join(str(result) for result in search_results)
        return f"""
        BELOW ARE THE RESULTS FROM THE WEB SEARCH. USE THESE TO COMPOSE YOUR RESPONSE:
        {results_str}
        """

    @classmethod
    def examples(cls) -> List["ToolMessage" | Tuple[str, "ToolMessage"]]:
        return [
            cls(
                query="When was the Llama2 Large Language Model (LLM) released?",
                num_results=3,
            ),
        ]
</file>

<file path="langroid/agent/__init__.py">
from .base import Agent, AgentConfig
from .chat_document import (
    ChatDocAttachment,
    ChatDocMetaData,
    ChatDocLoggerFields,
    ChatDocument,
)
from .chat_agent import ChatAgentConfig, ChatAgent
from .tool_message import ToolMessage
from .task import Task

from . import base
from . import chat_document
from . import chat_agent
from . import task
from . import batch
from . import tool_message
from . import tools
from . import special


__all__ = [
    "Agent",
    "AgentConfig",
    "ChatDocAttachment",
    "ChatDocMetaData",
    "ChatDocLoggerFields",
    "ChatDocument",
    "ChatAgent",
    "ChatAgentConfig",
    "ToolMessage",
    "Task",
    "base",
    "chat_document",
    "chat_agent",
    "task",
    "batch",
    "tool_message",
    "tools",
    "special",
]
</file>

<file path="langroid/agent/openai_assistant.py">
import asyncio
import json

# setup logger
import logging
import time
from enum import Enum
from typing import Any, Dict, List, Optional, Tuple, Type, cast, no_type_check

import openai
from openai.types.beta import Assistant, Thread
from openai.types.beta.assistant_update_params import (
    ToolResources,
    ToolResourcesCodeInterpreter,
)
from openai.types.beta.threads import Message, Run
from openai.types.beta.threads.runs import RunStep
from rich import print

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocument
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.base import LLMFunctionCall, LLMMessage, LLMResponse, Role
from langroid.language_models.openai_gpt import (
    OpenAIChatModel,
    OpenAIGPT,
    OpenAIGPTConfig,
)
from langroid.pydantic_v1 import BaseModel
from langroid.utils.configuration import settings
from langroid.utils.system import generate_user_id, update_hash

logger = logging.getLogger(__name__)


class ToolType(str, Enum):
    RETRIEVAL = "file_search"
    CODE_INTERPRETER = "code_interpreter"
    FUNCTION = "function"


class AssistantTool(BaseModel):
    type: ToolType
    function: Dict[str, Any] | None = None

    def dct(self) -> Dict[str, Any]:
        d = super().dict()
        d["type"] = d["type"].value
        if self.type != ToolType.FUNCTION:
            d.pop("function")
        return d


class AssistantToolCall(BaseModel):
    id: str
    type: ToolType
    function: LLMFunctionCall


class RunStatus(str, Enum):
    QUEUED = "queued"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    REQUIRES_ACTION = "requires_action"
    EXPIRED = "expired"
    CANCELLING = "cancelling"
    CANCELLED = "cancelled"
    FAILED = "failed"
    TIMEOUT = "timeout"


class OpenAIAssistantConfig(ChatAgentConfig):
    use_cached_assistant: bool = False  # set in script via user dialog
    assistant_id: str | None = None
    use_tools = False
    use_functions_api = True
    use_cached_thread: bool = False  # set in script via user dialog
    thread_id: str | None = None
    # set to True once we can add Assistant msgs in threads
    cache_responses: bool = True
    timeout: int = 30  # can be different from llm.timeout
    llm = OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT4o)
    tools: List[AssistantTool] = []
    files: List[str] = []


class OpenAIAssistant(ChatAgent):
    """
    A ChatAgent powered by OpenAI Assistant API:
    mainly, in `llm_response` method, we avoid maintaining conversation state,
    and instead let the Assistant API do it for us.
    Also handles persistent storage of Assistant and Threads:
    stores their ids (for given user, org) in a cache, and
    reuses them based on config.use_cached_assistant and config.use_cached_thread.

    This class can be used as a drop-in replacement for ChatAgent.
    """

    def __init__(self, config: OpenAIAssistantConfig):
        super().__init__(config)
        self.config: OpenAIAssistantConfig = config
        self.llm: OpenAIGPT = OpenAIGPT(self.config.llm)
        assert (
            self.llm.cache is not None
        ), "OpenAIAssistant requires a cache to store Assistant and Thread ids"

        if not isinstance(self.llm.client, openai.OpenAI):
            raise ValueError("Client must be OpenAI")
        # handles for various entities and methods
        self.client: openai.OpenAI = self.llm.client
        self.runs = self.client.beta.threads.runs
        self.threads = self.client.beta.threads
        self.thread_messages = self.client.beta.threads.messages
        self.assistants = self.client.beta.assistants
        # which tool_ids are awaiting output submissions
        self.pending_tool_ids: List[str] = []
        self.cached_tool_ids: List[str] = []

        self.thread: Thread | None = None
        self.assistant: Assistant | None = None
        self.run: Run | None = None

        self._maybe_create_assistant(self.config.assistant_id)
        self._maybe_create_thread(self.config.thread_id)
        self._cache_store()

        self.add_assistant_files(self.config.files)
        self.add_assistant_tools(self.config.tools)

    def add_assistant_files(self, files: List[str]) -> None:
        """Add file_ids to assistant"""
        if self.assistant is None:
            raise ValueError("Assistant is None")
        self.files = [
            self.client.files.create(file=open(f, "rb"), purpose="assistants")
            for f in files
        ]
        self.config.files = list(set(self.config.files + files))
        self.assistant = self.assistants.update(
            self.assistant.id,
            tool_resources=ToolResources(
                code_interpreter=ToolResourcesCodeInterpreter(
                    file_ids=[f.id for f in self.files],
                ),
            ),
        )

    def add_assistant_tools(self, tools: List[AssistantTool]) -> None:
        """Add tools to assistant"""
        if self.assistant is None:
            raise ValueError("Assistant is None")
        all_tool_dicts = [t.dct() for t in self.config.tools]
        for t in tools:
            if t.dct() not in all_tool_dicts:
                self.config.tools.append(t)
        self.assistant = self.assistants.update(
            self.assistant.id,
            tools=[tool.dct() for tool in self.config.tools],  # type: ignore
        )

    def enable_message(
        self,
        message_class: Optional[Type[ToolMessage] | List[Type[ToolMessage]]],
        use: bool = True,
        handle: bool = True,
        force: bool = False,
        require_recipient: bool = False,
        include_defaults: bool = True,
    ) -> None:
        """Override ChatAgent's method: extract the function-related args.
        See that method for details. But specifically about the `include_defaults` arg:
        Normally the OpenAI completion API ignores these fields, but the Assistant
        fn-calling seems to pay attn to these, and if we don't want this,
        we should set this to False.
        """
        if message_class is not None and isinstance(message_class, list):
            for msg_class in message_class:
                self.enable_message(
                    msg_class,
                    use=use,
                    handle=handle,
                    force=force,
                    require_recipient=require_recipient,
                    include_defaults=include_defaults,
                )
            return
        super().enable_message(
            message_class,
            use=use,
            handle=handle,
            force=force,
            require_recipient=require_recipient,
            include_defaults=include_defaults,
        )
        if message_class is None or not use:
            # no specific msg class, or
            # we are not enabling USAGE/GENERATION of this tool/fn,
            # then there's no need to attach the fn to the assistant
            # (HANDLING the fn will still work via self.agent_response)
            return
        if self.config.use_tools:
            sys_msg = self._create_system_and_tools_message()
            self.set_system_message(sys_msg.content)
        if not self.config.use_functions_api:
            return
        functions, _, _, _, _ = self._function_args()
        if functions is None:
            return
        # add the functions to the assistant:
        if self.assistant is None:
            raise ValueError("Assistant is None")
        tools = self.assistant.tools
        tools.extend(
            [
                {
                    "type": "function",  # type: ignore
                    "function": f.dict(),
                }
                for f in functions
            ]
        )
        self.assistant = self.assistants.update(
            self.assistant.id,
            tools=tools,  # type: ignore
        )

    def _cache_thread_key(self) -> str:
        """Key to use for caching or retrieving thread id"""
        org = self.client.organization or ""
        uid = generate_user_id(org)
        name = self.config.name
        return "Thread:" + name + ":" + uid

    def _cache_assistant_key(self) -> str:
        """Key to use for caching or retrieving assistant id"""
        org = self.client.organization or ""
        uid = generate_user_id(org)
        name = self.config.name
        return "Assistant:" + name + ":" + uid

    @no_type_check
    def _cache_messages_key(self) -> str:
        """Key to use when caching or retrieving thread messages"""
        if self.thread is None:
            raise ValueError("Thread is None")
        return "Messages:" + self.thread.metadata["hash"]

    @no_type_check
    def _cache_thread_lookup(self) -> str | None:
        """Try to retrieve cached thread_id associated with
        this user + machine + organization"""
        key = self._cache_thread_key()
        if self.llm.cache is None:
            return None
        return self.llm.cache.retrieve(key)

    @no_type_check
    def _cache_assistant_lookup(self) -> str | None:
        """Try to retrieve cached assistant_id associated with
        this user + machine + organization"""
        if self.llm.cache is None:
            return None
        key = self._cache_assistant_key()
        return self.llm.cache.retrieve(key)

    @no_type_check
    def _cache_messages_lookup(self) -> LLMResponse | None:
        """Try to retrieve cached response for the message-list-hash"""
        if not settings.cache or self.llm.cache is None:
            return None
        key = self._cache_messages_key()
        cached_dict = self.llm.cache.retrieve(key)
        if cached_dict is None:
            return None
        return LLMResponse.parse_obj(cached_dict)

    def _cache_store(self) -> None:
        """
        Cache the assistant_id, thread_id associated with
        this user + machine + organization
        """
        if self.llm.cache is None:
            return
        if self.thread is None or self.assistant is None:
            raise ValueError("Thread or Assistant is None")
        thread_key = self._cache_thread_key()
        self.llm.cache.store(thread_key, self.thread.id)

        assistant_key = self._cache_assistant_key()
        self.llm.cache.store(assistant_key, self.assistant.id)

    @staticmethod
    def thread_msg_to_llm_msg(msg: Message) -> LLMMessage:
        """
        Convert a Message to an LLMMessage
        """
        return LLMMessage(
            content=msg.content[0].text.value,  # type: ignore
            role=Role(msg.role),
        )

    def _update_messages_hash(self, msg: Message | LLMMessage) -> None:
        """
        Update the hash-state in the thread with the given message.
        """
        if self.thread is None:
            raise ValueError("Thread is None")
        if isinstance(msg, Message):
            llm_msg = self.thread_msg_to_llm_msg(msg)
        else:
            llm_msg = msg
        hash = self.thread.metadata["hash"]  # type: ignore
        most_recent_msg = llm_msg.content
        most_recent_role = llm_msg.role
        hash = update_hash(hash, f"{most_recent_role}:{most_recent_msg}")
        # TODO is this inplace?
        self.thread = self.threads.update(
            self.thread.id,
            metadata={
                "hash": hash,
            },
        )
        assert self.thread.metadata["hash"] == hash  # type: ignore

    def _maybe_create_thread(self, id: str | None = None) -> None:
        """Retrieve or create a thread if one does not exist,
        or retrieve it from cache"""
        if id is not None:
            try:
                self.thread = self.threads.retrieve(thread_id=id)
            except Exception:
                logger.warning(
                    f"""
                    Could not retrieve thread with id {id}, 
                    so creating a new one.
                    """
                )
                self.thread = None
            if self.thread is not None:
                return
        cached = self._cache_thread_lookup()
        if cached is not None:
            if self.config.use_cached_thread:
                self.thread = self.client.beta.threads.retrieve(thread_id=cached)
            else:
                logger.warning(
                    f"""
                    Found cached thread id {cached}, 
                    but config.use_cached_thread = False, so deleting it.
                    """
                )
                try:
                    self.client.beta.threads.delete(thread_id=cached)
                except Exception:
                    logger.warning(
                        f"""
                        Could not delete thread with id {cached}, ignoring. 
                        """
                    )
                if self.llm.cache is not None:
                    self.llm.cache.delete_keys([self._cache_thread_key()])
        if self.thread is None:
            if self.assistant is None:
                raise ValueError("Assistant is None")
            self.thread = self.client.beta.threads.create()
            hash_key_str = (
                (self.assistant.instructions or "")
                + str(self.config.use_tools)
                + str(self.config.use_functions_api)
            )
            hash_hex = update_hash(None, s=hash_key_str)
            self.thread = self.threads.update(
                self.thread.id,
                metadata={
                    "hash": hash_hex,
                },
            )
            assert self.thread.metadata["hash"] == hash_hex  # type: ignore

    def _maybe_create_assistant(self, id: str | None = None) -> None:
        """Retrieve or create an assistant if one does not exist,
        or retrieve it from cache"""
        if id is not None:
            try:
                self.assistant = self.assistants.retrieve(assistant_id=id)
            except Exception:
                logger.warning(
                    f"""
                    Could not retrieve assistant with id {id}, 
                    so creating a new one.
                    """
                )
                self.assistant = None
            if self.assistant is not None:
                return
        cached = self._cache_assistant_lookup()
        if cached is not None:
            if self.config.use_cached_assistant:
                self.assistant = self.client.beta.assistants.retrieve(
                    assistant_id=cached
                )
            else:
                logger.warning(
                    f"""
                    Found cached assistant id {cached}, 
                    but config.use_cached_assistant = False, so deleting it.
                    """
                )
                try:
                    self.client.beta.assistants.delete(assistant_id=cached)
                except Exception:
                    logger.warning(
                        f"""
                        Could not delete assistant with id {cached}, ignoring. 
                        """
                    )
                if self.llm.cache is not None:
                    self.llm.cache.delete_keys([self._cache_assistant_key()])
        if self.assistant is None:
            self.assistant = self.client.beta.assistants.create(
                name=self.config.name,
                instructions=self.config.system_message,
                tools=[],
                model=self.config.llm.chat_model,
            )

    def _get_run(self) -> Run:
        """Retrieve the run object associated with this thread and run,
        to see its latest status.
        """
        if self.thread is None or self.run is None:
            raise ValueError("Thread or Run is None")
        return self.runs.retrieve(thread_id=self.thread.id, run_id=self.run.id)

    def _get_run_steps(self) -> List[RunStep]:
        if self.thread is None or self.run is None:
            raise ValueError("Thread or Run is None")
        result = self.runs.steps.list(thread_id=self.thread.id, run_id=self.run.id)
        if result is None:
            return []
        return result.data

    def _get_code_logs(self) -> List[Tuple[str, str]]:
        """
        Get list of input, output strings from code logs
        """
        run_steps = self._get_run_steps()
        # each step may have multiple tool-calls,
        # each tool-call may have multiple outputs
        tool_calls = [  # list of list of tool-calls
            s.step_details.tool_calls
            for s in run_steps
            if s.step_details is not None and hasattr(s.step_details, "tool_calls")
        ]
        code_logs = []
        for tcl in tool_calls:  # each tool-call-list
            for tc in tcl:
                if tc is None or tc.type != ToolType.CODE_INTERPRETER:
                    continue
                io = tc.code_interpreter  # type: ignore
                input = io.input
                # TODO for CodeInterpreterOutputImage, there is no "logs"
                # revisit when we handle images.
                outputs = "\n\n".join(
                    o.logs
                    for o in io.outputs
                    if o.type == "logs" and hasattr(o, "logs")
                )
                code_logs.append((input, outputs))
        # return the reversed list, since they are stored in reverse chron order
        return code_logs[::-1]

    def _get_code_logs_str(self) -> str:
        """
        Get string representation of code logs
        """
        code_logs = self._get_code_logs()
        return "\n\n".join(
            f"INPUT:\n{input}\n\nOUTPUT:\n{output}" for input, output in code_logs
        )

    def _add_thread_message(self, msg: str, role: Role) -> None:
        """
        Add a message with the given role to the thread.
        Args:
            msg (str): message to add
            role (Role): role of the message
        """
        if self.thread is None:
            raise ValueError("Thread is None")
        # CACHING TRICK! Since the API only allows inserting USER messages,
        # we prepend the role to the message, so that we can store ASSISTANT msgs
        # as well! When the LLM sees the thread messages, they will contain
        # the right sequence of alternating roles, so that it has no trouble
        # responding when it is its turn.
        msg = f"{role.value.upper()}: {msg}"
        thread_msg = self.thread_messages.create(
            content=msg,
            thread_id=self.thread.id,
            # We ALWAYS store user role since only user role allowed currently
            role=Role.USER.value,
        )
        self._update_messages_hash(thread_msg)

    def _get_thread_messages(self, n: int = 20) -> List[LLMMessage]:
        """
        Get the last n messages in the thread, in cleaned-up form (LLMMessage).
        Args:
            n (int): number of messages to retrieve
        Returns:
            List[LLMMessage]: list of messages
        """
        if self.thread is None:
            raise ValueError("Thread is None")
        result = self.thread_messages.list(
            thread_id=self.thread.id,
            limit=n,
        )
        num = len(result.data)
        if result.has_more and num < n:  # type: ignore
            logger.warning(f"Retrieving last {num} messages, but there are more")
        thread_msgs = result.data
        for msg in thread_msgs:
            self.process_citations(msg)
        return [
            LLMMessage(
                # TODO: could be image, deal with it later
                content=m.content[0].text.value,  # type: ignore
                role=Role(m.role),
            )
            for m in thread_msgs
        ]

    def _wait_for_run(
        self,
        until_not: List[RunStatus] = [RunStatus.QUEUED, RunStatus.IN_PROGRESS],
        until: List[RunStatus] = [],
        timeout: int = 30,
    ) -> RunStatus:
        """
        Poll the run until it either:
        - EXITs the statuses specified in `until_not`, or
        - ENTERs the statuses specified in `until`, or
        """
        if self.thread is None or self.run is None:
            raise ValueError("Thread or Run is None")
        while True:
            run = self._get_run()
            if run.status not in until_not or run.status in until:
                return cast(RunStatus, run.status)
            time.sleep(1)
            timeout -= 1
            if timeout <= 0:
                return cast(RunStatus, RunStatus.TIMEOUT)

    async def _wait_for_run_async(
        self,
        until_not: List[RunStatus] = [RunStatus.QUEUED, RunStatus.IN_PROGRESS],
        until: List[RunStatus] = [],
        timeout: int = 30,
    ) -> RunStatus:
        """Async version of _wait_for_run"""
        if self.thread is None or self.run is None:
            raise ValueError("Thread or Run is None")
        while True:
            run = self._get_run()
            if run.status not in until_not or run.status in until:
                return cast(RunStatus, run.status)
            await asyncio.sleep(1)
            timeout -= 1
            if timeout <= 0:
                return cast(RunStatus, RunStatus.TIMEOUT)

    def set_system_message(self, msg: str) -> None:
        """
        Override ChatAgent's method.
        The Task may use this method to set the system message
        of the chat assistant.
        """
        super().set_system_message(msg)
        if self.assistant is None:
            raise ValueError("Assistant is None")
        self.assistant = self.assistants.update(self.assistant.id, instructions=msg)

    def _start_run(self) -> None:
        """
        Run the assistant on the thread.
        """
        if self.thread is None or self.assistant is None:
            raise ValueError("Thread or Assistant is None")
        self.run = self.runs.create(
            thread_id=self.thread.id,
            assistant_id=self.assistant.id,
        )

    def _run_result(self) -> LLMResponse:
        """Result from run completed on the thread."""
        status = self._wait_for_run(
            timeout=self.config.timeout,
        )
        return self._process_run_result(status)

    async def _run_result_async(self) -> LLMResponse:
        """(Async) Result from run completed on the thread."""
        status = await self._wait_for_run_async(
            timeout=self.config.timeout,
        )
        return self._process_run_result(status)

    def _process_run_result(self, status: RunStatus) -> LLMResponse:
        """Process the result of the run."""
        function_call: LLMFunctionCall | None = None
        response = ""
        tool_id = ""
        # IMPORTANT: FIRST save hash key to store result,
        # before it gets updated with the response
        key = self._cache_messages_key()
        if status == RunStatus.TIMEOUT:
            logger.warning("Timeout waiting for run to complete, return empty string")
        elif status == RunStatus.COMPLETED:
            messages = self._get_thread_messages(n=1)
            response = messages[0].content
            # update hash to include the response.
            self._update_messages_hash(messages[0])
        elif status == RunStatus.REQUIRES_ACTION:
            tool_calls = self._parse_run_required_action()
            # pick the FIRST tool call with type "function"
            tool_call_fn = [t for t in tool_calls if t.type == ToolType.FUNCTION][0]
            # TODO Handling only first tool/fn call for now
            # revisit later: multi-tools affects the task.run() loop.
            function_call = tool_call_fn.function
            tool_id = tool_call_fn.id
        result = LLMResponse(
            message=response,
            tool_id=tool_id,
            function_call=function_call,
            usage=None,  # TODO
            cached=False,  # TODO - revisit when able to insert Assistant responses
        )
        if self.llm.cache is not None:
            self.llm.cache.store(key, result.dict())
        return result

    def _parse_run_required_action(self) -> List[AssistantToolCall]:
        """
        Parse the required_action field of the run, i.e. get the list of tool calls.
        Currently only tool calls are supported.
        """
        # see https://platform.openai.com/docs/assistants/tools/function-calling
        run = self._get_run()
        if run.status != RunStatus.REQUIRES_ACTION:  # type: ignore
            return []

        if (action := run.required_action.type) != "submit_tool_outputs":
            raise ValueError(f"Unexpected required_action type {action}")
        tool_calls = run.required_action.submit_tool_outputs.tool_calls
        return [
            AssistantToolCall(
                id=tool_call.id,
                type=ToolType(tool_call.type),
                function=LLMFunctionCall.from_dict(tool_call.function.model_dump()),
            )
            for tool_call in tool_calls
        ]

    def _submit_tool_outputs(self, msg: LLMMessage) -> None:
        """
        Submit the tool (fn) outputs to the run/thread
        """
        if self.run is None or self.thread is None:
            raise ValueError("Run or Thread is None")
        tool_outputs = [
            {
                "tool_call_id": msg.tool_id,
                "output": msg.content,
            }
        ]
        # run enters queued, in_progress state after this
        self.runs.submit_tool_outputs(
            thread_id=self.thread.id,
            run_id=self.run.id,
            tool_outputs=tool_outputs,  # type: ignore
        )

    def process_citations(self, thread_msg: Message) -> None:
        """
        Process citations in the thread message.
        Modifies the thread message in-place.
        """
        # could there be multiple content items?
        # TODO content could be MessageContentImageFile; handle that later
        annotated_content = thread_msg.content[0].text  # type: ignore
        annotations = annotated_content.annotations
        citations = []
        # Iterate over the annotations and add footnotes
        for index, annotation in enumerate(annotations):
            # Replace the text with a footnote
            annotated_content.value = annotated_content.value.replace(
                annotation.text, f" [{index}]"
            )
            # Gather citations based on annotation attributes
            if file_citation := getattr(annotation, "file_citation", None):
                try:
                    cited_file = self.client.files.retrieve(file_citation.file_id)
                except Exception:
                    logger.warning(
                        f"""
                        Could not retrieve cited file with id {file_citation.file_id}, 
                        ignoring. 
                        """
                    )
                    continue
                citations.append(
                    f"[{index}] '{file_citation.quote}',-- from {cited_file.filename}"
                )
            elif file_path := getattr(annotation, "file_path", None):
                cited_file = self.client.files.retrieve(file_path.file_id)
                citations.append(
                    f"[{index}] Click <here> to download {cited_file.filename}"
                )
            # Note: File download functionality not implemented above for brevity
        sep = "\n" if len(citations) > 0 else ""
        annotated_content.value += sep + "\n".join(citations)

    def _llm_response_preprocess(
        self,
        message: Optional[str | ChatDocument] = None,
    ) -> LLMResponse | None:
        """
        Preprocess message and return response if found in cache, else None.
        """
        is_tool_output = False
        if message is not None:
            # note: to_LLMMessage returns a list of LLMMessage,
            # which is allowed to have len > 1, in case the msg
            # represents results of multiple (non-assistant) tool-calls.
            # But for OAI Assistant, we only assume exactly one tool-call at a time.
            # TODO look into multi-tools
            llm_msg = ChatDocument.to_LLMMessage(message)[0]
            tool_id = llm_msg.tool_id
            if tool_id in self.pending_tool_ids:
                if isinstance(message, ChatDocument):
                    message.pop_tool_ids()
                result_msg = f"Result for Tool_id {tool_id}: {llm_msg.content}"
                if tool_id in self.cached_tool_ids:
                    self.cached_tool_ids.remove(tool_id)
                    # add actual result of cached fn-call
                    self._add_thread_message(result_msg, role=Role.USER)
                else:
                    is_tool_output = True
                    # submit tool/fn result to the thread/run
                    self._submit_tool_outputs(llm_msg)
                    # We cannot ACTUALLY add this result to thread now
                    # since run is in `action_required` state,
                    # so we just update the message hash
                    self._update_messages_hash(
                        LLMMessage(content=result_msg, role=Role.USER)
                    )
                self.pending_tool_ids.remove(tool_id)
            else:
                # add message to the thread
                self._add_thread_message(llm_msg.content, role=Role.USER)

        # When message is None, the thread may have no user msgs,
        # Note: system message is NOT placed in the thread by the OpenAI system.

        # check if we have cached the response.
        # TODO: handle the case of structured result (fn-call, tool, etc)
        response = self._cache_messages_lookup()
        if response is not None:
            response.cached = True
            # store the result in the thread so
            # it looks like assistant produced it
            if self.config.cache_responses:
                self._add_thread_message(
                    json.dumps(response.dict()), role=Role.ASSISTANT
                )
            return response  # type: ignore
        else:
            # create a run for this assistant on this thread,
            # i.e. actually "run"
            if not is_tool_output:
                # DO NOT start a run if we submitted tool outputs,
                # since submission of tool outputs resumes a run from
                # status = "requires_action"
                self._start_run()
            return None

    def _llm_response_postprocess(
        self,
        response: LLMResponse,
        cached: bool,
        message: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        # code from ChatAgent.llm_response_messages
        if response.function_call is not None:
            self.pending_tool_ids += [response.tool_id]
            if cached:
                # add to cached tools list so we don't create an Assistant run
                # in _llm_response_preprocess
                self.cached_tool_ids += [response.tool_id]
            response_str = str(response.function_call)
        else:
            response_str = response.message
        cache_str = "[red](cached)[/red]" if cached else ""
        if not settings.quiet:
            if not cached and self._get_code_logs_str():
                print(
                    f"[magenta]CODE-INTERPRETER LOGS:\n"
                    "-------------------------------\n"
                    f"{self._get_code_logs_str()}[/magenta]"
                )
            print(f"{cache_str}[green]" + response_str + "[/green]")
        cdoc = ChatDocument.from_LLMResponse(response, displayed=False)
        # Note message.metadata.tool_ids may have been popped above
        tool_ids = (
            []
            if (message is None or isinstance(message, str))
            else message.metadata.tool_ids
        )

        if response.tool_id != "":
            tool_ids.append(response.tool_id)
        cdoc.metadata.tool_ids = tool_ids
        return cdoc

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        """
        Override ChatAgent's method: this is the main LLM response method.
        In the ChatAgent, this updates `self.message_history` and then calls
        `self.llm_response_messages`, but since we are relying on the Assistant API
        to maintain conversation state, this method is simpler: Simply start a run
        on the message-thread, and wait for it to complete.

        Args:
            message (Optional[str | ChatDocument], optional): message to respond to
                (if absent, the LLM response will be based on the
                instructions in the system_message). Defaults to None.
        Returns:
            Optional[ChatDocument]: LLM response
        """
        response = self._llm_response_preprocess(message)
        cached = True
        if response is None:
            cached = False
            response = self._run_result()
        return self._llm_response_postprocess(response, cached=cached, message=message)

    async def llm_response_async(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        """
        Async version of llm_response.
        """
        response = self._llm_response_preprocess(message)
        cached = True
        if response is None:
            cached = False
            response = await self._run_result_async()
        return self._llm_response_postprocess(response, cached=cached, message=message)

    def agent_response(
        self,
        msg: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        response = super().agent_response(msg)
        if msg is None:
            return response
        if response is None:
            return None
        try:
            # When the agent response is to a tool message,
            # we prefix it with "TOOL Result: " so that it is clear to the
            # LLM that this is the result of the last TOOL;
            # This ensures our caching trick works.
            if self.config.use_tools and len(self.get_tool_messages(msg)) > 0:
                response.content = "TOOL Result: " + response.content
            return response
        except Exception:
            return response
</file>

<file path="langroid/agent/tool_message.py">
"""
Structured messages to an agent, typically from an LLM, to be handled by
an agent. The messages could represent, for example:
- information or data given to the agent
- request for information or data from the agent
- request to run a method of the agent
"""

import copy
import json
import textwrap
from abc import ABC
from random import choice
from typing import Any, Dict, List, Optional, Tuple, Type, TypeVar

from docstring_parser import parse

from langroid.language_models.base import LLMFunctionSpec
from langroid.pydantic_v1 import BaseModel, Extra
from langroid.utils.pydantic_utils import (
    _recursive_purge_dict_key,
    generate_simple_schema,
)
from langroid.utils.types import is_instance_of

K = TypeVar("K")


def remove_if_exists(k: K, d: dict[K, Any]) -> None:
    """Removes key `k` from `d` if present."""
    if k in d:
        d.pop(k)


def format_schema_for_strict(schema: Any) -> None:
    """
    Recursively set additionalProperties to False and replace
    oneOf and allOf with anyOf, required for OpenAI structured outputs.
    Additionally, remove all defaults and set all fields to required.
    This may not be equivalent to the original schema.
    """
    if isinstance(schema, dict):
        if "type" in schema and schema["type"] == "object":
            schema["additionalProperties"] = False

            if "properties" in schema:
                properties = schema["properties"]
                all_properties = list(properties.keys())
                for k, v in properties.items():
                    if "default" in v:
                        if k == "request":
                            v["enum"] = [v["default"]]

                        v.pop("default")
                schema["required"] = all_properties
            else:
                schema["properties"] = {}
                schema["required"] = []

        anyOf = (
            schema.get("oneOf", []) + schema.get("allOf", []) + schema.get("anyOf", [])
        )
        if "allOf" in schema or "oneOf" in schema or "anyOf" in schema:
            schema["anyOf"] = anyOf

        remove_if_exists("allOf", schema)
        remove_if_exists("oneOf", schema)

        for v in schema.values():
            format_schema_for_strict(v)
    elif isinstance(schema, list):
        for v in schema:
            format_schema_for_strict(v)


class ToolMessage(ABC, BaseModel):
    """
    Abstract Class for a class that defines the structure of a "Tool" message from an
    LLM. Depending on context, "tools" are also referred to as "plugins",
    or "function calls" (in the context of OpenAI LLMs).
    Essentially, they are a way for the LLM to express its intent to run a special
    function or method. Currently these "tools" are handled by methods of the
    agent.

    Attributes:
        request (str): name of agent method to map to.
        purpose (str): purpose of agent method, expressed in general terms.
            (This is used when auto-generating the tool instruction to the LLM)
    """

    request: str
    purpose: str
    id: str = ""  # placeholder for OpenAI-API tool_call_id

    # If enabled, forces strict adherence to schema.
    # Currently only supported by OpenAI LLMs. When unset, enables if supported.
    _strict: Optional[bool] = None
    _allow_llm_use: bool = True  # allow an LLM to use (i.e. generate) this tool?

    # Optional param to limit number of result tokens to retain in msg history.
    # Some tools can have large results that we may not want to fully retain,
    # e.g. result of a db query, which the LLM later reduces to a summary, so
    # in subsequent dialog we may only want to retain the summary,
    # and replace this raw result truncated to _max_retained_tokens.
    # Important to note: unlike _max_result_tokens, this param is used
    # NOT used to immediately truncate the result;
    # it is only used to truncate what is retained in msg history AFTER the
    # response to this result.
    _max_retained_tokens: int | None = None

    # Optional param to limit number of tokens in the result of the tool.
    _max_result_tokens: int | None = None

    class Config:
        extra = Extra.allow
        arbitrary_types_allowed = False
        validate_all = True
        validate_assignment = True
        # do not include these fields in the generated schema
        # since we don't require the LLM to specify them
        schema_extra = {"exclude": {"purpose", "id"}}

    @classmethod
    def name(cls) -> str:
        return str(cls.default_value("request"))  # redundant str() to appease mypy

    @classmethod
    def instructions(cls) -> str:
        """
        Instructions on tool usage.
        """
        return ""

    @classmethod
    def langroid_tools_instructions(cls) -> str:
        """
        Instructions on tool usage when `use_tools == True`, i.e.
        when using langroid built-in tools
        (as opposed to OpenAI-like function calls/tools).
        """
        return """
        IMPORTANT: When using this or any other tool/function, you MUST include a 
        `request` field and set it equal to the FUNCTION/TOOL NAME you intend to use.
        """

    @classmethod
    def require_recipient(cls) -> Type["ToolMessage"]:
        class ToolMessageWithRecipient(cls):  # type: ignore
            recipient: str  # no default, so it is required

        return ToolMessageWithRecipient

    @classmethod
    def examples(cls) -> List["ToolMessage" | Tuple[str, "ToolMessage"]]:
        """
        Examples to use in few-shot demos with formatting instructions.
        Each example can be either:
        - just a ToolMessage instance, e.g. MyTool(param1=1, param2="hello"), or
        - a tuple (description, ToolMessage instance), where the description is
            a natural language "thought" that leads to the tool usage,
            e.g. ("I want to find the square of 5",  SquareTool(num=5))
            In some scenarios, including such a description can significantly
            enhance reliability of tool use.
        Returns:
        """
        return []

    @classmethod
    def usage_examples(cls, random: bool = False) -> str:
        """
        Instruction to the LLM showing examples of how to use the tool-message.

        Args:
            random (bool): whether to pick a random example from the list of examples.
                Set to `true` when using this to illustrate a dialog between LLM and
                user.
                (if false, use ALL examples)
        Returns:
            str: examples of how to use the tool/function-call
        """
        # pick a random example of the fields
        if len(cls.examples()) == 0:
            return ""
        if random:
            examples = [choice(cls.examples())]
        else:
            examples = cls.examples()
        formatted_examples = [
            (
                f"EXAMPLE {i}: (THOUGHT: {ex[0]}) => \n{ex[1].format_example()}"
                if isinstance(ex, tuple)
                else f"EXAMPLE {i}:\n {ex.format_example()}"
            )
            for i, ex in enumerate(examples, 1)
        ]
        return "\n\n".join(formatted_examples)

    def to_json(self) -> str:
        return self.json(indent=4, exclude=self.Config.schema_extra["exclude"])

    def format_example(self) -> str:
        return self.json(indent=4, exclude=self.Config.schema_extra["exclude"])

    def dict_example(self) -> Dict[str, Any]:
        return self.dict(exclude=self.Config.schema_extra["exclude"])

    def get_value_of_type(self, target_type: Type[Any]) -> Any:
        """Try to find a value of a desired type in the fields of the ToolMessage."""
        ignore_fields = self.Config.schema_extra["exclude"].union(["request"])
        for field_name in set(self.dict().keys()) - ignore_fields:
            value = getattr(self, field_name)
            if is_instance_of(value, target_type):
                return value
        return None

    @classmethod
    def default_value(cls, f: str) -> Any:
        """
        Returns the default value of the given field, for the message-class
        Args:
            f (str): field name

        Returns:
            Any: default value of the field, or None if not set or if the
                field does not exist.
        """
        schema = cls.schema()
        properties = schema["properties"]
        return properties.get(f, {}).get("default", None)

    @classmethod
    def format_instructions(cls, tool: bool = False) -> str:
        """
        Default Instructions to the LLM showing how to use the tool/function-call.
        Works for GPT4 but override this for weaker LLMs if needed.

        Args:
            tool: instructions for Langroid-native tool use? (e.g. for non-OpenAI LLM)
                (or else it would be for OpenAI Function calls).
                Ignored in the default implementation, but can be used in subclasses.
        Returns:
            str: instructions on how to use the message
        """
        # TODO: when we attempt to use a "simpler schema"
        # (i.e. all nested fields explicit without definitions),
        # we seem to get worse results, so we turn it off for now
        param_dict = (
            # cls.simple_schema() if tool else
            cls.llm_function_schema(request=True).parameters
        )
        examples_str = ""
        if cls.examples():
            examples_str = "EXAMPLES:\n" + cls.usage_examples()
        return textwrap.dedent(
            f"""
            TOOL: {cls.default_value("request")}
            PURPOSE: {cls.default_value("purpose")} 
            JSON FORMAT: {
                json.dumps(param_dict, indent=4)
            }
            {examples_str}
            """.lstrip()
        )

    @staticmethod
    def group_format_instructions() -> str:
        """Template for instructions for a group of tools.
        Works with GPT4 but override this for weaker LLMs if needed.
        """
        return textwrap.dedent(
            """
            === ALL AVAILABLE TOOLS and THEIR FORMAT INSTRUCTIONS ===
            You have access to the following TOOLS to accomplish your task:

            {format_instructions}
            
            When one of the above TOOLs is applicable, you must express your 
            request as "TOOL:" followed by the request in the above format.
            """
        )

    @classmethod
    def llm_function_schema(
        cls,
        request: bool = False,
        defaults: bool = True,
    ) -> LLMFunctionSpec:
        """
        Clean up the schema of the Pydantic class (which can recursively contain
        other Pydantic classes), to create a version compatible with OpenAI
        Function-call API.

        Adapted from this excellent library:
        https://github.com/jxnl/instructor/blob/main/instructor/function_calls.py

        Args:
            request: whether to include the "request" field in the schema.
                (we set this to True when using Langroid-native TOOLs as opposed to
                OpenAI Function calls)
            defaults: whether to include fields with default values in the schema,
                    in the "properties" section.

        Returns:
            LLMFunctionSpec: the schema as an LLMFunctionSpec

        """
        schema = copy.deepcopy(cls.schema())
        docstring = parse(cls.__doc__ or "")
        parameters = {
            k: v for k, v in schema.items() if k not in ("title", "description")
        }
        for param in docstring.params:
            if (name := param.arg_name) in parameters["properties"] and (
                description := param.description
            ):
                if "description" not in parameters["properties"][name]:
                    parameters["properties"][name]["description"] = description

        excludes = cls.Config.schema_extra["exclude"]
        if not request:
            excludes = excludes.union({"request"})
        # exclude 'excludes' from parameters["properties"]:
        parameters["properties"] = {
            field: details
            for field, details in parameters["properties"].items()
            if field not in excludes and (defaults or details.get("default") is None)
        }
        parameters["required"] = sorted(
            k
            for k, v in parameters["properties"].items()
            if ("default" not in v and k not in excludes)
        )
        if request:
            parameters["required"].append("request")

            # If request is present it must match the default value
            # Similar to defining request as a literal type
            parameters["request"] = {
                "enum": [cls.default_value("request")],
                "type": "string",
            }

        if "description" not in schema:
            if docstring.short_description:
                schema["description"] = docstring.short_description
            else:
                schema["description"] = (
                    f"Correctly extracted `{cls.__name__}` with all "
                    f"the required parameters with correct types"
                )

        # Handle nested ToolMessage fields
        if "definitions" in parameters:
            for v in parameters["definitions"].values():
                if "exclude" in v:
                    v.pop("exclude")

                    remove_if_exists("purpose", v["properties"])
                    remove_if_exists("id", v["properties"])
                    if (
                        "request" in v["properties"]
                        and "default" in v["properties"]["request"]
                    ):
                        if "required" not in v:
                            v["required"] = []
                        v["required"].append("request")
                        v["properties"]["request"] = {
                            "type": "string",
                            "enum": [v["properties"]["request"]["default"]],
                        }

        parameters.pop("exclude")
        _recursive_purge_dict_key(parameters, "title")
        _recursive_purge_dict_key(parameters, "additionalProperties")
        return LLMFunctionSpec(
            name=cls.default_value("request"),
            description=cls.default_value("purpose"),
            parameters=parameters,
        )

    @classmethod
    def simple_schema(cls) -> Dict[str, Any]:
        """
        Return a simplified schema for the message, with only the request and
        required fields.
        Returns:
            Dict[str, Any]: simplified schema
        """
        schema = generate_simple_schema(
            cls,
            exclude=list(cls.Config.schema_extra["exclude"]),
        )
        return schema
</file>

<file path="langroid/agent/xml_tool_message.py">
import re
from collections.abc import Mapping
from typing import Any, Dict, List, Optional, get_args, get_origin

from lxml import etree

from langroid.agent.tool_message import ToolMessage
from langroid.pydantic_v1 import BaseModel


class XMLToolMessage(ToolMessage):
    """
    Abstract class for tools formatted using XML instead of JSON.

    When a subclass defines a field with the attribute `verbatim=True`,
    instructions are sent to the LLM to ensure the field's content is:
        - preserved as is, including whitespace, indents, quotes, newlines, etc
            with no escaping, and
        - enclosed in a CDATA section in the XML output.
    This is useful for LLMs sending code as part of a tool;
    results can be far superior compared to sending code in JSON-formatted tools,
    where code needs to confirm to JSON's strict rules and escaping requirements.
    (see test_xml_tool_message.py for an example).

    """

    request: str
    purpose: str

    _allow_llm_use = True

    class Config(ToolMessage.Config):
        root_element = "tool"

    @classmethod
    def extract_field_values(cls, formatted_string: str) -> Optional[Dict[str, Any]]:
        """
        Extracts field values from an XML-formatted string.

        Args:
            formatted_string (str): The XML-formatted string to parse.

        Returns:
            Optional[Dict[str, Any]]: A dictionary containing the extracted field
                values, where keys are the XML element names and values are their
                corresponding contents.
            Returns None if parsing fails or the root element is not a dictionary.

        Raises:
            etree.XMLSyntaxError: If the input string is not valid XML.
        """
        # SECURITY: Initialize XMLParser with flags to prevent
        # XML External Entity (XXE), billion laughs, and external DTD attacks by
        # disabling entity resolution, DTD loading, and network access;
        # `strip_cdata=False` is needed to preserve
        # content within CDATA sections (e.g., for code).
        parser = etree.XMLParser(
            strip_cdata=False,
            resolve_entities=False,
            load_dtd=False,
            no_network=True,
        )
        root = etree.fromstring(formatted_string.encode("utf-8"), parser=parser)

        def parse_element(element: etree._Element) -> Any:
            # Skip elements starting with underscore
            if element.tag.startswith("_"):
                return {}

            field_info = cls.__fields__.get(element.tag)
            is_verbatim = field_info and field_info.field_info.extra.get(
                "verbatim", False
            )

            if is_verbatim:
                # For code elements, preserve the content as is, including whitespace
                content = element.text if element.text else ""
                # Strip leading and trailing triple backticks if present,
                # accounting for whitespace
                return (
                    content.strip().removeprefix("```").removesuffix("```").strip()
                    if content.strip().startswith("```")
                    and content.strip().endswith("```")
                    else content
                )
            elif len(element) == 0:
                # For non-code leaf elements, strip whitespace
                return element.text.strip() if element.text else ""
            else:
                # For branch elements, handle potential lists or nested structures
                children = [parse_element(child) for child in element]
                if all(child.tag == element[0].tag for child in element):
                    # If all children have the same tag, treat as a list
                    return children
                else:
                    # Otherwise, treat as a dictionary
                    result = {child.tag: parse_element(child) for child in element}
                    # Check if this corresponds to a nested Pydantic model
                    if field_info and issubclass(field_info.type_, BaseModel):
                        return field_info.type_(**result)
                    return result

        result = parse_element(root)
        if not isinstance(result, dict):
            return None
        # Filter out empty dictionaries from skipped underscore fields
        return {k: v for k, v in result.items() if v != {}}

    @classmethod
    def parse(cls, formatted_string: str) -> Optional["XMLToolMessage"]:
        """
        Parses the XML-formatted string and returns an instance of the class.

        Args:
            formatted_string (str): The XML-formatted string to parse.

        Returns:
            Optional["XMLToolMessage"]: An instance of the class if parsing succeeds,
                None otherwise.
        """
        try:
            parsed_data = cls.extract_field_values(formatted_string)
            if parsed_data is None:
                return None

            # Use Pydantic's parse_obj to create and validate the instance
            return cls.parse_obj(parsed_data)
        except Exception as e:
            from langroid.exceptions import XMLException

            raise XMLException(f"Error parsing XML: {str(e)}")

    @classmethod
    def find_verbatim_fields(
        cls, prefix: str = "", parent_cls: Optional["BaseModel"] = None
    ) -> List[str]:
        verbatim_fields = []
        for field_name, field_info in (parent_cls or cls).__fields__.items():
            full_name = f"{prefix}.{field_name}" if prefix else field_name
            if (
                field_info.field_info.extra.get("verbatim", False)
                or field_name == "code"
            ):
                verbatim_fields.append(full_name)
            if issubclass(field_info.type_, BaseModel):
                verbatim_fields.extend(
                    cls.find_verbatim_fields(full_name, field_info.type_)
                )
        return verbatim_fields

    @classmethod
    def format_instructions(cls, tool: bool = False) -> str:
        fields = [
            f
            for f in cls.__fields__.keys()
            if f not in cls.Config.schema_extra.get("exclude", set())
        ]

        instructions = """
        To use this tool, please provide the required information in an XML-like 
        format. Here's how to structure your input:\n\n
        """

        preamble = "Placeholders:\n"
        xml_format = f"Formatting example:\n\n<{cls.Config.root_element}>\n"

        def format_field(
            field_name: str,
            field_type: type,
            indent: str = "",
            path: str = "",
        ) -> None:
            nonlocal preamble, xml_format
            current_path = f"{path}.{field_name}" if path else field_name

            origin = get_origin(field_type)
            args = get_args(field_type)

            if (
                origin is None
                and isinstance(field_type, type)
                and issubclass(field_type, BaseModel)
            ):
                preamble += (
                    f"{field_name.upper()} = [nested structure for {field_name}]\n"
                )
                xml_format += f"{indent}<{field_name}>\n"
                for sub_field, sub_field_info in field_type.__fields__.items():
                    format_field(
                        sub_field,
                        sub_field_info.outer_type_,
                        indent + "  ",
                        current_path,
                    )
                xml_format += f"{indent}</{field_name}>\n"
            elif origin in (list, List) or (field_type is list):
                item_type = args[0] if args else Any
                if isinstance(item_type, type) and issubclass(item_type, BaseModel):
                    preamble += (
                        f"{field_name.upper()} = "
                        f"[list of nested structures for {field_name}]\n"
                    )
                else:
                    preamble += (
                        f"{field_name.upper()} = "
                        f"[list of {getattr(item_type, '__name__', str(item_type))} "
                        f"for {field_name}]\n"
                    )
                xml_format += f"{indent}<{field_name}>\n"
                xml_format += (
                    f"{indent}  <item>"
                    f"[{getattr(item_type, '__name__', str(item_type))} value]"
                    f"</item>\n"
                )
                xml_format += f"{indent}  ...\n"
                xml_format += f"{indent}</{field_name}>\n"
            elif origin in (dict, Dict) or (
                isinstance(field_type, type) and issubclass(field_type, Mapping)
            ):
                key_type, value_type = args if len(args) == 2 else (Any, Any)
                preamble += (
                    f"{field_name.upper()} = "
                    f"[dictionary with "
                    f"{getattr(key_type, '__name__', str(key_type))} keys and "
                    f"{getattr(value_type, '__name__', str(value_type))} values]\n"
                )
                xml_format += f"{indent}<{field_name}>\n"
                xml_format += (
                    f"{indent}  <{getattr(key_type, '__name__', str(key_type))}>"
                    f"[{getattr(value_type, '__name__', str(value_type))} value]"
                    f"</{getattr(key_type, '__name__', str(key_type))}>\n"
                )
                xml_format += f"{indent}  ...\n"
                xml_format += f"{indent}</{field_name}>\n"
            else:
                preamble += f"{field_name.upper()} = [value for {field_name}]\n"
                if current_path in verbatim_fields:
                    xml_format += (
                        f"{indent}<{field_name}>"
                        f"<![CDATA[{{{field_name.upper()}}}]]></{field_name}>\n"
                    )
                else:
                    xml_format += (
                        f"{indent}<{field_name}>"
                        f"{{{field_name.upper()}}}</{field_name}>\n"
                    )

        verbatim_fields = cls.find_verbatim_fields()

        for field in fields:
            field_info = cls.__fields__[field]
            field_type = (
                field_info.outer_type_
            )  # Use outer_type_ to get the actual type including List, etc.
            format_field(field, field_type)

        xml_format += f"</{cls.Config.root_element}>"

        verbatim_alert = ""
        if len(verbatim_fields) > 0:
            verbatim_alert = f"""
            EXTREMELY IMPORTANT: For these fields:
            {', '.join(verbatim_fields)},
            the contents MUST be wrapped in a CDATA section, and the content
            must be written verbatim WITHOUT any modifications or escaping,
            such as spaces, tabs, indents, newlines, quotes, etc.
            """

        examples_str = ""
        if cls.examples():
            examples_str = "EXAMPLES:\n" + cls.usage_examples()

        return f"""
            TOOL: {cls.default_value("request")}
            PURPOSE: {cls.default_value("purpose")} 

            {instructions}
            {preamble}
            {xml_format}

            Make sure to replace the placeholders with actual values 
            when using the tool.                
            {verbatim_alert}            
            {examples_str}
            """.lstrip()

    def format_example(self) -> str:
        """
        Format the current instance as an XML example.

        Returns:
            str: A string representation of the current instance in XML format.

        Raises:
            ValueError: If the result from etree.tostring is not a string.
        """

        def create_element(
            parent: etree._Element, name: str, value: Any, path: str = ""
        ) -> None:
            if value is None:
                return

            elem = etree.SubElement(parent, name)
            current_path = f"{path}.{name}" if path else name

            if isinstance(value, list):
                for item in value:
                    create_element(elem, "item", item, current_path)
            elif isinstance(value, dict):
                for k, v in value.items():
                    create_element(elem, k, v, current_path)
            elif isinstance(value, BaseModel):
                # Handle nested Pydantic models
                for field_name, field_value in value.dict().items():
                    create_element(elem, field_name, field_value, current_path)
            else:
                if current_path in self.__class__.find_verbatim_fields():
                    elem.text = etree.CDATA(str(value))
                else:
                    elem.text = str(value)

        root = etree.Element(self.Config.root_element)
        exclude_fields = self.Config.schema_extra.get("exclude", set())
        for name, value in self.dict().items():
            if name not in exclude_fields:
                create_element(root, name, value)

        result = etree.tostring(root, encoding="unicode", pretty_print=True)
        if not isinstance(result, str):
            raise ValueError("Unexpected non-string result from etree.tostring")
        return result

    @classmethod
    def find_candidates(cls, text: str) -> List[str]:
        """
        Finds XML-like tool message candidates in text, with relaxed opening tag rules.

        Args:
            text: Input text to search for XML structures.

        Returns:
            List of XML strings. For fragments missing the root opening tag but having
            valid XML structure and root closing tag, prepends the root opening tag.

        Example:
            With root_tag="tool", given:
            "Hello <field1>data</field1> </tool>"
            Returns: ["<tool><field1>data</field1></tool>"]
        """

        root_tag = cls.Config.root_element
        opening_tag = f"<{root_tag}>"
        closing_tag = f"</{root_tag}>"

        candidates = []
        pos = 0
        while True:
            # Look for either proper opening tag or closing tag
            start_normal = text.find(opening_tag, pos)
            end = text.find(closing_tag, pos)

            if start_normal == -1 and end == -1:
                break

            if start_normal != -1:
                # Handle normal case (has opening tag)
                end = text.find(closing_tag, start_normal)
                if end != -1:
                    candidates.append(text[start_normal : end + len(closing_tag)])
                    pos = max(end + len(closing_tag), start_normal + 1)
                    continue
                elif start_normal == text.rfind(opening_tag):
                    # last fragment - ok to miss closing tag
                    candidates.append(text[start_normal:] + closing_tag)
                    return candidates
                else:
                    pos = start_normal + 1
                    continue

            if end != -1:
                # Look backwards for first XML tag
                text_before = text[pos:end]
                first_tag_match = re.search(r"<\w+>", text_before)
                if first_tag_match:
                    start = pos + first_tag_match.start()
                    candidates.append(
                        opening_tag + text[start : end + len(closing_tag)]
                    )
                pos = end + len(closing_tag)

        return candidates
</file>

<file path="langroid/cachedb/__init__.py">
from . import base

from . import redis_cachedb

__all__ = [
    "base",
    "redis_cachedb",
]
</file>

<file path="langroid/cachedb/base.py">
from abc import ABC, abstractmethod
from typing import Any, Dict, List

from langroid.pydantic_v1 import BaseSettings


class CacheDBConfig(BaseSettings):
    """Configuration model for CacheDB."""

    pass


class CacheDB(ABC):
    """Abstract base class for a cache database."""

    @abstractmethod
    def store(self, key: str, value: Any) -> None:
        """
        Abstract method to store a value associated with a key.

        Args:
            key (str): The key under which to store the value.
            value (Any): The value to store.
        """
        pass

    @abstractmethod
    def retrieve(self, key: str) -> Dict[str, Any] | str | None:
        """
        Abstract method to retrieve the value associated with a key.

        Args:
            key (str): The key to retrieve the value for.

        Returns:
            dict: The value associated with the key.
        """
        pass

    @abstractmethod
    def delete_keys(self, keys: List[str]) -> None:
        """
        Delete the keys from the cache.

        Args:
            keys (List[str]): The keys to delete.
        """
        pass

    @abstractmethod
    def delete_keys_pattern(self, pattern: str) -> None:
        """
        Delete all keys with the given pattern

        Args:
            prefix (str): The pattern to match.
        """
        pass
</file>

<file path="langroid/cachedb/redis_cachedb.py">
import json
import logging
import os
from contextlib import AbstractContextManager, contextmanager
from typing import Any, Dict, List, TypeVar

import fakeredis
import redis
from dotenv import load_dotenv

from langroid.cachedb.base import CacheDB, CacheDBConfig

T = TypeVar("T", bound="RedisCache")
logger = logging.getLogger(__name__)


class RedisCacheConfig(CacheDBConfig):
    """Configuration model for RedisCache."""

    fake: bool = False


class RedisCache(CacheDB):
    """Redis implementation of the CacheDB."""

    _warned_password: bool = False

    def __init__(self, config: RedisCacheConfig):
        """
        Initialize a RedisCache with the given config.

        Args:
            config (RedisCacheConfig): The configuration to use.
        """
        self.config = config
        load_dotenv()

        if self.config.fake:
            self.pool = fakeredis.FakeStrictRedis()  # type: ignore
        else:
            redis_password = os.getenv("REDIS_PASSWORD")
            redis_host = os.getenv("REDIS_HOST")
            redis_port = os.getenv("REDIS_PORT")
            if None in [redis_password, redis_host, redis_port]:
                if not RedisCache._warned_password:
                    logger.warning(
                        """REDIS_PASSWORD, REDIS_HOST, REDIS_PORT not set in .env file,
                        using fake redis client"""
                    )
                    RedisCache._warned_password = True
                self.pool = fakeredis.FakeStrictRedis()  # type: ignore
            else:
                self.pool = redis.ConnectionPool(  # type: ignore
                    host=redis_host,
                    port=redis_port,
                    password=redis_password,
                    max_connections=500,
                    socket_timeout=5,
                    socket_keepalive=True,
                    retry_on_timeout=True,
                    health_check_interval=30,
                )

    @contextmanager  # type: ignore
    def redis_client(self) -> AbstractContextManager[T]:  # type: ignore
        """Cleanly open and close a redis client, avoids max clients exceeded error"""
        if isinstance(self.pool, fakeredis.FakeStrictRedis):
            yield self.pool
        else:
            client: T = redis.Redis(connection_pool=self.pool)
            try:
                yield client
            finally:
                client.close()

    def close_all_connections(self) -> None:
        with self.redis_client() as client:  # type: ignore
            clients = client.client_list()
            for c in clients:
                client.client_kill(c["addr"])

    def clear(self) -> None:
        """Clear keys from current db."""
        with self.redis_client() as client:  # type: ignore
            client.flushdb()

    def clear_all(self) -> None:
        """Clear all keys from all dbs."""
        with self.redis_client() as client:  # type: ignore
            client.flushall()

    def store(self, key: str, value: Any) -> None:
        """
        Store a value associated with a key.

        Args:
            key (str): The key under which to store the value.
            value (Any): The value to store.
        """
        with self.redis_client() as client:  # type: ignore
            try:
                client.set(key, json.dumps(value))
            except redis.exceptions.ConnectionError:
                logger.warning("Redis connection error, not storing key/value")
                return None

    def retrieve(self, key: str) -> Dict[str, Any] | str | None:
        """
        Retrieve the value associated with a key.

        Args:
            key (str): The key to retrieve the value for.

        Returns:
            dict|str|None: The value associated with the key.
        """
        with self.redis_client() as client:  # type: ignore
            try:
                value = client.get(key)
            except redis.exceptions.ConnectionError:
                logger.warning("Redis connection error, returning None")
                return None
            return json.loads(value) if value else None

    def delete_keys(self, keys: List[str]) -> None:
        """
        Delete the keys from the cache.

        Args:
            keys (List[str]): The keys to delete.
        """
        with self.redis_client() as client:  # type: ignore
            try:
                client.delete(*keys)
            except redis.exceptions.ConnectionError:
                logger.warning("Redis connection error, not deleting keys")
                return None

    def delete_keys_pattern(self, pattern: str) -> None:
        """
        Delete the keys matching the pattern from the cache.

        Args:
            prefix (str): The pattern to match.
        """
        with self.redis_client() as client:  # type: ignore
            try:
                keys = client.keys(pattern)
                if len(keys) > 0:
                    client.delete(*keys)
            except redis.exceptions.ConnectionError:
                logger.warning("Redis connection error, not deleting keys")
                return None
</file>

<file path="langroid/embedding_models/protoc/embeddings_pb2_grpc.py">
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import langroid.embedding_models.protoc.embeddings_pb2 as embeddings__pb2


class EmbeddingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Embed = channel.unary_unary(
            "/Embedding/Embed",
            request_serializer=embeddings__pb2.EmbeddingRequest.SerializeToString,
            response_deserializer=embeddings__pb2.BatchEmbeds.FromString,
        )


class EmbeddingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Embed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_EmbeddingServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Embed": grpc.unary_unary_rpc_method_handler(
            servicer.Embed,
            request_deserializer=embeddings__pb2.EmbeddingRequest.FromString,
            response_serializer=embeddings__pb2.BatchEmbeds.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "Embedding", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Embedding(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Embed(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Embedding/Embed",
            embeddings__pb2.EmbeddingRequest.SerializeToString,
            embeddings__pb2.BatchEmbeds.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
</file>

<file path="langroid/embedding_models/protoc/embeddings_pb2.py">
# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: embeddings.proto
# Protobuf Python Version: 4.25.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n\x10\x65mbeddings.proto"K\n\x10\x45mbeddingRequest\x12\x12\n\nmodel_name\x18\x01 \x01(\t\x12\x12\n\nbatch_size\x18\x02 \x01(\x05\x12\x0f\n\x07strings\x18\x03 \x03(\t"%\n\x0b\x42\x61tchEmbeds\x12\x16\n\x06\x65mbeds\x18\x01 \x03(\x0b\x32\x06.Embed"\x16\n\x05\x45mbed\x12\r\n\x05\x65mbed\x18\x01 \x03(\x02\x32\x37\n\tEmbedding\x12*\n\x05\x45mbed\x12\x11.EmbeddingRequest\x1a\x0c.BatchEmbeds"\x00\x62\x06proto3'
)

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "embeddings_pb2", _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
    DESCRIPTOR._options = None
    _globals["_EMBEDDINGREQUEST"]._serialized_start = 20
    _globals["_EMBEDDINGREQUEST"]._serialized_end = 95
    _globals["_BATCHEMBEDS"]._serialized_start = 97
    _globals["_BATCHEMBEDS"]._serialized_end = 134
    _globals["_EMBED"]._serialized_start = 136
    _globals["_EMBED"]._serialized_end = 158
    _globals["_EMBEDDING"]._serialized_start = 160
    _globals["_EMBEDDING"]._serialized_end = 215
# @@protoc_insertion_point(module_scope)
</file>

<file path="langroid/embedding_models/protoc/embeddings_pb2.pyi">
from typing import (
    ClassVar as _ClassVar,
)
from typing import (
    Iterable as _Iterable,
)
from typing import (
    Mapping as _Mapping,
)
from typing import (
    Optional as _Optional,
)
from typing import (
    Union as _Union,
)

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf.internal import containers as _containers

DESCRIPTOR: _descriptor.FileDescriptor

class EmbeddingRequest(_message.Message):
    __slots__ = ("model_name", "batch_size", "strings")
    MODEL_NAME_FIELD_NUMBER: _ClassVar[int]
    BATCH_SIZE_FIELD_NUMBER: _ClassVar[int]
    STRINGS_FIELD_NUMBER: _ClassVar[int]
    model_name: str
    batch_size: int
    strings: _containers.RepeatedScalarFieldContainer[str]
    def __init__(
        self,
        model_name: _Optional[str] = ...,
        batch_size: _Optional[int] = ...,
        strings: _Optional[_Iterable[str]] = ...,
    ) -> None: ...

class BatchEmbeds(_message.Message):
    __slots__ = ("embeds",)
    EMBEDS_FIELD_NUMBER: _ClassVar[int]
    embeds: _containers.RepeatedCompositeFieldContainer[Embed]
    def __init__(
        self, embeds: _Optional[_Iterable[_Union[Embed, _Mapping]]] = ...
    ) -> None: ...

class Embed(_message.Message):
    __slots__ = ("embed",)
    EMBED_FIELD_NUMBER: _ClassVar[int]
    embed: _containers.RepeatedScalarFieldContainer[float]
    def __init__(self, embed: _Optional[_Iterable[float]] = ...) -> None: ...
</file>

<file path="langroid/embedding_models/protoc/embeddings.proto">
syntax = "proto3";

service Embedding {
    rpc Embed (EmbeddingRequest) returns (BatchEmbeds) {};
}

message EmbeddingRequest {
    string model_name = 1;
    int32 batch_size = 2;
    repeated string strings = 3;
}

message BatchEmbeds {
    repeated Embed embeds = 1;
}

message Embed {
    repeated float embed = 1;
}
</file>

<file path="langroid/embedding_models/__init__.py">
from . import base
from . import models
from . import remote_embeds

from .base import (
    EmbeddingModel,
    EmbeddingModelsConfig,
)
from .models import (
    OpenAIEmbeddings,
    OpenAIEmbeddingsConfig,
    SentenceTransformerEmbeddings,
    SentenceTransformerEmbeddingsConfig,
    LlamaCppServerEmbeddings,
    LlamaCppServerEmbeddingsConfig,
    GeminiEmbeddings,
    GeminiEmbeddingsConfig,
    embedding_model,
)
from .remote_embeds import (
    RemoteEmbeddingsConfig,
    RemoteEmbeddings,
)


__all__ = [
    "base",
    "models",
    "remote_embeds",
    "EmbeddingModel",
    "EmbeddingModelsConfig",
    "OpenAIEmbeddings",
    "OpenAIEmbeddingsConfig",
    "SentenceTransformerEmbeddings",
    "SentenceTransformerEmbeddingsConfig",
    "LlamaCppServerEmbeddings",
    "LlamaCppServerEmbeddingsConfig",
    "GeminiEmbeddings",
    "GeminiEmbeddingsConfig",
    "embedding_model",
    "RemoteEmbeddingsConfig",
    "RemoteEmbeddings",
]
</file>

<file path="langroid/embedding_models/base.py">
import logging
from abc import ABC, abstractmethod

import numpy as np

from langroid.mytypes import EmbeddingFunction
from langroid.pydantic_v1 import BaseSettings

logging.getLogger("openai").setLevel(logging.ERROR)


class EmbeddingModelsConfig(BaseSettings):
    model_type: str = "openai"
    dims: int = 0
    context_length: int = 512
    batch_size: int = 512


class EmbeddingModel(ABC):
    """
    Abstract base class for an embedding model.
    """

    @classmethod
    def create(cls, config: EmbeddingModelsConfig) -> "EmbeddingModel":
        from langroid.embedding_models.models import (
            AzureOpenAIEmbeddings,
            AzureOpenAIEmbeddingsConfig,
            FastEmbedEmbeddings,
            FastEmbedEmbeddingsConfig,
            GeminiEmbeddings,
            GeminiEmbeddingsConfig,
            LlamaCppServerEmbeddings,
            LlamaCppServerEmbeddingsConfig,
            OpenAIEmbeddings,
            OpenAIEmbeddingsConfig,
            SentenceTransformerEmbeddings,
            SentenceTransformerEmbeddingsConfig,
        )
        from langroid.embedding_models.remote_embeds import (
            RemoteEmbeddings,
            RemoteEmbeddingsConfig,
        )

        if isinstance(config, RemoteEmbeddingsConfig):
            return RemoteEmbeddings(config)
        elif isinstance(config, OpenAIEmbeddingsConfig):
            return OpenAIEmbeddings(config)
        elif isinstance(config, AzureOpenAIEmbeddingsConfig):
            return AzureOpenAIEmbeddings(config)
        elif isinstance(config, SentenceTransformerEmbeddingsConfig):
            return SentenceTransformerEmbeddings(config)
        elif isinstance(config, FastEmbedEmbeddingsConfig):
            return FastEmbedEmbeddings(config)
        elif isinstance(config, LlamaCppServerEmbeddingsConfig):
            return LlamaCppServerEmbeddings(config)
        elif isinstance(config, GeminiEmbeddingsConfig):
            return GeminiEmbeddings(config)
        else:
            raise ValueError(f"Unknown embedding config: {config.__repr_name__}")

    @abstractmethod
    def embedding_fn(self) -> EmbeddingFunction:
        pass

    @property
    @abstractmethod
    def embedding_dims(self) -> int:
        pass

    def similarity(self, text1: str, text2: str) -> float:
        """Compute cosine similarity between two texts."""
        [emb1, emb2] = self.embedding_fn()([text1, text2])
        return float(
            np.array(emb1)
            @ np.array(emb2)
            / (np.linalg.norm(emb1) * np.linalg.norm(emb2))
        )
</file>

<file path="langroid/embedding_models/remote_embeds.py">
"""
If run as a script, starts an RPC server which handles remote
embedding requests:

For example:
python3 -m langroid.embedding_models.remote_embeds --port `port`

where `port` is the port at which the service is exposed.  Currently,
supports insecure connections only, and this should NOT be exposed to
the internet.
"""

import atexit
import subprocess
import time
from typing import Callable, Optional

import grpc
from fire import Fire

import langroid.embedding_models.models as em
import langroid.embedding_models.protoc.embeddings_pb2 as embeddings_pb
import langroid.embedding_models.protoc.embeddings_pb2_grpc as embeddings_grpc
from langroid.mytypes import Embeddings


class RemoteEmbeddingRPCs(embeddings_grpc.EmbeddingServicer):
    def __init__(
        self,
        model_name: str,
        batch_size: int,
        data_parallel: bool,
        device: Optional[str],
        devices: Optional[list[str]],
    ):
        super().__init__()
        self.embedding_fn = em.SentenceTransformerEmbeddings(
            em.SentenceTransformerEmbeddingsConfig(
                model_name=model_name,
                batch_size=batch_size,
                data_parallel=data_parallel,
                device=device,
                devices=devices,
            )
        ).embedding_fn()

    def Embed(
        self, request: embeddings_pb.EmbeddingRequest, _: grpc.RpcContext
    ) -> embeddings_pb.BatchEmbeds:
        embeds = self.embedding_fn(list(request.strings))

        embeds_pb = [embeddings_pb.Embed(embed=e) for e in embeds]

        return embeddings_pb.BatchEmbeds(embeds=embeds_pb)


class RemoteEmbeddingsConfig(em.SentenceTransformerEmbeddingsConfig):
    api_base: str = "localhost"
    port: int = 50052
    # The below are used only when waiting for server creation
    poll_delay: float = 0.01
    max_retries: int = 1000


class RemoteEmbeddings(em.SentenceTransformerEmbeddings):
    def __init__(self, config: RemoteEmbeddingsConfig = RemoteEmbeddingsConfig()):
        super().__init__(config)
        self.config: RemoteEmbeddingsConfig = config
        self.have_started_server: bool = False

    def embedding_fn(self) -> Callable[[list[str]], Embeddings]:
        def fn(texts: list[str]) -> Embeddings:
            url = f"{self.config.api_base}:{self.config.port}"
            with grpc.insecure_channel(url) as channel:
                stub = embeddings_grpc.EmbeddingStub(channel)  # type: ignore
                response = stub.Embed(
                    embeddings_pb.EmbeddingRequest(
                        strings=texts,
                    )
                )

                return [list(emb.embed) for emb in response.embeds]

        def with_handling(texts: list[str]) -> Embeddings:
            # In local mode, start the server if it has not already
            # been started
            if self.config.api_base == "localhost" and not self.have_started_server:
                try:
                    return fn(texts)
                # Occurs when the server hasn't been started
                except grpc.RpcError:
                    self.have_started_server = True
                    # Start the server
                    proc = subprocess.Popen(
                        [
                            "python3",
                            __file__,
                            "--bind_address_base",
                            self.config.api_base,
                            "--port",
                            str(self.config.port),
                            "--batch_size",
                            str(self.config.batch_size),
                            "--model_name",
                            self.config.model_name,
                        ],
                    )

                    atexit.register(lambda: proc.terminate())

                    for _ in range(self.config.max_retries - 1):
                        try:
                            return fn(texts)
                        except grpc.RpcError:
                            time.sleep(self.config.poll_delay)

            # The remote is not local or we have exhausted retries
            # We should now raise an error if the server is not accessible
            return fn(texts)

        return with_handling


async def serve(
    bind_address_base: str = "localhost",
    port: int = 50052,
    batch_size: int = 512,
    data_parallel: bool = False,
    device: Optional[str] = None,
    devices: Optional[list[str]] = None,
    model_name: str = "BAAI/bge-large-en-v1.5",
) -> None:
    """Starts the RPC server."""
    server = grpc.aio.server()
    embeddings_grpc.add_EmbeddingServicer_to_server(
        RemoteEmbeddingRPCs(
            model_name=model_name,
            batch_size=batch_size,
            data_parallel=data_parallel,
            device=device,
            devices=devices,
        ),
        server,
    )  # type: ignore
    url = f"{bind_address_base}:{port}"
    server.add_insecure_port(url)
    await server.start()
    print(f"Embedding server started, listening on {url}")
    await server.wait_for_termination()


if __name__ == "__main__":
    Fire(serve)
</file>

<file path="langroid/language_models/prompt_formatter/__init__.py">
from . import base
from . import llama2_formatter
from .base import PromptFormatter
from .llama2_formatter import Llama2Formatter
from ..config import PromptFormatterConfig
from ..config import Llama2FormatterConfig


__all__ = [
    "PromptFormatter",
    "Llama2Formatter",
    "PromptFormatterConfig",
    "Llama2FormatterConfig",
    "base",
    "llama2_formatter",
]
</file>

<file path="langroid/language_models/prompt_formatter/base.py">
import logging
from abc import ABC, abstractmethod
from typing import List

from langroid.language_models.base import LLMMessage
from langroid.language_models.config import PromptFormatterConfig

logger = logging.getLogger(__name__)


class PromptFormatter(ABC):
    """
    Abstract base class for a prompt formatter
    """

    def __init__(self, config: PromptFormatterConfig):
        self.config = config

    @staticmethod
    def create(formatter: str) -> "PromptFormatter":
        from langroid.language_models.config import HFPromptFormatterConfig
        from langroid.language_models.prompt_formatter.hf_formatter import HFFormatter

        return HFFormatter(HFPromptFormatterConfig(model_name=formatter))

    @abstractmethod
    def format(self, messages: List[LLMMessage]) -> str:
        """
        Convert sequence of messages (system, user, assistant, user, assistant...user)
            to a single prompt formatted according to the specific format type,
            to be used in a /completions endpoint.

        Args:
            messages (List[LLMMessage]): chat history as a sequence of messages

        Returns:
            (str): formatted version of chat history

        """
        pass
</file>

<file path="langroid/language_models/prompt_formatter/hf_formatter.py">
"""
Prompt formatter based on HuggingFace `AutoTokenizer.apply_chat_template` method
from their Transformers library. It searches the hub for a model matching the
specified name, and uses the first one it finds. We assume that all matching
models will have the same tokenizer, so we just use the first one.
"""

import logging
import re
from typing import Any, List, Set, Tuple, Type

from jinja2.exceptions import TemplateError

from langroid.language_models.base import LanguageModel, LLMMessage, Role
from langroid.language_models.config import HFPromptFormatterConfig
from langroid.language_models.prompt_formatter.base import PromptFormatter

logger = logging.getLogger(__name__)


def try_import_hf_modules() -> Tuple[Type[Any], Type[Any]]:
    """
    Attempts to import the AutoTokenizer class from the transformers package.
    Returns:
        The AutoTokenizer class if successful.
    Raises:
        ImportError: If the transformers package is not installed.
    """
    try:
        from huggingface_hub import HfApi
        from transformers import AutoTokenizer

        return AutoTokenizer, HfApi
    except ImportError:
        raise ImportError(
            """
            You are trying to use some/all of:
            HuggingFace transformers.AutoTokenizer,
            huggingface_hub.HfApi,
            but these are not not installed 
            by default with Langroid. Please install langroid using the 
            `transformers` extra, like so:
            pip install "langroid[transformers]"
            or equivalent.
            """
        )


def find_hf_formatter(model_name: str) -> str:
    AutoTokenizer, HfApi = try_import_hf_modules()
    hf_api = HfApi()
    # try to find a matching model, with progressivly shorter prefixes of model_name
    model_name = model_name.lower().split("/")[-1]
    parts = re.split("[:\\-_]", model_name)
    parts = [p.lower() for p in parts if p != ""]
    for i in range(len(parts), 0, -1):
        prefix = "-".join(parts[:i])
        models = hf_api.list_models(
            task="text-generation",
            model_name=prefix,
        )
        try:
            mdl = next(models)
            tokenizer = AutoTokenizer.from_pretrained(mdl.id)
            if tokenizer.chat_template is not None:
                return str(mdl.id)
            else:
                continue
        except Exception:
            continue

    return ""


class HFFormatter(PromptFormatter):
    models: Set[str] = set()  # which models have been used for formatting

    def __init__(self, config: HFPromptFormatterConfig):
        super().__init__(config)
        AutoTokenizer, HfApi = try_import_hf_modules()
        self.config: HFPromptFormatterConfig = config
        hf_api = HfApi()
        models = hf_api.list_models(
            task="text-generation",
            model_name=config.model_name,
        )
        try:
            mdl = next(models)
        except StopIteration:
            raise ValueError(f"Model {config.model_name} not found on HuggingFace Hub")

        self.tokenizer = AutoTokenizer.from_pretrained(mdl.id)
        if self.tokenizer.chat_template is None:
            raise ValueError(
                f"Model {config.model_name} does not support chat template"
            )
        elif mdl.id not in HFFormatter.models:
            # only warn if this is the first time we've used this mdl.id
            logger.warning(
                f"""
            Using HuggingFace {mdl.id} for prompt formatting: 
            This is the CHAT TEMPLATE. If this is not what you intended,
            consider specifying a more complete model name for the formatter.
             
            {self.tokenizer.chat_template}
            """
            )
        HFFormatter.models.add(mdl.id)

    def format(self, messages: List[LLMMessage]) -> str:
        sys_msg, chat_msgs, user_msg = LanguageModel.get_chat_history_components(
            messages
        )
        # build msg dicts expected by AutoTokenizer.apply_chat_template
        sys_msg_dict = dict(role=Role.SYSTEM.value, content=sys_msg)
        chat_dicts = []
        for user, assistant in chat_msgs:
            chat_dicts.append(dict(role=Role.USER.value, content=user))
            chat_dicts.append(dict(role=Role.ASSISTANT.value, content=assistant))
        chat_dicts.append(dict(role=Role.USER.value, content=user_msg))
        all_dicts = [sys_msg_dict] + chat_dicts
        try:
            # apply chat template
            result = self.tokenizer.apply_chat_template(all_dicts, tokenize=False)
        except TemplateError:
            # this likely means the model doesn't support a system msg,
            # so combine it with the first user msg
            first_user_msg = chat_msgs[0][0] if len(chat_msgs) > 0 else user_msg
            first_user_msg = sys_msg + "\n\n" + first_user_msg
            chat_dicts[0] = dict(role=Role.USER.value, content=first_user_msg)
            result = self.tokenizer.apply_chat_template(chat_dicts, tokenize=False)
        return str(result)
</file>

<file path="langroid/language_models/prompt_formatter/llama2_formatter.py">
import logging
from typing import List, Tuple

from langroid.language_models.base import LanguageModel, LLMMessage
from langroid.language_models.config import Llama2FormatterConfig
from langroid.language_models.prompt_formatter.base import PromptFormatter

logger = logging.getLogger(__name__)


BOS: str = "<s>"
EOS: str = "</s>"
B_INST: str = "[INST]"
E_INST: str = "[/INST]"
B_SYS: str = "<<SYS>>\n"
E_SYS: str = "\n<</SYS>>\n\n"
SPECIAL_TAGS: List[str] = [B_INST, E_INST, BOS, EOS, "<<SYS>>", "<</SYS>>"]


class Llama2Formatter(PromptFormatter):
    def __int__(self, config: Llama2FormatterConfig) -> None:
        super().__init__(config)
        self.config: Llama2FormatterConfig = config

    def format(self, messages: List[LLMMessage]) -> str:
        sys_msg, chat_msgs, user_msg = LanguageModel.get_chat_history_components(
            messages
        )
        return self._get_prompt_from_components(sys_msg, chat_msgs, user_msg)

    def _get_prompt_from_components(
        self,
        system_prompt: str,
        chat_history: List[Tuple[str, str]],
        user_message: str,
    ) -> str:
        """
        For llama2 models, convert chat history into a single
        prompt for Llama2 models, for use in the /completions endpoint
        (as opposed to the /chat/completions endpoint).
        See:
        https://www.reddit.com/r/LocalLLaMA/comments/155po2p/get_llama_2_prompt_format_right/
        https://github.com/facebookresearch/llama/blob/main/llama/generation.py#L44

        Args:
            system_prompt (str): system prompt, typically specifying role/task.
            chat_history (List[Tuple[str,str]]): List of (user, assistant) pairs
            user_message (str): user message, at the end of the chat, i.e. the message
                for which we want to generate a response.

        Returns:
            str: Prompt for Llama2 models

        Typical structure of the formatted prompt:
        Note important that the first [INST], [/INST] surrounds the system prompt,
        together with the first user message. A lot of libs seem to miss this detail.

        <s>[INST] <<SYS>>
        You are are a helpful... bla bla.. assistant
        <</SYS>>

        Hi there! [/INST] Hello! How can I help you today? </s><s>[INST]
        What is a neutron star? [/INST] A neutron star is a ... </s><s>
        [INST] Okay cool, thank you! [/INST] You're welcome! </s><s>
        [INST] Ah, I have one more question.. [/INST]
        """
        bos = BOS if self.config.use_bos_eos else ""
        eos = EOS if self.config.use_bos_eos else ""
        text = f"{bos}{B_INST} {B_SYS}{system_prompt}{E_SYS}"
        for user_input, response in chat_history:
            text += (
                f"{user_input.strip()} {E_INST} {response.strip()} {eos}{bos} {B_INST} "
            )
        text += f"{user_message.strip()} {E_INST}"
        return text
</file>

<file path="langroid/language_models/__init__.py">
from . import utils
from . import config
from . import base
from . import openai_gpt
from . import azure_openai
from . import prompt_formatter

from .base import (
    StreamEventType,
    LLMConfig,
    LLMMessage,
    LLMFunctionCall,
    LLMFunctionSpec,
    Role,
    LLMTokenUsage,
    LLMResponse,
)
from .model_info import (
    OpenAIChatModel,
    AnthropicModel,
    GeminiModel,
    OpenAICompletionModel,
)
from .openai_gpt import OpenAIGPTConfig, OpenAIGPT, OpenAICallParams
from .mock_lm import MockLM, MockLMConfig
from .azure_openai import AzureConfig, AzureGPT


__all__ = [
    "utils",
    "config",
    "base",
    "openai_gpt",
    "model_info",
    "azure_openai",
    "prompt_formatter",
    "StreamEventType",
    "LLMConfig",
    "LLMMessage",
    "LLMFunctionCall",
    "LLMFunctionSpec",
    "Role",
    "LLMTokenUsage",
    "LLMResponse",
    "OpenAIChatModel",
    "AnthropicModel",
    "GeminiModel",
    "OpenAICompletionModel",
    "OpenAIGPTConfig",
    "OpenAIGPT",
    "OpenAICallParams",
    "AzureConfig",
    "AzureGPT",
    "MockLM",
    "MockLMConfig",
]
</file>

<file path="langroid/language_models/azure_openai.py">
import logging
from typing import Callable

from dotenv import load_dotenv
from httpx import Timeout
from openai import AsyncAzureOpenAI, AzureOpenAI

from langroid.language_models.openai_gpt import (
    OpenAIGPT,
    OpenAIGPTConfig,
)

azureStructuredOutputList = [
    "2024-08-06",
    "2024-11-20",
]

azureStructuredOutputAPIMin = "2024-08-01-preview"

logger = logging.getLogger(__name__)


class AzureConfig(OpenAIGPTConfig):
    """
    Configuration for Azure OpenAI GPT.

    Attributes:
        type (str): should be ``azure.``
        api_version (str): can be set in the ``.env`` file as
            ``AZURE_OPENAI_API_VERSION.``
        deployment_name (str|None): can be optionally set in the ``.env`` file as
            ``AZURE_OPENAI_DEPLOYMENT_NAME`` and should be based the custom name you
            chose for your deployment when you deployed a model.
        model_name (str): [DEPRECATED] can be set in the ``.env``
            file as ``AZURE_OPENAI_MODEL_NAME``
            and should be based on the model name chosen during setup.
        chat_model (str): the chat model name to use. Can be set via
            the env variable ``AZURE_OPENAI_CHAT_MODEL``.
            Recommended to use this instead of ``model_name``.

    """

    api_key: str = ""  # CAUTION: set this ONLY via env var AZURE_OPENAI_API_KEY
    type: str = "azure"
    api_version: str = "2023-05-15"
    deployment_name: str | None = None
    model_name: str = ""
    api_base: str = ""

    # Alternatively, bring your own clients:
    azure_openai_client_provider: Callable[[], AzureOpenAI] | None = None
    azure_openai_async_client_provider: Callable[[], AsyncAzureOpenAI] | None = None

    # all of the vars above can be set via env vars,
    # by upper-casing the name and prefixing with `env_prefix`, e.g.
    # AZURE_OPENAI_API_VERSION=2023-05-15
    # This is either done in the .env file, or via an explicit
    # `export AZURE_OPENAI_API_VERSION=...`
    class Config:
        env_prefix = "AZURE_OPENAI_"

    def __init__(self, **kwargs) -> None:  # type: ignore
        if "model_name" in kwargs and "chat_model" not in kwargs:
            kwargs["chat_model"] = kwargs["model_name"]
        super().__init__(**kwargs)


class AzureGPT(OpenAIGPT):
    """
    Class to access OpenAI LLMs via Azure. These env variables can be obtained from the
    file `.azure_env`. Azure OpenAI doesn't support ``completion``
    """

    def __init__(self, config: AzureConfig):
        # This will auto-populate config values from .env file
        load_dotenv()
        super().__init__(config)
        self.config: AzureConfig = config

        if (
            self.config.azure_openai_client_provider
            or self.config.azure_openai_async_client_provider
        ):
            if not self.config.azure_openai_client_provider:
                self.client = None
                logger.warning(
                    "Using user-provided Azure OpenAI client, but only async "
                    "client has been provided. Synchronous calls will fail."
                )
            if not self.config.azure_openai_async_client_provider:
                self.async_client = None
                logger.warning(
                    "Using user-provided Azure OpenAI client, but no async "
                    "client has been provided. Asynchronous calls will fail."
                )

            if self.config.azure_openai_client_provider:
                self.client = self.config.azure_openai_client_provider()
            if self.config.azure_openai_async_client_provider:
                self.async_client = self.config.azure_openai_async_client_provider()
                self.async_client.timeout = Timeout(self.config.timeout)
        else:
            if self.config.api_key == "":
                raise ValueError(
                    """
                    AZURE_OPENAI_API_KEY not set in .env file,
                    please set it to your Azure API key."""
                )

            if self.config.api_base == "":
                raise ValueError(
                    """
                    AZURE_OPENAI_API_BASE not set in .env file,
                    please set it to your Azure API key."""
                )

            self.client = AzureOpenAI(
                api_key=self.config.api_key,
                azure_endpoint=self.config.api_base,
                api_version=self.config.api_version,
                azure_deployment=self.config.deployment_name,
            )
            self.async_client = AsyncAzureOpenAI(
                api_key=self.config.api_key,
                azure_endpoint=self.config.api_base,
                api_version=self.config.api_version,
                azure_deployment=self.config.deployment_name,
                timeout=Timeout(self.config.timeout),
            )

        self.supports_json_schema = (
            self.config.api_version >= azureStructuredOutputAPIMin
            and self.config.api_version in azureStructuredOutputList
        )
</file>

<file path="langroid/language_models/config.py">
from langroid.pydantic_v1 import BaseSettings


class PromptFormatterConfig(BaseSettings):
    type: str = "llama2"

    class Config:
        env_prefix = "FORMAT_"
        case_sensitive = False


class Llama2FormatterConfig(PromptFormatterConfig):
    use_bos_eos: bool = False


class HFPromptFormatterConfig(PromptFormatterConfig):
    type: str = "hf"
    model_name: str
</file>

<file path="langroid/language_models/mock_lm.py">
"""Mock Language Model for testing"""

from typing import Awaitable, Callable, Dict, List, Optional, Union

import langroid.language_models as lm
from langroid.language_models import LLMResponse
from langroid.language_models.base import (
    LanguageModel,
    LLMConfig,
    OpenAIJsonSchemaSpec,
    OpenAIToolSpec,
    ToolChoiceTypes,
)
from langroid.utils.types import to_string


def none_fn(x: str) -> None | str:
    return None


class MockLMConfig(LLMConfig):
    """
    Mock Language Model Configuration.

    Attributes:
        response_dict (Dict[str, str]): A "response rule-book", in the form of a
            dictionary; if last msg in dialog is x,then respond with response_dict[x]
    """

    chat_context_length: int = 1_000_000_000  # infinite
    response_dict: Dict[str, str] = {}
    response_fn: Callable[[str], None | str] = none_fn
    response_fn_async: Optional[Callable[[str], Awaitable[Optional[str]]]] = None
    default_response: str = "Mock response"

    type: str = "mock"


class MockLM(LanguageModel):

    def __init__(self, config: MockLMConfig = MockLMConfig()):
        super().__init__(config)
        self.config: MockLMConfig = config

    def _response(self, msg: str) -> LLMResponse:
        # response is based on this fallback order:
        # - response_dict
        # - response_fn
        # - default_response
        mapped_response = self.config.response_dict.get(
            msg, self.config.response_fn(msg) or self.config.default_response
        )
        return lm.LLMResponse(
            message=to_string(mapped_response),
            cached=False,
        )

    async def _response_async(self, msg: str) -> LLMResponse:
        # response is based on this fallback order:
        # - response_dict
        # - response_fn_async
        # - response_fn
        # - default_response
        if self.config.response_fn_async is not None:
            response = await self.config.response_fn_async(msg)
        else:
            response = self.config.response_fn(msg)

        mapped_response = self.config.response_dict.get(
            msg, response or self.config.default_response
        )
        return lm.LLMResponse(
            message=to_string(mapped_response),
            cached=False,
        )

    def chat(
        self,
        messages: Union[str, List[lm.LLMMessage]],
        max_tokens: int = 200,
        tools: Optional[List[OpenAIToolSpec]] = None,
        tool_choice: ToolChoiceTypes | Dict[str, str | Dict[str, str]] = "auto",
        functions: Optional[List[lm.LLMFunctionSpec]] = None,
        function_call: str | Dict[str, str] = "auto",
        response_format: Optional[OpenAIJsonSchemaSpec] = None,
    ) -> lm.LLMResponse:
        """
        Mock chat function for testing
        """
        last_msg = messages[-1].content if isinstance(messages, list) else messages
        return self._response(last_msg)

    async def achat(
        self,
        messages: Union[str, List[lm.LLMMessage]],
        max_tokens: int = 200,
        tools: Optional[List[OpenAIToolSpec]] = None,
        tool_choice: ToolChoiceTypes | Dict[str, str | Dict[str, str]] = "auto",
        functions: Optional[List[lm.LLMFunctionSpec]] = None,
        function_call: str | Dict[str, str] = "auto",
        response_format: Optional[OpenAIJsonSchemaSpec] = None,
    ) -> lm.LLMResponse:
        """
        Mock chat function for testing
        """
        last_msg = messages[-1].content if isinstance(messages, list) else messages
        return await self._response_async(last_msg)

    def generate(self, prompt: str, max_tokens: int = 200) -> lm.LLMResponse:
        """
        Mock generate function for testing
        """
        return self._response(prompt)

    async def agenerate(self, prompt: str, max_tokens: int = 200) -> LLMResponse:
        """
        Mock generate function for testing
        """
        return await self._response_async(prompt)

    def get_stream(self) -> bool:
        return False

    def set_stream(self, stream: bool) -> bool:
        return False
</file>

<file path="langroid/language_models/utils.py">
# from openai-cookbook
import asyncio
import logging
import random
import time
from typing import Any, Callable, Dict, List

import aiohttp
import openai
import requests

logger = logging.getLogger(__name__)
# setlevel to warning
logger.setLevel(logging.WARNING)


# define a retry decorator
def retry_with_exponential_backoff(
    func: Callable[..., Any],
    initial_delay: float = 1,
    exponential_base: float = 1.3,
    jitter: bool = True,
    max_retries: int = 5,
    errors: tuple = (  # type: ignore
        requests.exceptions.RequestException,
        openai.APITimeoutError,
        openai.RateLimitError,
        openai.AuthenticationError,
        openai.APIError,
        aiohttp.ServerTimeoutError,
        asyncio.TimeoutError,
    ),
) -> Callable[..., Any]:
    """Retry a function with exponential backoff."""

    def wrapper(*args: List[Any], **kwargs: Dict[Any, Any]) -> Any:
        # Initialize variables
        num_retries = 0
        delay = initial_delay

        # Loop until a successful response or max_retries is hit or exception is raised
        while True:
            try:
                return func(*args, **kwargs)

            except openai.BadRequestError as e:
                # do not retry when the request itself is invalid,
                # e.g. when context is too long
                logger.error(f"OpenAI API request failed with error: {e}.")
                raise e
            except openai.AuthenticationError as e:
                # do not retry when there's an auth error
                logger.error(f"OpenAI API request failed with error: {e}.")
                raise e

            except openai.UnprocessableEntityError as e:
                logger.error(f"OpenAI API request failed with error: {e}.")
                raise e

            # Retry on specified errors
            except errors as e:

                # For certain types of errors that slip through here
                # (e.g. when using proxies like LiteLLM, do not retry)
                if any(
                    err in str(e)
                    for err in [
                        "BadRequestError",
                        "ConnectionError",
                        "NotFoundError",
                    ]
                ):
                    logger.error(f"OpenAI API request failed with error: {e}.")
                    raise e
                # Increment retries
                num_retries += 1

                # Check if max retries has been reached
                if num_retries > max_retries:
                    raise Exception(
                        f"Maximum number of retries ({max_retries}) exceeded."
                        f" Last error: {str(e)}."
                    )

                # Increment the delay
                delay *= exponential_base * (1 + jitter * random.random())
                logger.warning(
                    f"""OpenAI API request failed with error: 
                    {e}. 
                    Retrying in {delay} seconds..."""
                )
                # Sleep for the delay
                time.sleep(delay)

            # Raise exceptions for any errors not specified
            except Exception as e:
                raise e

    return wrapper


def async_retry_with_exponential_backoff(
    func: Callable[..., Any],
    initial_delay: float = 1,
    exponential_base: float = 1.3,
    jitter: bool = True,
    max_retries: int = 5,
    errors: tuple = (  # type: ignore
        openai.APITimeoutError,
        openai.RateLimitError,
        openai.AuthenticationError,
        openai.APIError,
        aiohttp.ServerTimeoutError,
        asyncio.TimeoutError,
    ),
) -> Callable[..., Any]:
    """Retry a function with exponential backoff."""

    async def wrapper(*args: List[Any], **kwargs: Dict[Any, Any]) -> Any:
        # Initialize variables
        num_retries = 0
        delay = initial_delay

        # Loop until a successful response or max_retries is hit or exception is raised
        while True:
            try:
                result = await func(*args, **kwargs)
                return result

            except openai.BadRequestError as e:
                # do not retry when the request itself is invalid,
                # e.g. when context is too long
                logger.error(f"OpenAI API request failed with error: {e}.")
                raise e
            except openai.AuthenticationError as e:
                # do not retry when there's an auth error
                logger.error(f"OpenAI API request failed with error: {e}.")
                raise e
            # Retry on specified errors
            except errors as e:
                # For certain types of errors that slip through here
                # (e.g. when using proxies like LiteLLM, do not retry)
                if any(
                    err in str(e)
                    for err in [
                        "BadRequestError",
                        "ConnectionError",
                        "NotFoundError",
                    ]
                ):
                    logger.error(f"OpenAI API request failed with error: {e}.")
                    raise e

                # Increment retries
                num_retries += 1

                # Check if max retries has been reached
                if num_retries > max_retries:
                    raise Exception(
                        f"Maximum number of retries ({max_retries}) exceeded."
                        f" Last error: {str(e)}."
                    )

                # Increment the delay
                delay *= exponential_base * (1 + jitter * random.random())
                logger.warning(
                    f"""OpenAI API request failed with error{e}. 
                    Retrying in {delay} seconds..."""
                )
                # Sleep for the delay
                time.sleep(delay)

            # Raise exceptions for any errors not specified
            except Exception as e:
                raise e

    return wrapper
</file>

<file path="langroid/parsing/__init__.py">
from . import parser
from . import agent_chats
from . import code_parser
from . import document_parser
from . import parse_json
from . import para_sentence_split
from . import repo_loader
from . import url_loader
from . import table_loader
from . import urls
from . import utils
from . import search
from . import web_search

from .parser import (
    Splitter,
    MarkitdownXLSParsingConfig,
    MarkitdownXLSXParsingConfig,
    MarkitdownPPTXParsingConfig,
    PdfParsingConfig,
    DocxParsingConfig,
    DocParsingConfig,
    ParsingConfig,
    Parser,
)

__all__ = [
    "parser",
    "agent_chats",
    "code_parser",
    "document_parser",
    "parse_json",
    "para_sentence_split",
    "repo_loader",
    "url_loader",
    "table_loader",
    "urls",
    "utils",
    "search",
    "web_search",
    "Splitter",
    "PdfParsingConfig",
    "DocxParsingConfig",
    "DocParsingConfig",
    "ParsingConfig",
    "MarkitdownXLSXParsingConfig",
    "MarkitdownXLSParsingConfig",
    "MarkitdownPPTXParsingConfig",
    "Parser",
]

try:
    from . import spider

    spider
    __all__.append("spider")
except ImportError:
    pass
</file>

<file path="langroid/parsing/agent_chats.py">
from typing import Tuple, no_type_check

from pyparsing import Empty, Literal, ParseException, SkipTo, StringEnd, Word, alphanums


@no_type_check
def parse_message(msg: str) -> Tuple[str, str]:
    """
    Parse the intended recipient and content of a message.
    Message format is assumed to be TO[<recipient>]:<message>.
    The TO[<recipient>]: part is optional.

    Args:
        msg (str): message to parse

    Returns:
        str, str: task-name of intended recipient, and content of message
            (if recipient is not specified, task-name is empty string)

    """
    if msg is None:
        return "", ""

    # Grammar definition
    name = Word(alphanums)
    to_start = Literal("TO[").suppress()
    to_end = Literal("]:").suppress()
    to_field = (to_start + name("name") + to_end) | Empty().suppress()
    message = SkipTo(StringEnd())("text")

    # Parser definition
    parser = to_field + message

    try:
        parsed = parser.parseString(msg)
        return parsed.name, parsed.text
    except ParseException:
        return "", msg
</file>

<file path="langroid/parsing/code_parser.py">
from functools import reduce
from typing import Callable, List

import tiktoken
from pygments import lex
from pygments.lexers import get_lexer_by_name
from pygments.token import Token

from langroid.mytypes import Document
from langroid.pydantic_v1 import BaseSettings


def chunk_code(
    code: str, language: str, max_tokens: int, len_fn: Callable[[str], int]
) -> List[str]:
    """
    Chunk code into smaller pieces, so that we don't exceed the maximum
    number of tokens allowed by the embedding model.
    Args:
        code: string of code
        language: str as a file extension, e.g. "py", "yml"
        max_tokens: max tokens per chunk
        len_fn: function to get the length of a string in token units
    Returns:

    """
    lexer = get_lexer_by_name(language)
    tokens = list(lex(code, lexer))

    chunks = []
    current_chunk = ""
    for token_type, token_value in tokens:
        if token_type in Token.Text.Whitespace:
            current_chunk += token_value
        else:
            token_tokens = len_fn(token_value)
            if len_fn(current_chunk) + token_tokens <= max_tokens:
                current_chunk += token_value
            else:
                chunks.append(current_chunk)
                current_chunk = token_value

    if current_chunk:
        chunks.append(current_chunk)

    return chunks


class CodeParsingConfig(BaseSettings):
    extensions: List[str] = [
        "py",
        "java",
        "c",
        "cpp",
        "h",
        "hpp",
        "yml",
        "yaml",
        "toml",
        "cfg",  # e.g. setup.cfg
        "ini",
        "json",
        "rst",
        "sh",
        "bash",
    ]
    chunk_size: int = 500  # tokens
    token_encoding_model: str = "text-embedding-3-small"
    n_similar_docs: int = 4


class CodeParser:
    def __init__(self, config: CodeParsingConfig):
        self.config = config
        self.tokenizer = tiktoken.encoding_for_model(config.token_encoding_model)

    def num_tokens(self, text: str) -> int:
        """
        How many tokens are in the text, according to the tokenizer.
        This needs to be accurate, otherwise we may exceed the maximum
        number of tokens allowed by the model.
        Args:
            text: string to tokenize
        Returns:
            number of tokens in the text
        """
        tokens = self.tokenizer.encode(text)
        return len(tokens)

    def split(self, docs: List[Document]) -> List[Document]:
        """
        Split the documents into chunks, according to the config.splitter.
        Only the documents with a language in the config.extensions are split.
        !!! note
            We assume the metadata in each document has at least a `language` field,
            which is used to determine how to chunk the code.
        Args:
            docs: list of documents to split
        Returns:
            list of documents, where each document is a chunk; the metadata of the
            original document is duplicated for each chunk, so that when we retrieve a
            chunk, we immediately know info about the original document.
        """
        chunked_docs = [
            [
                Document(content=chunk, metadata=d.metadata)
                for chunk in chunk_code(
                    d.content,
                    d.metadata.language,  # type: ignore
                    self.config.chunk_size,
                    self.num_tokens,
                )
                if chunk.strip() != ""
            ]
            for d in docs
            if d.metadata.language in self.config.extensions  # type: ignore
        ]
        if len(chunked_docs) == 0:
            return []
        # collapse the list of lists into a single list
        return reduce(lambda x, y: x + y, chunked_docs)
</file>

<file path="langroid/parsing/document_parser.py">
from __future__ import annotations

import base64
import itertools
import logging
import os
import re
import tempfile
from enum import Enum
from io import BytesIO
from itertools import accumulate
from pathlib import Path
from typing import TYPE_CHECKING, Any, Dict, Generator, List, Optional, Tuple, Union

from dotenv import load_dotenv

from langroid.exceptions import LangroidImportError
from langroid.utils.object_registry import ObjectRegistry

if TYPE_CHECKING:
    import docling  # noqa
    import fitz
    import pymupdf4llm  # noqa
    import pypdf


import requests
from bs4 import BeautifulSoup

if TYPE_CHECKING:
    from PIL import Image

from langroid.mytypes import DocMetaData, Document
from langroid.parsing.parser import LLMPdfParserConfig, Parser, ParsingConfig

logger = logging.getLogger(__name__)


class DocumentType(str, Enum):
    # TODO add `md` (Markdown) and `html`
    PDF = "pdf"
    DOCX = "docx"
    DOC = "doc"
    TXT = "txt"
    XLSX = "xlsx"
    XLS = "xls"
    PPTX = "pptx"


def find_last_full_char(possible_unicode: bytes) -> int:
    """
    Find the index of the last full character in a byte string.
    Args:
        possible_unicode (bytes): The bytes to check.
    Returns:
        int: The index of the last full unicode character.
    """

    for i in range(len(possible_unicode) - 1, 0, -1):
        if (possible_unicode[i] & 0xC0) != 0x80:
            return i
    return 0


def is_plain_text(path_or_bytes: str | bytes) -> bool:
    """
    Check if a file is plain text by attempting to decode it as UTF-8.
    Args:
        path_or_bytes (str|bytes): The file path or bytes object.
    Returns:
        bool: True if the file is plain text, False otherwise.
    """
    if isinstance(path_or_bytes, str):
        if path_or_bytes.startswith(("http://", "https://")):
            response = requests.get(path_or_bytes)
            response.raise_for_status()
            content = response.content[:1024]
        else:
            with open(path_or_bytes, "rb") as f:
                content = f.read(1024)
    else:
        content = path_or_bytes[:1024]
    try:
        # Use magic to detect the MIME type
        import magic

        mime_type = magic.from_buffer(content, mime=True)

        # Check if the MIME type is not a text type
        if not mime_type.startswith("text/"):
            return False

        # Attempt to decode the content as UTF-8
        content = content[: find_last_full_char(content)]

        try:
            _ = content.decode("utf-8")
            # Additional checks can go here, e.g., to verify that the content
            # doesn't contain too many unusual characters for it to be considered text
            return True
        except UnicodeDecodeError:
            return False
    except UnicodeDecodeError:
        # If decoding fails, it's likely not plain text (or not encoded in UTF-8)
        return False


class DocumentParser(Parser):
    """
    Abstract base class for extracting text from special types of docs
    such as PDFs or Docx.

    Attributes:
        source (str): The source, either a URL or a file path.
        doc_bytes (BytesIO): BytesIO object containing the doc data.
    """

    @classmethod
    def create(
        cls,
        source: str | bytes,
        config: ParsingConfig,
        doc_type: str | DocumentType | None = None,
    ) -> "DocumentParser":
        """
        Create a DocumentParser instance based on source type
            and config.<source_type>.library specified.

        Args:
            source (str|bytes): The source, could be a URL, file path,
                or bytes object.
            config (ParserConfig): The parser configuration.
            doc_type (str|None): The type of document, if known

        Returns:
            DocumentParser: An instance of a DocumentParser subclass.
        """
        inferred_doc_type = DocumentParser._document_type(source, doc_type)
        if inferred_doc_type == DocumentType.PDF:
            if config.pdf.library == "fitz":
                return FitzPDFParser(source, config)
            elif config.pdf.library == "pymupdf4llm":
                return PyMuPDF4LLMParser(source, config)
            elif config.pdf.library == "docling":
                return DoclingParser(source, config)
            elif config.pdf.library == "pypdf":
                return PyPDFParser(source, config)
            elif config.pdf.library == "unstructured":
                return UnstructuredPDFParser(source, config)
            elif config.pdf.library == "pdf2image":
                return ImagePdfParser(source, config)
            elif config.pdf.library == "llm-pdf-parser":
                return LLMPdfParser(source, config)
            elif config.pdf.library == "marker":
                return MarkerPdfParser(source, config)
            else:
                raise ValueError(
                    f"Unsupported PDF library specified: {config.pdf.library}"
                )
        elif inferred_doc_type == DocumentType.DOCX:
            if config.docx.library == "unstructured":
                return UnstructuredDocxParser(source, config)
            elif config.docx.library == "python-docx":
                return PythonDocxParser(source, config)
            elif config.docx.library == "markitdown-docx":
                return MarkitdownDocxParser(source, config)
            else:
                raise ValueError(
                    f"Unsupported DOCX library specified: {config.docx.library}"
                )
        elif inferred_doc_type == DocumentType.DOC:
            return UnstructuredDocParser(source, config)
        elif inferred_doc_type == DocumentType.XLS:
            return MarkitdownXLSXParser(source, config)
        elif inferred_doc_type == DocumentType.XLSX:
            return MarkitdownXLSXParser(source, config)
        elif inferred_doc_type == DocumentType.PPTX:
            return MarkitdownPPTXParser(source, config)
        else:
            source_name = source if isinstance(source, str) else "bytes"
            raise ValueError(f"Unsupported document type: {source_name}")

    def __init__(self, source: str | bytes, config: ParsingConfig):
        """
        Args:
            source (str|bytes): The source, which could be
            a path, a URL or a bytes object.
        """
        super().__init__(config)
        self.config = config
        if isinstance(source, bytes):
            self.source = "bytes"
            self.doc_bytes = BytesIO(source)
        else:
            self.source = source
            self.doc_bytes = self._load_doc_as_bytesio()

    @staticmethod
    def _document_type(
        source: str | bytes, doc_type: str | DocumentType | None = None
    ) -> DocumentType:
        """
        Determine the type of document based on the source.

        Args:
            source (str|bytes): The source, which could be a URL,
                a file path, or a bytes object.
            doc_type (str|DocumentType|None): The type of document, if known.

        Returns:
            str: The document type.
        """
        if isinstance(doc_type, DocumentType):
            return doc_type
        if doc_type:
            return DocumentType(doc_type.lower())
        if is_plain_text(source):
            return DocumentType.TXT
        if isinstance(source, str):
            # detect file type from path extension
            if source.lower().endswith(".pdf"):
                return DocumentType.PDF
            elif source.lower().endswith(".docx"):
                return DocumentType.DOCX
            elif source.lower().endswith(".doc"):
                return DocumentType.DOC
            elif source.lower().endswith(".xlsx"):
                return DocumentType.XLSX
            elif source.lower().endswith(".xls"):
                return DocumentType.XLS
            elif source.lower().endswith(".pptx"):
                return DocumentType.PPTX
            else:
                raise ValueError(f"Unsupported document type: {source}")
        else:
            # must be bytes: attempt to detect type from content
            # using magic mime type detection
            import magic

            mime_type = magic.from_buffer(source, mime=True)
            if mime_type == "application/pdf":
                return DocumentType.PDF
            elif mime_type in [
                "application/vnd.openxmlformats-officedocument"
                ".wordprocessingml.document",
            ]:
                return DocumentType.DOCX
            elif mime_type == "application/msword":
                return DocumentType.DOC
            elif (
                mime_type
                == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            ):
                return DocumentType.XLSX
            elif mime_type == "application/vnd.ms-excel":
                return DocumentType.XLS
            else:
                raise ValueError("Unsupported document type from bytes")

    def _load_doc_as_bytesio(self) -> BytesIO:
        """
        Load the docs into a BytesIO object.

        Returns:
            BytesIO: A BytesIO object containing the doc data.
        """
        if self.source.startswith(("http://", "https://")):
            response = requests.get(self.source)
            response.raise_for_status()
            return BytesIO(response.content)
        else:
            with open(self.source, "rb") as f:
                return BytesIO(f.read())

    @staticmethod
    def chunks_from_path_or_bytes(
        source: str | bytes,
        parser: Parser,
        doc_type: str | DocumentType | None = None,
        lines: int | None = None,
    ) -> List[Document]:
        """
        Get document chunks from a file path or bytes object.
        Args:
            source (str|bytes): The source, which could be a URL, path or bytes object.
            parser (Parser): The parser instance (for splitting the document).
            doc_type (str|DocumentType|None): The type of document, if known.
            lines (int|None): The number of lines to read from a plain text file.
        Returns:
            List[Document]: A list of `Document` objects,
                each containing a chunk of text, determined by the
                chunking and splitting settings in the parser config.
        """
        dtype: DocumentType = DocumentParser._document_type(source, doc_type)
        if dtype in [
            DocumentType.PDF,
            DocumentType.DOC,
            DocumentType.DOCX,
            DocumentType.PPTX,
            DocumentType.XLS,
            DocumentType.XLSX,
        ]:
            doc_parser = DocumentParser.create(
                source,
                parser.config,
                doc_type=doc_type,
            )
            chunks = doc_parser.get_doc_chunks()
            if len(chunks) == 0 and dtype == DocumentType.PDF:
                doc_parser = ImagePdfParser(source, parser.config)
                chunks = doc_parser.get_doc_chunks()
            return chunks
        else:
            # try getting as plain text; these will be chunked downstream
            # -- could be a bytes object or a path
            if isinstance(source, bytes):
                content = source.decode()
                if lines is not None:
                    file_lines = content.splitlines()[:lines]
                    content = "\n".join(line.strip() for line in file_lines)
            else:
                with open(source, "r") as f:
                    if lines is not None:
                        file_lines = list(itertools.islice(f, lines))
                        content = "\n".join(line.strip() for line in file_lines)
                    else:
                        content = f.read()
            soup = BeautifulSoup(content, "html.parser")
            text = soup.get_text()
            source_name = source if isinstance(source, str) else "bytes"
            doc = Document(
                content=text,
                metadata=DocMetaData(source=str(source_name)),
            )
            return parser.split([doc])

    def iterate_pages(self) -> Generator[Tuple[int, Any], None, None]:
        """Yield each page in the PDF."""
        raise NotImplementedError

    def get_document_from_page(self, page: Any) -> Document:
        """
        Get Langroid Document object (with possible metadata)
        corresponding to a given page.
        """
        raise NotImplementedError

    def fix_text(self, text: str) -> str:
        """
        Fix text extracted from a PDF.

        Args:
            text (str): The extracted text.

        Returns:
            str: The fixed text.
        """
        # Some pdf parsers introduce extra space before hyphen,
        # so use regular expression to replace 'space-hyphen' with just 'hyphen'
        return re.sub(r" +\-", "-", text)

    def get_doc(self) -> Document:
        """
        Get entire text from source as a single document.

        Returns:
            a `Document` object containing the content of the pdf file,
                and metadata containing source name (URL or path)
        """

        text = "".join(
            [
                self.get_document_from_page(page).content
                for _, page in self.iterate_pages()
            ]
        )
        return Document(content=text, metadata=DocMetaData(source=self.source))

    def get_doc_chunks(self) -> List[Document]:
        """
        Get document chunks from a pdf source,
        with page references in the document metadata.

        Returns:
            List[Document]: a list of `Document` objects,
                each containing a chunk of text
        """

        split = []  # tokens in curr split
        pages: List[str] = []
        docs: List[Document] = []
        # metadata.id to be shared by ALL chunks of this document
        common_id = ObjectRegistry.new_id()
        n_chunks = 0  # how many chunk so far
        for i, page in self.iterate_pages():
            # not used but could be useful, esp to blend the
            # metadata from the pages into the chunks
            page_doc = self.get_document_from_page(page)
            page_text = page_doc.content
            split += self.tokenizer.encode(page_text)
            pages.append(str(i + 1))
            # split could be so long it needs to be split
            # into multiple chunks. Or it could be so short
            # that it needs to be combined with the next chunk.
            while len(split) > self.config.chunk_size:
                # pretty formatting of pages (e.g. 1-3, 4, 5-7)
                p_0 = int(pages[0]) - self.config.page_number_offset
                p_n = int(pages[-1]) - self.config.page_number_offset
                page_str = f"pages {p_0}-{p_n}" if p_0 != p_n else f"page {p_0}"
                text = self.tokenizer.decode(split[: self.config.chunk_size])
                docs.append(
                    Document(
                        content=text,
                        metadata=DocMetaData(
                            source=f"{self.source} {page_str}",
                            is_chunk=True,
                            id=common_id,
                        ),
                    )
                )
                n_chunks += 1
                split = split[self.config.chunk_size - self.config.overlap :]
                pages = [str(i + 1)]
        # there may be a last split remaining:
        # if it's shorter than the overlap, we shouldn't make a chunk for it
        # since it's already included in the prior chunk;
        # the only exception is if there have been no chunks so far.
        if len(split) > self.config.overlap or n_chunks == 0:
            p_0 = int(pages[0]) - self.config.page_number_offset
            p_n = int(pages[-1]) - self.config.page_number_offset
            page_str = f"pages {p_0}-{p_n}" if p_0 != p_n else f"page {p_0}"
            text = self.tokenizer.decode(split[: self.config.chunk_size])
            docs.append(
                Document(
                    content=text,
                    metadata=DocMetaData(
                        source=f"{self.source} {page_str}",
                        is_chunk=True,
                        id=common_id,
                    ),
                )
            )
        self.add_window_ids(docs)
        return docs


class FitzPDFParser(DocumentParser):
    """
    Parser for processing PDFs using the `fitz` library.
    """

    def iterate_pages(self) -> Generator[Tuple[int, "fitz.Page"], None, None]:
        """
        Yield each page in the PDF using `fitz`.

        Returns:
            Generator[fitz.Page]: Generator yielding each page.
        """
        try:
            import fitz
        except ImportError:
            LangroidImportError("fitz", "doc-chat")
        doc = fitz.open(stream=self.doc_bytes, filetype="pdf")
        for i, page in enumerate(doc):
            yield i, page
        doc.close()

    def get_document_from_page(self, page: "fitz.Page") -> Document:
        """
        Get Document object from a given `fitz` page.

        Args:
            page (fitz.Page): The `fitz` page object.

        Returns:
            Document: Document object, with content and possible metadata.
        """
        return Document(
            content=self.fix_text(page.get_text()),
            metadata=DocMetaData(source=self.source),
        )


class PyMuPDF4LLMParser(DocumentParser):
    """
    Parser for processing PDFs using the `pymupdf4llm` library.
    """

    def iterate_pages(self) -> Generator[Tuple[int, "fitz.Page"], None, None]:
        """
        Yield each page in the PDF using `fitz`.

        Returns:
            Generator[fitz.Page]: Generator yielding each page.
        """
        try:
            import pymupdf4llm  # noqa
            import fitz
        except ImportError:
            raise LangroidImportError(
                "pymupdf4llm", ["pymupdf4llm", "all", "pdf-parsers", "doc-chat"]
            )
        doc: fitz.Document = fitz.open(stream=self.doc_bytes, filetype="pdf")
        pages: List[Dict[str, Any]] = pymupdf4llm.to_markdown(doc, page_chunks=True)
        for i, page in enumerate(pages):
            yield i, page
        doc.close()

    def get_document_from_page(self, page: Dict[str, Any]) -> Document:
        """
        Get Document object corresponding to a given "page-chunk"
        dictionary, see:
         https://pymupdf.readthedocs.io/en/latest/pymupdf4llm/api.html


        Args:
            page (Dict[str,Any]): The "page-chunk" dictionary.

        Returns:
            Document: Document object, with content and possible metadata.
        """
        return Document(
            content=self.fix_text(page.get("text", "")),
            # TODO could possible use other metadata from page, see above link.
            metadata=DocMetaData(source=self.source),
        )


class DoclingParser(DocumentParser):
    """
    Parser for processing PDFs using the `docling` library.
    """

    def iterate_pages(self) -> Generator[Tuple[int, Any], None, None]:
        """
        Yield each page in the PDF using `docling`.
        Code largely from this example:
        https://github.com/DS4SD/docling/blob/4d41db3f7abb86c8c65386bf94e7eb0bf22bb82b/docs/examples/export_figures.py

        Returns:
            Generator[docling.Page]: Generator yielding each page.
        """
        try:
            import docling  # noqa
        except ImportError:
            raise LangroidImportError(
                "docling", ["docling", "pdf-parsers", "all", "doc-chat"]
            )

        from docling.datamodel.base_models import InputFormat  # type: ignore
        from docling.datamodel.pipeline_options import PdfPipelineOptions
        from docling.document_converter import (  # type: ignore
            ConversionResult,
            DocumentConverter,
            PdfFormatOption,
        )
        from docling_core.types.doc import ImageRefMode  # type: ignore

        IMAGE_RESOLUTION_SCALE = 2.0
        pipeline_options = PdfPipelineOptions()
        pipeline_options.images_scale = IMAGE_RESOLUTION_SCALE
        pipeline_options.generate_page_images = True
        pipeline_options.generate_picture_images = True

        converter = DocumentConverter(
            format_options={
                InputFormat.PDF: PdfFormatOption(pipeline_options=pipeline_options)
            }
        )
        doc_path = self.source
        if doc_path == "bytes":
            # write to tmp file, then use that path
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as temp_file:
                temp_file.write(self.doc_bytes.getvalue())
                doc_path = temp_file.name

        output_dir = Path(str(Path(doc_path).with_suffix("")) + "-pages")
        os.makedirs(output_dir, exist_ok=True)

        result: ConversionResult = converter.convert(doc_path)

        def n_page_elements(page) -> int:  # type: ignore
            if page.assembled is None:
                return 0
            return 1 + len(page.assembled.elements)

        page_element_count = [n_page_elements(i) for i in result.pages]
        element_page_cutoff = list(accumulate([1] + page_element_count))
        for i, page in enumerate(result.pages):
            page_start = element_page_cutoff[i]
            page_end = element_page_cutoff[i + 1]
            md_file = output_dir / f"page_{i}.md"
            # we could have just directly exported to a markdown string,
            # but we need to save to a file to force generation of image-files.
            result.document.save_as_markdown(
                md_file,
                image_mode=ImageRefMode.REFERENCED,
                from_element=page_start,
                to_element=page_end,
            )
            yield i, md_file

    def get_document_from_page(self, md_file: str) -> Document:
        """
        Get Document object from a given 1-page markdown file,
        possibly containing image refs.

        Args:
            md_file (str): The markdown file path for the page.

        Returns:
            Document: Document object, with content and possible metadata.
        """
        with open(md_file, "r") as f:
            text = f.read()
        return Document(
            content=self.fix_text(text),
            metadata=DocMetaData(source=self.source),
        )


class PyPDFParser(DocumentParser):
    """
    Parser for processing PDFs using the `pypdf` library.
    """

    def iterate_pages(self) -> Generator[Tuple[int, pypdf.PageObject], None, None]:
        """
        Yield each page in the PDF using `pypdf`.

        Returns:
            Generator[pypdf.pdf.PageObject]: Generator yielding each page.
        """
        try:
            import pypdf
        except ImportError:
            raise LangroidImportError("pypdf", "pdf-parsers")
        reader = pypdf.PdfReader(self.doc_bytes)
        for i, page in enumerate(reader.pages):
            yield i, page

    def get_document_from_page(self, page: pypdf.PageObject) -> Document:
        """
        Get Document object from a given `pypdf` page.

        Args:
            page (pypdf.pdf.PageObject): The `pypdf` page object.

        Returns:
            Document: Document object, with content and possible metadata.
        """
        return Document(
            content=self.fix_text(page.extract_text()),
            metadata=DocMetaData(source=self.source),
        )


class ImagePdfParser(DocumentParser):
    """
    Parser for processing PDFs that are images, i.e. not "true" PDFs.
    """

    def iterate_pages(
        self,
    ) -> Generator[Tuple[int, "Image"], None, None]:  # type: ignore
        try:
            from pdf2image import convert_from_bytes
        except ImportError:
            raise LangroidImportError("pdf2image", "pdf-parsers")

        images = convert_from_bytes(self.doc_bytes.getvalue())
        for i, image in enumerate(images):
            yield i, image

    def get_document_from_page(self, page: "Image") -> Document:  # type: ignore
        """
        Get Document object corresponding to a given `pdf2image` page.

        Args:
            page (Image): The PIL Image object.

        Returns:
            Document: Document object, with content and possible metadata.
        """
        try:
            import pytesseract
        except ImportError:
            raise LangroidImportError("pytesseract", "pdf-parsers")

        text = pytesseract.image_to_string(page)
        return Document(
            content=self.fix_text(text),
            metadata=DocMetaData(source=self.source),
        )


class UnstructuredPDFParser(DocumentParser):
    """
    Parser for processing PDF files using the `unstructured` library.
    """

    def iterate_pages(self) -> Generator[Tuple[int, Any], None, None]:  # type: ignore
        try:
            from unstructured.partition.pdf import partition_pdf
        except ImportError:
            raise ImportError(
                """
                The `unstructured` library is not installed by default with langroid.
                To include this library, please install langroid with the
                `unstructured` extra by running `pip install "langroid[unstructured]"`
                or equivalent.
                """
            )

        # from unstructured.chunking.title import chunk_by_title

        try:
            elements = partition_pdf(file=self.doc_bytes, include_page_breaks=True)
        except Exception as e:
            raise Exception(
                f"""
                Error parsing PDF: {e}
                The `unstructured` library failed to parse the pdf.
                Please try a different library by setting the `library` field
                in the `pdf` section of the `parsing` field in the config file.
                Other supported libraries are:
                fitz, pymupdf4llm, pypdf
                """
            )

        # elements = chunk_by_title(elements)
        page_number = 1
        page_elements = []  # type: ignore
        for el in elements:
            if el.category == "PageBreak":
                if page_elements:  # Avoid yielding empty pages at the start
                    yield page_number, page_elements
                page_number += 1
                page_elements = []
            else:
                page_elements.append(el)
        # Yield the last page if it's not empty
        if page_elements:
            yield page_number, page_elements

    def get_document_from_page(self, page: Any) -> Document:
        """
        Get Document object from a given `unstructured` element.

        Args:
            page (unstructured element): The `unstructured` element object.

        Returns:
            Document: Document object, with content and possible metadata.
        """
        text = " ".join(el.text for el in page)
        return Document(
            content=self.fix_text(text),
            metadata=DocMetaData(source=self.source),
        )


class UnstructuredDocxParser(DocumentParser):
    """
    Parser for processing DOCX files using the `unstructured` library.
    """

    def iterate_pages(self) -> Generator[Tuple[int, Any], None, None]:  # type: ignore
        try:
            from unstructured.partition.docx import partition_docx
        except ImportError:
            raise ImportError(
                """
                The `unstructured` library is not installed by default with langroid.
                To include this library, please install langroid with the
                `unstructured` extra by running `pip install "langroid[unstructured]"`
                or equivalent.
                """
            )

        elements = partition_docx(file=self.doc_bytes, include_page_breaks=True)

        page_number = 1
        page_elements = []  # type: ignore
        for el in elements:
            if el.category == "PageBreak":
                if page_elements:  # Avoid yielding empty pages at the start
                    yield page_number, page_elements
                page_number += 1
                page_elements = []
            else:
                page_elements.append(el)
        # Yield the last page if it's not empty
        if page_elements:
            yield page_number, page_elements

    def get_document_from_page(self, page: Any) -> Document:
        """
        Get Document object from a given `unstructured` element.

        Note:
            The concept of "pages" doesn't actually exist in the .docx file format in
            the same way it does in formats like .pdf. A .docx file is made up of a
            series of elements like paragraphs and tables, but the division into
            pages is done dynamically based on the rendering settings (like the page
            size, margin size, font size, etc.).

        Args:
            page (unstructured element): The `unstructured` element object.

        Returns:
            Document object, with content and possible metadata.
        """
        text = " ".join(el.text for el in page)
        return Document(
            content=self.fix_text(text),
            metadata=DocMetaData(source=self.source),
        )


class UnstructuredDocParser(UnstructuredDocxParser):
    def iterate_pages(self) -> Generator[Tuple[int, Any], None, None]:  # type: ignore
        try:
            from unstructured.partition.doc import partition_doc
        except ImportError:
            raise ImportError(
                """
                The `unstructured` library is not installed by default with langroid.
                To include this library, please install langroid with the
                `unstructured` extra by running `pip install "langroid[unstructured]"`
                or equivalent.
                """
            )

        elements = partition_doc(file=self.doc_bytes, include_page_breaks=True)

        page_number = 1
        page_elements = []  # type: ignore
        for el in elements:
            if el.category == "PageBreak":
                if page_elements:  # Avoid yielding empty pages at the start
                    yield page_number, page_elements
                page_number += 1
                page_elements = []
            else:
                page_elements.append(el)
        # Yield the last page if it's not empty
        if page_elements:
            yield page_number, page_elements


class PythonDocxParser(DocumentParser):
    """
    Parser for processing DOCX files using the `python-docx` library.
    """

    def iterate_pages(self) -> Generator[Tuple[int, Any], None, None]:
        """
        Simulate iterating through pages.
        In a DOCX file, pages are not explicitly defined,
        so we consider each paragraph as a separate 'page' for simplicity.
        """
        try:
            import docx
        except ImportError:
            raise LangroidImportError("python-docx", "docx")

        doc = docx.Document(self.doc_bytes)
        for i, para in enumerate(doc.paragraphs, start=1):
            yield i, [para]

    def get_document_from_page(self, page: Any) -> Document:
        """
        Get Document object from a given 'page', which in this case is a single
        paragraph.

        Args:
            page (list): A list containing a single Paragraph object.

        Returns:
            Document: Document object, with content and possible metadata.
        """
        paragraph = page[0]
        return Document(
            content=self.fix_text(paragraph.text),
            metadata=DocMetaData(source=self.source),
        )


class MarkitdownDocxParser(DocumentParser):
    def iterate_pages(self) -> Generator[Tuple[int, Any], None, None]:
        try:
            from markitdown import MarkItDown
        except ImportError:
            LangroidImportError("markitdown", ["markitdown", "doc-parsers"])
        md = MarkItDown()
        self.doc_bytes.seek(0)  # Reset to start

        # Direct conversion from stream works for DOCX (unlike XLSX)
        result = md.convert_stream(self.doc_bytes, file_extension=".docx")

        # Split content into logical sections (paragraphs, sections, etc.)
        # This approach differs from the strict page-based approach used for PDFs
        sections = re.split(r"(?=# |\n## |\n### )", result.text_content)

        # Filter out empty sections
        sections = [section for section in sections if section.strip()]

        for i, section in enumerate(sections):
            yield i, section

    def get_document_from_page(self, md_content: str) -> Document:
        """
        Get Document object from a given markdown section.

        Args:
            md_content (str): The markdown content for the section.

        Returns:
            Document: Document object, with content and possible metadata.
        """
        return Document(
            content=self.fix_text(md_content),
            metadata=DocMetaData(source=self.source),
        )


class MarkitdownXLSXParser(DocumentParser):
    def iterate_pages(self) -> Generator[Tuple[int, Any], None, None]:
        try:
            from markitdown import MarkItDown
        except ImportError:
            LangroidImportError("markitdown", "doc-parsers")
        md = MarkItDown()
        self.doc_bytes.seek(0)  # Reset to start

        # Save stream to a temp file since md.convert() expects a path or URL
        # Temporary workaround until markitdown fixes convert_stream function
        # for xls and xlsx files
        # See issue here https://github.com/microsoft/markitdown/issues/321
        with tempfile.NamedTemporaryFile(delete=True, suffix=".xlsx") as temp_file:
            temp_file.write(self.doc_bytes.read())
            temp_file.flush()  # Ensure data is written before reading
            result = md.convert(temp_file.name)

        sheets = re.split(r"(?=## Sheet\d+)", result.text_content)

        for i, sheet in enumerate(sheets):
            yield i, sheet

    def get_document_from_page(self, md_content: str) -> Document:
        """
        Get Document object from a given 1-page markdown string.

        Args:
            md_content (str): The markdown content for the page.

        Returns:
            Document: Document object, with content and possible metadata.
        """
        return Document(
            content=self.fix_text(md_content),
            metadata=DocMetaData(source=self.source),
        )


class MarkitdownPPTXParser(DocumentParser):
    def iterate_pages(self) -> Generator[Tuple[int, Any], None, None]:
        try:
            from markitdown import MarkItDown
        except ImportError:
            LangroidImportError("markitdown", "doc-parsers")

        md = MarkItDown()
        self.doc_bytes.seek(0)
        result = md.convert_stream(self.doc_bytes, file_extension=".pptx")
        slides = re.split(r"(?=<!-- Slide number: \d+ -->)", result.text_content)
        for i, slide in enumerate(slides):
            yield i, slide

    def get_document_from_page(self, md_content: str) -> Document:
        """
        Get Document object from a given 1-page markdown string.

        Args:
            md_content (str): The markdown content for the page.

        Returns:
            Document: Document object, with content and possible metadata.
        """
        return Document(
            content=self.fix_text(md_content),
            metadata=DocMetaData(source=self.source),
        )


class LLMPdfParser(DocumentParser):
    """
    This class converts PDFs to Markdown using multimodal LLMs.

    It extracts pages, converts them with the LLM (replacing images with
    detailed descriptions), and outputs Markdown page by page. The
    conversion follows `LLM_PDF_MD_SYSTEM_INSTRUCTION`. It employs
    multiprocessing for speed, async requests with rate limiting, and
    handles errors.

    It supports page-by-page splitting or chunking multiple pages into
    one, respecting page boundaries and a `max_token_limit`.
    """

    DEFAULT_MAX_TOKENS = 7000
    OUTPUT_DIR = Path(".llm_pdfparser")  # Fixed output directory

    LLM_PDF_MD_SYSTEM_INSTRUCTION = """
    ### **Convert PDF to Markdown**
    1. **Text:**
        * Preserve structure, formatting (**bold**, *italic*), lists, and indentation.
        * **Remove running heads (page numbers, headers/footers).**
        * Keep section and chapter titles; discard repeated page headers.
    2. **Images:** Replace with **detailed, creative descriptions**
    optimized for clarity and understanding.
    3. **Tables:** Convert to Markdown tables with proper structure.
    4. **Math:** Use LaTeX (`...` inline, `$...$` block).
    5. **Code:** Wrap in fenced blocks without specifying a language:

        ```
        code
        ```
    6. **Clean Output:**
        * No system messages, metadata, or artifacts or ```markdown``` identifier.
        * Do **not** include introductory or explanatory messages
        like "Here is your output."
        * Ensure formatting is **consistent and structured**
        for feeding into a markdown parser.
    """.strip()

    def __init__(self, source: Union[str, bytes], config: ParsingConfig):
        super().__init__(source, config)
        if not config.pdf.llm_parser_config:
            raise ValueError(
                "LLMPdfParser requires a llm-based config in pdf parsing config"
            )
        self.llm_parser_config: LLMPdfParserConfig = config.pdf.llm_parser_config
        self.model_name = self.llm_parser_config.model_name

        # Ensure output directory exists
        self.OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

        prefix = (
            Path(source).stem + "_"
            if isinstance(source, str) and Path(source).exists()
            else "output_"
        )
        temp_file = tempfile.NamedTemporaryFile(
            suffix=".md",
            prefix=prefix,
            dir=str(self.OUTPUT_DIR),
            delete=False,
        )
        temp_file.close()
        self.output_filename = Path(temp_file.name)

        self.max_tokens = self.llm_parser_config.max_tokens or self.DEFAULT_MAX_TOKENS

        """
        If True, each PDF page is processed as a separate chunk,
        resulting in one LLM request per page. If False, pages are
        grouped into chunks based on `max_token_limit` before being sent
        to the LLM.
        """
        self.split_on_page = self.llm_parser_config.split_on_page or False

        # Rate limiting parameters
        import asyncio

        self.requests_per_minute = self.llm_parser_config.requests_per_minute or 5

        """
        A semaphore to control the number of concurrent requests to the LLM,
        preventing rate limit errors.  A semaphore slot is acquired before
        making an LLM request and released after the request is complete.
        """
        self.semaphore = asyncio.Semaphore(self.requests_per_minute)
        self.retry_delay = 5  # seconds, for exponential backoff
        self.max_retries = 3

    def _extract_page(self, page_num: int) -> Dict[str, Any]:
        """
        Extracts a single page and estimates token count.
        Opens the PDF from self.doc_bytes (a BytesIO object).
        """
        import fitz

        try:
            # Always open the document from in-memory bytes.
            doc = fitz.open(stream=self.doc_bytes.getvalue(), filetype="pdf")
            new_pdf = fitz.open()
            new_pdf.insert_pdf(doc, from_page=page_num, to_page=page_num)
            pdf_bytes = new_pdf.write()
            text = doc[page_num].get_text("text")
            token_count = len(text) // 4 if text else len(pdf_bytes) // 4

            return {
                "page_numbers": page_num + 1,
                "pdf_bytes": pdf_bytes,
                "token_count": token_count,
            }
        except Exception as e:
            raise ValueError(f"Error processing PDF document: {e}") from e

    def _extract_pdf_pages_parallel(
        self, num_workers: Optional[int] = None
    ) -> List[Dict[str, Any]]:
        """Parallel PDF page extraction using self.doc_bytes."""
        from multiprocessing import Pool, cpu_count

        import fitz
        from tqdm import tqdm

        try:
            doc = fitz.open(stream=self.doc_bytes.getvalue(), filetype="pdf")
            total_pages = len(doc)
        except Exception as e:
            raise ValueError(f"Error opening PDF document: {e}") from e

        num_workers = num_workers or cpu_count()
        with Pool(num_workers) as pool:
            with tqdm(total=total_pages, desc="Extracting pages", unit="page") as pbar:
                results = []
                for result in pool.imap(self._extract_page, range(total_pages)):
                    results.append(result)
                    pbar.update(1)

        return results

    def _group_pages_by_token_limit(
        self, pages: List[Dict[str, Any]], max_tokens: int = DEFAULT_MAX_TOKENS
    ) -> List[List[Dict[str, Any]]]:
        """Groups pages into chunks where each chunk is approximately `max_tokens`."""
        chunks: List[List[Dict[str, Any]]] = []
        current_chunk: List[Dict[str, Any]] = []
        current_tokens = 0

        for page in pages:
            if current_tokens + page["token_count"] > max_tokens and current_chunk:
                chunks.append(current_chunk)
                current_chunk = []
                current_tokens = 0

            current_chunk.append(page)
            current_tokens += page["token_count"]

        if current_chunk:  # Add remaining pages
            chunks.append(current_chunk)

        return chunks

    def _merge_pages_into_pdf_with_metadata(
        self, page_group: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        Merges grouped pages into a single binary chunk so that
        it does not exceed max token limit
        """
        import fitz

        merged_pdf = fitz.open()
        page_numbers = []

        for page in page_group:
            temp_pdf = fitz.open("pdf", page["pdf_bytes"])
            merged_pdf.insert_pdf(temp_pdf)
            page_numbers.append(page["page_numbers"])

        return {
            "pdf_bytes": merged_pdf.write(),  # Binary PDF data
            "page_numbers": page_numbers,  # List of page numbers in this chunk
        }

    def _prepare_pdf_chunks_for_llm(
        self,
        num_workers: Optional[int] = None,
        max_tokens: int = DEFAULT_MAX_TOKENS,
        split_on_page: bool = False,
    ) -> List[Dict[str, Any]]:
        """
        Extracts, groups, and merges PDF pages into chunks with embedded page markers.
        """
        from multiprocessing import Pool

        pages = self._extract_pdf_pages_parallel(num_workers)

        if split_on_page:
            # Each page becomes its own chunk
            return pages
        else:
            # Group pages based on token limit
            chunks = self._group_pages_by_token_limit(pages, max_tokens)
            with Pool(num_workers) as pool:
                pdf_chunks = pool.map(self._merge_pages_into_pdf_with_metadata, chunks)
            return pdf_chunks

    @staticmethod
    def _page_num_str(page_numbers: Any) -> str:
        """
        Converts page numbers to a formatted string.
        """
        if isinstance(page_numbers, list):
            if len(page_numbers) == 0:
                return ""
            return str(page_numbers[0]) + "-" + str(page_numbers[-1])
        elif isinstance(page_numbers, int):
            return str(page_numbers)
        else:
            return str(page_numbers).replace(" ", "-")

    async def _send_chunk_to_llm(self, chunk: Dict[str, Any]) -> str:
        """
        Sends a PDF chunk to the LLM API and returns the response text.
        Uses retries with exponential backoff to handle transient failures.
        """
        import asyncio
        import logging

        from langroid.language_models.openai_gpt import OpenAIGPT, OpenAIGPTConfig

        async with self.semaphore:  # Limit concurrent API requests
            for attempt in range(self.max_retries):
                try:
                    llm_config = OpenAIGPTConfig(
                        chat_model=self.model_name,
                        max_output_tokens=self.max_tokens,
                        timeout=self.llm_parser_config.timeout,
                    )
                    llm = OpenAIGPT(config=llm_config)
                    page_nums = self._page_num_str(chunk.get("page_numbers", "?"))
                    base64_string = base64.b64encode(chunk["pdf_bytes"]).decode("utf-8")
                    data_uri = f"data:application/pdf;base64,{base64_string}"
                    if "gemini" in self.model_name.lower():
                        file_content = dict(
                            type="image_url",
                            image_url=dict(url=data_uri),
                        )
                    elif "claude" in self.model_name.lower():
                        # optimistically try this: some API proxies like litellm
                        # support this, and others may not.
                        file_content = dict(
                            type="file",
                            file=dict(
                                file_data=data_uri,
                            ),
                        )
                    else:
                        # fallback: assume file upload is similar to OpenAI API
                        file_content = dict(
                            type="file",
                            file=dict(
                                filename=f"pages-{page_nums}.pdf",
                                file_data=data_uri,
                            ),
                        )
                    prompt = (
                        self.llm_parser_config.prompt
                        or self.LLM_PDF_MD_SYSTEM_INSTRUCTION
                    )
                    system_prompt = (
                        self.llm_parser_config.system_prompt
                        or """
                         You are an expert pdf -> markdown converter.
                         Do NOT use any triple backquotes when you present the
                         markdown content,like ```markdown etc.
                         FAITHFULLY CONVERT THE PDF TO MARKDOWN,
                         retaining ALL content as you find it.
                        """
                    )

                    # Send the request with PDF content and system instructions
                    response = await llm.async_client.chat.completions.create(  # type: ignore
                        model=self.model_name.split("/")[-1],
                        messages=[
                            dict(role="system", content=system_prompt),
                            dict(  # type: ignore
                                role="user",
                                content=[
                                    dict(
                                        type="text",
                                        text=prompt,
                                    ),
                                    file_content,
                                ],
                            ),
                        ],
                    )

                    # Return extracted text if available
                    return (
                        ""
                        if (
                            response is None
                            or not hasattr(response, "choices")
                            or not isinstance(response.choices, list)
                        )
                        else (response.choices[0].message.content)
                    )

                except Exception as e:
                    # Log error with page numbers for debugging
                    logging.error(
                        "Attempt %d failed for pages %s: %s",
                        attempt + 1,
                        chunk.get("page_numbers", "Unknown"),
                        e,
                    )

                    if attempt < self.max_retries - 1:
                        # Apply exponential backoff before retrying
                        delay = self.retry_delay * (2**attempt)
                        logging.info("Retrying in %s sec...", delay)
                        await asyncio.sleep(delay)
                    else:
                        # Log failure after max retries
                        page_nums = chunk.get("page_numbers", "Unknown")
                        logging.error(
                            f"""
                            Max retries reached for pages {page_nums}.
                            It is possible your LLM API provider for 
                            the model {self.model_name} does not support
                            file uploads via an OpenAI-compatible API.
                            """,
                        )
                        break
        return ""  # Return empty string if all retries fail

    async def process_chunks(self, chunks: List[Dict[str, Any]]) -> List[str]:
        """
        Processes PDF chunks by sending them to the LLM API and
        collecting the results.

        Args:
            chunks: A list of dictionaries, where each dictionary represents
                a PDF chunk and contains the PDF data and page numbers.
        """
        # To show nice progress bar
        from tqdm.asyncio import tqdm_asyncio

        # Create a list of asynchronous tasks to send each chunk to the LLM.
        # Chunk in this case might be single page or group of pages returned
        # by prepare_pdf_chunks function
        tasks = [self._send_chunk_to_llm(chunk) for chunk in chunks]

        # Gather the results from all tasks, allowing exceptions to be returned.
        # tqdm_asyncio is wrapper around asyncio.gather
        gathered_results = await tqdm_asyncio.gather(
            *tasks, desc="Processing chunks(pages)", unit="chunk"
        )
        results = []
        for i, result in enumerate(gathered_results):
            chunk = chunks[i]  # Get the corresponding chunk.

            if isinstance(result, Exception):
                # Handle exceptions that occurred during chunk processing.
                logging.error(
                    "Failed to process chunk %s: %s",
                    chunk.get("page_numbers", "Unknown"),
                    result,
                )
                results.append(
                    "<!----Error: Could not process chunk %s---->"
                    % chunk.get("page_numbers", "Unknown")
                )
            else:
                # Process successful results and append page/chunk markers.
                markdown = str(result)
                if self.split_on_page:
                    results.append(
                        markdown + f"<!----Page-{chunk['page_numbers']}---->"
                    )
                else:
                    results.append(
                        markdown + f"<!----Chunk-{chunk['page_numbers']}---->"
                    )

        return results  # Return the list of results.

    def iterate_pages(self) -> Generator[Tuple[int, Any], None, None]:
        """
        Iterates over the document pages, extracting content using the
        LLM API, saves them to a markdown file, and yields page numbers
        along with their corresponding content.

        Yields:
            A generator of tuples, where each tuple contains the page number
            (int) and the page content (Any).
        """
        import asyncio

        load_dotenv()
        try:
            # This involves extracting pages, grouping them according to the
            # `max_tokens` limit (if `split_on_page` is False), and
            # merging pages into larger PDF chunks. The result
            # is a list of dictionaries, where each dictionary contains the
            # PDF bytes and the associated page numbers or single page if
            # `split_on_page` is true

            pdf_chunks = self._prepare_pdf_chunks_for_llm(
                num_workers=8,
                max_tokens=self.max_tokens,
                split_on_page=self.split_on_page,
            )

            # We asynchronously processes each chunk, sending it
            # to the LLM and retrieving the Markdown output. It handles rate
            # limiting and retries.
            markdown_results = asyncio.run(self.process_chunks(pdf_chunks))

            # This file serves as an intermediate storage location for the
            # complete Markdown output.
            with open(self.output_filename, "w", encoding="utf-8") as outfile:
                outfile.write("\n\n".join(markdown_results))

            # Read the full Markdown content from the temporary file.
            with open(self.output_filename, "r", encoding="utf-8") as infile:
                full_markdown = infile.read()

            # The splitting is based on the `split_on_page` setting. If True,
            # the Markdown is split using the "Page-" marker. Otherwise, it's
            # split using the "Chunk-" marker.
            if self.split_on_page:
                pages = full_markdown.split("<!----Page-")
            else:
                pages = full_markdown.split("<!----Chunk-")

            # Remove the first element if it's empty (due to the split).
            if pages and pages[0] == "":
                pages = pages[1:]

            # Iterate over the pages or chunks and yield their content.
            for i, page in enumerate(pages):
                # Check for errors during processing.
                if "<!----Error:" in page:
                    page_content = page
                    logging.warning(f"Page {i}: Error processing chunk.")
                else:
                    # Extract the actual page content by removing the marker.
                    page_content = (
                        page.split("---->", 1)[1]
                        if len(page.split("---->", 1)) > 1
                        else page
                    )

                # Yield the page number and content.
                yield i, page_content

        except Exception as e:
            raise ValueError(f"Error processing document: {e}") from e

    def get_document_from_page(self, page: str) -> Document:
        """
        Get a Document object from a given markdown page.
        """
        return Document(
            content=page,
            metadata=DocMetaData(source=self.source),
        )


class MarkerPdfParser(DocumentParser):
    """
    Parse PDF files using the `marker` library: https://github.com/VikParuchuri/marker
    """

    DEFAULT_CONFIG = {"paginate_output": True, "output_format": "markdown"}

    def __init__(self, source: Union[str, bytes], config: ParsingConfig):
        super().__init__(source, config)
        user_config = (
            config.pdf.marker_config.config_dict if config.pdf.marker_config else {}
        )

        self.config_dict = {**MarkerPdfParser.DEFAULT_CONFIG, **user_config}

    def iterate_pages(self) -> Generator[Tuple[int, Any], None, None]:
        """
        Yield each page in the PDF using `marker`.
        """
        try:
            import marker  # noqa
        except ImportError:
            raise LangroidImportError(
                "marker-pdf", ["marker-pdf", "pdf-parsers", "all", "doc-chat"]
            )

        import re

        from marker.config.parser import ConfigParser
        from marker.converters.pdf import PdfConverter
        from marker.models import create_model_dict
        from marker.output import save_output

        config_parser = ConfigParser(self.config_dict)
        converter = PdfConverter(
            config=config_parser.generate_config_dict(),
            artifact_dict=create_model_dict(),
            processor_list=config_parser.get_processors(),
            renderer=config_parser.get_renderer(),
            llm_service=config_parser.get_llm_service(),
        )
        doc_path = self.source
        if doc_path == "bytes":
            # write to tmp file, then use that path
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as temp_file:
                temp_file.write(self.doc_bytes.getvalue())
                doc_path = temp_file.name

        output_dir = Path(str(Path(doc_path).with_suffix("")) + "-pages")
        os.makedirs(output_dir, exist_ok=True)
        filename = Path(doc_path).stem + "_converted"

        rendered = converter(doc_path)
        save_output(rendered, output_dir=output_dir, fname_base=filename)
        file_path = output_dir / f"{filename}.md"

        with open(file_path, "r", encoding="utf-8") as f:
            full_markdown = f.read()

        # Regex for splitting pages
        pages = re.split(r"\{\d+\}----+", full_markdown)

        page_no = 0
        for page in pages:
            if page.strip():
                yield page_no, page
            page_no += 1

    def get_document_from_page(self, page: str) -> Document:
        """
        Get Document object from a given 1-page markdown file,
        possibly containing image refs.

        Args:
            page (str): The page we get by splitting large md file from
            marker

        Returns:
            Document: Document object, with content and possible metadata.
        """
        return Document(
            content=self.fix_text(page),
            metadata=DocMetaData(source=self.source),
        )
</file>

<file path="langroid/parsing/file_attachment.py">
import base64
import mimetypes
import uuid
from pathlib import Path
from typing import Any, BinaryIO, Dict, Optional, Union
from urllib.parse import urlparse

from langroid.pydantic_v1 import BaseModel


class FileAttachment(BaseModel):
    """Represents a file attachment to be sent to an LLM API."""

    content: bytes
    filename: Optional[str] = None
    mime_type: str = "application/octet-stream"
    url: str | None = None
    detail: str | None = None

    def __init__(self, **data: Any) -> None:
        """Initialize with sensible defaults for filename if not provided."""
        if "filename" not in data or data["filename"] is None:
            # Generate a more readable unique filename
            unique_id = str(uuid.uuid4())[:8]
            data["filename"] = f"attachment_{unique_id}.bin"
        super().__init__(**data)

    @classmethod
    def _from_path(
        cls,
        file_path: Union[str, Path],
        detail: Optional[str] = None,
    ) -> "FileAttachment":
        """Create a FileAttachment from a file path.

        Args:
            file_path: Path to the file to attach

        Returns:
            FileAttachment instance
        """
        path = Path(file_path)
        with open(path, "rb") as f:
            content = f.read()

        mime_type, _ = mimetypes.guess_type(path)
        if mime_type is None:
            mime_type = "application/octet-stream"

        return cls(
            content=content,
            filename=path.name,
            mime_type=mime_type,
            detail=detail,
        )

    @classmethod
    def _from_url(
        cls,
        url: str,
        content: Optional[bytes] = None,
        filename: Optional[str] = None,
        mime_type: Optional[str] = None,
        detail: Optional[str] = None,
    ) -> "FileAttachment":
        """Create a FileAttachment from a URL.

        Args:
            url: URL to the file
            content: Optional raw bytes content (if already fetched)
            filename: Optional name to use for the file
            mime_type: MIME type of the content, guessed from filename or url

        Returns:
            FileAttachment instance
        """
        if filename is None and url:
            # Extract filename from URL if possible

            parsed_url = urlparse(url)
            path = parsed_url.path
            filename = path.split("/")[-1] if path else None

        if mime_type is None and filename:
            mime_type, _ = mimetypes.guess_type(filename)

        return cls(
            content=content or b"",  # Empty bytes if no content provided
            filename=filename,
            mime_type=mime_type or "application/octet-stream",
            url=url,
            detail=detail,
        )

    @classmethod
    def from_path(
        cls,
        path: Union[str, Path],
        detail: str | None = None,
    ) -> "FileAttachment":
        """Create a FileAttachment from either a local file path or a URL.

        Args:
            path_or_url: Path to the file or URL to fetch

        Returns:
            FileAttachment instance
        """
        # Convert to string if Path object
        path_str = str(path)

        # Check if it's a URL
        if path_str.startswith(("http://", "https://", "ftp://")):
            return cls._from_url(url=path_str, detail=detail)
        else:
            # Assume it's a local file path
            return cls._from_path(path_str, detail=detail)

    @classmethod
    def from_bytes(
        cls,
        content: bytes,
        filename: Optional[str] = None,
        mime_type: Optional[str] = None,
    ) -> "FileAttachment":
        """Create a FileAttachment from bytes content.

        Args:
            content: Raw bytes content
            filename: Optional name to use for the file
            mime_type: MIME type of the content, guessed from filename if provided

        Returns:
            FileAttachment instance
        """
        if mime_type is None and filename is not None:
            mime_type, _ = mimetypes.guess_type(filename)

        return cls(
            content=content,
            filename=filename,
            mime_type=mime_type or "application/octet-stream",
        )

    @classmethod
    def from_io(
        cls,
        file_obj: BinaryIO,
        filename: Optional[str] = None,
        mime_type: Optional[str] = None,
    ) -> "FileAttachment":
        """Create a FileAttachment from a file-like object.

        Args:
            file_obj: File-like object with binary content
            filename: Optional name to use for the file
            mime_type: MIME type of the content, guessed from filename if provided

        Returns:
            FileAttachment instance
        """
        content = file_obj.read()
        return cls.from_bytes(content, filename, mime_type)

    @classmethod
    def from_text(
        cls,
        text: str,
        filename: Optional[str] = None,
        mime_type: str = "text/plain",
        encoding: str = "utf-8",
    ) -> "FileAttachment":
        """Create a FileAttachment from text content.

        Args:
            text: Text content to include
            filename: Optional name to use for the file
            mime_type: MIME type of the content
            encoding: Text encoding to use

        Returns:
            FileAttachment instance
        """
        content = text.encode(encoding)
        return cls(content=content, filename=filename, mime_type=mime_type)

    def to_base64(self) -> str:
        """Convert content to base64 encoding.

        Returns:
            Base64 encoded string
        """
        return base64.b64encode(self.content).decode("utf-8")

    def to_data_uri(self) -> str:
        """Convert content to a data URI.

        Returns:
            A data URI string containing the base64-encoded content with MIME type
        """
        base64_content = self.to_base64()
        return f"data:{self.mime_type};base64,{base64_content}"

    def to_dict(self, model: str) -> Dict[str, Any]:
        """
        Convert to a dictionary suitable for API requests.
        Tested only for PDF files.

        Returns:
            Dictionary with file data
        """
        if (
            self.mime_type
            and self.mime_type.startswith("image/")
            or "gemini" in model.lower()
        ):
            # for gemini models, we use `image_url` for both pdf-files and images

            image_url_dict = {}

            # If we have a URL and it's a full http/https URL, use it directly
            if self.url and (
                self.url.startswith("http://") or self.url.startswith("https://")
            ):
                image_url_dict["url"] = self.url
            # Otherwise use base64 data URI
            else:
                image_url_dict["url"] = self.to_data_uri()

            # Add detail parameter if specified
            if self.detail:
                image_url_dict["detail"] = self.detail

            return dict(
                type="image_url",
                image_url=image_url_dict,
            )
        else:
            # For non-image files
            return dict(
                type="file",
                file=dict(
                    filename=self.filename,
                    file_data=self.to_data_uri(),
                ),
            )
</file>

<file path="langroid/parsing/md_parser.py">
import re
from typing import List

from langroid.pydantic_v1 import BaseModel, Field

HEADER_CONTEXT_SEP = "\n...\n"


# Pydantic model definition for a node in the markdown hierarchy
class Node(BaseModel):
    content: str  # The text of the header or content block
    path: List[str]  # List of header texts from root to this node
    children: List["Node"] = Field(default_factory=list)
    # Nested children nodes

    def __repr__(self) -> str:
        # for debug printing
        return (
            f"Node(content={self.content!r}, path={self.path!r}, "
            f"children={len(self.children)})"
        )

    # Pydantic v1 requires forward references for self-referencing models
    # Forward references will be resolved with the update_forward_refs call below.


# Resolve forward references for Node (required for recursive models in Pydantic v1)
Node.update_forward_refs()


def _cleanup_text(text: str) -> str:
    # 1) Convert alternative newline representations (any CRLF or CR) to a single '\n'
    text = text.replace("\r\n", "\n").replace("\r", "\n")

    # 2) Replace 3 or more consecutive newlines with exactly 2 newlines
    text = re.sub(r"\n{3,}", "\n\n", text)

    return text


HEADING_RE = re.compile(r"^(#{1,6})\s+(.*)$")


def parse_markdown_headings(md_text: str) -> List[Node]:
    """
    Parse `md_text` to extract a heading-based hierarchy, skipping lines
    that look like headings inside fenced code blocks. Each heading node
    will have a child node for the text that appears between this heading
    and the next heading.

    Returns a list of top-level Node objects.

    Example structure:
        Node(content='# Chapter 1', path=['# Chapter 1'], children=[
            Node(content='Intro paragraph...', path=['# Chapter 1'], children=[]),
            Node(content='## Section 1.1', path=['# Chapter 1', '## Section 1.1'],
                 children=[
                  Node(content='Some text in Section 1.1.', path=[...], children=[])
            ]),
            ...
        ])
    """
    # If doc is empty or only whitespace, return []
    if not md_text.strip():
        return []

    lines = md_text.splitlines(True)  # keep the newline characters

    # We'll scan line-by-line, track code-fence status, collect headings
    headings = []  # list of (level, heading_line, start_line_idx)
    in_code_fence = False
    fence_marker = None  # track which triple-backtick or ~~~ opened

    for i, line in enumerate(lines):
        # Check if we're toggling in/out of a fenced code block
        # Typically triple backtick or triple tilde: ``` or ~~~
        # We do a *loose* check: a line that starts with at least 3 backticks or tildes
        # ignoring trailing text. You can refine as needed.
        fence_match = re.match(r"^(```+|~~~+)", line.strip())
        if fence_match:
            # If we are not in a fence, we enter one;
            # If we are in a fence, we exit if the marker matches
            marker = fence_match.group(1)  # e.g. "```" or "~~~~"
            if not in_code_fence:
                in_code_fence = True
                fence_marker = marker[:3]  # store triple backtick or triple tilde
            else:
                # only close if the fence_marker matches
                # E.g. if we opened with ```, we close only on ```
                if fence_marker and marker.startswith(fence_marker):
                    in_code_fence = False
                    fence_marker = None

        if not in_code_fence:
            # Check if the line is a heading
            m = HEADING_RE.match(line)
            if m:
                hashes = m.group(1)  # e.g. "##"
                heading_text = line.rstrip("\n")  # entire line, exact
                level = len(hashes)
                headings.append((level, heading_text, i))

    # If no headings found, return a single root node with the entire text
    if not headings:
        return [Node(content=md_text.strip(), path=[], children=[])]

    # Add a sentinel heading at the end-of-file, so we can slice the last block
    # after the final real heading. We'll use level=0 so it doesn't form a real node.
    headings.append((0, "", len(lines)))

    # Now we build "heading blocks" with
    # (level, heading_text, start_line, end_line, content)
    heading_blocks = []
    for idx in range(len(headings) - 1):
        level, heading_line, start_i = headings[idx]
        next_level, _, next_start_i = headings[idx + 1]

        # Content is everything after the heading line until the next heading
        # i.e. lines[start_i+1 : next_start_i]
        block_content_lines = lines[start_i + 1 : next_start_i]
        block_content = "".join(block_content_lines).rstrip("\n")

        heading_blocks.append(
            {"level": level, "heading_text": heading_line, "content": block_content}
        )
    # (We skip the sentinel heading in the final result.)

    # We'll now convert heading_blocks into a tree using a stack-based approach
    root_nodes: List[Node] = []
    stack: List[Node] = []
    header_path: List[str] = []

    for hb in heading_blocks:
        level = hb["level"]  # type: ignore
        heading_txt = hb["heading_text"]
        content_txt = hb["content"]

        # --- Pop stack first! ---
        while stack and len(stack[-1].path) >= level:
            stack.pop()
            header_path.pop()

        # build new path, create a node for the heading
        new_path = header_path + [heading_txt]
        heading_node = Node(
            content=heading_txt, path=new_path, children=[]  # type: ignore
        )

        # Possibly create a content child for whatever lines were below the heading
        if content_txt.strip():  # type: ignore
            content_node = Node(
                content=content_txt, path=new_path, children=[]  # type: ignore
            )
            heading_node.children.append(content_node)

        # Attach heading_node to the stack top or as a root
        if stack:
            stack[-1].children.append(heading_node)
        else:
            root_nodes.append(heading_node)

        stack.append(heading_node)
        header_path.append(heading_txt)  # type: ignore

    return root_nodes


# The Chunk model for the final enriched chunks.
class Chunk(BaseModel):
    text: str  # The chunk text (which includes header context)
    path: List[str]  # The header path (list of header strings)
    token_count: int


# Configuration for chunking
class MarkdownChunkConfig(BaseModel):
    chunk_size: int = 200  # desired chunk size in tokens
    overlap_tokens: int = 30  # number of tokens to overlap between chunks
    variation_percent: float = 0.3  # allowed variation
    rollup: bool = True  # whether to roll up chunks
    header_context_sep: str = HEADER_CONTEXT_SEP  # separator for header context


# A simple tokenizer that counts tokens as whitespace-separated words.
def count_words(text: str) -> int:
    return len(text.split())


def recursive_chunk(text: str, config: MarkdownChunkConfig) -> List[str]:
    """
    Enhanced chunker that:
      1. Splits by paragraph (top-level).
      2. Splits paragraphs by sentences if needed (never mid-sentence unless huge).
      3. Allows going over the upper bound rather than splitting a single sentence.
      4. Overlaps only once between consecutive chunks.
      5. Looks ahead to avoid a "dangling" final chunk below the lower bound.
      6. Preserves \n\n (and other original spacing) as best as possible.
    """

    # -------------------------------------------------
    # Helpers
    # -------------------------------------------------
    def count_words(text_block: str) -> int:
        return len(text_block.split())

    lower_bound = int(config.chunk_size * (1 - config.variation_percent))
    upper_bound = int(config.chunk_size * (1 + config.variation_percent))

    # Quick check: if the entire text is short enough, return as-is.
    if count_words(text) <= upper_bound:
        return [text.strip()]

    # Split into paragraphs, preserving \n\n if it's there.
    raw_paragraphs = text.split("\n\n")
    paragraphs = []
    for i, p in enumerate(raw_paragraphs):
        if p.strip():
            # Re-append the double-newline if not the last piece
            if i < len(raw_paragraphs) - 1:
                paragraphs.append(p + "\n\n")
            else:
                paragraphs.append(p)

    # Split paragraphs into "segments": each segment is either
    # a full short paragraph or (if too big) a list of sentences.
    sentence_regex = r"(?<=[.!?])\s+"

    def split_paragraph_into_sentences(paragraph: str) -> List[str]:
        """
        Return a list of sentence-sized segments. If a single sentence
        is bigger than upper_bound, do a word-level fallback.
        """
        if count_words(paragraph) <= upper_bound:
            return [paragraph]

        sentences = re.split(sentence_regex, paragraph)
        # Clean up stray whitespace
        sentences = [s.strip() for s in sentences if s.strip()]

        expanded = []
        for s in sentences:
            if count_words(s) > upper_bound:
                expanded.extend(_fallback_word_split(s, config))
            else:
                expanded.append(s)
        return expanded

    def _fallback_word_split(long_text: str, cfg: MarkdownChunkConfig) -> List[str]:
        """
        As a last resort, split extremely large 'sentence' by words.
        """
        words = long_text.split()
        pieces = []
        start = 0
        while start < len(words):
            end = start + cfg.chunk_size
            chunk_words = words[start:end]
            pieces.append(" ".join(chunk_words))
            start = end
        return pieces

    # Build a list of segments
    segments = []
    for para in paragraphs:
        if count_words(para) > upper_bound:
            # split into sentences
            segs = split_paragraph_into_sentences(para)
            segments.extend(segs)
        else:
            segments.append(para)

    # -------------------------------------------------
    # Accumulate segments into final chunks
    # -------------------------------------------------
    chunks = []
    current_chunk = ""
    current_count = 0

    def flush_chunk() -> None:
        nonlocal current_chunk, current_count
        trimmed = current_chunk.strip()
        if trimmed:
            chunks.append(trimmed)
        current_chunk = ""
        current_count = 0

    def remaining_tokens_in_future(all_segments: List[str], current_index: int) -> int:
        """Sum of word counts from current_index onward."""
        return sum(count_words(s) for s in all_segments[current_index:])

    for i, seg in enumerate(segments):
        seg_count = count_words(seg)

        # If this single segment alone exceeds upper_bound, we accept it as a big chunk.
        if seg_count > upper_bound:
            # If we have something in the current chunk, flush it first
            flush_chunk()
            # Then store this large segment as its own chunk
            chunks.append(seg.strip())
            continue

        # Attempt to add seg to the current chunk
        if (current_count + seg_count) > upper_bound and (current_count >= lower_bound):
            # We would normally flush here, but let's see if we are nearing the end:
            # If the remaining tokens (including this one) is < lower_bound,
            # we just add it anyway to avoid creating a tiny final chunk.
            future_tokens = remaining_tokens_in_future(segments, i)
            if future_tokens < lower_bound:
                # Just add it (allowing to exceed upper bound)
                if current_chunk:
                    # Add space or preserve newline carefully
                    # We'll do a basic approach here:
                    if seg.startswith("\n\n"):
                        current_chunk += seg  # preserve double new line
                    else:
                        current_chunk += " " + seg
                    current_count = count_words(current_chunk)
                else:
                    current_chunk = seg
                    current_count = seg_count
            else:
                # Normal flush
                old_chunk = current_chunk
                flush_chunk()
                # Overlap from old_chunk
                overlap_tokens_list = (
                    old_chunk.split()[-config.overlap_tokens :] if old_chunk else []
                )
                overlap_str = (
                    " ".join(overlap_tokens_list) if overlap_tokens_list else ""
                )
                if overlap_str:
                    current_chunk = overlap_str + " " + seg
                else:
                    current_chunk = seg
                current_count = count_words(current_chunk)
        else:
            # Just accumulate
            if current_chunk:
                if seg.startswith("\n\n"):
                    current_chunk += seg
                else:
                    current_chunk += " " + seg
            else:
                current_chunk = seg
            current_count = count_words(current_chunk)

    # Flush leftover
    flush_chunk()

    # Return non-empty
    return [c for c in chunks if c.strip()]


# Function to process a Node and produce enriched chunks.
def chunk_node(node: Node, config: MarkdownChunkConfig) -> List[Chunk]:
    chunks: List[Chunk] = []

    # Check if this is a header-only node.
    is_header_only = node.path and node.content.strip() == node.path[-1]

    # Only generate a chunk for the node if it has non-header content,
    # or if it’s header-only AND has no children (i.e., it's a leaf header).
    if node.content.strip() and (not is_header_only or not node.children):
        header_prefix = (
            config.header_context_sep.join(node.path) + "\n\n" if node.path else ""
        )
        content_chunks = recursive_chunk(node.content, config)
        for chunk_text in content_chunks:
            full_text = header_prefix + chunk_text
            chunks.append(
                Chunk(
                    text=full_text, path=node.path, token_count=count_words(full_text)
                )
            )

    # Process children nodes recursively.
    for child in node.children:
        child_chunks = chunk_node(child, config)
        chunks.extend(child_chunks)

    return chunks


# Function to process an entire tree of Nodes.
def chunk_tree(root_nodes: List[Node], config: MarkdownChunkConfig) -> List[Chunk]:
    all_chunks: List[Chunk] = []
    for node in root_nodes:
        all_chunks.extend(chunk_node(node, config))
    return all_chunks


def aggregate_content(node: Node) -> str:
    """
    Recursively aggregate the content from a node and all its descendants,
    excluding header-only nodes to avoid duplication.
    """
    parts = []

    # Skip header-only nodes in content aggregation
    is_header_only = node.path and node.content.strip() == node.path[-1].strip()
    if not is_header_only and node.content.strip():
        parts.append(node.content.strip())

    # Recurse on children
    for child in node.children:
        child_text = aggregate_content(child)
        if child_text.strip():
            parts.append(child_text.strip())

    return "\n\n".join(parts)


def flatten_tree(node: Node, level: int = 0) -> str:
    """
    Flatten a node and its children back into proper markdown text.

    Args:
        node: The node to flatten
        level: The current heading level (depth in the tree)

    Returns:
        str: Properly formatted markdown text
    """
    result = ""

    # Check if this is a header node (content matches last item in path)
    is_header = node.path and node.content.strip().startswith("#")

    # For header nodes, don't duplicate the hash marks
    if is_header:
        result = node.content.strip() + "\n\n"
    elif node.content.strip():
        result = node.content.strip() + "\n\n"

    # Process all children
    for child in node.children:
        result += flatten_tree(child, level + 1)

    return result


def rollup_chunk_node(
    node: Node, config: MarkdownChunkConfig, prefix: str = ""
) -> List[Chunk]:
    """
    Recursively produce rollup chunks from `node`, passing down a `prefix`
    (e.g., parent heading(s)).

    - If a node is heading-only (content == last path item) and has children,
      we skip creating a chunk for that node alone and instead add that heading
      to the `prefix` for child nodes.
    - If a node is NOT heading-only OR has no children, we try to fit all of its
      flattened content into a single chunk. If it's too large, we chunk it.
    - We pass the (possibly updated) prefix down to children, so each child's
      chunk is enriched exactly once with all ancestor headings.
    """

    chunks: List[Chunk] = []

    # Check if the node is "heading-only" and has children
    # e.g. node.content=="# Chapter 1" and node.path[-1]=="# Chapter 1"
    is_heading_only_with_children = (
        node.path
        and node.content.strip() == node.path[-1].strip()
        and len(node.children) > 0
    )

    if is_heading_only_with_children:
        # We do NOT create a chunk for this node alone.
        # Instead, we add its heading to the prefix for child chunks.
        new_prefix = prefix + node.content.strip()
        for i, child in enumerate(node.children):
            sep = "\n\n" if i == 0 else config.header_context_sep
            chunks.extend(rollup_chunk_node(child, config, prefix=new_prefix + sep))
        return chunks

    # If not heading-only-with-children, we handle this node's own content:
    # Flatten the entire node (including sub-children) in standard Markdown form.
    flattened = flatten_tree(node, level=len(node.path))
    flattened_with_prefix = prefix + flattened
    total_tokens = count_words(flattened_with_prefix)

    # Check if we can roll up everything (node + children) in a single chunk
    if total_tokens <= config.chunk_size * (1 + config.variation_percent):
        # One single chunk for the entire subtree
        chunks.append(
            Chunk(text=flattened_with_prefix, path=node.path, token_count=total_tokens)
        )
    else:
        # It's too large overall. We'll chunk the node's own content first (if any),
        # then recurse on children.
        node_content = node.content.strip()

        # If we have actual content that is not just a heading, chunk it with the prefix
        # (like "preamble" text).
        # Note: if this node is heading-only but has NO children,
        # it will still land here
        # (because is_heading_only_with_children was False due to zero children).
        if node_content and (not node.path or node_content != node.path[-1].strip()):
            # The node is actual content (not purely heading).
            # We'll chunk it in paragraphs/sentences with the prefix.
            content_chunks = recursive_chunk(node_content, config)
            for text_block in content_chunks:
                block_with_prefix = prefix + text_block
                chunks.append(
                    Chunk(
                        text=block_with_prefix,
                        path=node.path,
                        token_count=count_words(block_with_prefix),
                    )
                )

        # Now recurse on children, passing the same prefix so they get it too
        for child in node.children:
            chunks.extend(rollup_chunk_node(child, config, prefix=prefix))

    return chunks


def rollup_chunk_tree(
    root_nodes: List[Node],
    config: MarkdownChunkConfig,
) -> List[Chunk]:
    # Create a dummy root node that contains everything.
    dummy_root = Node(content="", path=[], children=root_nodes)

    # Now process just the dummy root node with an empty prefix.
    chunks = rollup_chunk_node(dummy_root, config, prefix="")
    return chunks


def chunk_markdown(markdown_text: str, config: MarkdownChunkConfig) -> List[str]:
    tree = parse_markdown_headings(markdown_text)
    if len(tree) == 1 and len(tree[0].children) == 0:
        # Pure text, no hierarchy, so just use recursive_chunk
        text_chunks = recursive_chunk(markdown_text, config)
        return [_cleanup_text(chunk) for chunk in text_chunks]
    if config.rollup:
        chunks = rollup_chunk_tree(tree, config)
    else:
        chunks = chunk_tree(tree, config)
    return [_cleanup_text(chunk.text) for chunk in chunks]


if __name__ == "__main__":
    # Example usage:
    markdown_text = """# Title
Intro para. Hope this is not
getting split.
## SubTitle
- Item1
- Item2
"""
    # Set up chunking config with very large chunk size.
    # (you can adjust chunk_size, overlap_tokens, variation_percent)
    config = MarkdownChunkConfig(
        chunk_size=200, overlap_tokens=5, variation_percent=0.2
    )
    chunks = chunk_markdown(markdown_text, config)

    for idx, chunk in enumerate(chunks, 1):
        print(f"--- Chunk {idx} --- ")
        print(chunk)
        print()

    config.rollup = True
    # with rollup_chunk_tree we get entire doc as 1 chunk
    chunks = chunk_markdown(markdown_text, config)
    assert len(chunks) == 1
    for idx, chunk in enumerate(chunks, 1):
        print(f"--- Chunk {idx} ---")
        print(chunk)
        print()
</file>

<file path="langroid/parsing/para_sentence_split.py">
import re
from typing import Callable, List

from bs4 import BeautifulSoup


def remove_extra_whitespace(s: str) -> str:
    lines = s.split("\n")
    cleaned_lines = [" ".join(line.split()) for line in lines]
    return "\n".join(cleaned_lines)


def custom_sent_tokenize(text: str) -> List[str]:
    sentences = [
        sentence.strip()
        for sentence in re.split(r"\.\s|\.\n", text)
        if sentence.strip()
    ]
    # append a period if the sentence does not end with one
    return [s + "." if s[-1] != "." else s for s in sentences]


def create_chunks(
    text: str, chunk_size: int, length_fn: Callable[[str], int]
) -> List[str]:
    def _chunk_sentences(sentences: List[str], chunk_size: int) -> List[str]:
        chunks = []
        current_chunk: List[str] = []
        current_chunk_length = 0

        for sentence in sentences:
            sentence_length = length_fn(sentence)
            if current_chunk_length + sentence_length > chunk_size:
                if current_chunk:
                    chunks.append(" ".join(current_chunk))
                current_chunk = [sentence]
                current_chunk_length = sentence_length
            else:
                current_chunk.append(sentence)
                current_chunk_length += sentence_length

        if current_chunk:
            new_chunk = " ".join(current_chunk).strip()
            if new_chunk:
                chunks.append(" ".join(current_chunk).strip())

        return chunks

    soup = BeautifulSoup(text, "html.parser")
    text = soup.get_text()
    # First, try to split the document into paragraphs
    paragraphs = text.split("\n\n")

    # If paragraphs are too long, split them into sentences
    if any(length_fn(p) > chunk_size for p in paragraphs):
        sentences = custom_sent_tokenize(text)
        chunks = _chunk_sentences(sentences, chunk_size)
    else:
        chunks = paragraphs

    chunks = [chunk.strip() for chunk in chunks if chunk.strip() != ""]
    return chunks
</file>

<file path="langroid/parsing/parse_json.py">
import ast
import json
from datetime import datetime
from typing import Any, Dict, Iterator, List, Union

import yaml
from json_repair import repair_json
from pyparsing import nestedExpr, originalTextFor


def is_valid_json(json_str: str) -> bool:
    """Check if the input string is a valid JSON.

    Args:
        json_str (str): The input string to check.

    Returns:
        bool: True if the input string is a valid JSON, False otherwise.
    """
    try:
        json.loads(json_str)
        return True
    except ValueError:
        return False


def flatten(nested_list) -> Iterator[str]:  # type: ignore
    """Flatten a nested list into a single list of strings"""
    for item in nested_list:
        if isinstance(item, (list, tuple)):
            for subitem in flatten(item):
                yield subitem
        else:
            yield item


def get_json_candidates(s: str) -> List[str]:
    """Get top-level JSON candidates, i.e. strings between curly braces."""
    # Define the grammar for matching curly braces
    curly_braces = originalTextFor(nestedExpr("{", "}"))

    # Parse the string
    try:
        results = curly_braces.searchString(s)
        # Properly convert nested lists to strings
        return [r[0] for r in results]
    except Exception:
        return []


def parse_imperfect_json(json_string: str) -> Union[Dict[str, Any], List[Any]]:
    if not json_string.strip():
        raise ValueError("Empty string is not valid JSON")

    # First, try parsing with ast.literal_eval
    try:
        result = ast.literal_eval(json_string)
        if isinstance(result, (dict, list)):
            return result
    except (ValueError, SyntaxError):
        pass

    # If ast.literal_eval fails or returns non-dict/list, try repair_json
    json_repaired_obj = repair_json(json_string, return_objects=True)
    if isinstance(json_repaired_obj, (dict, list)):
        return json_repaired_obj
    else:
        try:
            # fallback on yaml
            yaml_result = yaml.safe_load(json_string)
            if isinstance(yaml_result, (dict, list)):
                return yaml_result
        except yaml.YAMLError:
            pass

    # If all methods fail, raise ValueError
    raise ValueError(f"Unable to parse as JSON: {json_string}")


def try_repair_json_yaml(s: str) -> str | None:
    """
    Attempt to load as json, and if it fails, try repairing the JSON.
    If that fails, replace any \n with space as a last resort.
    NOTE - replacing \n with space will result in format loss,
    which may matter in generated code (e.g. python, toml, etc)
    """
    s_repaired_obj = repair_json(s, return_objects=True)
    if isinstance(s_repaired_obj, list):
        if len(s_repaired_obj) > 0:
            s_repaired_obj = s_repaired_obj[0]
        else:
            s_repaired_obj = None
    if s_repaired_obj is not None:
        return json.dumps(s_repaired_obj)  # type: ignore
    else:
        try:
            yaml_result = yaml.safe_load(s)
            if isinstance(yaml_result, dict):
                return json.dumps(yaml_result)
        except yaml.YAMLError:
            pass
        # If it still fails, replace any \n with space as a last resort
        s = s.replace("\n", " ")
        if is_valid_json(s):
            return s
        else:
            return None  # all failed


def extract_top_level_json(s: str) -> List[str]:
    """Extract all top-level JSON-formatted substrings from a given string.

    Args:
        s (str): The input string to search for JSON substrings.

    Returns:
        List[str]: A list of top-level JSON-formatted substrings.
    """
    # Find JSON object and array candidates
    json_candidates = get_json_candidates(s)
    maybe_repaired_jsons = map(try_repair_json_yaml, json_candidates)

    return [candidate for candidate in maybe_repaired_jsons if candidate is not None]


def top_level_json_field(s: str, f: str) -> Any:
    """
    Extract the value of a field f from a top-level JSON object.
    If there are multiple, just return the first.

    Args:
        s (str): The input string to search for JSON substrings.
        f (str): The field to extract from the JSON object.

    Returns:
        str: The value of the field f in the top-level JSON object, if any.
            Otherwise, return an empty string.
    """

    jsons = extract_top_level_json(s)
    if len(jsons) == 0:
        return ""
    for j in jsons:
        json_data = json.loads(j)
        if f in json_data:
            return json_data[f]

    return ""


def datetime_to_json(obj: Any) -> Any:
    if isinstance(obj, datetime):
        return obj.isoformat()
    # Let json.dumps() handle the raising of TypeError for non-serializable objects
    return obj
</file>

<file path="langroid/parsing/pdf_utils.py">
import tempfile
from io import BytesIO
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import TYPE_CHECKING, Any, BinaryIO, List, Optional, Tuple, Union

try:
    import fitz
except ImportError:
    if not TYPE_CHECKING:
        fitz = None

from langroid.exceptions import LangroidImportError

if fitz is None:
    raise LangroidImportError("fitz", ["pymupdf", "all", "pdf-parsers", "doc-chat"])


def pdf_split_pages(
    input_pdf: Union[BytesIO, BinaryIO, str],
    splits: Optional[List[int]] = None,
) -> Tuple[List[Path], TemporaryDirectory[Any]]:
    """Splits a PDF into individual pages or chunks in a temporary directory.

    Args:
        input_pdf: Input PDF file in bytes, binary mode, or a file path
        splits: Optional list of page numbers to split at.
                If provided, pages will be grouped into chunks ending at
                these page numbers.
                For example, if splits = [4, 9], the result will have pages 1-4, 5-9,
                and 10-end.
                If not provided, default to splitting into individual pages.
        max_workers: Maximum number of concurrent workers for parallel processing

    Returns:
        Tuple containing:
            - List of paths to individual PDF pages or chunks
            - Temporary directory object (caller must call cleanup())

    Example:
        paths, tmp_dir = split_pdf_temp("input.pdf")
        # Use paths...
        tmp_dir.cleanup()  # Clean up temp files when done
    """
    tmp_dir = tempfile.TemporaryDirectory()
    if isinstance(input_pdf, str):
        doc = fitz.open(input_pdf)
    else:
        doc = fitz.open(stream=input_pdf, filetype="pdf")
    paths = []

    total_pages = len(doc)

    if splits is None:
        # Split into individual pages (original behavior)
        for page_num in range(total_pages):
            new_doc = fitz.open()
            new_doc.insert_pdf(doc, from_page=page_num, to_page=page_num)
            output = Path(tmp_dir.name) / f"page_{page_num + 1}.pdf"
            new_doc.save(str(output))
            new_doc.close()
            paths.append(output)
    else:
        # Split according to specified page ranges
        # Make sure the splits list is sorted and includes all valid splits
        splits = sorted([s for s in splits if 1 <= s <= total_pages])

        # Create the ranges to process
        ranges = []
        start_page = 0
        for end_page in splits:
            ranges.append((start_page, end_page - 1))
            start_page = end_page

        # Add the final range if there are pages after the last split
        if start_page < total_pages:
            ranges.append((start_page, total_pages - 1))

        # Process each range
        for i, (from_page, to_page) in enumerate(ranges):
            new_doc = fitz.open()
            new_doc.insert_pdf(doc, from_page=from_page, to_page=to_page)
            output = Path(tmp_dir.name) / f"pages_{from_page + 1}_to_{to_page + 1}.pdf"
            new_doc.save(str(output))
            new_doc.close()
            paths.append(output)

    doc.close()
    return paths, tmp_dir
</file>

<file path="langroid/parsing/repo_loader.py">
import itertools
import json
import logging
import os
import subprocess
import tempfile
import time
from collections import deque
from pathlib import Path
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Tuple, Union
from urllib.parse import urlparse

from dotenv import load_dotenv

if TYPE_CHECKING:
    from github import Github
    from github.ContentFile import ContentFile
    from github.Label import Label
    from github.Repository import Repository

from langroid.mytypes import DocMetaData, Document
from langroid.parsing.document_parser import DocumentParser, DocumentType
from langroid.parsing.parser import Parser, ParsingConfig
from langroid.pydantic_v1 import BaseModel, BaseSettings, Field

logger = logging.getLogger(__name__)


def _get_decoded_content(content_file: "ContentFile") -> str:
    if content_file.encoding == "base64":
        return content_file.decoded_content.decode("utf-8") or ""
    elif content_file.encoding == "none":
        return content_file.content or ""
    else:
        raise ValueError(f"Unsupported encoding: {content_file.encoding}")


def _has_files(directory: str) -> bool:
    """
    Recursively checks if there is at least one file in a directory.
    """
    for dirpath, dirnames, filenames in os.walk(directory):
        if filenames:
            return True
    return False


# Pydantic model for GitHub issue data
class IssueData(BaseModel):
    state: str = Field(..., description="State of issue e.g. open or closed")
    year: int = Field(..., description="Year issue was created")
    month: int = Field(..., description="Month issue was created")
    day: int = Field(..., description="Day issue was created")
    assignee: Optional[str] = Field(..., description="Assignee of issue")
    size: Optional[str] = Field(..., description="Size of issue, e.g. XS, S, M, L, XXL")
    text: str = Field(..., description="Text of issue, i.e. description body")


def get_issue_size(labels: List["Label"]) -> str | None:
    sizes = ["XS", "S", "M", "L", "XL", "XXL"]
    return next((label.name for label in labels if label.name in sizes), None)


class RepoLoaderConfig(BaseSettings):
    """
    Configuration for RepoLoader.
    """

    non_code_types: List[str] = [
        "md",
        "txt",
        "text",
    ]

    file_types: List[str] = [
        "py",
        "md",
        "yml",
        "yaml",
        "txt",
        "text",
        "sh",
        "ini",
        "toml",
        "cfg",
        "json",
        "rst",
        "Makefile",
        "Dockerfile",
    ]

    exclude_dirs: List[str] = [
        ".gitignore",
        ".gitmodules",
        ".gitattributes",
        ".git",
        ".idea",
        ".vscode",
        ".circleci",
    ]


class RepoLoader:
    """
    Class for recursively getting all file content in a repo.
    """

    def __init__(
        self,
        url: str,
        config: RepoLoaderConfig = RepoLoaderConfig(),
    ):
        """
        Args:
            url: full github url of repo, or just "owner/repo"
            config: configuration for RepoLoader
        """
        self.url = url
        self.config = config
        self.clone_path: Optional[str] = None
        self.log_file = ".logs/repo_loader/download_log.json"
        self.repo: Optional["Repository"] = None  # Initialize repo as Optional

        os.makedirs(os.path.dirname(self.log_file), exist_ok=True)
        if not os.path.exists(self.log_file):
            with open(self.log_file, "w") as f:
                json.dump({"junk": "ignore"}, f)
        with open(self.log_file, "r") as f:
            log = json.load(f)
        if self.url in log and os.path.exists(log[self.url]):
            logger.info(f"Repo Already downloaded in {log[self.url]}")
            self.clone_path = log[self.url]

        # it's a core dependency, so we don't need to enclose in try/except
        from github import Github  # Late import

        load_dotenv()
        # authenticated calls to github api have higher rate limit
        token = os.getenv("GITHUB_ACCESS_TOKEN")

        if "github.com" in self.url:
            repo_name = self.url.split("github.com/")[1]
        else:
            repo_name = self.url

        g = Github(token)
        self.repo = self._get_repo_with_retry(g, repo_name)

    @staticmethod
    def _get_repo_with_retry(
        g: "Github", repo_name: str, max_retries: int = 5
    ) -> "Repository":
        """
        Get a repo from the GitHub API, retrying if the request fails,
        with exponential backoff.

        Args:
            g: GitHub object
            repo_name: name of repo
            max_retries: maximum number of retries
        Returns:
            Repo: GitHub repo object

        """
        base_delay = 2  # base delay in seconds
        max_delay = 60  # maximum delay in seconds

        for attempt in range(max_retries):
            try:
                return g.get_repo(repo_name)
            except Exception as e:
                delay = min(max_delay, base_delay * 2**attempt)
                logger.info(
                    f"Attempt {attempt+1} failed with error: {str(e)}. "
                    f"Retrying in {delay} seconds..."
                )
                time.sleep(delay)
        raise Exception(f"Failed to get repo {repo_name} after {max_retries} attempts.")

    def _get_dir_name(self) -> str:
        return urlparse(self.url).path.replace("/", "_")

    def get_issues(self, k: int | None = 100) -> List[IssueData]:
        """Get up to k issues from the GitHub repo."""
        if self.repo is None:
            logger.warning("No repo found. Ensure the URL is correct.")
            return []  # Return an empty list rather than raise an error in this case

        if k is None:
            issues = self.repo.get_issues(state="all")
        else:
            issues = self.repo.get_issues(state="all")[:k]
        issue_data_list = []
        for issue in issues:
            issue_data = IssueData(
                state=issue.state,
                year=issue.created_at.year,
                month=issue.created_at.month,
                day=issue.created_at.day,
                assignee=issue.assignee.login if issue.assignee else None,
                size=get_issue_size(issue.labels),
                text=issue.body or "No issue description body.",
            )
            issue_data_list.append(issue_data)

        return issue_data_list

    @staticmethod
    def _file_type(name: str) -> str:
        """
        Get the file type of a file name.
        Args:
            name: name of file, can be "a", "a.b", or ".b"
        Returns:
            str: file type; "a" => "a", "a.b" => "b", ".b" => "b"
                some examples:
                "Makefile" => "Makefile",
                "script.py" => "py",
                ".gitignore" => "gitignore"
        """
        # "a" -> ("a", ""), "a.b" -> ("a", ".b"), ".b" -> (".b", "")
        file_parts = os.path.splitext(name)
        if file_parts[1] == "":
            file_type = file_parts[0]  # ("a", "") => "a"
        else:
            file_type = file_parts[1][1:]  # (*,".b") => "b"
        return file_type

    def _is_code(self, file_type: str) -> bool:
        """
        Check if a file type is code.

        Args:
            file_type: file type, e.g. "py", "md", "txt"
        Returns:
            bool: whether file type is code
        """
        return file_type not in self.config.non_code_types

    def _is_allowed(self, content: "ContentFile") -> bool:
        """
        Check if a file or directory content is allowed to be included.

        Args:
            content (ContentFile): The file or directory Content object.

        Returns:
            bool: Whether the file or directory is allowed to be included.
        """
        if content.type == "dir":
            return content.name not in self.config.exclude_dirs
        elif content.type == "file":
            return self._file_type(content.name) in self.config.file_types
        else:
            return False

    def default_clone_path(self) -> str:
        return tempfile.mkdtemp(suffix=self._get_dir_name())

    def clone(self, path: Optional[str] = None) -> Optional[str]:
        """
        Clone a GitHub repository to a local directory specified by `path`,
        if it has not already been cloned.

        Args:
            path (str): The local directory where the repository should be cloned.
                If not specified, a temporary directory will be created.

        Returns:
            str: The path to the local directory where the repository was cloned.
        """
        with open(self.log_file, "r") as f:
            log: Dict[str, str] = json.load(f)

        if (
            self.url in log
            and os.path.exists(log[self.url])
            and _has_files(log[self.url])
        ):
            logger.warning(f"Repo Already downloaded in {log[self.url]}")
            self.clone_path = log[self.url]
            return self.clone_path

        self.clone_path = path
        if path is None:
            path = self.default_clone_path()
            self.clone_path = path

        try:
            subprocess.run(["git", "clone", self.url, path], check=True)
            log[self.url] = path
            with open(self.log_file, "w") as f:
                json.dump(log, f)
            return self.clone_path
        except subprocess.CalledProcessError as e:
            logger.error(f"Git clone failed: {e}")
        except Exception as e:
            logger.error(f"An error occurred while trying to clone the repository:{e}")

        return self.clone_path

    def load_tree_from_github(
        self, depth: int, lines: int = 0
    ) -> Dict[str, Union[str, List[Dict[str, Any]]]]:
        """
        Get a nested dictionary of GitHub repository file and directory names
        up to a certain depth, with file contents.

        Args:
            depth (int): The depth level.
            lines (int): The number of lines of file contents to include.

        Returns:
            Dict[str, Union[str, List[Dict]]]:
            A dictionary containing file and directory names, with file contents.
        """
        if self.repo is None:
            logger.warning("No repo found. Ensure the URL is correct.")
            return {}  # Return an empty dict rather than raise an error in this case

        root_contents = self.repo.get_contents("")
        if not isinstance(root_contents, list):
            root_contents = [root_contents]
        repo_structure = {
            "type": "dir",
            "name": "",
            "dirs": [],
            "files": [],
            "path": "",
        }

        # A queue of tuples (current_node, current_depth, parent_structure)
        queue = deque([(root_contents, 0, repo_structure)])

        while queue:
            current_node, current_depth, parent_structure = queue.popleft()

            for content in current_node:
                if not self._is_allowed(content):
                    continue
                if content.type == "dir" and current_depth < depth:
                    # Create a new sub-dictionary for this directory
                    new_dir = {
                        "type": "dir",
                        "name": content.name,
                        "dirs": [],
                        "files": [],
                        "path": content.path,
                    }
                    parent_structure["dirs"].append(new_dir)
                    contents = self.repo.get_contents(content.path)
                    if not isinstance(contents, list):
                        contents = [contents]
                    queue.append(
                        (
                            contents,
                            current_depth + 1,
                            new_dir,
                        )
                    )
                elif content.type == "file":
                    file_content = "\n".join(
                        _get_decoded_content(content).splitlines()[:lines]
                    )
                    file_dict = {
                        "type": "file",
                        "name": content.name,
                        "content": file_content,
                        "path": content.path,
                    }
                    parent_structure["files"].append(file_dict)

        return repo_structure

    def load(
        self,
        path: Optional[str] = None,
        depth: int = 3,
        lines: int = 0,
    ) -> Tuple[Dict[str, Union[str, List[Dict[str, Any]]]], List[Document]]:
        """
        From a local folder `path` (if None, the repo clone path), get:
          a nested dictionary (tree) of dicts, files and contents
          a list of Document objects for each file.

        Args:
            path (str): The local folder path; if none, use self.clone_path()
            depth (int): The depth level.
            lines (int): The number of lines of file contents to include.

        Returns:
            Tuple of (dict, List_of_Documents):
                A dictionary containing file and directory names, with file
                contents, and a list of Document objects for each file.
        """
        if path is None:
            if self.clone_path is None or not _has_files(self.clone_path):
                self.clone()
            path = self.clone_path
        if path is None:
            raise ValueError("Unable to clone repo")
        return self.load_from_folder(
            path=path,
            depth=depth,
            lines=lines,
            file_types=self.config.file_types,
            exclude_dirs=self.config.exclude_dirs,
            url=self.url,
        )

    @staticmethod
    def load_from_folder(
        path: str,
        depth: int = 3,
        lines: int = 0,
        file_types: Optional[List[str]] = None,
        exclude_dirs: Optional[List[str]] = None,
        url: str = "",
    ) -> Tuple[Dict[str, Union[str, List[Dict[str, Any]]]], List[Document]]:
        """
        From a local folder `path` (required), get:
          a nested dictionary (tree) of dicts, files and contents, restricting to
            desired file_types and excluding undesired directories.
          a list of Document objects for each file.

        Args:
            path (str): The local folder path, required.
            depth (int): The depth level. Optional, default 3.
            lines (int): The number of lines of file contents to include.
                    Optional, default 0 (no lines => empty string).
            file_types (List[str]): The file types to include.
                    Optional, default None (all).
            exclude_dirs (List[str]): The directories to exclude.
                    Optional, default None (no exclusions).
            url (str): Optional url, to be stored in docs as metadata. Default "".

        Returns:
            Tuple of (dict, List_of_Documents):
                A dictionary containing file and directory names, with file contents.
                A list of Document objects for each file.
        """

        folder_structure = {
            "type": "dir",
            "name": "",
            "dirs": [],
            "files": [],
            "path": "",
        }
        # A queue of tuples (current_path, current_depth, parent_structure)
        queue = deque([(path, 0, folder_structure)])
        docs = []
        exclude_dirs = exclude_dirs or []
        while queue:
            current_path, current_depth, parent_structure = queue.popleft()

            for item in os.listdir(current_path):
                item_path = os.path.join(current_path, item)
                relative_path = os.path.relpath(item_path, path)
                if (os.path.isdir(item_path) and item in exclude_dirs) or (
                    os.path.isfile(item_path)
                    and file_types is not None
                    and RepoLoader._file_type(item) not in file_types
                ):
                    continue

                if os.path.isdir(item_path) and current_depth < depth:
                    # Create a new sub-dictionary for this directory
                    new_dir = {
                        "type": "dir",
                        "name": item,
                        "dirs": [],
                        "files": [],
                        "path": relative_path,
                    }
                    parent_structure["dirs"].append(new_dir)
                    queue.append((item_path, current_depth + 1, new_dir))
                elif os.path.isfile(item_path):
                    # Add the file to the current dictionary
                    with open(item_path, "r") as f:
                        file_lines = list(itertools.islice(f, lines))
                    file_content = "\n".join(line.strip() for line in file_lines)
                    if file_content == "":
                        continue

                    file_dict = {
                        "type": "file",
                        "name": item,
                        "content": file_content,
                        "path": relative_path,
                    }
                    parent_structure["files"].append(file_dict)
                    docs.append(
                        Document(
                            content=file_content,
                            metadata=DocMetaData(
                                repo=url,
                                source=relative_path,
                                url=url,
                                filename=item,
                                extension=RepoLoader._file_type(item),
                                language=RepoLoader._file_type(item),
                            ),
                        )
                    )
        return folder_structure, docs

    @staticmethod
    def get_documents(
        path: str | bytes,
        parser: Parser = Parser(ParsingConfig()),
        file_types: Optional[List[str]] = None,
        exclude_dirs: Optional[List[str]] = None,
        depth: int = -1,
        lines: Optional[int] = None,
        doc_type: str | DocumentType | None = None,
    ) -> List[Document]:
        """
        Recursively get all files under a path as Document objects.

        Args:
            path (str|bytes): The path to the directory or file, or bytes content.
                The bytes option is meant to support the case where the content
                has already been read from a file in an upstream process
                (e.g. from an API or a database), and we want to avoid having to
                write it to a temporary file just to read it again.
                (which can be very slow for large files,
                especially in a docker container)
            parser (Parser): Parser to use to parse files.
            file_types (List[str], optional): List of file extensions OR
                filenames OR file_path_names to  include.
                Defaults to None, which includes all files.
            exclude_dirs (List[str], optional): List of directories to exclude.
                Defaults to None, which includes all directories.
            depth (int, optional): Max depth of recursion. Defaults to -1,
                which includes all depths.
            lines (int, optional): Number of lines to read from each file.
                Defaults to None, which reads all lines.
            doc_type (str|DocumentType | None, optional): The type of document to parse.
        Returns:
            List[Document]: List of Document objects representing files.

        """
        docs = []
        file_paths = []
        if isinstance(path, bytes):
            file_paths.append(path)
        else:
            path_obj = Path(path).resolve()

            if path_obj.is_file():
                file_paths.append(str(path_obj))
            else:
                path_depth = len(path_obj.parts)
                for root, dirs, files in os.walk(path):
                    # Exclude directories if needed
                    if exclude_dirs:
                        dirs[:] = [d for d in dirs if d not in exclude_dirs]

                    current_depth = len(Path(root).resolve().parts) - path_depth
                    if depth == -1 or current_depth <= depth:
                        for file in files:
                            file_path = str(Path(root) / file)
                            if (
                                file_types is None
                                or RepoLoader._file_type(file_path) in file_types
                                or os.path.basename(file_path) in file_types
                                or file_path in file_types
                            ):
                                file_paths.append(file_path)

        for file_path in file_paths:
            docs.extend(
                DocumentParser.chunks_from_path_or_bytes(
                    file_path,
                    parser,
                    doc_type=doc_type,
                    lines=lines,
                )
            )
        return docs

    def load_docs_from_github(
        self,
        k: Optional[int] = None,
        depth: Optional[int] = None,
        lines: Optional[int] = None,
    ) -> List[Document]:
        """
        Directly from GitHub, recursively get all files in a repo that have one of the
        extensions, possibly up to a max number of files, max depth, and max number
        of lines per file (if any of these are specified).

        Args:
            k (int): max number of files to load, or None for all files
            depth (int): max depth to recurse, or None for infinite depth
            lines (int): max number of lines to get, from a file, or None for all lines

        Returns:
            list of Document objects, each has fields `content` and `metadata`,
            and `metadata` has fields `url`, `filename`, `extension`, `language`
        """
        if self.repo is None:
            logger.warning("No repo found. Ensure the URL is correct.")
            return []  # Return an empty list rather than raise an error

        contents = self.repo.get_contents("")
        if not isinstance(contents, list):
            contents = [contents]
        stack = list(zip(contents, [0] * len(contents)))  # stack of (content, depth)
        # recursively get all files in repo that have one of the extensions
        docs = []
        i = 0

        while stack:
            if k is not None and i == k:
                break
            file_content, d = stack.pop()
            if not self._is_allowed(file_content):
                continue
            if file_content.type == "dir":
                if depth is None or d <= depth:
                    items = self.repo.get_contents(file_content.path)
                    if not isinstance(items, list):
                        items = [items]
                    stack.extend(list(zip(items, [d + 1] * len(items))))
            else:
                if depth is None or d <= depth:
                    # need to decode the file content, which is in bytes
                    contents = self.repo.get_contents(file_content.path)
                    if isinstance(contents, list):
                        contents = contents[0]
                    text = _get_decoded_content(contents)
                    if lines is not None:
                        text = "\n".join(text.split("\n")[:lines])
                    i += 1

                    # Note `source` is important, it may be used to cite
                    # evidence for an answer.
                    # See  URLLoader
                    # TODO we should use Pydantic to enforce/standardize this

                    docs.append(
                        Document(
                            content=text,
                            metadata=DocMetaData(
                                repo=self.url,
                                source=file_content.html_url,
                                url=file_content.html_url,
                                filename=file_content.name,
                                extension=self._file_type(file_content.name),
                                language=self._file_type(file_content.name),
                            ),
                        )
                    )
        return docs

    @staticmethod
    def select(
        structure: Dict[str, Union[str, List[Dict[str, Any]]]],
        includes: List[str],
        excludes: List[str] = [],
    ) -> Dict[str, Union[str, List[Dict[str, Any]]]]:
        """
        Filter a structure dictionary for certain directories and files.

        Args:
            structure (Dict[str, Union[str, List[Dict]]]): The structure dictionary.
            includes (List[str]): A list of desired directories and files.
                For files, either full file names or "file type" can be specified.
                E.g.  "toml" will include all files with the ".toml" extension,
                or "Makefile" will include all files named "Makefile".
            excludes (List[str]): A list of directories and files to exclude.
                Similar to `includes`, full file/dir names or "file type" can be
                specified. Optional, defaults to empty list.


        Returns:
            Dict[str, Union[str, List[Dict]]]: The filtered structure dictionary.
        """
        filtered_structure = {
            "type": structure["type"],
            "name": structure["name"],
            "dirs": [],
            "files": [],
            "path": structure["path"],
        }

        for dir in structure["dirs"]:
            if (
                dir["name"] in includes
                or RepoLoader._file_type(dir["name"]) in includes
            ) and (
                dir["name"] not in excludes
                and RepoLoader._file_type(dir["name"]) not in excludes
            ):
                # If the directory is in the select list, include the whole subtree
                filtered_structure["dirs"].append(dir)
            else:
                # Otherwise, filter the directory's contents
                filtered_dir = RepoLoader.select(dir, includes)
                if (
                    filtered_dir["dirs"] or filtered_dir["files"]
                ):  # only add if not empty
                    filtered_structure["dirs"].append(filtered_dir)

        for file in structure["files"]:
            if (
                file["name"] in includes
                or RepoLoader._file_type(file["name"]) in includes
            ) and (
                file["name"] not in excludes
                and RepoLoader._file_type(file["name"]) not in excludes
            ):
                filtered_structure["files"].append(file)

        return filtered_structure

    @staticmethod
    def ls(structure: Dict[str, Union[str, List[Dict]]], depth: int = 0) -> List[str]:
        """
        Get a list of names of files or directories up to a certain depth from a
        structure dictionary.

        Args:
            structure (Dict[str, Union[str, List[Dict]]]): The structure dictionary.
            depth (int, optional): The depth level. Defaults to 0.

        Returns:
            List[str]: A list of names of files or directories.
        """
        names = []

        # A queue of tuples (current_structure, current_depth)
        queue = deque([(structure, 0)])

        while queue:
            current_structure, current_depth = queue.popleft()

            if current_depth <= depth:
                names.append(current_structure["name"])

                for dir in current_structure["dirs"]:
                    queue.append((dir, current_depth + 1))

                for file in current_structure["files"]:
                    # add file names only if depth is less than the limit
                    if current_depth < depth:
                        names.append(file["name"])
        names = [n for n in names if n not in ["", None]]
        return names

    @staticmethod
    def list_files(
        dir: str,
        depth: int = 1,
        include_types: List[str] = [],
        exclude_types: List[str] = [],
    ) -> List[str]:
        """
        Recursively list all files in a directory, up to a certain depth.

        Args:
            dir (str): The directory path, relative to root.
            depth (int, optional): The depth level. Defaults to 1.
            include_types (List[str], optional): A list of file types to include.
                Defaults to empty list.
            exclude_types (List[str], optional): A list of file types to exclude.
                Defaults to empty list.
        Returns:
            List[str]: A list of file names.
        """
        depth = depth if depth >= 0 else 200
        output = []

        for root, dirs, files in os.walk(dir):
            if root.count(os.sep) - dir.count(os.sep) < depth:
                level = root.count(os.sep) - dir.count(os.sep)
                sub_indent = " " * 4 * (level + 1)
                for d in dirs:
                    output.append("{}{}/".format(sub_indent, d))
                for f in files:
                    if include_types and RepoLoader._file_type(f) not in include_types:
                        continue
                    if exclude_types and RepoLoader._file_type(f) in exclude_types:
                        continue
                    output.append("{}{}".format(sub_indent, f))
        return output

    @staticmethod
    def show_file_contents(tree: Dict[str, Union[str, List[Dict[str, Any]]]]) -> str:
        """
        Print the contents of all files from a structure dictionary.

        Args:
            tree (Dict[str, Union[str, List[Dict]]]): The structure dictionary.
        """
        contents = ""
        for dir in tree["dirs"]:
            contents += RepoLoader.show_file_contents(dir)
        for file in tree["files"]:
            path = file["path"]
            contents += f"""
            {path}:
            --------------------
            {file["content"]}
            
            """

        return contents
</file>

<file path="langroid/parsing/routing.py">
import re
from typing import Optional, Tuple


def parse_addressed_message(
    content: str, addressing: str = "@"
) -> Tuple[Optional[str], str]:
    """In a message-string containing possibly multiple @<recipient> occurrences,
    find the last addressee and extract their name,
    and the message content following it.

    E.g. "thank you @bob, now I will ask @alice again. @alice, where is the mirror?" =>
    ("alice", "where is the mirror?")

    Args:
        content (str): The message content.
        addressing (str, optional): The addressing character. Defaults to "@".

    Returns:
        Tuple[Optional[str], str]:
        A tuple containing the last addressee and the subsequent message content.
    """
    # Regex to find all occurrences of the pattern
    pattern = re.compile(rf"{re.escape(addressing)}(\w+)[^\w]")
    matches = list(pattern.finditer(content))

    if not matches:
        return None, content  # No addressee found, return None and original content

    # Get the last match
    last_match = matches[-1]
    last_addressee = last_match.group(1)
    # Extract content after the last addressee
    content_after = content[last_match.end() :].strip()

    return last_addressee, content_after
</file>

<file path="langroid/parsing/search.py">
"""
Utils to search for close matches in (a list of) strings.
Useful for retrieval of docs/chunks relevant to a query, in the context of
Retrieval-Augmented Generation (RAG), and SQLChat (e.g., to pull relevant parts of a
large schema).
See tests for examples: tests/main/test_string_search.py
"""

import difflib
import re
from typing import List, Tuple

from rank_bm25 import BM25Okapi
from thefuzz import fuzz, process

from langroid.mytypes import Document

from .utils import download_nltk_resource


def find_fuzzy_matches_in_docs(
    query: str,
    docs: List[Document],
    docs_clean: List[Document],
    k: int,
    words_before: int | None = None,
    words_after: int | None = None,
) -> List[Tuple[Document, float]]:
    """
    Find approximate matches of the query in the docs and return surrounding
    characters.

    Args:
        query (str): The search string.
        docs (List[Document]): List of Document objects to search through.
        docs_clean (List[Document]): List of Document objects with cleaned content.
        k (int): Number of best matches to return.
        words_before (int|None): Number of words to include before each match.
            Default None => return max
        words_after (int|None): Number of words to include after each match.
            Default None => return max

    Returns:
        List[Tuple[Document,float]]: List of (Document, score) tuples.
    """
    if len(docs) == 0:
        return []
    best_matches = process.extract(
        query,
        [d.content for d in docs_clean],
        limit=k,
        scorer=fuzz.partial_ratio,
    )

    real_matches = [(m, score) for m, score in best_matches if score > 50]
    # find the original docs that corresponding to the matches
    orig_doc_matches = []
    for i, (m, s) in enumerate(real_matches):
        for j, doc_clean in enumerate(docs_clean):
            if m in doc_clean.content:
                orig_doc_matches.append((docs[j], s))
                break
    if words_after is None and words_before is None:
        return orig_doc_matches
    if len(orig_doc_matches) == 0:
        return []
    if set(orig_doc_matches[0][0].__fields__) != {"content", "metadata"}:
        # If there are fields beyond just content and metadata,
        # we do NOT want to create new document objects with content fields
        # based on words_before and words_after, since we don't know how to
        # set those other fields.
        return orig_doc_matches

    contextual_matches = []
    for match, score in orig_doc_matches:
        choice_text = match.content
        contexts = []
        while choice_text != "":
            context, start_pos, end_pos = get_context(
                query, choice_text, words_before, words_after
            )
            if context == "" or end_pos == 0:
                break
            contexts.append(context)
            words = choice_text.split()
            end_pos = min(end_pos, len(words))
            choice_text = " ".join(words[end_pos:])
        if len(contexts) > 0:
            contextual_matches.append(
                (
                    Document(
                        content=" ... ".join(contexts),
                        metadata=match.metadata,
                    ),
                    score,
                )
            )

    return contextual_matches


def preprocess_text(text: str) -> str:
    """
    Preprocesses the given text by:
    1. Lowercasing all words.
    2. Tokenizing (splitting the text into words).
    3. Removing punctuation.
    4. Removing stopwords.
    5. Lemmatizing words.

    Args:
        text (str): The input text.

    Returns:
        str: The preprocessed text.
    """
    # Ensure the NLTK resources are available
    for resource in ["tokenizers/punkt", "corpora/wordnet", "corpora/stopwords"]:
        download_nltk_resource(resource)
    from nltk.corpus import stopwords
    from nltk.stem import WordNetLemmatizer
    from nltk.tokenize import RegexpTokenizer

    # Lowercase the text
    text = text.lower()

    # Tokenize the text and remove punctuation
    tokenizer = RegexpTokenizer(r"\w+")
    tokens = tokenizer.tokenize(text)

    # Remove stopwords
    stop_words = set(stopwords.words("english"))
    tokens = [t for t in tokens if t not in stop_words]

    # Lemmatize words
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(t) for t in tokens]

    # Join the words back into a string
    text = " ".join(tokens)

    return text


def find_closest_matches_with_bm25(
    docs: List[Document],
    docs_clean: List[Document],
    query: str,
    k: int = 5,
) -> List[Tuple[Document, float]]:
    """
    Finds the k closest approximate matches using the BM25 algorithm.

    Args:
        docs (List[Document]): List of Documents to search through.
        docs_clean (List[Document]): List of cleaned Documents
        query (str): The search query.
        k (int, optional): Number of matches to retrieve. Defaults to 5.

    Returns:
        List[Tuple[Document,float]]: List of (Document, score) tuples.
    """
    if len(docs) == 0:
        return []
    texts = [doc.content for doc in docs_clean]
    query = preprocess_text(query)

    text_words = [text.split() for text in texts]

    bm25 = BM25Okapi(text_words)
    query_words = query.split()
    doc_scores = bm25.get_scores(query_words)

    # Get indices of top k scores
    top_indices = sorted(range(len(doc_scores)), key=lambda i: -doc_scores[i])[:k]

    # return the original docs, based on the scores from cleaned docs
    return [(docs[i], doc_scores[i]) for i in top_indices]


def get_context(
    query: str,
    text: str,
    words_before: int | None = 100,
    words_after: int | None = 100,
) -> Tuple[str, int, int]:
    """
    Returns a portion of text containing the best approximate match of the query,
    including b words before and a words after the match.

    Args:
    query (str): The string to search for.
    text (str): The body of text in which to search.
    b (int): The number of words before the query to return.
    a (int): The number of words after the query to return.

    Returns:
    str: A string containing b words before, the match, and a words after
        the best approximate match position of the query in the text.
        The text is extracted from the original `text`, preserving formatting,
        whitespace, etc, so it does not disturb any downstream processing.
        If no match is found, returns empty string.
    int: The start position of the match in the text.
    int: The end position of the match in the text.

    Example:
    >>> get_context("apple", "The quick brown fox jumps over the apple.", 3, 2)
    # 'fox jumps over the apple.'
    """

    # If no word limits specified, return full text
    if words_after is None and words_before is None:
        # return entire text since we're not asked to return a bounded context
        return text, 0, 0

    # make sure there is a good enough match to the query
    if fuzz.partial_ratio(query, text) < 40:
        return "", 0, 0

    # Find best matching position of query in text
    sequence_matcher = difflib.SequenceMatcher(None, text, query)
    match = sequence_matcher.find_longest_match(0, len(text), 0, len(query))

    if match.size == 0:
        return "", 0, 0

    # Count words before match point
    segments = text.split()
    n_segs = len(segments)
    start_segment_pos = len(text[: match.a].split())

    # Calculate word window boundaries
    words_before = words_before or n_segs
    words_after = words_after or n_segs
    start_pos = max(0, start_segment_pos - words_before)
    end_pos = min(len(segments), start_segment_pos + words_after + len(query.split()))

    # Find character positions where words start
    word_positions = [m.start() for m in re.finditer(r"\S+", text)]

    # Convert word positions to character positions
    start_char = word_positions[start_pos] if start_pos < len(word_positions) else 0
    end_char = word_positions[min(end_pos, len(word_positions) - 1)] + len(
        text.split()[min(end_pos - 1, len(word_positions) - 1)]
    )

    # return exact substring with original formatting
    return text[start_char:end_char], start_pos, end_pos


def eliminate_near_duplicates(passages: List[str], threshold: float = 0.8) -> List[str]:
    """
    Eliminate near duplicate text passages from a given list using MinHash and LSH.
    TODO: this has not been tested and the datasketch lib is not a dependency.
    Args:
        passages (List[str]): A list of text passages.
        threshold (float, optional): Jaccard similarity threshold to consider two
                                     passages as near-duplicates. Default is 0.8.

    Returns:
        List[str]: A list of passages after eliminating near duplicates.

    Example:
        passages = ["Hello world", "Hello, world!", "Hi there", "Hello world!"]
        print(eliminate_near_duplicates(passages))
        # ['Hello world', 'Hi there']
    """

    from datasketch import MinHash, MinHashLSH

    # Create LSH index
    lsh = MinHashLSH(threshold=threshold, num_perm=128)

    # Create MinHash objects for each passage and insert to LSH
    minhashes = {}
    for idx, passage in enumerate(passages):
        m = MinHash(num_perm=128)
        for word in passage.split():
            m.update(word.encode("utf-8"))
        lsh.insert(idx, m)
        minhashes[idx] = m

    unique_idxs = set()
    for idx in minhashes.keys():
        # Query for similar passages (including itself)
        result = lsh.query(minhashes[idx])

        # If only the passage itself is returned, it's unique
        if len(result) == 1 and idx in result:
            unique_idxs.add(idx)

    return [passages[idx] for idx in unique_idxs]
</file>

<file path="langroid/parsing/spider.py">
from typing import List, Set, no_type_check
from urllib.parse import urlparse

from langroid.exceptions import LangroidImportError

try:
    from pydispatch import dispatcher
    from scrapy import signals
    from scrapy.crawler import CrawlerRunner
    from scrapy.http.response.text import TextResponse
    from scrapy.linkextractors.lxmlhtml import LxmlLinkExtractor
    from scrapy.spiders import CrawlSpider, Rule  # type: ignore
    from twisted.internet import defer, reactor
except ImportError:
    raise LangroidImportError("scrapy", "scrapy")


@no_type_check
class DomainSpecificSpider(CrawlSpider):  # type: ignore
    name = "domain_specific_spider"

    custom_settings = {"DEPTH_LIMIT": 1, "CLOSESPIDER_ITEMCOUNT": 20}

    rules = (Rule(LxmlLinkExtractor(), callback="parse_item", follow=True),)

    def __init__(self, start_url: str, k: int = 20, *args, **kwargs):  # type: ignore
        """Initialize the spider with start_url and k.

        Args:
            start_url (str): The starting URL.
            k (int, optional): The max desired final URLs. Defaults to 20.
        """
        super(DomainSpecificSpider, self).__init__(*args, **kwargs)
        self.start_urls = [start_url]
        self.allowed_domains = [urlparse(start_url).netloc]
        self.k = k
        self.visited_urls: Set[str] = set()

    def parse_item(self, response: TextResponse):  # type: ignore
        """Extracts URLs that are within the same domain.

        Args:
            response: The scrapy response object.
        """
        for link in LxmlLinkExtractor(allow_domains=self.allowed_domains).extract_links(
            response
        ):
            if len(self.visited_urls) < self.k:
                self.visited_urls.add(link.url)
                yield {"url": link.url}


@no_type_check
def scrapy_fetch_urls(url: str, k: int = 20) -> List[str]:
    """Fetches up to k URLs reachable from the input URL using Scrapy.

    Args:
        url (str): The starting URL.
        k (int, optional): The max desired final URLs. Defaults to 20.

    Returns:
        List[str]: List of URLs within the same domain as the input URL.
    """
    urls = []

    def _collect_urls(spider):
        """Handler for the spider_closed signal. Collects the visited URLs."""
        nonlocal urls
        urls.extend(list(spider.visited_urls))

    # Connect the spider_closed signal with our handler
    dispatcher.connect(_collect_urls, signal=signals.spider_closed)

    runner = CrawlerRunner(
        {
            "USER_AGENT": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"
        }
    )

    d = runner.crawl(DomainSpecificSpider, start_url=url, k=k)

    # Block until crawling is done and then stop the reactor
    crawl_deferred = defer.Deferred()

    def _crawl_done(_):
        reactor.stop()
        crawl_deferred.callback(urls)

    d.addBoth(_crawl_done)

    # Start the reactor, it will stop once the crawl is done
    reactor.run(installSignalHandlers=0)

    # This will block until the deferred gets a result
    return crawl_deferred.result


# Test the function
if __name__ == "__main__":
    fetched_urls = scrapy_fetch_urls("https://example.com", 5)
    for url in fetched_urls:
        print(url)
</file>

<file path="langroid/parsing/table_loader.py">
from csv import Sniffer
from typing import List

import pandas as pd


def read_tabular_data(path_or_url: str, sep: None | str = None) -> pd.DataFrame:
    """
    Reads tabular data from a file or URL and returns a pandas DataFrame.
    The separator is auto-detected if not specified.

    Args:
        path_or_url (str): Path or URL to the file to be read.

    Returns:
        pd.DataFrame: Data from file or URL as a pandas DataFrame.

    Raises:
        ValueError: If the data cannot be read or is misformatted.
    """
    try:
        if sep is None:
            # Read the first few lines to guess the separator
            with pd.io.common.get_handle(path_or_url, "r") as file_handler:
                first_lines = "".join(file_handler.handle.readlines(5))
                sep = Sniffer().sniff(first_lines).delimiter
                # If it's a local file, reset to the beginning
                if hasattr(file_handler.handle, "seek"):
                    file_handler.handle.seek(0)

        # Read the data

        # get non-blank column names
        with pd.io.common.get_handle(path_or_url, "r") as f:
            header_line = f.handle.readline().strip()
            valid_cols = [col for col in header_line.split(sep) if col]
            valid_cols = [c.replace('"', "").replace("'", "") for c in valid_cols]
            if hasattr(f.handle, "seek"):
                f.handle.seek(0)

        # use only those columns
        data = pd.read_csv(path_or_url, sep=sep, usecols=valid_cols)
        data.columns = data.columns.str.strip()  # e.g. "  column 1  " -> "column 1"

        return data

    except Exception as e:
        raise ValueError(
            "Unable to read data. "
            "Please ensure it is correctly formatted. Error: " + str(e)
        )


def describe_dataframe(
    df: pd.DataFrame, filter_fields: List[str] = [], n_vals: int = 10
) -> str:
    """
    Generates a description of the columns in the dataframe,
    along with a listing of up to `n_vals` unique values for each column.
    Intended to be used to insert into an LLM context so it can generate
    appropriate queries or filters on the df.

    Args:
    df (pd.DataFrame): The dataframe to describe.
    filter_fields (list): A list of fields that can be used for filtering.
        When non-empty, the values-list will be restricted to these.
    n_vals (int): How many unique values to show for each column.

    Returns:
    str: A description of the dataframe.
    """
    description = []
    for column in df.columns.to_list():
        unique_values = df[column].dropna().unique()
        unique_count = len(unique_values)
        if column not in filter_fields:
            values_desc = f"{unique_count} unique values"
        else:
            if unique_count > n_vals:
                displayed_values = unique_values[:n_vals]
                more_count = unique_count - n_vals
                values_desc = f" Values - {displayed_values}, ... {more_count} more"
            else:
                values_desc = f" Values - {unique_values}"
        col_type = "string" if df[column].dtype == "object" else df[column].dtype
        col_desc = f"* {column} ({col_type}); {values_desc}"
        description.append(col_desc)

    all_cols = "\n".join(description)

    return f"""
        Name of each field, its type and unique values (up to {n_vals}):
        {all_cols}
        """
</file>

<file path="langroid/parsing/url_loader.py">
import logging
import os
from abc import ABC, abstractmethod
from tempfile import NamedTemporaryFile
from typing import TYPE_CHECKING, Any, Dict, List, Optional

import markdownify as md
from dotenv import load_dotenv

from langroid.exceptions import LangroidImportError
from langroid.mytypes import DocMetaData, Document
from langroid.parsing.document_parser import DocumentParser, ImagePdfParser
from langroid.parsing.parser import Parser, ParsingConfig
from langroid.pydantic_v1 import BaseSettings

if TYPE_CHECKING:
    from firecrawl import FirecrawlApp

load_dotenv()

logging.getLogger("url_loader").setLevel(logging.WARNING)


# Base crawler config and specific configurations
class BaseCrawlerConfig(BaseSettings):
    """Base configuration for web crawlers."""

    parser: Optional[Parser] = None


class TrafilaturaConfig(BaseCrawlerConfig):
    """Configuration for Trafilatura crawler."""

    threads: int = 4
    format: str = "markdown"  # or "xml" or "txt"


class FirecrawlConfig(BaseCrawlerConfig):
    """Configuration for Firecrawl crawler."""

    api_key: str = ""
    mode: str = "scrape"
    params: Dict[str, Any] = {}
    timeout: Optional[int] = None

    class Config:
        # Leverage Pydantic's BaseSettings to
        # allow setting of fields via env vars,
        # e.g. FIRECRAWL_MODE=scrape and FIRECRAWL_API_KEY=...
        env_prefix = "FIRECRAWL_"


class ExaCrawlerConfig(BaseCrawlerConfig):
    api_key: str = ""

    class Config:
        # Allow setting of fields via env vars with prefix EXA_
        # e.g., EXA_API_KEY=your_api_key
        env_prefix = "EXA_"


class BaseCrawler(ABC):
    """Abstract base class for web crawlers."""

    def __init__(self, config: BaseCrawlerConfig):
        """Initialize the base crawler.

        Args:
            config: Configuration for the crawler
        """
        self.parser = config.parser if self.needs_parser else None
        self.config: BaseCrawlerConfig = config

    @property
    @abstractmethod
    def needs_parser(self) -> bool:
        """Indicates whether the crawler requires a parser."""
        pass

    @abstractmethod
    def crawl(self, urls: List[str]) -> List[Document]:
        pass

    def _process_document(self, url: str) -> List[Document]:
        if self.parser:
            import requests
            from requests.structures import CaseInsensitiveDict

            if self._is_document_url(url):
                try:
                    doc_parser = DocumentParser.create(url, self.parser.config)
                    new_chunks = doc_parser.get_doc_chunks()
                    if not new_chunks:
                        # If the document is empty, try to extract images
                        img_parser = ImagePdfParser(url, self.parser.config)
                        new_chunks = img_parser.get_doc_chunks()
                    return new_chunks
                except Exception as e:
                    logging.error(f"Error parsing {url}: {e}")
                    return []

            else:
                try:
                    headers = requests.head(url).headers
                except Exception as e:
                    logging.warning(f"Error getting headers for {url}: {e}")
                    headers = CaseInsensitiveDict()

                content_type = headers.get("Content-Type", "").lower()
                temp_file_suffix = None
                if "application/pdf" in content_type:
                    temp_file_suffix = ".pdf"
                elif (
                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                    in content_type
                ):
                    temp_file_suffix = ".docx"
                elif "application/msword" in content_type:
                    temp_file_suffix = ".doc"

                if temp_file_suffix:
                    try:
                        response = requests.get(url)
                        with NamedTemporaryFile(
                            delete=False, suffix=temp_file_suffix
                        ) as temp_file:
                            temp_file.write(response.content)
                            temp_file_path = temp_file.name
                        doc_parser = DocumentParser.create(
                            temp_file_path, self.parser.config
                        )
                        docs = doc_parser.get_doc_chunks()
                        os.remove(temp_file_path)
                        return docs
                    except Exception as e:
                        logging.error(f"Error downloading/parsing {url}: {e}")
                        return []
        return []

    def _is_document_url(self, url: str) -> bool:
        return any(url.lower().endswith(ext) for ext in [".pdf", ".docx", ".doc"])


class CrawlerFactory:
    """Factory for creating web crawlers."""

    @staticmethod
    def create_crawler(config: BaseCrawlerConfig) -> BaseCrawler:
        """Create a crawler instance based on configuration type.

        Args:
            config: Configuration for the crawler

        Returns:
            A BaseCrawler instance

        Raises:
            ValueError: If config type is not supported
        """
        if isinstance(config, TrafilaturaConfig):
            return TrafilaturaCrawler(config)
        elif isinstance(config, FirecrawlConfig):
            return FirecrawlCrawler(config)
        elif isinstance(config, ExaCrawlerConfig):
            return ExaCrawler(config)
        else:
            raise ValueError(f"Unsupported crawler configuration type: {type(config)}")


class TrafilaturaCrawler(BaseCrawler):
    """Crawler implementation using Trafilatura."""

    def __init__(self, config: TrafilaturaConfig):
        """Initialize the Trafilatura crawler.

        Args:
            config: Configuration for the crawler
        """
        super().__init__(config)
        self.config: TrafilaturaConfig = config

    @property
    def needs_parser(self) -> bool:
        return True

    def crawl(self, urls: List[str]) -> List[Document]:
        import trafilatura
        from trafilatura.downloads import (
            add_to_compressed_dict,
            buffered_downloads,
            load_download_buffer,
        )

        docs = []
        dl_dict = add_to_compressed_dict(urls)

        while not dl_dict.done:
            buffer, dl_dict = load_download_buffer(dl_dict, sleep_time=5)
            for url, result in buffered_downloads(buffer, self.config.threads):
                parsed_doc = self._process_document(url)
                if parsed_doc:
                    docs.extend(parsed_doc)
                else:
                    text = trafilatura.extract(
                        result,
                        no_fallback=False,
                        favor_recall=True,
                        include_formatting=True,
                        output_format=self.config.format,
                        with_metadata=True,  # Title, date, author... at start of text
                    )
                    if self.config.format in ["xml", "html"]:
                        # heading_style="ATX" for markdown headings, i.e. #, ##, etc.
                        text = md.markdownify(text, heading_style="ATX")
                    if text is None and result is not None and isinstance(result, str):
                        text = result
                    if text:
                        docs.append(
                            Document(content=text, metadata=DocMetaData(source=url))
                        )

        return docs


class FirecrawlCrawler(BaseCrawler):
    """Crawler implementation using Firecrawl."""

    def __init__(self, config: FirecrawlConfig) -> None:
        """Initialize the Firecrawl crawler.

        Args:
            config: Configuration for the crawler
        """
        super().__init__(config)
        self.config: FirecrawlConfig = config

    @property
    def needs_parser(self) -> bool:
        return False

    def _return_save_incremental_results(
        self, app: "FirecrawlApp", crawl_id: str, output_dir: str = "firecrawl_output"
    ) -> List[Document]:
        # Code used verbatim from firecrawl blog with few modifications
        # https://www.firecrawl.dev/blog/mastering-the-crawl-endpoint-in-firecrawl
        import json
        import time
        from pathlib import Path

        from tqdm import tqdm

        pbar = tqdm(desc="Pages saved", unit=" pages", dynamic_ncols=True)
        Path(output_dir).mkdir(parents=True, exist_ok=True)
        processed_urls: set[str] = set()
        docs = []

        while True:
            # Check current status
            status = app.check_crawl_status(crawl_id)
            new_pages = 0

            # Save new pages
            for page in status["data"]:
                url = page["metadata"]["url"]
                if url not in processed_urls:
                    content = page.get("markdown", "")
                    filename = f"{output_dir}/{len(processed_urls)}.md"
                    with open(filename, "w") as f:
                        f.write(content)
                    docs.append(
                        Document(
                            content=content,
                            metadata=DocMetaData(
                                source=url,
                                title=page["metadata"].get("title", "Unknown Title"),
                            ),
                        )
                    )
                    processed_urls.add(url)
                    new_pages += 1
            pbar.update(new_pages)  # Update progress bar with new pages

            # Break if crawl is complete
            if status["status"] == "completed":
                print(f"Saved {len(processed_urls)} pages.")
                with open(f"{output_dir}/full_results.json", "w") as f:
                    json.dump(status, f, indent=2)
                break

            time.sleep(5)  # Wait before checking again
        return docs

    def crawl(self, urls: List[str]) -> List[Document]:
        try:
            from firecrawl import FirecrawlApp
        except ImportError:
            raise LangroidImportError("firecrawl", "firecrawl")

        app = FirecrawlApp(api_key=self.config.api_key)
        docs = []
        params = self.config.params.copy()  # Create a copy of the existing params

        if self.config.timeout is not None:
            params["timeout"] = self.config.timeout  # Add/override timeout in params

        if self.config.mode == "scrape":
            for url in urls:
                try:
                    result = app.scrape_url(url, params=params)
                    metadata = result.get(
                        "metadata", {}
                    )  # Default to empty dict if missing
                    status_code = metadata.get("statusCode")

                    if status_code == 200:
                        docs.append(
                            Document(
                                content=result["markdown"],
                                metadata=DocMetaData(
                                    source=url,
                                    title=metadata.get("title", "Unknown Title"),
                                ),
                            )
                        )
                except Exception as e:
                    logging.warning(
                        f"Firecrawl encountered an error for {url}: {e}. "
                        "Skipping but continuing."
                    )
        elif self.config.mode == "crawl":
            if not isinstance(urls, list) or len(urls) != 1:
                raise ValueError(
                    "Crawl mode expects 'urls' to be a list containing a single URL."
                )

            # Start the crawl
            crawl_status = app.async_crawl_url(url=urls[0], params=params)

            # Save results incrementally
            docs = self._return_save_incremental_results(app, crawl_status["id"])
        return docs


class ExaCrawler(BaseCrawler):
    """Crawler implementation using Exa API."""

    def __init__(self, config: ExaCrawlerConfig) -> None:
        """Initialize the Exa crawler.

        Args:
            config: Configuration for the crawler
        """
        super().__init__(config)
        self.config: ExaCrawlerConfig = config

    @property
    def needs_parser(self) -> bool:
        return True

    def crawl(self, urls: List[str]) -> List[Document]:
        """Crawl the given URLs using Exa SDK.

        Args:
            urls: List of URLs to crawl

        Returns:
            List of Documents with content extracted from the URLs

        Raises:
            LangroidImportError: If the exa package is not installed
            ValueError: If the Exa API key is not set
        """
        try:
            from exa_py import Exa
        except ImportError:
            raise LangroidImportError("exa", "exa")

        if not self.config.api_key:
            raise ValueError("EXA_API_KEY key is required in your env or .env")

        exa = Exa(self.config.api_key)
        docs = []

        try:
            for url in urls:
                parsed_doc_chunks = self._process_document(url)
                if parsed_doc_chunks:
                    docs.extend(parsed_doc_chunks)
                    continue
                else:
                    results = exa.get_contents(
                        [url],
                        livecrawl="always",
                        text={
                            "include_html_tags": True,
                        },
                    )
                    result = results.results[0]
                    if result.text:
                        md_text = md.markdownify(result.text, heading_style="ATX")
                        # append a NON-chunked document
                        # (metadata.is_chunk = False, so will be chunked downstream)
                        docs.append(
                            Document(
                                content=md_text,
                                metadata=DocMetaData(
                                    source=url,
                                    title=getattr(result, "title", "Unknown Title"),
                                    published_date=getattr(
                                        result, "published_date", "Unknown Date"
                                    ),
                                ),
                            )
                        )

        except Exception as e:
            logging.error(f"Error retrieving content from Exa API: {e}")

        return docs


class URLLoader:
    """Loads URLs and extracts text using a specified crawler."""

    def __init__(
        self,
        urls: List[Any],
        parsing_config: ParsingConfig = ParsingConfig(),
        crawler_config: Optional[BaseCrawlerConfig] = None,
    ):
        """Initialize the URL loader.

        Args:
            urls: List of URLs to load
            parsing_config: Configuration for parsing
            crawler_config: Configuration for the crawler
        """
        self.urls = urls
        self.parsing_config = parsing_config

        if crawler_config is None:
            crawler_config = TrafilaturaConfig(parser=Parser(parsing_config))

        self.crawler = CrawlerFactory.create_crawler(crawler_config)
        if self.crawler.needs_parser:
            self.crawler.parser = Parser(parsing_config)

    def load(self) -> List[Document]:
        """Load the URLs using the specified crawler."""
        return self.crawler.crawl(self.urls)
</file>

<file path="langroid/parsing/urls.py">
import logging
import os
import tempfile
import urllib.parse
import urllib.robotparser
from typing import List, Optional, Set, Tuple
from urllib.parse import urldefrag, urljoin, urlparse

import fire
import requests
from bs4 import BeautifulSoup
from rich import print
from rich.prompt import Prompt

from langroid.pydantic_v1 import BaseModel, HttpUrl, ValidationError, parse_obj_as

logger = logging.getLogger(__name__)


def url_to_tempfile(url: str) -> str:
    """
    Fetch content from the given URL and save it to a temporary local file.

    Args:
        url (str): The URL of the content to fetch.

    Returns:
        str: The path to the temporary file where the content is saved.

    Raises:
        HTTPError: If there's any issue fetching the content.
    """

    response = requests.get(url)
    response.raise_for_status()  # Raise an exception for HTTP errors

    # Create a temporary file and write the content
    with tempfile.NamedTemporaryFile(delete=False, suffix=".tmp") as temp_file:
        temp_file.write(response.content)
        return temp_file.name


def get_user_input(msg: str, color: str = "blue") -> str:
    """
    Prompt the user for input.
    Args:
        msg: printed prompt
        color: color of the prompt
    Returns:
        user input
    """
    color_str = f"[{color}]{msg} " if color else msg + " "
    print(color_str, end="")
    return input("")


def get_list_from_user(
    prompt: str = "Enter input (type 'done' or hit return to finish)",
    n: int | None = None,
) -> List[str]:
    """
    Prompt the user for inputs.
    Args:
        prompt: printed prompt
        n: how many inputs to prompt for. If None, then prompt until done, otherwise
            quit after n inputs.
    Returns:
        list of input strings
    """
    # Create an empty set to store the URLs.
    input_set = set()

    # Use a while loop to continuously ask the user for URLs.
    for _ in range(n or 1000):
        # Prompt the user for input.
        input_str = Prompt.ask(f"[blue]{prompt}")

        # Check if the user wants to exit the loop.
        if input_str.lower() == "done" or input_str == "":
            break

        # if it is a URL, ask how many to crawl
        if is_url(input_str):
            url = input_str
            input_str = Prompt.ask("[blue] How many new URLs to crawl?", default="0")
            max_urls = int(input_str) + 1
            tot_urls = list(find_urls(url, max_links=max_urls, max_depth=2))
            tot_urls_str = "\n".join(tot_urls)
            print(
                f"""
                Found these {len(tot_urls)} links upto depth 2:
                {tot_urls_str}
                """
            )

            input_set.update(tot_urls)
        else:
            input_set.add(input_str.strip())

    return list(input_set)


class Url(BaseModel):
    url: HttpUrl


def is_url(s: str) -> bool:
    try:
        Url(url=parse_obj_as(HttpUrl, s))
        return True
    except ValidationError:
        return False


def get_urls_paths_bytes_indices(
    inputs: List[str | bytes],
) -> Tuple[List[int], List[int], List[int]]:
    """
    Given a list of inputs, return a
    list of indices of URLs, list of indices of paths, list of indices of byte-contents.
    Args:
        inputs: list of strings or bytes
    Returns:
        list of Indices of URLs,
        list of indices of paths,
        list of indices of byte-contents
    """
    urls = []
    paths = []
    byte_list = []
    for i, item in enumerate(inputs):
        if isinstance(item, bytes):
            byte_list.append(i)
            continue
        try:
            Url(url=parse_obj_as(HttpUrl, item))
            urls.append(i)
        except ValidationError:
            if os.path.exists(item):
                paths.append(i)
            else:
                logger.warning(f"{item} is neither a URL nor a path.")
    return urls, paths, byte_list


def crawl_url(url: str, max_urls: int = 1) -> List[str]:
    """
    Crawl starting at the url and return a list of URLs to be parsed,
    up to a maximum of `max_urls`.
    This has not been tested to work as intended. Ignore.
    """
    from trafilatura.spider import focused_crawler

    if max_urls == 1:
        # no need to crawl, just return the original list
        return [url]

    to_visit = None
    known_urls = None

    # Create a RobotFileParser object
    robots = urllib.robotparser.RobotFileParser()
    while True:
        if known_urls is not None and len(known_urls) >= max_urls:
            break
        # Set the RobotFileParser object to the website's robots.txt file
        robots.set_url(url + "/robots.txt")
        robots.read()

        if robots.can_fetch("*", url):
            # Start or resume the crawl
            to_visit, known_urls = focused_crawler(
                url,
                max_seen_urls=max_urls,
                max_known_urls=max_urls,
                todo=to_visit,
                known_links=known_urls,
                rules=robots,
            )
        if to_visit is None:
            break

    if known_urls is None:
        return [url]
    final_urls = [s.strip() for s in known_urls]
    return list(final_urls)[:max_urls]


def find_urls(
    url: str = "https://en.wikipedia.org/wiki/Generative_pre-trained_transformer",
    max_links: int = 20,
    visited: Optional[Set[str]] = None,
    depth: int = 0,
    max_depth: int = 2,
    match_domain: bool = True,
) -> Set[str]:
    """
    Recursively find all URLs on a given page.

    Args:
        url (str): The URL to start from.
        max_links (int): The maximum number of links to find.
        visited (set): A set of URLs that have already been visited.
        depth (int): The current depth of the recursion.
        max_depth (int): The maximum depth of the recursion.
        match_domain (bool): Whether to only return URLs that are on the same domain.

    Returns:
        set: A set of URLs found on the page.
    """

    if visited is None:
        visited = set()

    if url in visited or depth > max_depth:
        return visited

    visited.add(url)
    base_domain = urlparse(url).netloc

    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        links = [
            urljoin(url, a["href"])  # type: ignore
            for a in soup.find_all("a", href=True)
        ]

        # Defrag links: discard links that are to portions of same page
        defragged_links = list(
            set(urldefrag(link).url for link in links)  # type: ignore
        )

        # Filter links based on domain matching requirement
        domain_matching_links = [
            link for link in defragged_links if urlparse(link).netloc == base_domain
        ]

        # ensure url is first, since below we are taking first max_links urls
        domain_matching_links = [url] + [x for x in domain_matching_links if x != url]

        # If found links exceed max_links, return immediately
        if len(domain_matching_links) >= max_links:
            return set(domain_matching_links[:max_links])

        for link in domain_matching_links:
            if len(visited) >= max_links:
                break

            if link not in visited:
                visited.update(
                    find_urls(
                        link,
                        max_links,
                        visited,
                        depth + 1,
                        max_depth,
                        match_domain,
                    )
                )

    except (requests.RequestException, Exception) as e:
        print(f"Error fetching {url}. Error: {e}")

    return set(list(visited)[:max_links])


def org_user_from_github(url: str) -> str:
    parsed = urllib.parse.urlparse(url)
    org, user = parsed.path.lstrip("/").split("/")
    return f"{org}-{user}"


if __name__ == "__main__":
    # Example usage
    found_urls = set(fire.Fire(find_urls))
    for url in found_urls:
        print(url)
</file>

<file path="langroid/parsing/utils.py">
import difflib
import logging
import random
import re
from functools import cache
from itertools import islice
from typing import Iterable, List, Sequence, TypeVar

from faker import Faker

from langroid.mytypes import Document
from langroid.parsing.document_parser import DocumentType
from langroid.parsing.parser import Parser, ParsingConfig
from langroid.parsing.repo_loader import RepoLoader
from langroid.parsing.url_loader import URLLoader
from langroid.parsing.urls import get_urls_paths_bytes_indices

Faker.seed(23)
random.seed(43)

logger = logging.getLogger(__name__)


def download_nltk_resource(resource: str) -> None:
    import nltk

    @cache
    def _download() -> None:
        try:
            nltk.data.find(resource)
        except LookupError:
            model = resource.split("/")[-1]
            nltk.download(model, quiet=True)

    _download()


T = TypeVar("T")


def batched(iterable: Iterable[T], n: int) -> Iterable[Sequence[T]]:
    """Batch data into tuples of length n. The last batch may be shorter."""
    # batched('ABCDEFG', 3) --> ABC DEF G
    if n < 1:
        raise ValueError("n must be at least one")
    it = iter(iterable)
    while batch := tuple(islice(it, n)):
        yield batch


def generate_random_sentences(k: int) -> str:
    # Load the sample text
    import nltk
    from nltk.corpus import gutenberg

    download_nltk_resource("corpora/gutenberg")
    download_nltk_resource("tokenizers/punkt")

    text = gutenberg.raw("austen-emma.txt")

    # Split the text into sentences
    sentences = nltk.tokenize.sent_tokenize(text)

    # Generate k random sentences
    random_sentences = random.choices(sentences, k=k)
    return " ".join(random_sentences)


def generate_random_text(num_sentences: int) -> str:
    fake = Faker()
    text = ""
    for _ in range(num_sentences):
        text += fake.sentence() + " "
    return text


def closest_string(query: str, string_list: List[str]) -> str:
    """Find the closest match to the query in a list of strings.

    This function is case-insensitive and ignores leading and trailing whitespace.
    If no match is found, it returns 'No match found'.

    Args:
        query (str): The string to match.
        string_list (List[str]): The list of strings to search.

    Returns:
        str: The closest match to the query from the list, or 'No match found'
             if no match is found.
    """
    # Create a dictionary where the keys are the standardized strings and
    # the values are the original strings.
    str_dict = {s.lower().strip(): s for s in string_list}

    # Standardize the query and find the closest match in the list of keys.
    closest_match = difflib.get_close_matches(
        query.lower().strip(), str_dict.keys(), n=1
    )

    # Retrieve the original string from the value in the dictionary.
    original_closest_match = (
        str_dict[closest_match[0]] if closest_match else "No match found"
    )

    return original_closest_match


def split_paragraphs(text: str) -> List[str]:
    """
    Split the input text into paragraphs using "\n\n" as the delimiter.

    Args:
        text (str): The input text.

    Returns:
        list: A list of paragraphs.
    """
    # Split based on a newline, followed by spaces/tabs, then another newline.
    paras = re.split(r"\n[ \t]*\n", text)
    return [para.strip() for para in paras if para.strip()]


def split_newlines(text: str) -> List[str]:
    """
    Split the input text into lines using "\n" as the delimiter.

    Args:
        text (str): The input text.

    Returns:
        list: A list of lines.
    """
    lines = re.split(r"\n", text)
    return [line.strip() for line in lines if line.strip()]


def number_segments(s: str, granularity: int = 1) -> str:
    """
    Number the segments in a given text, preserving paragraph structure.
    A segment is a sequence of `len` consecutive "sentences", where a "sentence"
    is either a normal sentence, or if there isn't enough punctuation to properly
    identify sentences, then we use a pseudo-sentence via heuristics (split by newline
    or failing that, just split every 40 words). The goal here is simply to number
    segments at a reasonable granularity so the LLM can identify relevant segments,
    in the RelevanceExtractorAgent.

    Args:
        s (str): The input text.
        granularity (int): The number of sentences in a segment.
            If this is -1, then the entire text is treated as a single segment,
            and is numbered as <#1#>.

    Returns:
        str: The text with segments numbered in the style <#1#>, <#2#> etc.

    Example:
        >>> number_segments("Hello world! How are you? Have a good day.")
        '<#1#> Hello world! <#2#> How are you? <#3#> Have a good day.'
    """
    import nltk

    if granularity < 0:
        return "<#1#> " + s
    numbered_text = []
    count = 0

    paragraphs = split_paragraphs(s)
    for paragraph in paragraphs:
        sentences = nltk.sent_tokenize(paragraph)
        # Some docs are problematic (e.g. resumes) and have no (or too few) periods,
        # so we can't split usefully into sentences.
        # We try a series of heuristics to split into sentences,
        # until the avg num words per sentence is less than 40.
        avg_words_per_sentence = sum(
            len(nltk.word_tokenize(sentence)) for sentence in sentences
        ) / len(sentences)
        if avg_words_per_sentence > 40:
            sentences = split_newlines(paragraph)
        avg_words_per_sentence = sum(
            len(nltk.word_tokenize(sentence)) for sentence in sentences
        ) / len(sentences)
        if avg_words_per_sentence > 40:
            # Still too long, just split on every 40 words
            sentences = []
            for sentence in nltk.sent_tokenize(paragraph):
                words = nltk.word_tokenize(sentence)
                for i in range(0, len(words), 40):
                    # if there are less than 20 words left after this,
                    # just add them to the last sentence and break
                    if len(words) - i < 20:
                        sentences.append(" ".join(words[i:]))
                        break
                    else:
                        sentences.append(" ".join(words[i : i + 40]))
        for i, sentence in enumerate(sentences):
            num = count // granularity + 1
            number_prefix = f"<#{num}#>" if count % granularity == 0 else ""
            sentence = f"{number_prefix} {sentence}"
            count += 1
            sentences[i] = sentence
        numbered_paragraph = " ".join(sentences)
        numbered_text.append(numbered_paragraph)

    return "  \n\n  ".join(numbered_text)


def number_sentences(s: str) -> str:
    return number_segments(s, granularity=1)


def parse_number_range_list(specs: str) -> List[int]:
    """
    Parse a specs string like "3,5,7-10" into a list of integers.

    Args:
        specs (str): A string containing segment numbers and/or ranges
                     (e.g., "3,5,7-10").

    Returns:
        List[int]: List of segment numbers.

    Example:
        >>> parse_number_range_list("3,5,7-10")
        [3, 5, 7, 8, 9, 10]
    """
    spec_indices = set()  # type: ignore
    for part in specs.split(","):
        # some weak LLMs may generate <#1#> instead of 1, so extract just the digits
        # or the "-"
        part = "".join(char for char in part if char.isdigit() or char == "-")
        if "-" in part:
            start, end = map(int, part.split("-"))
            spec_indices.update(range(start, end + 1))
        else:
            spec_indices.add(int(part))

    return sorted(list(spec_indices))


def strip_k(s: str, k: int = 2) -> str:
    """
    Strip any leading and trailing whitespaces from the input text beyond length k.
    This is useful for removing leading/trailing whitespaces from a text while
    preserving paragraph structure.

    Args:
        s (str): The input text.
        k (int): The number of leading and trailing whitespaces to retain.

    Returns:
        str: The text with leading and trailing whitespaces removed beyond length k.
    """

    # Count leading and trailing whitespaces
    leading_count = len(s) - len(s.lstrip())
    trailing_count = len(s) - len(s.rstrip())

    # Determine how many whitespaces to retain
    leading_keep = min(leading_count, k)
    trailing_keep = min(trailing_count, k)

    # Use slicing to get the desired output
    return s[leading_count - leading_keep : len(s) - (trailing_count - trailing_keep)]


def clean_whitespace(text: str) -> str:
    """Remove extra whitespace from the input text, while preserving
    paragraph structure.
    """
    paragraphs = split_paragraphs(text)
    cleaned_paragraphs = [" ".join(p.split()) for p in paragraphs if p]
    return "\n\n".join(cleaned_paragraphs)  # Join the cleaned paragraphs.


def extract_numbered_segments(s: str, specs: str) -> str:
    """
    Extract specified segments from a numbered text, preserving paragraph structure.

    Args:
        s (str): The input text containing numbered segments.
        specs (str): A string containing segment numbers and/or ranges
                     (e.g., "3,5,7-10").

    Returns:
        str: Extracted segments, keeping original paragraph structures.

    Example:
        >>> text = "(1) Hello world! (2) How are you? (3) Have a good day."
        >>> extract_numbered_segments(text, "1,3")
        'Hello world! Have a good day.'
    """
    # Use the helper function to get the list of indices from specs
    if specs.strip() == "":
        return ""
    spec_indices = parse_number_range_list(specs)

    # Regular expression to identify numbered segments like
    # <#1#> Hello world! This is me. <#2#> How are you? <#3#> Have a good day.
    # Note we match any character between segment markers, including newlines.
    segment_pattern = re.compile(r"<#(\d+)#>([\s\S]*?)(?=<#\d+#>|$)")

    # Split the text into paragraphs while preserving their boundaries
    paragraphs = split_paragraphs(s)

    extracted_paragraphs = []

    for paragraph in paragraphs:
        segments_with_numbers = segment_pattern.findall(paragraph)

        # Extract the desired segments from this paragraph
        extracted_segments = [
            segment
            for num, segment in segments_with_numbers
            if int(num) in spec_indices
        ]

        # If we extracted any segments from this paragraph,
        # join them with ellipsis (...) and append to results.
        if extracted_segments:
            extracted_paragraphs.append("...".join(extracted_segments))

    return "\n\n".join(extracted_paragraphs)


def extract_content_from_path(
    path: bytes | str | List[bytes | str],
    parsing: ParsingConfig,
    doc_type: str | DocumentType | None = None,
) -> str | List[str]:
    """
    Extract the content from a file path or URL, or a list of file paths or URLs.

    Args:
        path (bytes | str | List[str]): The file path or URL, or a list of file paths or
            URLs, or bytes content. The bytes option is meant to support cases
            where upstream code may have already loaded the content (e.g., from a
            database or API) and we want to avoid having to copy the content to a
            temporary file.
        parsing (ParsingConfig): The parsing configuration.
        doc_type (str | DocumentType | None): The document type if known.
            If multiple paths are given, this MUST apply to ALL docs.

    Returns:
        str | List[str]: The extracted content if a single file path or URL is provided,
                or a list of extracted contents if a
                list of file paths or URLs is provided.
    """
    if isinstance(path, str) or isinstance(path, bytes):
        paths = [path]
    elif isinstance(path, list) and len(path) == 0:
        return ""
    else:
        paths = path

    url_idxs, path_idxs, byte_idxs = get_urls_paths_bytes_indices(paths)
    urls = [paths[i] for i in url_idxs]
    path_list = [paths[i] for i in path_idxs]
    byte_list = [paths[i] for i in byte_idxs]
    path_list.extend(byte_list)
    parser = Parser(parsing)
    docs: List[Document] = []
    try:
        if len(urls) > 0:
            loader = URLLoader(urls=urls, parser=parser)  # type: ignore
            docs = loader.load()
        if len(path_list) > 0:
            for p in path_list:
                path_docs = RepoLoader.get_documents(
                    p, parser=parser, doc_type=doc_type
                )
                docs.extend(path_docs)
    except Exception as e:
        logger.warning(f"Error loading path {paths}: {e}")
        return ""
    if len(docs) == 1:
        return docs[0].content
    else:
        return [d.content for d in docs]
</file>

<file path="langroid/parsing/web_search.py">
"""
Utilities for web search.

NOTE: Using Google Search requires setting the GOOGLE_API_KEY and GOOGLE_CSE_ID
environment variables in your `.env` file, as explained in the
[README](https://github.com/langroid/langroid#gear-installation-and-setup).
"""

import os
from typing import Dict, List

import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from duckduckgo_search import DDGS
from googleapiclient.discovery import Resource, build
from requests.models import Response

from langroid.exceptions import LangroidImportError


class WebSearchResult:
    """
    Class representing a Web Search result, containing the title, link,
    summary and full content of the result.
    """

    def __init__(
        self,
        title: str,
        link: str | None,
        max_content_length: int = 3500,
        max_summary_length: int = 300,
    ):
        """
        Args:
            title (str): The title of the search result.
            link (str): The link to the search result.
            max_content_length (int): The maximum length of the full content.
            max_summary_length (int): The maximum length of the summary.
        """
        self.title = title
        self.link = link
        self.max_content_length = max_content_length
        self.max_summary_length = max_summary_length
        self.full_content = self.get_full_content()
        self.summary = self.get_summary()

    def get_summary(self) -> str:
        return self.full_content[: self.max_summary_length]

    def get_full_content(self) -> str:
        if self.link is None:
            return "Error: No Search Result"
        try:
            # First check headers only to get content length and type
            head_response: Response = requests.head(self.link, timeout=5)
            content_type = head_response.headers.get("content-type", "").lower()

            # Skip large files
            content_length = int(head_response.headers.get("content-length", 0))
            if content_length > 5_000_000:  # 5MB limit
                return (
                    f"Error: Content too large ({content_length} bytes) for {self.link}"
                )
            # Skip non-HTML content types
            if content_type and not any(
                html_type in content_type
                for html_type in ["text/html", "application/xhtml", "text/plain"]
            ):
                return f"Skipping Content type '{content_type}' " f"in {self.link}"

            response: Response = requests.get(self.link, timeout=10)
            if response.status_code != 200:
                return f"Error: HTTP {response.status_code} for {self.link}"

            import warnings

            from bs4 import XMLParsedAsHTMLWarning

            warnings.filterwarnings("ignore", category=XMLParsedAsHTMLWarning)

            soup: BeautifulSoup = BeautifulSoup(response.text, "html.parser")
            text = " ".join(soup.stripped_strings)
            return text[: self.max_content_length]
        except Exception as e:
            return f"Error fetching content from {self.link}: {e}"

    def __str__(self) -> str:
        return f"Title: {self.title}\nLink: {self.link}\nSummary: {self.summary}"

    def to_dict(self) -> Dict[str, str]:
        return {
            "title": self.title,
            "link": self.link or "",
            "summary": self.summary,
            "full_content": self.full_content,
        }


def google_search(query: str, num_results: int = 5) -> List[WebSearchResult]:
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    cse_id = os.getenv("GOOGLE_CSE_ID")
    service: Resource = build("customsearch", "v1", developerKey=api_key)
    raw_results = (
        service.cse().list(q=query, cx=cse_id, num=num_results).execute()["items"]
    )

    return [
        WebSearchResult(result["title"], result["link"], 3500, 300)
        for result in raw_results
    ]


def metaphor_search(query: str, num_results: int = 5) -> List[WebSearchResult]:
    """
    Method that makes an API call by Metaphor client that queries
    the top num_results links that matches the query. Returns a list
    of WebSearchResult objects.

    Args:
        query (str): The query body that users wants to make.
        num_results (int): Number of top matching results that we want
            to grab
    """

    load_dotenv()

    api_key = os.getenv("METAPHOR_API_KEY") or os.getenv("EXA_API_KEY")
    if not api_key:
        raise ValueError(
            """
            Neither METAPHOR_API_KEY nor EXA_API_KEY environment variables are set. 
            Please set one of them to your API key, and try again.
            """
        )

    try:
        from metaphor_python import Metaphor
    except ImportError:
        raise LangroidImportError("metaphor-python", "metaphor")

    client = Metaphor(api_key=api_key)

    response = client.search(
        query=query,
        num_results=num_results,
    )
    raw_results = response.results

    return [
        WebSearchResult(result.title, result.url, 3500, 300) for result in raw_results
    ]


def exa_search(query: str, num_results: int = 5) -> List[WebSearchResult]:
    """
    Method that makes an API call by Exa client that queries
    the top num_results links that matches the query. Returns a list
    of WebSearchResult objects.

    Args:
        query (str): The query body that users wants to make.
        num_results (int): Number of top matching results that we want
            to grab
    """

    load_dotenv()

    api_key = os.getenv("EXA_API_KEY")
    if not api_key:
        raise ValueError(
            """
            EXA_API_KEY environment variables are not set. 
            Please set one of them to your API key, and try again.
            """
        )

    try:
        from exa_py import Exa
    except ImportError:
        raise LangroidImportError("exa-py", "exa")

    client = Exa(api_key=api_key)

    try:
        response = client.search(
            query=query,
            num_results=num_results,
        )
        raw_results = response.results

        return [
            WebSearchResult(
                title=result.title or "",
                link=result.url,
                max_content_length=3500,
                max_summary_length=300,
            )
            for result in raw_results
            if result.url is not None
        ]
    except Exception:
        return [
            WebSearchResult(
                title="Error",
                link=None,
                max_content_length=3500,
                max_summary_length=300,
            )
        ]


def duckduckgo_search(query: str, num_results: int = 5) -> List[WebSearchResult]:
    """
    Method that makes an API call by DuckDuckGo client that queries
    the top `num_results` links that matche the query. Returns a list
    of WebSearchResult objects.

    Args:
        query (str): The query body that users wants to make.
        num_results (int): Number of top matching results that we want
            to grab
    """

    with DDGS() as ddgs:
        search_results = [r for r in ddgs.text(query, max_results=num_results)]

    return [
        WebSearchResult(
            title=result["title"],
            link=result["href"],
            max_content_length=3500,
            max_summary_length=300,
        )
        for result in search_results
    ]


def tavily_search(query: str, num_results: int = 5) -> List[WebSearchResult]:
    """
    Method that makes an API call to Tavily API that queries
    the top `num_results` links that match the query. Returns a list
    of WebSearchResult objects.

    Args:
        query (str): The query body that users wants to make.
        num_results (int): Number of top matching results that we want
            to grab
    """

    load_dotenv()

    api_key = os.getenv("TAVILY_API_KEY")
    if not api_key:
        raise ValueError(
            "TAVILY_API_KEY environment variable is not set. "
            "Please set it to your API key and try again."
        )

    try:
        from tavily import TavilyClient
    except ImportError:
        raise LangroidImportError("tavily-python", "tavily")

    client = TavilyClient(api_key=api_key)
    response = client.search(query=query, max_results=num_results)
    search_results = response["results"]

    return [
        WebSearchResult(
            title=result["title"],
            link=result["url"],
            max_content_length=3500,
            max_summary_length=300,
        )
        for result in search_results
    ]
</file>

<file path="langroid/prompts/__init__.py">
from . import dialog
from . import prompts_config
from . import templates

__all__ = [
    "dialog",
    "prompts_config",
    "templates",
]
</file>

<file path="langroid/prompts/dialog.py">
from typing import List


def collate_chat_history(inputs: List[tuple[str, str]]) -> str:
    """
    Collate (human, ai) pairs into a single, string
    Args:
        inputs:
    Returns:
    """
    pairs = [
        f"""Human:{human}
        AI:{ai}
        """
        for human, ai in inputs
    ]
    return "\n".join(pairs)
</file>

<file path="langroid/prompts/prompts_config.py">
from langroid.pydantic_v1 import BaseSettings


class PromptsConfig(BaseSettings):
    max_tokens: int = 1000  # for output; NOT USED ANYWHERE
</file>

<file path="langroid/prompts/templates.py">
from langroid.utils.constants import NO_ANSWER

EXTRACT_RELEVANT = """
    Here is a passage from a long document, followed by a question. 
    In case the passage contains any text relevant to answer the question, return it 
    verbatim.
    {passage}    
    Question:{question}
    Relevant text, if any: """.strip()

EXTRACTION_PROMPT_GPT4 = f"""
Given the content and question below, extract COMPLETE SENTENCES OR PHRASES 
VERBATIM from the content, that are relevant to answering the question (if such text 
exists), even if it contradicts your knowledge, and even if it is factually incorrect.
Do not  make up an answer that is not supported by the content. 
When you answer, be concise, no need to explain anything. If there is no relevant text,
simply say {NO_ANSWER}.

Content: {{content}}
Question: {{question}}
Relevant text, if any:
"""

EXTRACTION_PROMPT = f"""
    Given the content and question below, extract a COMPLETE SENTENCE verbatim from the 
    content that is relevant to answering the question (if such text exists). Do not 
    make up an answer.
    
    Content: The Eiffel Tower is a wrought-iron lattice tower on the Champ de Mars in
    Paris, France. It is named after Gustave Eiffel, whose company designed and built
    the tower. It is a recognizable landmark.
    Question: Where is the Eiffel Tower located?
    Relevant text, if any: on the Champ de Mars in Paris, France.
    
    Content: Apples and oranges are both fruits, but differ in taste and texture.
    Apples are sweet and crisp, while oranges are citrusy and juicy. Both are
    nutritious and commonly consumed worldwide.
    Question: What are the similarities between apples and oranges?
    Relevant text, if any: both fruits
    
    Content: The sun rises in the east and sets in the west. It is a source of light
    and warmth for the Earth.
    Question: What is the color of the sun?
    Relevant text, if any: {NO_ANSWER}
    
    Content: {{content}}
    Question: {{question}}
    Relevant text (COMPLETE SENTENCE), if any:
    """.strip()

SUMMARY_ANSWER_PROMPT_GPT4 = f"""

        Use the provided NUMBERED EXTRACTS (with sources)  to answer the QUESTION. 
        If there's not enough information, respond with {NO_ANSWER}. Use ONLY the 
        information in these extracts, even if your answer is factually incorrect.
        and even if the answer contradicts other parts of the document. The only 
        important thing is that your answer is consistent with and supported by the 
        extracts. Compose your complete answer, inserting CITATIONS in MARKDOWN format
        [^i][^j] where i,j,... are the extract NUMBERS you are 
        citing.
        For EXAMPLE your answer might look like this (NOTE HOW multiple citations
        are grouped as [^2][^5]):
        
        <ExampleAnswer>
        Beethoven composed the 9th symphony in 1824.[^1] After that he became deaf
        and could not hear his own music. [^2][^5]. He was a prolific composer and
        wrote many famous pieces.
        </ExampleAnswer>
        
        
        NUMBERED EXTRACTS:
        
        {{extracts}}
        
        QUESTION:
        {{question}}

""".strip()

ANSWER_PROMPT_USE_HISTORY_GPT4 = f"""

        Use ANY of the information earlier, as well as the extracts provided below 
        (with sources)  to answer the question. If there's not 
        enough information, respond with {NO_ANSWER}.
        Use only the information in this conversation or these extracts, 
        even if your answer is factually incorrect, and even 
        if the answer contracts other parts of the document.
        The only important thing is that your answer is 
        consistent with information provided here or earlier.
        Compose your complete answer and cite all supporting sources 
        on a separate separate line as "SOURCE:". 
        When citing a SOURCE: be concise, whether it refers to a source in these 
        extracts, or info provided earlier.
        
        {{extracts}}
        {{question}}
        Answer:   
""".strip()


SUMMARY_ANSWER_PROMPT = f"""
        Use the provided extracts (with sources)  to answer the question. 
        If there's not enough information, respond with {NO_ANSWER}.
        Use only the information in these extracts, even if it contradicts your prior 
        knowledge. Justify your answer by citing your sources, as in these examples:
        
        Extract: The tree species in the garden include oak, maple, and birch.
        Source: https://en.wikipedia.org/wiki/Tree
        Extract: The oak trees are known for their longevity and strength.
        Source: https://en.wikipedia.org/wiki/Oak
        Question: What types of trees are in the garden?
        Answer: The types of trees in the garden include oak, maple, and birch.
        SOURCE: https://en.wikipedia.org/wiki/Tree
        TEXT: The tree species in the garden include oak, maple, and birch.
        
        Extract: The experiment involved three groups: control, low dose, and high 
        dose. 
        Source: https://en.wikipedia.org/wiki/Experiment
        Extract: The high dose group showed significant improvement in symptoms.
        Source: https://en.wikipedia.org/wiki/Experiment
        Extract: The control group did not receive any 
        treatment and served as a baseline.
        Source: https://en.wikipedia.org/wiki/Experiment
        Question: How many groups were involved which group showed significant 
        improvement? 
        Answer: There were three groups and the high dose group showed significant 
        improvement in symptoms.
        SOURCE: https://en.wikipedia.org/wiki/Experiment
        TEXT: The experiment involved three groups: control, low dose, and high dose.
        SOURCE: https://en.wikipedia.org/wiki/Experiment
        TEXT: The high dose group showed significant improvement in symptoms.
        
        
        Extract: The CEO announced several new initiatives during the company meeting.
        Source: https://en.wikipedia.org/wiki/CEO
        Extract: The financial performance of the company has been strong this year.
        Source: https://en.wikipedia.org/wiki/CEO
        Question: What new initiatives did the CEO announce?
        Answer: {NO_ANSWER}
        
        {{extracts}}
        {{question}}
        Answer:
        """.strip()
</file>

<file path="langroid/pydantic_v1/__init__.py">
"""
If we're on Pydantic v2, use the v1 namespace, else just use the main namespace.

This allows compatibility with both Pydantic v1 and v2
"""

try:
    from pydantic.v1 import *  # noqa: F403, F401
except ImportError:
    from pydantic import *  # type: ignore # noqa: F403, F401
</file>

<file path="langroid/pydantic_v1/main.py">
try:
    from pydantic.v1.main import *  # noqa: F403, F401
except ImportError:
    from pydantic.main import *  # type: ignore # noqa: F403, F401
</file>

<file path="langroid/utils/algorithms/__init__.py">
from . import graph

__all__ = ["graph"]
</file>

<file path="langroid/utils/algorithms/graph.py">
"""
Graph algos.
"""

from typing import Dict, List, no_type_check

import numpy as np


@no_type_check
def topological_sort(order: np.array) -> List[int]:
    """
    Given a directed adjacency matrix, return a topological sort of the nodes.
    order[i,j] = -1 means there is an edge from i to j.
    order[i,j] = 0 means there is no edge from i to j.
    order[i,j] = 1 means there is an edge from j to i.

    Args:
        order (np.array): The adjacency matrix.

    Returns:
        List[int]: The topological sort of the nodes.

    """
    n = order.shape[0]

    # Calculate the in-degrees
    in_degree = [0] * n
    for i in range(n):
        for j in range(n):
            if order[i, j] == -1:
                in_degree[j] += 1

    # Initialize the queue with nodes of in-degree 0
    queue = [i for i in range(n) if in_degree[i] == 0]
    result = []

    while queue:
        node = queue.pop(0)
        result.append(node)

        for i in range(n):
            if order[node, i] == -1:
                in_degree[i] -= 1
                if in_degree[i] == 0:
                    queue.append(i)

    assert len(result) == n, "Cycle detected"
    return result


@no_type_check
def components(order: np.ndarray) -> List[List[int]]:
    """
    Find the connected components in an undirected graph represented by a matrix.

    Args:
        order (np.ndarray): A matrix with values 0 or 1 indicating
            undirected graph edges. `order[i][j] = 1` means an edge between `i`
            and `j`, and `0` means no edge.

    Returns:
        List[List[int]]: A list of List where each List contains the indices of
            nodes in the same connected component.

    Example:
        order = np.array([
            [1, 1, 0, 0],
            [1, 1, 1, 0],
            [0, 1, 1, 0],
            [0, 0, 0, 1]
        ])
        components(order)
        # [[0, 1, 2], [3]]
    """

    i2g: Dict[int, int] = {}  # index to group mapping
    next_group = 0
    n = order.shape[0]
    for i in range(n):
        connected_groups = {i2g[j] for j in np.nonzero(order[i, :])[0] if j in i2g}

        # If the node is not part of any group
        # and is not connected to any groups, assign a new group
        if not connected_groups:
            i2g[i] = next_group
            next_group += 1
        else:
            # If the node is connected to multiple groups, we merge them
            main_group = min(connected_groups)
            for j in np.nonzero(order[i, :])[0]:
                if i2g.get(j) in connected_groups:
                    i2g[j] = main_group
            i2g[i] = main_group

    # Convert i2g to a list of Lists
    groups: Dict[int, List[int]] = {}
    for index, group in i2g.items():
        if group not in groups:
            groups[group] = []
        groups[group].append(index)

    return list(groups.values())
</file>

<file path="langroid/utils/output/__init__.py">
from . import printing
from .printing import (
    shorten_text,
    print_long_text,
    show_if_debug,
    SuppressLoggerWarnings,
    PrintColored,
)
from .status import status


__all__ = [
    "printing",
    "shorten_text",
    "print_long_text",
    "show_if_debug",
    "SuppressLoggerWarnings",
    "PrintColored",
    "status",
]
</file>

<file path="langroid/utils/output/citations.py">
import logging
from typing import List, Tuple

from langroid.mytypes import Document

logger = logging.getLogger(__name__)


def extract_markdown_references(md_string: str) -> List[int]:
    """
    Extracts markdown references (e.g., [^1], [^2]) from a string and returns
    them as a sorted list of integers.

    Args:
        md_string (str): The markdown string containing references.

    Returns:
        list[int]: A sorted list of unique integers from the markdown references.
    """
    import re

    # Regex to find all occurrences of [^<number>]
    matches = re.findall(r"\[\^(\d+)\]", md_string)
    # Convert matches to integers, remove duplicates with set, and sort
    return sorted(set(int(match) for match in matches))


def invalid_markdown_citations(md_string: str) -> List[str]:
    """
    Finds non-numeric markdown citations (e.g., [^a], [^xyz]) in a string.

    Args:
        md_string (str): The markdown string to search for invalid citations.

    Returns:
        List[str]: List of invalid citation strings (without brackets/caret).
    """
    import re

    # Find all citation references first
    matches = re.findall(r"\[\^([^\]\s]+)\]", md_string)

    # Filter out purely numeric citations
    invalid_citations = [match for match in matches if not match.isdigit()]

    return sorted(set(invalid_citations))


def format_footnote_text(content: str, width: int = 0) -> str:
    """
    Formats the content so that each original line is individually processed.
    - If width=0, no wrapping is done (lines remain as is).
    - If width>0, lines are wrapped to that width.
    - Blank lines remain blank (with indentation).
    - Everything is indented by 4 spaces (for markdown footnotes).

    Args:
        content (str): The text of the footnote to be formatted.
        width (int): Maximum width of the text lines. If 0, lines are not wrapped.

    Returns:
        str: Properly formatted markdown footnote text.
    """
    import textwrap

    indent = "    "  # 4 spaces for markdown footnotes
    lines = content.split("\n")  # keep original line structure

    output_lines = []
    for line in lines:
        # If the line is empty (or just spaces), keep it blank (but indented)
        if not line.strip():
            output_lines.append(indent)
            continue

        if width > 0:
            # Wrap each non-empty line to the specified width
            wrapped = textwrap.wrap(line, width=width)
            if not wrapped:
                # If textwrap gives nothing, add a blank (indented) line
                output_lines.append(indent)
            else:
                for subline in wrapped:
                    output_lines.append(indent + subline)
        else:
            # No wrapping: just indent the original line
            output_lines.append(indent + line)

    # Join them with newline so we preserve the paragraph/blank line structure
    return "\n".join(output_lines)


def format_cited_references(
    citations: List[int], passages: list[Document]
) -> Tuple[str, str]:
    """
    Given a list of (integer) citations, and a list of passages, return a string
    that can be added as a footer to the main text, to show sources cited.

    Args:
        citations (list[int]): list of citations, presumably from main text
        passages (list[Document]): list of passages (Document objects)

    Returns:
        str: formatted string of FULL citations (i.e. reference AND content)
            for footnote in markdown;
        str: formatted string of BRIEF citations (i.e. reference only)
            for footnote in markdown.
    """
    citations_str = ""
    full_citations_str = ""
    if len(citations) > 0:
        # append [i] source, content for each citation
        good_citations = [c for c in citations if c > 0 and c <= len(passages)]
        if len(good_citations) < len(citations):
            logger.warning(f"Invalid citations: {set(citations) - set(good_citations)}")

        # source and content for each citation
        full_citations_str = "\n".join(
            [
                f"[^{c}] {str(passages[c-1].metadata)}"
                f"\n{format_footnote_text(passages[c-1].content)}"
                for c in good_citations
            ]
        )

        # source for each citation
        citations_str = "\n".join(
            [f"[^{c}] {str(passages[c-1].metadata)}" for c in good_citations]
        )
    return full_citations_str, citations_str
</file>

<file path="langroid/utils/output/printing.py">
import logging
import sys
from contextlib import contextmanager
from typing import Any, Iterator, Optional, Type

from rich import print as rprint
from rich.text import Text

from langroid.utils.configuration import settings
from langroid.utils.constants import Colors


def shorten_text(text: str, chars: int = 40) -> str:
    text = " ".join(text.split())
    return text[:chars] + "..." + text[-chars:] if len(text) > 2 * chars else text


def print_long_text(
    color: str, style: str, preamble: str, text: str, chars: Optional[int] = None
) -> None:
    if chars is not None:
        text = " ".join(text.split())
        text = text[:chars] + "..." + text[-chars:] if len(text) > 2 * chars else text
    styled_text = Text(text, style=style)
    rprint(f"[{color}]{preamble} {styled_text}")


def show_if_debug(
    text: str,
    preamble: str,
    chars: Optional[int] = None,
    color: str = "red",
    style: str = "italic",
) -> None:
    if settings.debug:
        print_long_text(color, style, preamble, text, chars)


class PrintColored:
    """Context to temporarily print in a desired color"""

    def __init__(self, color: str):
        self.color = color

    def __enter__(self) -> None:
        sys.stdout.write(self.color)
        sys.stdout.flush()

    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
        print(Colors().RESET)


@contextmanager
def silence_stdout() -> Iterator[None]:
    """
    Temporarily silence all output to stdout and from rich.print.

    This context manager redirects all output written to stdout (which includes
    outputs from the built-in print function and rich.print) to /dev/null on
    UNIX-like systems or NUL on Windows. Once the context block exits, stdout is
    restored to its original state.

    Example:
        with silence_stdout_and_rich():
            print("This won't be printed")
            rich.print("This also won't be printed")

    Note:
        This suppresses both standard print functions and the rich library outputs.
    """
    platform_null = "/dev/null" if sys.platform != "win32" else "NUL"
    original_stdout = sys.stdout
    fnull = open(platform_null, "w")
    sys.stdout = fnull
    try:
        yield
    finally:
        sys.stdout = original_stdout
        fnull.close()


class SuppressLoggerWarnings:
    def __init__(self, logger: str | None = None):
        # If no logger name is given, get the root logger
        self.logger = logging.getLogger(logger)
        self.original_level = self.logger.getEffectiveLevel()

    def __enter__(self) -> None:
        # Set the logging level to 'ERROR' to suppress warnings
        self.logger.setLevel(logging.ERROR)

    def __exit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc_value: Optional[BaseException],
        traceback: Any,
    ) -> None:
        # Reset the logging level to its original value
        self.logger.setLevel(self.original_level)
</file>

<file path="langroid/utils/output/status.py">
import logging
from contextlib import AbstractContextManager, ExitStack
from typing import Any

from rich.console import Console
from rich.errors import LiveError

from langroid.utils.configuration import quiet_mode, settings

console = Console()
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


def status(
    msg: str,
    log_if_quiet: bool = True,
) -> AbstractContextManager[Any]:
    """
    Displays a rich spinner if not in quiet mode, else optionally logs the message.
    """
    stack = ExitStack()
    logged = False
    if settings.quiet and log_if_quiet:
        logged = True
        logger.info(msg)

    if not settings.quiet:
        try:
            stack.enter_context(console.status(msg))
        except LiveError:
            if not logged:
                logger.info(msg)

    # When using rich spinner, we enforce quiet mode
    # (since output will be messy otherwise);
    # We make an exception to this when debug is enabled.
    stack.enter_context(quiet_mode(not settings.debug))

    return stack
</file>

<file path="langroid/utils/__init__.py">
from . import configuration
from . import globals
from . import constants
from . import logging
from . import pydantic_utils
from . import system
from . import output
from . import object_registry

__all__ = [
    "configuration",
    "globals",
    "constants",
    "logging",
    "pydantic_utils",
    "system",
    "output",
    "object_registry",
]
</file>

<file path="langroid/utils/configuration.py">
import os
import threading
from contextlib import contextmanager
from typing import Any, Dict, Iterator, List, Literal, cast

from dotenv import find_dotenv, load_dotenv

from langroid.pydantic_v1 import BaseSettings

# Global reentrant lock to serialize any modifications to the global settings.
_global_lock = threading.RLock()


class Settings(BaseSettings):
    debug: bool = False  # show debug messages?
    max_turns: int = -1  # maximum number of turns in a task (to avoid inf loop)
    progress: bool = False  # show progress spinners/bars?
    stream: bool = True  # stream output?
    cache: bool = True  # use cache?
    cache_type: Literal["redis", "fakeredis", "none"] = "redis"  # cache type
    chat_model: str = ""  # language model name, e.g. litellm/ollama/llama2
    quiet: bool = False  # quiet mode (i.e. suppress all output)?
    notebook: bool = False  # running in a notebook?

    class Config:
        extra = "forbid"


# Load environment variables from .env file.
load_dotenv(find_dotenv(usecwd=True))

# The global (default) settings instance.
# This is updated by update_global_settings() and set_global().
_global_settings = Settings()

# Thread-local storage for temporary (per-thread) settings overrides.
_thread_local = threading.local()


class SettingsProxy:
    """
    A proxy for the settings that returns a thread‐local override if set,
    or else falls back to the global settings.
    """

    def __getattr__(self, name: str) -> Any:
        # If the calling thread has set an override, use that.
        if hasattr(_thread_local, "override"):
            return getattr(_thread_local.override, name)
        return getattr(_global_settings, name)

    def __setattr__(self, name: str, value: Any) -> None:
        # All writes go to the global settings.
        setattr(_global_settings, name, value)

    def update(self, new_settings: Settings) -> None:
        _global_settings.__dict__.update(new_settings.__dict__)

    def dict(self) -> Dict[str, Any]:
        # Return a dict view of the settings as seen by the caller.
        # Note that temporary overrides are not “merged” with global settings.
        if hasattr(_thread_local, "override"):
            return cast(Dict[str, Any], cast(Settings, _thread_local.override.dict()))
        return _global_settings.dict()


settings = SettingsProxy()


def update_global_settings(cfg: BaseSettings, keys: List[str]) -> None:
    """
    Update global settings so that modules can later access them via, e.g.,

        from langroid.utils.configuration import settings
        if settings.debug: ...

    This updates the global default.
    """
    config_dict = cfg.dict()
    filtered_config = {key: config_dict[key] for key in keys if key in config_dict}
    new_settings = Settings(**filtered_config)
    _global_settings.__dict__.update(new_settings.__dict__)


def set_global(key_vals: Settings) -> None:
    """
    Update the global settings object.
    """
    _global_settings.__dict__.update(key_vals.__dict__)


@contextmanager
def temporary_settings(temp_settings: Settings) -> Iterator[None]:
    """
    Temporarily override the settings for the calling thread.

    Within the context, any access to "settings" will use the provided temporary
    settings. Once the context is exited, the thread reverts to the global settings.
    """
    saved = getattr(_thread_local, "override", None)
    _thread_local.override = temp_settings
    try:
        yield
    finally:
        if saved is not None:
            _thread_local.override = saved
        else:
            del _thread_local.override


@contextmanager
def quiet_mode(quiet: bool = True) -> Iterator[None]:
    """
    Temporarily override settings.quiet for the current thread.
    This implementation builds on the thread‑local temporary_settings context manager.
    The effective quiet mode is merged:
    if quiet is already True (from an outer context),
    then it remains True even if a nested context passes quiet=False.
    """
    current_effective = settings.dict()  # get the current thread's effective settings
    # Create a new settings instance from the current effective state.
    temp = Settings(**current_effective)
    # Merge the new flag: once quiet is enabled, it stays enabled.
    temp.quiet = settings.quiet or quiet
    with temporary_settings(temp):
        yield


def set_env(settings_instance: BaseSettings) -> None:
    """
    Set environment variables from a BaseSettings instance.

    Each field in the settings is written to os.environ.
    """
    for field_name, field in settings_instance.__class__.__fields__.items():
        env_var_name = field.field_info.extra.get("env", field_name).upper()
        os.environ[env_var_name] = str(settings_instance.dict()[field_name])
</file>

<file path="langroid/utils/constants.py">
from langroid.pydantic_v1 import BaseModel


# Define the ANSI escape sequences for various colors and reset
class Colors(BaseModel):
    RED: str = "\033[31m"
    BLUE: str = "\033[34m"
    GREEN: str = "\033[32m"
    GREEN_DIMMER: str = "\033[38;5;22m"  # very dark green
    GREEN_DIM: str = "\033[38;5;28m"  # medium-dim green
    ORANGE: str = "\033[33m"  # no standard ANSI color for orange; using yellow
    CYAN: str = "\033[36m"
    MAGENTA: str = "\033[35m"
    YELLOW: str = "\033[33m"
    RESET: str = "\033[0m"


NO_ANSWER = "DO-NOT-KNOW"
DONE = "DONE"
USER_QUIT_STRINGS = ["q", "x", "quit", "exit", "bye", DONE]
PASS = "__PASS__"
PASS_TO = PASS + ":"
SEND_TO = "__SEND__:"
TOOL = "TOOL"
# This is a recommended setting for TaskConfig.addressing_prefix if using it at all;
# prefer to use `RecipientTool` to allow agents addressing others.
# Caution the AT string should NOT contain any 'word' characters, i.e.
# it no letters, digits or underscores.
# See tests/main/test_msg_routing for example usage
AT = "|@|"
TOOL_BEGIN = "TOOL_BEGIN"
TOOL_END = "TOOL_END"
</file>

<file path="langroid/utils/git_utils.py">
import fnmatch
import logging
import textwrap
from pathlib import Path
from typing import List

import git
from github import Github, GithubException

from langroid.utils.system import create_file

logger = logging.getLogger(__name__)


def git_read_file(repo: str, filepath: str) -> str:
    """
    Read the contents of a file from a GitHub repository.

    Args:
        repo (str): The GitHub repository in the format "owner/repo"
        filepath (str): The file path relative to the repository root

    Returns:
        str: The contents of the file as a string
    """
    try:
        g = Github()
        github_repo = g.get_repo(repo)
        file_content = github_repo.get_contents(filepath)
        if isinstance(file_content, list) and len(file_content) > 0:
            return file_content[0].decoded_content.decode("utf-8")
        elif hasattr(file_content, "decoded_content"):
            return file_content.decoded_content.decode("utf-8")
        else:
            logger.error(f"Unexpected file_content type: {type(file_content)}")
            return ""
    except GithubException as e:
        logger.error(f"An error occurred while reading file {filepath}: {e}")
        return ""


def get_file_list(repo: str, dir: str, pat: str = "") -> List[str]:
    """
    Get a list of files in a specified directory of a GitHub repository.

    Args:
        repo (str): The GitHub repository in the format "owner/repo"
        dir (str): The directory path relative to the repository root
        pat (str): Optional wildcard pattern to filter file names (default: "")

    Returns:
        List[str]: A list of file paths in the specified directory
    """
    try:
        g = Github()
        github_repo = g.get_repo(repo)
        contents = github_repo.get_contents(dir)

        file_list = []
        if isinstance(contents, list):
            file_list = [content.path for content in contents if content.type == "file"]
        elif hasattr(contents, "path") and hasattr(contents, "type"):
            if contents.type == "file":
                file_list = [contents.path]

        if pat:
            file_list = [file for file in file_list if fnmatch.fnmatch(file, pat)]
        return sorted(file_list)

    except GithubException as e:
        logger.error(f"An error occurred while fetching file list: {e}")
        return []


def git_init_repo(dir: str) -> git.Repo | None:
    """
    Set up a Git repository in the specified directory.

    Args:
        dir (str): Path to the directory where the Git repository should be initialized

    Returns:
        git.Repo: The initialized Git repository object
    """
    repo_path = Path(dir).expanduser()
    try:
        repo = git.Repo.init(repo_path)
        logger.info(f"Git repository initialized in {repo_path}")

        gitignore_content = textwrap.dedent(
            """
        /target/
        **/*.rs.bk
        Cargo.lock
        """
        ).strip()

        gitignore_path = repo_path / ".gitignore"
        create_file(gitignore_path, gitignore_content)
        logger.info(f"Created .gitignore file in {repo_path}")

        # Ensure the default branch is 'main'
        # Check if we're on the master branch
        if repo.active_branch.name == "master":
            # Rename the branch
            repo.git.branch("-m", "master", "main")
            print("Branch renamed from 'master' to 'main'")
        else:
            print("Current branch is not 'master'. No changes made.")
        return repo
    except git.GitCommandError as e:
        logger.error(f"An error occurred while initializing the repository: {e}")
        return None


def git_commit_file(repo: git.Repo, filepath: str, msg: str) -> None:
    """
    Commit a file to a Git repository.

    Args:
        repo (git.Repo): The Git repository object
        filepath (str): Path to the file to be committed
        msg (str): The commit message

    Returns:
        None
    """
    try:
        repo.index.add([filepath])
        commit_msg = msg or f"Updated {filepath}"
        repo.index.commit(commit_msg)
        logger.info(f"Successfully committed {filepath}: {commit_msg}")
    except git.GitCommandError as e:
        logger.error(f"An error occurred while committing: {e}")


def git_commit_mods(repo: git.Repo, msg: str = "commit all changes") -> None:
    """
    Commit all modifications in the Git repository.
    Does not raise an error if there's nothing to commit.

    Args:
        repo (git.Repo): The Git repository object

    Returns:
        None
    """
    try:
        if repo.is_dirty():
            repo.git.add(update=True)
            repo.index.commit(msg)
            logger.info("Successfully committed all modifications")
        else:
            logger.info("No changes to commit")
    except git.GitCommandError as e:
        logger.error(f"An error occurred while committing modifications: {e}")


def git_restore_repo(repo: git.Repo) -> None:
    """
    Restore all unstaged, uncommitted changes in the Git repository.
    This function undoes any dirty files to the last commit.

    Args:
        repo (git.Repo): The Git repository object

    Returns:
        None
    """
    try:
        if repo.is_dirty():
            repo.git.restore(".")
            logger.info("Successfully restored all unstaged changes")
        else:
            logger.info("No unstaged changes to restore")
    except git.GitCommandError as e:
        logger.error(f"An error occurred while restoring changes: {e}")


def git_restore_file(repo: git.Repo, file_path: str) -> None:
    """
    Restore a specific file in the Git repository to its state in the last commit.
    This function undoes changes to the specified file.

    Args:
        repo (git.Repo): The Git repository object
        file_path (str): Path to the file to be restored

    Returns:
        None
    """
    try:
        repo.git.restore(file_path)
        logger.info(f"Successfully restored file: {file_path}")
    except git.GitCommandError as e:
        logger.error(f"An error occurred while restoring file {file_path}: {e}")


def git_create_checkout_branch(repo: git.Repo, branch: str) -> None:
    """
    Create and checkout a new branch in the given Git repository.
    If the branch already exists, it will be checked out.
    If we're already on the specified branch, no action is taken.

    Args:
        repo (git.Repo): The Git repository object
        branch (str): The name of the branch to create or checkout

    Returns:
        None
    """
    try:
        if repo.active_branch.name == branch:
            logger.info(f"Already on branch: {branch}")
            return

        if branch in repo.heads:
            repo.heads[branch].checkout()
            logger.info(f"Checked out existing branch: {branch}")
        else:
            new_branch = repo.create_head(branch)
            new_branch.checkout()
            logger.info(f"Created and checked out new branch: {branch}")
    except git.GitCommandError as e:
        logger.error(f"An error occurred while creating/checking out branch: {e}")


def git_diff_file(repo: git.Repo, filepath: str) -> str:
    """
    Show diffs of file between the latest commit and the previous one if any.

    Args:
        repo (git.Repo): The Git repository object
        filepath (str): Path to the file to be diffed

    Returns:
        str: The diff output as a string
    """
    try:
        # Get the two most recent commits
        commits = list(repo.iter_commits(paths=filepath, max_count=2))

        if len(commits) < 2:
            return "No previous commit found for comparison."

        # Get the diff between the two commits for the specific file
        diff = repo.git.diff(commits[1].hexsha, commits[0].hexsha, filepath)

        return str(diff)
    except git.GitCommandError as e:
        logger.error(f"An error occurred while getting diff: {e}")
        return f"Error: {str(e)}"
</file>

<file path="langroid/utils/globals.py">
from typing import Any, Dict, Optional, Type, TypeVar

from langroid.pydantic_v1 import BaseModel

T = TypeVar("T", bound="GlobalState")


class GlobalState(BaseModel):
    """A base Pydantic model for global states."""

    _instance: Optional["GlobalState"] = None

    @classmethod
    def get_instance(cls: Type["GlobalState"]) -> "GlobalState":
        """
        Get the global instance of the specific subclass.

        Returns:
            The global instance of the subclass.
        """
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance

    @classmethod
    def set_values(cls: Type[T], **kwargs: Dict[str, Any]) -> None:
        """
        Set values on the global instance of the specific subclass.

        Args:
            **kwargs: The fields and their values to set.
        """
        instance = cls.get_instance()
        for key, value in kwargs.items():
            setattr(instance, key, value)

    @classmethod
    def get_value(cls: Type[T], name: str) -> Any:
        """
        Retrieve the value of a specific field from the global instance.

        Args:
            name (str): The name of the field to retrieve.

        Returns:
            str: The value of the specified field.
        """
        instance = cls.get_instance()
        return getattr(instance, name)
</file>

<file path="langroid/utils/object_registry.py">
import time
from typing import TYPE_CHECKING, Dict, Optional, TypeAlias, TypeVar
from uuid import uuid4

from langroid.pydantic_v1 import BaseModel

if TYPE_CHECKING:
    from langroid.agent.base import Agent
    from langroid.agent.chat_agent import ChatAgent
    from langroid.agent.chat_document import ChatDocument

    # any derivative of BaseModel that has an id() method or an id attribute
    ObjWithId: TypeAlias = ChatDocument | ChatAgent | Agent
else:
    ObjWithId = BaseModel

# Define a type variable that can be any subclass of BaseModel
T = TypeVar("T", bound=BaseModel)


class ObjectRegistry:
    """A global registry to hold id -> object mappings."""

    registry: Dict[str, ObjWithId] = {}

    @classmethod
    def add(cls, obj: ObjWithId) -> str:
        """Adds an object to the registry, returning the object's ID."""
        object_id = obj.id() if callable(obj.id) else obj.id
        cls.registry[object_id] = obj
        return object_id

    @classmethod
    def get(cls, obj_id: str) -> Optional[ObjWithId]:
        """Retrieves an object by ID if it still exists."""
        return cls.registry.get(obj_id)

    @classmethod
    def register_object(cls, obj: ObjWithId) -> str:
        """Registers an object in the registry, returning the object's ID."""
        return cls.add(obj)

    @classmethod
    def remove(cls, obj_id: str) -> None:
        """Removes an object from the registry."""
        if obj_id in cls.registry:
            del cls.registry[obj_id]

    @classmethod
    def cleanup(cls) -> None:
        """Cleans up the registry by removing entries where the object is None."""
        to_remove = [key for key, value in cls.registry.items() if value is None]
        for key in to_remove:
            del cls.registry[key]

    @staticmethod
    def new_id() -> str:
        """Generates a new unique ID."""
        return str(uuid4())


def scheduled_cleanup(interval: int = 600) -> None:
    """Periodically cleans up the global registry every 'interval' seconds."""
    while True:
        ObjectRegistry.cleanup()
        time.sleep(interval)
</file>

<file path="langroid/utils/pydantic_utils.py">
import logging
from collections.abc import MutableMapping
from contextlib import contextmanager
from typing import (
    Any,
    Dict,
    Generator,
    List,
    Optional,
    Tuple,
    Type,
    TypeVar,
    no_type_check,
)

import numpy as np
import pandas as pd

from langroid.mytypes import DocMetaData, Document
from langroid.pydantic_v1 import BaseModel, ValidationError, create_model

logger = logging.getLogger(__name__)


def flatten_dict(
    d: MutableMapping[str, Any], parent_key: str = "", sep: str = "."
) -> Dict[str, Any]:
    """Flatten a nested dictionary, using a separator in the keys.
    Useful for pydantic_v1 models with nested fields -- first use
        dct = mdl.model_dump()
    to get a nested dictionary, then use this function to flatten it.
    """
    items: List[Tuple[str, Any]] = []
    for k, v in d.items():
        new_key = f"{parent_key}{sep}{k}" if parent_key else k
        if isinstance(v, MutableMapping):
            items.extend(flatten_dict(v, new_key, sep=sep).items())
        else:
            items.append((new_key, v))
    return dict(items)


def has_field(model_class: Type[BaseModel], field_name: str) -> bool:
    """Check if a Pydantic model class has a field with the given name."""
    return field_name in model_class.__fields__


def _recursive_purge_dict_key(d: Dict[str, Any], k: str) -> None:
    """Remove a key from a dictionary recursively"""
    if isinstance(d, dict):
        for key in list(d.keys()):
            if key == k and "type" in d.keys():
                del d[key]
            else:
                _recursive_purge_dict_key(d[key], k)


@no_type_check
def _flatten_pydantic_model_ignore_defaults(
    model: Type[BaseModel],
    base_model: Type[BaseModel] = BaseModel,
) -> Type[BaseModel]:
    """
    Given a possibly nested Pydantic class, return a flattened version of it,
    by constructing top-level fields, whose names are formed from the path
    through the nested structure, separated by double underscores.

    This version ignores inherited defaults, so it is incomplete.
    But retaining it as it is simpler and may be useful in some cases.
    The full version is `flatten_pydantic_model`, see below.

    Args:
        model (Type[BaseModel]): The Pydantic model to flatten.
        base_model (Type[BaseModel], optional): The base model to use for the
            flattened model. Defaults to BaseModel.

    Returns:
        Type[BaseModel]: The flattened Pydantic model.
    """

    flattened_fields: Dict[str, Tuple[Any, ...]] = {}
    models_to_process = [(model, "")]

    while models_to_process:
        current_model, current_prefix = models_to_process.pop()

        for name, field in current_model.__annotations__.items():
            if issubclass(field, BaseModel):
                new_prefix = (
                    f"{current_prefix}{name}__" if current_prefix else f"{name}__"
                )
                models_to_process.append((field, new_prefix))
            else:
                flattened_name = f"{current_prefix}{name}"
                flattened_fields[flattened_name] = (field, ...)

    return create_model(
        "FlatModel",
        __base__=base_model,
        **flattened_fields,
    )


def flatten_pydantic_model(
    model: Type[BaseModel],
    base_model: Type[BaseModel] = BaseModel,
) -> Type[BaseModel]:
    """
    Given a possibly nested Pydantic class, return a flattened version of it,
    by constructing top-level fields, whose names are formed from the path
    through the nested structure, separated by double underscores.

    Args:
        model (Type[BaseModel]): The Pydantic model to flatten.
        base_model (Type[BaseModel], optional): The base model to use for the
            flattened model. Defaults to BaseModel.

    Returns:
        Type[BaseModel]: The flattened Pydantic model.
    """

    flattened_fields: Dict[str, Any] = {}
    models_to_process = [(model, "")]

    while models_to_process:
        current_model, current_prefix = models_to_process.pop()

        for name, field in current_model.__fields__.items():
            if isinstance(field.outer_type_, type) and issubclass(
                field.outer_type_, BaseModel
            ):
                new_prefix = (
                    f"{current_prefix}{name}__" if current_prefix else f"{name}__"
                )
                models_to_process.append((field.outer_type_, new_prefix))
            else:
                flattened_name = f"{current_prefix}{name}"

                if field.default_factory is not field.default_factory:
                    flattened_fields[flattened_name] = (
                        field.outer_type_,
                        field.default_factory,
                    )
                elif field.default is not field.default:
                    flattened_fields[flattened_name] = (
                        field.outer_type_,
                        field.default,
                    )
                else:
                    flattened_fields[flattened_name] = (field.outer_type_, ...)

    return create_model("FlatModel", __base__=base_model, **flattened_fields)


def get_field_names(model: Type[BaseModel]) -> List[str]:
    """Get all field names from a possibly nested Pydantic model."""
    mdl = flatten_pydantic_model(model)
    fields = list(mdl.__fields__.keys())
    # fields may be like a__b__c , so we only want the last part
    return [f.split("__")[-1] for f in fields]


def generate_simple_schema(
    model: Type[BaseModel], exclude: List[str] = []
) -> Dict[str, Any]:
    """
    Generates a JSON schema for a Pydantic model,
    with options to exclude specific fields.

    This function traverses the Pydantic model's fields, including nested models,
    to generate a dictionary representing the JSON schema. Fields specified in
    the exclude list will not be included in the generated schema.

    Args:
        model (Type[BaseModel]): The Pydantic model class to generate the schema for.
        exclude (List[str]): A list of string field names to be excluded from the
                             generated schema. Defaults to an empty list.

    Returns:
        Dict[str, Any]: A dictionary representing the JSON schema of the provided model,
                        with specified fields excluded.
    """
    if hasattr(model, "__fields__"):
        output: Dict[str, Any] = {}
        for field_name, field in model.__fields__.items():
            if field_name in exclude:
                continue  # Skip excluded fields

            field_type = field.type_
            if issubclass(field_type, BaseModel):
                # Recursively generate schema for nested models
                output[field_name] = generate_simple_schema(field_type, exclude)
            else:
                # Represent the type as a string here
                output[field_name] = {"type": field_type.__name__}
        return output
    else:
        # Non-model type, return a simplified representation
        return {"type": model.__name__}


def flatten_pydantic_instance(
    instance: BaseModel,
    prefix: str = "",
    force_str: bool = False,
) -> Dict[str, Any]:
    """
    Given a possibly nested Pydantic instance, return a flattened version of it,
    as a dict where nested traversal paths are translated to keys a__b__c.

    Args:
        instance (BaseModel): The Pydantic instance to flatten.
        prefix (str, optional): The prefix to use for the top-level fields.
        force_str (bool, optional): Whether to force all values to be strings.

    Returns:
        Dict[str, Any]: The flattened dict.

    """
    flat_data: Dict[str, Any] = {}
    for name, value in instance.dict().items():
        # Assuming nested pydantic model will be a dict here
        if isinstance(value, dict):
            nested_flat_data = flatten_pydantic_instance(
                instance.__fields__[name].type_(**value),
                prefix=f"{prefix}{name}__",
                force_str=force_str,
            )
            flat_data.update(nested_flat_data)
        else:
            flat_data[f"{prefix}{name}"] = str(value) if force_str else value
    return flat_data


def extract_fields(doc: BaseModel, fields: List[str]) -> Dict[str, Any]:
    """
    Extract specified fields from a Pydantic object.
    Supports dotted field names, e.g. "metadata.author".
    Dotted fields are matched exactly according to the corresponding path.
    Non-dotted fields are matched against the last part of the path.
    Clashes ignored.
    Args:
        doc (BaseModel): The Pydantic object.
        fields (List[str]): The list of fields to extract.

    Returns:
        Dict[str, Any]: A dictionary of field names and values.

    """

    def get_value(obj: BaseModel, path: str) -> Any | None:
        for part in path.split("."):
            if hasattr(obj, part):
                obj = getattr(obj, part)
            else:
                return None
        return obj

    def traverse(obj: BaseModel, result: Dict[str, Any], prefix: str = "") -> None:
        for k, v in obj.__dict__.items():
            key = f"{prefix}.{k}" if prefix else k
            if isinstance(v, BaseModel):
                traverse(v, result, key)
            else:
                result[key] = v

    result: Dict[str, Any] = {}

    # Extract values for dotted field names and use last part as key
    for field in fields:
        if "." in field:
            value = get_value(doc, field)
            if value is not None:
                key = field.split(".")[-1]
                result[key] = value

    # Traverse the object to get non-dotted fields
    all_fields: Dict[str, Any] = {}
    traverse(doc, all_fields)

    # Add non-dotted fields to the result,
    # avoid overwriting if already present from dotted names
    for field in [f for f in fields if "." not in f]:
        for key, value in all_fields.items():
            if key.split(".")[-1] == field and field not in result:
                result[field] = value

    return result


def nested_dict_from_flat(
    flat_data: Dict[str, Any],
    sub_dict: str = "",
) -> Dict[str, Any]:
    """
    Given a flattened version of a nested dict, reconstruct the nested dict.
    Field names in the flattened dict are assumed to be of the form
    "field1__field2__field3", going from top level down.

    Args:
        flat_data (Dict[str, Any]): The flattened dict.
        sub_dict (str, optional): The name of the sub-dict to extract from the
            flattened dict. Defaults to "" (extract the whole dict).

    Returns:
        Dict[str, Any]: The nested dict.

    """
    nested_data: Dict[str, Any] = {}
    for key, value in flat_data.items():
        if sub_dict != "" and not key.startswith(sub_dict + "__"):
            continue
        keys = key.split("__")
        d = nested_data
        for k in keys[:-1]:
            d = d.setdefault(k, {})
        d[keys[-1]] = value
    if sub_dict != "":  # e.g. "payload"
        nested_data = nested_data[sub_dict]
    return nested_data


def pydantic_obj_from_flat_dict(
    flat_data: Dict[str, Any],
    model: Type[BaseModel],
    sub_dict: str = "",
) -> BaseModel:
    """Flattened dict with a__b__c style keys -> nested dict -> pydantic object"""
    nested_data = nested_dict_from_flat(flat_data, sub_dict)
    return model(**nested_data)


@contextmanager
def temp_update(
    pydantic_object: BaseModel, updates: Dict[str, Any]
) -> Generator[None, None, None]:
    original_values = {}
    try:
        for field, value in updates.items():
            if hasattr(pydantic_object, field):
                # Save original value
                original_values[field] = getattr(pydantic_object, field)
                setattr(pydantic_object, field, value)
            else:
                # Raise error for non-existent field
                raise AttributeError(
                    f"The field '{field}' does not exist in the "
                    f"Pydantic model '{pydantic_object.__class__.__name__}'."
                )
        yield
    except ValidationError as e:
        # Handle validation error
        print(f"Validation error: {e}")
    finally:
        # Restore original values
        for field, value in original_values.items():
            setattr(pydantic_object, field, value)


T = TypeVar("T", bound=BaseModel)


@contextmanager
def temp_params(config: T, field: str, temp: T) -> Generator[None, None, None]:
    """Context manager to temporarily override `field` in a `config`"""
    original_vals = getattr(config, field)
    try:
        # Apply temporary settings
        setattr(config, field, temp)
        yield
    finally:
        # Revert to original settings
        setattr(config, field, original_vals)


def numpy_to_python_type(numpy_type: Type[Any]) -> Type[Any]:
    """Converts a numpy data type to its Python equivalent."""
    type_mapping = {
        np.float64: float,
        np.float32: float,
        np.int64: int,
        np.int32: int,
        np.bool_: bool,
        # Add other numpy types as necessary
    }
    return type_mapping.get(numpy_type, numpy_type)


def dataframe_to_pydantic_model(df: pd.DataFrame) -> Type[BaseModel]:
    """Make a Pydantic model from a dataframe."""
    fields = {col: (type(df[col].iloc[0]), ...) for col in df.columns}
    return create_model("DataFrameModel", __base__=BaseModel, **fields)  # type: ignore


def dataframe_to_pydantic_objects(df: pd.DataFrame) -> List[BaseModel]:
    """Make a list of Pydantic objects from a dataframe."""
    Model = dataframe_to_pydantic_model(df)
    return [Model(**row.to_dict()) for index, row in df.iterrows()]


def first_non_null(series: pd.Series) -> Any | None:
    """Find the first non-null item in a pandas Series."""
    for item in series:
        if item is not None:
            return item
    return None


def dataframe_to_document_model(
    df: pd.DataFrame,
    content: str = "content",
    metadata: List[str] = [],
    exclude: List[str] = [],
) -> Type[BaseModel]:
    """
    Make a subclass of Document from a dataframe.

    Args:
        df (pd.DataFrame): The dataframe.
        content (str): The name of the column containing the content,
            which will map to the Document.content field.
        metadata (List[str]): A list of column names containing metadata;
            these will be included in the Document.metadata field.
        exclude (List[str]): A list of column names to exclude from the model.
            (e.g. "vector" when lance is used to add an embedding vector to the df)

    Returns:
        Type[BaseModel]: A pydantic model subclassing Document.
    """

    # Remove excluded columns
    df = df.drop(columns=exclude, inplace=False)
    # Check if metadata_cols is empty

    if metadata:
        # Define fields for the dynamic subclass of DocMetaData
        metadata_fields = {
            col: (
                Optional[numpy_to_python_type(type(first_non_null(df[col])))],
                None,  # Optional[numpy_to_python_type(type(first_non_null(df[col])))],
            )
            for col in metadata
        }
        DynamicMetaData = create_model(  # type: ignore
            "DynamicMetaData", __base__=DocMetaData, **metadata_fields
        )
    else:
        # Use the base DocMetaData class directly
        DynamicMetaData = DocMetaData

    # Define additional top-level fields for DynamicDocument
    additional_fields = {
        col: (
            Optional[numpy_to_python_type(type(first_non_null(df[col])))],
            None,  # Optional[numpy_to_python_type(type(first_non_null(df[col])))],
        )
        for col in df.columns
        if col not in metadata and col != content
    }

    # Create a dynamic subclass of Document
    DynamicDocumentFields = {
        **{"metadata": (DynamicMetaData, ...)},
        **additional_fields,
    }
    DynamicDocument = create_model(  # type: ignore
        "DynamicDocument", __base__=Document, **DynamicDocumentFields
    )

    def from_df_row(
        cls: type[BaseModel],
        row: pd.Series,
        content: str = "content",
        metadata: List[str] = [],
    ) -> BaseModel | None:
        content_val = row[content] if (content and content in row) else ""
        metadata_values = (
            {col: row[col] for col in metadata if col in row} if metadata else {}
        )
        additional_values = {
            col: row[col] for col in additional_fields if col in row and col != content
        }
        metadata = DynamicMetaData(**metadata_values)
        return cls(content=content_val, metadata=metadata, **additional_values)

    # Bind the method to the class
    DynamicDocument.from_df_row = classmethod(from_df_row)

    return DynamicDocument  # type: ignore


def dataframe_to_documents(
    df: pd.DataFrame,
    content: str = "content",
    metadata: List[str] = [],
    doc_cls: Type[BaseModel] | None = None,
) -> List[Document]:
    """
    Make a list of Document objects from a dataframe.
    Args:
        df (pd.DataFrame): The dataframe.
        content (str): The name of the column containing the content,
            which will map to the Document.content field.
        metadata (List[str]): A list of column names containing metadata;
            these will be included in the Document.metadata field.
        doc_cls (Type[BaseModel], optional): A Pydantic model subclassing
            Document. Defaults to None.
    Returns:
        List[Document]: The list of Document objects.
    """
    Model = doc_cls or dataframe_to_document_model(df, content, metadata)
    docs = [
        Model.from_df_row(row, content, metadata)  # type: ignore
        for _, row in df.iterrows()
    ]
    return [m for m in docs if m is not None]


def extra_metadata(document: Document, doc_cls: Type[Document] = Document) -> List[str]:
    """
    Checks for extra fields in a document's metadata that are not defined in the
    original metadata schema.

    Args:
        document (Document): The document instance to check for extra fields.
        doc_cls (Type[Document]): The class type derived from Document, used
            as a reference to identify extra fields in the document's metadata.

    Returns:
        List[str]: A list of strings representing the keys of the extra fields found
        in the document's metadata.
    """
    # Convert metadata to dict, including extra fields.
    metadata_fields = set(document.metadata.dict().keys())

    # Get defined fields in the metadata of doc_cls
    defined_fields = set(doc_cls.__fields__["metadata"].type_.__fields__.keys())

    # Identify extra fields not in defined fields.
    extra_fields = list(metadata_fields - defined_fields)

    return extra_fields


def extend_document_class(d: Document) -> Type[Document]:
    """Generates a new pydantic class based on a given document instance.

    This function dynamically creates a new pydantic class with additional
    fields based on the "extra" metadata fields present in the given document
    instance. The new class is a subclass of the original Document class, with
    the original metadata fields retained and extra fields added as normal
    fields to the metadata.

    Args:
        d: An instance of the Document class.

    Returns:
        A new subclass of the Document class that includes the additional fields
        found in the metadata of the given document instance.
    """
    # Extract the fields from the original metadata class, including types,
    # correctly handling special types like List[str].
    original_metadata_fields = {
        k: (v.outer_type_ if v.shape != 1 else v.type_, ...)
        for k, v in DocMetaData.__fields__.items()
    }
    # Extract extra fields from the metadata instance with their types
    extra_fields = {
        k: (type(v), ...)
        for k, v in d.metadata.__dict__.items()
        if k not in DocMetaData.__fields__
    }

    # Combine original and extra fields for the new metadata class
    combined_fields = {**original_metadata_fields, **extra_fields}

    # Create a new metadata class with combined fields
    NewMetadataClass = create_model(  # type: ignore
        "ExtendedDocMetadata", **combined_fields, __base__=DocMetaData
    )
    # NewMetadataClass.__config__.arbitrary_types_allowed = True

    # Create a new document class using the new metadata class
    NewDocumentClass = create_model(
        "ExtendedDocument",
        content=(str, ...),
        metadata=(NewMetadataClass, ...),
        __base__=Document,
    )

    return NewDocumentClass


class PydanticWrapper(BaseModel):
    value: Any


def get_pydantic_wrapper(value_type: type) -> type[PydanticWrapper]:
    class WrappedValue(PydanticWrapper):
        value: value_type  # type: ignore

    return WrappedValue
</file>

<file path="langroid/utils/system.py">
import difflib
import getpass
import hashlib
import importlib
import importlib.metadata
import inspect
import logging
import shutil
import socket
import traceback
import uuid
from pathlib import Path
from typing import Any, Literal

logger = logging.getLogger(__name__)

DELETION_ALLOWED_PATHS = [
    ".qdrant",
    ".chroma",
    ".lancedb",
    ".weaviate",
]


def pydantic_major_version() -> int:
    try:
        pydantic_version = importlib.metadata.version("pydantic")
        major_version = int(pydantic_version.split(".")[0])
        return major_version
    except importlib.metadata.PackageNotFoundError:
        return -1


class LazyLoad:
    """Lazy loading of modules or classes."""

    def __init__(self, import_path: str) -> None:
        self.import_path = import_path
        self._target = None
        self._is_target_loaded = False

    def _load_target(self) -> None:
        if not self._is_target_loaded:
            try:
                # Attempt to import as a module
                self._target = importlib.import_module(self.import_path)  # type: ignore
            except ImportError:
                # If module import fails, attempt to import as a
                # class or function from a module
                module_path, attr_name = self.import_path.rsplit(".", 1)
                module = importlib.import_module(module_path)
                self._target = getattr(module, attr_name)
            self._is_target_loaded = True

    def __getattr__(self, name: str) -> Any:
        self._load_target()
        return getattr(self._target, name)

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        self._load_target()
        if callable(self._target):
            return self._target(*args, **kwargs)
        else:
            raise TypeError(f"{self.import_path!r} object is not callable")


def rmdir(path: str) -> bool:
    """
    Remove a directory recursively.
    Args:
        path (str): path to directory to remove
    Returns:
        True if a dir was removed, false otherwise. Raises error if failed to remove.
    """
    if not any([path.startswith(p) for p in DELETION_ALLOWED_PATHS]):
        raise ValueError(
            f"""
        Removing Dir '{path}' not allowed. 
        Must start with one of {DELETION_ALLOWED_PATHS}
        This is a safety measure to prevent accidental deletion of files.
        If you are sure you want to delete this directory, please add it 
        to the `DELETION_ALLOWED_PATHS` list in langroid/utils/system.py and 
        re-run the command.
        """
        )

    try:
        shutil.rmtree(path)
    except FileNotFoundError:
        logger.warning(f"Directory '{path}' does not exist. No action taken.")
        return False
    except Exception as e:
        logger.error(f"Error while removing directory '{path}': {e}")
    return True


def caller_name() -> str:
    """
    Who called the function?
    """
    frame = inspect.currentframe()
    if frame is None:
        return ""

    caller_frame = frame.f_back

    # If there's no caller frame, the function was called from the global scope
    if caller_frame is None:
        return ""

    return caller_frame.f_code.co_name


def friendly_error(e: Exception, msg: str = "An error occurred.") -> str:
    tb = traceback.format_exc()
    original_error_message: str = str(e)
    full_error_message: str = (
        f"{msg}\nOriginal error: {original_error_message}\nTraceback:\n{tb}"
    )
    return full_error_message


def generate_user_id(org: str = "") -> str:
    """
    Generate a unique user ID based on the username and machine name.
    Returns:
    """
    # Get the username
    username = getpass.getuser()

    # Get the machine's name
    machine_name = socket.gethostname()

    org_pfx = f"{org}_" if org else ""

    # Create a consistent unique ID based on the username and machine name
    unique_string = f"{org_pfx}{username}@{machine_name}"

    # Generate a SHA-256 hash of the unique string
    user_id = hashlib.sha256(unique_string.encode()).hexdigest()

    return user_id


def update_hash(hash: str | None = None, s: str = "") -> str:
    """
    Takes a SHA256 hash string and a new string, updates the hash with the new string,
    and returns the updated hash string.

    Args:
        hash (str): A SHA256 hash string.
        s (str): A new string to update the hash with.

    Returns:
        The updated hash in hexadecimal format.
    """
    # Create a new hash object if no hash is provided
    if hash is None:
        hash_obj = hashlib.sha256()
    else:
        # Convert the hexadecimal hash string to a byte object
        hash_bytes = bytes.fromhex(hash)
        hash_obj = hashlib.sha256(hash_bytes)

    # Update the hash with the new string
    hash_obj.update(s.encode("utf-8"))

    # Return the updated hash in hexadecimal format and the original string
    return hash_obj.hexdigest()


def hash(s: str) -> str:
    """
    Generate a SHA256 hash of a string.

    Args:
        s (str): The string to hash.

    Returns:
        str: The SHA256 hash of the string.
    """
    return update_hash(s=s)


def generate_unique_id() -> str:
    """Generate a unique ID using UUID4."""
    return str(uuid.uuid4())


def create_file(
    filepath: str | Path,
    content: str = "",
    if_exists: Literal["overwrite", "skip", "error", "append"] = "overwrite",
) -> None:
    """
    Create, overwrite or append to a file, with the given content
    at the specified filepath.
    If content is empty, it will simply touch to create an empty file.

    Args:
        filepath (str|Path): The relative path of the file to be created
        content (str): The content to be written to the file
        if_exists (Literal["overwrite", "skip", "error", "append"]):
            Action to take if file exists
    """
    filepath = Path(filepath)
    filepath.parent.mkdir(parents=True, exist_ok=True)

    if filepath.exists():
        if if_exists == "skip":
            logger.warning(f"File already exists, skipping: {filepath}")
            return
        elif if_exists == "error":
            raise FileExistsError(f"File already exists: {filepath}")
        elif if_exists == "append":
            mode = "a"
        else:  # overwrite
            mode = "w"
    else:
        mode = "w"

    if content == "" and mode in ["a", "w"]:
        filepath.touch()
        logger.warning(f"Empty file created: {filepath}")
    else:
        # the newline = '\n` argument is used to ensure that
        # newlines in the content are written as actual line breaks
        with open(filepath, mode, newline="\n") as f:
            f.write(content)
        action = "appended to" if mode == "a" else "created/updated in"
        logger.warning(f"Content {action}: {filepath}")


def read_file(path: str, line_numbers: bool = False) -> str:
    """
    Read the contents of a file.

    Args:
        path (str): The path to the file to be read.
        line_numbers (bool, optional): If True, prepend line numbers to each line.
            Defaults to False.

    Returns:
        str: The contents of the file, optionally with line numbers.

    Raises:
        FileNotFoundError: If the specified file does not exist.
    """
    # raise an error if the file does not exist
    if not Path(path).exists():
        raise FileNotFoundError(f"File not found: {path}")
    file = Path(path).expanduser()
    content = file.read_text()
    if line_numbers:
        lines = content.splitlines()
        numbered_lines = [f"{i+1}: {line}" for i, line in enumerate(lines)]
        return "\n".join(numbered_lines)
    return content


def diff_files(file1: str, file2: str) -> str:
    """
    Find the diffs between two files, in unified diff format.
    """
    with open(file1, "r") as f1, open(file2, "r") as f2:
        lines1 = f1.readlines()
        lines2 = f2.readlines()

    differ = difflib.unified_diff(lines1, lines2, fromfile=file1, tofile=file2)
    diff_result = "".join(differ)
    return diff_result


def list_dir(path: str | Path) -> list[str]:
    """
    List the contents of a directory.

    Args:
        path (str): The path to the directory.

    Returns:
        list[str]: A list of the files and directories in the specified directory.
    """
    dir_path = Path(path)
    if not dir_path.is_dir():
        raise NotADirectoryError(f"Path is not a directory: {dir_path}")
    return [str(p) for p in dir_path.iterdir()]
</file>

<file path="langroid/utils/types.py">
import json
import logging
from inspect import signature
from typing import Any, Optional, Type, TypeVar, Union, get_args, get_origin

from langroid.pydantic_v1 import BaseModel

logger = logging.getLogger(__name__)
PrimitiveType = Union[int, float, bool, str]
T = TypeVar("T")


def is_instance_of(obj: Any, type_hint: Type[T] | Any) -> bool:
    """
    Check if an object is an instance of a type hint, e.g.
    to check whether x is of type `List[ToolMessage]` or type `int`
    """
    if type_hint == Any:
        return True

    if type_hint is type(obj):
        return True

    origin = get_origin(type_hint)
    args = get_args(type_hint)

    if origin is Union:
        return any(is_instance_of(obj, arg) for arg in args)

    if origin:  # e.g. List, Dict, Tuple, Set
        if isinstance(obj, origin):
            # check if all items in obj are of the required types
            if args:
                if isinstance(obj, (list, tuple, set)):
                    return all(is_instance_of(item, args[0]) for item in obj)
                if isinstance(obj, dict):
                    return all(
                        is_instance_of(k, args[0]) and is_instance_of(v, args[1])
                        for k, v in obj.items()
                    )
            return True
        else:
            return False

    return isinstance(obj, type_hint)


def to_string(msg: Any) -> str:
    """
    Best-effort conversion of arbitrary msg to str.
    Return empty string if conversion fails.
    """
    if msg is None:
        return ""
    if isinstance(msg, str):
        return msg
    if isinstance(msg, BaseModel):
        return msg.json()
    # last resort: use json.dumps() or str() to make it a str
    try:
        return json.dumps(msg)
    except Exception:
        try:
            return str(msg)
        except Exception as e:
            logger.error(
                f"""
                Error converting msg to str: {e}", 
                """,
                exc_info=True,
            )
            return ""


def from_string(
    s: str,
    output_type: Type[PrimitiveType],
) -> Optional[PrimitiveType]:
    if output_type is int:
        try:
            return int(s)
        except ValueError:
            return None
    elif output_type is float:
        try:
            return float(s)
        except ValueError:
            return None
    elif output_type is bool:
        return s.lower() in ("true", "yes", "1")
    elif output_type is str:
        return s
    else:
        return None


def is_callable(obj: Any, k: int = 1) -> bool:
    """Check if object is callable and accepts exactly k args.

    Args:
        obj: Object to check

    Returns:
        bool: True if object is callable with k args, False otherwise
    """
    if not callable(obj):
        return False
    try:
        sig = signature(obj)
        params = list(sig.parameters.values())
        return len(params) == k
    except ValueError:
        return False
</file>

<file path="langroid/vector_store/__init__.py">
from . import base

from . import qdrantdb

from .base import VectorStoreConfig, VectorStore
from .qdrantdb import QdrantDBConfig, QdrantDB

__all__ = [
    "base",
    "VectorStore",
    "VectorStoreConfig",
    "qdrantdb",
    "QdrantDBConfig",
    "QdrantDB",
]


try:
    from . import meilisearch
    from .meilisearch import MeiliSearch, MeiliSearchConfig

    meilisearch
    MeiliSearch
    MeiliSearchConfig
    __all__.extend(["meilisearch", "MeiliSearch", "MeiliSearchConfig"])

    from . import lancedb
    from .lancedb import LanceDB, LanceDBConfig

    lancedb
    LanceDB
    LanceDBConfig
    __all__.extend(["lancedb", "LanceDB", "LanceDBConfig"])
    from . import chromadb
    from .chromadb import ChromaDBConfig, ChromaDB

    chromadb  # silence linters
    ChromaDB
    ChromaDBConfig
    __all__.extend(["chromadb", "ChromaDBConfig", "ChromaDB"])

    from . import postgres
    from .postgres import PostgresDB, PostgresDBConfig

    postgres  # silence linters
    PostgresDB
    PostgresDBConfig
    __all__.extend(["postgres", "PostgresDB", "PostgresDBConfig"])

    from . import weaviatedb
    from .weaviatedb import WeaviateDBConfig, WeaviateDB

    weaviatedb
    WeaviateDB
    WeaviateDBConfig
    __all__.extend(["weaviatedb", "WeaviateDB", "WeaviateDBConfig"])

    from . import pineconedb
    from .pineconedb import PineconeDB, PineconeDBConfig

    pineconedb
    PineconeDB
    PineconeDBConfig
    __all__.extend(["pineconedb", "PineconeDB", "PineconeDBConfig"])
except ImportError:
    pass
</file>

<file path="langroid/vector_store/chromadb.py">
import json
import logging
from typing import Any, Dict, List, Literal, Optional, Sequence, Tuple

from langroid.embedding_models.base import (
    EmbeddingModelsConfig,
)
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.exceptions import LangroidImportError
from langroid.mytypes import Document
from langroid.utils.configuration import settings
from langroid.utils.output.printing import print_long_text
from langroid.vector_store.base import VectorStore, VectorStoreConfig

logger = logging.getLogger(__name__)


class ChromaDBConfig(VectorStoreConfig):
    collection_name: str = "temp"
    storage_path: str = ".chroma/data"
    distance: Literal["cosine", "l2", "ip"] = "cosine"
    construction_ef: int = 100
    search_ef: int = 100
    max_neighbors: int = 16
    embedding: EmbeddingModelsConfig = OpenAIEmbeddingsConfig()
    host: str = "127.0.0.1"
    port: int = 6333


class ChromaDB(VectorStore):
    def __init__(self, config: ChromaDBConfig = ChromaDBConfig()):
        super().__init__(config)
        try:
            import chromadb
        except ImportError:
            raise LangroidImportError("chromadb", "chromadb")
        self.config = config
        self.client = chromadb.Client(
            chromadb.config.Settings(
                # chroma_db_impl="duckdb+parquet",
                # is_persistent=bool(config.storage_path),
                persist_directory=config.storage_path,
            )
        )
        if self.config.collection_name is not None:
            self.create_collection(
                self.config.collection_name,
                replace=self.config.replace_collection,
            )

    def clear_all_collections(self, really: bool = False, prefix: str = "") -> int:
        """Clear all collections in the vector store with the given prefix."""

        if not really:
            logger.warning("Not deleting all collections, set really=True to confirm")
            return 0
        coll = [c for c in self.client.list_collections() if c.name.startswith(prefix)]
        if len(coll) == 0:
            logger.warning(f"No collections found with prefix {prefix}")
            return 0
        n_empty_deletes = 0
        n_non_empty_deletes = 0
        for c in coll:
            n_empty_deletes += c.count() == 0
            n_non_empty_deletes += c.count() > 0
            self.client.delete_collection(name=c.name)
        logger.warning(
            f"""
            Deleted {n_empty_deletes} empty collections and
            {n_non_empty_deletes} non-empty collections.
            """
        )
        return n_empty_deletes + n_non_empty_deletes

    def clear_empty_collections(self) -> int:
        colls = self.client.list_collections()
        n_deletes = 0
        for coll in colls:
            if coll.count() == 0:
                n_deletes += 1
                self.client.delete_collection(name=coll.name)
        return n_deletes

    def list_collections(self, empty: bool = False) -> List[str]:
        """
        List non-empty collections in the vector store.
        Args:
            empty (bool, optional): Whether to list empty collections.
        Returns:
            List[str]: List of non-empty collection names.
        """
        colls = self.client.list_collections()
        if empty:
            return [coll.name for coll in colls]
        return [coll.name for coll in colls if coll.count() > 0]

    def create_collection(self, collection_name: str, replace: bool = False) -> None:
        """
        Create a collection in the vector store, optionally replacing an existing
            collection if `replace` is True.
        Args:
            collection_name (str): Name of the collection to create or replace.
            replace (bool, optional): Whether to replace an existing collection.
                Defaults to False.

        """
        self.config.collection_name = collection_name
        if collection_name in self.list_collections(empty=True) and replace:
            logger.warning(f"Replacing existing collection {collection_name}")
            self.client.delete_collection(collection_name)
        self.collection = self.client.create_collection(
            name=self.config.collection_name,
            embedding_function=self.embedding_fn,
            get_or_create=not replace,
            metadata={
                "hnsw:space": self.config.distance,
                "hnsw:construction_ef": self.config.construction_ef,
                "hnsw:search_ef": self.config.search_ef,
                # we could expose other configs, see:
                # https://docs.trychroma.com/docs/collections/configure
            },
        )

    def add_documents(self, documents: Sequence[Document]) -> None:
        super().maybe_add_ids(documents)
        if documents is None:
            return
        contents: List[str] = [document.content for document in documents]
        # convert metadatas to dicts so chroma can handle them
        metadata_dicts: List[dict[str, Any]] = [
            d.metadata.dict_bool_int() for d in documents
        ]
        for m in metadata_dicts:
            # chroma does not handle non-atomic types in metadata
            m["window_ids"] = ",".join(m["window_ids"])

        ids = [str(d.id()) for d in documents]

        colls = self.list_collections(empty=True)
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot ingest docs")
        if self.config.collection_name not in colls:
            self.create_collection(self.config.collection_name, replace=True)

        self.collection.add(
            # embedding_models=embedding_models,
            documents=contents,
            metadatas=metadata_dicts,
            ids=ids,
        )

    def get_all_documents(self, where: str = "") -> List[Document]:
        filter = json.loads(where) if where else None
        results = self.collection.get(
            include=["documents", "metadatas"],
            where=filter,
        )
        results["documents"] = [results["documents"]]
        results["metadatas"] = [results["metadatas"]]
        return self._docs_from_results(results)

    def get_documents_by_ids(self, ids: List[str]) -> List[Document]:
        # get them one by one since chroma mangles the order of the results
        # when fetched from a list of ids.
        results = [
            self.collection.get(ids=[id], include=["documents", "metadatas"])
            for id in ids
        ]
        final_results = {}
        final_results["documents"] = [[r["documents"][0] for r in results]]
        final_results["metadatas"] = [[r["metadatas"][0] for r in results]]
        return self._docs_from_results(final_results)

    def delete_collection(self, collection_name: str) -> None:
        try:
            self.client.delete_collection(name=collection_name)
        except Exception:
            pass

    def similar_texts_with_scores(
        self, text: str, k: int = 1, where: Optional[str] = None
    ) -> List[Tuple[Document, float]]:
        n = self.collection.count()
        filter = json.loads(where) if where else None
        results = self.collection.query(
            query_texts=[text],
            n_results=min(n, k),
            where=filter,
            include=["documents", "distances", "metadatas"],
        )
        docs = self._docs_from_results(results)
        # chroma distances are 1 - cosine.
        scores = [1 - s for s in results["distances"][0]]
        return list(zip(docs, scores))

    def _docs_from_results(self, results: Dict[str, Any]) -> List[Document]:
        """
        Helper function to convert results from ChromaDB to a list of Documents
        Args:
            results (dict): results from ChromaDB

        Returns:
            List[Document]: list of Documents
        """
        if len(results["documents"][0]) == 0:
            return []
        contents = results["documents"][0]
        if settings.debug:
            for i, c in enumerate(contents):
                print_long_text("red", "italic red", f"MATCH-{i}", c)
        metadatas = results["metadatas"][0]
        for m in metadatas:
            # restore the stringified list of window_ids into the original List[str]
            if m["window_ids"].strip() == "":
                m["window_ids"] = []
            else:
                m["window_ids"] = m["window_ids"].split(",")
        docs = [
            self.config.document_class(
                content=d, metadata=self.config.metadata_class(**m)
            )
            for d, m in zip(contents, metadatas)
        ]
        return docs
</file>

<file path="langroid/vector_store/lancedb.py">
from __future__ import annotations

import logging
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    Generator,
    List,
    Optional,
    Sequence,
    Tuple,
    Type,
)

import pandas as pd
from dotenv import load_dotenv

from langroid.pydantic_v1 import BaseModel, ValidationError, create_model

if TYPE_CHECKING:
    from lancedb.query import LanceVectorQueryBuilder

from langroid.embedding_models.base import (
    EmbeddingModelsConfig,
)
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.exceptions import LangroidImportError
from langroid.mytypes import Document
from langroid.utils.configuration import settings
from langroid.utils.pydantic_utils import (
    dataframe_to_document_model,
    dataframe_to_documents,
)
from langroid.vector_store.base import VectorStore, VectorStoreConfig

try:
    import lancedb
    from lancedb.pydantic import LanceModel, Vector

    has_lancedb = True
except ImportError:
    has_lancedb = False

logger = logging.getLogger(__name__)


class LanceDBConfig(VectorStoreConfig):
    cloud: bool = False
    collection_name: str | None = "temp"
    storage_path: str = ".lancedb/data"
    embedding: EmbeddingModelsConfig = OpenAIEmbeddingsConfig()
    distance: str = "cosine"


class LanceDB(VectorStore):
    def __init__(self, config: LanceDBConfig = LanceDBConfig()):
        super().__init__(config)
        if not has_lancedb:
            raise LangroidImportError("lancedb", "lancedb")

        self.config: LanceDBConfig = config
        self.host = config.host
        self.port = config.port
        self.is_from_dataframe = False  # were docs ingested from a dataframe?
        self.df_metadata_columns: List[str] = []  # metadata columns from dataframe

        load_dotenv()
        if self.config.cloud:
            logger.warning(
                "LanceDB Cloud is not available yet. Switching to local storage."
            )
            config.cloud = False
        else:
            try:
                self.client = lancedb.connect(
                    uri=config.storage_path,
                )
            except Exception as e:
                new_storage_path = config.storage_path + ".new"
                logger.warning(
                    f"""
                    Error connecting to local LanceDB at {config.storage_path}:
                    {e}
                    Switching to {new_storage_path}
                    """
                )
                self.client = lancedb.connect(
                    uri=new_storage_path,
                )

    def clear_empty_collections(self) -> int:
        coll_names = self.list_collections()
        n_deletes = 0
        for name in coll_names:
            nr = self.client.open_table(name).head(1).shape[0]
            if nr == 0:
                n_deletes += 1
                self.client.drop_table(name)
        return n_deletes

    def clear_all_collections(self, really: bool = False, prefix: str = "") -> int:
        """Clear all collections with the given prefix."""
        if not really:
            logger.warning("Not deleting all collections, set really=True to confirm")
            return 0
        coll_names = [
            c for c in self.list_collections(empty=True) if c.startswith(prefix)
        ]
        if len(coll_names) == 0:
            logger.warning(f"No collections found with prefix {prefix}")
            return 0
        n_empty_deletes = 0
        n_non_empty_deletes = 0
        for name in coll_names:
            nr = self.client.open_table(name).head(1).shape[0]
            n_empty_deletes += nr == 0
            n_non_empty_deletes += nr > 0
            self.client.drop_table(name)
        logger.warning(
            f"""
            Deleted {n_empty_deletes} empty collections and
            {n_non_empty_deletes} non-empty collections.
            """
        )
        return n_empty_deletes + n_non_empty_deletes

    def list_collections(self, empty: bool = False) -> List[str]:
        """
        Returns:
            List of collection names that have at least one vector.

        Args:
            empty (bool, optional): Whether to include empty collections.
        """
        colls = self.client.table_names(limit=None)
        if len(colls) == 0:
            return []
        if empty:  # include empty tbls
            return colls  # type: ignore
        counts = [self.client.open_table(coll).head(1).shape[0] for coll in colls]
        return [coll for coll, count in zip(colls, counts) if count > 0]

    def _create_lance_schema(self, doc_cls: Type[Document]) -> Type[BaseModel]:
        """
        NOTE: NOT USED, but leaving it here as it may be useful.

        Create a subclass of LanceModel with fields:
         - id (str)
         - Vector field that has dims equal to
            the embedding dimension of the embedding model, and a data field of type
            DocClass.
         - other fields from doc_cls

        Args:
            doc_cls (Type[Document]): A Pydantic model which should be a subclass of
                Document, to be used as the type for the data field.

        Returns:
            Type[BaseModel]: A new Pydantic model subclassing from LanceModel.

        Raises:
            ValueError: If `n` is not a non-negative integer or if `DocClass` is not a
                subclass of Document.
        """
        if not issubclass(doc_cls, Document):
            raise ValueError("DocClass must be a subclass of Document")

        if not has_lancedb:
            raise LangroidImportError("lancedb", "lancedb")

        n = self.embedding_dim

        # Prepare fields for the new model
        fields = {"id": (str, ...), "vector": (Vector(n), ...)}

        sorted_fields = dict(
            sorted(doc_cls.__fields__.items(), key=lambda item: item[0])
        )
        # Add both statically and dynamically defined fields from doc_cls
        for field_name, field in sorted_fields.items():
            fields[field_name] = (field.outer_type_, field.default)

        # Create the new model with dynamic fields
        NewModel = create_model(
            "NewModel", __base__=LanceModel, **fields
        )  # type: ignore
        return NewModel  # type: ignore

    def create_collection(self, collection_name: str, replace: bool = False) -> None:
        self.config.replace_collection = replace
        self.config.collection_name = collection_name
        if replace:
            self.delete_collection(collection_name)

    def add_documents(self, documents: Sequence[Document]) -> None:
        super().maybe_add_ids(documents)
        colls = self.list_collections(empty=True)
        if len(documents) == 0:
            return
        embedding_vecs = self.embedding_fn([doc.content for doc in documents])
        coll_name = self.config.collection_name
        if coll_name is None:
            raise ValueError("No collection name set, cannot ingest docs")
        # self._maybe_set_doc_class_schema(documents[0])
        table_exists = False
        if (
            coll_name in colls
            and self.client.open_table(coll_name).head(1).shape[0] > 0
        ):
            # collection exists and  is not empty:
            # if replace_collection is True, we'll overwrite the existing collection,
            # else we'll append to it.
            if self.config.replace_collection:
                self.client.drop_table(coll_name)
            else:
                table_exists = True

        ids = [str(d.id()) for d in documents]
        # don't insert all at once, batch in chunks of b,
        # else we get an API error
        b = self.config.batch_size

        def make_batches() -> Generator[List[Dict[str, Any]], None, None]:
            for i in range(0, len(ids), b):
                batch = [
                    dict(
                        id=ids[i + j],
                        vector=embedding_vecs[i + j],
                        **doc.dict(),
                    )
                    for j, doc in enumerate(documents[i : i + b])
                ]
                yield batch

        try:
            if table_exists:
                tbl = self.client.open_table(coll_name)
                tbl.add(make_batches())
            else:
                batch_gen = make_batches()
                batch = next(batch_gen)
                # use first batch to create table...
                tbl = self.client.create_table(
                    coll_name,
                    data=batch,
                    mode="create",
                )
                # ... and add the rest
                tbl.add(batch_gen)
        except Exception as e:
            logger.error(
                f"""
                Error adding documents to LanceDB: {e}
                POSSIBLE REMEDY: Delete the LancdDB storage directory
                {self.config.storage_path} and try again.
                """
            )

    def add_dataframe(
        self,
        df: pd.DataFrame,
        content: str = "content",
        metadata: List[str] = [],
    ) -> None:
        """
        Add a dataframe to the collection.
        Args:
            df (pd.DataFrame): A dataframe
            content (str): The name of the column in the dataframe that contains the
                text content to be embedded using the embedding model.
            metadata (List[str]): A list of column names in the dataframe that contain
                metadata to be stored in the database. Defaults to [].
        """
        self.is_from_dataframe = True
        actual_metadata = metadata.copy()
        self.df_metadata_columns = actual_metadata  # could be updated below
        # get content column
        content_values = df[content].values.tolist()
        embedding_vecs = self.embedding_fn(content_values)

        # add vector column
        df["vector"] = embedding_vecs
        if content != "content":
            # rename content column to "content", leave existing column intact
            df = df.rename(columns={content: "content"}, inplace=False)

        if "id" not in df.columns:
            docs = dataframe_to_documents(df, content="content", metadata=metadata)
            ids = [str(d.id()) for d in docs]
            df["id"] = ids

        if "id" not in actual_metadata:
            actual_metadata += ["id"]

        colls = self.list_collections(empty=True)
        coll_name = self.config.collection_name
        if (
            coll_name not in colls
            or self.client.open_table(coll_name).head(1).shape[0] == 0
        ):
            # collection either doesn't exist or is empty, so replace it
            # and set new schema from df
            self.client.create_table(
                self.config.collection_name,
                data=df,
                mode="overwrite",
            )
            doc_cls = dataframe_to_document_model(
                df,
                content=content,
                metadata=actual_metadata,
                exclude=["vector"],
            )
            self.config.document_class = doc_cls  # type: ignore
        else:
            # collection exists and is not empty, so append to it
            tbl = self.client.open_table(self.config.collection_name)
            tbl.add(df)

    def delete_collection(self, collection_name: str) -> None:
        self.client.drop_table(collection_name, ignore_missing=True)

    def _lance_result_to_docs(
        self, result: "LanceVectorQueryBuilder"
    ) -> List[Document]:
        if self.is_from_dataframe:
            df = result.to_pandas()
            return dataframe_to_documents(
                df,
                content="content",
                metadata=self.df_metadata_columns,
                doc_cls=self.config.document_class,
            )
        else:
            records = result.to_arrow().to_pylist()
            return self._records_to_docs(records)

    def _records_to_docs(self, records: List[Dict[str, Any]]) -> List[Document]:
        try:
            docs = [self.config.document_class(**rec) for rec in records]
        except ValidationError as e:
            raise ValueError(
                f"""
            Error validating LanceDB result: {e}
            HINT: This could happen when you're re-using an
            existing LanceDB store with a different schema.
            Try deleting your local lancedb storage at `{self.config.storage_path}`
            re-ingesting your documents and/or replacing the collections.
            """
            )
        return docs

    def get_all_documents(self, where: str = "") -> List[Document]:
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot retrieve docs")
        if self.config.collection_name not in self.list_collections(empty=True):
            return []
        tbl = self.client.open_table(self.config.collection_name)
        pre_result = tbl.search(None).where(where or None).limit(None)
        return self._lance_result_to_docs(pre_result)

    def get_documents_by_ids(self, ids: List[str]) -> List[Document]:
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot retrieve docs")
        _ids = [str(id) for id in ids]
        tbl = self.client.open_table(self.config.collection_name)
        docs = []
        for _id in _ids:
            results = self._lance_result_to_docs(tbl.search().where(f"id == '{_id}'"))
            if len(results) > 0:
                docs.append(results[0])
        return docs

    def similar_texts_with_scores(
        self,
        text: str,
        k: int = 1,
        where: Optional[str] = None,
    ) -> List[Tuple[Document, float]]:
        embedding = self.embedding_fn([text])[0]
        tbl = self.client.open_table(self.config.collection_name)
        result = (
            tbl.search(embedding)
            .metric(self.config.distance)
            .where(where, prefilter=True)
            .limit(k)
        )
        docs = self._lance_result_to_docs(result)
        # note _distance is 1 - cosine
        if self.is_from_dataframe:
            scores = [
                1 - rec["_distance"] for rec in result.to_pandas().to_dict("records")
            ]
        else:
            scores = [1 - rec["_distance"] for rec in result.to_arrow().to_pylist()]
        if len(docs) == 0:
            logger.warning(f"No matches found for {text}")
            return []
        if settings.debug:
            logger.info(f"Found {len(docs)} matches, max score: {max(scores)}")
        doc_score_pairs = list(zip(docs, scores))
        self.show_if_debug(doc_score_pairs)
        return doc_score_pairs
</file>

<file path="langroid/vector_store/meilisearch.py">
"""
MeiliSearch as a pure document store, without its
(experimental) vector-store functionality.
We aim to use MeiliSearch for fast lexical search.
Note that what we call "Collection" in Langroid is referred to as
"Index" in MeiliSearch. Each data-store has its own terminology,
but for uniformity we use the Langroid terminology here.
"""

from __future__ import annotations

import asyncio
import logging
import os
from typing import TYPE_CHECKING, Any, Callable, Dict, List, Optional, Sequence, Tuple

from dotenv import load_dotenv

if TYPE_CHECKING:
    from meilisearch_python_sdk.index import AsyncIndex
    from meilisearch_python_sdk.models.documents import DocumentsInfo


from langroid.exceptions import LangroidImportError
from langroid.mytypes import DocMetaData, Document
from langroid.utils.configuration import settings
from langroid.vector_store.base import VectorStore, VectorStoreConfig

logger = logging.getLogger(__name__)


class MeiliSearchConfig(VectorStoreConfig):
    cloud: bool = False
    collection_name: str | None = None
    primary_key: str = "id"
    port = 7700


class MeiliSearch(VectorStore):
    def __init__(self, config: MeiliSearchConfig = MeiliSearchConfig()):
        super().__init__(config)
        try:
            import meilisearch_python_sdk as meilisearch
        except ImportError:
            raise LangroidImportError("meilisearch", "meilisearch")

        self.config: MeiliSearchConfig = config
        self.host = config.host
        self.port = config.port
        load_dotenv()
        self.key = os.getenv("MEILISEARCH_API_KEY") or "masterKey"
        self.url = os.getenv("MEILISEARCH_API_URL") or f"http://{self.host}:{self.port}"
        if config.cloud and None in [self.key, self.url]:
            logger.warning(
                f"""MEILISEARCH_API_KEY, MEILISEARCH_API_URL env variable must be set 
                to use MeiliSearch in cloud mode. Please set these values 
                in your .env file. Switching to local MeiliSearch at 
                {self.url} 
                """
            )
            config.cloud = False

        self.client: Callable[[], meilisearch.AsyncClient] = lambda: (
            meilisearch.AsyncClient(url=self.url, api_key=self.key)
        )

        # Note: Only create collection if a non-null collection name is provided.
        # This is useful to delay creation of db until we have a suitable
        # collection name (e.g. we could get it from the url or folder path).
        if config.collection_name is not None:
            self.create_collection(
                config.collection_name, replace=config.replace_collection
            )

    def clear_empty_collections(self) -> int:
        """All collections are treated as non-empty in MeiliSearch, so this is a
        no-op"""
        return 0

    async def _async_delete_indices(self, uids: List[str]) -> List[bool]:
        """Delete any indicecs in `uids` that exist.
        Returns list of bools indicating whether the index has been deleted"""
        async with self.client() as client:
            result = await asyncio.gather(
                *[client.delete_index_if_exists(uid=uid) for uid in uids]
            )
        return result

    def clear_all_collections(self, really: bool = False, prefix: str = "") -> int:
        """Delete all indices whose names start with `prefix`"""
        if not really:
            logger.warning("Not deleting all collections, set really=True to confirm")
            return 0
        coll_names = [c for c in self.list_collections() if c.startswith(prefix)]
        deletes = asyncio.run(self._async_delete_indices(coll_names))
        n_deletes = sum(deletes)
        logger.warning(f"Deleted {n_deletes} indices in MeiliSearch")
        return n_deletes

    def _list_all_collections(self) -> List[str]:
        """
        List all collections, including empty ones.
        Returns:
            List of collection names.
        """
        return self.list_collections()

    async def _async_get_indexes(self) -> List[AsyncIndex]:
        async with self.client() as client:
            indexes = await client.get_indexes(limit=10_000)
        return [] if indexes is None else indexes  # type: ignore

    async def _async_get_index(self, index_uid: str) -> "AsyncIndex":
        async with self.client() as client:
            index = await client.get_index(index_uid)
        return index  # type: ignore

    def list_collections(self, empty: bool = False) -> List[str]:
        """
        Returns:
            List of index names stored. We treat any existing index as non-empty.
        """
        indexes = asyncio.run(self._async_get_indexes())
        if len(indexes) == 0:
            return []
        else:
            return [ind.uid for ind in indexes]

    async def _async_create_index(self, collection_name: str) -> "AsyncIndex":
        async with self.client() as client:
            index = await client.create_index(
                uid=collection_name,
                primary_key=self.config.primary_key,
            )
        return index

    async def _async_delete_index(self, collection_name: str) -> bool:
        """Delete index if it exists. Returns True iff index was deleted"""
        async with self.client() as client:
            result = await client.delete_index_if_exists(uid=collection_name)
        return result  # type: ignore

    def create_collection(self, collection_name: str, replace: bool = False) -> None:
        """
        Create a collection with the given name, optionally replacing an existing
            collection if `replace` is True.
        Args:
            collection_name (str): Name of the collection to create.
            replace (bool): Whether to replace an existing collection
                with the same name. Defaults to False.
        """
        self.config.collection_name = collection_name
        collections = self.list_collections()
        if collection_name in collections:
            logger.warning(
                f"MeiliSearch Non-empty Index {collection_name} already exists"
            )
            if not replace:
                logger.warning("Not replacing collection")
                return
            else:
                logger.warning("Recreating fresh collection")
                asyncio.run(self._async_delete_index(collection_name))
        asyncio.run(self._async_create_index(collection_name))
        collection_info = asyncio.run(self._async_get_index(collection_name))
        if settings.debug:
            level = logger.getEffectiveLevel()
            logger.setLevel(logging.INFO)
            logger.info(collection_info)
            logger.setLevel(level)

    async def _async_add_documents(
        self, collection_name: str, documents: Sequence[Dict[str, Any]]
    ) -> None:
        async with self.client() as client:
            index = client.index(collection_name)
            await index.add_documents_in_batches(
                documents=documents,
                batch_size=self.config.batch_size,
                primary_key=self.config.primary_key,
            )

    def add_documents(self, documents: Sequence[Document]) -> None:
        super().maybe_add_ids(documents)
        if len(documents) == 0:
            return
        colls = self._list_all_collections()
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot ingest docs")
        if self.config.collection_name not in colls:
            self.create_collection(self.config.collection_name, replace=True)
        docs = [
            dict(
                id=d.id(),
                content=d.content,
                metadata=d.metadata.dict(),
            )
            for d in documents
        ]
        asyncio.run(self._async_add_documents(self.config.collection_name, docs))

    def delete_collection(self, collection_name: str) -> None:
        asyncio.run(self._async_delete_index(collection_name))

    def _to_int_or_uuid(self, id: str) -> int | str:
        try:
            return int(id)
        except ValueError:
            return id

    async def _async_get_documents(self, where: str = "") -> "DocumentsInfo":
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot retrieve docs")
        filter = [] if where is None else where
        async with self.client() as client:
            index = client.index(self.config.collection_name)
            documents = await index.get_documents(limit=10_000, filter=filter)
        return documents

    def get_all_documents(self, where: str = "") -> List[Document]:
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot retrieve docs")
        docs = asyncio.run(self._async_get_documents(where))
        if docs is None:
            return []
        doc_results = docs.results
        return [
            Document(
                content=d["content"],
                metadata=DocMetaData(**d["metadata"]),
            )
            for d in doc_results
        ]

    async def _async_get_documents_by_ids(self, ids: List[str]) -> List[Dict[str, Any]]:
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot retrieve docs")
        async with self.client() as client:
            index = client.index(self.config.collection_name)
            documents = await asyncio.gather(*[index.get_document(id) for id in ids])
        return documents

    def get_documents_by_ids(self, ids: List[str]) -> List[Document]:
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot retrieve docs")
        docs = asyncio.run(self._async_get_documents_by_ids(ids))
        return [
            Document(
                content=d["content"],
                metadata=DocMetaData(**d["metadata"]),
            )
            for d in docs
        ]

    async def _async_search(
        self,
        query: str,
        k: int = 20,
        filter: str | list[str | list[str]] | None = None,
    ) -> List[Dict[str, Any]]:
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot search")
        async with self.client() as client:
            index = client.index(self.config.collection_name)
            results = await index.search(
                query,
                limit=k,
                show_ranking_score=True,
                filter=filter,
            )
        return results.hits  # type: ignore

    def similar_texts_with_scores(
        self,
        text: str,
        k: int = 20,
        where: Optional[str] = None,
        neighbors: int = 0,  # ignored
    ) -> List[Tuple[Document, float]]:
        filter = [] if where is None else where
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot search")
        _docs = asyncio.run(self._async_search(text, k, filter))  # type: ignore
        if len(_docs) == 0:
            logger.warning(f"No matches found for {text}")
            return []
        scores = [h["_rankingScore"] for h in _docs]
        if settings.debug:
            logger.info(f"Found {len(_docs)} matches, max score: {max(scores)}")
        docs = [
            Document(
                content=d["content"],
                metadata=DocMetaData(**d["metadata"]),
            )
            for d in _docs
        ]
        doc_score_pairs = list(zip(docs, scores))
        self.show_if_debug(doc_score_pairs)
        return doc_score_pairs
</file>

<file path="langroid/vector_store/pineconedb.py">
import json
import logging
import os
import re
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    Literal,
    Optional,
    Sequence,
    Tuple,
    Union,
)

from dotenv import load_dotenv

from langroid import LangroidImportError
from langroid.mytypes import Document

# import dataclass
from langroid.pydantic_v1 import BaseModel
from langroid.utils.configuration import settings
from langroid.vector_store.base import VectorStore, VectorStoreConfig

logger = logging.getLogger(__name__)


has_pinecone: bool = True
try:
    from pinecone import Pinecone, PineconeApiException, ServerlessSpec
except ImportError:

    if not TYPE_CHECKING:

        class ServerlessSpec(BaseModel):
            """
            Fallback Serverless specification configuration to avoid import errors.
            """

            cloud: str
            region: str

        PineconeApiException = Any  # type: ignore
        Pinecone = Any  # type: ignore
        has_pinecone = False


@dataclass(frozen=True)
class IndexMeta:
    name: str
    total_vector_count: int


class PineconeDBConfig(VectorStoreConfig):
    cloud: bool = True
    collection_name: str | None = "temp"
    spec: ServerlessSpec = ServerlessSpec(cloud="aws", region="us-east-1")
    deletion_protection: Literal["enabled", "disabled"] | None = None
    metric: str = "cosine"
    pagination_size: int = 100


class PineconeDB(VectorStore):
    def __init__(self, config: PineconeDBConfig = PineconeDBConfig()):
        super().__init__(config)
        if not has_pinecone:
            raise LangroidImportError("pinecone", "pinecone")
        self.config: PineconeDBConfig = config
        load_dotenv()
        key = os.getenv("PINECONE_API_KEY")

        if not key:
            raise ValueError("PINECONE_API_KEY not set, could not instantiate client")
        self.client = Pinecone(api_key=key)

        if config.collection_name:
            self.create_collection(
                collection_name=config.collection_name,
                replace=config.replace_collection,
            )

    def clear_empty_collections(self) -> int:
        indexes = self._list_index_metas(empty=True)
        n_deletes = 0
        for index in indexes:
            if index.total_vector_count == -1:
                logger.warning(
                    f"Error fetching details for {index.name} when scanning indexes"
                )
            n_deletes += 1
            self.delete_collection(collection_name=index.name)
        return n_deletes

    def clear_all_collections(self, really: bool = False, prefix: str = "") -> int:
        """
        Returns:
            Number of Pinecone indexes that were deleted

        Args:
            really: Optional[bool] - whether to really delete all Pinecone collections
            prefix: Optional[str] - string to match potential Pinecone
                indexes for deletion
        """
        if not really:
            logger.warning("Not deleting all collections, set really=True to confirm")
            return 0
        indexes = [
            c for c in self._list_index_metas(empty=True) if c.name.startswith(prefix)
        ]
        if len(indexes) == 0:
            logger.warning(f"No collections found with prefix {prefix}")
            return 0
        n_empty_deletes, n_non_empty_deletes = 0, 0
        for index_desc in indexes:
            self.delete_collection(collection_name=index_desc.name)
            n_empty_deletes += index_desc.total_vector_count == 0
            n_non_empty_deletes += index_desc.total_vector_count > 0
        logger.warning(
            f"""
            Deleted {n_empty_deletes} empty indexes and
            {n_non_empty_deletes} non-empty indexes
            """
        )
        return n_empty_deletes + n_non_empty_deletes

    def list_collections(self, empty: bool = False) -> List[str]:
        """
        Returns:
            List of Pinecone indices that have at least one vector.

        Args:
            empty: Optional[bool] - whether to include empty collections
        """
        indexes = self.client.list_indexes()
        res: List[str] = []
        if empty:
            res.extend(indexes.names())
            return res

        for index in indexes.names():
            index_meta = self.client.Index(name=index)
            if index_meta.describe_index_stats().get("total_vector_count", 0) > 0:
                res.append(index)
        return res

    def _list_index_metas(self, empty: bool = False) -> List[IndexMeta]:
        """
        Returns:
            List of objects describing Pinecone indices

        Args:
            empty: Optional[bool] - whether to include empty collections
        """
        indexes = self.client.list_indexes()
        res = []
        for index in indexes.names():
            index_meta = self._fetch_index_meta(index)
            if empty:
                res.append(index_meta)
            elif index_meta.total_vector_count > 0:
                res.append(index_meta)
        return res

    def _fetch_index_meta(self, index_name: str) -> IndexMeta:
        """
        Returns:
            A dataclass describing the input Index by name and vector count
            to save a bit on index description calls

        Args:
            index_name: str - Name of the index in Pinecone
        """
        try:
            index = self.client.Index(name=index_name)
            stats = index.describe_index_stats()
            return IndexMeta(
                name=index_name, total_vector_count=stats.get("total_vector_count", 0)
            )
        except PineconeApiException as e:
            logger.warning(f"Error fetching details for index {index_name}")
            logger.warning(e)
            return IndexMeta(name=index_name, total_vector_count=-1)

    def create_collection(self, collection_name: str, replace: bool = False) -> None:
        """
        Create a collection with the given name, optionally replacing an existing
        collection if `replace` is True.

        Args:
            collection_name: str - Configuration of the collection to create.
            replace: Optional[Bool] - Whether to replace an existing collection
                with the same name. Defaults to False.
        """
        pattern = re.compile(r"^[a-z0-9-]+$")
        if not pattern.match(collection_name):
            raise ValueError(
                "Pinecone index names must be lowercase alphanumeric characters or '-'"
            )
        self.config.collection_name = collection_name
        if collection_name in self.list_collections(empty=True):
            index = self.client.Index(name=collection_name)
            stats = index.describe_index_stats()
            status = self.client.describe_index(name=collection_name)
            if status["status"]["ready"] and stats["total_vector_count"] > 0:
                logger.warning(f"Non-empty collection {collection_name} already exists")
                if not replace:
                    logger.warning("Not replacing collection")
                    return
                else:
                    logger.warning("Recreating fresh collection")
            self.delete_collection(collection_name=collection_name)

        payload = {
            "name": collection_name,
            "dimension": self.embedding_dim,
            "spec": self.config.spec,
            "metric": self.config.metric,
            "timeout": self.config.timeout,
        }

        if self.config.deletion_protection:
            payload["deletion_protection"] = self.config.deletion_protection

        try:
            self.client.create_index(**payload)
        except PineconeApiException as e:
            logger.error(e)

    def delete_collection(self, collection_name: str) -> None:
        logger.info(f"Attempting to delete {collection_name}")
        try:
            self.client.delete_index(name=collection_name)
        except PineconeApiException as e:
            logger.error(f"Failed to delete {collection_name}")
            logger.error(e)

    def add_documents(self, documents: Sequence[Document], namespace: str = "") -> None:
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot ingest docs")

        if len(documents) == 0:
            logger.warning("Empty list of documents passed into add_documents")
            return

        super().maybe_add_ids(documents)
        document_dicts = [doc.dict() for doc in documents]
        document_ids = [doc.id() for doc in documents]
        embedding_vectors = self.embedding_fn([doc.content for doc in documents])
        vectors = [
            {
                "id": document_id,
                "values": embedding_vector,
                "metadata": {
                    **document_dict["metadata"],
                    **{
                        key: value
                        for key, value in document_dict.items()
                        if key != "metadata"
                    },
                },
            }
            for document_dict, document_id, embedding_vector in zip(
                document_dicts, document_ids, embedding_vectors
            )
        ]

        if self.config.collection_name not in self.list_collections(empty=True):
            self.create_collection(
                collection_name=self.config.collection_name, replace=True
            )

        index = self.client.Index(name=self.config.collection_name)
        batch_size = self.config.batch_size

        for i in range(0, len(documents), batch_size):
            try:
                if namespace:
                    index.upsert(
                        vectors=vectors[i : i + batch_size], namespace=namespace
                    )
                else:
                    index.upsert(vectors=vectors[i : i + batch_size])
            except PineconeApiException as e:
                logger.error(
                    f"Unable to add of docs between indices {i} and {batch_size}"
                )
                logger.error(e)

    def get_all_documents(
        self, prefix: str = "", namespace: str = ""
    ) -> List[Document]:
        """
        Returns:
            All documents for the collection currently defined in
            the configuration object

        Args:
            prefix: str - document id prefix to search for
            namespace: str - partition of vectors to search within the index
        """
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot retrieve docs")
        docs = []

        request_filters: Dict[str, Union[str, int]] = {
            "limit": self.config.pagination_size
        }
        if prefix:
            request_filters["prefix"] = prefix
        if namespace:
            request_filters["namespace"] = namespace

        index = self.client.Index(name=self.config.collection_name)

        while True:
            response = index.list_paginated(**request_filters)
            vectors = response.get("vectors", [])

            if not vectors:
                logger.warning("Received empty list while requesting for vector ids")
                logger.warning("Halting fetch requests")
                if settings.debug:
                    logger.debug(f"Request for failed fetch was: {request_filters}")
                break

            docs.extend(
                self.get_documents_by_ids(
                    ids=[vector.get("id") for vector in vectors],
                    namespace=namespace if namespace else "",
                )
            )

            pagination_token = response.get("pagination", {}).get("next", None)

            if not pagination_token:
                break

            request_filters["pagination_token"] = pagination_token

        return docs

    def get_documents_by_ids(
        self, ids: List[str], namespace: str = ""
    ) -> List[Document]:
        """
        Returns:
            Fetches document text embedded in Pinecone index metadata

        Args:
            ids: List[str] - vector data object ids to retrieve
            namespace: str - partition of vectors to search within the index
        """
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot retrieve docs")
        index = self.client.Index(name=self.config.collection_name)

        if namespace:
            records = index.fetch(ids=ids, namespace=namespace)
        else:
            records = index.fetch(ids=ids)

        id_mapping = {key: value for key, value in records["vectors"].items()}
        ordered_payloads = [id_mapping[_id] for _id in ids if _id in id_mapping]
        return [
            self.transform_pinecone_vector(payload.get("metadata", {}))
            for payload in ordered_payloads
        ]

    def similar_texts_with_scores(
        self,
        text: str,
        k: int = 1,
        where: Optional[str] = None,
        namespace: Optional[str] = None,
    ) -> List[Tuple[Document, float]]:
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot search")

        if k < 1 or k > 9999:
            raise ValueError(
                f"TopK for Pinecone vector search must be 1 < k < 10000, k was {k}"
            )

        vector_search_request = {
            "top_k": k,
            "include_metadata": True,
            "vector": self.embedding_fn([text])[0],
        }
        if where:
            vector_search_request["filter"] = json.loads(where) if where else None
        if namespace:
            vector_search_request["namespace"] = namespace

        index = self.client.Index(name=self.config.collection_name)
        response = index.query(**vector_search_request)
        doc_score_pairs = [
            (
                self.transform_pinecone_vector(match.get("metadata", {})),
                match.get("score", 0),
            )
            for match in response.get("matches", [])
        ]
        if settings.debug:
            max_score = max([pair[1] for pair in doc_score_pairs])
            logger.info(f"Found {len(doc_score_pairs)} matches, max score: {max_score}")
        self.show_if_debug(doc_score_pairs)
        return doc_score_pairs

    def transform_pinecone_vector(self, metadata_dict: Dict[str, Any]) -> Document:
        """
        Parses the metadata response from the Pinecone vector query and
        formats it into a dictionary that can be parsed by the Document class
        associated with the PineconeDBConfig class

        Returns:
            Well formed dictionary object to be transformed into a Document

        Args:
            metadata_dict: Dict - the metadata dictionary from the Pinecone
                vector query match
        """
        return self.config.document_class(
            **{**metadata_dict, "metadata": {**metadata_dict}}
        )
</file>

<file path="langroid/vector_store/postgres.py">
import hashlib
import json
import logging
import os
import uuid
from typing import Any, Dict, List, Optional, Sequence, Tuple

from langroid.embedding_models.base import (
    EmbeddingModelsConfig,
)
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.exceptions import LangroidImportError
from langroid.mytypes import DocMetaData, Document
from langroid.vector_store.base import VectorStore, VectorStoreConfig

has_postgres: bool = True
try:
    from sqlalchemy import (
        Column,
        MetaData,
        String,
        Table,
        case,
        create_engine,
        inspect,
        text,
    )
    from sqlalchemy.dialects.postgresql import JSONB
    from sqlalchemy.engine import Connection, Engine
    from sqlalchemy.sql.expression import insert
except ImportError:
    Engine = Any  # type: ignore
    Connection = Any  # type: ignore
    has_postgres = False

logger = logging.getLogger(__name__)


class PostgresDBConfig(VectorStoreConfig):
    collection_name: str = "embeddings"
    cloud: bool = False
    docker: bool = True
    host: str = "127.0.0.1"
    port: int = 5432
    replace_collection: bool = False
    embedding: EmbeddingModelsConfig = OpenAIEmbeddingsConfig()
    pool_size: int = 10
    max_overflow: int = 20
    hnsw_m: int = 16
    hnsw_ef_construction: int = 200


class PostgresDB(VectorStore):
    def __init__(self, config: PostgresDBConfig = PostgresDBConfig()):
        super().__init__(config)
        if not has_postgres:
            raise LangroidImportError("pgvector", "postgres")
        try:
            from sqlalchemy.orm import sessionmaker
        except ImportError:
            raise LangroidImportError("sqlalchemy", "postgres")

        self.config: PostgresDBConfig = config
        self.engine = self._create_engine()
        PostgresDB._create_vector_extension(self.engine)
        self.SessionLocal = sessionmaker(
            autocommit=False, autoflush=False, bind=self.engine
        )
        self.metadata = MetaData()
        self._setup_table()

    def _create_engine(self) -> Engine:
        """Creates a SQLAlchemy engine based on the configuration."""

        connection_string: str | None = None  # Ensure variable is always defined

        if self.config.cloud:
            connection_string = os.getenv("POSTGRES_CONNECTION_STRING")

            if connection_string and connection_string.startswith("postgres://"):
                connection_string = connection_string.replace(
                    "postgres://", "postgresql+psycopg2://", 1
                )
            elif not connection_string:
                raise ValueError("Provide the POSTGRES_CONNECTION_STRING.")

        elif self.config.docker:
            username = os.getenv("POSTGRES_USER", "postgres")
            password = os.getenv("POSTGRES_PASSWORD", "postgres")
            database = os.getenv("POSTGRES_DB", "langroid")

            if not (username and password and database):
                raise ValueError(
                    "Provide POSTGRES_USER, POSTGRES_PASSWORD, " "POSTGRES_DB. "
                )

            connection_string = (
                f"postgresql+psycopg2://{username}:{password}@"
                f"{self.config.host}:{self.config.port}/{database}"
            )
            self.config.cloud = False  # Ensures cloud is disabled if using Docker

        else:
            raise ValueError(
                "Provide either Docker or Cloud config to connect to the database."
            )

        return create_engine(
            connection_string,
            pool_size=self.config.pool_size,
            max_overflow=self.config.max_overflow,
        )

    def _setup_table(self) -> None:
        try:
            from pgvector.sqlalchemy import Vector
        except ImportError as e:
            raise LangroidImportError(extra="postgres", error=str(e))

        if self.config.replace_collection:
            self.delete_collection(self.config.collection_name)

        self.embeddings_table = Table(
            self.config.collection_name,
            self.metadata,
            Column("id", String, primary_key=True, nullable=False, unique=True),
            Column("embedding", Vector(self.embedding_dim)),
            Column("document", String),
            Column("cmetadata", JSONB),
            extend_existing=True,
        )

        self.metadata.create_all(self.engine)
        self.metadata.reflect(bind=self.engine, only=[self.config.collection_name])

        # Create HNSW index for embeddings column if it doesn't exist.
        # This index enables efficient nearest-neighbor search using cosine similarity.
        # PostgreSQL automatically builds the index after creation;
        # no manual step required.
        # Read more about pgvector hnsw index here:
        # https://github.com/pgvector/pgvector?tab=readme-ov-file#hnsw

        index_name = f"hnsw_index_{self.config.collection_name}_embedding"
        with self.engine.connect() as connection:
            if not self.index_exists(connection, index_name):
                connection.execute(text("COMMIT"))
                create_index_query = text(
                    f"""
                    CREATE INDEX CONCURRENTLY IF NOT EXISTS {index_name}
                    ON {self.config.collection_name}
                    USING hnsw (embedding vector_cosine_ops)
                    WITH (
                        m = {self.config.hnsw_m},
                        ef_construction = {self.config.hnsw_ef_construction}
                    );
                    """
                )
                connection.execute(create_index_query)

    def index_exists(self, connection: Connection, index_name: str) -> bool:
        """Check if an index exists."""
        query = text(
            "SELECT 1 FROM pg_indexes WHERE indexname = :index_name"
        ).bindparams(index_name=index_name)
        result = connection.execute(query).scalar()
        return bool(result)

    @staticmethod
    def _create_vector_extension(conn: Engine) -> None:

        with conn.connect() as connection:
            with connection.begin():
                # The number is a unique identifier used to lock a specific resource
                # during transaction. Any 64-bit integer can be used for advisory locks.
                # Acquire advisory lock to ensure atomic, isolated setup
                # and prevent race conditions.

                statement = text(
                    "SELECT pg_advisory_xact_lock(1573678846307946496);"
                    "CREATE EXTENSION IF NOT EXISTS vector;"
                )
                connection.execute(statement)

    def set_collection(self, collection_name: str, replace: bool = False) -> None:
        inspector = inspect(self.engine)
        table_exists = collection_name in inspector.get_table_names()

        if (
            collection_name == self.config.collection_name
            and table_exists
            and not replace
        ):
            return
        else:
            self.config.collection_name = collection_name
            self.config.replace_collection = replace
            self._setup_table()

    def list_collections(self, empty: bool = True) -> List[str]:
        inspector = inspect(self.engine)
        table_names = inspector.get_table_names()

        with self.SessionLocal() as session:
            collections = []
            for table_name in table_names:
                table = Table(table_name, self.metadata, autoload_with=self.engine)
                if empty:
                    collections.append(table_name)
                else:
                    # Efficiently check for non-emptiness
                    if session.query(table.select().limit(1).exists()).scalar():
                        collections.append(table_name)
            return collections

    def create_collection(self, collection_name: str, replace: bool = False) -> None:
        self.set_collection(collection_name, replace=replace)

    def delete_collection(self, collection_name: str) -> None:
        """
        Deletes a collection and its associated HNSW index, handling metadata
        synchronization issues.
        """
        with self.engine.connect() as connection:
            connection.execute(text("COMMIT"))
            index_name = f"hnsw_index_{collection_name}_embedding"
            drop_index_query = text(f"DROP INDEX CONCURRENTLY IF EXISTS {index_name}")
            connection.execute(drop_index_query)

            # 3. Now, drop the table using SQLAlchemy
            table = Table(collection_name, self.metadata)
            table.drop(self.engine, checkfirst=True)

            # 4. Refresh metadata again after dropping the table
            self.metadata.clear()
            self.metadata.reflect(bind=self.engine)

    def clear_all_collections(self, really: bool = False, prefix: str = "") -> int:
        if not really:
            logger.warning("Not deleting all tables, set really=True to confirm")
            return 0

        inspector = inspect(self.engine)
        table_names = inspector.get_table_names()

        with self.SessionLocal() as session:
            deleted_count = 0
            for table_name in table_names:
                if table_name.startswith(prefix):
                    # Use delete_collection to handle index and table deletion
                    self.delete_collection(table_name)
                    deleted_count += 1
            session.commit()
            logger.warning(f"Deleted {deleted_count} tables with prefix '{prefix}'.")
            return deleted_count

    def clear_empty_collections(self) -> int:
        inspector = inspect(self.engine)
        table_names = inspector.get_table_names()

        with self.SessionLocal() as session:
            deleted_count = 0
            for table_name in table_names:
                table = Table(table_name, self.metadata, autoload_with=self.engine)

                # Efficiently check for emptiness without fetching all rows
                if session.query(table.select().limit(1).exists()).scalar():
                    continue

                # Use delete_collection to handle index and table deletion
                self.delete_collection(table_name)
                deleted_count += 1

            session.commit()  # Commit is likely not needed here
            logger.warning(f"Deleted {deleted_count} empty tables.")
            return deleted_count

    def _parse_embedding_store_record(self, res: Any) -> Dict[str, Any]:
        metadata = res.cmetadata or {}
        metadata["id"] = res.id
        return {
            "content": res.document,
            "metadata": DocMetaData(**metadata),
        }

    def get_all_documents(self, where: str = "") -> List[Document]:
        with self.SessionLocal() as session:
            query = session.query(self.embeddings_table)

            # Apply 'where' clause if provided
            if where:
                try:
                    where_json = json.loads(where)
                    query = query.filter(
                        self.embeddings_table.c.cmetadata.contains(where_json)
                    )
                except json.JSONDecodeError:
                    logger.error(f"Invalid JSON in 'where' clause: {where}")
                    return []  # Return empty list or handle error as appropriate

            results = query.all()
            documents = [
                Document(**self._parse_embedding_store_record(res)) for res in results
            ]
            return documents

    def get_documents_by_ids(self, ids: List[str]) -> List[Document]:
        with self.SessionLocal() as session:
            # Add a CASE statement to preserve the order of IDs
            case_stmt = case(
                {id_: index for index, id_ in enumerate(ids)},
                value=self.embeddings_table.c.id,
            )

            query = (
                session.query(self.embeddings_table)
                .filter(self.embeddings_table.c.id.in_(ids))
                .order_by(case_stmt)  # Order by the CASE statement
            )
            results = query.all()

            documents = [
                Document(**self._parse_embedding_store_record(row)) for row in results
            ]
            return documents

    def add_documents(self, documents: Sequence[Document]) -> None:
        super().maybe_add_ids(documents)
        for doc in documents:
            doc.metadata.id = str(PostgresDB._id_to_uuid(doc.metadata.id, doc.metadata))

        embeddings = self.embedding_fn([doc.content for doc in documents])

        batch_size = self.config.batch_size
        with self.SessionLocal() as session:
            for i in range(0, len(documents), batch_size):
                batch_docs = documents[i : i + batch_size]
                batch_embeddings = embeddings[i : i + batch_size]

                new_records = [
                    {
                        "id": doc.metadata.id,
                        "embedding": embedding,
                        "document": doc.content,
                        "cmetadata": doc.metadata.dict(),
                    }
                    for doc, embedding in zip(batch_docs, batch_embeddings)
                ]

                if new_records:
                    stmt = insert(self.embeddings_table).values(new_records)
                    session.execute(stmt)
                session.commit()

    @staticmethod
    def _id_to_uuid(id: str, obj: object) -> str:
        try:
            doc_id = str(uuid.UUID(id))
        except ValueError:
            obj_repr = repr(obj)

            obj_hash = hashlib.sha256(obj_repr.encode()).hexdigest()

            combined = f"{id}-{obj_hash}"

            doc_id = str(uuid.uuid5(uuid.NAMESPACE_DNS, combined))

        return doc_id

    def similar_texts_with_scores(
        self,
        query: str,
        k: int = 1,
        where: Optional[str] = None,
        neighbors: int = 1,  # Parameter not used in this implementation
    ) -> List[Tuple[Document, float]]:
        embedding = self.embedding_fn([query])[0]

        with self.SessionLocal() as session:
            # Calculate the score (1 - cosine_distance) and label it as "score"
            score = (
                1 - (self.embeddings_table.c.embedding.cosine_distance(embedding))
            ).label("score")

            if where is not None:
                try:
                    json_query = json.loads(where)
                except json.JSONDecodeError:
                    raise ValueError(f"Invalid JSON in 'where' clause: {where}")

                results = (
                    session.query(
                        self.embeddings_table.c.id,
                        self.embeddings_table.c.document,
                        self.embeddings_table.c.cmetadata,
                        score,  # Select the calculated score
                    )
                    .filter(self.embeddings_table.c.cmetadata.contains(json_query))
                    .order_by(score.desc())  # Order by score in descending order
                    .limit(k)
                    .all()
                )
            else:
                results = (
                    session.query(
                        self.embeddings_table.c.id,
                        self.embeddings_table.c.document,
                        self.embeddings_table.c.cmetadata,
                        score,  # Select the calculated score
                    )
                    .order_by(score.desc())  # Order by score in descending order
                    .limit(k)
                    .all()
                )

            documents_with_scores = [
                (
                    Document(
                        content=result.document,
                        metadata=DocMetaData(**(result.cmetadata or {})),
                    ),
                    result.score,  # Use the score from the query result
                )
                for result in results
            ]

            return documents_with_scores
</file>

<file path="langroid/vector_store/weaviatedb.py">
import logging
import os
import re
from typing import Any, List, Optional, Sequence, Tuple

from dotenv import load_dotenv

from langroid.embedding_models.base import (
    EmbeddingModelsConfig,
)
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.exceptions import LangroidImportError
from langroid.mytypes import DocMetaData, Document
from langroid.utils.configuration import settings
from langroid.vector_store.base import VectorStore, VectorStoreConfig

logger = logging.getLogger(__name__)


class VectorDistances:
    """
    Fallback class when weaviate is not installed, to avoid import errors.
    """

    COSINE: str = "cosine"
    DOTPRODUCT: str = "dot"
    L2: str = "l2"


class WeaviateDBConfig(VectorStoreConfig):
    collection_name: str | None = "temp"
    embedding: EmbeddingModelsConfig = OpenAIEmbeddingsConfig()
    distance: str = VectorDistances.COSINE
    cloud: bool = False
    docker: bool = False
    host: str = "127.0.0.1"
    port: int = 8080
    storage_path: str = ".weaviate_embedded/data"


class WeaviateDB(VectorStore):
    def __init__(self, config: WeaviateDBConfig = WeaviateDBConfig()):
        super().__init__(config)
        try:
            import weaviate
            from weaviate.classes.init import Auth
        except ImportError:
            raise LangroidImportError("weaviate", "weaviate")

        self.config: WeaviateDBConfig = config
        load_dotenv()
        if self.config.docker:
            self.client = weaviate.connect_to_local(
                host=self.config.host,
                port=self.config.port,
            )
            self.config.cloud = False
        elif self.config.cloud:
            key = os.getenv("WEAVIATE_API_KEY")
            url = os.getenv("WEAVIATE_API_URL")
            if url is None or key is None:
                raise ValueError(
                    """WEAVIATE_API_KEY, WEAVIATE_API_URL env variables must be set to 
                    use WeaviateDB in cloud mode. Please set these values
                    in your .env file.
                    """
                )
            self.client = weaviate.connect_to_weaviate_cloud(
                cluster_url=url,
                auth_credentials=Auth.api_key(key),
            )
        else:
            self.client = weaviate.connect_to_embedded(
                version="latest", persistence_data_path=self.config.storage_path
            )

        if config.collection_name is not None:
            WeaviateDB.validate_and_format_collection_name(config.collection_name)

    def clear_empty_collections(self) -> int:
        colls = self.client.collections.list_all()
        n_deletes = 0
        for coll_name, _ in colls.items():
            val = self.client.collections.get(coll_name)
            if len(val) == 0:
                n_deletes += 1
                self.client.collections.delete(coll_name)
        return n_deletes

    def list_collections(self, empty: bool = False) -> List[str]:
        colls = self.client.collections.list_all()
        if empty:
            return list(colls.keys())
        non_empty_colls = [
            coll_name
            for coll_name in colls.keys()
            if len(self.client.collections.get(coll_name)) > 0
        ]

        return non_empty_colls

    def clear_all_collections(self, really: bool = False, prefix: str = "") -> int:
        if not really:
            logger.warning(
                "Not really deleting all collections ,set really=True to confirm"
            )
            return 0
        coll_names = [
            c for c in self.list_collections(empty=True) if c.startswith(prefix)
        ]
        if len(coll_names) == 0:
            logger.warning(f"No collections found with prefix {prefix}")
            return 0
        n_empty_deletes = 0
        n_non_empty_deletes = 0
        for name in coll_names:
            info = self.client.collections.get(name)
            points_count = len(info)

            n_empty_deletes += points_count == 0
            n_non_empty_deletes += points_count > 0
            self.client.collections.delete(name)
        logger.warning(
            f"""
            Deleted {n_empty_deletes} empty collections and
            {n_non_empty_deletes} non-empty collections.
            """
        )
        return n_empty_deletes + n_non_empty_deletes

    def delete_collection(self, collection_name: str) -> None:
        self.client.collections.delete(name=collection_name)

    def create_collection(self, collection_name: str, replace: bool = False) -> None:
        try:
            from weaviate.classes.config import (
                Configure,
                VectorDistances,
            )
        except ImportError:
            raise LangroidImportError("weaviate", "weaviate")
        collection_name = WeaviateDB.validate_and_format_collection_name(
            collection_name
        )
        self.config.collection_name = collection_name
        if self.client.collections.exists(name=collection_name):
            coll = self.client.collections.get(name=collection_name)
            if len(coll) > 0:
                logger.warning(f"Non-empty Collection {collection_name} already exists")
                if not replace:
                    logger.warning("Not replacing collection")
                    return
                else:
                    logger.warning("Recreating fresh collection")
            self.client.collections.delete(name=collection_name)

        vector_index_config = Configure.VectorIndex.hnsw(
            distance_metric=VectorDistances.COSINE,
        )
        if isinstance(self.config.embedding, OpenAIEmbeddingsConfig):
            vectorizer_config = Configure.Vectorizer.text2vec_openai(
                model=self.config.embedding.model_name,
            )
        else:
            vectorizer_config = None

        collection_info = self.client.collections.create(
            name=collection_name,
            vector_index_config=vector_index_config,
            vectorizer_config=vectorizer_config,
        )
        collection_info = self.client.collections.get(name=collection_name)
        assert len(collection_info) in [0, None]
        if settings.debug:
            level = logger.getEffectiveLevel()
            logger.setLevel(logging.INFO)
            logger.info(collection_info)
            logger.setLevel(level)

    def add_documents(self, documents: Sequence[Document]) -> None:
        super().maybe_add_ids(documents)
        colls = self.list_collections(empty=True)
        for doc in documents:
            doc.metadata.id = str(self._create_valid_uuid_id(doc.metadata.id))
        if len(documents) == 0:
            return

        document_dicts = [doc.dict() for doc in documents]
        embedding_vecs = self.embedding_fn([doc.content for doc in documents])
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot ingest docs")
        if self.config.collection_name not in colls:
            self.create_collection(self.config.collection_name, replace=True)
        coll_name = self.client.collections.get(self.config.collection_name)
        with coll_name.batch.dynamic() as batch:
            for i, doc_dict in enumerate(document_dicts):
                id = doc_dict["metadata"].pop("id", None)
                batch.add_object(properties=doc_dict, uuid=id, vector=embedding_vecs[i])

    def get_all_documents(self, where: str = "") -> List[Document]:
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot retrieve docs")
        # cannot use filter as client does not support json type queries
        coll = self.client.collections.get(self.config.collection_name)
        return [self.weaviate_obj_to_doc(item) for item in coll.iterator()]

    def get_documents_by_ids(self, ids: List[str]) -> List[Document]:
        from weaviate.classes.query import Filter

        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot retrieve docs")

        docs = []
        coll_name = self.client.collections.get(self.config.collection_name)

        result = coll_name.query.fetch_objects(
            filters=Filter.by_property("_id").contains_any(ids), limit=len(coll_name)
        )

        id_to_doc = {}
        for item in result.objects:
            doc = self.weaviate_obj_to_doc(item)
            id_to_doc[doc.metadata.id] = doc

        # Reconstruct the list of documents in the original order of input ids
        docs = [id_to_doc[id] for id in ids if id in id_to_doc]

        return docs

    def similar_texts_with_scores(
        self, text: str, k: int = 1, where: Optional[str] = None
    ) -> List[Tuple[Document, float]]:
        from weaviate.classes.query import MetadataQuery

        embedding = self.embedding_fn([text])[0]
        if self.config.collection_name is None:
            raise ValueError("No collections name set,cannot search")
        coll = self.client.collections.get(self.config.collection_name)
        response = coll.query.near_vector(
            near_vector=embedding,
            limit=k,
            return_properties=True,
            return_metadata=MetadataQuery(distance=True),
        )
        maybe_distances = [item.metadata.distance for item in response.objects]
        similarities = [0 if d is None else 1 - d for d in maybe_distances]
        docs = [self.weaviate_obj_to_doc(item) for item in response.objects]
        return list(zip(docs, similarities))

    def _create_valid_uuid_id(self, id: str) -> Any:
        from weaviate.util import generate_uuid5, get_valid_uuid

        try:
            id = get_valid_uuid(id)
            return id
        except Exception:
            return generate_uuid5(id)

    def weaviate_obj_to_doc(self, input_object: Any) -> Document:
        from weaviate.util import get_valid_uuid

        content = input_object.properties.get("content", "")
        metadata_dict = input_object.properties.get("metadata", {})

        window_ids = metadata_dict.pop("window_ids", [])
        window_ids = [str(uuid) for uuid in window_ids]

        # Ensure the id is a valid UUID string
        id_value = get_valid_uuid(input_object.uuid)

        metadata = DocMetaData(id=id_value, window_ids=window_ids, **metadata_dict)

        return Document(content=content, metadata=metadata)

    @staticmethod
    def validate_and_format_collection_name(name: str) -> str:
        """
        Formats the collection name to comply with Weaviate's naming rules:
        - Name must start with a capital letter.
        - Name can only contain letters, numbers, and underscores.
        - Replaces invalid characters with underscores.
        """
        if not name:
            raise ValueError("Collection name cannot be empty.")

        formatted_name = re.sub(r"[^a-zA-Z0-9_]", "_", name)

        # Ensure the first letter is capitalized
        if not formatted_name[0].isupper():
            formatted_name = formatted_name.capitalize()

        # Check if the name now meets the criteria
        if not re.match(r"^[A-Z][A-Za-z0-9_]*$", formatted_name):
            raise ValueError(
                f"Invalid collection name '{name}'."
                " Names must start with a capital letter "
                "and contain only letters, numbers, and underscores."
            )

        if formatted_name != name:
            logger.warning(
                f"Collection name '{name}' was reformatted to '{formatted_name}' "
                "to comply with Weaviate's rules."
            )

        return formatted_name

    def __del__(self) -> None:
        # Gracefully close the connection with local client
        if not self.config.cloud:
            self.client.close()
</file>

<file path="langroid/__init__.py">
"""
Main langroid package
"""

from . import mytypes
from . import utils

from . import parsing
from . import prompts
from . import cachedb

from . import language_models
from . import embedding_models

from . import vector_store
from . import agent

from .agent.base import (
    Agent,
    AgentConfig,
)

from .agent.batch import (
    run_batch_tasks,
    llm_response_batch,
    agent_response_batch,
)

from .agent.chat_document import (
    StatusCode,
    ChatDocument,
    ChatDocMetaData,
)

from .agent.tool_message import (
    ToolMessage,
)

from .agent.chat_agent import (
    ChatAgent,
    ChatAgentConfig,
)

from .agent.task import Task, TaskConfig


from .mytypes import (
    DocMetaData,
    Document,
    Entity,
)

from .exceptions import InfiniteLoopException
from .exceptions import LangroidImportError

__all__ = [
    "mytypes",
    "exceptions",
    "utils",
    "parsing",
    "prompts",
    "cachedb",
    "language_models",
    "embedding_models",
    "vector_store",
    "agent",
    "Agent",
    "AgentConfig",
    "ChatAgent",
    "ChatAgentConfig",
    "StatusCode",
    "ChatDocument",
    "ChatDocMetaData",
    "Task",
    "TaskConfig",
    "DocMetaData",
    "Document",
    "Entity",
    "ToolMessage",
    "run_batch_tasks",
    "llm_response_batch",
    "agent_response_batch",
    "InfiniteLoopException",
    "LangroidImportError",
]


try:
    from .agent.callbacks.chainlit import (
        ChainlitAgentCallbacks,
        ChainlitTaskCallbacks,
        ChainlitCallbackConfig,
    )

    ChainlitAgentCallbacks
    ChainlitTaskCallbacks
    ChainlitCallbackConfig
    __all__.extend(
        [
            "ChainlitAgentCallbacks",
            "ChainlitTaskCallbacks",
            "ChainlitCallbackConfig",
        ]
    )
except ImportError:
    pass
</file>

<file path="langroid/exceptions.py">
from typing import List, Optional


class XMLException(Exception):
    def __init__(self, message: str) -> None:
        super().__init__(message)


class InfiniteLoopException(Exception):
    def __init__(self, message: str = "Infinite loop detected", *args: object) -> None:
        super().__init__(message, *args)


class LangroidImportError(ImportError):
    def __init__(
        self,
        package: Optional[str] = None,
        extra: Optional[str | List[str]] = None,
        error: str = "",
        *args: object,
    ) -> None:
        """
        Generate helpful warning when attempting to import package or module.

        Args:
            package (str): The name of the package to import.
            extra (str): The name of the extras package required for this import.
            error (str): The error message to display. Depending on context, we
                can set this by capturing the ImportError message.

        """
        if error == "" and package is not None:
            error = f"{package} is not installed by default with Langroid.\n"

        if extra:
            if isinstance(extra, list):
                help_preamble = f"""
                If you want to use it, please install langroid with one of these 
                extras: {', '.join(extra)}. The examples below use the first one, 
                i.e. {extra[0]}.
                """
                extra = extra[0]
            else:
                help_preamble = f"""
                If you want to use it, please install langroid with the
                `{extra}` extra.
                """

            install_help = f"""
                {help_preamble}
                
                If you are using pip:
                pip install "langroid[{extra}]"
                
                For multiple extras, you can separate them with commas:
                pip install "langroid[{extra},another-extra]"
                
                If you are using Poetry:
                poetry add langroid --extras "{extra}"
                
                For multiple extras with Poetry, list them with spaces:
                poetry add langroid --extras "{extra} another-extra"

                If you are using uv:
                uv add "langroid[{extra}]"

                For multiple extras with uv, you can separate them with commas: 
                uv add "langroid[{extra},another-extra]"
                
                If you are working within the langroid dev env (which uses uv),
                you can do:
                uv sync --dev --extra "{extra}"
                or if you want to include multiple extras:
                uv sync --dev --extra "{extra}" --extra "another-extra"
                """
        else:
            install_help = """
                If you want to use it, please install it in the same
                virtual environment as langroid.
                """
        msg = error + install_help

        super().__init__(msg, *args)
</file>

<file path="langroid/mytypes.py">
from enum import Enum
from textwrap import dedent
from typing import Any, Callable, Dict, List, Union
from uuid import uuid4

from langroid.pydantic_v1 import BaseModel, Extra, Field

Number = Union[int, float]
Embedding = List[Number]
Embeddings = List[Embedding]
EmbeddingFunction = Callable[[List[str]], Embeddings]


class Entity(str, Enum):
    """
    Enum for the different types of entities that can respond to the current message.
    """

    AGENT = "Agent"
    LLM = "LLM"
    USER = "User"
    SYSTEM = "System"

    def __eq__(self, other: object) -> bool:
        """Allow case-insensitive equality (==) comparison with strings."""
        if other is None:
            return False
        if isinstance(other, str):
            return self.value.lower() == other.lower()
        return super().__eq__(other)

    def __ne__(self, other: object) -> bool:
        """Allow case-insensitive non-equality (!=) comparison with strings."""
        return not self.__eq__(other)

    def __hash__(self) -> int:
        """Override this to ensure hashability of the enum,
        so it can be used sets and dictionary keys.
        """
        return hash(self.value.lower())


class DocMetaData(BaseModel):
    """Metadata for a document."""

    source: str = "context"  # just reference
    source_content: str = "context"  # reference and content
    title: str = "Unknown Title"
    published_date: str = "Unknown Date"
    is_chunk: bool = False  # if it is a chunk, don't split
    id: str = Field(default_factory=lambda: str(uuid4()))
    window_ids: List[str] = []  # for RAG: ids of chunks around this one

    def dict_bool_int(self, *args: Any, **kwargs: Any) -> Dict[str, Any]:
        """
        Special dict method to convert bool fields to int, to appease some
        downstream libraries,  e.g. Chroma which complains about bool fields in
        metadata.
        """
        original_dict = super().dict(*args, **kwargs)

        for key, value in original_dict.items():
            if isinstance(value, bool):
                original_dict[key] = 1 * value

        return original_dict

    def __str__(self) -> str:
        title_str = (
            ""
            if "unknown" in self.title.lower() or self.title.strip() == ""
            else f"Title: {self.title}"
        )
        date_str = ""
        if (
            "unknown" not in self.published_date.lower()
            and self.published_date.strip() != ""
        ):
            try:
                from dateutil import parser

                # Try to parse the date string
                date_obj = parser.parse(self.published_date)
                # Format to include only the date part (year-month-day)
                date_only = date_obj.strftime("%Y-%m-%d")
                date_str = f"Date: {date_only}"
            except (ValueError, ImportError, TypeError):
                # If parsing fails, just use the original date
                date_str = f"Date: {self.published_date}"
        components = [self.source] + (
            [] if title_str + date_str == "" else [title_str, date_str]
        )
        return ", ".join(components)

    class Config:
        extra = Extra.allow


class Document(BaseModel):
    """Interface for interacting with a document."""

    content: str
    metadata: DocMetaData

    def id(self) -> str:
        return self.metadata.id

    @staticmethod
    def from_string(
        content: str,
        source: str = "context",
        is_chunk: bool = True,
    ) -> "Document":
        return Document(
            content=content,
            metadata=DocMetaData(source=source, is_chunk=is_chunk),
        )

    def __str__(self) -> str:
        return dedent(
            f"""
        CONTENT: {self.content}         
        SOURCE:{str(self.metadata)}
        """
        )


class NonToolAction(str, Enum):
    """
    Possible options to handle non-tool msgs from LLM.
    """

    FORWARD_USER = "user"  # forward msg to user
    DONE = "done"  # task done
</file>

<file path="tests/extras/sql/test_automatic_context_extraction.py">
"""
Test automatic context description extraction from mysql and postgres databases.

Pre-requisites:
(a) Install mysql and postgresql on your system, e.g. on MacOS:
    brew install mysql pkg-config
    brew install postgresql

(b) Install extras
    uv sync --dev --extra mysql --extra postgres
"""

from functools import partial
from typing import Generator

import pytest

from langroid.exceptions import LangroidImportError

try:
    from pytest_mysql import factories as mysql_factories
    from pytest_postgresql import factories as postgresql_factories
    from sqlalchemy import (
        Column,
        Engine,
        ForeignKey,
        Integer,
        String,
        create_engine,
        text,
    )
    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy.orm import Session, relationship, sessionmaker
    from sqlalchemy.schema import CreateSchema
except ImportError as e:
    raise LangroidImportError(extra="sql", error=str(e))


from langroid.agent.special.sql.sql_chat_agent import (
    SQLChatAgent,
    SQLChatAgentConfig,
)
from langroid.utils.configuration import Settings, set_global

Base = declarative_base()


# Define your classes
class Department(Base):
    __tablename__ = "departments"
    __table_args__ = {"comment": "Table for storing department information"}

    id = Column(
        Integer, primary_key=True, comment="Unique identifier for the department"
    )
    name = Column(String(50), nullable=False, comment="Name of the department")

    employees = relationship("Employee", back_populates="department")


class Employee(Base):
    __tablename__ = "employees"
    __table_args__ = {"comment": "Table for storing employee information"}

    id = Column(Integer, primary_key=True, comment="Unique identifier for the employee")
    name = Column(String(50), nullable=False, comment="Name of the employee")
    department_id = Column(
        Integer,
        ForeignKey("departments.id"),
        nullable=False,
        comment="Foreign key to department table",
    )

    department = relationship("Department", back_populates="employees")
    sales = relationship("Sale", back_populates="employee")


class Sale(Base):
    __tablename__ = "sales"
    __table_args__ = {"comment": "Table for storing sales information"}

    id = Column(Integer, primary_key=True, comment="Unique identifier for the sale")
    amount = Column(Integer, nullable=False, comment="Sale amount")
    employee_id = Column(
        Integer,
        ForeignKey("employees.id"),
        nullable=False,
        comment="Foreign key to employee table",
    )

    employee = relationship("Employee", back_populates="sales")


class Product(Base):
    __tablename__ = "product"
    __table_args__ = {"schema": "inventories", "comment": "Table for storing products"}

    id = Column(Integer, primary_key=True, comment="Unique identifier for the product")
    name = Column(String(50), nullable=False, comment="Product name")
    price = Column(Integer, nullable=False, comment="Product price")


class Organization(Base):
    __tablename__ = "organization"
    __table_args__ = {
        "schema": "inventories",
        "comment": "Table for storing organizations",
    }

    id = Column(
        Integer, primary_key=True, comment="Unique identifier for the organization"
    )
    name = Column(String(50), nullable=False, comment="Organization name")

    inventory = relationship("Inventory", back_populates="organization")


class Inventory(Base):
    __tablename__ = "inventory"
    __table_args__ = {
        "schema": "inventories",
        "comment": "Table for storing inventory information",
    }

    id = Column(
        Integer, primary_key=True, comment="Unique identifier for the inventory item"
    )
    organization_id = Column(
        Integer,
        ForeignKey("inventories.organization.id"),
        nullable=False,
        comment="Foreign key to organization table",
    )
    count = Column(Integer, nullable=False, comment="Number of products")
    product_id = Column(
        Integer,
        ForeignKey("inventories.product.id"),
        nullable=False,
        comment="Foreign key to product table",
    )

    organization = relationship("Organization", back_populates="inventory")
    product = relationship("Product")


def insert_test_data(session: Session) -> None:
    """Insert test data into the given database session."""
    sales_dept = Department(id=1, name="Sales")
    marketing_dept = Department(id=2, name="Marketing")

    alice = Employee(id=1, name="Alice", department=sales_dept)
    bob = Employee(id=2, name="Bob", department=marketing_dept)

    sale1 = Sale(id=1, amount=100, employee=alice)
    sale2 = Sale(id=2, amount=500, employee=bob)

    gadget = Product(id=1, name="Gadget", price=100)
    gizmo = Product(id=2, name="Gizmo", price=10)

    widgets = Organization(id=1, name="ACME Widgets")
    gizmos = Organization(id=2, name="Gizmo Corp")

    inventory_item1 = Inventory(id=1, product=gadget, count=10, organization=widgets)
    inventory_item2 = Inventory(id=2, product=gizmo, count=30, organization=widgets)
    inventory_item3 = Inventory(id=3, product=gizmo, count=300, organization=gizmos)

    session.add_all(
        [
            sales_dept,
            marketing_dept,
            alice,
            bob,
            sale1,
            sale2,
            gadget,
            gizmo,
            widgets,
            gizmos,
            inventory_item1,
            inventory_item2,
            inventory_item3,
        ]
    )
    session.commit()


# Simulate PostgreSQL database
postgresql_proc = postgresql_factories.postgresql_proc(port=None)
postgresql = postgresql_factories.postgresql("postgresql_proc")


@pytest.fixture(scope="function")
def postgresql_engine(postgresql) -> Engine:
    """Create engine for the PostgreSQL database.

    Args:
        postgresql: The PostgreSQL fixture.

    Returns:
        An engine connected to the PostgreSQL database.
    """
    user = postgresql.info.user
    password = postgresql.info.password or ""
    host = postgresql.info.host
    port = postgresql.info.port
    dbname = postgresql.info.dbname
    url = f"postgresql://{user}:{password}@{host}:{port}/{dbname}"

    return create_engine(url)


@pytest.fixture(scope="function")
def mock_postgresql_session(
    postgresql_engine: Engine,
) -> Generator[Session, None, None]:
    """Create tables in the PostgreSQL database and add entries."""
    with postgresql_engine.connect() as connection:
        connection.execute(CreateSchema("inventories", if_not_exists=True))
        connection.commit()

    Base.metadata.create_all(postgresql_engine)

    # Adding example entries
    Session = sessionmaker(bind=postgresql_engine)
    session = Session()
    insert_test_data(session)

    yield session
    session.close()
    Base.metadata.drop_all(postgresql_engine)


# Simulate MySQL database
mysql_proc = mysql_factories.mysql_proc(
    host="localhost",
    port=3306,
    user="root",
)
mysql = mysql_factories.mysql("mysql_proc", dbname="test")


@pytest.fixture(scope="function")
def mysql_engine(mysql) -> Engine:
    """Create engine for the MySQL database.
    Args:
        mysql_proc: The MySQL process fixture.
    Returns:
        An engine connected to the MySQL database.
    """
    host = "localhost"
    port = 3306
    user = "root"
    db = "test"
    url = f"mysql+pymysql://{user}@{host}:{port}/{db}"

    engine = create_engine(url)

    with engine.connect() as connection:
        result = connection.execute(text("SHOW DATABASES"))
        db_names = [row[0] for row in result]
        print("Databases:", db_names)

    return create_engine(url)


@pytest.fixture(scope="function")
def mock_mysql_session(mysql_engine: Engine) -> Generator[Session, None, None]:
    """Create tables in the MySQL database and add entries."""
    with mysql_engine.connect() as connection:
        connection.execute(CreateSchema("inventories", if_not_exists=True))
    Base.metadata.create_all(mysql_engine)

    # Adding example entries
    Session = sessionmaker(bind=mysql_engine)
    session = Session()
    insert_test_data(session)

    yield session
    session.close()
    Base.metadata.drop_all(mysql_engine)


def _test_sql_automatic_context_extraction(
    test_settings: Settings,
    db_session: Session,
) -> None:
    """
    Test the SQLChatAgent with a uri as data source
    """
    set_global(test_settings)

    # Test public schema only
    agent = SQLChatAgent(
        config=SQLChatAgentConfig(
            database_session=db_session,
        )
    )

    expected_context = {
        "departments": {
            "description": "Table for storing department information",
            "columns": {
                "id": "Unique identifier for the department",
                "name": "Name of the department",
            },
        },
        "employees": {
            "description": "Table for storing employee information",
            "columns": {
                "id": "Unique identifier for the employee",
                "name": "Name of the employee",
                "department_id": "Foreign key to department table",
            },
        },
        "sales": {
            "description": "Table for storing sales information",
            "columns": {
                "id": "Unique identifier for the sale",
                "amount": "Sale amount",
                "employee_id": "Foreign key to employee table",
            },
        },
    }
    print(agent.config.context_descriptions)
    assert agent.config.context_descriptions == expected_context

    # Test multi-schema
    agent = SQLChatAgent(
        config=SQLChatAgentConfig(
            database_session=db_session,
            multi_schema=True,
        )
    )

    expected_context = {
        "public.departments": expected_context["departments"],
        "public.employees": expected_context["employees"],
        "public.sales": expected_context["sales"],
        "inventories.product": {
            "description": "Table for storing products",
            "columns": {
                "id": "Unique identifier for the product",
                "name": "Product name",
                "price": "Product price",
            },
        },
        "inventories.organization": {
            "description": "Table for storing organizations",
            "columns": {
                "id": "Unique identifier for the organization",
                "name": "Organization name",
            },
        },
        "inventories.inventory": {
            "description": "Table for storing inventory information",
            "columns": {
                "id": "Unique identifier for the inventory item",
                "organization_id": "Foreign key to organization table",
                "count": "Number of products",
                "product_id": "Foreign key to product table",
            },
        },
    }

    def filter_keys(d, f=lambda k: True):
        return {k: v for k, v in d.items() if f(k)}

    def non_internal(k):
        return "information_schema" not in k

    filter_non_internal = partial(filter_keys, f=non_internal)

    print(agent.config.context_descriptions)
    assert filter_non_internal(agent.config.context_descriptions) == expected_context


def test_postgresql_automatic_context_extraction(mock_postgresql_session):
    _test_sql_automatic_context_extraction(
        test_settings=Settings(),
        db_session=mock_postgresql_session,
    )


def test_mysql_automatic_context_extraction(mock_mysql_session):
    _test_sql_automatic_context_extraction(
        test_settings=Settings(),
        db_session=mock_mysql_session,
    )
</file>

<file path="tests/extras/test_csv_kg_chat.py">
import pandas as pd
import pytest
from dotenv import load_dotenv

from langroid.agent.special.neo4j.csv_kg_chat import (
    CSVGraphAgent,
    CSVGraphAgentConfig,
    PandasToKGTool,
)
from langroid.agent.special.neo4j.neo4j_chat_agent import (
    Neo4jSettings,
)

# Create a dummy DataFrame
data = {"name": ["Alice", "Bob"], "age": [25, 30], "city": ["New York", "London"]}
df = pd.DataFrame(data)


@pytest.fixture
def csv_chat_agent(request):
    load_dotenv()
    neo4j_settings = Neo4jSettings()
    config = CSVGraphAgentConfig(data=df, neo4j_settings=neo4j_settings)
    agent = CSVGraphAgent(config)

    def teardown():
        # Remove the database
        agent.remove_database()

    request.addfinalizer(teardown)
    return agent


def test_pandas_to_kg(csv_chat_agent):
    # Cypher query based on the DataFrame columns
    df_columns = ["name", "age", "city"]
    cypher_query = "CREATE (n:Person {"
    for column in df_columns:
        cypher_query += f"{column}: ${column}, "
    cypher_query = cypher_query.rstrip(", ")
    cypher_query += "})"

    # Create a mock PandasToKGTool object
    msg = PandasToKGTool(cypherQuery=cypher_query, args=df_columns)

    # # Set the DataFrame in the agent
    # csv_chat_agent.df = df

    # Call the method being tested
    result = csv_chat_agent.pandas_to_kg(msg)
    assert result == "Graph database successfully generated"

    # Query to obtain the nodes
    query = "MATCH (n:Person) RETURN n"
    query_result = csv_chat_agent.read_query(query)

    # Extract the inner dictionaries
    data_list = [item["n"] for item in query_result.data]

    # Convert the list of dictionaries to a DataFrame and reorder the columns
    nodes_query_df = pd.DataFrame(data_list).reindex(columns=df.columns)

    # Add assert to check nodes_query_result matches the DataFrame
    assert nodes_query_df.equals(df)
</file>

<file path="tests/extras/test_docx_parser_extra.py">
import os

import pytest

from langroid.parsing.document_parser import DocumentParser
from langroid.parsing.parser import DocParsingConfig, DocxParsingConfig, ParsingConfig


@pytest.mark.parametrize("docxlib", ["unstructured"])
def test_get_docx_file(docxlib: str):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    tests_root = os.path.abspath(os.path.join(current_dir, ".."))
    path = os.path.join(tests_root, "main", "data", "docx-test-file.docx")
    docx_parser = DocumentParser.create(
        path, ParsingConfig(docx=DocxParsingConfig(library=docxlib))
    )
    doc = docx_parser.get_doc()

    # Check the results
    assert isinstance(doc.content, str)
    assert len(doc.content) > 0  # assuming the docx is not empty
    assert doc.metadata.source == path

    # parser = Parser(ParsingConfig())
    # pdfParser = PdfParser.from_Parser(parser)
    # docs = pdfParser.doc_chunks_from_pdf_url(url, parser)
    docs = docx_parser.get_doc_chunks()
    assert len(docs) > 0
    assert all(d.metadata.is_chunk for d in docs)
    assert all(path in d.metadata.source for d in docs)


@pytest.mark.skip(
    reason="This requires libreoffice to be installed so we "
    "don't want to run it in Github Actions"
)
@pytest.mark.parametrize("doclib", ["unstructured"])
def test_get_doc_file(doclib: str):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    tests_root = os.path.abspath(os.path.join(current_dir, ".."))
    path = os.path.join(tests_root, "main", "data", "doc-test-file.doc")
    doc_parser = DocumentParser.create(
        path, ParsingConfig(doc=DocParsingConfig(library=doclib))
    )
    doc = doc_parser.get_doc()

    # Check the results
    assert isinstance(doc.content, str)
    assert len(doc.content) > 0  # assuming the docx is not empty
    assert doc.metadata.source == path

    # parser = Parser(ParsingConfig())
    # pdfParser = PdfParser.from_Parser(parser)
    # docs = pdfParser.doc_chunks_from_pdf_url(url, parser)
    docs = doc_parser.get_doc_chunks()
    assert len(docs) > 0
    assert all(d.metadata.is_chunk for d in docs)
    assert all(path in d.metadata.source for d in docs)
</file>

<file path="tests/extras/test_fastembed_embeddings.py">
"""
Test for Qdrant FastEmbed embeddings, see here:
https://github.com/qdrant/fastembed
This depends on fastembed being installed, either as an extra with langroid, e.g.
     pip install "langroid[fastembed]" (recommended, to get the right version)
or directly via
     pip install fastembed
"""

from langroid.embedding_models.base import EmbeddingModel
from langroid.embedding_models.models import FastEmbedEmbeddingsConfig


def test_embeddings():
    fastembed_cfg = FastEmbedEmbeddingsConfig(
        model_name="BAAI/bge-small-en-v1.5",
    )

    fastembed_model = EmbeddingModel.create(fastembed_cfg)

    fastembed_fn = fastembed_model.embedding_fn()

    assert len(fastembed_fn(["hello"])[0]) == fastembed_model.embedding_dims
    assert fastembed_model.embedding_dims == 384
</file>

<file path="tests/extras/test_gemini_embeddings.py">
import os

import pytest
from dotenv import load_dotenv

from langroid.embedding_models.base import EmbeddingModel
from langroid.embedding_models.models import GeminiEmbeddingsConfig


@pytest.mark.skipif(
    os.getenv("GEMINI_API_KEY") is None, reason="GEMINI_API_KEY not set in environment"
)
def test_gemini_embeddings():
    """Test Gemini embedding model for correct output shape."""
    load_dotenv()

    gemini_cfg = GeminiEmbeddingsConfig(model_type="gemini", dims=768)
    gemini_model = EmbeddingModel.create(gemini_cfg)
    gemini_fn = gemini_model.embedding_fn()

    embeddings = gemini_fn(["hello"])  # Returns a List[List[float]]

    assert isinstance(embeddings, list), "Output should be a list"
    assert len(embeddings) == 1, "Should return one embedding for one input"
    assert (
        len(embeddings[0]) == gemini_cfg.dims
    ), f"Expected {gemini_cfg.dims} dims, got {len(embeddings[0])}"
</file>

<file path="tests/extras/test_hf_embeddings.py">
"""
Test for HuggingFace embeddings.
This depends on sentence-transformers being installed:
uv sync --dev --extra hf-embeddings
"""

import os

import pytest

from langroid.embedding_models.base import EmbeddingModel
from langroid.embedding_models.models import SentenceTransformerEmbeddingsConfig
from langroid.embedding_models.remote_embeds import RemoteEmbeddingsConfig


def test_embeddings():
    sentence_cfg = SentenceTransformerEmbeddingsConfig(
        model_type="sentence-transformer",
        model_name="sentence-transformers/all-MiniLM-L6-v2",
    )

    sentence_model = EmbeddingModel.create(sentence_cfg)

    sentence_fn = sentence_model.embedding_fn()

    assert len(sentence_fn(["hello"])[0]) == sentence_model.embedding_dims


# skip this if CI is true in env
@pytest.mark.skipif(
    os.environ.get("CI") == "true", reason="Fine locally but fails in GH CI"
)
def test_remote_embeddings():
    sentence_cfg = RemoteEmbeddingsConfig(
        model_type="sentence-transformer",
        model_name="sentence-transformers/all-MiniLM-L6-v2",
    )

    sentence_model = EmbeddingModel.create(sentence_cfg)

    sentence_fn = sentence_model.embedding_fn()

    assert len(sentence_fn(["hello"])[0]) == sentence_model.embedding_dims
</file>

<file path="tests/extras/test_hf_vector_stores.py">
"""
Test vector stores using HuggingFace embeddings.
This depends on sentence-transformers being installed:
 uv sync --dev --extra hf-embeddings
"""

from typing import Union

import pytest

from langroid.embedding_models.base import EmbeddingModelsConfig
from langroid.embedding_models.models import SentenceTransformerEmbeddingsConfig
from langroid.embedding_models.remote_embeds import RemoteEmbeddingsConfig
from langroid.mytypes import DocMetaData, Document
from langroid.utils.system import rmdir
from langroid.vector_store.base import VectorStore
from langroid.vector_store.chromadb import ChromaDB, ChromaDBConfig
from langroid.vector_store.qdrantdb import QdrantDB, QdrantDBConfig

sentence_cfg = SentenceTransformerEmbeddingsConfig(
    model_type="sentence-transformer",
)
remote_cfg = RemoteEmbeddingsConfig()


def generate_vecdbs(embed_cfg: EmbeddingModelsConfig) -> list[VectorStore]:
    qd_dir = ".qdrant-" + embed_cfg.model_type
    rmdir(qd_dir)
    qd_cfg = QdrantDBConfig(
        cloud=False,
        collection_name="test-" + embed_cfg.model_type,
        storage_path=qd_dir,
        embedding=embed_cfg,
    )

    qd_cfg_cloud = QdrantDBConfig(
        cloud=True,
        collection_name="test-" + embed_cfg.model_type,
        storage_path=qd_dir,
        embedding=embed_cfg,
    )

    cd_dir = ".chroma-" + embed_cfg.model_type
    rmdir(cd_dir)
    cd_cfg = ChromaDBConfig(
        collection_name="test-" + embed_cfg.model_type,
        storage_path=cd_dir,
        embedding=embed_cfg,
    )

    qd = QdrantDB(qd_cfg)
    qd_cloud = QdrantDB(qd_cfg_cloud)
    cd = ChromaDB(cd_cfg)

    return [qd, qd_cloud, cd]


@pytest.mark.parametrize(
    "vecdb", generate_vecdbs(sentence_cfg) + generate_vecdbs(remote_cfg)
)
def test_vector_stores(vecdb: Union[ChromaDB, QdrantDB]):
    docs = [
        Document(content="hello", metadata=DocMetaData(id=1)),
        Document(content="world", metadata=DocMetaData(id=2)),
        Document(content="hi there", metadata=DocMetaData(id=3)),
    ]
    vecdb.add_documents(docs)
    docs_and_scores = vecdb.similar_texts_with_scores("hello", k=2)
    assert set([docs_and_scores[0][0].content, docs_and_scores[1][0].content]) == set(
        ["hello", "hi there"]
    )
    if vecdb.config.cloud:
        vecdb.delete_collection(collection_name=vecdb.config.collection_name)
    else:
        rmdir(vecdb.config.storage_path)
</file>

<file path="tests/extras/test_llamacpp_embeddings.py">
"""
Test for HuggingFace embeddings.
This depends on sentence-transformers being installed:
 uv sync --dev --extra hf-embeddings
"""

from langroid.embedding_models.base import EmbeddingModel
from langroid.embedding_models.models import LlamaCppServerEmbeddingsConfig

"""
    Pytest for llama.cpp server acting as the embeddings host.

    You can find an example of how to run llama.cpp server as an embeddings host in
    docs/notes/llama-cpp-embeddings.md
    
    You must fill out the following variables or the test will fail:

    embedding_address       - This is a string containing the IP address and 
                              port of the llama.cpp server 
                              e.g. "http://localhost:51060"
    embed_context_length    - This is the context length of the model you have
                              loaded into llama.cpp server
    embedding_dimensions    - The dimensions of the embeddings returned from
                              the model.

"""

embedding_address: str = "http://localhost:51060"
embed_context_length: int = 2048
embedding_dimensions: int = 768


def test_embeddings():
    sentence_cfg = LlamaCppServerEmbeddingsConfig(
        api_base=embedding_address,
        context_length=embed_context_length,
        batch_size=embed_context_length,
        dims=embedding_dimensions,
    )

    sentence_model = EmbeddingModel.create(sentence_cfg)

    sentence_fn = sentence_model.embedding_fn()

    assert len(sentence_fn(["hello"])[0]) == sentence_model.embedding_dims
</file>

<file path="tests/extras/test_marker_pdf_parser.py">
from pathlib import Path

import pytest

from langroid.parsing.document_parser import DocumentParser
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig


@pytest.mark.parametrize("pdf_file", ["imagenet.pdf"])
def test_marker_pdf_parser(pdf_file):
    current_dir = Path(__file__).resolve().parent
    path = current_dir.parent / "main" / "data" / pdf_file

    parsing_config = ParsingConfig(
        n_neighbor_ids=2,
        pdf=PdfParsingConfig(
            library="marker",
        ),
    )

    marker_parser = DocumentParser.create(
        path.as_posix(),
        parsing_config,
    )
    doc = marker_parser.get_doc()

    # Check the results
    assert isinstance(doc.content, str)
    assert len(doc.content) > 0  # assuming the PDF is not empty
    assert doc.metadata.source == str(path)
    docs = marker_parser.get_doc_chunks()
    assert len(docs) > 0
    assert all(d.metadata.is_chunk for d in docs)
    n = len(docs)
    k = marker_parser.config.n_neighbor_ids
    if n > 2 * k + 1:
        assert len(docs[n // 2].metadata.window_ids) == 2 * k + 1
</file>

<file path="tests/extras/test_pyarango.py">
import os
import subprocess
import time

import pytest
from pyArango.connection import Connection
from pyArango.theExceptions import DocumentNotFoundError


@pytest.fixture(scope="session", autouse=True)
def setup_arango():
    test_dir = os.path.dirname(os.path.abspath(__file__))
    compose_file = os.path.join(test_dir, "docker-compose-arango.yml")
    # Start container using docker-compose
    subprocess.run(
        [
            "docker-compose",
            "-f",
            compose_file,
            "up",
            "-d",
        ],
        check=True,
    )
    time.sleep(10)  # Wait for ArangoDB to start
    yield
    # Cleanup
    subprocess.run(
        [
            "docker-compose",
            "-f",
            compose_file,
            "down",
        ],
        check=True,
    )


@pytest.fixture
def arango_connection():
    conn = Connection(username="root", password="", arangoURL="http://localhost:8529")
    return conn


@pytest.fixture
def test_database(arango_connection):
    # Create test database
    db_name = "test_db"
    if not arango_connection.hasDatabase(db_name):
        db = arango_connection.createDatabase(name=db_name)
    else:
        db = arango_connection[db_name]
    return db


@pytest.fixture
def test_collection(test_database):
    # Create test collection: a collection is like a table in a relational database
    coll_name = "test_collection"
    if not test_database.hasCollection(coll_name):
        collection = test_database.createCollection(name=coll_name)
    else:
        collection = test_database[coll_name]

    # Clear collection before use
    collection.truncate()

    return collection


def test_create_document(test_collection):
    # Create document: this is like inserting a row in a relational database
    doc = test_collection.createDocument()
    doc["name"] = "test"
    doc["value"] = 123
    doc.save()

    # Verify document exists
    retrieved_doc = test_collection.fetchDocument(doc._key)
    assert retrieved_doc["name"] == "test"
    assert retrieved_doc["value"] == 123

    # create document with explicit key
    doc = test_collection.createDocument()
    doc._key = "test_key"
    doc["name"] = "test"
    doc["value"] = 123
    doc.save()

    # Verify document exists
    retrieved_doc = test_collection.fetchDocument(doc._key)
    # verify that the key is the same
    assert retrieved_doc._key == "test_key"
    assert retrieved_doc["name"] == "test"
    assert retrieved_doc["value"] == 123

    # retrieve document using key, with dict-like access, equivalent to above
    retrieved_doc = test_collection["test_key"]
    assert retrieved_doc._key == "test_key"
    assert retrieved_doc["name"] == "test"
    assert retrieved_doc["value"] == 123


def test_query_documents(test_collection):
    # Create multiple documents
    for i in range(5):
        doc = test_collection.createDocument()
        doc["name"] = f"test_{i}"
        doc["value"] = i
        doc.save()

    # Query documents
    aql = "FOR doc IN @@collection FILTER doc.value >= 2 RETURN doc"
    bindVars = {"@collection": test_collection.name}
    result = test_collection.database.AQLQuery(aql, bindVars=bindVars, rawResults=True)

    assert len(result) == 3


def test_knowledge_graph(test_database):
    # Create collections for nodes and edges

    # Create collections for nodes and edges
    if not test_database.hasCollection("nodes"):
        nodes = test_database.createCollection(name="nodes")
    else:
        nodes = test_database["nodes"]

    if not test_database.hasCollection("relationships"):
        relationships = test_database.createCollection(
            name="relationships", className="Edges"
        )
    else:
        relationships = test_database["relationships"]

    nodes.truncate()
    relationships.truncate()

    # Create person nodes
    person1 = nodes.createDocument()
    person1["type"] = "person"
    person1["name"] = "John"
    person1.save()

    person2 = nodes.createDocument()
    person2["type"] = "person"
    person2["name"] = "Mary"
    person2.save()

    # Create location node
    location = nodes.createDocument()
    location["type"] = "location"
    location["name"] = "New York"
    location.save()

    # Create relationships
    lives_in = relationships.createDocument()
    lives_in._from = person1._id
    lives_in._to = location._id
    lives_in["type"] = "LIVES_IN"
    lives_in.save()

    knows = relationships.createDocument()
    knows._from = person1._id
    knows._to = person2._id
    knows["type"] = "KNOWS"
    knows.save()

    # Query relationships
    aql = """
    FOR p IN nodes
        FILTER p.type == 'person'
        LET lives = (
            FOR v, e IN 1..1 OUTBOUND p relationships
            FILTER e.type == 'LIVES_IN'
            RETURN v.name
        )
        RETURN {person: p.name, livesIn: lives[0]}
    """
    result = test_database.AQLQuery(aql, rawResults=True)

    assert len(result) == 2
    assert result[0]["person"] == "John"
    assert result[0]["livesIn"] == "New York"
    assert result[1]["person"] == "Mary"
    assert result[1]["livesIn"] is None


def test_update_document(test_collection):
    # Create initial document
    doc = test_collection.createDocument()
    doc["name"] = "test"
    doc["value"] = 100
    doc.save()

    # Update the document
    doc["value"] = 200
    doc.save()

    # Verify update
    retrieved = test_collection[doc._key]
    assert retrieved["value"] == 200


def test_delete_document(test_collection):
    # Create document
    doc = test_collection.createDocument()
    doc["name"] = "to_delete"
    doc.save()

    # Store the key before deletion
    doc_key = doc._key

    # Delete document
    doc.delete()

    # Verify deletion using DocumentNotFoundError
    with pytest.raises(DocumentNotFoundError):
        test_collection.fetchDocument(doc_key)


def test_batch_insert(test_collection):
    # Insert multiple documents via AQL
    docs = [
        {"name": "doc1", "value": 1},
        {"name": "doc2", "value": 2},
        {"name": "doc3", "value": 3},
    ]

    aql = "FOR doc IN @docs INSERT doc INTO @@collection"
    bindVars = {"@collection": test_collection.name, "docs": docs}
    test_collection.database.AQLQuery(aql, bindVars=bindVars)

    # Verify documents exist
    assert test_collection.count() == 3


def test_aggregate_query(test_collection):
    # Insert test data
    for i in range(5):
        doc = test_collection.createDocument()
        doc["category"] = "A" if i < 3 else "B"
        doc["value"] = i * 10
        doc.save()

    # Run aggregation query
    aql = """
    FOR doc IN @@collection
    COLLECT category = doc.category
    AGGREGATE total = SUM(doc.value), avg = AVG(doc.value)
    RETURN {category, total, avg}
    """

    result = test_collection.database.AQLQuery(
        aql, bindVars={"@collection": test_collection.name}, rawResults=True
    )

    assert len(result) == 2
    result = sorted(result, key=lambda x: x["category"])

    assert result[0]["category"] == "A"
    assert result[0]["total"] == 30
    assert result[0]["avg"] == 10

    assert result[1]["category"] == "B"
    assert result[1]["total"] == 70
    assert result[1]["avg"] == 35
</file>

<file path="tests/main/mcp/weather-server-python/pyproject.toml">
[project]
name = "weather"
version = "0.1.0"
description = "A simple MCP weather server"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "httpx>=0.28.1",
    "mcp[cli]>=1.2.0",
]

[build-system]
requires = [ "hatchling",]
build-backend = "hatchling.build"

[project.scripts]
weather = "weather:main"
</file>

<file path="tests/main/mcp/weather-server-python/README.md">
# A Simple MCP Weather Server written in Python

See the [Quickstart](https://modelcontextprotocol.io/quickstart) tutorial for more information.
</file>

<file path="tests/main/mcp/weather-server-python/weather.py">
from typing import Any, Dict, Optional

import httpx
from mcp.server.fastmcp import FastMCP

# Initialize FastMCP server
mcp = FastMCP("weather")

# Constants
NWS_API_BASE = "https://api.weather.gov"
USER_AGENT = "weather-app/1.0"


async def make_nws_request(url: str) -> dict[str, Any] | None:
    """Make a request to the NWS API with proper error handling."""
    headers = {"User-Agent": USER_AGENT, "Accept": "application/geo+json"}
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url, headers=headers, timeout=30.0)
            response.raise_for_status()
            return response.json()
        except Exception:
            return None


def make_nws_request_sync(url: str) -> Optional[Dict[str, Any]]:
    """Make a synchronous request to the NWS API with error handling.

    Args:
        url: Full URL for the NWS endpoint.

    Returns:
        Parsed JSON response as a dict, or None on failure.
    """
    headers = {
        "User-Agent": USER_AGENT,
        "Accept": "application/geo+json",
    }
    try:
        with httpx.Client(timeout=30.0) as client:
            response = client.get(url, headers=headers)
            response.raise_for_status()
            return response.json()
    except Exception:
        return None


def format_alert(feature: dict) -> str:
    """Format an alert feature into a readable string."""
    props = feature["properties"]
    return f"""
Event: {props.get('event', 'Unknown')}
Area: {props.get('areaDesc', 'Unknown')}
Severity: {props.get('severity', 'Unknown')}
Description: {props.get('description', 'No description available')}
Instructions: {props.get('instruction', 'No specific instructions provided')}
"""


@mcp.tool()
async def get_alerts_async(state: str) -> str:
    """Get weather alerts for a US state.

    Args:
        state: Two-letter US state code (e.g. CA, NY)
    """
    url = f"{NWS_API_BASE}/alerts/active/area/{state}"
    data = await make_nws_request(url)

    if not data or "features" not in data:
        return "Unable to fetch alerts or no alerts found."

    if not data["features"]:
        return "No active alerts for this state."

    alerts = [format_alert(feature) for feature in data["features"]]
    return "\n---\n".join(alerts)


@mcp.tool()
def get_alerts(state: str) -> str:
    """Get weather alerts for a US state (synchronous version).

    Args:
        state: Two-letter US state code (e.g. "CA", "NY").

    Returns:
        A formatted string of active alerts, or a message if none/failure.
    """
    url = f"{NWS_API_BASE}/alerts/active/area/{state}"
    data: Optional[Dict[str, Any]] = make_nws_request_sync(url)

    if not data or "features" not in data:
        return "Unable to fetch alerts or no alerts found."

    features = data["features"]
    if not features:
        return "No active alerts for this state."

    alerts = [format_alert(f) for f in features]
    return "\n---\n".join(alerts)


@mcp.tool()
async def get_forecast(latitude: float, longitude: float) -> str:
    """Get weather forecast for a location.

    Args:
        latitude: Latitude of the location
        longitude: Longitude of the location
    """
    # First get the forecast grid endpoint
    points_url = f"{NWS_API_BASE}/points/{latitude},{longitude}"
    points_data = await make_nws_request(points_url)

    if not points_data:
        return "Unable to fetch forecast data for this location."

    # Get the forecast URL from the points response
    forecast_url = points_data["properties"]["forecast"]
    forecast_data = await make_nws_request(forecast_url)

    if not forecast_data:
        return "Unable to fetch detailed forecast."

    # Format the periods into a readable forecast
    periods = forecast_data["properties"]["periods"]
    forecasts = []
    for period in periods[:5]:  # Only show next 5 periods
        forecast = f"""
{period['name']}:
Temperature: {period['temperature']}°{period['temperatureUnit']}
Wind: {period['windSpeed']} {period['windDirection']}
Forecast: {period['detailedForecast']}
"""
        forecasts.append(forecast)

    return "\n---\n".join(forecasts)


if __name__ == "__main__":
    # Initialize and run the server
    mcp.run(transport="stdio")
</file>

<file path="tests/main/sql_chat/test_sql_chat_agent.py">
import pytest

from langroid.agent.task import Task
from langroid.exceptions import LangroidImportError
from langroid.language_models.openai_gpt import OpenAIGPTConfig

try:
    from sqlalchemy import Column, ForeignKey, Integer, String, create_engine
    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy.orm import Session, relationship, sessionmaker
except ImportError as e:
    raise LangroidImportError(extra="sql", error=str(e))

from langroid.agent.special.sql.sql_chat_agent import (
    SQLChatAgent,
    SQLChatAgentConfig,
)
from langroid.utils.configuration import Settings, set_global

Base = declarative_base()


# Define your classes
class Department(Base):
    __tablename__ = "departments"

    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)

    employees = relationship("Employee", back_populates="department")


class Employee(Base):
    __tablename__ = "employees"

    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    department_id = Column(Integer, ForeignKey("departments.id"), nullable=False)

    department = relationship("Department", back_populates="employees")
    sales = relationship("Sale", back_populates="employee")


class Sale(Base):
    __tablename__ = "sales"

    id = Column(Integer, primary_key=True)
    amount = Column(Integer, nullable=False)
    employee_id = Column(Integer, ForeignKey("employees.id"), nullable=False)

    employee = relationship("Employee", back_populates="sales")


@pytest.fixture
def mock_db_session() -> Session:
    # Create an in-memory SQLite database
    engine = create_engine("sqlite:///:memory:", echo=False)
    Base.metadata.create_all(engine)

    Session = sessionmaker(bind=engine)
    session = Session()

    # Insert data
    sales_dept = Department(id=1, name="Sales")
    marketing_dept = Department(id=2, name="Marketing")

    alice = Employee(id=1, name="Alice", department=sales_dept)
    bob = Employee(id=2, name="Bob", department=marketing_dept)

    sale1 = Sale(id=1, amount=100, employee=alice)
    sale2 = Sale(id=2, amount=500, employee=bob)

    session.add(sales_dept)
    session.add(marketing_dept)
    session.add(alice)
    session.add(bob)
    session.add(sale1)
    session.add(sale2)

    session.commit()

    yield session  # this is where the fixture's value comes from

    session.close()


@pytest.fixture
def mock_context() -> dict:
    return {
        "departments": {
            "description": "The 'departments' table holds details about the various "
            + "departments. It relates to the 'employees' table via a foreign key "
            + "in the 'employees' table.",
            "columns": {
                "id": "A unique identifier for a department. This ID is used as a "
                + "foreign key in the 'employees' table.",
                "name": "The name of the department.",
            },
        },
        "employees": {
            "description": "The 'employees' table contains information about the "
            + "employees. It relates to the 'departments' and 'sales' tables via "
            + "foreign keys.",
            "columns": {
                "id": "A unique identifier for an employee. This ID is used as a"
                + " foreign key in the 'sales' table.",
                "name": "The name of the employee.",
                "department_id": "The ID of the department the employee belongs to. "
                + "This is a foreign key referencing the 'id' in the 'departments'"
                + " table.",
            },
        },
        "sales": {
            "description": "The 'sales' table keeps a record of all sales made by "
            + "employees. It relates to the 'employees' table via a foreign key.",
            "columns": {
                "id": "A unique identifier for a sale.",
                "amount": "The amount of the sale.",
                "employee_id": "The ID of the employee who made the sale. This is a "
                + "foreign key referencing the 'id' in the 'employees' table.",
            },
        },
    }


def _test_sql_chat_agent(
    fn_api: bool,
    tools_api: bool,
    json_schema: bool,
    db_session: Session,
    context: dict,
    prompt: str,
    answer: str,
    use_schema_tools: bool = False,
    turns: int = 18,
    addressing_prefix: str = "",
) -> None:
    """
    Test the SQLChatAgent with a uri as data source
    """
    agent_config = SQLChatAgentConfig(
        name="SQLChatAgent",
        database_session=db_session,
        context_descriptions=context,
        use_tools=not fn_api,
        use_functions_api=fn_api,
        use_tools_api=tools_api,
        use_schema_tools=use_schema_tools,
        addressing_prefix=addressing_prefix,
        chat_mode=False,
        use_helper=True,
        llm=OpenAIGPTConfig(supports_json_schema=json_schema),
    )
    agent = SQLChatAgent(agent_config)
    task = Task(agent, interactive=False)

    # run for enough turns to handle LLM deviations
    # 0: user question
    # 1: LLM response via fun-call/tool
    # 2: agent response, handling the fun-call/tool
    # ... so on
    result = task.run(prompt, turns=turns)

    assert answer.lower() in result.content.lower()


@pytest.mark.parametrize("fn_api", [False, True])
@pytest.mark.parametrize("tools_api", [False, True])
@pytest.mark.parametrize("json_schema", [False, True])
@pytest.mark.parametrize(
    "query,answer",
    [
        ("What is the total amount of sales?", "600"),
        ("How many employees are in Sales?", "1"),
        ("How many departments are there?", "2"),
    ],
)
def test_sql_chat_agent_query(
    test_settings: Settings,
    fn_api,
    tools_api,
    json_schema,
    mock_db_session,
    mock_context,
    query,
    answer,
):
    set_global(test_settings)
    # with context descriptions:
    _test_sql_chat_agent(
        fn_api=fn_api,
        tools_api=tools_api,
        db_session=mock_db_session,
        json_schema=json_schema,
        context=mock_context,
        prompt=query,
        answer=answer,
    )

    # without context descriptions:
    _test_sql_chat_agent(
        fn_api=fn_api,
        tools_api=tools_api,
        json_schema=json_schema,
        db_session=mock_db_session,
        context={},
        prompt=query,
        answer=answer,
    )


@pytest.mark.xfail(
    reason="May fail sometimes",
    strict=False,
    run=True,
)
@pytest.mark.parametrize("fn_api", [True, False])
@pytest.mark.parametrize("tools_api", [True, False])
@pytest.mark.parametrize("json_schema", [False, True])
def test_sql_chat_db_update(
    test_settings: Settings,
    fn_api,
    tools_api,
    json_schema,
    mock_db_session,
    mock_context,
):
    set_global(test_settings)
    # with context descriptions:
    _test_sql_chat_agent(
        fn_api=fn_api,
        tools_api=tools_api,
        json_schema=json_schema,
        db_session=mock_db_session,
        context=mock_context,
        prompt="Update Bob's sale amount to 900",
        answer="900",
    )

    _test_sql_chat_agent(
        fn_api=fn_api,
        tools_api=tools_api,
        json_schema=json_schema,
        db_session=mock_db_session,
        context=mock_context,
        prompt="How much did Bob sell?",
        answer="900",
    )

    # without context descriptions:
    _test_sql_chat_agent(
        fn_api=fn_api,
        tools_api=tools_api,
        json_schema=json_schema,
        db_session=mock_db_session,
        context={},
        prompt="Update Bob's sale amount to 9100",
        answer="9100",
    )

    _test_sql_chat_agent(
        fn_api=fn_api,
        tools_api=tools_api,
        json_schema=json_schema,
        db_session=mock_db_session,
        context={},
        prompt="How much did Bob sell?",
        answer="9100",
    )


@pytest.mark.parametrize("tools_api", [True, False])
@pytest.mark.parametrize("fn_api", [True, False])
@pytest.mark.parametrize("json_schema", [False, True])
@pytest.mark.parametrize(
    "query,answer",
    [
        ("How many departments are there?", "2"),
    ],
)
def test_sql_schema_tools(
    test_settings: Settings,
    fn_api,
    tools_api,
    json_schema,
    mock_db_session,
    mock_context,
    query,
    answer,
):
    set_global(test_settings)
    # with schema tools:
    _test_sql_chat_agent(
        fn_api=fn_api,
        tools_api=tools_api,
        json_schema=json_schema,
        db_session=mock_db_session,
        context=mock_context,
        prompt=query,
        answer=answer,
        use_schema_tools=True,
    )
</file>

<file path="tests/main/test_agent.py">
import asyncio

import pytest

import langroid as lr
import langroid.language_models as lm


class CustomAgentConfig(lr.AgentConfig):
    max_tokens: int = 10000
    llm = lm.OpenAIGPTConfig(
        cache_config=lr.cachedb.redis_cachedb.RedisCacheConfig(fake=False),
    )


def test_agent(test_settings: lr.utils.configuration.Settings):
    """
    Test whether the combined configs work as expected.
    """
    lr.utils.configuration.set_global(test_settings)
    agent_config = CustomAgentConfig()
    agent = lr.Agent(agent_config)
    response = agent.llm_response(
        "what is the capital of France?"
    )  # direct LLM question
    assert "Paris" in response.content

    with lr.language_models.base.StreamingIfAllowed(agent.llm, False):
        response = agent.llm_response("what is the capital of France?")
    assert "Paris" in response.content


@pytest.mark.asyncio
async def test_agent_async(test_settings: lr.utils.configuration.Settings):
    """
    Test whether the combined configs work as expected,
    with async calls.
    """
    lr.utils.configuration.set_global(test_settings)
    agent_config = CustomAgentConfig()
    agent = lr.Agent(agent_config)
    response = await agent.llm_response_async("what is the capital of France?")
    assert "Paris" in response.content

    with lr.language_models.base.StreamingIfAllowed(agent.llm, False):
        response = await agent.llm_response_async("what is the capital of France?")
    assert "Paris" in response.content


@pytest.mark.asyncio
async def test_agent_async_concurrent(test_settings: lr.utils.configuration.Settings):
    lr.utils.configuration.set_global(test_settings)
    agent_config = CustomAgentConfig()
    agent = lr.Agent(agent_config)
    # Async calls should work even if the agent is not async

    N = 3
    questions = ["1+" + str(i) for i in range(N)]
    expected_answers = [str(i + 1) for i in range(N)]
    answers = await asyncio.gather(
        *(agent.llm_response_async(question) for question in questions)
    )
    assert len(answers) == len(questions)
    for e in expected_answers:
        assert any(e in a.content for a in answers)
</file>

<file path="tests/main/test_arangodb_chat_agent.py">
import os
import subprocess
import time

import pytest
from adb_cloud_connector import get_temp_credentials
from arango.client import ArangoClient
from arango_datasets import Datasets

import langroid as lr
from langroid.agent.special.arangodb.arangodb_agent import (
    ArangoChatAgent,
    ArangoChatAgentConfig,
    ArangoSettings,
)

ARANGO_PASSWORD = "rootpassword"


def wait_for_arango(max_attempts=30, delay=1):
    """Try to connect to ArangoDB until it's ready"""
    client = None
    for attempt in range(max_attempts):
        try:
            client = ArangoClient(hosts="http://localhost:8529")
            sys_db = client.db("_system", username="root", password=ARANGO_PASSWORD)
            sys_db.version()  # test connection
            print(f"ArangoDB ready after {attempt + 1} attempts")
            return True
        except Exception:
            print(f"Waiting for ArangoDB... ({attempt + 1}/{max_attempts})")
            time.sleep(delay)
    raise TimeoutError("ArangoDB failed to start")


COMPOSE_FILE = os.path.join(os.path.dirname(__file__), "docker-compose-arango.yml")


def docker_setup_arango():
    subprocess.run(
        ["docker-compose", "-f", COMPOSE_FILE, "down", "--remove-orphans"],
        check=True,
    )
    subprocess.run(
        ["docker-compose", "-f", COMPOSE_FILE, "up", "-d"],
        check=True,
    )


def docker_teardown_arango():
    subprocess.run(
        ["docker-compose", "-f", COMPOSE_FILE, "down"],
        check=True,
    )


@pytest.fixture(scope="session", autouse=True)
def setup_arango():
    if not os.getenv("CI"):
        docker_setup_arango()
    wait_for_arango()
    yield
    if not os.getenv("CI"):
        docker_teardown_arango()


@pytest.fixture
def arango_client():
    client = ArangoClient(hosts="http://localhost:8529")
    return client


@pytest.fixture
def test_database(arango_client):
    sys_db = arango_client.db("_system", username="root", password=ARANGO_PASSWORD)
    db_name = "test_db"
    if not sys_db.has_database(db_name):
        sys_db.create_database(db_name)
    return arango_client.db(db_name, username="root", password=ARANGO_PASSWORD)


@pytest.fixture
def arango_movie_agent(setup_arango, test_database):

    # Create graph
    graph_name = "MovieGraph"
    ArangoChatAgent.cleanup_graph_db(test_database)

    graph = test_database.create_graph(graph_name)

    # Create collections with the graph
    actors = graph.create_vertex_collection("actors")
    movies = graph.create_vertex_collection("movies")
    acted_in = graph.create_edge_definition(
        edge_collection="acted_in",
        from_vertex_collections=["actors"],
        to_vertex_collections=["movies"],
    )

    # Sample data
    actor_data = [
        {"_key": "meryl", "name": "Meryl Streep", "age": 74, "oscars": 3},
        {"_key": "tom", "name": "Tom Hanks", "age": 67, "oscars": 2},
        {"_key": "leo", "name": "Leonardo DiCaprio", "age": 48, "oscars": 1},
        {"_key": "viola", "name": "Viola Davis", "age": 58, "oscars": 1},
    ]

    movie_data = [
        {
            "_key": "devil",
            "title": "Devil Wears Prada",
            "year": 2006,
            "genre": "Comedy",
            "rating": 7.7,
        },
        {
            "_key": "forrest",
            "title": "Forrest Gump",
            "year": 1994,
            "genre": "Drama",
            "rating": 8.8,
        },
        {
            "_key": "inception",
            "title": "Inception",
            "year": 2010,
            "genre": "Sci-Fi",
            "rating": 8.8,
        },
        {
            "_key": "fences",
            "title": "Fences",
            "year": 2016,
            "genre": "Drama",
            "rating": 7.2,
        },
    ]

    relationship_data = [
        {"_from": "actors/meryl", "_to": "movies/devil"},
        {"_from": "actors/tom", "_to": "movies/forrest"},
        {"_from": "actors/leo", "_to": "movies/inception"},
        {"_from": "actors/viola", "_to": "movies/fences"},
    ]

    try:
        actors.import_bulk(actor_data, on_duplicate="replace")
        movies.import_bulk(movie_data, on_duplicate="replace")
        acted_in.import_bulk(relationship_data, on_duplicate="replace")
    except Exception as e:
        print(f"Error inserting data: {e}")
        raise

    agent = ArangoChatAgent(
        ArangoChatAgentConfig(
            arango_settings=ArangoSettings(
                url="http://localhost:8529",
                username="root",
                password=ARANGO_PASSWORD,
                database="test_db",
            ),
            prepopulate_schema=True,
            use_functions_api=False,
            use_tools=True,
            database_created=True,
        )
    )

    yield agent

    ArangoChatAgent.cleanup_graph_db(test_database)


@pytest.mark.parametrize(
    "english_query,aql_query,expected",
    [
        (
            "What movies has Tom Hanks acted in?",
            """
        FOR actor IN actors
            FILTER actor.name == 'Tom Hanks'
            FOR v, e IN 1..1 OUTBOUND actor acted_in
                RETURN v.title
        """,
            "Forrest Gump",
        ),
        (
            "Who starred in Forrest Gump?",
            """
        FOR movie IN movies
            FILTER movie.title == 'Forrest Gump'
            FOR v, e IN 1..1 INBOUND movie acted_in
                RETURN v.name
        """,
            "Tom Hanks",
        ),
    ],
)
def test_retrieval(arango_movie_agent, english_query, aql_query, expected):
    # Test via direct AQL
    aql_result = arango_movie_agent.read_query(aql_query)
    assert expected.lower() in aql_result.data[0].lower()

    # Test via natural language
    task = lr.Task(arango_movie_agent, interactive=False)
    nl_result = task.run(
        f"""
        Use the `aql_retrieval_tool` to find the answer to this question:
        {english_query}
        """
    )
    assert expected.lower() in nl_result.content.lower()


def test_write_query(arango_movie_agent):
    # Write a new actor
    write_result = arango_movie_agent.write_query(
        """
        INSERT { 
            _key: 'morgan', 
            name: 'Morgan Freeman', 
            age: 86, 
            oscars: 1 
        } INTO actors
        """
    )
    assert write_result.success

    # Verify the write
    read_result = arango_movie_agent.read_query(
        "FOR a IN actors FILTER a._key == 'morgan' RETURN a.name"
    )
    assert "Morgan Freeman" in read_result.data[0]


@pytest.fixture
def number_kg_agent(setup_arango, test_database):
    graph_name = "NumberKG"
    ArangoChatAgent.cleanup_graph_db(test_database)

    graph = test_database.create_graph(graph_name)
    numbers = graph.create_vertex_collection("numbers")
    divides = graph.create_edge_definition(
        edge_collection="divides",
        from_vertex_collections=["numbers"],
        to_vertex_collections=["numbers"],
    )

    # Create numbers
    number_list = [2, 3, 4, 6, 12]
    numbers.import_bulk([{"_key": f"n{i}", "value": i} for i in number_list])

    # Create edges based on divisibility
    edge_data = [
        {"_key": f"{i}_{j}", "_from": f"numbers/n{i}", "_to": f"numbers/n{j}"}
        for i in number_list
        for j in number_list
        if i < j and j % i == 0  # i divides j
    ]
    divides.import_bulk(edge_data)

    plus4 = graph.create_edge_definition(
        edge_collection="plus4",
        from_vertex_collections=["numbers"],
        to_vertex_collections=["numbers"],
    )

    # Add plus4 edges:
    plus4_edges = [
        {"_key": f"plus4_{i}_{i+4}", "_from": f"numbers/n{i}", "_to": f"numbers/n{i+4}"}
        for i in number_list
        if i + 4 in number_list
    ]
    plus4.import_bulk(plus4_edges)

    agent = ArangoChatAgent(
        config=ArangoChatAgentConfig(
            arango_settings=ArangoSettings(
                url="http://localhost:8529",
                username="root",
                password=ARANGO_PASSWORD,
                database="test_db",
            ),
            max_tries=20,
            use_tools=True,
            use_functions_api=False,
            prepopulate_schema=False,
            database_created=True,
        )
    )

    yield agent
    ArangoChatAgent.cleanup_graph_db(test_database)


@pytest.mark.fallback
@pytest.mark.flaky(reruns=2)
@pytest.mark.parametrize(
    "english_query,aql_query,expected",
    [
        (
            "What numbers divide 12?",
            """
        FOR v IN 1..1 INBOUND 'numbers/n12' divides
            RETURN v.value
        """,
            [2, 3, 4, 6],
        ),
        (
            "What numbers are divided by 2?",
            """
        FOR v IN 1..1 OUTBOUND 'numbers/n2' divides
            RETURN v.value
        """,
            [4, 6, 12],
        ),
        (
            "what is a number that 2 divides and is plus4 from 2?",
            """
          FOR v IN 1..1 OUTBOUND 'numbers/n2' divides
              FILTER v._id IN (
                  FOR v2 IN 1..1 OUTBOUND 'numbers/n2' plus4
                      RETURN v2._id
              )
              RETURN v.value
          """,
            [6],
        ),
    ],
)
def test_number_relationships(
    number_kg_agent,
    english_query,
    aql_query,
    expected,
):
    # Test via direct AQL
    aql_result = number_kg_agent.read_query(aql_query)
    assert sorted(aql_result.data) == sorted(expected)

    # Test via natural language
    task = lr.Task(number_kg_agent, interactive=False)
    nl_result = task.run(
        f"""
        Answer the following using the graph-db whose schema was provided above,
        using the appropriate AQL tools provided.
        DO NOT use your own knowledge!!
        {english_query}
        """
    )
    assert all(str(num) in nl_result.content for num in expected)


def test_db_schema(number_kg_agent):
    schema_data = number_kg_agent.arango_schema_tool(None)

    # Check schema structure
    assert isinstance(schema_data, dict)
    assert "Graph Schema" in schema_data
    assert "Collection Schema" in schema_data

    # Check graph schema
    graph_schema = schema_data["Graph Schema"]
    assert isinstance(graph_schema, list)
    assert len(graph_schema) == 1
    assert graph_schema[0]["graph_name"] == "NumberKG"

    # Check collection schema
    collection_schema = schema_data["Collection Schema"]
    assert isinstance(collection_schema, list)
    assert len(collection_schema) == 3

    # Get collection info
    numbers_coll = next(
        c for c in collection_schema if c["collection_name"] == "numbers"
    )
    divides_coll = next(
        c for c in collection_schema if c["collection_name"] == "divides"
    )
    plus4_coll = next(c for c in collection_schema if c["collection_name"] == "plus4")

    # Verify numbers collection properties
    number_props = numbers_coll["document_properties"]
    assert any(p["name"] == "_key" for p in number_props)
    assert any(p["name"] == "value" for p in number_props)

    # Verify divides collection properties
    edge_props = divides_coll["edge_properties"]
    assert any(p["name"] == "_from" for p in edge_props)
    assert any(p["name"] == "_to" for p in edge_props)
    assert any(p["name"] == "_key" for p in edge_props)

    # Verify plus4 collection properties
    edge_props = plus4_coll["edge_properties"]
    assert any(p["name"] == "_from" for p in edge_props)
    assert any(p["name"] == "_to" for p in edge_props)
    assert any(p["name"] == "_key" for p in edge_props)


def test_multiple_relationships(number_kg_agent):
    # Query to verify divides relationships
    divides_query = """
    FOR p IN numbers
        FILTER p.value == 2
        FOR v, e IN 1..1 OUTBOUND p divides
        RETURN { 
            relationship_type: 'divides',
            connected_to: v.value 
        }
    """
    divides_result = number_kg_agent.read_query(divides_query)
    divides_values = [r["connected_to"] for r in divides_result.data]
    assert set(divides_values) == {4, 6, 12}

    # Query to verify plus4 relationships
    plus4_query = """
    FOR p IN numbers
        FILTER p.value == 2
        FOR v, e IN 1..1 OUTBOUND p plus4
        RETURN {
            relationship_type: 'plus4',
            connected_to: v.value
        }
    """
    plus4_result = number_kg_agent.read_query(plus4_query)
    plus4_values = [r["connected_to"] for r in plus4_result.data]
    assert set(plus4_values) == {6}


def test_arangodb_cloud_datasets():
    connection = get_temp_credentials(tutorialName="langroid")
    client = ArangoClient(hosts=connection["url"])

    db = client.db(
        connection["dbName"],
        connection["username"],
        connection["password"],
        verify=True,
    )

    datasets = Datasets(db)
    assert len(datasets.list_datasets()) > 0
    DATASET = "IMDB_X"
    info = datasets.dataset_info(DATASET)
    assert info["label"] == DATASET


@pytest.fixture(scope="session")
def arango_agent_from_db():
    """Arango Agent created from a cloud arango dataset"""

    connection = get_temp_credentials(tutorialName="langroid")
    client = ArangoClient(hosts=connection["url"])

    db = client.db(
        connection["dbName"],
        connection["username"],
        connection["password"],
        verify=True,
    )

    ArangoChatAgent.cleanup_graph_db(db)

    datasets = Datasets(db)
    DATASET = "GAME_OF_THRONES"
    info = datasets.dataset_info(DATASET)
    datasets.load(DATASET, batch_size=100, preserve_existing=False)
    print("Info of loaded db: ", info)

    agent = ArangoChatAgent(
        ArangoChatAgentConfig(
            arango_settings=ArangoSettings(
                db=db,
                client=client,
            ),
            prepopulate_schema=True,
            use_functions_api=True,
            use_tools=False,
            database_created=True,
        )
    )

    yield agent
    ArangoChatAgent.cleanup_graph_db(db)


@pytest.mark.parametrize(
    "query,expected",
    [
        ("Who are the two youngest characters?", "Bran Stark, Arya Stark"),
        ("Are Bran Stark and Arya Stark siblings?", "yes"),
        ("Who are Bran Stark's grandparents?", "Rickard, Lyarra"),
        ("What is the age difference between Rickard Stark and Arya Stark?", "49"),
        ("What is the average age of all Stark characters?", "31"),
        ("Does Bran Stark have a dead parent? Say yes or no", "yes"),
    ],
)
def test_GOT_queries(arango_agent_from_db, query, expected):
    # Test natural language query about a popular movie
    task = lr.Task(
        arango_agent_from_db,
        interactive=False,
        restart=True,
    )
    result = task.run(query)

    exp_answers = [r.strip().lower() for r in expected.split(",")]
    assert all(exp in result.content.lower() for exp in exp_answers)
</file>

<file path="tests/main/test_arangodb.py">
import os
import subprocess
import time

import pytest
from arango import ArangoClient

COMPOSE_FILE = os.path.join(os.path.dirname(__file__), "docker-compose-arango.yml")


def docker_setup_arango():
    # Start container using docker-compose
    subprocess.run(
        [
            "docker-compose",
            "-f",
            COMPOSE_FILE,
            "up",
            "-d",
        ],
        check=True,
    )


def docker_teardown_arango():
    # Cleanup
    subprocess.run(
        [
            "docker-compose",
            "-f",
            COMPOSE_FILE,
            "down",
        ],
        check=True,
    )


@pytest.fixture(scope="session", autouse=True)
def setup_arango():
    if not os.getenv("CI"):
        docker_setup_arango()
    time.sleep(10)
    yield
    if not os.getenv("CI"):
        docker_teardown_arango()


@pytest.fixture
def arango_client():
    client = ArangoClient(hosts="http://localhost:8529")
    return client


@pytest.fixture
def test_database(arango_client):
    sys_db = arango_client.db("_system", username="root", password="rootpassword")
    # Create test database
    db_name = "test_db"
    if not sys_db.has_database(db_name):
        sys_db.create_database(db_name)
    return arango_client.db(db_name, username="root", password="rootpassword")


@pytest.fixture
def test_collection(test_database):
    # Create test collection: a collection is like a table in a relational database
    coll_name = "test_collection"
    if not test_database.has_collection(coll_name):
        collection = test_database.create_collection(name=coll_name)
    else:
        collection = test_database.collection(coll_name)

    # Clear collection before use
    collection.truncate()

    return collection


def test_create_document(test_collection):
    # Create document: this is like inserting a row in a relational database
    doc = {"name": "test", "value": 123}
    result = test_collection.insert(doc)
    doc_key = result["_key"]

    # Verify document exists
    retrieved_doc = test_collection.get(doc_key)
    assert retrieved_doc["name"] == "test"
    assert retrieved_doc["value"] == 123

    # create document with explicit key
    doc = {"_key": "test_key", "name": "test", "value": 123}
    test_collection.insert(doc)

    # Verify document exists
    retrieved_doc = test_collection.get("test_key")
    # verify that the key is the same
    assert retrieved_doc["_key"] == "test_key"
    assert retrieved_doc["name"] == "test"
    assert retrieved_doc["value"] == 123

    # retrieve document using get, equivalent to above
    retrieved_doc = test_collection.get("test_key")
    assert retrieved_doc["_key"] == "test_key"
    assert retrieved_doc["name"] == "test"
    assert retrieved_doc["value"] == 123


def test_query_documents(test_collection, test_database):
    # Create multiple documents
    for i in range(5):
        doc = {"name": f"test_{i}", "value": i}
        test_collection.insert(doc)

    # Query documents
    aql = "FOR doc IN @@collection FILTER doc.value >= 2 RETURN doc"
    bind_vars = {"@collection": test_collection.name}
    cursor = test_database.aql.execute(aql, bind_vars=bind_vars)
    result = [doc for doc in cursor]

    assert len(result) == 3


def test_knowledge_graph(test_database):
    # Create collections for nodes and edges
    if not test_database.has_collection("nodes"):
        nodes = test_database.create_collection(name="nodes")
    else:
        nodes = test_database.collection("nodes")

    if not test_database.has_collection("relationships"):
        relationships = test_database.create_collection(name="relationships", edge=True)
    else:
        relationships = test_database.collection("relationships")

    nodes.truncate()
    relationships.truncate()

    # Create person nodes
    person1 = nodes.insert({"type": "person", "name": "John"})

    person2 = nodes.insert({"type": "person", "name": "Mary"})

    # Create location node
    location = nodes.insert({"type": "location", "name": "New York"})

    # Create relationships
    relationships.insert(
        {
            "_from": f"nodes/{person1['_key']}",
            "_to": f"nodes/{location['_key']}",
            "type": "LIVES_IN",
        }
    )

    relationships.insert(
        {
            "_from": f"nodes/{person1['_key']}",
            "_to": f"nodes/{person2['_key']}",
            "type": "KNOWS",
        }
    )

    # Query relationships
    aql = """
    FOR p IN nodes
        FILTER p.type == 'person'
        LET lives = (
            FOR v, e IN 1..1 OUTBOUND p relationships
            FILTER e.type == 'LIVES_IN'
            RETURN v.name
        )
        RETURN {person: p.name, livesIn: lives[0]}
    """
    cursor = test_database.aql.execute(aql)
    result = [doc for doc in cursor]

    assert len(result) == 2
    assert result[0]["person"] == "John"
    assert result[0]["livesIn"] == "New York"
    assert result[1]["person"] == "Mary"
    assert result[1]["livesIn"] is None


def test_graph_creation(test_database):
    # Create collections for graph
    if not test_database.has_collection("person_vertices"):
        person_vertices = test_database.create_collection("person_vertices")
    else:
        person_vertices = test_database.collection("person_vertices")

    if not test_database.has_collection("friendship_edges"):
        friendship_edges = test_database.create_collection(
            "friendship_edges", edge=True
        )
    else:
        friendship_edges = test_database.collection("friendship_edges")

    person_vertices.truncate()
    friendship_edges.truncate()

    # Create graph
    graph_name = "social_network"
    if test_database.has_graph(graph_name):
        test_database.delete_graph(graph_name)

    edge_definition = [
        {
            "edge_collection": "friendship_edges",
            "from_vertex_collections": ["person_vertices"],
            "to_vertex_collections": ["person_vertices"],
        }
    ]

    graph = test_database.create_graph(graph_name, edge_definitions=edge_definition)

    # Add vertices
    graph.vertex_collection("person_vertices").insert_many(
        [
            {"_key": "alice", "name": "Alice", "age": 25},
            {"_key": "bob", "name": "Bob", "age": 30},
            {"_key": "charlie", "name": "Charlie", "age": 35},
        ]
    )

    # Add edges
    graph.edge_collection("friendship_edges").insert_many(
        [
            {
                "_from": "person_vertices/alice",
                "_to": "person_vertices/bob",
                "since": 2020,
            },
            {
                "_from": "person_vertices/bob",
                "_to": "person_vertices/charlie",
                "since": 2021,
            },
        ]
    )

    # Test traversal
    result = test_database.aql.execute(
        """
        FOR v, e, p IN 1..2 OUTBOUND 'person_vertices/alice' 
        GRAPH 'social_network'
        RETURN {vertex: v.name, distance: LENGTH(p.edges)}
    """
    )

    friends = [doc for doc in result]
    assert len(friends) == 2
    assert friends[0]["vertex"] == "Bob"
    assert friends[0]["distance"] == 1
    assert friends[1]["vertex"] == "Charlie"
    assert friends[1]["distance"] == 2

    # Test graph properties
    assert graph.name == graph_name
    assert len(graph.edge_definitions()) == 1
    assert graph.has_vertex_collection("person_vertices")
    assert graph.has_edge_definition("friendship_edges")


def test_update_document(test_collection):
    # Create initial document
    doc = {"name": "test", "value": 100}
    result = test_collection.insert(doc)
    doc_key = result["_key"]

    # Update the document
    new_doc = {"_key": doc_key, "value": 200}
    test_collection.update(new_doc)

    # Verify update
    retrieved = test_collection.get(doc_key)
    assert retrieved["value"] == 200


def test_delete_document(test_collection):
    # Create document
    doc = {"name": "to_delete"}
    result = test_collection.insert(doc)
    doc_key = result["_key"]

    # Delete document
    test_collection.delete(doc_key)

    # Verify get returns None
    result = test_collection.get(doc_key)
    assert result is None


def test_batch_insert(test_collection, test_database):
    # Insert multiple documents via AQL
    docs = [
        {"name": "doc1", "value": 1},
        {"name": "doc2", "value": 2},
        {"name": "doc3", "value": 3},
    ]

    aql = "FOR doc IN @docs INSERT doc INTO @@collection"
    bind_vars = {"@collection": test_collection.name, "docs": docs}
    test_database.aql.execute(aql, bind_vars=bind_vars)

    # Verify documents exist
    assert test_collection.count() == 3


def test_aggregate_query(test_collection, test_database):
    # Insert test data
    for i in range(5):
        doc = {"category": "A" if i < 3 else "B", "value": i * 10}
        test_collection.insert(doc)

    # Run aggregation query
    aql = """
    FOR doc IN @@collection
    COLLECT category = doc.category
    AGGREGATE total = SUM(doc.value), avg = AVG(doc.value)
    RETURN {category, total, avg}
    """

    bind_vars = {"@collection": test_collection.name}
    cursor = test_database.aql.execute(aql, bind_vars=bind_vars)
    result = [doc for doc in cursor]

    assert len(result) == 2
    result = sorted(result, key=lambda x: x["category"])

    assert result[0]["category"] == "A"
    assert result[0]["total"] == 30
    assert result[0]["avg"] == 10

    assert result[1]["category"] == "B"
    assert result[1]["total"] == 70
    assert result[1]["avg"] == 35
</file>

<file path="tests/main/test_async_handlers.py">
import asyncio
import json
import time
from typing import Optional

import pytest

from langroid.agent.batch import run_batch_task_gen
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocument
from langroid.agent.special.doc_chat_agent import apply_nest_asyncio
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import DoneTool
from langroid.language_models.mock_lm import MockLMConfig
from langroid.utils.constants import DONE

apply_nest_asyncio()


def echo_response(x: str) -> str:
    return x


async def echo_response_async(x: str) -> str:
    return x


class _TestAsyncToolHandlerConfig(ChatAgentConfig):
    llm = MockLMConfig(
        response_dict={
            "sleep 1": 'TOOL sleep: {"seconds": "0"}',
            "sleep 2": 'TOOL sleep: {"seconds": "1"}',
            "sleep 3": 'TOOL sleep: {"seconds": "2"}',
            "sleep 4": 'TOOL sleep: {"seconds": "3"}',
            "sleep 5": 'TOOL sleep: {"seconds": "4"}',
        },
    )


async def scheduler(events: dict[int, asyncio.Event], done_event: asyncio.Event):
    """
    Implicitly forces sequential scheduling (in the order of the keys
    of `events`) via asyncio Events. Each scheduled task must first wait
    on its corresponding Event and signal completion by setting `done_event`
    on completion.
    """
    turns = list(sorted(list(events.items()), key=lambda item: item[0]))

    for _, wait in turns:
        wait.set()
        await done_event.wait()
        # Allow the task which signaled completion to exit
        await asyncio.sleep(0.01)
        done_event.clear()


@pytest.mark.parametrize("stop_on_first", [False, True])
@pytest.mark.asyncio
async def test_async_tool_handler(
    stop_on_first: bool,
):
    """
    Test that async tool handlers are working.

    Define an agent with a "sleep" tool that sleeps for specified number
    of seconds. Implement both sync and async handler for this tool.
    Create a batch of 5 tasks that run the "sleep" tool with decreasing
    sleep times: 4, 3, 2, 1, 0 seconds. Sleep is simulated by scheduling
    the tasks from shortest to longest sleep times.
    Run these tasks in parallel and ensure that:
     * async handler is called for all tasks
     * tasks actually sleep
     * tasks finish in the expected order (reverse from the start order)
    """

    class SleepTool(ToolMessage):
        request: str = "sleep"
        purpose: str = "To sleep for specified number of seconds"
        seconds: int

    done_event = asyncio.Event()
    wait_events = {i: asyncio.Event() for i in [0, 1, 2, 3, 4]}

    def task_gen(i: int) -> Task:
        # create a mock agent that calls "sleep" tool
        cfg = _TestAsyncToolHandlerConfig()
        agent = ChatAgent(cfg)
        agent.enable_message(SleepTool)
        agent.enable_message(DoneTool)

        # sync tool handler
        def handle(m: SleepTool) -> str | DoneTool:
            response = {
                "handler": "sync",
                "seconds": m.seconds,
            }
            if m.seconds > 0:
                time.sleep(m.seconds)
            response["end"] = time.perf_counter()
            return DoneTool(content=json.dumps(response))

        setattr(agent, "sleep", handle)

        # async tool handler
        async def handle_async(m: SleepTool) -> str | DoneTool:
            response = {
                "handler": "async",
                "seconds": m.seconds,
            }
            await wait_events[m.seconds].wait()

            response["end"] = time.perf_counter()

            done_event.set()
            return DoneTool(content=json.dumps(response))

        setattr(agent, "sleep_async", handle_async)

        # create a task that runs this agent
        task = Task(agent, name=f"Test-{i}", interactive=False)
        return task

    # run clones of this task on these inputs
    N = 5
    questions = [f"sleep {str(N - x)}" for x in range(N)]

    # Start executing the scheduler
    scheduler_task = asyncio.create_task(scheduler(wait_events, done_event))

    # batch run
    answers = run_batch_task_gen(
        task_gen,
        questions,
        sequential=False,
        stop_on_first_result=stop_on_first,
    )
    scheduler_task.cancel()

    for a in answers:
        if a is not None:
            d = json.loads(a.content)
            # ensure that async handler was called
            assert d["handler"] == "async"

    if stop_on_first:
        # only the last task (which doesn't sleep) should succeed
        non_null_answers = [a for a in answers if a is not None]
        assert len(non_null_answers) == 1
        d = json.loads(non_null_answers[0].content)
        assert d["seconds"] == 0
    else:
        # tasks should end in reverse order
        assert all(a is not None for a in answers)
        ends = [json.loads(a.content)["end"] for a in answers]
        assert ends == sorted(ends, reverse=True)
        seconds = [json.loads(a.content)["seconds"] for a in answers]
        assert seconds == sorted(seconds, reverse=True)


class _TestAsyncUserResponseConfig(ChatAgentConfig):
    llm = MockLMConfig(response_fn=echo_response, response_fn_async=echo_response_async)


async def get_user_response_async(prompt: str) -> str:
    return "async response"


def get_user_response(prompt: str) -> str:
    return "sync response"


@pytest.mark.asyncio
async def test_async_user_response():
    """
    Test that async human response callbacks are called by `user_response_asnyc`
    when available, falling back to sync callbacks.
    """
    cfg = _TestAsyncUserResponseConfig()

    agent = ChatAgent(cfg)
    agent.callbacks.get_user_response = get_user_response

    # `user_response_async()` should call the sync callback
    # if it is the only one available
    response = await agent.user_response_async()
    assert response is not None
    assert response.content == "sync response"

    agent.callbacks.get_user_response_async = get_user_response_async

    # `user_response()` should always call the sync callback
    response = agent.user_response()
    assert response is not None
    assert response.content == "sync response"

    # `user_response_async()` should call the sync callback if available
    response = await agent.user_response_async()
    assert response is not None
    assert response.content == "async response"


@pytest.mark.skip(reason="Flaky test, needs adjustment?")
@pytest.mark.parametrize("stop_on_first", [True, False])
@pytest.mark.asyncio
async def test_async_user_response_batch(
    stop_on_first: bool,
):
    """
    Test that there is no blocking in async human response callbacks.
    Similar to test_async_tool_handler.
    """
    # Number of tasks
    N = 5

    done_event = asyncio.Event()
    wait_events = {i: asyncio.Event() for i in [0, 1, 2, 3, 4]}

    def task_gen(i: int) -> Task:
        # reverse order
        wait = N - i - 1
        cfg = _TestAsyncUserResponseConfig()
        agent = ChatAgent(cfg)

        async def get_user_response_async(prompt: str) -> str:
            await wait_events[wait].wait()
            end_time = time.time()
            done_event.set()
            return f"{DONE} async response {end_time} {i}"

        agent.callbacks.get_user_response = get_user_response
        agent.callbacks.get_user_response_async = get_user_response_async

        # create a task that runs this agent
        task = Task(
            agent,
            name=f"Test-{i}",
        )
        return task

    # run clones of this task on these inputs
    questions = [str(i) for i in range(N)]

    # Start executing the scheduler
    scheduler_task = asyncio.create_task(scheduler(wait_events, done_event))

    # batch run
    answers = run_batch_task_gen(
        task_gen,
        questions,
        sequential=False,
        stop_on_first_result=stop_on_first,
    )
    scheduler_task.cancel()

    for a in answers:
        if a is not None:
            # ensure that async handler was called
            assert "async" in a.content

    if stop_on_first:
        # only the last task (which doesn't sleep) should succeed
        non_null_answers = [a for a in answers if a is not None]
        assert len(non_null_answers) == 1
        assert "0" in non_null_answers[0].content
    else:
        # tasks should end in reverse order
        def get_task_result(answer: Optional[ChatDocument]) -> tuple[int, float]:
            assert answer is not None
            end_time, id = answer.content.split()[-2:]
            id = int(id)
            end_time = float(end_time)

            return id, end_time

        order = [
            result[0]
            for result in sorted(
                [get_task_result(a) for a in answers],
                key=lambda result: result[1],
            )
        ]
        assert order == list(reversed(range(N)))
</file>

<file path="tests/main/test_azure_openai.py">
import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.azure_openai import AzureConfig, AzureGPT
from langroid.language_models.base import LLMMessage, Role
from langroid.parsing.parser import ParsingConfig
from langroid.prompts.prompts_config import PromptsConfig
from langroid.utils.configuration import Settings, set_global, settings
from langroid.vector_store.base import VectorStoreConfig

set_global(Settings(stream=True))

cfg = AzureConfig(
    max_output_tokens=100,
    min_output_tokens=10,
    cache_config=RedisCacheConfig(fake=False),
    chat_model="gpt-4o",
)


class _TestChatAgentConfig(ChatAgentConfig):
    max_tokens: int = 200
    vecdb: VectorStoreConfig = None
    llm: AzureConfig = cfg
    parsing: ParsingConfig = ParsingConfig()
    prompts: PromptsConfig = PromptsConfig(
        max_tokens=200,
    )


@pytest.mark.parametrize(
    "streaming, country, capital",
    [(True, "France", "Paris"), (False, "India", "Delhi")],
)
def test_azure_wrapper(streaming, country, capital):
    cfg.stream = streaming
    mdl = AzureGPT(config=cfg)

    question = "What is the capital of " + country + "?"

    set_global(Settings(cache=False))
    cfg.use_chat_for_completion = True
    response = mdl.generate(prompt=question, max_tokens=10)
    assert capital in response.message
    assert not response.cached

    # actual chat mode
    messages = [
        LLMMessage(role=Role.SYSTEM, content="You are a helpful assitant"),
        LLMMessage(role=Role.USER, content=question),
    ]
    response = mdl.chat(messages=messages, max_tokens=10)
    assert capital in response.message
    assert not response.cached

    set_global(Settings(cache=True))
    # should be from cache this time
    response = mdl.chat(messages=messages, max_tokens=10)
    assert capital in response.message
    assert response.cached


def test_chat_agent(test_settings: Settings):
    set_global(test_settings)
    agent_cfg = _TestChatAgentConfig()
    # just testing that these don't fail
    agent = ChatAgent(agent_cfg)
    response = agent.llm_response("what is the capital of France?")
    assert "Paris" in response.content


@pytest.mark.asyncio
async def test_azure_openai_async(test_settings: Settings):
    set_global(test_settings)
    llm = AzureGPT(config=cfg)
    response = await llm.achat("What is the capital of Ontario?", max_tokens=10)
    assert "Toronto" in response.message


def test_azure_config():
    # Test the AzureConfig class model_name copied into chat_model_orig
    model = "blah"
    # turn off the `chat_model` coming from test_settings in conftest.
    settings.chat_model = ""

    # test setting model_name (deprecated; use chat_model instead)
    llm_cfg = AzureConfig(model_name=model)
    assert llm_cfg.chat_model == model
    mdl = AzureGPT(llm_cfg)
    assert mdl.chat_model_orig == model
    assert mdl.config.chat_model == model

    # test setting chat_model
    llm_cfg = AzureConfig(chat_model=model)
    assert llm_cfg.chat_model == model
    mdl = AzureGPT(llm_cfg)
    assert mdl.chat_model_orig == model
    assert mdl.config.chat_model == model

    # test setting chat_model via env var
    import os

    os.environ["AZURE_OPENAI_CHAT_MODEL"] = model
    llm_cfg = AzureConfig()
    mdl = AzureGPT(llm_cfg)
    assert llm_cfg.chat_model == model
    assert mdl.chat_model_orig == model
</file>

<file path="tests/main/test_chat_agent_async.py">
import asyncio

import pytest

from langroid.agent.base import NO_ANSWER
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.utils.configuration import Settings, set_global
from langroid.vector_store.base import VectorStoreConfig


class _TestChatAgentConfig(ChatAgentConfig):
    vecdb: VectorStoreConfig = None
    llm: OpenAIGPTConfig = OpenAIGPTConfig(
        cache_config=RedisCacheConfig(fake=False),
        use_chat_for_completion=True,
    )


@pytest.mark.asyncio
@pytest.mark.parametrize("stream_quiet", [True, False])
async def test_chat_agent_async(test_settings: Settings, stream_quiet: bool):
    set_global(test_settings)
    cfg = _TestChatAgentConfig()
    cfg.llm.async_stream_quiet = stream_quiet
    # just testing that these don't fail
    agent = ChatAgent(cfg)
    response = await agent.llm_response_async("what is the capital of France?")
    assert "Paris" in response.content


@pytest.mark.asyncio
async def test_responses_async(test_settings: Settings):
    set_global(test_settings)
    cfg = _TestChatAgentConfig()
    agent = ChatAgent(cfg)

    # direct LLM response to query
    response = await agent.llm_response_async("what is the capital of France?")
    assert "Paris" in response.content

    # human is prompted for input, and we specify the default response
    agent.default_human_response = "What about England?"
    response = await agent.user_response_async()
    assert "England" in response.content

    response = await agent.llm_response_async("what about England?")
    assert "London" in response.content

    # agent attempts to handle the query, but has no response since
    # the message is not a structured msg that matches an enabled ToolMessage.
    response = await agent.agent_response_async("What is the capital of France?")
    assert response is None


@pytest.mark.asyncio
async def test_task_step_async(test_settings: Settings):
    set_global(test_settings)
    cfg = _TestChatAgentConfig()
    agent = ChatAgent(cfg)
    task = Task(
        agent,
        name="Test",
    )
    msg = "What is the capital of France?"
    task.init(msg)
    assert task.pending_message.content == msg

    # LLM answers
    await task.step_async()
    assert "Paris" in task.pending_message.content
    assert task.pending_message.metadata.sender == Entity.LLM

    agent.default_human_response = "What about England?"
    # User asks about England
    await task.step_async()
    assert "England" in task.pending_message.content
    assert task.pending_message.metadata.sender == Entity.USER

    # LLM answers
    await task.step_async()
    assert "London" in task.pending_message.content
    assert task.pending_message.metadata.sender == Entity.LLM

    # It's Human's turn; they say nothing,
    # and this is reflected in `self.pending_message` as NO_ANSWER
    agent.default_human_response = ""
    # Human says '', which is an invalid response, so pending msg stays same
    await task.step_async()
    assert "London" in task.pending_message.content
    assert task.pending_message.metadata.sender == Entity.LLM

    # LLM cannot respond to itself, so pending msg still does not change
    await task.step_async()
    assert "London" in task.pending_message.content
    assert task.pending_message.metadata.sender == Entity.LLM

    # reset task
    question = "What is my name?"
    task = Task(
        agent,
        name="Test",
        system_message=f""" Your job is to always say "{NO_ANSWER}" """,
        restart=True,
    )
    # LLM responds with NO_ANSWER, which is an invalid msg,
    # which is normally an invalid message, but it is the ONLY explicit message
    # in the step, so is processed as a valid step result, and the pending msg is
    # updated to this message.
    task.init(question)
    await task.step_async()
    assert NO_ANSWER in task.pending_message.content
    assert task.pending_message.metadata.sender == Entity.LLM


@pytest.mark.asyncio
async def test_task(test_settings: Settings):
    set_global(test_settings)
    cfg = _TestChatAgentConfig()
    agent = ChatAgent(cfg)
    task = Task(
        agent,
        name="Test",
    )
    question = "What is the capital of France?"
    agent.default_human_response = question

    # run task with null initial message
    await task.run_async(turns=3)

    # 3 Turns:
    # 1. LLM initiates convo saying thanks how can I help (since do_task msg empty)
    # 2. User asks the `default_human_response`: What is the capital of France?
    # 3. LLM responds

    assert task.pending_message.metadata.sender == Entity.LLM
    assert "Paris" in task.pending_message.content

    agent.default_human_response = "What about England?"

    # run task with initial question
    await task.run_async(msg=question, turns=3)

    # 3 Turns:
    # 1. LLM answers question, since task is run with the question
    # 2. User asks the `default_human_response`: What about England?
    # 3. LLM responds

    assert task.pending_message.metadata.sender == Entity.LLM
    assert "London" in task.pending_message.content


@pytest.mark.asyncio
async def test_chat_agent_async_concurrent(test_settings: Settings):
    set_global(test_settings)
    cfg = _TestChatAgentConfig()

    async def _run_task(msg: str):
        # each invocation needs to create its own ChatAgent
        agent = ChatAgent(cfg)
        return await agent.llm_response_async(msg)

    N = 3
    questions = ["1+" + str(i) for i in range(N)]
    expected_answers = [str(i + 1) for i in range(N)]
    answers = await asyncio.gather(*(_run_task(msg=question) for question in questions))
    assert len(answers) == len(questions)
    for e in expected_answers:
        assert any(e in a.content for a in answers)


@pytest.mark.asyncio
async def test_task_concurrent(test_settings: Settings):
    set_global(test_settings)
    cfg = _TestChatAgentConfig()

    async def _run_task(msg: str):
        # each invocation needs to create its own ChatAgent,
        # else the states gets mangled by concurrent calls!
        agent = ChatAgent(cfg)
        task = Task(
            agent,
            name="Test",
            interactive=False,
            done_if_response=[Entity.LLM],
            default_human_response="",
        )
        return await task.run_async(msg=msg)

    N = 5
    questions = ["1+" + str(i) for i in range(N)]
    expected_answers = [str(i + 1) for i in range(N)]

    # concurrent async calls to all tasks
    answers = await asyncio.gather(*(_run_task(msg=question) for question in questions))

    assert len(answers) == len(questions)

    for e in expected_answers:
        assert any(e.lower() in a.content.lower() for a in answers)
</file>

<file path="tests/main/test_chat_agent.py">
from langroid.agent.base import NO_ANSWER
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocMetaData, ChatDocument
from langroid.agent.task import Task
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.file_attachment import FileAttachment
from langroid.utils.configuration import Settings, set_global


class _TestChatAgentConfig(ChatAgentConfig):
    max_tokens: int = 200
    llm: OpenAIGPTConfig = OpenAIGPTConfig(
        cache_config=RedisCacheConfig(fake=False),
        use_chat_for_completion=True,
        max_output_tokens=200,
    )


def test_chat_agent(test_settings: Settings):
    set_global(test_settings)
    cfg = _TestChatAgentConfig()
    # just testing that these don't fail
    agent = ChatAgent(cfg)
    response = agent.llm_response("what is the capital of France?")
    assert "Paris" in response.content


def test_chat_agent_system_message():
    """Test whether updating the system message works as expected,
    depending on whether we update the config or the agent directly.
    """
    cfg = _TestChatAgentConfig(system_message="Triple any number given to you")
    agent = ChatAgent(cfg)
    agent.config.system_message = "Double any number given to you"
    response = agent.llm_response("5")
    assert "15" in response.content

    agent.clear_history()
    agent.system_message = "Increment any number given to you, by 10"
    response = agent.llm_response("6")
    assert "16" in response.content


def test_responses(test_settings: Settings):
    set_global(test_settings)
    cfg = _TestChatAgentConfig()
    agent = ChatAgent(cfg)

    # direct LLM response to query
    response = agent.llm_response("what is the capital of France?")
    assert "Paris" in response.content

    # human is prompted for input, and we specify the default response
    agent.default_human_response = "What about England?"
    response = agent.user_response()
    assert "England" in response.content

    response = agent.llm_response("what about England?")
    assert "London" in response.content

    # agent attempts to handle the query, but has no response since
    # the message is not a structured msg that matches an enabled ToolMessage.
    response = agent.agent_response("What is the capital of France?")
    assert response is None


def test_process_messages(test_settings: Settings):
    set_global(test_settings)
    cfg = _TestChatAgentConfig()
    agent = ChatAgent(cfg)
    task = Task(
        agent,
        name="Test",
    )
    msg = "What is the capital of France?"
    task.init(msg)
    assert task.pending_message.content == msg

    # LLM answers
    task.step()
    assert "Paris" in task.pending_message.content
    assert task.pending_message.metadata.sender == Entity.LLM

    agent.default_human_response = "What about England?"
    # User asks about England
    task.step()
    assert "England" in task.pending_message.content
    assert task.pending_message.metadata.sender == Entity.USER

    # LLM answers
    task.step()
    assert "London" in task.pending_message.content
    assert task.pending_message.metadata.sender == Entity.LLM

    # It's Human's turn; they say nothing,
    # and this is reflected in `self.pending_message` as NO_ANSWER
    agent.default_human_response = ""
    # Human says '' -- considered an Invalid message, so pending msg doesn't change
    task.step()
    assert "London" in task.pending_message.content
    assert task.pending_message.metadata.sender == Entity.LLM

    # LLM cannot respond to itself, so next step still does not change pending msg
    task.step()
    assert "London" in task.pending_message.content
    assert task.pending_message.metadata.sender == Entity.LLM

    # reset task
    question = "What is my name?"
    task = Task(
        agent,
        name="Test",
        system_message=f""" Your job is to always say "{NO_ANSWER}" """,
        restart=True,
    )
    # LLM responds with NO_ANSWER, which, although it is an invalid response,
    # is the only explicit response in the loop, so it is processed as a valid response,
    # and the pending message is updated to this message.
    task.init(question)
    task.step()  # LLM has invalid response => pending msg is still the same
    assert NO_ANSWER in task.pending_message.content
    assert task.pending_message.metadata.sender == Entity.LLM


def test_task(test_settings: Settings):
    set_global(test_settings)
    cfg = _TestChatAgentConfig()
    agent = ChatAgent(cfg)
    task = Task(agent, name="Test")
    question = "What is the capital of France?"
    agent.default_human_response = question

    # run task with null initial message
    task.run(turns=3)

    # 3 Turns:
    # 1. LLM initiates convo saying thanks how can I help (since task msg empty)
    # 2. User asks the `default_human_response`: What is the capital of France?
    # 3. LLM responds

    assert task.pending_message.metadata.sender == Entity.LLM
    assert "Paris" in task.pending_message.content

    agent.default_human_response = "What about England?"

    # run task with initial question
    task.run(msg=question, turns=3)

    # 3 Turns:
    # 1. LLM answers question, since task is run with the question
    # 2. User asks the `default_human_response`: What about England?
    # 3. LLM responds

    assert task.pending_message.metadata.sender == Entity.LLM
    assert "London" in task.pending_message.content


def test_simple_task(test_settings: Settings):
    set_global(test_settings)
    cfg = _TestChatAgentConfig()
    agent = ChatAgent(cfg)
    task = Task(
        agent,
        interactive=False,
        done_if_response=[Entity.LLM],
        system_message="""
        User will give you a number, respond with the square of the number.
        """,
    )

    response = task.run(msg="5")
    assert "25" in response.content

    # create new task with SAME agent, and restart=True,
    # verify that this works fine, i.e. does not use previous state of agent

    task = Task(
        agent,
        interactive=False,
        done_if_response=[Entity.LLM],
        restart=True,
        system_message="""
        User will give you a number, respond with the square of the number.
        """,
    )

    response = task.run(msg="7")
    assert "49" in response.content


def test_agent_init_state():

    class MyAgent(ChatAgent):
        def init_state(self):
            super().init_state()
            self.x = 0

    agent = MyAgent(_TestChatAgentConfig())
    assert agent.x == 0
    assert agent.total_llm_token_cost == 0
    assert agent.total_llm_token_usage == 0

    agent.total_llm_token_cost = 10
    agent.total_llm_token_usage = 20
    agent.x = 5

    agent.init_state()
    assert agent.x == 0
    assert agent.total_llm_token_cost == 0
    assert agent.total_llm_token_usage == 0


def test_agent_file_chat():
    from pathlib import Path

    # Path to the test PDF file
    pdf_path = Path("tests/main/data/dummy.pdf")

    # Create a FileAttachment from the PDF file
    attachment = FileAttachment.from_path(pdf_path)
    agent = ChatAgent(_TestChatAgentConfig())

    # test ChatDocument input
    user_input = ChatDocument(
        content="Who is the first author of this paper?",
        files=[attachment],
        metadata=ChatDocMetaData(
            sender=Entity.USER,
        ),
    )
    response = agent.llm_response(user_input)
    assert "Takio" in response.content

    agent.clear_history()

    # use create_user_response to create a ChatDocument
    user_input = agent.create_user_response(
        content="Who is the first author of this paper?",
        files=[attachment],
    )
    response = agent.llm_response(user_input)
    assert "Takio" in response.content

    # follow-up
    response = agent.llm_response("What's the title?")
    assert "Supply Chain" in response.content
</file>

<file path="tests/main/test_closest_string.py">
import pytest

from langroid.parsing.utils import closest_string


@pytest.mark.parametrize(
    "query, string_list, expected",
    [
        ("Bat  ", ["cat ", " Bat", "rat", " Hat"], " Bat"),
        ("rat", ["cat ", " Bat", "rat", " Hat"], "rat"),
        ("no_match", ["cat ", " Bat", "rat", " Hat"], "No match found"),
        ("BAT  ", ["cat ", " Bat", "rat", " Hat"], " Bat"),
    ],
)
def test_closest_string(query, string_list, expected):
    assert closest_string(query, string_list) == expected
</file>

<file path="tests/main/test_code_parser.py">
from langroid.mytypes import DocMetaData, Document
from langroid.parsing.code_parser import CodeParser, CodeParsingConfig

MAX_CHUNK_SIZE = 10


def test_code_parser():
    cfg = CodeParsingConfig(
        chunk_size=MAX_CHUNK_SIZE,
        extensions=["py", "sh"],
        token_encoding_model="text-embedding-3-small",
    )

    parser = CodeParser(cfg)

    codes = """
    py|
    from langroid.pydantic_v1 import BaseModel
    from typing import List
    
    class Item(BaseModel):
        name: str
        description: str
        price: float
        tags: List[str]
    +
    py|
    import requests
    from fastapi import FastAPI
    from langroid.pydantic_v1 import BaseModel
    
    app = FastAPI()
    +
    sh|
    #!/bin/bash

    # Function to prompt for user confirmation
    confirm() {
      read -p "$1 (y/n): " choice
      case "$choice" in
        [Yy]* ) return 0;;
        [Nn]* ) return 1;;
        * ) echo "Please answer y (yes) or n (no)."; return 1;;
      esac
    }
    """.split(
        "+"
    )

    codes = [text.strip() for text in codes if text.strip() != ""]
    lang_codes = [text.split("|") for text in codes]

    docs = [
        Document(content=code, metadata=DocMetaData(language=lang))
        for lang, code in lang_codes
        if code.strip() != ""
    ]
    split_docs = parser.split(docs)
    toks = parser.num_tokens
    # verify all chunks are less than twice max chunk size
    assert max([toks(doc.content) for doc in split_docs]) <= 2 * MAX_CHUNK_SIZE
    joined_splits = "".join([doc.content for doc in split_docs])
    joined_docs = "".join([doc.content for doc in docs])
    assert joined_splits.strip() == joined_docs.strip()
</file>

<file path="tests/main/test_dataframe_docs.py">
import pandas as pd

from langroid.mytypes import DocMetaData, Document
from langroid.utils.configuration import Settings, set_global
from langroid.utils.pydantic_utils import dataframe_to_documents


def test_df_to_documents(test_settings: Settings):
    set_global(test_settings)

    data = {
        "id": ["A100", "B200", "C300", "D400", "E500"],
        "year": [1955, 1977, 1989, 2001, 2015],
        "author": [
            "Isaac Asimov",
            "J.K. Rowling",
            "George Orwell",
            "J.R.R. Tolkien",
            "H.G. Wells",
        ],
        "title": [
            "The Last Question",
            "Harry Potter",
            "1984",
            "The Lord of the Rings",
            "The Time Machine",
        ],
        "summary": [
            "A story exploring the concept of entropy and the end of the universe.",
            "The adventures of a young wizard and his friends at a magical school.",
            "A dystopian novel about a totalitarian regime and the concept of freedom.",
            "An epic fantasy tale of a quest to destroy a powerful ring.",
            "A science fiction novel about time travel and its consequences.",
        ],
    }

    df = pd.DataFrame(data)

    docs = dataframe_to_documents(df, content="summary", metadata=["id", "year"])
    assert len(docs) == 5
    assert docs[0].content == data["summary"][0]
    assert docs[0].metadata.id == data["id"][0]
    assert docs[0].metadata.year == data["year"][0]
    assert docs[0].author == data["author"][0]
    assert isinstance(docs[0], Document)
    assert isinstance(docs[0].metadata, DocMetaData)

    # Note: "id" cannot be used at top level within Document class
    # since `id` is also the name of a method in the Document class
    df = df.drop(columns=["id"], inplace=False)
    docs = dataframe_to_documents(df, content="junk", metadata=[])
    assert len(docs) == 5
    assert docs[0].content == ""  # since `junk` is not a column in the dataframe
    assert docs[0].year == data["year"][0]
    assert docs[0].author == data["author"][0]
    assert isinstance(docs[0], Document)
    assert isinstance(docs[0].metadata, DocMetaData)
</file>

<file path="tests/main/test_docx_parser.py">
import os

import pytest

from langroid.parsing.document_parser import DocumentParser
from langroid.parsing.parser import DocxParsingConfig, ParsingConfig


@pytest.mark.parametrize("source", ["path", "bytes"])
@pytest.mark.parametrize("docxlib", ["python-docx"])
def test_get_docx_file(source, docxlib: str):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    tests_root = os.path.abspath(os.path.join(current_dir, ".."))
    path = os.path.join(tests_root, "main", "data", "docx-test-file.docx")
    docx_parser = DocumentParser.create(
        path, ParsingConfig(docx=DocxParsingConfig(library=docxlib))
    )
    if source == "bytes":
        bytes = docx_parser._load_doc_as_bytesio()
        docx_parser = DocumentParser.create(
            bytes.getvalue(), docx_parser.config  # convert BytesIO to bytes
        )
    doc = docx_parser.get_doc()

    # Check the results
    assert isinstance(doc.content, str)
    assert len(doc.content) > 0  # assuming the docx is not empty
    citation = path if source == "path" else "bytes"
    assert doc.metadata.source == citation

    # parser = Parser(ParsingConfig())
    # pdfParser = PdfParser.from_Parser(parser)
    # docs = pdfParser.doc_chunks_from_pdf_url(url, parser)
    docs = docx_parser.get_doc_chunks()
    assert len(docs) > 0
    assert all(d.metadata.is_chunk for d in docs)
    assert all(citation in d.metadata.source for d in docs)


def test_markitdown_docx_parser():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    tests_root = os.path.abspath(os.path.join(current_dir, ".."))

    path = os.path.join(tests_root, "main", "data", "sample.docx")

    # Test DOCX parsing
    docx_parser = DocumentParser.create(
        path,
        ParsingConfig(
            n_neighbor_ids=2,
            docx=DocxParsingConfig(library="markitdown-docx"),
        ),
    )
    doc_docx = docx_parser.get_doc()
    assert isinstance(doc_docx.content, str)
    assert len(doc_docx.content) > 0
    assert doc_docx.metadata.source == path

    docx_chunks = docx_parser.get_doc_chunks()
    assert len(docx_chunks) > 0
    assert all(chunk.metadata.is_chunk for chunk in docx_chunks)
    assert all(path in chunk.metadata.source for chunk in docx_chunks)
</file>

<file path="tests/main/test_embeddings.py">
import pytest
from dotenv import find_dotenv, load_dotenv

from langroid.embedding_models.base import EmbeddingModel
from langroid.embedding_models.models import (
    AzureOpenAIEmbeddingsConfig,
    OpenAIEmbeddingsConfig,
)


def test_openai_embeddings():
    load_dotenv(find_dotenv(usecwd=True))
    openai_cfg = OpenAIEmbeddingsConfig(
        model_type="openai",
        model_name="text-embedding-3-small",
        dims=1536,
    )

    openai_model = EmbeddingModel.create(openai_cfg)

    openai_fn = openai_model.embedding_fn()

    assert len(openai_fn(["hello"])[0]) == openai_cfg.dims


def test_azure_openai_embeddings():
    load_dotenv(find_dotenv(usecwd=True))
    azure_openai_cfg = AzureOpenAIEmbeddingsConfig(
        model_type="azure-openai",
        model_name="text-embedding-ada-002",
        deployment_name="text-embedding-ada-002",
        dims=1536,
    )
    azure_openai_model = EmbeddingModel.create(azure_openai_cfg)

    azure_openai_fn = azure_openai_model.embedding_fn()

    assert len(azure_openai_fn(["hello"])[0]) == azure_openai_cfg.dims


@pytest.mark.xfail(
    reason="LangDB may fail due to unknown flakiness",
    run=True,
    strict=False,
)
def test_langdb_embeddings():
    """Test that embedding models work via LangDB"""
    langdb_openai_embed_config = OpenAIEmbeddingsConfig(
        model_name="langdb/openai/text-embedding-3-small",
    )
    langdb_openai_embed_model = EmbeddingModel.create(langdb_openai_embed_config)
    emb_fn = langdb_openai_embed_model.embedding_fn()
    assert len(emb_fn(["hello"])[0]) == langdb_openai_embed_config.dims
</file>

<file path="tests/main/test_file_attachment.py">
import base64
import io
import tempfile
from pathlib import Path

from langroid.parsing.file_attachment import FileAttachment


class TestFileAttachment:
    def test_from_bytes(self):
        """Test creating attachment from bytes."""
        content = b"test content"
        attachment = FileAttachment.from_bytes(
            content=content, filename="test.txt", mime_type="text/plain"
        )

        assert attachment.content == content
        assert attachment.filename == "test.txt"
        assert attachment.mime_type == "text/plain"

    def test_from_io(self):
        """Test creating attachment from BytesIO object."""
        content = b"test content"
        file_obj = io.BytesIO(content)

        attachment = FileAttachment.from_io(
            file_obj=file_obj, filename="test.txt", mime_type="text/plain"
        )

        assert attachment.content == content
        assert attachment.filename == "test.txt"
        assert attachment.mime_type == "text/plain"

    def test_from_text(self):
        """Test creating attachment from text."""
        text = "Hello, world!"
        attachment = FileAttachment.from_text(text=text)

        assert attachment.content == text.encode("utf-8")
        assert attachment.mime_type == "text/plain"
        assert attachment.filename is not None  # Should have default filename

    def test_from_path(self):
        """Test creating attachment from file path."""
        with tempfile.NamedTemporaryFile(suffix=".txt") as tmp:
            tmp.write(b"test content")
            tmp.flush()

            attachment = FileAttachment.from_path(tmp.name)

            assert attachment.content == b"test content"
            assert attachment.filename == Path(tmp.name).name
            assert attachment.mime_type == "text/plain"

    def test_default_filename(self):
        """Test default filename generation when none provided."""
        content = b"test content"
        attachment = FileAttachment.from_bytes(content=content)

        assert attachment.filename is not None
        assert "attachment_" in attachment.filename
        assert attachment.filename.endswith(".bin")

    def test_to_base64(self):
        """Test base64 encoding."""
        content = b"test content"
        attachment = FileAttachment.from_bytes(content=content)

        expected = base64.b64encode(content).decode("utf-8")
        assert attachment.to_base64() == expected

    def test_to_data_uri(self):
        """Test data URI generation."""
        content = b"test content"
        attachment = FileAttachment.from_bytes(content=content, mime_type="text/plain")

        data_uri = attachment.to_data_uri()
        expected_base64 = base64.b64encode(content).decode("utf-8")
        expected_uri = f"data:text/plain;base64,{expected_base64}"

        assert data_uri == expected_uri

    def test_to_dict(self):
        """Test conversion to dict for API requests."""
        content = b"test content"
        attachment = FileAttachment.from_bytes(
            content=content, filename="test.txt", mime_type="text/plain"
        )

        result = attachment.to_dict("gpt-4.1")
        assert result is not None

    def test_mime_type_inference(self):
        """Test MIME type is correctly inferred from filename."""
        content = b"test content"

        pdf = FileAttachment.from_bytes(content=content, filename="doc.pdf")
        assert pdf.mime_type == "application/pdf"

        png = FileAttachment.from_bytes(content=content, filename="image.png")
        assert png.mime_type == "image/png"

        # Change .xyz to .unknown123 which should definitely be unrecognized
        unknown = FileAttachment.from_bytes(content=content, filename="file.unknown123")
        assert unknown.mime_type == "application/octet-stream"
</file>

<file path="tests/main/test_file_tools.py">
import tempfile
from pathlib import Path
from typing import Callable

import pytest
from git import Repo

import langroid as lr
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.tools.file_tools import ListDirTool, ReadFileTool, WriteFileTool
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.git_utils import git_init_repo


@pytest.fixture
def temp_dir():
    with tempfile.TemporaryDirectory() as tmpdirname:
        yield Path(tmpdirname)


@pytest.fixture
def git_repo(temp_dir):
    repo = Repo.init(temp_dir)
    return repo


@pytest.fixture
def agent():
    cfg = ChatAgentConfig(
        name="test-write-file",
        vecdb=None,
        llm=OpenAIGPTConfig(),
        use_functions_api=False,
        use_tools=True,
        system_message=f"""
        When asked to read, write or do other operations on files,
        you MUST use one of the TOOLs:
        {ReadFileTool.default_value("request")},
        {WriteFileTool.default_value("request")},
        {ListDirTool.default_value("request")}
        Typically a file name or path will be provided, and you should
        NOT worry about what directory or path it is in. The TOOL will
        handle that for you.
        """,
    )
    return ChatAgent(cfg)


def test_write_file_tool(test_settings: Settings, temp_dir, git_repo, agent):
    set_global(test_settings)

    custom_write_file_tool = WriteFileTool.create(
        get_curr_dir=lambda: temp_dir, get_git_repo=lambda: git_repo
    )
    agent.enable_message(custom_write_file_tool)

    content = "print('Hello, World!')"
    file_path = "test_file.py"

    llm_msg = agent.llm_response_forget(
        f"Write a Python file named '{file_path}' with the content: {content}"
    )

    assert isinstance(agent.get_tool_messages(llm_msg)[0], custom_write_file_tool)

    agent_result = agent.handle_message(llm_msg).content
    assert f"Content written to {file_path}" in agent_result
    assert "and committed" in agent_result

    # Check if the file was created
    full_path = temp_dir / file_path
    assert full_path.exists()

    # Check if the content was written correctly
    with open(full_path, "r") as file:
        assert file.read().strip() == content

    # Check if the file was committed to the git repo
    assert not git_repo.is_dirty()
    assert file_path in git_repo.git.ls_files().split()


def test_write_file_tool_multiple_files(
    test_settings: Settings, temp_dir, git_repo, agent
):
    set_global(test_settings)

    custom_write_file_tool = WriteFileTool.create(
        get_curr_dir=lambda: temp_dir, get_git_repo=lambda: git_repo
    )
    agent.enable_message(custom_write_file_tool)

    files = [
        ("file1.txt", "This is file 1"),
        ("subdir/file2.py", "print('File 2')"),
        ("file3.md", "# File 3\nMarkdown content"),
    ]

    for file_path, content in files:
        full_path = temp_dir / file_path
        llm_msg = agent.llm_response_forget(
            f"Write a file named '{file_path}' with the content: {content}"
        )
        agent_result = agent.handle_message(llm_msg).content

        assert f"Content written to {file_path}" in agent_result
        assert "and committed" in agent_result

        assert full_path.exists()

        with open(full_path, "r") as file:
            assert file.read().strip() == content

        assert not git_repo.is_dirty()
        assert file_path in git_repo.git.ls_files().split()

    # Check if all files are in the repo
    assert len(git_repo.git.ls_files().split()) == len(files)


def test_write_file_tool_overwrite(test_settings: Settings, temp_dir, git_repo, agent):
    set_global(test_settings)

    custom_write_file_tool = WriteFileTool.create(
        get_curr_dir=lambda: temp_dir, get_git_repo=lambda: git_repo
    )
    agent.enable_message(custom_write_file_tool)

    file_path = "overwrite_test.txt"
    original_content = "Original content"
    new_content = "New content"

    # Write the original content
    llm_msg = agent.llm_response_forget(
        f"Write a file named '{file_path}' with the content: {original_content}"
    )
    agent.handle_message(llm_msg)

    # Overwrite with new content
    llm_msg = agent.llm_response_forget(
        f"Write a file named '{file_path}' with the content: {new_content}"
    )
    agent_result = agent.handle_message(llm_msg).content

    assert f"Content written to {file_path}" in agent_result
    assert "and committed" in agent_result

    full_path = temp_dir / file_path
    with open(full_path, "r") as file:
        assert file.read().strip() == new_content

    # Check git history
    commits = list(git_repo.iter_commits())
    assert len(commits) == 2


def test_read_file_tool(test_settings: Settings, temp_dir, agent):
    set_global(test_settings)

    custom_read_file_tool = ReadFileTool.create(get_curr_dir=lambda: temp_dir)
    agent.enable_message(custom_read_file_tool)

    # Create a test file
    file_path = "test_read.txt"
    content = "This is a test file content."
    with open(temp_dir / file_path, "w") as f:
        f.write(content)

    llm_msg = agent.llm_response_forget(f"Read the contents of the file '{file_path}'")

    assert isinstance(agent.get_tool_messages(llm_msg)[0], custom_read_file_tool)

    agent_result = agent.handle_message(llm_msg).content
    # there is just one line so no worries about line number
    assert content in agent_result


def test_read_file_tool_not_exist(test_settings: Settings, temp_dir, agent):
    set_global(test_settings)

    custom_read_file_tool = ReadFileTool.create(get_curr_dir=lambda: temp_dir)
    agent.enable_message(custom_read_file_tool)
    task = lr.Task(agent, interactive=False, done_if_response=[lr.Entity.AGENT])
    nonexistent_file = "nonexistent.txt"
    agent_result = task.run(f"Read the contents of the file '{nonexistent_file}'")
    assert "File not found" in agent_result.content


def test_read_file_tool_multiple_files(test_settings: Settings, temp_dir, agent):
    set_global(test_settings)

    custom_read_file_tool = ReadFileTool.create(get_curr_dir=lambda: temp_dir)
    agent.enable_message(custom_read_file_tool)

    files = [
        ("file1.txt", "Content of file 1"),
        ("subdir/file2.py", "print('Content of file 2')"),
        ("file3.md", "# File 3\nMarkdown content"),
    ]

    for file_path, content in files:
        full_path = temp_dir / file_path
        full_path.parent.mkdir(parents=True, exist_ok=True)
        with open(full_path, "w") as f:
            f.write(content)

        llm_msg = agent.llm_response_forget(
            f"Read the contents of the file '{file_path}'"
        )
        agent_result = agent.handle_message(llm_msg).content

        # Check if each line of content is in the result, ignoring line numbers
        for line in content.split("\n"):
            assert any(line in result_line for result_line in agent_result.split("\n"))


def test_list_dir_tool(test_settings: Settings, temp_dir, agent):
    set_global(test_settings)

    custom_list_dir_tool = ListDirTool.create(get_curr_dir=lambda: temp_dir)
    agent.enable_message(custom_list_dir_tool)

    # Create some test files and directories
    (temp_dir / "file1.txt").touch()
    (temp_dir / "file2.py").touch()
    (temp_dir / "subdir").mkdir()
    (temp_dir / "subdir" / "file3.md").touch()
    (temp_dir / "subdir" / "main.rs").touch()
    (temp_dir / "nulldir").mkdir()

    llm_msg = agent.llm_response_forget(
        "List the contents of the current directory '.' "
    )

    assert isinstance(agent.get_tool_messages(llm_msg)[0], custom_list_dir_tool)

    agent_result = agent.handle_message(llm_msg).content

    assert "file1.txt" in agent_result
    assert "file2.py" in agent_result
    assert "subdir" in agent_result

    llm_msg = agent.llm_response_forget(
        "List the contents of the current directory 'subdir' "
    )

    assert isinstance(agent.get_tool_messages(llm_msg)[0], custom_list_dir_tool)

    agent_result = agent.handle_message(llm_msg).content

    assert "file3.md" in agent_result
    assert "main.rs" in agent_result

    llm_msg = agent.llm_response_forget(
        "List the contents of the current directory 'nulldir' "
    )
    assert isinstance(agent.get_tool_messages(llm_msg)[0], custom_list_dir_tool)

    agent_result = agent.handle_message(llm_msg).content

    assert "empty" in agent_result


@pytest.fixture
def my_write_file_tool(temp_dir):
    git_repo = git_init_repo(temp_dir)

    def temp_dir_fn():
        return temp_dir

    def git_repo_fn():
        return git_repo

    class MyWriteFileTool(WriteFileTool):
        _curr_dir: Callable[[], str] = staticmethod(temp_dir_fn)
        _git_repo: Callable[[], Repo] = staticmethod(git_repo_fn)

    return MyWriteFileTool


def test_my_write_file_tool(
    test_settings: Settings, temp_dir, my_write_file_tool, agent
):
    set_global(test_settings)

    git_repo = git_init_repo(temp_dir)
    agent.enable_message(my_write_file_tool)

    content = "print('Hello from MyWriteFileTool')"
    file_path = "test_my_file.py"

    llm_msg = agent.llm_response_forget(
        f"Write a Python file named '{file_path}' with the content: {content}"
    )

    assert isinstance(agent.get_tool_messages(llm_msg)[0], my_write_file_tool)

    agent_result = agent.handle_message(llm_msg).content
    assert f"Content written to {file_path}" in agent_result
    assert "and committed" in agent_result

    full_path = temp_dir / file_path
    assert full_path.exists()

    with open(full_path, "r") as file:
        assert file.read().strip() == content

    assert not git_repo.is_dirty()
    assert file_path in git_repo.git.ls_files().split()
</file>

<file path="tests/main/test_git_utils.py">
import os
from unittest.mock import patch

import pytest
from github import GithubException

from langroid.utils.git_utils import (
    get_file_list,
    git_commit_file,
    git_commit_mods,
    git_create_checkout_branch,
    git_diff_file,
    git_init_repo,
    git_read_file,
    git_restore_file,
    git_restore_repo,
)


@pytest.fixture
def mock_github():
    with patch("langroid.utils.git_utils.Github") as mock:
        yield mock


@pytest.fixture
def temp_git_repo(tmp_path):
    repo_path = tmp_path / "test_repo"
    repo = git_init_repo(str(repo_path))
    return repo


def test_git_read_file(mock_github):
    mock_content = (
        mock_github.return_value.get_repo.return_value.get_contents.return_value
    )
    mock_content.decoded_content = b"test content"

    content = git_read_file("owner/repo", "test.txt")
    assert content == "test content"


def test_git_read_file_exception(mock_github):
    mock_github.return_value.get_repo.side_effect = GithubException(
        404, "Not Found", {}
    )

    content = git_read_file("owner/repo", "test.txt")
    assert content == ""


def test_get_file_list(mock_github):
    mock_content = [
        type("obj", (), {"path": "file1.txt", "type": "file"})(),
        type("obj", (), {"path": "file2.md", "type": "file"})(),
    ]
    mock_github.return_value.get_repo.return_value.get_contents.return_value = (
        mock_content
    )

    files = get_file_list("owner/repo", "dir", "*.txt")
    assert files == ["file1.txt"]


def test_git_init_repo(temp_git_repo):
    assert temp_git_repo is not None
    assert os.path.exists(os.path.join(temp_git_repo.working_dir, ".gitignore"))


def test_git_commit_file(temp_git_repo):
    test_file = os.path.join(temp_git_repo.working_dir, "test.txt")
    with open(test_file, "w") as f:
        f.write("Test content")

    git_commit_file(temp_git_repo, "test.txt", "Test commit")

    assert "test.txt" in temp_git_repo.git.ls_files().split()


def test_git_commit_mods(temp_git_repo):
    test_file = os.path.join(temp_git_repo.working_dir, "test.txt")
    with open(test_file, "w") as f:
        f.write("Test content")

    # Add the file to the git index
    temp_git_repo.index.add([test_file])

    git_commit_mods(temp_git_repo)

    assert "test.txt" in temp_git_repo.git.ls_files().split()

    # Check if the file was actually committed
    assert len(temp_git_repo.head.commit.tree.blobs) > 0
    assert any(blob.name == "test.txt" for blob in temp_git_repo.head.commit.tree.blobs)


def test_git_restore_repo(temp_git_repo):
    test_file = os.path.join(temp_git_repo.working_dir, "test.txt")
    with open(test_file, "w") as f:
        f.write("Test content")

    git_restore_repo(temp_git_repo)

    assert "test.txt" not in temp_git_repo.git.ls_files().split()


def test_git_restore_file(temp_git_repo):
    test_file = os.path.join(temp_git_repo.working_dir, "test.txt")
    with open(test_file, "w") as f:
        f.write("Initial content")
    git_commit_file(temp_git_repo, "test.txt", "Initial commit")

    with open(test_file, "w") as f:
        f.write("Modified content")

    git_restore_file(temp_git_repo, "test.txt")

    with open(test_file, "r") as f:
        content = f.read()
    assert content == "Initial content"


def test_git_create_checkout_branch(temp_git_repo):
    # Make an initial commit to create the HEAD reference
    test_file = os.path.join(temp_git_repo.working_dir, "initial.txt")
    with open(test_file, "w") as f:
        f.write("Initial content")
    temp_git_repo.index.add([test_file])
    temp_git_repo.index.commit("Initial commit")

    git_create_checkout_branch(temp_git_repo, "new-branch")
    assert temp_git_repo.active_branch.name == "new-branch"


def test_git_diff_file(temp_git_repo):
    test_file = os.path.join(temp_git_repo.working_dir, "test.txt")
    with open(test_file, "w") as f:
        f.write("Initial content")
    git_commit_file(temp_git_repo, "test.txt", "Initial commit")

    with open(test_file, "w") as f:
        f.write("Modified content")
    git_commit_file(temp_git_repo, "test.txt", "Modified commit")

    diff = git_diff_file(temp_git_repo, "test.txt")
    assert "Initial content" in diff
    assert "Modified content" in diff
</file>

<file path="tests/main/test_global_settings.py">
import random
import threading
import time

import pytest

from langroid.utils.configuration import (
    Settings,
    set_global,
    settings,
    temporary_settings,
    update_global_settings,
)


def test_update_global_settings():
    """
    Test that we can dynamically update the global settings object.
    """
    set_global(Settings(debug=True))
    assert settings.debug is True

    set_global(Settings(debug=False))
    assert settings.debug is False


# Shared list to collect exceptions
thread_exceptions = []


def safe_worker(target, *args, **kwargs):
    """Run a worker and capture any exception."""
    try:
        target(*args, **kwargs)
    except Exception as e:
        thread_exceptions.append(e)


def writer_worker(worker_id: int, iterations: int = 100):
    for i in range(iterations):
        new_debug = i % 2 == 0
        new_cfg = Settings(debug=new_debug)
        update_global_settings(new_cfg, keys=["debug"])
        time.sleep(random.uniform(0, 0.001))


def reader_worker(worker_id: int, read_list: list, iterations: int = 100):
    for _ in range(iterations):
        read_list.append(settings.debug)
        time.sleep(random.uniform(0, 0.001))


def context_worker(iterations: int = 50):
    for _ in range(iterations):
        orig_quiet = settings.quiet  # reads global value
        temp = Settings(quiet=True)
        with temporary_settings(temp):
            assert settings.quiet is True
            time.sleep(random.uniform(0, 0.001))
        # After the context, the calling thread’s settings revert to the global default.
        # Since temporary_settings is thread‑local,
        # concurrent updates do not affect this thread’s view.
        assert settings.quiet == orig_quiet


@pytest.mark.timeout(5)
def test_thread_safety():
    reader_results = []
    threads = []

    # Create threads and wrap targets with safe_worker
    for i in range(5):
        t = threading.Thread(target=safe_worker, args=(writer_worker, i))
        threads.append(t)

    for i in range(5):
        t = threading.Thread(
            target=safe_worker, args=(reader_worker, i, reader_results)
        )
        threads.append(t)

    for _ in range(2):
        t = threading.Thread(target=safe_worker, args=(context_worker,))
        threads.append(t)

    for t in threads:
        t.start()

    for t in threads:
        t.join()

    # Re-raise any exceptions captured
    if thread_exceptions:
        raise thread_exceptions[0]

    # Final consistency checks
    assert isinstance(settings.debug, bool)
    assert settings.quiet is False

    for val in reader_results:
        assert val in (True, False)


@pytest.mark.timeout(5)
def test_temporary_override_race():
    """
    This test forces two threads to use temporary_settings concurrently.
    Each thread:
      - Captures the original global value of settings.quiet.
      - Enters a temporary override (setting quiet=True).
      - Waits on a barrier until both threads are in the temporary context.
      - Exits the context and then records what settings.quiet evaluates to.

    In a proper thread‑safe implementation the final global value should still
    be the original (False), but in the old (non–thread‑safe) implementation a race
    condition between the two threads can result in one thread inadvertently leaving
    the global value set to True.
    """
    # Make sure global quiet is initially False.
    update_global_settings(Settings(quiet=False), keys=["quiet"])
    # Barrier for synchronizing two threads.
    barrier = threading.Barrier(2)
    # A place to record the final value of quiet after each thread exits its context.
    results = [None, None]

    def worker(index: int):
        # Define a temporary override that forces quiet=True.
        temp = Settings(quiet=True)
        with temporary_settings(temp):
            # While inside the context, the settings should be overridden.
            assert settings.quiet is True
            # Wait until both threads are here.
            barrier.wait()
            # Sleep briefly to let interleaving happen.
            time.sleep(0.01)
        # After the context, we expect the global setting to be restored.
        results[index] = settings.quiet
        # If a race occurred in the old implementation, the restored value may be wrong.

    threads = []
    for i in range(2):
        t = threading.Thread(target=worker, args=(i,))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

    # Now, both threads should have seen the original value (False) restored.
    # In the broken implementation the race may cause one of these assertions to fail.
    assert (
        results[0] is False
    ), f"Thread 0 restored quiet={results[0]} instead of False."

    assert (
        results[1] is False
    ), f"Thread 1 restored quiet={results[1]} instead of False."
</file>

<file path="tests/main/test_global_state.py">
from langroid.utils.globals import GlobalState


class _TestGlobals(GlobalState):
    """Test-specific global variables.
    (This is how users should define their own global variables)
    """

    some_variable: int = 0
    another_variable: str = ""
    mapping: dict = {}


def test_initial_global_state():
    """
    Test that the global state initializes with the default values.
    """
    assert _TestGlobals.get_value("some_variable") == 0
    assert _TestGlobals.get_value("another_variable") == ""
    assert _TestGlobals.get_value("mapping") == {}


def test_set_global_state():
    """
    Test setting new values on the global state.
    """
    _TestGlobals.set_values(some_variable=5, another_variable="Test")

    assert _TestGlobals.get_value("some_variable") == 5
    assert _TestGlobals.get_value("another_variable") == "Test"

    _TestGlobals.set_values(some_variable=7, another_variable="hello")

    assert _TestGlobals.get_value("some_variable") == 7
    assert _TestGlobals.get_value("another_variable") == "hello"

    _TestGlobals.set_values(mapping={"k1": "v1", "k2": "v2"})

    assert _TestGlobals.get_value("mapping")["k1"] == "v1"
    assert _TestGlobals.get_value("mapping")["k2"] == "v2"


def test_singleton_behavior():
    """
    Test that the global state behaves as a singleton.
    """
    first_instance = _TestGlobals.get_instance()
    second_instance = _TestGlobals.get_instance()

    assert first_instance is second_instance

    # Modify using one instance and check with the other
    first_instance.set_values(some_variable=10)
    assert second_instance.get_value("some_variable") == 10

    first_instance.set_values(mapping={"k1": "v1", "k2": "v2"})
    assert second_instance.get_value("mapping")["k1"] == "v1"
    assert second_instance.get_value("mapping")["k2"] == "v2"
</file>

<file path="tests/main/test_json.py">
import json

import pytest

from langroid.parsing.parse_json import extract_top_level_json, parse_imperfect_json


@pytest.mark.parametrize(
    "s, expected",
    [
        ("nothing to see here", []),
        (
            '{\n"key": \n"value \n with unescaped \nnewline"\n}',
            ['{"key": "value \\n with unescaped \\nnewline"}'],
        ),
        (
            '{\n"key": \n"value \\n with escaped \\nnewline"}',
            ['{"key": "value \\n with escaped \\nnewline"}'],
        ),
        (
            """
            Ok, thank you.
            {
                "request": "file_exists",
                "filename": "test.txt"
            }
            Hope you can tell me!
        """,
            [
                """
            {
                "request": "file_exists",
                "filename": "test.txt"
            }
            """
            ],
        ),
        (
            """
        [1, 2, 3]
        """,
            [],
        ),  # should not recognize array as json
        # The below case has lots of json headaches/failures:
        # trailing commans and forgotten quotes
        (
            """
            {
            key_no_quotes: "value",
            "key": value_no_quote,
            key1: value with spaces,
            key2: 24,
            key3: { "a": b, "c": d e, 
               "f": g h k,
               }, },
            """,
            [
                """
                {
                "key_no_quotes": "value",
                "key": "value_no_quote",
                "key1": "value with spaces",
                "key2": 24,
                "key3": {"a": "b", "c": "d e", "f": "g h k"}
                }
                """
            ],
        ),
    ],
)
def test_extract_top_level_json(s, expected):
    top_level_jsons = extract_top_level_json(s)
    top_level_jsons = [json.loads(s.replace("'", '"')) for s in top_level_jsons]
    expected = [json.loads(s.replace("'", '"')) for s in expected]
    assert len(top_level_jsons) == len(expected)
    assert top_level_jsons == expected


@pytest.mark.parametrize(
    "input_json,expected_output",
    [
        # TODO - this aspect of parse_imperfect_json is NOT used anywhere --
        # if we do want to use it, how do we rationalize this behavior?
        (
            '{"key": "value \n with unescaped \nnewline"}',
            {"key": "value \n with unescaped \nnewline"},
        ),
        (
            '{"key": "value \\n with escaped \\nnewline"}',
            {"key": "value \n with escaped \nnewline"},
        ),
        ('{"key": "value", "number": 42}', {"key": "value", "number": 42}),
        (
            '{"key": "value", "number": 42,}',
            {"key": "value", "number": 42},
        ),  # extra comma
        ('{"key": null}', {"key": None}),
        ('{"t": true, "f": false}', {"t": True, "f": False}),
        ("{'key': 'value'}", {"key": "value"}),
        ("{'key': (1, 2, 3)}", {"key": (1, 2, 3)}),
        ("{key: 'value'}", {"key": "value"}),
        ("{'key': value}", {"key": "value"}),
        ("{key: value}", {"key": "value"}),
        (
            '{"key": "you said "hello" yesterday"}',  # did not escape inner quotes
            {"key": 'you said "hello" yesterday'},
        ),
        ("[1, 2, 3]", [1, 2, 3]),
        (
            """
    {
        "string": "Hello, World!",
        "number": 42,
        "float": 3.14,
        "boolean": true,
        "null": null,
        "array": [1, 2, 3],
        "object": {"nested": "value"},
        "mixed_array": [1, "two", {"three": 3}]
    }
    """,
            {
                "string": "Hello, World!",
                "number": 42,
                "float": 3.14,
                "boolean": True,
                "null": None,
                "array": [1, 2, 3],
                "object": {"nested": "value"},
                "mixed_array": [1, "two", {"three": 3}],
            },
        ),
    ],
)
def test_parse_imperfect_json(input_json, expected_output):
    assert parse_imperfect_json(input_json) == expected_output


@pytest.mark.parametrize(
    "invalid_input",
    [
        "",
        "not a json string",
        "True",  # This is a valid Python literal, but not a dict or list
        "42",  # This is a valid Python literal, but not a dict or list
    ],
)
def test_invalid_json_raises_error(invalid_input):
    with pytest.raises(ValueError):
        parse_imperfect_json(invalid_input)
</file>

<file path="tests/main/test_llm_pdf_parser.py">
from pathlib import Path

import nest_asyncio
import pytest

from langroid.parsing.document_parser import DocumentParser
from langroid.parsing.parser import LLMPdfParserConfig, ParsingConfig, PdfParsingConfig
from langroid.utils.configuration import Settings, set_global

nest_asyncio.apply()


@pytest.mark.asyncio
@pytest.mark.parametrize("split_on_page", [True, False])
@pytest.mark.parametrize("pdf_file", ["imagenet.pdf"])
async def test_llm_pdf_parser(pdf_file, split_on_page):
    # disable `chat_model` setting so it doesn't interfere with mdl below
    set_global(Settings(chat_model=""))
    current_dir = Path(__file__).resolve().parent
    path = current_dir.parent / "main" / "data" / pdf_file

    parsing_config = ParsingConfig(
        n_neighbor_ids=2,
        pdf=PdfParsingConfig(
            library="llm-pdf-parser",
            llm_parser_config=LLMPdfParserConfig(
                model_name="gemini/gemini-2.0-flash",
                split_on_page=split_on_page,
                requests_per_minute=3,
            ),
        ),
    )

    llm_parser = DocumentParser.create(
        path.as_posix(),
        parsing_config,
    )
    doc = llm_parser.get_doc()
    pages = [page for page in llm_parser.iterate_pages()]

    assert isinstance(doc.content, str)
    assert len(doc.content) > 0  # assuming the PDF is not empty

    assert (
        "with magnitudes proportional to the corresponding eigenvalues"
        in pages[0][1].strip()
    )
    assert any("obvious in static images" in p[1] for p in pages)
    assert doc.metadata.source == str(path)

    docs = llm_parser.get_doc_chunks()
    assert len(docs) > 0
    assert all(d.metadata.is_chunk for d in docs)
    n = len(docs)
    k = llm_parser.config.n_neighbor_ids
    if n > 2 * k + 1:
        assert len(docs[n // 2].metadata.window_ids) == 2 * k + 1
</file>

<file path="tests/main/test_markitdown_parser.py">
import os

from langroid.parsing.document_parser import DocumentParser
from langroid.parsing.parser import (
    MarkitdownPPTXParsingConfig,
    MarkitdownXLSParsingConfig,
    ParsingConfig,
)


def test_markitdown_xls_parser():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    tests_root = os.path.abspath(os.path.join(current_dir, ".."))

    path1 = os.path.join(tests_root, "main", "data", "sample.xlsx")

    # Test XLS parsing
    xls_parser = DocumentParser.create(
        path1,
        ParsingConfig(
            n_neighbor_ids=2,
            xls=MarkitdownXLSParsingConfig(),
        ),
    )
    doc_xls = xls_parser.get_doc()
    assert isinstance(doc_xls.content, str)
    assert len(doc_xls.content) > 0
    assert doc_xls.metadata.source == path1

    xls_chunks = xls_parser.get_doc_chunks()
    assert len(xls_chunks) > 0
    assert all(chunk.metadata.is_chunk for chunk in xls_chunks)
    assert all(path1 in chunk.metadata.source for chunk in xls_chunks)


def test_markitdown_pptx_parser():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    tests_root = os.path.abspath(os.path.join(current_dir, ".."))

    path = os.path.join(tests_root, "main", "data", "sample.pptx")

    # Test PPTX parsing
    pptx_parser = DocumentParser.create(
        path,
        ParsingConfig(
            n_neighbor_ids=2,
            pptx=MarkitdownPPTXParsingConfig(),
        ),
    )
    doc_pptx = pptx_parser.get_doc()
    assert isinstance(doc_pptx.content, str)
    assert len(doc_pptx.content) > 0
    assert doc_pptx.metadata.source == path

    pptx_chunks = pptx_parser.get_doc_chunks()
    assert len(pptx_chunks) > 0
    assert all(chunk.metadata.is_chunk for chunk in pptx_chunks)
    assert all(path in chunk.metadata.source for chunk in pptx_chunks)
</file>

<file path="tests/main/test_md_parser.py">
import re
from dataclasses import dataclass
from typing import List

import pytest

from langroid.parsing.md_parser import (
    MarkdownChunkConfig,
    Node,
    chunk_markdown,
    count_words,
    parse_markdown_headings,
    recursive_chunk,
)


@dataclass
class SectionData:
    header: str
    content: str

    def to_markdown(self) -> str:
        return f"{self.header}\n{self.content}\n\n"


CH1_DATA = SectionData(
    header="# Chapter 1",
    content="""Intro paragraph under Chapter 1.
This is a somewhat longer paragraph that might require splitting
if token limits are low.
```java
# Fake Chapter in Code Block - just a comment!
This is not a real chapter.
## Comment in code!
```
""",
)

SEC1_1_DATA = SectionData(
    header="## Section 1.1",
    content="""Some text in Section 1.1. 
It might include multiple sentences. Here is another sentence.
```python
# Throw in some comments just to mix things up.
def some_function():
    return None
## end of function definition
```
""",
)

SEC1_2_DATA = SectionData(
    header="## Section 1.2",
    content="""- Bullet A
- Bullet B""",
)

CH2_DATA = SectionData(
    header="# Chapter 2", content="""Final paragraph in Chapter 2."""
)


# Combined fixture with all the data
@pytest.fixture
def markdown_sections() -> List[SectionData]:
    return [CH1_DATA, SEC1_1_DATA, SEC1_2_DATA, CH2_DATA]


@pytest.fixture
def sample_markdown(markdown_sections) -> str:
    return "".join(section.to_markdown() for section in markdown_sections)


def test_parse_markdown_headings(sample_markdown, markdown_sections):
    """
    Test the parse_markdown_headings_only function using a sample Markdown document.
    We verify that the resulting hierarchy of Nodes matches our expectations.
    """
    # Parse the sample markdown to a list of top-level Node objects
    tree = parse_markdown_headings(sample_markdown)
    ch1, sec1_1, sec1_2, ch2 = markdown_sections

    # We expect two top-level headings: Chapter 1 and Chapter 2
    assert len(tree) == 2

    # Check Chapter 1 node
    ch1_node = tree[0]
    assert isinstance(ch1_node, Node)
    assert ch1_node.content == ch1.header
    assert ch1_node.path == [ch1.header]

    # Under Chapter 1, we expect:
    #   1. A paragraph (intro)
    #   2. Heading "Section 1.1"
    #   3. Heading "Section 1.2"
    assert len(ch1_node.children) == 3

    intro_para = ch1_node.children[0]
    assert intro_para.content.strip() == ch1.content.strip()
    assert intro_para.path == [ch1.header]
    assert len(intro_para.children) == 0  # Paragraph has no sub-children

    section_11 = ch1_node.children[1]
    assert section_11.content == sec1_1.header
    assert section_11.path == [ch1.header, sec1_1.header]

    # Under Section 1.1, we expect a paragraph node
    assert len(section_11.children) == 1
    sec_11_para = section_11.children[0]
    assert sec_11_para.content.strip() == sec1_1.content.strip()
    assert sec_11_para.path == [ch1.header, sec1_1.header]

    section_12 = ch1_node.children[2]
    assert section_12.content == sec1_2.header
    assert section_12.path == [ch1.header, sec1_2.header]

    # Under Section 1.2, we expect a single content node containing the bullet points
    assert len(section_12.children) == 1
    bullets_node = section_12.children[0]
    # The bullet items are joined with newlines (per the extract_text logic)
    assert bullets_node.content.strip() == sec1_2.content.strip()
    assert bullets_node.path == [ch1.header, sec1_2.header]

    # Check Chapter 2 node
    ch2_node = tree[1]
    assert ch2_node.content == ch2.header
    assert ch2_node.path == [ch2.header]
    # Under Chapter 2, we expect a single paragraph
    assert len(ch2_node.children) == 1
    ch2_para = ch2_node.children[0]
    assert ch2_para.content.strip() == ch2.content.strip()
    assert ch2_para.path == [ch2.header]
    assert len(ch2_para.children) == 0


def test_empty_document():
    tree = parse_markdown_headings("")
    assert tree == []


def test_no_headers_only_paragraphs():
    md = """This is just a paragraph.
    
And another one.
"""
    tree = parse_markdown_headings(md)
    assert len(tree) == 1
    assert all(node.path == [] for node in tree)
    assert tree[0].content.strip() == md.strip()


def test_headers_with_no_content():
    md = """# Title
## Subsection
### Subsubsection
"""
    tree = parse_markdown_headings(md)
    assert len(tree) == 1
    assert tree[0].content == "# Title"
    assert len(tree[0].children) == 1
    assert tree[0].children[0].content == "## Subsection"
    assert len(tree[0].children[0].children) == 1
    assert tree[0].children[0].children[0].content == "### Subsubsection"
    assert tree[0].children[0].children[0].children == []


def test_header_with_inline_formatting():
    md = """# Header with **bold** and *italic* text
Some _content_.
"""
    tree = parse_markdown_headings(md)
    assert tree[0].content == "# Header with **bold** and *italic* text"
    assert tree[0].children[0].content.strip() == "Some _content_."


def test_lists_and_code_blocks():
    md = """# List and Code

## List Section
- Item 1
- Item 2

## Code Section

print("Hello, world!")
    
"""
    tree = parse_markdown_headings(md)

    list_section = tree[0].children[0]
    assert list_section.content == "## List Section"
    list_content = list_section.children[0]
    assert list_content.content == "- Item 1\n- Item 2"

    code_section = tree[0].children[1]
    assert code_section.content == "## Code Section"
    code_block = code_section.children[0]
    assert 'print("Hello, world!")' in code_block.content


def test_multiple_same_level_headers():
    md = """# Header A
Paragraph A.

# Header B
Paragraph B.
"""
    tree = parse_markdown_headings(md)
    assert len(tree) == 2
    assert tree[0].content == "# Header A"
    assert tree[0].children[0].content.strip() == "Paragraph A."
    assert tree[1].content == "# Header B"
    assert tree[1].children[0].content.strip() == "Paragraph B."


def test_header_skipping_levels():
    md = """# H1
### H3
Some text.
"""
    tree = parse_markdown_headings(md)
    h1 = tree[0]
    assert h1.content == "# H1"
    # H3 should be treated as a direct child of H1
    h3 = h1.children[0]
    assert h3.content == "### H3"
    assert h3.path == ["# H1", "### H3"]
    assert h3.children[0].content.strip() == "Some text."


@pytest.mark.parametrize("chunk_size_factor", [1.2, 100])
@pytest.mark.parametrize("rollup", [True, False])
def test_markdown_chunking(
    sample_markdown,
    markdown_sections,
    chunk_size_factor: int,
    rollup: bool,
):
    """
    Given a Markdown document with sections and sub-sections, this test verifies that:
      - The tree is built correctly from the document.
      - The chunking process produces distinct chunks with enriched header context.
      - A header-only node does not duplicate the header in its own chunk.

    The sample document has:
      - Chapter 1 with a preamble.
      - Section 1.1 with content.
      - Section 1.2 with bullet content.
      - Chapter 2 with its own content.
    """

    ch1, sec1_1, sec1_2, ch2 = markdown_sections
    chunk_size = chunk_size_factor * count_words(ch1.content)
    config = MarkdownChunkConfig(
        chunk_size=chunk_size,
        overlap_tokens=5,
        variation_percent=0.2,
        rollup=rollup,
    )

    # Structure-aware chunking of the text into enriched chunks.
    chunks: List[str] = chunk_markdown(sample_markdown, config)

    if rollup and chunk_size > count_words(sample_markdown):
        assert len(chunks) == 1, f"Expected 1 chunk, got {len(chunks)}"
        assert (
            chunks[0].split() == sample_markdown.split()
        ), "Chunk does not match original Markdown"
        # check that line-breaks in each section content are preserved
        for section in markdown_sections:
            assert (
                section.content in chunks[0]
            ), f"Section content not found in the chunk: {section.content}"

    if not rollup or chunk_size < count_words(sample_markdown):
        # Based on our document structure, we expect four chunks:
        # 1. Chapter 1's preamble content (enriched with prefix "# Chapter 1")
        # 2. Section 1.1 content (enriched with prefix "# Chapter 1 \n\n # Section 1.1")
        # 3. Section 1.2 content (enriched with prefix "# Chapter 1 \n\n # Section 1.2")
        # 4. Chapter 2 content (enriched with prefix "# Chapter 2")
        assert len(chunks) == 4, f"Expected 4 chunks, got {len(chunks)}"

        assert (
            chunks[0].split() == ch1.to_markdown().split()
        ), "Chunk 1 does not match Chapter 1 preamble"
        assert (
            ch1.content.strip() in chunks[0]
        ), "Chapter 1 content not preserved in Chunk 1"

        assert chunks[1].split() == (
            (ch1.header + config.header_context_sep + sec1_1.to_markdown()).split()
        ), "Chunk 2 does not match Section 1.1"
        assert (
            sec1_1.content.strip() in chunks[1]
        ), "Section 1.1 content not preserved in Chunk 2"

        assert chunks[2].split() == (
            (ch1.header + config.header_context_sep + sec1_2.to_markdown()).split()
        ), "Chunk 3 does not match Section 1.2"
        assert (
            sec1_2.content.strip() in chunks[2]
        ), "Section 1.2 content not preserved in Chunk 3"

        assert (
            chunks[3].split() == ch2.to_markdown().split()
        ), "Chunk 4 does not match Chapter 2"
        assert (
            ch2.content.strip() in chunks[3]
        ), "Chapter 2 content not preserved in Chunk 4"


@pytest.mark.parametrize("rollup", [False, True])
@pytest.mark.parametrize("chunk_size", [20, 500])
def test_chunking_sizes(
    chunk_size: int,
    rollup: bool,
):
    """
    Test that the chunking logic produces chunks that:
      - Have token counts between the lower and upper bounds
        (except possibly the final chunk)
      - Include the header enrichment in each chunk's text
      - Include the expected overlap between consecutive chunks
    """
    # Create a long text consisting of 200 repeated tokens ("word")
    long_text = " ".join(["word"] * 200)  # 200 tokens
    md_text = f"""# Chapter 1
{long_text}
"""

    # Set chunking configuration.
    # Here chunk_size=50 means that (with variation_percent=0.2)
    # we expect chunks to have between 40 and 60 tokens.
    config = MarkdownChunkConfig(
        chunk_size=chunk_size, rollup=rollup, overlap_tokens=5, variation_percent=0.2
    )

    # Produce the enriched chunks from the tree.
    chunks = chunk_markdown(md_text, config)

    # Compute the allowed bounds.
    lower_bound = config.chunk_size * (1 - config.variation_percent)
    upper_bound = config.chunk_size * (1 + config.variation_percent)

    # Verify each chunk's token count.
    # For all chunks except possibly the final one,
    # we expect at least lower_bound tokens.
    for i, chunk in enumerate(chunks):
        tokens = count_words(chunk)
        if i < len(chunks) - 1:
            assert (
                tokens >= lower_bound
            ), f"Chunk {i} has {tokens} tokens, expected at least {lower_bound}"
        assert (
            tokens <= 2 * upper_bound
        ), (  # relaxed check
            f"Chunk {i} has {tokens} tokens, expected at most {upper_bound}"
        )

    # Check that each chunk is enriched with the header context.
    # Each chunk's text should contain "Chapter 1" since that is the header path.
    for i, chunk in enumerate(chunks):
        assert "Chapter 1" in chunk, f"Chunk {i} is missing header enrichment"

    # Verify that consecutive chunks share the expected overlap.
    # For each consecutive pair of chunks, the last `overlap_tokens`
    # tokens of the previous chunk
    # should appear among the first tokens of the next chunk.
    if len(chunks) > 1:
        for i in range(len(chunks) - 1):
            prev_tokens = chunks[i].split()
            next_tokens = chunks[i + 1].split()
            # Get the last few tokens from the previous chunk:
            expected_overlap = prev_tokens[-config.overlap_tokens :]
            # Look at the beginning of the next chunk
            # (allowing some room for header enrichment).
            next_head = next_tokens[:15]
            for word in expected_overlap:
                assert (
                    word in next_head
                ), f"Overlap word '{word}' from chunk {i} not found in chunk {i+1}"


@pytest.mark.parametrize("rollup", [False, True])
def test_chunking_word_set_consistency(rollup: bool):
    """
    Test that when converting Markdown text to chunks, the union of distinct words
    from the original content is the same as the union of distinct words from the
    chunks (ignoring header enrichment).
    """
    # Define a header and content.
    header = "# Chapter 1"
    # Create content text with 100 unique words.
    content_tokens = [f"word{i}" for i in range(1, 101)]
    content_text = " ".join(content_tokens)

    # Create a sample Markdown document with a header and content.
    md_text = f"{header}\n\n{content_text}\n"

    # Set up the chunking configuration.
    config = MarkdownChunkConfig(
        chunk_size=20,  # small chunk size for testing
        overlap_tokens=5,  # intended overlap tokens
        variation_percent=0.2,  # chunks between 16 and 24 tokens
        rollup=rollup,
    )

    # Produce enriched chunks from the tree.
    chunks = chunk_markdown(md_text, config)

    # Remove header enrichment ("Chapter 1\n\n") from each chunk and collect all words.
    chunk_word_set = set()
    for chunk in chunks:
        assert chunk.startswith(header)
        # Split into words and update the set.
        chunk_word_set.update(chunk[len(header) :].split())

    # Compute the distinct set of words in the original content.
    original_word_set = set(content_text.split())

    # Verify that the union of words from the chunks
    # matches the original content's words.
    assert (
        chunk_word_set == original_word_set
    ), f"Word sets do not match.\nExpected: {original_word_set}\nGot: {chunk_word_set}"


def smart_tokenize(text: str) -> list:
    """
    Tokenize text by first inserting a space after a period if it's immediately
    followed by an uppercase letter (a common side-effect of line joining),
    then splitting on whitespace.
    """
    fixed = re.sub(r"(\.)([A-Z])", r"\1 \2", text)
    return fixed.split()


def generate_sentence(word_count: int, sentence_id: int) -> str:
    """
    Generate a dummy sentence with `word_count` words and a trailing period.
    Uses "wordX" to identify each word, plus a "sentence{ID}" marker at the end.
    """
    words = [f"word{i}" for i in range(1, word_count + 1)]
    # Put a sentinel to identify the sentence number
    # and close with a period for the splitting logic.
    sentence_str = " ".join(words) + f" sentence{sentence_id}."
    return sentence_str


def generate_paragraph(
    sentence_count: int,
    words_per_sentence: int,
    paragraph_id: int,
) -> str:
    """
    Generate a dummy paragraph with `sentence_count` sentences,
    each with `words_per_sentence` words.
    """
    sentences = [
        generate_sentence(words_per_sentence, s_id + 1)
        for s_id in range(sentence_count)
    ]
    # Add a sentinel "PARA{ID}" at the end to visually check paragraph boundaries.
    para_str = " ".join(sentences) + f" PARA{paragraph_id}"
    return para_str


@pytest.mark.parametrize("chunk_size_factor", [0.5, 1, 1.5])
@pytest.mark.parametrize("rollup", [False, True])
def test_degenerate_markdown_parsing_and_chunking(
    chunk_size_factor: float,
    rollup: bool,
):
    # A degenerate Markdown document: plain text without any Markdown formatting.

    paragraph1 = generate_paragraph(
        sentence_count=10, words_per_sentence=50, paragraph_id=1
    )
    paragraph2 = generate_paragraph(
        sentence_count=10, words_per_sentence=50, paragraph_id=2
    )

    # Combine paragraphs with a double-newline
    plain_text = paragraph1 + "\n\n" + paragraph2
    plain_text = plain_text.strip()

    # Parse the plain text using our Markdown parser.
    tree = parse_markdown_headings(plain_text)

    # For plain text, we expect a single node.
    assert len(tree) == 1, "Expected one node for plain text"
    node = tree[0]

    # Use smart_tokenize to account for missing spaces at line joins.
    expected_tokens = set(smart_tokenize(plain_text))
    actual_tokens = set(smart_tokenize(node.content))
    assert (
        expected_tokens == actual_tokens
    ), "Distinct word sets from node content and original plain text do not match"

    # Plain text should not have header enrichment.
    assert node.path == [] or node.path == [""], "Plain text should have no header path"
    assert node.children == [], "Plain text should not produce any children nodes"

    # Set up a chunking configuration.
    config = MarkdownChunkConfig(
        desired_chunk_tokens=50,  # high enough to avoid splitting for this test
        overlap_tokens=5,
        variation_percent=0.2,
        rollup=rollup,
    )

    # Generate chunks from the parsed tree.
    chunks = chunk_markdown(plain_text, config)

    # Collect distinct words from the chunks.
    chunk_word_set = set()
    for chunk in chunks:
        # Since there is no header enrichment (no headers in plain text),
        # we can tokenize directly.
        chunk_word_set.update(smart_tokenize(chunk))

    original_word_set = set(smart_tokenize(plain_text))
    assert chunk_word_set == original_word_set, (
        f"Word sets do not match between chunks and original text.\n"
        f"Expected: {original_word_set}\nGot: {chunk_word_set}"
    )


def condensed_chunk_view(chunks: List[str], max_words: int = 5) -> str:
    """
    Return a compact string showing each chunk's first/last few words and total length.
    """
    lines = []
    for i, c in enumerate(chunks):
        words = c.split()
        total = len(words)
        if total <= 2 * max_words:
            preview = " ".join(words)
        else:
            preview = (
                " ".join(words[:max_words]) + " ... " + " ".join(words[-max_words:])
            )
        lines.append(f"Chunk {i+1} (total {total} words): {preview}")
    return "\n".join(lines)


# ----------------------------------------------------------------
# THE TEST
# ----------------------------------------------------------------


@pytest.mark.parametrize(
    "chunk_size, overlap_tokens, variation_percent",
    [
        (50, 5, 0.3),  # Scenario 1
        (20, 5, 0.3),  # Scenario 2
        (8, 3, 0.3),  # Scenario 3 (forces word-level splits)
    ],
)
def test_recursive_chunk(chunk_size, overlap_tokens, variation_percent):
    """
    Tests that the chunker respects paragraph boundaries when possible,
    then sentence boundaries, and only splits sentences when no other option
    is possible under the given config.
    """
    # Generate some text with 2 paragraphs, each having 3 sentences of 10 words.
    # ~ Each paragraph => 3 sentences =>
    #    each sentence has ~10 words => ~30 words per paragraph.
    # So total words ~60. This helps us see chunking behavior across boundaries.
    paragraph1 = generate_paragraph(
        sentence_count=3, words_per_sentence=10, paragraph_id=1
    )
    paragraph2 = generate_paragraph(
        sentence_count=3, words_per_sentence=10, paragraph_id=2
    )

    # Combine paragraphs with a double-newline
    text = paragraph1 + "\n\n" + paragraph2

    config = MarkdownChunkConfig(
        chunk_size=chunk_size,
        overlap_tokens=overlap_tokens,
        variation_percent=variation_percent,
    )

    chunks = recursive_chunk(text, config)

    # Print a condensed view for manual inspection
    print("\n===================================")
    print(
        f"Config: chunk_size={chunk_size}, "
        f"overlap_tokens={overlap_tokens}, "
        f"variation_percent={variation_percent}\n"
    )
    print("Generated Text (first 30 words):")
    print(" ".join(text.split()[:30]), "...")
    print("\nChunks:")
    print(condensed_chunk_view(chunks, max_words=5))
    print("===================================\n")

    # Basic asserts:
    # 1. No chunk should exceed the upper bound in terms of word count
    upper_bound = chunk_size * (1 + variation_percent)
    for i, chunk in enumerate(chunks):
        word_count_in_chunk = len(chunk.split())
        assert word_count_in_chunk <= upper_bound + 5, (
            f"Chunk {i+1} has {word_count_in_chunk} words, "
            f"exceeds upper bound (~{upper_bound:.1f})."
        )

    # 2. Check that chunking doesn't produce empty chunks
    for i, chunk in enumerate(chunks):
        assert chunk.strip(), f"Chunk {i+1} is empty!"

    # 3. (Optional) If chunk_size is >= total words, we expect exactly 1 chunk
    total_words = len(text.split())
    if total_words <= chunk_size * (1 + variation_percent):
        assert len(chunks) == 1, (
            "Expected a single chunk since the text is short enough, "
            f"but got {len(chunks)} chunks."
        )


def test_recursive_chunk_enhanced():
    config = MarkdownChunkConfig(
        chunk_size=8,
        overlap_tokens=2,
        variation_percent=0.3,
    )

    # Construct a text with 2 paragraphs, each containing 2 sentences,
    # plus paragraph markers
    paragraph1 = (
        "word1 word2 word3 word4 sentence1.\n"
        "word5 word6 word7 word8 sentence2. PARA1"
    )
    paragraph2 = (
        "cat1 cat2 cat3 cat4 sentence1.\n" "cat5 cat6 cat7 cat8 sentence2. PARA2"
    )

    text = paragraph1 + "\n\n" + paragraph2

    # Now chunk it
    chunks = recursive_chunk(text, config)

    print("\n------------------ ENHANCED CHUNK TEST ------------------")
    for i, c in enumerate(chunks, 1):
        print(f"Chunk {i} ({len(c.split())} words):\n{c}\n")

    # A. Check no chunk splits mid-sentence
    for i, chunk in enumerate(chunks, 1):
        # We expect every sentence boundary to remain intact:
        # "sentence1." or "sentence2." should not be truncated in the middle
        assert (
            "sentence1." in chunk or "sentence2." in chunk or "PARA" in chunk
        ), f"Chunk {i} might have truncated a sentence or lost markers: {chunk}"

    # B. Check paragraph markers do not get merged.
    # We expect that "PARA1" and "PARA2" never appear in the same chunk.
    for i, chunk in enumerate(chunks, 1):
        assert not (
            "PARA1" in chunk and "PARA2" in chunk
        ), "Found both PARA1 and PARA2 in the same chunk!"

    # C. If there's overlap, ensure it's only from chunk (i) to chunk (i+1).
    # A naive check: the last 2 tokens of chunk i = the first 2 tokens of chunk i+1,
    # but chunk i+2 does not contain that same overlap at the start.
    for i in range(len(chunks) - 1):
        chunk_i_tokens = chunks[i].split()
        chunk_i_plus_1_tokens = chunks[i + 1].split()

        overlap_i = chunk_i_tokens[-2:]  # last 2 tokens of chunk i
        start_of_chunk_i_plus_1 = chunk_i_plus_1_tokens[
            :2
        ]  # first 2 tokens of chunk i+1
        assert overlap_i == start_of_chunk_i_plus_1, (
            f"Expected chunk {i+1} to start with overlap tokens from chunk {i}.\n"
            f"Overlap {overlap_i}, got {start_of_chunk_i_plus_1}"
        )

        # Now check chunk (i+2) if it exists
        if i + 2 < len(chunks):
            chunk_i_plus_2_tokens = chunks[i + 2].split()
            # The first 2 tokens of chunk i+2 should NOT match overlap_i
            start_of_chunk_i_plus_2 = chunk_i_plus_2_tokens[:2]
            assert (
                start_of_chunk_i_plus_2 != overlap_i
            ), f"Found repeated overlap in chunk {i+2} that belonged to chunk {i}!"

    # D. For formatting, ensure that if a chunk boundary occurs right before
    # a paragraph break, the next chunk still preserves '\n\n'
    # if it was originally there.
    # e.g. if chunk i ends in "sentence2. PARA1" plus "\n\n", the next chunk
    # should start with something that includes the next paragraph. We
    # can do a simple check that either chunk i ends with \n\n or chunk i+1
    # starts with it.
    for i in range(len(chunks) - 1):
        # If the original text had \n\n between paragraphs, we expect
        # either chunk i ends with \n\n or chunk i+1 starts with \n\n.
        if "PARA1" in chunks[i]:  # likely the end of paragraph 1
            # then chunk i+1 should contain the next paragraph's text,
            # ideally starting with \n\n + "cat1" or an overlap snippet.
            next_chunk = chunks[i + 1]
            # Checking minimal condition: that next_chunk includes "cat1" or "cat5"...
            assert "cat1" in next_chunk or "cat5" in next_chunk, (
                f"Paragraph formatting might have been lost: chunk {i+1} "
                f"does not contain cat1/cat5"
            )
</file>

<file path="tests/main/test_msg_routing.py">
from typing import Optional

import pytest

import langroid as lr
from langroid import ChatDocument
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task, TaskConfig
from langroid.language_models.mock_lm import MockLMConfig
from langroid.parsing.routing import parse_addressed_message
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import AT, DONE, SEND_TO

ADDRESSES = [
    AT + "Alice ",
    AT + "Alice,",
    AT + "Alice:",
    f"{SEND_TO}Alice ",
    f"{SEND_TO}Alice:",
    f"{SEND_TO}Alice,",
]


@pytest.mark.parametrize("address", ADDRESSES)
def test_parse_address(address: str):
    """Test that the address is parsed correctly."""
    msg = f"ok {AT}all, {AT}xyz here is my message to {address} -- {address} Hello"
    (addressee, content) = parse_addressed_message(
        msg,
        addressing=AT if AT in address else SEND_TO,
    )
    assert addressee == "Alice"
    assert content == "Hello"


@pytest.mark.parametrize("prefix", [AT, ""])  # enable AT-addressing?
@pytest.mark.parametrize(
    "address",
    ADDRESSES,
)
@pytest.mark.parametrize("x,answer", [(5, 25)])
def test_addressing(
    test_settings: Settings, prefix: str, address: str, x: int, answer: int
):
    """Test that an agent is able to address another agent in a message."""
    set_global(test_settings)

    class BobAgent(ChatAgent):
        def llm_response(
            self, message: Optional[str | ChatDocument] = None
        ) -> Optional[ChatDocument]:
            if (
                isinstance(message, ChatDocument)
                and message.metadata.sender_name == "Alice"
            ):
                return self.create_llm_response(DONE + " " + message.content)

            addr = AT if AT in address else SEND_TO
            # throw in some distracting addresses, to test that
            # only the last one is picked up
            return self.create_llm_response(
                f"Ok {addr}all here {addr}Junk is my question: {address} {x}"
            )

    class AliceAgent(ChatAgent):
        def llm_response(
            self, message: Optional[str | ChatDocument] = None
        ) -> Optional[ChatDocument]:
            # message.content will either be just an an int-string "5"
            # (if prefix != "") or Bob's entire msg otherwise (and hence not an int)
            try:
                y = int(message.content.strip())
            except ValueError:
                return None
            answer = y * y
            return self.create_llm_response(f"{DONE} {answer}")

    bob_config = ChatAgentConfig(name="Bob")

    bob = BobAgent(bob_config)
    bob_task = Task(
        bob,
        interactive=False,
        config=TaskConfig(addressing_prefix=prefix),
    )

    alice_config = ChatAgentConfig(name="Alice")
    alice = AliceAgent(alice_config)
    alice_task = Task(alice, interactive=False)

    bob_task.add_sub_task(alice_task)

    result = bob_task.run()
    if prefix == "" and AT in address:
        assert result is None
    else:
        assert answer == int(result.content.strip())


class MockAgent(ChatAgent):
    def user_response(
        self,
        msg: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        """
        Mock user_response method for testing
        """
        txt = msg if isinstance(msg, str) else msg.content
        map = dict([("2", "3"), ("3", "5")])
        response = map.get(txt)
        # return the increment of input number
        return self.create_user_response(response)


@pytest.mark.parametrize("interactive", [True, False])
@pytest.mark.parametrize("prefix", [AT, SEND_TO])
@pytest.mark.parametrize("addressee", ["user", "User", "USER"])
def test_user_addressing(interactive: bool, prefix: str, addressee: str):
    """Test that when LLM addresses user explicitly, the user
    is allowed to respond, regardless of interactive mode"""

    address = prefix + addressee
    agent = lr.ChatAgent(
        ChatAgentConfig(
            name="Mock",
            llm=MockLMConfig(default_response=f"Ok here we go {address} give a number"),
        )
    )
    task = lr.Task(
        agent,
        interactive=interactive,
        default_human_response=f"{DONE} 1",
        config=TaskConfig(addressing_prefix=AT),
    )
    result = task.run()
    assert "1" in result.content


@pytest.mark.parametrize("interactive", [True, False])
@pytest.mark.parametrize("prefix", [AT, SEND_TO])
@pytest.mark.parametrize("addressee", ["user", "User", "USER"])
def test_no_addressing(interactive: bool, prefix: str, addressee: str):
    """Test that when a Task is configured with TaskConfig.addressing_prefix = ''
    (the default), then no routing is recognized. This ensures there is no
    "accidental" addressing due to presence of route-line characters in the message.
    Note the TaskConfig.address_prefix only affects whether "@"-like addressing is
    recognized; it does not affect whether SEND_TO is recognized; SEND_TO-based routing
    is always enabled, as this is a key mechanism by which a response from an entity
    can direct the msg to another entity.
    """

    address = prefix + addressee
    agent = lr.ChatAgent(
        ChatAgentConfig(
            name="Mock",
            llm=MockLMConfig(default_response=f"Ok here we go {address} give a number"),
        )
    )
    task = lr.Task(
        agent,
        interactive=interactive,
        default_human_response=f"{DONE} 1",
    )
    result = task.run()
    if interactive or prefix == SEND_TO:
        assert "1" in result.content  # user gets chance anyway, without addressing
    else:
        assert result is None  # user not explicitly addressed, so they can't respond
</file>

<file path="tests/main/test_multi_agent_complex_async.py">
import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tools.orchestration import DoneTool
from langroid.agent.tools.recipient_tool import RecipientTool
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig
from langroid.prompts.prompts_config import PromptsConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE
from langroid.vector_store.base import VectorStoreConfig


class _TestChatAgentConfig(ChatAgentConfig):
    max_tokens: int = 200
    vecdb: VectorStoreConfig = None
    llm: OpenAIGPTConfig = OpenAIGPTConfig(
        cache_config=RedisCacheConfig(fake=False),
        use_chat_for_completion=True,
    )
    parsing: ParsingConfig = ParsingConfig()
    prompts: PromptsConfig = PromptsConfig(
        max_tokens=200,
    )


EXPONENTIALS = "3**4 8**3"


@pytest.mark.asyncio
@pytest.mark.parametrize("fn_api", [True, False])
@pytest.mark.parametrize("tools_api", [True, False])
@pytest.mark.parametrize("constrain_recipients", [True, False])
@pytest.mark.parametrize("use_done_tool", [True, False])
async def test_agents_with_recipient(
    test_settings: Settings,
    fn_api: bool,
    tools_api: bool,
    use_done_tool: bool,
    constrain_recipients: bool,
):
    set_global(test_settings)
    master_cfg = _TestChatAgentConfig(name="Master")

    planner_cfg = _TestChatAgentConfig(
        name="Planner",
        use_tools=not fn_api,
        use_functions_api=fn_api,
        use_tools_api=tools_api,
    )

    multiplier_cfg = _TestChatAgentConfig(name="Multiplier")

    done_tool_name = DoneTool.default_value("request")

    if use_done_tool:
        done_response = f"""
            summarize the answers using the TOOL: `{done_tool_name}` with `content` 
            field equal to a string containing the answers without commas,   
            e.g. "243 512 729 125".
        """
    else:
        done_response = f"""
            simply say "{DONE}:" followed by the answers without commas, 
            e.g. "{DONE}: 243 512 729 125".
        """
    # master asks a series of exponential questions, e.g. 3^6, 8^5, etc.
    master = ChatAgent(master_cfg)
    master.enable_message(DoneTool)
    task_master = Task(
        master,
        interactive=False,
        system_message=f"""
                Your job is to ask me EXACTLY this series of exponential questions:
                {EXPONENTIALS}
                Simply present the needed computation, one at a time, 
                using only numbers and the exponential operator "**".
                Say nothing else, only the numerical operation.
                When you receive the answer, say RIGHT or WRONG, and ask 
                the next exponential question, e.g.: "RIGHT 8**2".
                When done asking the series of questions, 
                {done_response}
                """,
        user_message="Start by asking me an exponential question.",
    )

    # For a given exponential computation, plans a sequence of multiplications.
    planner = ChatAgent(planner_cfg)

    if constrain_recipients:
        planner.enable_message(
            RecipientTool.create(recipients=["Master", "Multiplier"])
        )
    else:
        planner.enable_message(RecipientTool)

    task_planner = Task(
        planner,
        interactive=False,
        system_message="""
                From "Master", you will receive an exponential to compute, 
                but you do not know how to multiply. You have a helper called 
                "Multiplier" who can compute multiplications. So to calculate the
                exponential you receive from "Master", you have to ask a sequence of
                multiplication questions to "Multiplier", to figure out the 
                exponential. When addressing "Multiplier", you must use the 
                `recipient_message` tool/function, with 
                the `intended_recipient` field set to "Multiplier".
                
                When you have your final answer, report your answer
                back to "Master" using the same `recipient_message` tool/function-call.
                
                When asking the Multiplier, remember to only present your 
                request in arithmetic notation, e.g. "3*5"; do not add 
                un-necessary phrases.
                """,
    )

    # Given a multiplication, returns the answer.
    multiplier = ChatAgent(multiplier_cfg)
    task_multiplier = Task(
        multiplier,
        done_if_response=[Entity.LLM],
        interactive=False,
        system_message="""
                You are a calculator. You will be given a multiplication problem. 
                You simply reply with the answer, say nothing else.
                """,
    )

    # planner helps master...
    task_master.add_sub_task(task_planner)
    # multiplier helps planner, but use Validator to ensure
    # recipient is specified via TO[recipient], and if not
    # then the validator will ask for clarification
    task_planner.add_sub_task(task_multiplier)

    result = await task_master.run_async()

    answers = [str(eval(e)) for e in EXPONENTIALS.split()]
    assert all(a in result.content for a in answers)
    # TODO assertions on message history of each agent
</file>

<file path="tests/main/test_multi_agent_complex.py">
import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tools.orchestration import DoneTool
from langroid.agent.tools.recipient_tool import RecipientTool
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig
from langroid.prompts.prompts_config import PromptsConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE
from langroid.vector_store.base import VectorStoreConfig


class _TestChatAgentConfig(ChatAgentConfig):
    max_tokens: int = 200
    vecdb: VectorStoreConfig = None
    llm: OpenAIGPTConfig = OpenAIGPTConfig(
        cache_config=RedisCacheConfig(fake=False),
        use_chat_for_completion=True,
    )
    parsing: ParsingConfig = ParsingConfig()
    prompts: PromptsConfig = PromptsConfig(
        max_tokens=200,
    )


EXPONENTIALS = "3**4 8**3"


@pytest.mark.parametrize("fn_api", [False, True])
@pytest.mark.parametrize("tools_api", [True, False])
@pytest.mark.parametrize("use_done_tool", [True, False])
@pytest.mark.parametrize("constrain_recipients", [True, False])
def test_agents_with_recipient(
    test_settings: Settings,
    fn_api: bool,
    tools_api: bool,
    use_done_tool: bool,
    constrain_recipients: bool,
):
    set_global(test_settings)
    master_cfg = _TestChatAgentConfig(name="Master")

    planner_cfg = _TestChatAgentConfig(
        name="Planner",
        use_tools=not fn_api,
        use_functions_api=fn_api,
        use_tools_api=tools_api,
    )

    multiplier_cfg = _TestChatAgentConfig(name="Multiplier")
    done_tool_name = DoneTool.default_value("request")
    # master asks a series of exponential questions, e.g. 3^6, 8^5, etc.
    if use_done_tool:
        done_response = f"""
            summarize the answers using the TOOL: `{done_tool_name}` with `content` 
            field equal to a string containing the answers without commas,   
            e.g. "243 512 729 125".
        """
    else:
        done_response = f"""
            simply say "{DONE}:" followed by the answers without commas, 
            e.g. "{DONE}: 243 512 729 125".
        """

    master = ChatAgent(master_cfg)
    master.enable_message(DoneTool)
    task_master = Task(
        master,
        interactive=False,
        system_message=f"""
                Your job is to ask me EXACTLY this series of exponential questions:
                {EXPONENTIALS}
                Simply present the needed computation, one at a time, 
                using only numbers and the exponential operator "**".
                Say nothing else, only the numerical operation.
                When you receive the answer, say RIGHT or WRONG, and ask 
                the next exponential question, e.g.: "RIGHT 8**2".
                When done asking the series of questions, 
                {done_response}
                """,
        user_message="Start by asking me an exponential question.",
    )

    # For a given exponential computation, plans a sequence of multiplications.
    planner = ChatAgent(planner_cfg)

    if constrain_recipients:
        planner.enable_message(
            RecipientTool.create(recipients=["Master", "Multiplier"])
        )
    else:
        planner.enable_message(RecipientTool)

    task_planner = Task(
        planner,
        interactive=False,
        system_message="""
                From "Master", you will receive an exponential to compute, 
                but you do not know how to multiply. You have a helper called 
                "Multiplier" who can compute multiplications. So to calculate the
                exponential you receive from "Master", you have to ask a SEQUENCE of
                multiplication questions to "Multiplier", to figure out the 
                exponential, remember to use the the TOOL/Function `recipient_message` 
                to ADDRESS the Multiplier.
                
                When you have your final answer, report your answer
                back to "Master", ADDRESSING them using the TOOL/Function 
                `recipient_message`.
                
                When asking the Multiplier, remember to only present your 
                request in arithmetic notation, e.g. "3*5"; do not add 
                un-necessary phrases.
                """,
    )

    # Given a multiplication, returns the answer.
    multiplier = ChatAgent(multiplier_cfg)
    task_multiplier = Task(
        multiplier,
        done_if_response=[Entity.LLM],
        interactive=False,
        system_message="""
                You are a calculator. You will be given a multiplication problem. 
                You simply reply with the answer, say nothing else.
                """,
    )

    # planner helps master...
    task_master.add_sub_task(task_planner)
    # multiplier helps planner, but use Validator to ensure
    # recipient is specified via TO[recipient], and if not
    # then the validator will ask for clarification
    task_planner.add_sub_task(task_multiplier)

    result = task_master.run()

    answers = [str(eval(e)) for e in EXPONENTIALS.split()]
    assert all(a in result.content for a in answers)
    # TODO assertions on message history of each agent
</file>

<file path="tests/main/test_multi_agent.py">
import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import StatusCode
from langroid.agent.task import Task
from langroid.agent.tools.orchestration import DoneTool
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig
from langroid.prompts.prompts_config import PromptsConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE, NO_ANSWER
from langroid.vector_store.base import VectorStoreConfig


class _TestChatAgentConfig(ChatAgentConfig):
    max_tokens: int = 200
    vecdb: VectorStoreConfig = None
    llm: OpenAIGPTConfig = OpenAIGPTConfig(
        cache_config=RedisCacheConfig(fake=False),
        use_chat_for_completion=True,
    )
    parsing: ParsingConfig = ParsingConfig()
    prompts: PromptsConfig = PromptsConfig(
        max_tokens=200,
    )


@pytest.mark.parametrize("helper_human_response", ["", "q"])
def test_inter_agent_chat(test_settings: Settings, helper_human_response: str):
    set_global(test_settings)
    cfg1 = _TestChatAgentConfig(name="master")
    cfg2 = _TestChatAgentConfig(name="helper")

    agent = ChatAgent(cfg1)
    task = Task(
        agent,
        interactive=False,
    )
    agent_helper = ChatAgent(cfg2)
    task_helper = Task(
        agent_helper,
        done_if_no_response=[Entity.LLM],
        done_if_response=[Entity.LLM],
        default_human_response=helper_human_response,
    )
    task.add_sub_task(task_helper)

    msg = """
    Your job is to ask me questions. 
    Start by asking me what the capital of France is.
    """
    task.init(msg)

    task.step()
    assert "What" in task.pending_message.content
    assert task.pending_message.metadata.source == Entity.LLM

    task.step()
    # user responds '' (empty) to force agent to hand off to agent_helper,
    # and we test two possible human answers: empty or 'q'

    assert "Paris" in task_helper.result().content


EXPONENTIALS = "3**5 8**3 9**3"


@pytest.mark.parametrize("use_done_tool", [True, False])
def test_multi_agent(test_settings: Settings, use_done_tool: bool):
    set_global(test_settings)
    master_cfg = _TestChatAgentConfig(name="Master")

    planner_cfg = _TestChatAgentConfig(name="Planner")

    multiplier_cfg = _TestChatAgentConfig(name="Multiplier")

    # master asks a series of exponential questions, e.g. 3^6, 8^5, etc.
    master = ChatAgent(master_cfg)
    master.enable_message(DoneTool)
    done_tool_name = DoneTool.default_value("request")
    if use_done_tool:
        done_response = f"""
        use the TOOL: `{done_tool_name}` with `content` field 
        equal to a string containing the answers as a SEQUENCE without commas, 
        e.g. "1000 8 64"
        """
    else:
        done_response = f"""
        say {DONE}  followed by the sequence of answers without commas,
        e.g. "{DONE}: 1000 8 64"
        """

    task_master = Task(
        master,
        interactive=False,
        system_message=f"""
                Your job is to ask  EXACTLY this series of exponential questions:
                {EXPONENTIALS}
                Simply present the needed computation, one at a time, 
                using only numbers and the exponential operator "**".
                Say nothing else, only the numerical operation.
                When you receive the answer, ask 
                the NEXT exponential question, e.g.: "8**2".
                When done asking the series of questions, 
                {done_response}
                
                EXAMPLE:
                Suppose you were told to ask these exponential questions:
                "5**3 10**4  1**5"
                
                1. you ask "5**3"
                2. you receive answer "125"
                3. You say "10**4"  <--- you are asking the NEXT EXPONENTIAL
                4. you receive answer "10000"
                5. You say "1**5"  <--- you are asking the NEXT EXPONENTIAL
                6. you receive answer "1"
                7. you use the `{done_tool_name}` TOOL to send "125 10000 1"
                     as the `content` field in the TOOL
                   
                 
                """,
        user_message="Start by asking me an exponential question.",
    )

    # For a given exponential computation, plans a sequence of multiplications.
    planner = ChatAgent(planner_cfg)
    planner.enable_message(DoneTool)

    task_planner = Task(
        planner,
        interactive=False,
        system_message=f"""
                You understand EXPONENTIALS, and you know an exponential involving
                INTEGERS is simply a sequence of MULTIPLICATIONS.
                However you do NOT know how to MULTIPLY, so you have to BREAK DOWN
                into a series of multiplications, and for each 
                multiplication, send out the desired multiplication question,
                e.g. "16 * 4", and a MULTIPLICATION EXPERT will return the
                answer to you. Then you can ask the next multiplication question,
                and so on, until you have the final answer for the original
                EXPONENTIAL question.

                When you have your final answer, use the TOOL: `{done_tool_name}`
                with content equal to the answer as a string, e.g. "256".
                
                EXAMPLE:
                1. User sends you *10 ** 3".
                2. you say "10 * 10"
                3. Multiplication expert returns 100
                4. you say "100 * 10"
                5. Multiplication expert returns 1000
                6. you have the final answer, so you 
                   use the `{done_tool_name}` TOOL to send "1000" as the `content`
                """,
    )

    # Given a multiplication, returns the answer.
    multiplier = ChatAgent(multiplier_cfg)
    task_multiplier = Task(
        multiplier,
        interactive=False,
        done_if_response=[Entity.LLM],
        system_message="""
                You are a calculator. You will be given a multiplication problem. 
                You simply reply with the answer, say nothing else.
                """,
    )

    # planner helps master...
    task_master.add_sub_task(task_planner)
    # multiplier helps planner...
    task_planner.add_sub_task(task_multiplier)

    result = task_master.run()

    answers = [str(eval(e)) for e in EXPONENTIALS.split()]
    assert all(a in result.content for a in answers)
    # TODO assertions on message history of each agent


def test_multi_agent_directed(test_settings: Settings):
    """
    Test whether TO:[<recipient>] works as expected.
    """
    set_global(test_settings)
    cfg_a = _TestChatAgentConfig(name="A")

    cfg_b = _TestChatAgentConfig(name="B")

    cfg_c = _TestChatAgentConfig(name="C")

    agent_a = ChatAgent(cfg_a)
    agent_b = ChatAgent(cfg_b)
    agent_c = ChatAgent(cfg_c)

    task_a = Task(
        agent_a,
        interactive=False,
        system_message="""
        You are talking to two people B and C, and 
        your job is to pick B or C and ask that person 'Who are you?'.
        Whoever you address, make sure you say it in the form 
        TO[<recipient>]: <your message>.
        As the conversation progresses your job is always keep asking 
        this question to either B or C.
        """,
        user_message="Start by asking B or C 'Who are you?'",
    )
    B_RESPONSE = "hello I am B"
    C_RESPONSE = "hello I am C"
    task_b = Task(
        agent_b,
        system_message=f"your job is to always say '{B_RESPONSE}'",
        interactive=False,
        done_if_no_response=[Entity.LLM],
        done_if_response=[Entity.LLM],
    )

    task_c = Task(
        agent_c,
        system_message=f"your job is to always say '{C_RESPONSE}'",
        interactive=False,
        done_if_response=[Entity.LLM],
    )

    task_a.add_sub_task([task_b, task_c])
    # kick off with empty msg, so LLM will respond based on initial sys, user messages
    task_a.init()
    for _ in range(2):
        # LLM asks, addressing B or C
        task_a.step()
        recipient = task_a.pending_message.metadata.recipient
        # recipient replies
        task_a.step()
        assert recipient in task_a.pending_message.content

    task_a.agent.clear_history(0)
    result = task_a.run(turns=2)
    assert "B" in result.content or "C" in result.content


def test_multi_agent_no_answer(test_settings: Settings):
    """
    Test whether @[<recipient>] works as expected.
    Also verfies that when LLM of subtask returns NO_ANSWER,
    the appropriate result is received by the parent task.
    """
    set_global(test_settings)
    cfg_a = _TestChatAgentConfig(name="A")

    cfg_b = _TestChatAgentConfig(name="B")

    cfg_c = _TestChatAgentConfig(name="C")

    agent_a = ChatAgent(cfg_a)
    agent_b = ChatAgent(cfg_b)
    agent_c = ChatAgent(cfg_c)

    task_a = Task(
        agent_a,
        interactive=False,
        system_message="""
        You are talking to two people B and C, and 
        your job is to pick B or C and ask that person 'Who are you?'.
        Whoever you address, make sure you say it in the form 
        @[recipient]: <your message>.
        As the conversation progresses your job is always keep asking 
        this question to either B or C.
        """,
        user_message="Start by asking B or C 'Who are you?'",
    )
    task_b = Task(
        agent_b,
        system_message=f"your job is to always say '{NO_ANSWER}'",
        interactive=False,
        done_if_response=[Entity.LLM],
    )

    task_c = Task(
        agent_c,
        system_message=f"your job is to always say '{NO_ANSWER}'",
        interactive=False,
        done_if_response=[Entity.LLM],
    )

    task_a.add_sub_task([task_b, task_c])
    # kick off with empty msg, so LLM will respond based on initial sys, user messages
    task_a.init()
    # LLM asks "Who are you", addressing B or C
    pending_message = task_a.step()
    assert "who" in pending_message.content.lower()
    assert pending_message.metadata.sender == Entity.LLM
    # recipient replies NO_ANSWER, which is considered invalid, hence
    # pending message does not change
    pending_message = task_a.step()
    assert NO_ANSWER in pending_message.content
    assert pending_message.metadata.sender == Entity.USER

    task_a.agent.clear_history(0)
    # Run for 2 turns -- recipients say NO_ANSWER, which is
    # normally an invalid response, but since this is the ONLY explicit response
    # in the step, we process this as a valid step result, and the pending message
    # is updated to this message.
    result = task_a.run(turns=2)
    assert NO_ANSWER in result.content
    assert result.metadata.status == StatusCode.FIXED_TURNS
</file>

<file path="tests/main/test_mytypes.py">
import pytest

from langroid.mytypes import Entity


@pytest.mark.parametrize("s", ["user", "User", "USER", "uSer", None])
def test_equality(s: str | None):
    if s is None:
        assert Entity.USER != s
        assert not Entity.USER == s
    else:
        assert Entity.USER == s
        assert not Entity.USER != s
</file>

<file path="tests/main/test_neo4j_chat_agent.py">
import os
import subprocess
import time

import pytest
from neo4j import GraphDatabase

import langroid as lr
from langroid.agent.special.neo4j.neo4j_chat_agent import (
    Neo4jChatAgent,
    Neo4jChatAgentConfig,
    Neo4jSettings,
)
from langroid.agent.special.neo4j.tools import GraphSchemaTool


def wait_for_neo4j(max_attempts=30, delay=1):
    driver = None
    for attempt in range(max_attempts):
        try:
            driver = GraphDatabase.driver(
                "neo4j://localhost:7687", auth=("neo4j", "password")
            )
            with driver.session() as session:
                session.run("RETURN 1")
            print(f"Neo4j ready after {attempt + 1} attempts")
            return True
        except Exception:
            time.sleep(delay)
        finally:
            if driver:
                driver.close()
    raise TimeoutError("Neo4j failed to start")


COMPOSE_FILE = os.path.join(os.path.dirname(__file__), "docker-compose-neo4j.yml")


def docker_setup_neo4j():
    # More aggressive cleanup
    try:
        # Stop and remove any existing neo4j container
        subprocess.run(
            ["docker", "stop", "neo4j-test"],
            check=False,  # Don't fail if container doesn't exist
            stderr=subprocess.DEVNULL,
        )
        subprocess.run(
            ["docker", "rm", "-f", "neo4j-test"], check=False, stderr=subprocess.DEVNULL
        )

        # Clean up using docker-compose
        subprocess.run(
            [
                "docker-compose",
                "-f",
                COMPOSE_FILE,
                "down",
                "--volumes",
                "--remove-orphans",
            ],
            check=True,
        )
    except Exception as e:
        print(f"Cleanup error (non-fatal): {e}")

    # Start fresh container
    subprocess.run(
        ["docker-compose", "-f", COMPOSE_FILE, "up", "-d"],
        check=True,
    )


def docker_teardown_neo4j():
    # Cleanup after tests
    try:
        subprocess.run(
            [
                "docker-compose",
                "-f",
                COMPOSE_FILE,
                "down",
                "--volumes",
                "--remove-orphans",
            ],
            check=True,
        )
        subprocess.run(
            ["docker", "rm", "-f", "neo4j-test"], check=False, stderr=subprocess.DEVNULL
        )
    except Exception as e:
        print(f"Cleanup error (non-fatal): {e}")


@pytest.fixture(scope="session", autouse=True)
def setup_neo4j():
    if not os.getenv("CI"):
        docker_setup_neo4j()
    wait_for_neo4j()
    yield
    if not os.getenv("CI"):
        docker_teardown_neo4j()


@pytest.fixture
def neo4j_agent(setup_neo4j):  # add setup_neo4j dependency
    agent = Neo4jChatAgent(
        Neo4jChatAgentConfig(
            neo4j_settings=Neo4jSettings(
                uri="neo4j://localhost:7687",
                username="neo4j",
                password="password",
                database="neo4j",
            )
        )
    )
    # No need to remove/recreate since we're using read-only demo DB
    yield agent


def test_write_then_retrieval(neo4j_agent):
    write_query = """
    CREATE (m:Movie {title: 'Inception', releaseYear: 2010})
    CREATE (a:Actor {name: 'Leonardo DiCaprio'})
    MERGE (a)-[:ACTED_IN]->(m)
    RETURN m, a
    """
    write_result = neo4j_agent.write_query(write_query)
    neo4j_agent.database_created = True
    assert write_result.success is True

    retrieval_query = """
    MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie)
    WHERE a.name = 'Leonardo DiCaprio' AND m.title = 'Inception'
    RETURN a.name, m.title, m.releaseYear, type(r) AS relationship
    """
    read_result = neo4j_agent.read_query(retrieval_query)
    assert read_result.success is True
    assert {
        "a.name": "Leonardo DiCaprio",
        "m.title": "Inception",
        "m.releaseYear": 2010,
        "relationship": "ACTED_IN",
    } in read_result.data

    english_query = """
    What are the movies that Leonardo DiCaprio acted in?
    """
    task = lr.Task(
        neo4j_agent,
        name="Neo",
        interactive=False,
    )
    result = task.run(english_query)
    # english answer
    assert "inception" in result.content.lower()

    # run it as a task for 5 turns
    task = lr.Task(
        neo4j_agent,
        interactive=False,
    )
    result = task.run(english_query)
    assert "inception" in result.content.lower()


def test_delete_node(neo4j_agent):
    # Create and then delete
    create_query = """
    CREATE (p:Person {name: 'John Doe', age: 30})
    RETURN p
    """
    neo4j_agent.write_query(create_query)

    delete_query = """
    MATCH (p:Person {name: 'John Doe'})
    DELETE p
    """
    neo4j_agent.write_query(delete_query)

    # Verify deletion
    verify_query = """
    MATCH (p:Person {name: 'John Doe'})
    RETURN p
    """
    result = neo4j_agent.read_query(verify_query)
    assert len(result.data) == 0


def test_relationship_query(neo4j_agent):
    # Create network of friends
    setup_query = """
    CREATE (a:Person {name: 'Alice'}),
           (b:Person {name: 'Bob'}),
           (c:Person {name: 'Charlie'}),
           (a)-[:FRIENDS_WITH]->(b),
           (b)-[:FRIENDS_WITH]->(c)
    """
    neo4j_agent.write_query(setup_query)

    # Find friends of friends
    query = """
    MATCH (p1:Person {name: 'Alice'})-[:FRIENDS_WITH]->
          ()-[:FRIENDS_WITH]->(fof:Person)
    RETURN fof.name
    """
    result = neo4j_agent.read_query(query)
    assert result.data[0]["fof.name"] == "Charlie"


def test_property_update(neo4j_agent):
    # Create node
    create_query = """
    CREATE (m:Movie {title: 'The Matrix', year: 1999})
    """
    neo4j_agent.write_query(create_query)

    # Update property
    update_query = """
    MATCH (m:Movie {title: 'The Matrix'})
    SET m.rating = 9.5
    RETURN m
    """
    result = neo4j_agent.write_query(update_query)

    # Verify update
    verify_query = """
    MATCH (m:Movie {title: 'The Matrix'})
    RETURN m.rating
    """
    result = neo4j_agent.read_query(verify_query)
    assert result.data[0]["m.rating"] == 9.5


def test_multiple_relationships(neo4j_agent):
    # Create complex relationship network
    setup_query = """
    CREATE (john:Person {name: 'John'}),
           (company:Company {name: 'Tech Corp'}),
           (project:Project {name: 'AI Initiative'}),
           (john)-[:WORKS_AT]->(company),
           (john)-[:MANAGES]->(project),
           (company)-[:OWNS]->(project)
    """
    neo4j_agent.write_query(setup_query)

    # Query to find all relationships
    query = """
    MATCH (p:Person {name: 'John'})-[r]->(x)
    RETURN type(r) as relationship_type, x.name as connected_to
    """
    result = neo4j_agent.read_query(query)

    # Verify both relationships exist
    relationships = [r["relationship_type"] for r in result.data]
    assert "WORKS_AT" in relationships
    assert "MANAGES" in relationships


def test_database_schema(neo4j_agent):
    # First create some data
    setup_query = """
    CREATE (p:Person {name: 'Alice', age: 30}),
           (m:Movie {title: 'Matrix', year: 1999}),
           (g:Genre {name: 'Sci-Fi'}),
           (p)-[:WATCHED]->(m),
           (m)-[:HAS_GENRE]->(g)
    """
    neo4j_agent.write_query(setup_query)

    # Get node labels
    labels_query = """
    CALL db.labels()
    """
    labels_result = neo4j_agent.read_query(labels_query)

    # Get relationship types
    rels_query = """
    CALL db.relationshipTypes()
    """
    rels_result = neo4j_agent.read_query(rels_query)

    # Verify schema
    labels = {item["label"] for item in labels_result.data}
    relationships = {item["relationshipType"] for item in rels_result.data}

    assert {"Person", "Movie", "Genre"}.issubset(labels)
    assert {"WATCHED", "HAS_GENRE"}.issubset(relationships)


def test_graph_schema_visualization(neo4j_agent):
    setup_query = """
    CREATE (p:Person {name: 'Alice', age: 30}),
           (m:Movie {title: 'Matrix', year: 1999}),
           (g:Genre {name: 'Sci-Fi'}),
           (p)-[:WATCHED]->(m),
           (m)-[:HAS_GENRE]->(g)
    """
    neo4j_agent.write_query(setup_query)

    schema_data = neo4j_agent.graph_schema_tool(GraphSchemaTool())

    # Check node labels
    node_labels = {node["name"] for node in schema_data[0]["nodes"]}
    assert {"Person", "Movie", "Genre"}.issubset(node_labels)

    # Check relationships
    relationships = {rel[1] for rel in schema_data[0]["relationships"]}
    assert {"WATCHED", "HAS_GENRE"}.issubset(relationships)
</file>

<file path="tests/main/test_object_registry.py">
from typing import Optional
from uuid import uuid4

import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocMetaData, ChatDocument
from langroid.language_models.base import LLMMessage
from langroid.language_models.mock_lm import MockLMConfig
from langroid.mytypes import Entity
from langroid.pydantic_v1 import BaseModel, Field
from langroid.utils.object_registry import ObjectRegistry

register_object = ObjectRegistry.register_object


class A(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid4()))
    my_b_id: Optional[str] = None
    parent_id: Optional[str] = None
    child_id: Optional[str] = None

    def my_b(self) -> Optional["B"]:
        return ObjectRegistry.get(self.my_b_id) if self.my_b_id else None

    @property
    def parent(self) -> Optional["A"]:
        return ObjectRegistry.get(self.parent_id) if self.parent_id else None

    @property
    def child(self) -> Optional["A"]:
        return ObjectRegistry.get(self.child_id) if self.child_id else None


class B(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid4()))
    my_a_id: Optional[str] = None

    def my_a(self) -> Optional["A"]:
        return ObjectRegistry.get(self.my_a_id) if self.my_a_id else None


@pytest.fixture
def create_objects():
    """Fixture to create and register instances of A and B."""
    a1 = A()
    register_object(a1)
    b1 = B(my_a_id=a1.id)
    register_object(b1)
    a1.my_b_id = b1.id
    a2 = A(parent_id=a1.id)
    register_object(a2)
    a1.child_id = a2.id
    return a1, a2, b1


def test_id_creation(create_objects):
    """Test if objects have valid UUIDs as IDs."""
    a1, a2, b1 = create_objects
    assert len(a1.id) == 36, "A1 ID should be a valid UUID"
    assert len(a2.id) == 36, "A2 ID should be a valid UUID"
    assert len(b1.id) == 36, "B1 ID should be a valid UUID"


def test_object_lookup(create_objects):
    """Test if objects can be retrieved correctly using their IDs."""
    a1, a2, b1 = create_objects
    assert ObjectRegistry.get(a1.id) is a1, "Lookup for A1 should return A1"
    assert ObjectRegistry.get(a2.id) is a2, "Lookup for A2 should return A2"
    assert ObjectRegistry.get(b1.id) is b1, "Lookup for B1 should return B1"


def test_a_to_a_links(create_objects):
    """Test parent and child links between instances of A."""
    a1, a2, _ = create_objects
    assert a2.parent is a1, "A2's parent should be A1"
    assert a1.child is a2, "A1's child should be A2"


def test_a_b_links(create_objects):
    """Test links between instances of A and B."""
    a1, _, b1 = create_objects
    assert b1.my_a() is a1, "B1's my_a should point to A1"
    assert a1.my_b() is b1, "A1's my_b should point to B1"


def test_remove_object(create_objects):
    """Test the removal of an object from the registry."""
    a1, a2, b1 = create_objects
    # Ensure the object is initially in the registry
    assert ObjectRegistry.get(a1.id) is not None
    # Remove the object
    ObjectRegistry.remove(a1.id)
    # Ensure the object is no longer in the registry
    assert ObjectRegistry.get(a1.id) is None


def test_cleanup_registry(create_objects):
    """Test the cleanup of the registry to remove None references."""
    a1, a2, b1 = create_objects
    # Introduce a None entry manually for testing
    ObjectRegistry.registry["dummy_id"] = None
    # Ensure "dummy_id" is in the registry before cleanup
    assert "dummy_id" in ObjectRegistry.registry
    # Perform cleanup
    ObjectRegistry.cleanup()
    # "dummy_id" should be removed post cleanup
    assert "dummy_id" not in ObjectRegistry.registry
    # Ensure other objects are still in the registry
    assert ObjectRegistry.get(a1.id) is not None
    assert ObjectRegistry.get(a2.id) is not None
    assert ObjectRegistry.get(b1.id) is not None


def test_chat_documents():
    # ChatDocument instances are automatically registered in the ObjectRegistry
    a_doc = ChatDocument(content="astuff", metadata=ChatDocMetaData(sender=Entity.LLM))
    b_doc = ChatDocument(content="bstuff", metadata=ChatDocMetaData(sender=Entity.LLM))

    a_doc.metadata.parent_id = b_doc.id()
    b_doc.metadata.child_id = a_doc.id()

    assert ChatDocument.from_id(a_doc.id()) is a_doc
    assert ChatDocument.from_id(b_doc.id()) is b_doc

    assert ObjectRegistry.get(a_doc.id()) is a_doc, "Lookup for A should return A"
    assert ObjectRegistry.get(b_doc.id()) is b_doc, "Lookup for B should return B"

    assert a_doc.parent is b_doc, "A's parent should be B"
    assert b_doc.child is a_doc, "B's child should be A"

    # convert to LLMMessage
    llm_msg = ChatDocument.to_LLMMessage(a_doc)[0]
    assert isinstance(llm_msg, LLMMessage)
    assert llm_msg.chat_document_id == a_doc.id()


def test_agent_chat_document_link():
    agent = ChatAgent(
        ChatAgentConfig(llm=MockLMConfig(default_response="7"))
    )  # auto-registered
    agent.message_history = [
        LLMMessage(role="system", content="You are helpful"),
        LLMMessage(role="user", content="hello"),
        LLMMessage(role="assistant", content="hi there"),
    ]
    response_doc = agent.llm_response("3+4?")
    assert response_doc is not None
    assert isinstance(response_doc, ChatDocument)
    assert response_doc.metadata.agent_id == agent.id
    assert response_doc.metadata.msg_idx == 4
    assert ObjectRegistry.get(response_doc.id()) is response_doc
    assert ObjectRegistry.get(agent.id) is agent
    last_msg = agent.message_history[-1]
    assert (
        last_msg.chat_document_id == response_doc.id()
    ), "Last message (LLM response) should be linked to the response chat document"

    assert (
        ObjectRegistry.get(last_msg.chat_document_id) is response_doc
    ), "Lookup from last message should return the response chat document"
</file>

<file path="tests/main/test_openai_assistant_async.py">
import pytest

from langroid.agent.batch import (
    llm_response_batch,
    run_batch_agent_method,
    run_batch_tasks,
)
from langroid.agent.openai_assistant import OpenAIAssistant, OpenAIAssistantConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.mytypes import Entity
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import NO_ANSWER


class NabroskyTool(ToolMessage):
    request = "nabrosky"
    purpose = "to apply the Nabrosky transformation to a number <num>"
    num: int

    def handle(self) -> str:
        return str(self.num**2)


@pytest.mark.asyncio
async def test_openai_assistant_async(test_settings: Settings):
    set_global(test_settings)
    cfg = OpenAIAssistantConfig()
    agent = OpenAIAssistant(cfg)
    response = await agent.llm_response_async("what is the capital of France?")
    assert "Paris" in response.content

    # test that we can retrieve cached asst, thread, and it recalls the last question
    cfg = OpenAIAssistantConfig(
        use_cached_assistant=True,
        use_cached_thread=True,
    )
    agent = OpenAIAssistant(cfg)
    response = await agent.llm_response_async(
        "what was the last country I asked about?"
    )
    assert "France" in response.content

    # test that we can wrap the agent in a task and run it
    task = Task(
        agent,
        name="Bot",
        system_message="You are a helpful assistant",
        done_if_no_response=[Entity.LLM],
        done_if_response=[Entity.LLM],
        interactive=False,
    )
    answer = await task.run_async("What is the capital of China?", turns=6)
    assert "Beijing" in answer.content


@pytest.mark.asyncio
@pytest.mark.parametrize("fn_api", [True, False])
async def test_openai_assistant_fn_tool_async(test_settings: Settings, fn_api: bool):
    """Test function calling works, both with OpenAI Assistant function-calling AND
    Langroid native ToolMessage mechanism"""

    set_global(test_settings)
    cfg = OpenAIAssistantConfig(
        use_functions_api=fn_api,
        use_tools=not fn_api,
        system_message="""
        The user will ask you, 'What is the Nabrosky transform of...' a certain number.
        You do NOT know the answer, and you should NOT guess the answer.
        Instead you MUST use the `nabrosky` function/tool to find out.
        When you receive the answer, say DONE and show the answer.
        """,
    )
    agent = OpenAIAssistant(cfg)
    agent.enable_message(NabroskyTool)
    response = await agent.llm_response_async("what is the nabrosky transform of 5?")
    if fn_api and response is not None and response.content not in ("", NO_ANSWER):
        assert response.function_call.name == "nabrosky"

    # Within a task loop
    cfg.name = "NabroskyBot"
    agent = OpenAIAssistant(cfg)
    agent.enable_message(NabroskyTool)
    task = Task(
        agent,
        name="NabroskyBot",
        interactive=False,
    )
    result = await task.run_async("what is the nabrosky transform of 5?", turns=6)
    if fn_api and result is not None and result.content not in ("", NO_ANSWER):
        assert "25" in result.content


@pytest.mark.skip(reason="Skipping, possible API issues?")
def test_openai_asst_batch(test_settings: Settings):
    set_global(test_settings)
    cfg = OpenAIAssistantConfig()
    agent = OpenAIAssistant(cfg)

    # get llm_response_async result on clones of this agent, on these inputs:
    N = 5
    questions = list(range(5))
    expected_answers = [(i + 3) for i in range(N)]

    # batch run
    answers = run_batch_agent_method(
        agent,
        agent.llm_response_async,
        questions,
        input_map=lambda x: str(x) + "+" + str(3),  # what to feed to each task
        output_map=lambda x: x,  # how to process the result of each task
    )

    # expected_answers are simple numbers, but
    # actual answers may be more wordy like "sum of 1 and 3 is 4",
    # so we just check if the expected answer is contained in the actual answer
    for e in expected_answers:
        assert any(str(e) in a.content.lower() for a in answers)

    answers = llm_response_batch(
        agent,
        questions,
        input_map=lambda x: str(x) + "+" + str(3),  # what to feed to each task
        output_map=lambda x: x,  # how to process the result of each task
    )

    # expected_answers are simple numbers, but
    # actual answers may be more wordy like "sum of 1 and 3 is 4",
    # so we just check if the expected answer is contained in the actual answer
    for e in expected_answers:
        assert any(str(e) in a.content.lower() for a in answers)


def test_openai_asst_task_batch(test_settings: Settings):
    set_global(test_settings)
    cfg = OpenAIAssistantConfig()
    agent = OpenAIAssistant(cfg)
    task = Task(
        agent,
        name="Test",
        interactive=False,
        done_if_no_response=[Entity.LLM],
        done_if_response=[Entity.LLM],
    )

    # run clones of this task on these inputs
    N = 5
    questions = list(range(5))
    expected_answers = [(i + 3) for i in range(N)]

    # batch run
    answers = run_batch_tasks(
        task,
        questions,
        input_map=lambda x: str(x) + "+" + str(3),  # what to feed to each task
        output_map=lambda x: x,  # how to process the result of each task
    )

    # expected_answers are simple numbers, but
    # actual answers may be more wordy like "sum of 1 and 3 is 4",
    # so we just check if the expected answer is contained in the actual answer
    for e in expected_answers:
        assert any(str(e) in a.content.lower() for a in answers)
</file>

<file path="tests/main/test_openai_assistant.py">
import tempfile

import pytest

from langroid.agent.openai_assistant import (
    AssistantTool,
    OpenAIAssistant,
    OpenAIAssistantConfig,
    ToolType,
)
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.recipient_tool import RecipientTool
from langroid.language_models import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import NO_ANSWER


class NabroskyTool(ToolMessage):
    request = "nabrosky"
    purpose = "to apply the Nabrosky transformation to a number <num>"
    num: int

    def handle(self) -> str:
        return str(self.num**2)


def test_openai_assistant(test_settings: Settings):
    set_global(test_settings)
    cfg = OpenAIAssistantConfig()
    agent = OpenAIAssistant(cfg)
    response = agent.llm_response("what is the capital of France?")
    assert "Paris" in response.content

    # test that we can retrieve cached asst, thread, and it recalls the last question
    cfg = OpenAIAssistantConfig(
        use_cached_assistant=True,
        use_cached_thread=True,
    )
    agent1 = OpenAIAssistant(cfg)
    response = agent1.llm_response("what was the last country I asked about?")
    if (
        agent1.thread.id == agent.thread.id
        and agent1.assistant.id == agent.assistant.id
    ):
        assert "France" in response.content

    # test that we can wrap the agent in a task and run it
    task = Task(
        agent,
        name="Bot",
        system_message="You are a helpful assistant",
        done_if_response=[Entity.LLM],
        interactive=False,
    )
    answer = task.run("What is the capital of China?")
    assert "Beijing" in answer.content


def test_openai_assistant_cache(test_settings: Settings):
    set_global(test_settings)
    cfg = OpenAIAssistantConfig(
        cache_responses=True,
    )
    agent = OpenAIAssistant(cfg)
    question = "Who wrote the novel War and Peace?"
    agent.llm.cache.delete_keys_pattern(f"*{question}*")
    response = agent.llm_response(question)
    assert "Tolstoy" in response.content

    # create fresh agent, and use a NEW thread
    cfg = OpenAIAssistantConfig(
        name="New",
        cache_responses=True,
        use_cached_assistant=False,
        use_cached_thread=False,
    )
    agent = OpenAIAssistant(cfg)
    # now this answer should be found in cache
    response = agent.llm_response(question)
    assert "Tolstoy" in response.content
    assert response.metadata.cached
    # check that we were able to insert assistant response and continue conv.
    response = agent.llm_response("When was he born?")
    assert "1828" in response.content

    # create fresh agent, and use a NEW thread, check BOTH answers should be cached.
    cfg = OpenAIAssistantConfig(
        name="New2",
        cache_responses=True,
        use_cached_assistant=False,
        use_cached_thread=False,
    )
    agent = OpenAIAssistant(cfg)
    # now this answer should be found in cache
    response = agent.llm_response("Who wrote the novel War and Peace?")
    assert "Tolstoy" in response.content
    assert response.metadata.cached
    # check that we were able to insert assistant response and continue conv.
    response = agent.llm_response("When was he born?")
    assert "1828" in response.content
    assert response.metadata.cached


@pytest.mark.parametrize("fn_api", [True, False])
def test_openai_assistant_fn_tool(test_settings: Settings, fn_api: bool):
    """Test function calling works, both with OpenAI Assistant function-calling AND
    Langroid native ToolMessage mechanism"""

    set_global(test_settings)
    cfg = OpenAIAssistantConfig(
        name="NabroskyBot",
        llm=OpenAIGPTConfig(),
        use_functions_api=fn_api,
        use_tools=not fn_api,
        system_message="""
        The user will ask you, 'What is the Nabrosky transform of...' a certain number.
        You do NOT know the answer, and you should NOT guess the answer.
        Instead you MUST use the `nabrosky` JSON function/tool to find out.
        When you receive the answer, say DONE and show the answer.
        """,
    )
    agent = OpenAIAssistant(cfg)
    agent.enable_message(NabroskyTool)
    response = agent.llm_response("what is the Nabrosky transform of 5?")
    # Check assert when there is a non-empty response
    if response.content not in ("", NO_ANSWER) and fn_api:
        assert response.function_call.name == "nabrosky"

    # Within a task loop
    cfg.name = "NabroskyBot-1"
    agent = OpenAIAssistant(cfg)
    agent.enable_message(NabroskyTool)
    task = Task(
        agent,
        interactive=False,
    )
    result = task.run("what is the Nabrosky transform of 5?", turns=4)
    # When fn_api = False (i.e. using ToolMessage) we get brittleness so we just make
    # sure there is no error until this point.
    if result.content not in ("", NO_ANSWER) and fn_api:
        assert "25" in result.content


@pytest.mark.xfail(
    reason="Flaky/Soon-To-be-deprecated API, may fail",
    run=True,
    strict=False,
)
@pytest.mark.parametrize("fn_api", [True, False])
def test_openai_assistant_fn_2_level(test_settings: Settings, fn_api: bool):
    """Test 2-level recursive function calling works,
    both with OpenAI Assistant function-calling AND
    Langroid native ToolMessage mechanism"""

    set_global(test_settings)
    cfg = OpenAIAssistantConfig(
        name="Main",
        llm=OpenAIGPTConfig(),
        use_functions_api=fn_api,
        use_tools=not fn_api,
        system_message="""
        The user will ask you to apply the Nabrosky transform to a number.
        You do not know how to do it, and you should NOT guess the answer.
        Instead you MUST use the `recipient_message` tool/function to 
        send it to NabroskyBot who will do it for you.
        When you receive the answer, say DONE and show the answer.
        """,
    )
    agent = OpenAIAssistant(cfg)
    agent.enable_message(RecipientTool)

    nabrosky_cfg = OpenAIAssistantConfig(
        name="NabroskyBot",
        llm=OpenAIGPTConfig(),
        use_functions_api=fn_api,
        use_tools=not fn_api,
        system_message="""
        The user will ask you to apply the Nabrosky transform to a number.
        You do not know how to do it, and you should NOT guess the answer.
        Instead you MUST use the `nabrosky` function/tool to do it.
        When you receive the answer say DONE and show the answer.
        """,
    )

    nabrosky_agent = OpenAIAssistant(nabrosky_cfg)
    nabrosky_agent.enable_message(NabroskyTool)

    main_task = Task(agent, interactive=False)
    nabrosky_task = Task(nabrosky_agent, interactive=False)
    main_task.add_sub_task(nabrosky_task)
    result = main_task.run("what is the Nabrosky transform of 5?", turns=6)
    if fn_api and result.content not in ("", NO_ANSWER):
        assert "25" in result.content


@pytest.mark.parametrize("fn_api", [True, False])
def test_openai_assistant_recipient_tool(test_settings: Settings, fn_api: bool):
    """Test that special case of fn-calling: RecipientTool works,
    both with OpenAI Assistant function-calling AND
    Langroid native ToolMessage mechanism"""

    set_global(test_settings)
    cfg = OpenAIAssistantConfig(
        name="Main",
        use_functions_api=fn_api,
        use_tools=not fn_api,
        system_message="""
        The user will give you a number. You need to double it, but don't know how,
        so you send it to the "Doubler" to double it. 
        When you receive the answer, say DONE and show the answer.
        """,
    )
    agent = OpenAIAssistant(cfg)
    agent.enable_message(RecipientTool)

    # Within a task loop
    doubler_config = OpenAIAssistantConfig(
        name="Doubler",
        system_message=""" 
        When you receive a number, simply double it and  return the answer
        """,
    )
    doubler_agent = OpenAIAssistant(doubler_config)
    doubler_task = Task(
        doubler_agent,
        interactive=False,
        done_if_response=[Entity.LLM],
    )

    main_task = Task(agent, interactive=False)
    main_task.add_sub_task(doubler_task)
    result = main_task.run("10", turns=4)
    if fn_api and result.content not in ("", NO_ANSWER):
        assert "20" in result.content


@pytest.mark.skip(
    """
This no longer works since the OpenAI Assistants API for file_search
has changed, and requires explicit vector-store creation:
https://platform.openai.com/docs/assistants/tools/file-search
We will update langroid to catch up with this at some point.
"""
)
def test_openai_assistant_retrieval(test_settings: Settings):
    """
    Test that Assistant can answer question
    based on retrieval from file.
    """
    set_global(test_settings)
    cfg = OpenAIAssistantConfig(
        llm=OpenAIGPTConfig(),
        system_message="""
        Answer questions based on the provided file, using the `file_search` tool
        """,
    )
    agent = OpenAIAssistant(cfg)

    # create temp file with in-code text content
    text = """
    Vladislav Nabrosky was born in China. He then emigrated to the United States,
    where he wrote the novel Lomita. He was a professor at Purnell University.
    """
    # open a temp file and write text to it
    with tempfile.NamedTemporaryFile(mode="w", delete=False, suffix=".txt") as f:
        f.write(text)
        f.close()
        # get the filename
        filename = f.name

    # must enable retrieval first, then add file
    agent.add_assistant_tools([AssistantTool(type=ToolType.RETRIEVAL)])
    agent.add_assistant_files([filename])

    response = agent.llm_response("where was Vladislav Nabrosky born?")
    assert "China" in response.content

    response = agent.llm_response("what novel did he write?")
    assert "Lomita" in response.content


@pytest.mark.xfail(
    reason="May fail due to unknown flakiness",
    run=True,
    strict=False,
)
def test_openai_asst_code_interpreter(test_settings: Settings):
    """
    Test that Assistant can answer questions using code.
    """
    set_global(test_settings)
    cfg = OpenAIAssistantConfig(
        llm=OpenAIGPTConfig(),
        system_message="Answer questions by running code if needed",
    )
    agent = OpenAIAssistant(cfg)

    # create temp file with in-code text content
    text = """
    Vlad Nabrosky was born in Russia. He then emigrated to the United States,
    where he wrote the novel Lomita. He was a professor at Purnell University.
    """

    # open a temp file and write text to it
    with tempfile.NamedTemporaryFile(mode="w", delete=False) as f:
        f.write(text)
        f.close()
        # get the filename
        filename = f.name

    # must enable retrieval first, then add file
    agent.add_assistant_tools([AssistantTool(type="code_interpreter")])
    agent.add_assistant_files([filename])

    response = agent.llm_response(
        "what is the 10th fibonacci number, when you start with 1 and 2?"
    )
    assert "89" in response.content

    response = agent.llm_response("how many words are in the file?")
    assert str(len(text.split())) in response.content


def test_openai_assistant_multi(test_settings: Settings):
    """
    Test task delegation with OpenAIAssistant
    """
    set_global(test_settings)

    cfg = OpenAIAssistantConfig(
        use_cached_assistant=False,
        use_cached_thread=False,
        name="Teacher",
        llm=OpenAIGPTConfig(),
    )
    agent = OpenAIAssistant(cfg)

    # wrap Agent in a Task to run interactive loop with user (or other agents)
    task = Task(
        agent,
        interactive=False,
        system_message="""
        Send a number. Your student will respond EVEN or ODD. 
        You say RIGHT DONE or WRONG DONE.
        
        Start by sending a number.
        """,
    )

    cfg = OpenAIAssistantConfig(
        use_cached_assistant=False,
        use_cached_thread=False,
        name="Student",
    )
    student_agent = OpenAIAssistant(cfg)
    student_task = Task(
        student_agent,
        interactive=False,
        done_if_response=[Entity.LLM],
        system_message="When you get a number, say EVEN if it is even, else say ODD",
    )
    task.add_sub_task(student_task)
    result = task.run()
    assert "RIGHT" in result.content
</file>

<file path="tests/main/test_parser.py">
import tempfile

import pytest

from langroid.mytypes import Document
from langroid.parsing.parser import Parser, ParsingConfig, Splitter
from langroid.parsing.utils import extract_content_from_path, generate_random_text

CHUNK_SIZE = 100


@pytest.mark.parametrize(
    "splitter, chunk_size, max_chunks, min_chunk_chars, discard_chunk_chars",
    [
        # (Splitter.TOKENS, 10, 100, 35, 2),
        (Splitter.PARA_SENTENCE, 10, 3000, 35, 2),
        (Splitter.SIMPLE, 10, 500 * 5, 35, 2),
    ],
)
def test_parser(
    splitter: Splitter,
    chunk_size: int,
    max_chunks: int,
    min_chunk_chars: int,
    discard_chunk_chars: int,
):
    cfg = ParsingConfig(
        splitter=splitter,
        n_neighbor_ids=2,
        chunk_size_variation=0.2,
        chunk_size=chunk_size,
        max_chunks=max_chunks,
        separators=["."],
        min_chunk_chars=min_chunk_chars,
        discard_chunk_chars=discard_chunk_chars,
        token_encoding_model="text-embedding-3-small",
    )

    parser = Parser(cfg)
    docs = [
        Document(content=generate_random_text(500), metadata={"id": i})
        for i in range(5)
    ]

    split_docs = parser.split(docs)

    chunk_size_upper_bound = (
        chunk_size * (1 + cfg.chunk_size_variation)
        if splitter == Splitter.MARKDOWN
        else chunk_size + 5
    )
    assert all(
        parser.num_tokens(d.content) <= chunk_size_upper_bound for d in split_docs
    )
    assert len(split_docs) <= max_chunks * len(docs)
    assert all(len(d.content) >= discard_chunk_chars for d in split_docs)
    assert all(d.metadata.is_chunk for d in split_docs)

    # test neighbor chunks
    doc = Document(content=generate_random_text(500), metadata={"id": 0})
    chunks = parser.split([doc])
    n = len(chunks)
    if n > 2 * cfg.n_neighbor_ids + 1:
        assert len(chunks[n // 2].metadata.window_ids) == 2 * cfg.n_neighbor_ids + 1


def length_fn(text):
    return len(text.split())  # num chars


@pytest.mark.parametrize(
    "chunk_size, max_chunks, min_chunk_chars, discard_chunk_chars",
    [
        (100, 10_000, 350, 5),
        (10, 100, 35, 2),
        (200, 1000, 300, 10),
    ],
)
def test_text_token_chunking(
    chunk_size: int, max_chunks: int, min_chunk_chars: int, discard_chunk_chars: int
):
    cfg = ParsingConfig(
        chunk_size=chunk_size,
        max_chunks=max_chunks,
        min_chunk_chars=min_chunk_chars,
        discard_chunk_chars=discard_chunk_chars,
        token_encoding_model="text-embedding-3-small",
    )

    parser = Parser(cfg)

    text = generate_random_text(60)
    chunks = parser.chunk_tokens(text)

    assert len(chunks) <= max_chunks
    assert all(len(c) >= discard_chunk_chars for c in chunks)
    assert all(parser.num_tokens(c) <= chunk_size + 5 for c in chunks)


def test_extract_content():
    parsing = ParsingConfig()

    with tempfile.NamedTemporaryFile(mode="w", delete=False, suffix=".txt") as file1:
        file1.write("Hello world")

    with tempfile.NamedTemporaryFile(mode="w", delete=False, suffix=".txt") as file2:
        file2.write("It was the best of times")

    # extract from single path
    content = extract_content_from_path(file1.name, parsing)
    assert "Hello" in content

    # extract from multiple paths
    contents = extract_content_from_path([file1.name, file2.name], parsing)
    assert "Hello" in contents[0]
    assert "best" in contents[1]

    # read bytes from file1
    with open(file1.name, "rb") as file1:
        bytes_content1 = file1.read()

    with open(file2.name, "rb") as file2:
        bytes_content2 = file2.read()

    content = extract_content_from_path(bytes_content1, parsing)
    assert "Hello" in content

    contents = extract_content_from_path([bytes_content1, bytes_content2], parsing)
    assert "Hello" in contents[0]
    assert "best" in contents[1]


def test_utf8():
    my_str = "abc﷽🤦🏻‍♂️🤦🏻‍♂️🤦🏻‍♂️"
    b = my_str.encode("utf-8")  # 57 bytes that represent 19 chars
    content = b[:50]  # choose to cut it off at 50 for this example

    def find_last_full_char(str_to_test):
        for i in range(len(str_to_test) - 1, 0, -1):
            if (str_to_test[i] & 0xC0) != 0x80:
                return i

    content = content[: find_last_full_char(content)]

    # test that this succeeds
    _ = content.decode("utf-8")


def test_chunk_tokens():
    """Tests if Parser.chunk_tokens preserves list structure and line formatting."""
    cfg = ParsingConfig(
        chunk_size=10,
        max_chunks=5,
        min_chunk_chars=5,
        discard_chunk_chars=2,
        token_encoding_model="text-embedding-3-small",
    )
    parser = Parser(cfg)

    # text with bullet list, redundant extra lines
    text = """fruits
- apple

- orange



vegetables
- tomato
- cucumber"""

    chunks = parser.chunk_tokens(text)
    reconstructed = "".join(chunks)

    original_lines = [line.strip() for line in text.split("\n") if line.strip()]
    result_lines = [line.strip() for line in reconstructed.split("\n") if line.strip()]

    assert original_lines == result_lines
    assert len(original_lines) == 6  # Verify all lines are present
    assert all(line.startswith("- ") for line in original_lines if "-" in line)
</file>

<file path="tests/main/test_parsing_citations.py">
import pytest

from langroid.utils.output.citations import invalid_markdown_citations


@pytest.mark.parametrize(
    "input_str, expected",
    [
        ("No citations here", []),
        ("Valid citation [^1] only", []),
        ("Invalid [^abc] citation", ["abc"]),
        ("Multiple [^x] [^y] [^z]", ["x", "y", "z"]),
        ("Mixed [^1] [^abc] [^2] [^xyz]", ["abc", "xyz"]),
        ("Duplicate [^x] [^x] [^y]", ["x", "y"]),
        ("[^abc123] [^123abc]", ["123abc", "abc123"]),  # Updated order to match sorting
        ("Ignore [^ ] empty and [^] blank", []),
    ],
)
def test_invalid_markdown_citations(input_str: str, expected: list[str]) -> None:
    """Test extraction of non-numeric markdown citations."""
    assert invalid_markdown_citations(input_str) == expected
</file>

<file path="tests/main/test_pdf_parser.py">
import os

import pytest

from langroid.parsing.document_parser import DocumentParser
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig


@pytest.mark.parametrize("source", ["url", "bytes"])
@pytest.mark.parametrize(
    "pdflib",
    [
        "docling",
        "fitz",
        "pypdf",
        "unstructured",
        "pymupdf4llm",
        "marker",
    ],
)
def test_get_pdf_doc_url(source, pdflib: str):
    url = "tests/main/data/openr-1-3.pdf"
    pdf_parser = DocumentParser.create(
        url,
        ParsingConfig(
            n_neighbor_ids=2,
            pdf=PdfParsingConfig(library=pdflib),
        ),
    )

    if source == "bytes":
        bytes = pdf_parser._load_doc_as_bytesio()
        pdf_parser = DocumentParser.create(
            bytes.getvalue(), pdf_parser.config  # convert BytesIO to bytes
        )

    doc = pdf_parser.get_doc()

    # PdfParser.get_doc_from_pdf_url(url)

    # Check the results
    assert isinstance(doc.content, str)
    assert len(doc.content) > 0  # assuming the PDF is not empty
    assert doc.metadata.source == ("bytes" if source == "bytes" else url)

    # parser = Parser(ParsingConfig())
    # pdfParser = PdfParser.from_Parser(parser)
    # docs = pdfParser.doc_chunks_from_pdf_url(url, parser)
    docs = pdf_parser.get_doc_chunks()
    assert len(docs) > 0
    assert all(d.metadata.is_chunk for d in docs)
    n = len(docs)
    k = pdf_parser.config.n_neighbor_ids
    if n > 2 * k + 1:
        assert len(docs[n // 2].metadata.window_ids) == 2 * k + 1


@pytest.mark.xfail(
    condition=lambda pdflib: pdflib == "marker",
    reason="Marker may timeout",
    strict=False,
)
@pytest.mark.parametrize("source", ["path", "bytes"])
@pytest.mark.parametrize(
    "pdflib", ["unstructured", "docling", "fitz", "pypdf", "pymupdf4llm", "marker"]
)
def test_get_pdf_doc_path(source, pdflib: str):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    tests_root = os.path.abspath(os.path.join(current_dir, ".."))
    path = os.path.join(tests_root, "main", "data", "dummy.pdf")

    pdf_parser = DocumentParser.create(
        path, ParsingConfig(pdf=PdfParsingConfig(library=pdflib))
    )

    if source == "bytes":
        with open(path, "rb") as f:
            bytes = f.read()
        pdf_parser = DocumentParser.create(bytes, pdf_parser.config)

    doc = pdf_parser.get_doc()

    # Check the results
    assert isinstance(doc.content, str)
    assert len(doc.content) > 0  # assuming the PDF is not empty
    citation = path if source == "path" else "bytes"
    assert doc.metadata.source == citation

    docs = pdf_parser.get_doc_chunks()
    assert len(docs) > 0
    assert all(d.metadata.is_chunk for d in docs)
    assert all(citation in d.metadata.source for d in docs)


# @pytest.mark.skipif(
#     os.environ.get("CI") == "true",
#     reason="GH Actions/Ubuntu has issues with pdf2image/pyteseract",
# )


@pytest.mark.parametrize("source", ["url", "bytes"])
@pytest.mark.parametrize(
    "path",
    [
        "https://nlsblog.org/wp-content/uploads/2020/06/image-based-pdf-sample.pdf",
        "tests/main/data/image-based-pdf-sample.pdf",
    ],
)
def test_image_pdf(source, path):
    """
    Test text extraction from an image-pdf
    """
    cfg = ParsingConfig(pdf=PdfParsingConfig(library="pdf2image"))
    pdf_parser = DocumentParser.create(path, cfg)
    doc = pdf_parser.get_doc()
    if source == "bytes":
        bytes = pdf_parser._load_doc_as_bytesio()
        pdf_parser = DocumentParser.create(bytes.getvalue(), cfg)

    doc = pdf_parser.get_doc()

    # Check the results
    assert isinstance(doc.content, str)
    assert len(doc.content) > 0  # assuming the PDF is not empty
    citation = path if source == "url" else "bytes"
    assert doc.metadata.source == citation

    docs = pdf_parser.get_doc_chunks()
    assert len(docs) > 0
    assert all(d.metadata.is_chunk for d in docs)

    assert all(citation in d.metadata.source for d in docs)
</file>

<file path="tests/main/test_pdf_utils.py">
from langroid.parsing.pdf_utils import pdf_split_pages


def test_pdf_split_pages():
    # Test with a sample PDF file of 4 pages
    pdf_path = "tests/main/data/dummy.pdf"
    pages, _ = pdf_split_pages(pdf_path)

    # Check if the pages are split correctly
    assert len(pages) == 4

    parts, _ = pdf_split_pages(pdf_path, splits=[3])
    assert len(parts) == 2

    parts, _ = pdf_split_pages(pdf_path, splits=[1, 2])
    assert len(parts) == 3
</file>

<file path="tests/main/test_prep_llm_message.py">
import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.language_models.base import LLMMessage, Role
from langroid.language_models.openai_gpt import OpenAIGPTConfig

CHAT_CONTEXT_LENGTH = 16_000
MAX_OUTPUT_TOKENS = 1000
MIN_OUTPUT_TOKENS = 50


@pytest.fixture
def agent():
    """Create a ChatAgent with a mock LLM for testing truncation."""
    config = ChatAgentConfig(
        system_message="System message",
        llm=OpenAIGPTConfig(
            # Small context for testing truncation
            chat_context_length=CHAT_CONTEXT_LENGTH,
            max_output_tokens=MAX_OUTPUT_TOKENS,
            min_output_tokens=MIN_OUTPUT_TOKENS,
        ),
    )
    agent = ChatAgent(config)

    # Create a mock parser that counts tokens as characters for simplicity
    class MockParser:
        def num_tokens(self, text: str | LLMMessage):
            if isinstance(text, str):
                return len(text)
            else:
                return len(text.content)

        def truncate_tokens(self, text, tokens, warning=""):
            return text[:tokens] + warning

    agent.parser = MockParser()

    # Create a mock LLM that returns a fixed context length
    class MockLLM:
        def chat_context_length(self):
            return CHAT_CONTEXT_LENGTH

        def supports_functions_or_tools(self):
            return False

    agent.llm = MockLLM()

    # Initialize message history with a system message
    # agent.message_history = [LLMMessage(role=Role.SYSTEM, content="System message")]
    agent.init_message_history()
    return agent


def test_no_truncation_needed(agent):
    """Test when no truncation is needed."""
    # Add a short user message (well within context limits)
    message = "Short user message"

    # Call the method
    hist, output_len = agent._prep_llm_messages(message)

    # History should include system message and the new user message
    assert len(hist) == 2
    assert hist[0].content == "System message"
    assert hist[1].content == message
    assert output_len == MAX_OUTPUT_TOKENS  # Original max output tokens


def test_reduce_output_length(agent):
    """Test when only output length reduction is needed."""
    # Fill most of the context with long messages
    long_message = "X" * 15_000  # 700 tokens
    agent.message_history.append(LLMMessage(role=Role.USER, content=long_message))

    # New user message
    message = "Another message"

    # Call the method
    hist, output_len = agent._prep_llm_messages(message)

    # Check that output length was reduced but no messages were truncated
    assert len(hist) == 3
    assert hist[1].content == long_message  # Not truncated
    assert output_len < MAX_OUTPUT_TOKENS  # Output length was reduced


def test_truncate_messages(agent):
    """Test when message truncation is needed."""

    # Fill the context with messages that will require truncation
    agent.message_history = [LLMMessage(role=Role.SYSTEM, content="System message")]

    # Add several messages that will need truncation
    for i in range(3):
        agent.message_history.append(
            LLMMessage(role=Role.USER, content=f"User message {i+1} " + "X" * 8_000)
        )
        agent.message_history.append(
            LLMMessage(role=Role.ASSISTANT, content=f"Assistant reply {i+1}")
        )

    orig_msg_len = len(agent.message_history[1].content)
    # Call the method
    hist, output_len = agent._prep_llm_messages("Final message")

    # Check that early messages were truncated
    assert len(hist) == 8  # All messages still present
    assert len(hist[1].content) < orig_msg_len
    # First user message truncated
    assert "Contents truncated" in hist[1].content
    assert output_len >= MIN_OUTPUT_TOKENS  # At least min_output_tokens
</file>

<file path="tests/main/test_pydantic_utils.py">
import pytest

from langroid.pydantic_v1 import BaseModel
from langroid.utils.pydantic_utils import extract_fields, flatten_dict


class DetailsModel(BaseModel):
    height: float
    weight: float


class TestModel(BaseModel):
    name: str
    age: int
    details: DetailsModel

    class Config:
        allow_population_by_field_name = True


def test_extract_fields():
    # Create an instance of TestModel with nested DetailsModel
    test_instance = TestModel(
        name="John Doe", age=30, details=DetailsModel(height=180.5, weight=75.0)
    )

    # Test with single field
    result = extract_fields(test_instance, ["name"])
    assert result == {"name": "John Doe"}

    # Test with multiple fields
    result = extract_fields(test_instance, ["name", "age", "weight"])
    assert result == {"name": "John Doe", "age": 30, "weight": 75.0}

    # Test with nested field using dot notation
    # Note we only retain the LAST part of the field name
    result = extract_fields(test_instance, ["details.height"])
    assert result == {"height": 180.5}

    # Test with nested field using non-dot notation
    result = extract_fields(test_instance, ["weight"])
    assert result == {"weight": 75.0}

    # Test with non-existent field
    result = extract_fields(test_instance, ["non_existent_field"])
    assert result == {}

    # Test with empty fields list
    result = extract_fields(test_instance, [])
    assert result == {}


@pytest.mark.parametrize(
    "input_dict, expected_output",
    [
        ({"a": 1, "b": 2, "c": 3}, {"a": 1, "b": 2, "c": 3}),
        ({"a": 1, "b": {"c": 2, "d": 3}, "e": 4}, {"a": 1, "b.c": 2, "b.d": 3, "e": 4}),
        ({"a": {"b": {"c": {"d": 1}}}}, {"a.b.c.d": 1}),
        ({"a": [1, 2, 3], "b": {"c": [4, 5, 6]}}, {"a": [1, 2, 3], "b.c": [4, 5, 6]}),
        ({"a": 1, "b": {}, "c": 3}, {"a": 1, "c": 3}),
        ({}, {}),
        ({"a": None, "b": {"c": None}}, {"a": None, "b.c": None}),
    ],
)
def test_flatten_dict(input_dict, expected_output):
    assert flatten_dict(input_dict) == expected_output


@pytest.mark.parametrize(
    "input_dict, separator, expected_output",
    [
        ({"a": 1, "b": {"c": 2, "d": 3}}, "__", {"a": 1, "b__c": 2, "b__d": 3}),
        ({"x": {"y": {"z": 1}}}, "->", {"x->y->z": 1}),
    ],
)
def test_flatten_dict_custom_separator(input_dict, separator, expected_output):
    assert flatten_dict(input_dict, sep=separator) == expected_output
</file>

<file path="tests/main/test_quiet_mode.py">
from langroid.utils.configuration import quiet_mode, settings
from langroid.utils.output import status


def test_quiet_mode():
    assert not settings.quiet

    with quiet_mode():
        assert settings.quiet

    assert not settings.quiet


def test_nested_quiet_mode():
    assert not settings.quiet

    with quiet_mode():
        assert settings.quiet

        with quiet_mode(quiet=False):
            assert settings.quiet

        assert settings.quiet

    assert not settings.quiet


def test_quiet_mode_with_exception():
    assert not settings.quiet

    try:
        with quiet_mode():
            assert settings.quiet
            raise Exception("Test exception")
    except Exception:
        pass

    assert not settings.quiet


def test_status_quiet_mode():
    with status("Test message"):
        assert settings.quiet
        # Simulate some work
        pass
    assert not settings.quiet

    with status("Test message"):
        assert settings.quiet
        # Simulate some work
        with quiet_mode():
            assert settings.quiet
            pass
        assert settings.quiet
        pass
    assert not settings.quiet
</file>

<file path="tests/main/test_recipient_tool_async.py">
"""
Use Langroid to set up a collaboration among three agents:

- Processor: needs to transform a list of positive numbers, does not know how to
apply the transformations, and sends out each number so that one of two
specialized agents apply the transformation. It is instructed to avoid getting a
negative number.
- EvenHandler only transforms even numbers, otherwise returns a negative number
- OddHandler only transforms odd numbers, otherwise returns a negative number

Since the Processor must avoid getting a negative number, it needs to
specify a recipient for each number it sends out,
using the `recipient_message` tool/function-call, where the `content` field
is the number it wants to send, and the `recipient` field is the name
of the intended recipient, either "EvenHandler" or "OddHandler".

However, the Processor often forgets to use this syntax, and in this situation
the `handle_message_fallback` method of the RecipientTool class
asks the Processor to clarify the intended recipient using the
`add_recipient` tool, which allows the LLM to simply specify a recipient for
its last message, without having to repeat the message.

For more explanation, see the
[Getting Started guide](https://langroid.github.io/langroid/quick-start/three-agent-chat-num-router/)
"""

import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import DoneTool
from langroid.agent.tools.recipient_tool import RecipientTool
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE

INPUT_NUMBERS = [1, 100, 12]
TRANSFORMED_NUMBERS = [4, 10000, 6]


class SquareTool(ToolMessage):
    request: str = "square"
    purpose: str = "To square a <number>, when it is a multiple of 10."
    number: int

    # this is a stateless tool, so we can define the handler here,
    # without having to define a `square` method in the agent.
    def handle(self) -> str:
        if self.number % 10 == 0:
            return DONE + str(self.number**2)
        else:
            # check that DoneTool works as expected
            return DoneTool(content="-1")


@pytest.mark.asyncio
@pytest.mark.parametrize("fn_api", [True, False])
@pytest.mark.parametrize("tools_api", [True, False])
@pytest.mark.parametrize("use_done_tool", [True, False])
@pytest.mark.parametrize("constrain_recipients", [True, False])
async def test_agents_with_recipient_tool(
    test_settings: Settings,
    fn_api: bool,
    tools_api: bool,
    use_done_tool: bool,
    constrain_recipients: bool,
):
    set_global(test_settings)
    config = ChatAgentConfig(
        llm=OpenAIGPTConfig(),
        use_tools=not fn_api,
        use_functions_api=fn_api,
        use_tools_api=tools_api,
        vecdb=None,
    )
    processor_agent = ChatAgent(config)

    if constrain_recipients:
        processor_agent.enable_message(
            RecipientTool.create(recipients=["EvenHandler", "OddHandler"])
        )
    else:
        processor_agent.enable_message(RecipientTool)

    processor_agent.enable_message(
        SquareTool, require_recipient=True, use=True, handle=False
    )
    if use_done_tool:
        processor_agent.enable_message(DoneTool)
        done_tool_name = DoneTool.default_value("request")

    done_response = (
        f"use the TOOL: `{done_tool_name}` with `content` field set to the result"
        if use_done_tool
        else f"say {DONE} and show me the result"
    )
    processor_task = Task(
        processor_agent,
        name="Processor",
        interactive=False,
        system_message=f"""
        You are given this list of {len(INPUT_NUMBERS)} numbers:
        {INPUT_NUMBERS}. 
        You have to transform each number to a new POSITIVE value.
        However you do not know how to do this transformation.
        You can send the number to one of two people to do the 
        transformation: 
        - EvenHandler (who handles only even numbers),
        - OddHandler (who handles only odd numbers). 
        
        There are 3 cases, depending on the number n
        
        (a) If n is even:
         (a.1) if n is a multiple of 10, send it to EvenHandler,
             using the `square` tool/function-call, specifying the `intended_recipient` 
             field 
             as "EvenHandler".
         (a.2) if n is NOT a multiple of 10, send it to EvenHandler,
             
        (b) If n is odd, send it to OddHandler. 
        
        IMPORTANT: send the numbers ONE AT A TIME. Your message content
        should ONLY be numbers, do not say anything else, other than specifying
        recipients etc.
        
        The handlers will transform the number and give you the result.
        If you deviate from the above rules 
        (i.e. you send it to the wrong person or using the wrong tool/function), 
        you will receive a value of -10.
        Your task is to avoid getting negative values, by making sure you
        follow the above rules. If you ever get a negative value, correct yourself
        in the next step.
        
        Once all {len(INPUT_NUMBERS)} numbers in the given list have been transformed
        to positive values,
        {done_response}
        showing only the positive transformations, 
        in the same order as the original list.
                
        Start by requesting a transformation for the first number.
        Be very concise in your messages, do not say anything unnecessary.
        """,
    )
    even_agent = ChatAgent(config)
    even_agent.enable_message(
        SquareTool,
        use=False,  # LLM of this agent does not need to generate this tool/fn-call
        handle=True,  # this agent needs to handle this tool/fn-call
        require_recipient=False,
    )
    even_task = Task(
        even_agent,
        name="EvenHandler",
        interactive=False,
        done_if_response=[Entity.LLM],  # done as soon as LLM responds
        system_message="""
        You will be given a number. 
        If it is even and not a multiple of 10:
            simply return HALF of that number, 
            WITHOUT using any tools/functions; say nothing else.
        Otherwise, say -10
        """,
    )

    odd_agent = ChatAgent(config)
    odd_task = Task(
        odd_agent,
        name="OddHandler",
        interactive=False,
        done_if_response=[Entity.LLM],  # done as soon as LLM responds
        system_message="""
        You will be given a number n. 
        If it is odd, return (n*3+1), say nothing else. 
        If it is even, say -10
        """,
    )

    processor_task.add_sub_task([even_task, odd_task])
    result = await processor_task.run_async()
    assert all(str(i) in result.content for i in TRANSFORMED_NUMBERS)
</file>

<file path="tests/main/test_recipient_tool.py">
"""
Use Langroid to set up a collaboration among three agents:

- Processor: needs to transform a list of positive numbers, does not know how to
apply the transformations, and sends out each number so that one of two
specialized agents apply the transformation. It is instructed to avoid getting a
negative number.
- EvenHandler only transforms even numbers, otherwise returns a negative number
- OddHandler only transforms odd numbers, otherwise returns a negative number

Since the Processor must avoid getting a negative number, it needs to
specify a recipient for each number it sends out,
using the `recipient_message` tool/function-call, where the `content` field
is the number it wants to send, and the `recipient` field is the name
of the intended recipient, either "EvenHandler" or "OddHandler".

However, the Processor often forgets to use this syntax, and in this situation
the `handle_message_fallback` method of the RecipientTool class
asks the Processor to clarify the intended recipient using the
`add_recipient` tool, which allows the LLM to simply specify a recipient for
its last message, without having to repeat the message.

For more explanation, see the
[Getting Started guide](https://langroid.github.io/langroid/quick-start/three-agent-chat-num-router/)
"""

import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import DoneTool
from langroid.agent.tools.recipient_tool import RecipientTool
from langroid.language_models.mock_lm import MockLMConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.utils.constants import DONE

INPUT_NUMBERS = [1, 100, 12]
TRANSFORMED_NUMBERS = [4, 10000, 6]


class SquareTool(ToolMessage):
    request: str = "square"
    purpose: str = "To square a <number>, when it is a multiple of 10."
    number: int

    # this is a stateless tool, so we can define the handler here,
    # without having to define a `square` method in the agent.
    def handle(self) -> str | DoneTool:
        if self.number % 10 == 0:
            return DONE + str(self.number**2)
        else:
            # test that DoneTool works just like saying DONE
            return DoneTool(content="-1")


@pytest.mark.fallback
@pytest.mark.flaky(reruns=1)
@pytest.mark.parametrize("fn_api", [True, False])
@pytest.mark.parametrize("tools_api", [True, False])
@pytest.mark.parametrize("constrain_recipients", [True, False])
@pytest.mark.parametrize("done_tool", [True, False])
def test_agents_with_recipient_tool(
    fn_api: bool,
    tools_api: bool,
    constrain_recipients: bool,
    done_tool: bool,
):
    config = ChatAgentConfig(
        llm=OpenAIGPTConfig(),
        use_tools=not fn_api,
        use_tools_api=tools_api,
        use_functions_api=fn_api,
        vecdb=None,
    )
    processor_agent = ChatAgent(config)

    if constrain_recipients:
        processor_agent.enable_message(
            RecipientTool.create(recipients=["EvenHandler", "OddHandler"])
        )
    else:
        processor_agent.enable_message(RecipientTool)

    processor_agent.enable_message(
        SquareTool, require_recipient=True, use=True, handle=False
    )
    if done_tool:
        processor_agent.enable_message(DoneTool)
        done_tool_name = DoneTool.default_value("request")

    done_response = (
        f"use the TOOL: `{done_tool_name}` with `content` field set to the result"
        if done_tool
        else f"say {DONE} and show me the result"
    )

    processor_task = Task(
        processor_agent,
        name="Processor",
        interactive=False,
        system_message=f"""
        You are given this list of {len(INPUT_NUMBERS)} numbers:
        {INPUT_NUMBERS}. 
        You have to transform each number to a new POSITIVE value.
        However you do not know how to do this transformation.
        You can send the number to one of two people to do the 
        transformation: 
        - EvenHandler (who handles only even numbers),
        - OddHandler (who handles only odd numbers). 
        
        There are 3 cases, depending on the number n
        
        (a) If n is even:
         (a.1) if n is a multiple of 10, send it to EvenHandler,
             using the `square` tool/function-call, specifying the `recipient` 
             field as "EvenHandler".
         (a.2) if n is NOT a multiple of 10, send it to EvenHandler,
             
        (b) If n is odd, send it to OddHandler. 
        
        IMPORTANT: send the numbers ONE AT A TIME. Your message content
        should ONLY be numbers, do not say anything else, other than specifying
        recipients etc.
        
        The handlers will transform the number and give you the result.
        If you deviate from the above rules 
        (i.e. you send it to the wrong person or using the wrong tool/function), 
        you will receive a value of -10.
        Your task is to avoid getting negative values, by making sure you
        follow the above rules. If you ever get a negative value, correct yourself
        in the next step.
        
        Once all {len(INPUT_NUMBERS)} numbers in the given list have been transformed
        to positive values, 
        {done_response}, 
        showing only the positive transformations, 
        in the same order as the original list.
        
        Start by requesting a transformation for the first number.
        Be very concise in your messages, do not say anything unnecessary.
        """,
    )
    even_agent = ChatAgent(
        ChatAgentConfig(
            llm=MockLMConfig(
                response_fn=lambda x: (
                    str(int(x) // 2) if int(x) % 2 == 0 and int(x) % 10 != 0 else "-10"
                )
            )
        )
    )
    even_agent.enable_message(
        SquareTool,
        use=False,  # LLM of this agent does not need to generate this tool/fn-call
        handle=True,  # this agent needs to handle this tool/fn-call
        require_recipient=False,
    )
    even_task = Task(
        even_agent,
        name="EvenHandler",
        interactive=False,
        done_if_response=[Entity.LLM],  # done as soon as LLM responds
    )

    odd_agent = ChatAgent(
        ChatAgentConfig(
            llm=MockLMConfig(
                response_fn=lambda x: str(int(x) * 3 + 1) if int(x) % 2 else "-10"
            )
        )
    )
    odd_task = Task(
        odd_agent,
        name="OddHandler",
        interactive=False,
        done_if_response=[Entity.LLM],  # done as soon as LLM responds
    )

    processor_task.add_sub_task([even_task, odd_task])
    result = processor_task.run()
    assert all(str(i) in result.content for i in TRANSFORMED_NUMBERS)
</file>

<file path="tests/main/test_redis_cache.py">
import pytest

from langroid.cachedb.redis_cachedb import RedisCache, RedisCacheConfig


@pytest.fixture
def fake_redis_cache():
    config = RedisCacheConfig(fake=False)
    cache = RedisCache(config=config)
    return cache


@pytest.mark.unit
def test_fake_store_and_retrieve(fake_redis_cache):
    key = "test_key"
    data = {"info": "something"}
    fake_redis_cache.store(key, data)
    result = fake_redis_cache.retrieve(key)
    assert result == data


@pytest.fixture
def real_redis_cache():
    config = RedisCacheConfig(
        fake=False,
    )
    cache = RedisCache(config=config)
    return cache


@pytest.mark.integration
def test_real_store_and_retrieve(real_redis_cache):
    key = "test_key"
    data = {"info": "something"}
    real_redis_cache.store(key, data)
    result = real_redis_cache.retrieve(key)
    assert result == data


@pytest.mark.integration
def test_key_deletion(real_redis_cache):
    keys = [f"_test_key_{i}" for i in range(10)]
    datas = [{f"info{i}": f"something{i}"} for i in range(10)]
    for key, data in zip(keys, datas):
        real_redis_cache.store(key, data)
    assert real_redis_cache.retrieve(keys[0]) is not None
    result = real_redis_cache.delete_keys(keys)
    assert result is None
    assert real_redis_cache.retrieve(keys[0]) is None

    for key, data in zip(keys, datas):
        real_redis_cache.store(key, data)
    assert real_redis_cache.retrieve(keys[0]) is not None
    result = real_redis_cache.delete_keys_pattern("_test_key_*")
    assert result is None
    assert real_redis_cache.retrieve(keys[0]) is None
</file>

<file path="tests/main/test_relevance_extractor.py">
import asyncio
from typing import List

import nltk
import pytest

from langroid.agent.batch import run_batch_tasks
from langroid.agent.special.relevance_extractor_agent import (
    RelevanceExtractorAgent,
    RelevanceExtractorAgentConfig,
)
from langroid.agent.task import Task
from langroid.agent.tools.segment_extract_tool import SegmentExtractTool
from langroid.parsing.utils import (
    clean_whitespace,
    extract_numbered_segments,
    number_segments,
    parse_number_range_list,
)
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import NO_ANSWER


@pytest.mark.parametrize(
    "passage, query, expected",
    [
        (
            """
        Whales are big. 
        
        Cats like to be clean. They also like to be petted. And when they 
        are hungry they like to meow. Dogs are very friendly. They are also 
        very loyal. But so are cats. Unlike cats, dogs can get dirty.
        Monkeys are very naughty. They like to jump around. They also like to steal 
        bananas. 
        
        Cats are very independent. Unlike dogs, they like to be left 
        alone.
        """,
            "Characteristics of cats",
            "2-4,7,12-13",  # or LLM could say 2,3,4,7,12,10; we handle this below
        )
    ],
)
@pytest.mark.parametrize("fn_api", [True, False])
def test_relevance_extractor_agent(
    test_settings: Settings,
    fn_api: bool,
    passage: str,
    query: str,
    expected: str,
) -> None:
    set_global(test_settings)
    passage = clean_whitespace(passage)
    agent_cfg = RelevanceExtractorAgentConfig(
        use_tools=not fn_api,  # use tools if not fn_api
        use_functions_api=fn_api,
        query=query,
        segment_length=1,
    )

    # directly send to llm and verify response is as expected
    extractor_agent = RelevanceExtractorAgent(agent_cfg)

    response = extractor_agent.llm_response(passage)
    tools = extractor_agent.get_tool_messages(response)
    assert len(tools) == 1
    assert isinstance(tools[0], SegmentExtractTool)
    assert set(parse_number_range_list(tools[0].segment_list)) == set(
        parse_number_range_list(expected)
    )

    # create task so that:
    # - llm generates sentence-list using SentenceExtractTool
    # - agent extracts sentences using SentenceExtractTool, says DONE
    extractor_agent = RelevanceExtractorAgent(agent_cfg)
    extractor_task = Task(
        extractor_agent,
        interactive=False,
    )

    result = extractor_task.run(passage)
    numbered_passage = number_segments(passage, granularity=agent_cfg.segment_length)
    expected_sentences = extract_numbered_segments(numbered_passage, expected)
    # the result should be the expected sentences, modulo whitespace
    result_sentences = [s.strip() for s in nltk.sent_tokenize(result.content)]
    expected_sentences = [s.strip() for s in nltk.sent_tokenize(expected_sentences)]
    assert set(result_sentences) == set(expected_sentences)


@pytest.mark.asyncio
@pytest.mark.parametrize(
    "passages, query, expected",
    [  # list of tuples
        (
            [
                "Whales are big.",
                """Cats like to be clean. They also like to be petted. And when they 
            are hungry they like to meow. Dogs are very friendly. They are also 
            very loyal. But so are cats. Unlike cats, dogs can get dirty.""",
                "Cats are very independent. Unlike dogs, they like to be left alone.",
            ],
            "Characteristics of cats",
            ["", "1-3,6", "1,2"],
        )
    ],
)
@pytest.mark.parametrize("fn_api", [True, False])
async def test_relevance_extractor_concurrent(
    test_settings: Settings,
    fn_api: bool,
    passages: List[str],
    query: str,
    expected: List[str],
) -> None:
    """
    Test concurrent extraction of relevant sentences from multiple passages.
    This is typically how we should use this extractor in a RAG pipeline.
    """
    set_global(test_settings)
    passages = [clean_whitespace(passage) for passage in passages]
    agent_cfg = RelevanceExtractorAgentConfig(
        use_tools=not fn_api,  # use tools if not fn_api
        use_functions_api=fn_api,
        query=query,
        segment_length=1,
    )
    agent_cfg.llm.stream = False  # disable streaming for concurrent calls

    # send to task.run_async and gather results
    async def _run_task(msg: str, i: int):
        # each invocation needs to create its own ChatAgent,
        # else the states gets mangled by concurrent calls!
        agent = RelevanceExtractorAgent(agent_cfg)
        task = Task(
            agent,
            name=f"Test-{i}",
            interactive=False,
        )
        return await task.run_async(msg=msg)

    # concurrent async calls to all tasks
    answers = await asyncio.gather(
        *(_run_task(passage, i) for i, passage in enumerate(passages))
    )
    assert len(answers) == len(passages)

    extracted_sentences = [
        s for a in answers for s in nltk.sent_tokenize(a.content) if s != NO_ANSWER
    ]
    expected_sentences = [
        s
        for passg, exp in zip(passages, expected)
        for s in nltk.sent_tokenize(
            extract_numbered_segments(
                number_segments(passg, granularity=agent_cfg.segment_length),
                exp,
            )
        )
        if s != ""
    ]

    expected_sentences = [s.strip() for s in expected_sentences]
    extracted_sentences = [s.strip() for s in extracted_sentences]
    assert set(extracted_sentences) == set(expected_sentences)


@pytest.mark.parametrize(
    "passages, query, expected",
    [  # list of tuples
        (
            [
                "Whales are big.",
                """Cats like to be clean. They also like to be petted. And when they 
                are hungry they like to meow. Dogs are very friendly. They are also 
                very loyal. But so are cats. Unlike cats, dogs can get dirty.""",
                "Cats are very independent. Unlike dogs, they like to be left alone.",
            ],
            "Characteristics of cats",
            ["", "1-3,6", "1,2"],
        )
    ],
)
@pytest.mark.parametrize("fn_api", [False])
def test_relevance_extractor_batch(
    test_settings: Settings,
    fn_api: bool,
    passages: List[str],
    query: str,
    expected: List[str],
) -> None:
    """
    Use `run_batch_tasks` to run the extractor on multiple passages.
    """

    set_global(test_settings)
    passages = [clean_whitespace(passage) for passage in passages]
    agent_cfg = RelevanceExtractorAgentConfig(
        use_tools=not fn_api,  # use tools if not fn_api
        use_functions_api=fn_api,
        query=query,
        segment_length=1,
    )
    agent_cfg.llm.stream = False  # disable streaming for concurrent calls

    agent = RelevanceExtractorAgent(agent_cfg)
    task = Task(
        agent,
        name="Test",
        interactive=False,
    )

    answers = run_batch_tasks(
        task,
        passages,
        input_map=lambda msg: msg,
        output_map=lambda ans: ans,
    )

    assert len(answers) == len(passages)

    extracted_sentences = [
        s for a in answers for s in nltk.sent_tokenize(a.content) if s != NO_ANSWER
    ]
    expected_sentences = [
        s
        for passg, exp in zip(passages, expected)
        for s in nltk.sent_tokenize(
            extract_numbered_segments(
                number_segments(passg, granularity=agent_cfg.segment_length),
                exp,
            )
        )
        if s != ""
    ]

    expected_sentences = [s.strip() for s in expected_sentences]
    extracted_sentences = [s.strip() for s in extracted_sentences]
    assert set(extracted_sentences) == set(expected_sentences)


@pytest.mark.parametrize(
    "passage, spec, expected",
    [
        (
            """
            <#1#> Whales are big. Dogs are very friendly. <#2#>They are also very 
            loyal.
            Buffaloes are very strong. 
            
            <#3#> They are also kind. But so are giraffes.
            
            <#10#> Cats like to be clean. They also like to be petted. And when they
            are hungry they like to meow. <#11#> Dogs are very friendly. They are also 
            very dirty. But not cats. Dogs bark.
            """,
            "2,3,11",
            "loyal,Buffaloes,kind,giraffes,Dogs,friendly,dirty,bark",
        )
    ],
)
def test_extract_numbered_segments(test_settings: Settings, passage, spec, expected):
    set_global(test_settings)
    extract = extract_numbered_segments(passage, spec)
    pieces = expected.split(",")
    assert all(piece.strip() in extract for piece in pieces)
</file>

<file path="tests/main/test_repo_chunking.py">
"""
Test of:
GitHub Repo URL -> content files -> chunk
"""

from langroid.parsing.code_parser import CodeParser, CodeParsingConfig
from langroid.parsing.repo_loader import RepoLoader

MAX_CHUNK_SIZE = 20


def test_repo_chunking():
    url = "https://github.com/eugeneyan/testing-ml"
    repo_loader = RepoLoader(url)
    _, docs = repo_loader.load(depth=2, lines=100)
    assert len(docs) > 0

    parse_cfg = CodeParsingConfig(
        chunk_size=MAX_CHUNK_SIZE,
        extensions=["py", "sh", "md", "txt"],  # include text, code
        token_encoding_model="text-embedding-3-small",
    )

    parser = CodeParser(parse_cfg)
    split_docs = parser.split(docs)[:3]

    assert len(split_docs) > 0
</file>

<file path="tests/main/test_repo_loader.py">
import json
from pathlib import Path

from langroid.parsing.repo_loader import RepoLoader, RepoLoaderConfig


def test_repo_loader() -> None:
    """
    Test the RepoLoader class.
    """
    url = "https://github.com/eugeneyan/testing-ml"
    repo_loader = RepoLoader(url, config=RepoLoaderConfig())

    # directly create Document objects from github repo url
    # (uses many GitHub API calls, not recommended;
    #  use load() instead, which clones if needed, then loads from local folder)
    docs = repo_loader.load_docs_from_github(10, depth=0, lines=20)
    assert len(docs) > 0
    assert len(docs) <= 10
    for doc in docs:
        assert len(doc.content.split("\n")) <= 20

    # tree structure direct from github; again not recommended if easy to clone.
    tree = repo_loader.load_tree_from_github(depth=1, lines=3)
    assert len(tree) > 0

    # tree, docs from local clone (if exists, else clone first)
    tree, docs = repo_loader.load(depth=1, lines=5)
    assert len(tree) > 0
    assert len(docs) > 0, f"No docs loaded from repo {repo_loader.clone_path}"

    # test static fn that loads from a local folder;
    # this is a general fn that can be used to load from any folder,
    # not necessarily a git repo, or not necessarily even code, e.g.,
    # could be any folder of text files
    tree, docs = RepoLoader.load_from_folder(
        repo_loader.clone_path,
        depth=1,
        lines=5,
        file_types=["md", "txt", "toml"],
        exclude_dirs=[".git", "tests"],
    )
    assert len(tree) > 0
    assert len(docs) > 0

    # use a different fn to just load documents from folder
    docs = RepoLoader.get_documents(
        repo_loader.clone_path,
        depth=1,
        lines=5,
        file_types=["md", "txt", "toml"],
        exclude_dirs=[".git", "tests"],
    )
    assert len(docs) > 0

    # test making doc from single file path
    docs = RepoLoader.get_documents(
        Path(repo_loader.clone_path) / "pyproject.toml",
        depth=1,
        lines=5,
        file_types=["md", "txt", "toml"],
        exclude_dirs=[".git", "tests"],
    )
    assert len(docs) == 1

    # list all names to depth 2
    # Useful to provide LLM a listing of contents of a repo
    listing = repo_loader.ls(tree, depth=2)
    assert len(listing) > 0

    # dump to json
    s = json.dumps(tree, indent=2)
    assert len(s) > 0

    # select specific files
    desired = ["workflows", "Makefile", "pyproject.toml"]
    subtree = RepoLoader.select(tree, includes=desired)

    assert len(subtree["dirs"]) + len(subtree["files"]) <= 3

    # select non-existent files
    subtree = RepoLoader.select(tree, includes=["non-existent-file"])

    assert len(subtree["dirs"]) + len(subtree["files"]) == 0

    # list all names to depth 2
    listing = repo_loader.ls(tree, depth=2)
    assert len(listing) > 0
</file>

<file path="tests/main/test_stateful_tool.py">
"""
Simple test of a stateful tool: enabling this tool on an agent
allows it to change the agent's state.
"""

import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.utils.configuration import Settings, set_global


class IncrementTool(ToolMessage):
    request: str = "increment"
    purpose: str = "To increment my number by an <amount>."
    amount: int

    def handle(self, agent: ChatAgent) -> str:
        agent.number += self.amount
        return str(agent.number)


class NumberGameAgent(ChatAgent):
    def __init__(self, config: ChatAgentConfig):
        super().__init__(config)
        self.number = 0

    def increment(self, msg: IncrementTool) -> str:
        """
        Increments the agent's number by the amount specified in the message.
        Args:
            msg (IncrementTool): The message containing the amount to increment by.
        Returns:
            str: The agent's number after incrementing.
        """
        return msg.handle(self)


@pytest.mark.parametrize("fn_api", [True, False])
def test_stateful_tool(test_settings: Settings, fn_api: bool):
    set_global(test_settings)
    number_game_agent = NumberGameAgent(
        ChatAgentConfig(
            name="Gamer",
            llm=OpenAIGPTConfig(),
            vecdb=None,
            use_tools=not fn_api,
            use_functions_api=fn_api,
        )
    )

    number_game_agent.enable_message(IncrementTool)
    task = Task(
        number_game_agent,
        interactive=False,
        system_message="""
            I have a number in mind. Your job is to keep incrementing
            it by 5 using the `increment` tool, and I will tell you the result.
            Once you have reached 25 or more, you can say DONE and show me the result.
        """,
    )
    result = task.run()
    assert "25" in result.content


@pytest.mark.asyncio
@pytest.mark.parametrize("fn_api", [True, False])
async def test_stateful_tool_async(test_settings: Settings, fn_api: bool):
    set_global(test_settings)
    number_game_agent = NumberGameAgent(
        ChatAgentConfig(
            name="Gamer",
            llm=OpenAIGPTConfig(),
            vecdb=None,
            use_tools=not fn_api,
            use_functions_api=fn_api,
        )
    )

    number_game_agent.enable_message(IncrementTool)
    task = Task(
        number_game_agent,
        interactive=False,
        system_message="""
            I have a number in mind. Your job is to keep incrementing
            it by 5 using the `increment` tool, and I will tell you the result.
            Once you have reached 25 or more, you can say DONE and show me the result.
        """,
    )
    result = await task.run_async()
    assert "25" in result.content
</file>

<file path="tests/main/test_stateless_tool_messages.py">
from typing import Optional

import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.tool_message import ToolMessage
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.parsing.parser import ParsingConfig
from langroid.prompts.prompts_config import PromptsConfig
from langroid.utils.configuration import Settings, set_global


class SquareTool(ToolMessage):
    request: str = "square"
    purpose: str = """
            To find the square of a <number> 
            """
    number: int

    def handle(self) -> str:
        """
        We are able to define the handler within the Tool class itself,
        rather than in the agent, since the tool does not require any
        member variables from the agent.
        We can think of these tools as "stateless" tools or Static tools,
        similar to static methods. Since the SquareTool is stateless,
        the corresponding agent method `square` can be automatically
        defined, using the body of the `handle` method.
        Thus there is no need to manually define a `square` method in the
        agent, as we normally would have to do for a (stateful) tool that has no
        `handle` method.
        See the `_get_tool_list` method in `agent/base.py` for how such
        tools are set up.
        """
        return str(self.number**2)


cfg = ChatAgentConfig(
    name="test-langroid",
    vecdb=None,
    llm=OpenAIGPTConfig(
        type="openai",
        cache_config=RedisCacheConfig(fake=False),
    ),
    parsing=ParsingConfig(),
    prompts=PromptsConfig(),
    use_functions_api=False,
    use_tools=True,
)
agent = ChatAgent(cfg)

# Define the range of values each variable can have
use_vals = [True, False]
handle_vals = [True, False]
force_vals = [True, False]
message_classes = [None, SquareTool]


agent.enable_message(SquareTool)


@pytest.mark.parametrize("msg_class", [None, SquareTool])
@pytest.mark.parametrize("use", [True, False])
@pytest.mark.parametrize("handle", [True, False])
@pytest.mark.parametrize("force", [True, False])
def test_enable_message(
    msg_class: Optional[ToolMessage], use: bool, handle: bool, force: bool
):
    agent.enable_message(msg_class, use=use, handle=handle, force=force)
    usable_tools = agent.llm_tools_usable
    tools = agent._get_tool_list(msg_class)
    for tool in set(tools).intersection(usable_tools):
        assert tool in agent.llm_tools_map
        if msg_class is not None:
            assert agent.llm_tools_map[tool] == msg_class
            assert agent.llm_functions_map[tool] == msg_class.llm_function_schema()
        assert (tool in agent.llm_tools_handled) == handle
        assert (tool in agent.llm_tools_usable) == use
        assert (tool in agent.llm_functions_handled) == handle
        assert (tool in agent.llm_functions_usable) == use

    if msg_class is not None:
        assert (
            agent.llm_function_force is not None
            and agent.llm_function_force["name"] == tools[0]
        ) == force


@pytest.mark.parametrize("msg_class", [None, SquareTool])
def test_disable_message_handling(msg_class: Optional[ToolMessage]):
    agent.enable_message(SquareTool)
    usable_tools = agent.llm_tools_usable
    agent.disable_message_handling(msg_class)

    tools = agent._get_tool_list(msg_class)
    for tool in set(tools).intersection(usable_tools):
        assert tool not in agent.llm_tools_handled
        assert tool not in agent.llm_functions_handled
        assert tool in agent.llm_tools_usable
        assert tool in agent.llm_functions_usable


@pytest.mark.parametrize("msg_class", [None, SquareTool])
def test_disable_message_use(msg_class: Optional[ToolMessage]):
    agent.enable_message(SquareTool)
    usable_tools = agent.llm_tools_usable
    agent.disable_message_use(msg_class)
    tools = agent._get_tool_list(msg_class)
    for tool in set(tools).intersection(usable_tools):
        assert tool not in agent.llm_tools_usable
        assert tool not in agent.llm_functions_usable
        assert tool in agent.llm_tools_handled
        assert tool in agent.llm_functions_handled


NONE_MSG = "nothing to see here"

SQUARE_MSG = """
Ok, thank you.
{
"request": "square",
"number": 12
} 
Hope you can tell me!
"""


def test_agent_handle_message():
    """
    Test whether messages are handled correctly, and that
    message enabling/disabling works as expected.
    """
    agent.enable_message(SquareTool)
    assert agent.handle_message(NONE_MSG) is None
    assert agent.handle_message(SQUARE_MSG).content == "144"

    agent.disable_message_handling(SquareTool)
    assert agent.handle_message(SQUARE_MSG) is None

    agent.disable_message_handling(SquareTool)
    assert agent.handle_message(SQUARE_MSG) is None

    agent.enable_message(SquareTool)
    assert agent.handle_message(SQUARE_MSG).content == "144"


BAD_SQUARE_MSG = """
Ok, thank you.
{
"request": "square"
} 
Hope you can tell me!
"""


@pytest.mark.parametrize("as_string", [False, True])
def test_handle_bad_tool_message(as_string: bool):
    """
    Test that a correct tool name with bad/missing args is
            handled correctly, i.e. the agent returns a clear
            error message to the LLM so it can try to fix it.

    as_string: whether to pass the bad tool message as a string or as an LLM msg
    """
    agent.enable_message(SquareTool)
    assert agent.handle_message(NONE_MSG) is None
    if as_string:
        # set up a prior LLM-originated msg, to mock a scenario
        # where the last msg was from LLM, prior to calling
        # handle_message with the bad tool message -- we are trying to
        # test that the error is raised correctly in this case
        agent.llm_response("3+4=")
        result = agent.handle_message(BAD_SQUARE_MSG)
    else:
        bad_tool_from_llm = agent.create_llm_response(BAD_SQUARE_MSG)
        result = agent.handle_message(bad_tool_from_llm)
    assert all([x in result for x in ["square", "number", "required"]])


@pytest.mark.parametrize(
    "use_functions_api, message_class, prompt, result",
    [
        (
            False,
            SquareTool,
            """Use the `square` tool to square the number 9""",
            "81",
        ),
        (
            True,
            SquareTool,
            """Use the `square` tool to square the number 9""",
            "81",
        ),
    ],
)
def test_llm_tool_message(
    test_settings: Settings,
    use_functions_api: bool,
    message_class: ToolMessage,
    prompt: str,
    result: str,
):
    """
    Test whether LLM is able to GENERATE message (tool) in required format, and the
    agent handles the message correctly.
    Args:
        test_settings: test settings from conftest.py
        use_functions_api: whether to use LLM's functions api or not
            (i.e. use the langroid ToolMessage tools instead).
        message_class: the message class (i.e. tool/function) to test
        prompt: the prompt to use to induce the LLM to use the tool
        result: the expected result from agent handling the tool-message
    """
    set_global(test_settings)
    agent = ChatAgent(cfg)
    agent.config.use_functions_api = use_functions_api
    agent.config.use_tools = not use_functions_api
    agent.enable_message(SquareTool)

    llm_msg = agent.llm_response_forget(prompt)
    assert isinstance(agent.get_tool_messages(llm_msg)[0], message_class)

    agent_result = agent.handle_message(llm_msg).content
    assert result.lower() in agent_result.lower()


@pytest.mark.asyncio
@pytest.mark.parametrize(
    "use_functions_api, message_class, prompt, result",
    [
        (
            False,
            SquareTool,
            """Use the `square` tool to square the number 9""",
            "81",
        ),
        (
            True,
            SquareTool,
            """Use the `square` tool to square the number 9""",
            "81",
        ),
    ],
)
async def test_llm_tool_message_async(
    test_settings: Settings,
    use_functions_api: bool,
    message_class: ToolMessage,
    prompt: str,
    result: str,
):
    """
    Test whether LLM is able to GENERATE message (tool) in required format, and the
    agent handles the message correctly.
    Args:
        test_settings: test settings from conftest.py
        use_functions_api: whether to use LLM's functions api or not
            (i.e. use the langroid ToolMessage tools instead).
        message_class: the message class (i.e. tool/function) to test
        prompt: the prompt to use to induce the LLM to use the tool
        result: the expected result from agent handling the tool-message
    """
    set_global(test_settings)
    agent = ChatAgent(cfg)
    agent.config.use_functions_api = use_functions_api
    agent.config.use_tools = not use_functions_api
    agent.enable_message(SquareTool)

    llm_msg = await agent.llm_response_forget_async(prompt)
    assert isinstance(agent.get_tool_messages(llm_msg)[0], message_class)

    agent_result = agent.handle_message(llm_msg).content
    assert result.lower() in agent_result.lower()
</file>

<file path="tests/main/test_string_search.py">
import pytest

from langroid.mytypes import DocMetaData, Document
from langroid.parsing.search import (
    find_closest_matches_with_bm25,
    find_fuzzy_matches_in_docs,
    get_context,
    preprocess_text,
)


@pytest.fixture
def original_docs():
    return [
        Document(
            content="""
            This is a sample blah document. Tigers are the largest cat species 
            in the world. And they are also one of the most charismatic.
            In Bengal, the tiger is the symbol of power.
            And here another sample document.
            Lions are the second largest cat species in the world.
            """,
            metadata=DocMetaData(id=1),
        ),
        Document(content="Another legal document.", metadata=DocMetaData(id=2)),
        Document(content="Yet a another document sample.", metadata=DocMetaData(id=3)),
    ]


# mock "clean" version of original docs
@pytest.fixture
def sample_docs():
    return [
        Document(content="This is sample document.", metadata=DocMetaData(id=1)),
        Document(content="Another legal document.", metadata=DocMetaData(id=2)),
        Document(content="Yet another document sample.", metadata=DocMetaData(id=3)),
    ]


@pytest.mark.parametrize(
    "query, k, n_matches_expected",
    [("sample", 3, 2), ("document", 2, 2), ("should not be found", 1, 0)],
)
def test_return_correct_number_of_matches(
    original_docs,
    sample_docs,
    query,
    k,
    n_matches_expected,
):
    results = find_fuzzy_matches_in_docs(query, original_docs, sample_docs, k)
    assert len(results) == n_matches_expected


@pytest.mark.parametrize(
    "words_before, words_after, expected",
    [
        (1, 1, ["a sample blah", "another sample document"]),
        (2, 2, ["is a sample blah document", "here another sample document. Lions"]),
        (None, None, ["This is a sample blah document."]),
    ],
)
def test_find_match_with_surrounding_words(
    original_docs, sample_docs, words_before, words_after, expected
):
    query = "sample"
    k = 1
    # returns a list of tuples (Document, score)
    results = find_fuzzy_matches_in_docs(
        query, original_docs, sample_docs, k, words_before, words_after
    )
    assert all(e in results[0][0].content for e in expected)


def test_empty_docs():
    docs = []
    docs_clean = []
    query = "test"
    result = find_closest_matches_with_bm25(docs, docs_clean, query)
    assert result == []


def test_matching_docs(sample_docs, original_docs):
    query = "test"
    result = find_closest_matches_with_bm25(original_docs, sample_docs, query, k=2)
    # As we are not mocking BM25Okapi, we can't predict exact scores.
    # We'll just assert that results are returned and are from our document list.
    assert len(result) == 2 and all(doc in original_docs for doc, score in result)


def test_preprocess_lowercase():
    result = preprocess_text("HELLO WORLD")
    assert result == "hello world"


def test_preprocess_remove_punctuation():
    result = preprocess_text("Hello, world!")
    assert result == "hello world"


# This test may vary depending on the actual stopwords list in nltk
def test_preprocess_remove_stopwords():
    result = preprocess_text("The world is a beautiful place.")
    assert "the" not in result
    assert "is" not in result
    assert "a " not in result


# This test assumes a default behavior of WordNetLemmatizer.
# It might need adjustments if lemmatization behavior changes in future nltk versions.
def test_preprocess_lemmatization():
    result = preprocess_text("running")
    assert "run" in result


def test_preprocess_combined():
    result = preprocess_text("The sun is shining, and birds are singing!")
    assert "the" not in result
    assert "is" not in result
    assert "and" not in result
    assert "sun" in result
    assert "bird" in result  # Assuming lemmatization converts "birds" to "bird"
    assert "sing" in result  # Assuming lemmatization converts "singing" to "sing"


@pytest.mark.parametrize(
    "query, text, before, after, expected, not_expected",
    [
        ("sample", "This is a sample document.", 1, 1, "a,document", "this"),
        (
            "UAS",
            "Develop a customizable Unmanned Aerial System (UAS) suite that will",
            0,
            3,
            "suite,that",
            "aerial,system",
        ),
    ],
)
def test_get_context(query, text, before, after, expected, not_expected):
    result, _, _ = get_context(query, text, before, after)
    expected = expected.split(",")
    not_expected = not_expected.split(",")
    assert all(word in result for word in expected)
    assert all(word not in result for word in not_expected)
</file>

<file path="tests/main/test_structured_output.py">
import copy
from typing import Any, Callable, List

import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.tool_message import ToolMessage
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.pydantic_v1 import BaseModel, Field
from langroid.utils.configuration import Settings, set_global

cfg = ChatAgentConfig(
    name="test-langroid",
    vecdb=None,
    llm=OpenAIGPTConfig(
        type="openai",
        cache_config=RedisCacheConfig(fake=False),
    ),
)
strict_cfg = ChatAgentConfig(
    name="test-langroid",
    vecdb=None,
    llm=OpenAIGPTConfig(
        type="openai",
        cache_config=RedisCacheConfig(fake=False),
        supports_json_schema=True,
        supports_strict_tools=True,
        parallel_tool_calls=False,
    ),
)


class Country(BaseModel):
    """Info about a country"""

    name: str = Field(..., description="Name of the country")
    capital: str = Field(..., description="Capital of the country")


class President(BaseModel):
    """Info about a president of a country"""

    country: Country = Field(..., description="Country of the president")
    name: str = Field(..., description="Name of the president")
    election_year: int = Field(..., description="Year of election of the president")


class PresidentList(BaseModel):
    """List of presidents of various countries"""

    presidents: List[President] = Field(..., description="List of presidents")


class PresidentListTool(ToolMessage):
    """Tool/Function-call to present a list of presidents"""

    request: str = "president_list"
    purpose: str = """To show a list of presidents"""
    my_presidents: PresidentList = Field(..., description="List of presidents")

    def handle(self) -> str:
        return str(len(self.my_presidents.presidents))

    @classmethod
    def examples(cls) -> List["PresidentListTool"]:
        """Examples to use in prompt; Not essential, but increases chance of LLM
        generating in the expected format"""
        return [
            cls(
                my_presidents=PresidentList(
                    presidents=[
                        President(
                            country=Country(name="USA", capital="Washington DC"),
                            name="Joe Biden",
                            election_year=2020,
                        ),
                        President(
                            country=Country(name="France", capital="Paris"),
                            name="Emmanuel Macron",
                            election_year=2017,
                        ),
                    ]
                )
            ),
        ]


class PresidentTool(ToolMessage):
    """Tool/function to generate a president example"""

    request: str = "show_president"
    purpose: str = """To generate an example of a president"""
    president: President = Field(..., description="An example of a president")

    def handle(self) -> str:
        return self.president.country.name

    @classmethod
    def examples(cls) -> List["PresidentTool"]:
        """Examples to use in prompt; Not essential, but increases chance of LLM
        generating in the expected format"""
        return [
            cls(
                president=President(
                    name="Joe Biden",
                    country=Country(name="USA", capital="Washington DC"),
                    election_year=2020,
                )
            )
        ]


@pytest.mark.parametrize("use_tools_api", [True, False])
@pytest.mark.parametrize("use_functions_api", [True, False])
def test_llm_structured_output_list(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
):
    """
    Test whether LLM is able to GENERATE structured output.
    """
    set_global(test_settings)
    agent = ChatAgent(cfg)
    agent.config.use_functions_api = use_functions_api
    agent.config.use_tools = not use_functions_api
    agent.config.use_tools_api = use_tools_api
    agent.enable_message(PresidentListTool)
    N = 3
    prompt = f"Show me examples of {N} Presidents of any set of countries you choose"
    llm_msg = agent.llm_response_forget(prompt)
    assert isinstance(agent.get_tool_messages(llm_msg)[0], PresidentListTool)
    agent_result = agent.agent_response(llm_msg)
    assert agent_result.content == str(N)


@pytest.mark.parametrize("use_tools_api", [True, False])
@pytest.mark.parametrize("use_functions_api", [True, False])
def test_llm_structured_output_nested(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
):
    """
    Test whether LLM is able to GENERATE nested structured output.
    """
    set_global(test_settings)
    agent = ChatAgent(cfg)
    agent.config.use_functions_api = use_functions_api
    agent.config.use_tools = not use_functions_api
    agent.config.use_tools_api = use_tools_api
    agent.enable_message(PresidentTool)
    country = "France"
    prompt = f"Show me an example of a President of {country}"
    llm_msg = agent.llm_response_forget(prompt)
    assert isinstance(agent.get_tool_messages(llm_msg)[0], PresidentTool)
    assert country == agent.agent_response(llm_msg).content


@pytest.mark.parametrize("instructions", [True, False])
@pytest.mark.parametrize("use", [True, False])
@pytest.mark.parametrize("force_tools", [True, False])
@pytest.mark.parametrize("use_tools_api", [True, False])
@pytest.mark.parametrize("use_functions_api", [True, False])
def test_llm_strict_json(
    instructions: bool,
    use: bool,
    force_tools: bool,
    use_tools_api: bool,
    use_functions_api: bool,
):
    """Tests structured output generation in strict JSON mode."""
    cfg = copy.deepcopy(strict_cfg)
    cfg.instructions_output_format = instructions
    cfg.use_output_format = use
    cfg.use_tools_on_output_format = force_tools
    cfg.use_tools = not use_functions_api
    cfg.use_functions_api = use_functions_api
    cfg.use_tools_api = use_tools_api
    agent = ChatAgent(cfg)

    def typed_llm_response(
        prompt: str,
        output_type: type,
    ) -> Any:
        response = agent[output_type].llm_response_forget(prompt)
        return agent.from_ChatDocument(response, output_type)

    def valid_typed_response(
        prompt: str,
        output_type: type,
        test: Callable[[Any], bool] = lambda _: True,
    ) -> bool:
        response = typed_llm_response(prompt, output_type)
        return isinstance(response, output_type) and test(response)

    president_prompt = "Show me an example of a President of France"
    presidents_prompt = "Show me an example of two Presidents"
    country_prompt = "Show me an example of a country"

    # The model always returns the correct type, even without instructions to do so
    assert valid_typed_response(president_prompt, President)
    assert valid_typed_response(president_prompt, PresidentTool)
    assert valid_typed_response(
        president_prompt,
        PresidentListTool,
        lambda output: len(output.my_presidents.presidents) == 1,
    )
    assert valid_typed_response(
        presidents_prompt,
        PresidentList,
        lambda output: len(output.presidents) == 2,
    )
    assert valid_typed_response(
        presidents_prompt,
        PresidentListTool,
        lambda output: len(output.my_presidents.presidents) == 2,
    )
    assert valid_typed_response(country_prompt, Country)

    # The model returns the correct type, even when the request is mismatched
    assert valid_typed_response(country_prompt, President)
    assert valid_typed_response(presidents_prompt, PresidentTool)
    assert valid_typed_response(country_prompt, PresidentList)
    assert valid_typed_response(president_prompt, Country)

    # Structured output handles simple Python types
    assert typed_llm_response("What is 2+2?", int) == 4
    assert typed_llm_response("Is 2+2 equal to 4?", bool)
    assert abs(typed_llm_response("What is the value of pi?", float) - 3.14) < 0.01
    assert valid_typed_response(president_prompt, str)


@pytest.mark.parametrize("instructions", [True, False])
@pytest.mark.parametrize("use", [True, False])
@pytest.mark.parametrize("force_tools", [True, False])
@pytest.mark.parametrize("use_tools_api", [True, False])
@pytest.mark.parametrize("use_functions_api", [True, False])
@pytest.mark.asyncio
async def test_llm_strict_json_async(
    instructions: bool,
    use: bool,
    force_tools: bool,
    use_tools_api: bool,
    use_functions_api: bool,
):
    """Tests asynchronous structured output generation in strict JSON mode."""
    cfg = copy.deepcopy(strict_cfg)
    cfg.instructions_output_format = instructions
    cfg.use_output_format = use
    cfg.use_tools_on_output_format = force_tools
    cfg.use_tools = not use_functions_api
    cfg.use_functions_api = use_functions_api
    cfg.use_tools_api = use_tools_api
    agent = ChatAgent(cfg)

    async def typed_llm_response(
        prompt: str,
        output_type: type,
    ) -> Any:
        response = await agent[output_type].llm_response_forget_async(prompt)
        return agent.from_ChatDocument(response, output_type)

    async def valid_typed_response(
        prompt: str,
        output_type: type,
        test: Callable[[Any], bool] = lambda _: True,
    ) -> bool:
        response = await typed_llm_response(prompt, output_type)
        return isinstance(response, output_type) and test(response)

    president_prompt = "Show me an example of a President of France"
    presidents_prompt = "Show me an example of two Presidents"
    country_prompt = "Show me an example of a country"

    # The model always returns the correct type, even without instructions to do so
    assert await valid_typed_response(president_prompt, President)
    assert await valid_typed_response(president_prompt, PresidentTool)
    assert await valid_typed_response(
        president_prompt,
        PresidentListTool,
        lambda output: len(output.my_presidents.presidents) == 1,
    )
    assert await valid_typed_response(
        presidents_prompt,
        PresidentList,
        lambda output: len(output.presidents) == 2,
    )
    assert await valid_typed_response(
        presidents_prompt,
        PresidentListTool,
        lambda output: len(output.my_presidents.presidents) == 2,
    )
    assert await valid_typed_response(country_prompt, Country)

    # The model returns the correct type, even when the request is mismatched
    assert await valid_typed_response(country_prompt, President)
    assert await valid_typed_response(presidents_prompt, PresidentTool)
    assert await valid_typed_response(country_prompt, PresidentList)
    assert await valid_typed_response(president_prompt, Country)

    # Structured output handles simple Python types
    assert await typed_llm_response("What is 2+2?", int) == 4
    assert await typed_llm_response("Is 2+2 equal to 4?", bool)
    assert (
        abs(await typed_llm_response("What is the value of pi?", float) - 3.14) < 0.01
    )
    assert await valid_typed_response(president_prompt, str)


@pytest.mark.parametrize("use", [True, False])
@pytest.mark.parametrize("handle", [True, False])
def test_output_format_tools(use: bool, handle: bool):
    cfg = copy.deepcopy(strict_cfg)
    cfg.handle_output_format = handle
    cfg.use_output_format = use
    agent = ChatAgent(cfg)

    agent_1 = agent[PresidentTool]
    agent_2 = agent[PresidentListTool]

    # agent[T] does not have T enabled for use or handling.
    for a in [agent, agent_1]:
        assert "president_list" not in a.llm_tools_usable
        assert "president_list" not in a.llm_tools_handled
    for a in [agent, agent_2]:
        assert "show_president" not in a.llm_tools_usable
        assert "show_president" not in a.llm_tools_handled

    agent.set_output_format(PresidentListTool)

    # setting the output format to T results in enabling use/handling of T
    # based on the cfg.use_output_format and cfg.handle_output_format
    assert ("president_list" in agent.llm_tools_handled) == handle
    assert ("president_list" in agent.llm_tools_usable) == use

    response = agent.llm_response_forget("Give me a list of presidents")
    # the response is handled only if cfg.handle_output_format is True
    assert (agent.handle_message(response) is not None) == handle

    agent.set_output_format(None)
    # We do not retain handling/use of
    # PresidentListTool as it was not explicitly enabled for handling/use
    # via `enable_message`.
    assert "president_list" not in agent.llm_tools_handled
    assert "president_list" not in agent.llm_tools_usable

    agent.set_output_format(PresidentTool, handle=True, use=True)
    assert "show_president" in agent.llm_tools_handled
    assert "show_president" in agent.llm_tools_usable

    response = agent.llm_response_forget("Give me a president")
    assert agent.handle_message(response) is not None

    # Explicitly enable PresidentTool
    agent.enable_message(PresidentTool)
    agent.set_output_format(PresidentListTool)

    # We DO retain the use/handling of PresidentTool
    # in the sets of enabled and handled tools
    # as it was explicitly enabled
    assert "show_president" in agent.llm_tools_handled
    assert "show_president" in agent.llm_tools_usable


@pytest.mark.parametrize("instructions", [True, False])
@pytest.mark.parametrize("use", [True, False])
def test_output_format_instructions(instructions: bool, use: bool):
    cfg = copy.deepcopy(strict_cfg)
    cfg.instructions_output_format = instructions
    cfg.use_output_format = use
    agent = ChatAgent(cfg)

    agent_1 = agent[PresidentTool]
    agent_2 = agent[PresidentListTool]
    # The strict-typed agent[T] will not have format instructions specifically for T
    for a in [agent, agent_1]:
        assert "president_list" not in a.output_format_instructions
    for a in [agent, agent_2]:
        assert "show_president" not in a.output_format_instructions

    agent.set_output_format(PresidentListTool)
    # We do add schema information to the instructions if the tool is enabled for use
    assert ("my_presidents" in agent.output_format_instructions) == (
        not use and instructions
    )
    # If we enable the tool for use, we only specify that the tool should be used
    assert ("`president_list`" in agent.output_format_instructions) == (
        use and instructions
    )
    # If the tool is enabled for use or instructions are generated, schema
    # information is added to the system message
    assert ("my_presidents" in agent._create_system_and_tools_message().content) == (
        use or instructions
    )

    agent.enable_message(PresidentTool)
    agent.set_output_format(PresidentTool)
    # The tool is already enabled and we do not add the schema to the
    # instructions
    assert ("`show_president`" in agent.output_format_instructions) == instructions
    assert "country" not in agent.output_format_instructions

    agent.set_output_format(Country)
    assert ("capital" in agent.output_format_instructions) == instructions

    agent.set_output_format(PresidentList, instructions=True)
    assert "presidents" in agent.output_format_instructions

    agent.set_output_format(None)
    assert agent.output_format_instructions == ""
</file>

<file path="tests/main/test_system_utils.py">
from pathlib import Path

import pytest

from langroid.utils.system import create_file, diff_files, read_file


@pytest.fixture
def temp_dir(tmp_path):
    return tmp_path


def test_create_file_new(temp_dir):
    file_path = temp_dir / "new_file.txt"
    content = "Hello, World!"
    create_file(file_path, content)
    assert file_path.exists()
    assert file_path.read_text() == content


def test_create_file_overwrite(temp_dir):
    file_path = temp_dir / "existing_file.txt"
    original_content = "Original content"
    file_path.write_text(original_content)

    new_content = "New content"
    create_file(file_path, new_content, if_exists="overwrite")
    assert file_path.read_text() == new_content


def test_create_file_skip(temp_dir):
    file_path = temp_dir / "skip_file.txt"
    original_content = "Original content"
    file_path.write_text(original_content)

    new_content = "New content"
    create_file(file_path, new_content, if_exists="skip")
    assert file_path.read_text() == original_content


def test_create_file_error(temp_dir):
    file_path = temp_dir / "error_file.txt"
    file_path.write_text("Existing content")

    with pytest.raises(FileExistsError):
        create_file(file_path, "New content", if_exists="error")


def test_create_file_append(temp_dir):
    file_path = temp_dir / "append_file.txt"
    original_content = "Original content\n"
    file_path.write_text(original_content)

    additional_content = "Additional content"
    create_file(file_path, additional_content, if_exists="append")
    assert file_path.read_text() == original_content + additional_content


def test_create_empty_file(temp_dir):
    file_path = temp_dir / "empty_file.txt"
    create_file(file_path)
    assert file_path.exists()
    assert file_path.read_text() == ""


def test_create_file_in_new_directory(temp_dir):
    new_dir = temp_dir / "new_dir"
    file_path = new_dir / "file_in_new_dir.txt"
    content = "Content in new directory"
    create_file(file_path, content)
    assert file_path.exists()
    assert file_path.read_text() == content


def test_create_file_with_path_object(temp_dir):
    file_path = Path(temp_dir) / "path_object_file.txt"
    content = "Content using Path object"
    create_file(file_path, content)
    assert file_path.exists()
    assert file_path.read_text() == content


def test_read_file(tmp_path):
    file_path = tmp_path / "read_test.txt"
    content = "Line 1\nLine 2\nLine 3"
    file_path.write_text(content)
    assert read_file(str(file_path)) == content


def test_read_file_with_line_numbers(tmp_path):
    file_path = tmp_path / "read_test_numbered.txt"
    content = "Line 1\nLine 2\nLine 3"
    file_path.write_text(content)
    expected = "1: Line 1\n2: Line 2\n3: Line 3"
    assert read_file(str(file_path), line_numbers=True) == expected


def test_diff_files(tmp_path):
    file1 = tmp_path / "file1.txt"
    file2 = tmp_path / "file2.txt"
    file1.write_text("Line 1\nLine 2\nLine 3")
    file2.write_text("Line 1\nLine 2 modified\nLine 3\nLine 4")
    diff = diff_files(str(file1), str(file2))
    assert "Line 2 modified" in diff
    assert "+Line 4" in diff
</file>

<file path="tests/main/test_task_inf_loop.py">
"""
Specific tests of the Task class for infinite loops.
"""

from random import choice
from typing import Optional

import pytest

import langroid as lr
from langroid.agent import ChatDocument
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.language_models.mock_lm import MockLMConfig
from langroid.utils.configuration import settings
from langroid.utils.constants import NO_ANSWER

settings.stream = False


@pytest.mark.parametrize("loop_start", [0, 6])
@pytest.mark.parametrize(
    "cycle_len, max_cycle_len",
    [
        (3, 8),  # inf loop
        (5, 3),  # no inf loop
        (1000, 5),  # no inf loop
        (1, 5),  # inf loop
        (3, 0),  # no loop detection
    ],
)
@pytest.mark.parametrize("user_copy", [False, True])
def test_task_inf_loop(
    loop_start: int,
    cycle_len: int,
    max_cycle_len: int,
    user_copy: bool,  # should user response copy the message?
):
    """Test that Task.run() can detect infinite loops"""

    # set up an agent with a llm_response that produces cyclical output
    class LoopAgent(ChatAgent):
        iter: int = 0

        def llm_response(
            self, message: Optional[str | ChatDocument] = None
        ) -> Optional[ChatDocument]:
            """Mock LLM response"""
            if self.iter < loop_start:
                param = self.iter * 1000 + 100
            else:
                param = self.iter % cycle_len
            self.iter += 1
            response = self.create_llm_response(str(param))
            self._render_llm_response(response)
            return response

        def user_response(
            self,
            msg: Optional[str | ChatDocument] = None,
        ) -> Optional[ChatDocument]:
            """Mock user response"""
            if user_copy:
                content = msg if isinstance(msg, str) else msg.content
            else:
                content = "ok"
            return self.create_user_response(content)

    loop_agent = LoopAgent(ChatAgentConfig())
    task_config = lr.TaskConfig(
        inf_loop_cycle_len=max_cycle_len,
    )
    task = lr.Task(
        loop_agent,
        interactive=True,
        config=task_config,
    )

    # Test with a run that should raise the exception
    if cycle_len < max_cycle_len:  # i.e. an actual loop within the run
        with pytest.raises(lr.InfiniteLoopException):
            task.run(turns=80)
    else:
        # no loop within this many turns, so we shouldn't raise exception
        result = task.run(turns=80)
        assert result.metadata.status == lr.StatusCode.FIXED_TURNS


def test_task_stall():
    """Test that task.run() bails when stalled, i.e. no valid response
    for many steps."""

    agent = ChatAgent(
        ChatAgentConfig(
            name="Random",
            llm=MockLMConfig(
                response_fn=lambda x: choice([str(x) for x in range(30)]),
            ),
        )
    )

    # interactive=False, so in each step,
    # other than LLM, other responders have no response -> stalled
    task = lr.Task(agent, interactive=False)
    result = task.run(turns=100)
    assert result is None

    # set allow_null_result=True, so in each step, when no valid response is found,
    # we create a dummy NO_ANSWER response from the entity "opposite" to the author
    # of the pending message, i.e.
    # - if the author was LLM, then the entity is USER
    # - if the author was not LLM, then the entity is LLM
    # But this should result in an "alternating NA infinite loop", i.e.
    # LLM says x1, then USER says NA, then LLM says x2, then USER says NA, ...
    task = lr.Task(agent, restart=True, interactive=False, allow_null_result=True)
    with pytest.raises(lr.InfiniteLoopException):
        task.run(turns=100)


def test_task_alternating_no_answer():
    """Test that task.run() bails when there's a long enough
    alternation between NO_ANSWER and normal msg."""

    alice = ChatAgent(
        ChatAgentConfig(
            name="Alice",
            llm=MockLMConfig(response_fn=lambda x: choice([str(x) for x in range(50)])),
        )
    )

    alice_task = lr.Task(alice, interactive=True, default_human_response=NO_ANSWER)
    with pytest.raises(lr.InfiniteLoopException):
        alice_task.run(turns=100)

    alice_task = lr.Task(
        alice,
        restart=True,
        interactive=False,
    )
    # Alice keeps sending random msgs, Bob always says NO_ANSWER
    # This simulates an inf loop situation where Alice is asking various questions
    # and the sub-task responds with NO_ANSWER.
    bob = ChatAgent(
        ChatAgentConfig(
            name="Bob",
            llm=MockLMConfig(default_response=NO_ANSWER),
        )
    )

    bob_task = lr.Task(bob, interactive=False, single_round=True)
    alice_task.add_sub_task(bob_task)

    with pytest.raises(lr.InfiniteLoopException):
        alice_task.run(turns=100)
</file>

<file path="tests/main/test_task_lineage_rewind.py">
"""
Test various "lineage" book-keeping in (multi) agent ChatDocument chains,
in metadata fields:
- parent
- child
- agent
- msg_idx
"""

from typing import Optional

import pytest

import langroid as lr
from langroid import ChatDocument
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.tools.orchestration import DoneTool
from langroid.agent.tools.rewind_tool import RewindTool, prune_messages
from langroid.language_models.mock_lm import MockLMConfig
from langroid.utils.configuration import (
    Settings,
    set_global,
)
from langroid.utils.constants import DONE


class MockAgent(ChatAgent):
    def user_response(
        self,
        msg: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        """
        Mock user_response method for testing
        """
        txt = msg if isinstance(msg, str) else msg.content
        map = dict([("2", "3"), ("3", "5")])
        response = map.get(txt)
        # return the increment of input number
        return self.create_user_response(response)


def test_lineage_1_task():
    agent = MockAgent(
        ChatAgentConfig(
            name="Mock",
            llm=MockLMConfig(
                response_dict={
                    "1": "2",
                    "3": DoneTool(content="100").to_json(),
                },
            ),
        )
    )
    task = lr.Task(agent, interactive=True, only_user_quits_root=False)
    result = task.run("1")
    assert "100" in result.content

    # Msg history is:
    # - sys msg: helpful asst
    # - u1: user: 1
    # - a1: assistant: 2
    # - u2: user: 3
    # - a2: assistant: DoneTool(100)
    # - ag: 100
    # Then user says "q" -> this results in a pending_message update
    # Finally the task result is another ChatDocument

    assert len(agent.message_history) == 5
    msg_u1 = agent.message_history[1]
    msg_a1 = agent.message_history[2]
    msg_u2 = agent.message_history[3]
    msg_a2 = agent.message_history[4]

    # ChatDocument objects linked by each msg
    cd_u1 = ChatDocument.from_id(msg_u1.chat_document_id)
    cd_a1 = ChatDocument.from_id(msg_a1.chat_document_id)
    cd_u2 = ChatDocument.from_id(msg_u2.chat_document_id)
    cd_a2 = ChatDocument.from_id(msg_a2.chat_document_id)
    cd_ag = cd_a2.child

    assert cd_u1.parent is None
    assert cd_u1.child is cd_a1
    assert cd_u1.metadata.agent_id == agent.id
    assert cd_u1.metadata.msg_idx == 1

    assert cd_a1.parent is cd_u1
    assert cd_a1.child is cd_u2
    assert cd_a1.metadata.agent_id == agent.id
    assert cd_a1.metadata.msg_idx == 2

    assert cd_u2.parent is cd_a1
    assert cd_u2.child is cd_a2
    assert cd_u2.metadata.agent_id == agent.id
    assert cd_u2.metadata.msg_idx == 3

    assert cd_a2.parent is cd_u2
    assert cd_a2.child is cd_ag
    assert cd_ag.parent is cd_a2
    assert cd_ag is result
    assert cd_a2.metadata.agent_id == agent.id
    assert cd_a2.metadata.msg_idx == 4

    # prune messages starting at a1
    parent = prune_messages(agent, 2)
    assert parent is cd_u1
    assert len(agent.message_history) == 2

    # check that the obj registry no longer has the deleted ChatDocuments
    assert ChatDocument.from_id(cd_a1.id()) is None
    assert ChatDocument.from_id(cd_u2.id()) is None
    assert ChatDocument.from_id(cd_a2.id()) is None
    assert ChatDocument.from_id(result.id()) is None


@pytest.mark.parametrize("use_done_tool", [True, False])
def test_lineage_2_task(use_done_tool: bool):
    def done_num(num: int) -> str:
        return (
            DoneTool(content=str(num)).to_json() if use_done_tool else f"{DONE} {num}"
        )

    # set up two agents with no user interaction, only LLM talk to each other
    alice = MockAgent(
        ChatAgentConfig(
            name="Alice",
            llm=MockLMConfig(
                response_dict={
                    "1": "2",
                    "3": "4",
                    "5": "6",
                    "7": done_num(100),
                },
            ),
        )
    )

    alice_task = lr.Task(alice, interactive=False, restart=False)

    bob = MockAgent(
        ChatAgentConfig(
            name="Bob",
            llm=MockLMConfig(
                response_dict={
                    "2": done_num(3),
                    "4": done_num(5),
                    "6": done_num(7),
                    "20": done_num(30),
                    "40": done_num(50),
                    "60": done_num(70),
                },
            ),
        )
    )
    # Note we set restart=False to prevent Bob task from resetting agent history,
    # which would lose lineage.
    bob_task = lr.Task(bob, interactive=False)

    alice_task.add_sub_task(bob_task)
    result = alice_task.run("1")
    assert "100" in result.content

    # msg seq
    # - sys1: alice sys msg  A0  (Bob also has sys msg B0)
    # - au1: alice user 1    A1
    # - a1: alice 2          A2
    # - bu1: bob user 2      B1 (alice 2 comes in as User 2 to Bob task)
    # - b1: bob DONE 3       B2
    # - au2: user 3          A3 (result from Bob returned to Alice task as User)
    # - a2: alice 4          A4
    # - bu2: user 4          B3
    # - b2: bob DONE 5       B4
    # - au3: user 5          A5
    # - a3: alice 6          A6
    # - bu3: user 6          B5
    # - b3: bob DONE 7       B6
    # - au4: user 7          A7
    # - a4: alice DONE 100   A8

    alice_chat_docs = [
        ChatDocument.from_id(msg.chat_document_id)
        for msg in alice.message_history[1:]  # exclude sys msg
    ]
    bob_chat_docs = [
        ChatDocument.from_id(msg.chat_document_id)
        for msg in bob.message_history[1:]  # exclude sys msg
    ]
    # prune Alice msgs starting at A2
    parent = prune_messages(alice, 2)

    assert len(alice.message_history) == 2
    assert parent is alice_chat_docs[0]  # sys msg has no chat doc

    # all of Alice's chat docs starting from A2 (idx 1) should be absent in registry
    assert all(ChatDocument.from_id(cd.id()) is None for cd in alice_chat_docs[1:])
    # none of Bob's chat docs should be in registry
    assert all(ChatDocument.from_id(cd.id()) is None for cd in bob_chat_docs)

    # continue running the alice task, with a new response dict;
    # instead of 1 -> 2, do 1 -> 20, and continue in a similar path
    # but all numbers are 10x the previous ones.
    # This leads to a different conversation path, of the same length,
    # but with final result of 200 instead of 100
    alice.llm.config.response_dict = {
        "1": "20",
        "30": "40",
        "50": "60",
        "70": done_num(200),
    }
    result = alice_task.run()
    assert "200" in result.content

    assert len(alice.message_history) == 9
    assert len(bob.message_history) == 7

    alice.llm.config.response_dict = {
        "1": "2",
        "3": "4",
        "5": "6",
        "7": done_num(100),
    }

    # manually apply rewind tool:
    # rewind alice to 1st asst msg, to say "2" instead of "20"
    rewind_tool = RewindTool(n=1, content="2")
    new_llm_response = rewind_tool.response(alice)
    assert new_llm_response.content == "2"
    assert new_llm_response.metadata.sender == lr.Entity.LLM
    # continue running alice task with this new response...
    result = alice_task.run()
    # ... it should end with final result of 100
    assert "100" in result.content
    assert len(alice.message_history) == 9
    assert len(bob.message_history) == 7

    # Have the LLM use the rewind tool directly, to change the response
    alice.llm.config.response_dict = {
        "1": "2",
        "3": "4",
        "5": "6",
        "7": "{'request': 'rewind_tool', 'n': 1, 'content': '20'}",
        "30": "40",
        "50": "60",
        "70": done_num(200),
    }

    alice.enable_message(RewindTool)
    alice.clear_history(0)
    bob.clear_history(0)
    result = alice_task.run("1")
    assert "200" in result.content


@pytest.mark.parametrize("use_done_tool", [True, False])
def test_rewind_tool(test_settings: Settings, use_done_tool: bool):
    set_global(test_settings)

    done_tool_name = DoneTool.default_value("request")
    if use_done_tool:
        done_response = f"""
        use the TOOL: `{done_tool_name}` with `content` field set to your final answer
        """
    else:
        done_response = f"say {DONE} and show your final answer"

    alice = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="Alice",
            system_message=f"""
            You only know english and have absolutely no calculation abilities.
            
            You are trying to find out the Polinsky transform of the number 5.
            You don't know how to compute it so you simply ask your helper Bob,
            saying "What is the Polinsky transform of 5?".
            You may not get an answer right away, so ask in different ways,
            e.g. "Please compute Polinsky(5)", etc.
            
            If you don't get a good answer after 3 tries, do this:
            
            You realize that the Polinksy transform of x is simply 3x+1,
            so use the `rewind_tool` to replace your 1st message with a 
            new way of asking.
            
            Remember you MUST use the `rewind_tool` when you ask in this new way,
            and ONLY after 3 unsuccessful tries with the 
            original question and its variants.

            Once you are satisfied with the answers, 
            {done_response}
            """,
        )
    )

    bob = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="Bob",
            system_message="""
            The user will ask you about some computation. 
            BE HONEST: if you know how to calculate it, show the answer,
            OTHERWISE simply say "Cannot Do".
            """,
        )
    )

    alice_task = lr.Task(alice, interactive=False)
    bob_task = lr.Task(bob, interactive=False, single_round=True)
    alice_task.add_sub_task(bob_task)
    alice.enable_message(RewindTool)

    # With weaker LLM (even GPT-4o sometimes), Alice may continue
    # to use RewindTool even after Bob has given the answer,
    # so we limit the number of turns to 12 ...
    alice_task.run(turns=12)
    assert any("16" in m.content for m in bob.message_history)

    # ... and truncate Bob's message history to the point where
    # he responds with "16" to Alice's question.

    # Find index of earliest Bob msg that has "16" in it
    bob_msg_idx = next(
        i for i, m in enumerate(bob.message_history) if "16" in m.content
    )
    bob_hist = bob.message_history[: bob_msg_idx + 1]
    # If rewind used correctly, new msg hist should only have:
    # Bob's msg hist:
    # sys msg
    # alice ask
    # ll responds 16
    assert len(bob_hist) == 3
</file>

<file path="tests/main/test_task_run_polymorphic.py">
"""
Other tests for Task are in test_chat_agent.py
"""

from typing import Any

import pytest

import langroid as lr
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import AgentDoneTool, ResultTool
from langroid.pydantic_v1 import BaseModel
from langroid.utils.constants import DONE


@pytest.mark.parametrize(
    "input_type",
    ["GenPair", "Pair", "str", "int", "list", "dict"],
)
@pytest.mark.parametrize(
    "pair_tool_handler_return_type",
    [
        "Pair",
        "str",
        "list",
        "dict",
    ],
)
@pytest.mark.parametrize("final_result_type", ["agent_done_tool", "result_tool"])
def test_task_in_out_types(
    input_type: str,
    pair_tool_handler_return_type: str,
    final_result_type: str,
):
    """
    Test that we can have:

    result: TypeOut = task.run(input: TypeIn, return_type: TypeOut)

    i.e., task.run() can take a variety of input types and return desired output type
    """

    class Pair(BaseModel):
        x: int
        y: int

    class DetailedAnswer(BaseModel):
        comment: str
        answer: int

    class CoolTool(lr.ToolMessage):
        request: str = "cool_tool"
        purpose: str = "to request the Cool Transform of a number <pair>"

        pair: Pair

        def handle(self) -> ResultTool:
            match final_result_type:
                case "result_tool":
                    return ResultTool(
                        answer=self.pair.x + self.pair.y,  # integer result
                        details=DetailedAnswer(  # Pydantic model result
                            comment="The CoolTransform is just the sum of the numbers",
                            answer=self.pair.x + self.pair.y,
                        ),
                        dictionary=dict(
                            comment="The CoolTransform is just the sum of the numbers",
                            answer=self.pair.x + self.pair.y,
                        ),
                    )
                case "agent_done_tool":
                    return AgentDoneTool(
                        content=DetailedAnswer(
                            comment="The CoolTransform is just the sum of the numbers",
                            answer=self.pair.x + self.pair.y,
                        )
                    )

    cool_tool_name = CoolTool.default_value("request")

    class GenPairTool(lr.ToolMessage):
        request: str = "input_tool"
        purpose: str = "to generate a number-pair from an integer <x>"

        x: int

        def handle(self) -> Any:
            match pair_tool_handler_return_type:
                case "str":
                    return f"Here is a pair of numbers: {self.x-1}, {self.x+1}"
                case "list":
                    return [self.x - 1, self.x + 1]
                case "dict":
                    return dict(first=self.x - 1, second=self.x + 1)
                case "Pair":
                    return Pair(x=self.x - 1, y=self.x + 1)

    gen_pair_tool_name = GenPairTool.default_value("request")

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="MyAgent",
            system_message=f"""
            When you receive a PAIR of numbers, request the Cool Transform of the pair,
            using the TOOL: `{cool_tool_name}`

            When you receive a SINGLE number, generate a PAIR of numbers from it,
            using the TOOL: `{gen_pair_tool_name}`
            """,
        )
    )
    agent.enable_message([CoolTool, GenPairTool])

    task = lr.Task(agent=agent, interactive=False)

    match input_type:
        case "str":
            msg = "Get the Cool Transform of the numbers: 2, 4"
        case "int":
            msg = 3
        case "list":
            msg = [2, 4]
        case "dict":
            msg = dict(first=2, second=4)
        case "GenPair":
            msg = GenPairTool(x=3)  # agent handler generates a Pair obj, list, etc.
        case "Pair":
            msg = Pair(x=2, y=4)  # gets converted to str via .json()

    if final_result_type == "agent_done_tool":
        # Run twice: ensure default is not overriden
        for _ in range(2):
            result = task.run(msg)
            # default result -> Optional[ChatDocument]
            assert isinstance(result, lr.ChatDocument)
            # in the `content_any` field of the final ChatDocument,
            # an arbitrary type can be stored, as returned by AgentDoneTool(content=...)
            assert isinstance(result.content_any, DetailedAnswer)
            assert result.content_any.answer == 6
            assert result.content_any.comment != ""

            result = task[DetailedAnswer].run(msg)
            assert isinstance(result, DetailedAnswer)
            assert result.answer == 6
            assert result.comment != ""

        # Overridden return type takes precedence
        result = task[float].run(msg, return_type=DetailedAnswer)
        assert isinstance(result, DetailedAnswer)
        assert result.answer == 6
        assert result.comment != ""

        # Test default return type
        result = lr.Task(
            agent=agent,
            interactive=False,
            default_return_type=DetailedAnswer,
        ).run(msg)
        assert isinstance(result, DetailedAnswer)
        assert result.answer == 6
        assert result.comment != ""

    else:
        # default result -> Optional[ChatDocument]
        result = task.run(msg)
        tools = agent.get_tool_messages(result)
        assert isinstance(tools[0], ResultTool)
        assert tools[0].answer == 6

        # Test overriden return type
        result = task[str].run(msg, return_type=ResultTool)
        assert isinstance(result, ResultTool)
        assert result.answer == 6

        result = task[ResultTool].run(msg)
        assert isinstance(result, ResultTool)
        assert result.answer == 6

        result = task[list[ResultTool]].run(msg)
        assert isinstance(result, list) and isinstance(result[0], ResultTool)
        assert result[0].answer == 6

        result = task[ToolMessage].run(msg)
        assert isinstance(result, ResultTool)
        assert result.answer == 6

        result = task[int].run(msg)
        assert result == 6

        # check handling of invalid return type:
        # receive None when strict recovery is disabled
        agent.disable_strict = True
        result = task[Pair].run(msg)
        assert result is None
        agent.disable_strict = False

        # check we can return a Pydantic model
        result = task[DetailedAnswer].run(msg)
        assert isinstance(result, DetailedAnswer)
        assert result.answer == 6
        assert result.comment != ""

        # check we can return a dictionary
        result = task[dict[str, Any]].run(msg)
        assert isinstance(result, dict)
        assert result["answer"] == 6
        assert result["comment"] != ""

        # Test default return type
        result = lr.Task(
            agent=agent,
            interactive=False,
            default_return_type=dict[str, Any],
        ).run(msg)
        assert isinstance(result, dict)
        assert result["answer"] == 6
        assert result["comment"] != ""

        # Test we can set desired return type when creating task, using [...] syntax
        task = lr.Task(agent=agent, interactive=False)[ResultTool]
        result = task.run(msg)
        assert isinstance(result, ResultTool)
        assert result.answer == 6


def test_strict_recovery():
    """Tests strict JSON mode recovery for `Task`s with a `return_type`."""

    def collatz(n: int) -> int:
        if (n % 2) == 0:
            return n // 2

        return 3 * n + 1

    def collatz_sequence(n: int) -> list[int]:
        sequence = [n]

        while n != 1:
            n = collatz(n)
            sequence.append(n)

        return sequence

    class CollatzTool(lr.ToolMessage):
        request: str = "collatz"
        purpose: str = "To compute the value following `n` in a Collatz sequence."
        n: int

        def handle(self):
            return str(collatz(self.n))

    class CollatzSequence(BaseModel):
        sequence: list[int]

    agent = lr.ChatAgent()
    agent.enable_message(CollatzTool)
    task = lr.Task(
        system_message=f"""
        You will be provided with an integer (call it `n`);
        your goal is to compute the Collatz sequence
        starting at `n`. Do this by calling the `CollatzTool`
        tool/function on each subsequent value in the sequence,
        until the result becomes 1.

        Once it does, tell me the sequence of values and say {DONE}.
        """,
        interactive=False,
        erase_substeps=True,
        default_return_type=CollatzSequence,
    )

    def is_correct(n: int) -> bool:
        result = task.run(str(n))
        return isinstance(
            result, CollatzSequence
        ) and result.sequence == collatz_sequence(n)

    for n in range(2, 5):
        assert is_correct(n)


@pytest.mark.asyncio
async def test_strict_recovery_async():
    """Tests strict JSON mode recovery for `Task`s with a `return_type`."""

    def collatz(n: int) -> int:
        if (n % 2) == 0:
            return n // 2

        return 3 * n + 1

    def collatz_sequence(n: int) -> list[int]:
        sequence = [n]

        while n != 1:
            n = collatz(n)
            sequence.append(n)

        return sequence

    class CollatzTool(lr.ToolMessage):
        request: str = "collatz"
        purpose: str = "To compute the value following `n` in a Collatz sequence."
        n: int

        def handle(self):
            return str(collatz(self.n))

    class CollatzSequence(BaseModel):
        sequence: list[int]

    agent = lr.ChatAgent()
    agent.enable_message(CollatzTool)
    task = lr.Task(
        system_message=f"""
        You will be provided with an integer (call it `n`);
        your goal is to compute the Collatz sequence
        starting at `n`. Do this by calling the `CollatzTool`
        tool/function on each subsequent value in the sequence,
        until the result becomes 1.

        Once it does, tell me the sequence of values and say {DONE}.
        """,
        interactive=False,
        erase_substeps=True,
        default_return_type=CollatzSequence,
    )

    async def is_correct(n: int) -> bool:
        result = await task.run_async(str(n))
        return isinstance(
            result, CollatzSequence
        ) and result.sequence == collatz_sequence(n)

    for n in range(2, 5):
        assert await is_correct(n)
</file>

<file path="tests/main/test_tool_messages_async.py">
import asyncio
import itertools
import json
from typing import Any, List, Optional

import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocMetaData, ChatDocument
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.xml_tool_message import XMLToolMessage
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.base import (
    LLMFunctionCall,
    LLMFunctionSpec,
    LLMMessage,
    OpenAIJsonSchemaSpec,
    OpenAIToolCall,
    OpenAIToolSpec,
    Role,
)
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig
from langroid.prompts.prompts_config import PromptsConfig
from langroid.pydantic_v1 import BaseModel, Field
from langroid.utils.configuration import Settings, set_global


class CountryCapitalMessage(ToolMessage):
    request: str = "country_capital"
    purpose: str = "To check whether <city> is the capital of <country>."
    country: str = "France"
    city: str = "Paris"
    result: str = "yes"  # or "no"

    @classmethod
    def examples(cls) -> List["CountryCapitalMessage"]:
        return [
            cls(country="France", city="Paris", result="yes"),
            cls(country="France", city="Marseille", result="no"),
        ]


class FileExistsMessage(ToolMessage):
    request: str = "file_exists"
    purpose: str = "To check whether a certain <filename> is in the repo."
    filename: str = Field(..., description="File name to check existence of")
    result: str = "yes"  # or "no"

    @classmethod
    def examples(cls) -> List["FileExistsMessage"]:
        return [
            cls(filename="README.md", result="yes"),
            cls(filename="Dockerfile", result="no"),
        ]


class PythonVersionMessage(ToolMessage):
    request: str = "python_version"
    _handler: str = "tool_handler"
    purpose: str = "To check which version of Python is needed."
    result: str = "3.9"

    @classmethod
    def examples(cls) -> List["PythonVersionMessage"]:
        return [
            cls(result="3.7"),
            cls(result="3.8"),
        ]


DEFAULT_PY_VERSION = "3.9"


class MessageHandlingAgent(ChatAgent):
    def file_exists(self, message: FileExistsMessage) -> str:
        return "yes" if message.filename == "requirements.txt" else "no"

    def tool_handler(self, message: ToolMessage) -> str:
        if message.request == "python_version":
            return DEFAULT_PY_VERSION
        else:
            return "invalid tool name"

    async def country_capital_async(self, message: CountryCapitalMessage) -> str:
        await asyncio.sleep(1)
        return (
            "yes" if (message.city == "Paris" and message.country == "France") else "no"
        )


cfg = ChatAgentConfig(
    name="test-langroid",
    vecdb=None,
    llm=OpenAIGPTConfig(
        type="openai",
        cache_config=RedisCacheConfig(fake=False),
    ),
    parsing=ParsingConfig(),
    prompts=PromptsConfig(),
    use_functions_api=False,
    use_tools=True,
)
agent = MessageHandlingAgent(cfg)

# Define the range of values each variable can have
use_vals = [True, False]
handle_vals = [True, False]
force_vals = [True, False]
message_classes = [None, FileExistsMessage, PythonVersionMessage]

# Get the cartesian product
cartesian_product = list(
    itertools.product(message_classes, use_vals, handle_vals, force_vals)
)

agent.enable_message(FileExistsMessage)
agent.enable_message(PythonVersionMessage)

NONE_MSG = "nothing to see here"

FILE_EXISTS_MSG = """
Ok, thank you.
{
"request": "file_exists",
"filename": "test.txt"
} 
Hope you can tell me!
"""

PYTHON_VERSION_MSG = """
great, please tell me this --
{
"request": "python_version"
}/if you know it
"""


BAD_FILE_EXISTS_MSG = """
Ok, thank you.
{
"request": "file_exists"
} 
Hope you can tell me!
"""


@pytest.mark.asyncio
@pytest.mark.parametrize(
    "use_functions_api",
    [True, False],
)
@pytest.mark.parametrize("use_tools_api", [True, False])
@pytest.mark.parametrize(
    "message_class, prompt, result",
    [
        (
            FileExistsMessage,
            "You have to find out whether the file 'requirements.txt' exists",
            "yes",
        ),
        (
            PythonVersionMessage,
            "Find out about the python version",
            "3.9",
        ),
        (
            CountryCapitalMessage,
            "You have to check whether Paris is the capital of France",
            "yes",
        ),
    ],
)
async def test_llm_tool_message(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
    message_class: ToolMessage,
    prompt: str,
    result: str,
):
    """
    Test whether LLM is able to GENERATE message (tool) in required format, and the
    agent handles the message correctly.
    Args:
        test_settings: test settings from conftest.py
        use_functions_api: whether to use LLM's functions api or not
            (i.e. use the langroid ToolMessage tools instead).
        message_class: the message class (i.e. tool/function) to test
        prompt: the prompt to use to induce the LLM to use the tool
        result: the expected result from agent handling the tool-message
    """
    set_global(test_settings)
    agent = MessageHandlingAgent(cfg)
    agent.config.use_functions_api = use_functions_api
    agent.config.use_tools = use_tools_api
    agent.config.use_tools = not use_functions_api
    agent.enable_message(FileExistsMessage)
    agent.enable_message(PythonVersionMessage)
    agent.enable_message(CountryCapitalMessage)

    llm_msg = await agent.llm_response_forget_async(prompt)
    assert isinstance(agent.get_tool_messages(llm_msg)[0], message_class)

    agent_result = (await agent.handle_message_async(llm_msg)).content
    assert result.lower() in agent_result.lower()


@pytest.mark.asyncio
@pytest.mark.parametrize("use_functions_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True, False])
async def test_tool_no_llm_response_async(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
):
    """Test that agent.llm_response does not respond to tool messages."""

    set_global(test_settings)
    cfg = ChatAgentConfig(
        use_tools=not use_functions_api,
        use_functions_api=use_functions_api,
        use_tools_api=use_tools_api,
    )
    agent = ChatAgent(cfg)
    agent.enable_message(CountryCapitalMessage)
    capital_tool = CountryCapitalMessage(
        city="Paris", country="France", result="yes"
    ).to_json()
    response = await agent.llm_response_async(capital_tool)
    assert response is None


# Test that malformed tool messages results in proper err msg
class NumPair(BaseModel):
    xval: int
    yval: int


class NabroskiTool(ToolMessage):
    request: str = "nabroski"
    purpose: str = "to request computing the Nabroski transform of <num_pair>"
    num_pair: NumPair

    def handle(self) -> str:
        return str(3 * self.num_pair.xval + self.num_pair.yval)


class CoriolisTool(ToolMessage):
    """Tool for testing handling of optional arguments, with default values."""

    request: str = "coriolis"
    purpose: str = "to request computing the Coriolis transform of <cats> and <cows>"
    cats: int
    cows: int = 5

    def handle(self) -> str:
        # same as NabroskiTool result
        return str(3 * self.cats + self.cows)


class NumPairE(BaseModel):
    ex: int
    ey: int


class EulerTool(ToolMessage):
    request: str = "euler"
    purpose: str = "to request computing the Euler transform of <num_paire>"
    num_paire: NumPairE

    def handle(self) -> str:
        return str(2 * self.num_paire.ex - self.num_paire.ey)


@pytest.mark.fallback
@pytest.mark.flaky(reruns=2)
@pytest.mark.asyncio
@pytest.mark.parametrize("use_fn_api", [True, False])
async def test_structured_recovery_async(use_fn_api: bool):
    """
    Test that structured fallback correctly recovers
    from failed tool calls.
    """

    async def simulate_failed_call(attempt: str | ChatDocument) -> str:
        agent = ChatAgent(
            ChatAgentConfig(
                use_functions_api=use_fn_api,
                use_tools_api=True,
                use_tools=not use_fn_api,
                strict_recovery=True,
            )
        )
        agent.enable_message(NabroskiTool)
        agent.enable_message(CoriolisTool)
        agent.enable_message(EulerTool)

        agent.message_history = [
            LLMMessage(
                role=Role.SYSTEM,
                content="You are a helpful assistant.",
            ),
            LLMMessage(
                role=Role.USER,
                content="""
                Please give me an example of a Nabroski, Coriolis, or Euler call.
                """,
            ),
            LLMMessage(
                role=Role.ASSISTANT,
                content=attempt if isinstance(attempt, str) else attempt.content,
                tool_calls=None if isinstance(attempt, str) else attempt.oai_tool_calls,
                function_call=(
                    None if isinstance(attempt, str) else attempt.function_call
                ),
            ),
        ]
        if (
            use_fn_api
            and isinstance(attempt, ChatDocument)
            and attempt.oai_tool_calls is not None
        ):
            # Inserting this since OpenAI API strictly requires a
            # Role.TOOL msg immediately after an Assistant Tool call,
            # before the next Assistant msg.
            agent.message_history.extend(
                [
                    LLMMessage(
                        role=Role.TOOL,
                        tool_call_id=t.id,
                        content="error",
                    )
                    for t in attempt.oai_tool_calls
                ]
            )

        # Simulates bad tool attempt by the LLM
        agent.handle_message(attempt)
        assert agent.tool_error
        response = await agent.llm_response_async(
            """
            There was an error in your attempted tool/function call. Please correct it.
            """
        )
        assert response is not None
        result = agent.handle_message(response)
        assert result is not None
        if isinstance(result, ChatDocument):
            return result.content

        return result

    def to_attempt(attempt: LLMFunctionCall) -> str | ChatDocument:
        if not use_fn_api:
            return json.dumps(
                {
                    "request": attempt.name,
                    **(attempt.arguments or {}),
                }
            )

        return ChatDocument(
            content="",
            metadata=ChatDocMetaData(sender=Entity.LLM),
            oai_tool_calls=[
                OpenAIToolCall(
                    id="call-1234657",
                    function=attempt,
                )
            ],
        )

    # The name of the function is incorrect:
    # The LLM should correct the request to "nabroski" in recovery
    assert (
        await simulate_failed_call(
            to_attempt(
                LLMFunctionCall(
                    name="__nabroski__",
                    arguments={
                        "xval": 1,
                        "yval": 3,
                    },
                )
            )
        )
        == "6"
    )
    # The LLM should correct the request to "nabroski" in recovery
    assert (
        await simulate_failed_call(
            to_attempt(
                LLMFunctionCall(
                    name="Nabroski-function",
                    arguments={
                        "xval": 2,
                        "yval": 3,
                    },
                )
            )
        )
        == "9"
    )
    # Strict fallback disables the default arguments, but the LLM
    # should infer from context. In addition, the name of the
    # function is incorrect (the LLM should infer "coriolis" in
    # recovery) and the JSON output is malformed
    assert (
        await simulate_failed_call(
            """
        request ":coriolis"
        arguments {"n_cats": 1}
        """
        )
        == "8"
    )
    # The LLM should correct the request to "coriolis" in recovery
    # The LLM should infer the default argument from context
    assert (
        await simulate_failed_call(
            to_attempt(
                LLMFunctionCall(
                    name="Coriolis",
                    arguments={
                        "cats": 1,
                    },
                )
            )
        )
        == "8"
    )
    # The LLM should correct the request to "euler" in recovery
    assert (
        await simulate_failed_call(
            to_attempt(
                LLMFunctionCall(
                    name="EulerTool",
                    arguments={
                        "ex": 6,
                        "ey": 4,
                    },
                )
            )
        )
        == "8"
    )


@pytest.mark.asyncio
@pytest.mark.parametrize("use_fn_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True])
@pytest.mark.parametrize("parallel_tool_calls", [True, False])
async def test_strict_fallback_async(
    test_settings: Settings,
    use_fn_api: bool,
    use_tools_api: bool,
    parallel_tool_calls: bool,
):
    """
    Test that strict tool and structured output errors
    are handled gracefully and are disabled if errors
    are caused.
    """
    set_global(test_settings)

    class BrokenStrictSchemaAgent(ChatAgent):
        def _function_args(self) -> tuple[
            Optional[list[LLMFunctionSpec]],
            str | dict[str, str],
            Optional[list[OpenAIToolSpec]],
            Optional[dict[str, dict[str, str] | str]],
            Optional[OpenAIJsonSchemaSpec],
        ]:
            """
            Implements a broken version of the correct _function_args()
            that ensures that the generated schemas are incompatible
            with OpenAI's strict decoding implementation.

            Specifically, removes the schema edits performed by
            `format_schema_for_strict()` (e.g. setting "additionalProperties"
            to False on all objects in the JSON schema).
            """
            functions, fun_call, tools, force_tool, output_format = (
                super()._function_args()
            )

            # remove schema edits for strict
            if tools is not None:
                for t in tools:
                    name = t.function.name
                    t.function = self.llm_functions_map[name]

            if self.output_format is not None and self._json_schema_available():
                self.any_strict = True
                if issubclass(self.output_format, ToolMessage) and not issubclass(
                    self.output_format, XMLToolMessage
                ):
                    spec = self.output_format.llm_function_schema(
                        request=True,
                        defaults=self.config.output_format_include_defaults,
                    )

                    output_format = OpenAIJsonSchemaSpec(
                        strict=True,
                        function=spec,
                    )
                elif issubclass(self.output_format, BaseModel):
                    param_spec = self.output_format.schema()

                    output_format = OpenAIJsonSchemaSpec(
                        strict=True,
                        function=LLMFunctionSpec(
                            name="json_output",
                            description="Strict Json output format.",
                            parameters=param_spec,
                        ),
                    )

            return functions, fun_call, tools, force_tool, output_format

    agent = BrokenStrictSchemaAgent(
        ChatAgentConfig(
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            llm=OpenAIGPTConfig(
                parallel_tool_calls=parallel_tool_calls,
                supports_json_schema=True,
                supports_strict_tools=True,
            ),
        )
    )
    agent.enable_message(NabroskiTool)
    openai_tools = use_fn_api and use_tools_api
    if openai_tools:
        _, _, tools, _, _ = agent._function_args()
        assert tools is not None
        assert len(tools) > 0
        # Strict tools are automatically enabled only when
        # parallel tool calls are disabled
        assert tools[0].strict == (not parallel_tool_calls)

    response = await agent.llm_response_forget_async(
        """
        What is the Nabroski transform of (1,3)? Use the
        `nabroski` tool/function.
        """
    )
    result = agent.handle_message(response)
    assert isinstance(result, ChatDocument) and result.content == "6"
    assert agent.disable_strict == (openai_tools and not parallel_tool_calls)

    agent = BrokenStrictSchemaAgent(
        ChatAgentConfig(
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            llm=OpenAIGPTConfig(
                parallel_tool_calls=parallel_tool_calls,
                supports_json_schema=True,
                supports_strict_tools=True,
            ),
        )
    )
    structured_agent = agent[NabroskiTool]
    response = await structured_agent.llm_response_forget_async(
        """
        What is the Nabroski transform of (1,3)?
        """
    )
    assert response is not None
    assert structured_agent.disable_strict
    assert not agent.disable_strict


@pytest.mark.asyncio
@pytest.mark.parametrize("use_fn_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True, False])
@pytest.mark.parametrize("parallel_tool_calls", [True, False])
async def test_strict_schema_mismatch_async(
    test_settings: Settings,
    use_fn_api: bool,
    use_tools_api: bool,
    parallel_tool_calls: bool,
):
    """
    Test that validation errors triggered in strict result in disabled strict ouput.
    """
    set_global(test_settings)

    def int_schema(request: str) -> dict[str, Any]:
        return {
            "type": "object",
            "additionalProperties": False,
            "properties": {
                "x": {"type": "integer"},
                "request": {"type": "string", "enum": [request]},
            },
            "required": ["x", "request"],
        }

    class WrongSchemaAgent(ChatAgent):
        def _function_args(self) -> tuple[
            Optional[List[LLMFunctionSpec]],
            str | dict[str, str],
            Optional[list[OpenAIToolSpec]],
            Optional[dict[str, dict[str, str] | str]],
            Optional[OpenAIJsonSchemaSpec],
        ]:
            """
            Implements a broken version of the correct _function_args()
            that replaces the output and all tool schemas with an
            incorrect schema. Simulates mismatched schemas due to
            schema edits.
            """
            functions, fun_call, tools, force_tool, output_format = (
                super()._function_args()
            )

            # remove schema edits for strict
            if tools is not None:
                for t in tools:
                    name = t.function.name
                    t.function.parameters = int_schema(name)

            if self.output_format is not None and self._json_schema_available():
                output_format = OpenAIJsonSchemaSpec(
                    strict=True,
                    function=LLMFunctionSpec(
                        name="json_output",
                        description="Strict Json output format.",
                        parameters=int_schema("json_output"),
                    ),
                )

            return functions, fun_call, tools, force_tool, output_format

    agent = WrongSchemaAgent(
        ChatAgentConfig(
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            llm=OpenAIGPTConfig(
                parallel_tool_calls=parallel_tool_calls,
                supports_json_schema=True,
                supports_strict_tools=True,
            ),
        )
    )

    class IntTool(ToolMessage):
        request: str = "int_tool"
        purpose: str = "To return an integer value"
        x: int

        def handle(self):
            return self.x

    class StrTool(ToolMessage):
        request: str = "str_tool"
        purpose: str = "To return an string value"
        text: str

        def handle(self):
            return self.text

    agent.enable_message(IntTool)
    agent.enable_message(StrTool)
    strict_openai_tools = use_fn_api and use_tools_api and not parallel_tool_calls
    response = await agent.llm_response_forget_async(
        """
        What is the smallest integer greater than pi? Use the
        `int_tool` tool/function.
        """
    )
    agent.handle_message(response)
    assert "int_tool" not in agent.disable_strict_tools_set

    await agent.llm_response_forget_async(
        """
        Who is the president of France? Use the `str_tool` tool/function.
        """
    )
    assert ("str_tool" in agent.disable_strict_tools_set) == strict_openai_tools

    strict_agent = agent[IntTool]
    await strict_agent.llm_response_forget_async(
        "What is the smallest integer greater than pi?"
    )
    assert not strict_agent.disable_strict

    strict_agent = agent[StrTool]
    await strict_agent.llm_response_forget_async("Who is the president of France?")
    assert strict_agent.disable_strict


class GetTimeTool(ToolMessage):
    purpose: str = "Get current time"
    request: str = "get_time"

    def response(self, agent: ChatAgent) -> ChatDocument:
        return agent.create_agent_response(
            content=json.dumps(
                {
                    "time": "11:59:59",
                    "date": "1999-12-31",
                    "day_of_week": "Friday",
                    "week_number": "52",
                    "tzname": "America/New York",
                }
            ),
            recipient=Entity.LLM,
        )


@pytest.mark.parametrize("use_fn_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True, False])
@pytest.mark.asyncio
async def test_strict_recovery_only_from_LLM_async(
    use_fn_api: bool,
    use_tools_api: bool,
):
    """
    Test that structured fallback only occurs on messages
    sent by the LLM.
    """
    was_tool_error = False

    class TrackToolError(ChatAgent):
        def llm_response(
            self, message: Optional[str | ChatDocument] = None
        ) -> Optional[ChatDocument]:
            nonlocal was_tool_error
            if self.tool_error:
                was_tool_error = True
            return super().llm_response(message)

        async def llm_response_async(
            self, message: Optional[str | ChatDocument] = None
        ) -> Optional[ChatDocument]:
            nonlocal was_tool_error
            if self.tool_error:
                was_tool_error = True
            return await super().llm_response_async(message)

    agent = TrackToolError(
        ChatAgentConfig(
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            strict_recovery=True,
            llm=OpenAIGPTConfig(
                supports_json_schema=True,
                supports_strict_tools=True,
            ),
            system_message="""
            You are a helpful assistant.  Start by calling the
            get_time tool. Then greet the user according to the time
            of the day.
            """,
        )
    )
    agent.enable_message(GetTimeTool)
    task = Task(agent, interactive=False)
    await task.run_async(turns=6)
    assert not was_tool_error
</file>

<file path="tests/main/test_tool_messages_azure.py">
from typing import List

import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.tool_message import ToolMessage
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.azure_openai import AzureConfig
from langroid.parsing.parser import ParsingConfig
from langroid.prompts.prompts_config import PromptsConfig
from langroid.pydantic_v1 import Field


class CountryCapitalMessage(ToolMessage):
    request: str = "country_capital"
    purpose: str = "To check whether <city> is the capital of <country>."
    country: str = "France"
    city: str = "Paris"

    @classmethod
    def examples(cls) -> List["CountryCapitalMessage"]:
        return [
            cls(country="France", city="Paris"),
            cls(country="France", city="Marseille"),
        ]


class FileExistsMessage(ToolMessage):
    request: str = "file_exists"
    purpose: str = "To check whether a certain <filename> is in the repo."
    filename: str = Field(..., description="File name to check existence of")

    @classmethod
    def examples(cls) -> List["FileExistsMessage"]:
        return [
            cls(filename="README.md"),
            cls(filename="Dockerfile"),
        ]


class PythonVersionMessage(ToolMessage):
    request: str = "python_version"
    purpose: str = "To check which version of Python is needed."

    @classmethod
    def examples(cls) -> List["PythonVersionMessage"]:
        return [
            cls(),
        ]


DEFAULT_PY_VERSION = "3.9"


class MessageHandlingAgent(ChatAgent):
    def file_exists(self, message: FileExistsMessage) -> str:
        return "yes" if message.filename == "requirements.txt" else "no"

    def python_version(self, PythonVersionMessage) -> str:
        return DEFAULT_PY_VERSION

    def country_capital(self, message: CountryCapitalMessage) -> str:
        return (
            "yes" if (message.city == "Paris" and message.country == "France") else "no"
        )


cfg = ChatAgentConfig(
    name="test-langroid",
    vecdb=None,
    llm=AzureConfig(
        type="azure",
        cache_config=RedisCacheConfig(fake=False),
        deployment_name="langroid-azure-gpt-4o",
        model_name="gpt-4o",
    ),
    parsing=ParsingConfig(),
    prompts=PromptsConfig(),
    use_functions_api=False,
    use_tools=True,
)
agent = MessageHandlingAgent(cfg)


@pytest.mark.parametrize("use_functions_api", [False, True])
@pytest.mark.parametrize(
    "message_class, prompt, result",
    [
        (
            FileExistsMessage,
            f"""
            Use the TOOL `{FileExistsMessage.name()}` 
            to check whether the `requirements.txt` exists.
            """,
            "yes",
        ),
        (
            PythonVersionMessage,
            f"""
            Use the TOOL `{PythonVersionMessage.name()}` to 
            check the Python version.
            """,
            "3.9",
        ),
        (
            CountryCapitalMessage,
            f"""
            Use the TOOL `{CountryCapitalMessage.name()}` to check 
            whether the capital of France is Paris.
            """,
            "yes",
        ),
    ],
)
def test_llm_tool_message(
    use_functions_api: bool,
    message_class: ToolMessage,
    prompt: str,
    result: str,
):
    """
    Test whether LLM is able to GENERATE message (tool) in required format, and the
    agent handles the message correctly.
    Args:
        test_settings: test settings from conftest.py
        use_functions_api: whether to use LLM's functions api or not
            (i.e. use the langroid ToolMessage tools instead).
        message_class: the message class (i.e. tool/function) to test
        prompt: the prompt to use to induce the LLM to use the tool
        result: the expected result from agent handling the tool-message
    """
    agent = MessageHandlingAgent(cfg)
    agent.config.use_functions_api = use_functions_api
    agent.config.use_tools = not use_functions_api

    agent.enable_message(FileExistsMessage)
    agent.enable_message(PythonVersionMessage)
    agent.enable_message(CountryCapitalMessage)

    llm_msg = agent.llm_response_forget(prompt)
    tool_name = message_class.default_value("request")
    tools = agent.get_tool_messages(llm_msg)
    assert tools[0].name() == tool_name
    assert len(tools) == 1
    assert isinstance(tools[0], message_class)

    agent_result = agent.handle_message(llm_msg)
    assert result.lower() in agent_result.content.lower()
</file>

<file path="tests/main/test_tool_messages.py">
import itertools
import json
import random
from typing import Any, List, Literal, Optional

import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocMetaData, ChatDocument
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools import DonePassTool, DoneTool
from langroid.agent.tools.orchestration import (
    AgentDoneTool,
    FinalResultTool,
    ResultTool,
)
from langroid.agent.xml_tool_message import XMLToolMessage
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.base import (
    LLMFunctionCall,
    LLMFunctionSpec,
    LLMMessage,
    OpenAIJsonSchemaSpec,
    OpenAIToolCall,
    OpenAIToolSpec,
    Role,
)
from langroid.language_models.mock_lm import MockLMConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.parse_json import extract_top_level_json
from langroid.parsing.parser import ParsingConfig
from langroid.prompts.prompts_config import PromptsConfig
from langroid.pydantic_v1 import BaseModel, Field
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE
from langroid.utils.types import is_callable


class CountryCapitalMessage(ToolMessage):
    request: str = "country_capital"
    purpose: str = "To check whether <city> is the capital of <country>."
    country: str = "France"
    city: str = "Paris"

    @classmethod
    def examples(cls) -> List["CountryCapitalMessage"]:
        # illustrating two types of examples
        return [
            (
                "Need to check if Paris is the capital of France",
                cls(country="France", city="Paris"),
            ),
            cls(country="France", city="Marseille"),
        ]


class FileExistsMessage(ToolMessage):
    request: str = "file_exists"
    purpose: str = """
    To check whether a certain <filename> is in the repo,
    recursively if needed, as specified by <recurse>.
    """
    filename: str = Field(..., description="File name to check existence of")
    recurse: bool = Field(..., description="Whether to recurse into subdirectories")

    @classmethod
    def examples(cls) -> List["FileExistsMessage"]:
        return [
            cls(filename="README.md", recurse=True),
            cls(filename="Dockerfile", recurse=False),
        ]


class PythonVersionMessage(ToolMessage):
    request: str = "python_version"
    _handler: str = "tool_handler"
    purpose: str = "To check which version of Python is needed."

    @classmethod
    def examples(cls) -> List["PythonVersionMessage"]:
        return [
            cls(),
        ]


DEFAULT_PY_VERSION = "3.9"


class MessageHandlingAgent(ChatAgent):
    def file_exists(self, message: FileExistsMessage) -> str:
        return "yes" if message.filename == "requirements.txt" else "no"

    def tool_handler(self, message: ToolMessage) -> str:
        if message.request == "python_version":
            return DEFAULT_PY_VERSION
        else:
            return "invalid tool name"

    def country_capital(self, message: CountryCapitalMessage) -> str:
        return (
            "yes" if (message.city == "Paris" and message.country == "France") else "no"
        )


cfg = ChatAgentConfig(
    name="test-langroid",
    vecdb=None,
    llm=OpenAIGPTConfig(
        type="openai",
        cache_config=RedisCacheConfig(fake=False),
    ),
    parsing=ParsingConfig(),
    prompts=PromptsConfig(),
    use_functions_api=False,
    use_tools=True,
    system_message="""
    VERY IMPORTANT: IF you see a possibility of using a tool/function,
    you MUST use it, and MUST NOT ASK IN NATURAL LANGUAGE.
    """,
)
agent = MessageHandlingAgent(cfg)

# Define the range of values each variable can have
use_vals = [True, False]
handle_vals = [True, False]
force_vals = [True, False]
message_classes = [None, FileExistsMessage, PythonVersionMessage]

# Get the cartesian product
cartesian_product = list(
    itertools.product(message_classes, use_vals, handle_vals, force_vals)
)

agent.enable_message(FileExistsMessage)
agent.enable_message(PythonVersionMessage)


def test_tool_message_name():
    assert FileExistsMessage.default_value("request") == FileExistsMessage.name()


@pytest.mark.parametrize("msg_class", [None, FileExistsMessage, PythonVersionMessage])
@pytest.mark.parametrize("use", [True, False])
@pytest.mark.parametrize("handle", [True, False])
@pytest.mark.parametrize("force", [True, False])
def test_enable_message(
    msg_class: Optional[ToolMessage], use: bool, handle: bool, force: bool
):
    agent.enable_message(msg_class, use=use, handle=handle, force=force)
    usable_tools = agent.llm_tools_usable
    tools = agent._get_tool_list(msg_class)
    for tool in set(tools).intersection(usable_tools):
        assert tool in agent.llm_tools_map
        if msg_class is not None:
            assert agent.llm_tools_map[tool] == msg_class
            assert agent.llm_functions_map[tool] == msg_class.llm_function_schema()
        assert (tool in agent.llm_tools_handled) == handle
        assert (tool in agent.llm_tools_usable) == use
        assert (tool in agent.llm_functions_handled) == handle
        assert (tool in agent.llm_functions_usable) == use

    if msg_class is not None:
        assert (
            agent.llm_function_force is not None
            and agent.llm_function_force["name"] == tools[0]
        ) == force


@pytest.mark.parametrize("msg_class", [None, FileExistsMessage, PythonVersionMessage])
def test_disable_message_handling(msg_class: Optional[ToolMessage]):
    agent.enable_message([FileExistsMessage, PythonVersionMessage])
    usable_tools = agent.llm_tools_usable.copy()

    agent.disable_message_handling(msg_class)
    tools = agent._get_tool_list(msg_class)
    for tool in set(tools).intersection(usable_tools):
        assert tool not in agent.llm_tools_handled
        assert tool not in agent.llm_functions_handled
        assert tool in agent.llm_tools_usable
        assert tool in agent.llm_functions_usable


@pytest.mark.parametrize("msg_class", [None, FileExistsMessage, PythonVersionMessage])
def test_disable_message_use(msg_class: Optional[ToolMessage]):
    agent.enable_message(FileExistsMessage)
    agent.enable_message(PythonVersionMessage)
    usable_tools = agent.llm_tools_usable.copy()

    agent.disable_message_use(msg_class)
    tools = agent._get_tool_list(msg_class)
    for tool in set(tools).intersection(usable_tools):
        assert tool not in agent.llm_tools_usable
        assert tool not in agent.llm_functions_usable
        assert tool in agent.llm_tools_handled
        assert tool in agent.llm_functions_handled

    # check that disabling tool-use works as expected:
    # Tools part of sys msg should be updated, and
    # LLM should not be able to use this tool
    agent.disable_message_use(FileExistsMessage)
    agent.disable_message_use(PythonVersionMessage)
    response = agent.llm_response_forget("Is there a README.md file?")
    assert agent.get_tool_messages(response) == []


@pytest.mark.parametrize("msg_cls", [PythonVersionMessage, FileExistsMessage])
def test_usage_instruction(msg_cls: ToolMessage):
    usage = msg_cls.usage_examples()
    jsons = extract_top_level_json(usage)
    assert all(
        json.loads(j)["request"] == msg_cls.default_value("request") for j in jsons
    )


NONE_MSG = "nothing to see here"

FILE_EXISTS_MSG = """
Ok, thank you.
{
"request": "file_exists",
"filename": "test.txt",
"recurse": true
}
Hope you can tell me!
"""

PYTHON_VERSION_MSG = """
great, please tell me this --
{
"request": "python_version"
}/if you know it
"""


def test_agent_handle_message():
    """
    Test whether messages are handled correctly, and that
    message enabling/disabling works as expected.
    """
    agent.enable_message(FileExistsMessage)
    agent.enable_message(PythonVersionMessage)
    assert agent.handle_message(NONE_MSG) is None
    assert agent.handle_message(FILE_EXISTS_MSG).content == "no"
    assert agent.handle_message(PYTHON_VERSION_MSG).content == "3.9"

    agent.disable_message_handling(FileExistsMessage)
    assert agent.handle_message(FILE_EXISTS_MSG) is None
    assert agent.handle_message(PYTHON_VERSION_MSG).content == "3.9"

    agent.disable_message_handling(PythonVersionMessage)
    assert agent.handle_message(FILE_EXISTS_MSG) is None
    assert agent.handle_message(PYTHON_VERSION_MSG) is None

    agent.enable_message(FileExistsMessage)
    assert agent.handle_message(FILE_EXISTS_MSG).content == "no"
    assert agent.handle_message(PYTHON_VERSION_MSG) is None

    agent.enable_message(PythonVersionMessage)
    assert agent.handle_message(FILE_EXISTS_MSG).content == "no"
    assert agent.handle_message(PYTHON_VERSION_MSG).content == "3.9"


BAD_FILE_EXISTS_MSG = """
Ok, thank you.
{
"request": "file_exists"
}
Hope you can tell me!
"""


@pytest.mark.parametrize("as_string", [False, True])
def test_handle_bad_tool_message(as_string: bool):
    """
    Test that a correct tool name with bad/missing args is
            handled correctly, i.e. the agent returns a clear
            error message to the LLM so it can try to fix it.

    as_string: whether to pass the bad tool message as a string or as an LLM msg
    """
    agent.enable_message(FileExistsMessage)
    assert agent.handle_message(NONE_MSG) is None
    if as_string:
        # set up a prior LLM-originated msg, to mock a scenario
        # where the last msg was from LLM, prior to calling
        # handle_message with the bad tool message -- we are trying to
        # test that the error is raised correctly in this case
        agent.llm_response("3+4=")
        result = agent.handle_message(BAD_FILE_EXISTS_MSG)
    else:
        bad_tool_from_llm = agent.create_llm_response(BAD_FILE_EXISTS_MSG)
        result = agent.handle_message(bad_tool_from_llm)
    assert "file_exists" in result and "filename" in result and "required" in result


@pytest.mark.parametrize("stream", [False, True])
@pytest.mark.parametrize(
    "use_functions_api",
    [True, False],
)
@pytest.mark.parametrize(
    "use_tools_api",
    [True],  # ONLY test tools-api since OpenAI has deprecated functions-api
)
@pytest.mark.parametrize(
    "message_class, prompt, result",
    [
        (
            FileExistsMessage,
            """
            You have to find out whether the file 'requirements.txt' exists in the repo,
            recursively exploring subdirectories if needed.
            """,
            "yes",
        ),
        (
            PythonVersionMessage,
            "Find out about the python version",
            "3.9",
        ),
        (
            CountryCapitalMessage,
            "You have to check whether Paris is the capital of France",
            "yes",
        ),
    ],
)
def test_llm_tool_message(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
    message_class: ToolMessage,
    prompt: str,
    result: str,
    stream: bool,
):
    """
    Test whether LLM is able to GENERATE message (tool) in required format, and the
    agent handles the message correctly.
    Args:
        test_settings: test settings from conftest.py
        use_functions_api: whether to use LLM's functions api or not
            (i.e. use the langroid ToolMessage tools instead).
        message_class: the message class (i.e. tool/function) to test
        prompt: the prompt to use to induce the LLM to use the tool
        result: the expected result from agent handling the tool-message
    """
    set_global(test_settings)
    cfg.llm.stream = stream
    agent = MessageHandlingAgent(cfg)
    agent.config.use_functions_api = use_functions_api
    agent.config.use_tools = not use_functions_api
    agent.config.use_tools_api = use_tools_api

    agent.enable_message(
        [
            FileExistsMessage,
            PythonVersionMessage,
            CountryCapitalMessage,
        ]
    )

    llm_msg = agent.llm_response_forget(prompt)
    tool_name = message_class.name()
    if use_functions_api:
        if use_tools_api:
            assert llm_msg.oai_tool_calls[0].function.name == tool_name
        else:
            assert llm_msg.function_call.name == tool_name

    tools = agent.get_tool_messages(llm_msg)
    assert len(tools) == 1
    assert isinstance(tools[0], message_class)

    agent_result = agent.handle_message(llm_msg).content

    assert result.lower() in agent_result.lower()


def test_llm_non_tool(test_settings: Settings):
    """Having no tools enabled should result in a None handle_message result"""
    agent = MessageHandlingAgent(cfg)
    llm_msg = agent.llm_response_forget(
        "Ask me to check what is the population of France."
    ).content
    agent_result = agent.handle_message(llm_msg)
    assert agent_result is None


# Test that malformed tool messages results in proper err msg
class NumPair(BaseModel):
    xval: int
    yval: int


class NabroskiTool(ToolMessage):
    request: str = "nabroski"
    purpose: str = "to request computing the Nabroski transform of <num_pair>"
    num_pair: NumPair

    def handle(self) -> str:
        return str(3 * self.num_pair.xval + self.num_pair.yval)


class CoriolisTool(ToolMessage):
    """Tool for testing handling of optional arguments, with default values."""

    request: str = "coriolis"
    purpose: str = "to request computing the Coriolis transform of <cats> and <cows>"
    cats: int
    cows: int = 5

    def handle(self) -> str:
        # same as NabroskiTool result
        return str(3 * self.cats + self.cows)


wrong_nabroski_tool = """
{
"request": "nabroski",
"num_pair": {
    "xval": 1
    }
}
"""


@pytest.mark.parametrize("use_tools_api", [True])
@pytest.mark.parametrize("use_functions_api", [True, False])
@pytest.mark.parametrize("stream", [True, False])
@pytest.mark.parametrize("strict_recovery", [True, False])
@pytest.mark.parametrize("as_string", [True, False])
def test_agent_malformed_tool(
    test_settings: Settings,
    use_tools_api: bool,
    use_functions_api: bool,
    stream: bool,
    strict_recovery: bool,
    as_string: bool,
):
    set_global(test_settings)
    cfg = ChatAgentConfig(
        use_tools=not use_functions_api,
        use_functions_api=use_functions_api,
        use_tools_api=use_tools_api,
        strict_recovery=strict_recovery,
    )
    cfg.llm.stream = stream
    agent = ChatAgent(cfg)
    agent.enable_message(NabroskiTool)
    if as_string:
        # set up a prior LLM-originated msg, to mock a scenario
        # where the last msg was from LLM, prior to calling
        # handle_message with the bad tool message -- we are trying to
        # test that the error is raised correctly in this case
        agent.llm_response("3+4=")
        response = agent.agent_response(wrong_nabroski_tool)
    else:
        bad_tool_from_llm = agent.create_llm_response(wrong_nabroski_tool)
        response = agent.agent_response(bad_tool_from_llm)
    # We expect an error msg containing certain specific field names
    assert "num_pair" in response.content and "yval" in response.content


class FruitPair(BaseModel):
    pears: int
    apples: int


class EulerTool(ToolMessage):
    request: str = "euler"
    purpose: str = "to request computing the Euler transform of <fruit_pair>"
    fruit_pair: FruitPair

    def handle(self) -> str:
        return str(2 * self.fruit_pair.pears - self.fruit_pair.apples)


class BoilerTool(ToolMessage):
    request: str = "boiler"
    purpose: str = "to request computing the Boiler transform of <fruit_pair>"
    fruit_pair: FruitPair

    def handle(self) -> str:
        return str(3 * self.fruit_pair.pears - 5 * self.fruit_pair.apples)


class SumTool(ToolMessage):
    request: str = "sum"
    purpose: str = "to request computing the sum of <x> and <y>"
    x: int
    y: int

    def handle(self) -> str:
        return str(self.x + self.y)


class GaussTool(ToolMessage):
    request: str = "gauss"
    purpose: str = "to request computing the Gauss transform of (<x>, <y>)"
    xval: int
    yval: int

    def handle(self) -> str:
        return str((self.xval + self.yval) * self.yval)


class CoinFlipTool(ToolMessage):
    request: str = "coin_flip"
    purpose: str = "to request a random coin flip"

    def handle(self) -> Literal["Heads", "Tails"]:
        heads = random.random() > 0.5
        return "Heads" if heads else "Tails"


@pytest.mark.parametrize("use_tools_api", [True])
@pytest.mark.parametrize("use_functions_api", [True, False])
def test_agent_infer_tool(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
):
    set_global(test_settings)
    gauss_request = """{"xval": 1, "yval": 3}"""
    boiler_or_euler_request = """{"fruit_pair": {"pears": 1, "apples": 3}}"""
    euler_request = """{"request": "euler", "fruit_pair": {"pears": 1, "apples": 3}}"""
    additional_args_request = """{"xval": 1, "yval": 3, "zval": 4}"""
    additional_args_request_specified = """
    {"request": "gauss", "xval": 1, "yval": 3, "zval": 4}
    """
    no_args_request = """{}"""
    no_args_request_specified = """{"request": "coin_flip"}"""

    cfg = ChatAgentConfig(
        use_tools=not use_functions_api,
        use_functions_api=use_functions_api,
        use_tools_api=use_tools_api,
    )
    agent = ChatAgent(cfg)
    agent.enable_message(
        [
            NabroskiTool,
            GaussTool,
            CoinFlipTool,
            BoilerTool,
        ]
    )
    agent.enable_message(EulerTool, handle=False)

    # Boiler is the only option prior to enabling EulerTool handling
    assert agent.agent_response(boiler_or_euler_request).content == "-12"

    # Enable handling EulerTool, this makes nabrowski_or_euler_request ambiguous
    agent.enable_message(EulerTool)
    agent.enable_message(BoilerTool)

    # Gauss is the only option
    assert agent.agent_response(gauss_request).content == "12"

    # Explicit requests are forwarded to the correct handler
    assert agent.agent_response(euler_request).content == "-1"

    # We cannot infer the correct tool if there exist multiple matches
    assert agent.agent_response(boiler_or_euler_request) is None

    # We do not infer tools where the request has additional arguments
    assert agent.agent_response(additional_args_request) is None
    # But additional args are acceptable when the tool is specified
    assert agent.agent_response(additional_args_request_specified).content == "12"

    # We do not infer tools with no args
    assert agent.agent_response(no_args_request) is None
    # Request must be specified
    assert agent.agent_response(no_args_request_specified).content in ["Heads", "Tails"]


@pytest.mark.parametrize("use_tools_api", [True])
@pytest.mark.parametrize("use_functions_api", [True, False])
def test_tool_no_llm_response(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
):
    """Test that agent.llm_response does not respond to tool messages."""

    set_global(test_settings)
    cfg = ChatAgentConfig(
        use_tools=not use_functions_api,
        use_functions_api=use_functions_api,
        use_tools_api=use_tools_api,
    )
    agent = ChatAgent(cfg)
    agent.enable_message(NabroskiTool)
    nabroski_tool = NabroskiTool(num_pair=NumPair(xval=1, yval=2)).to_json()
    response = agent.llm_response(nabroski_tool)
    assert response is None


@pytest.mark.parametrize("stream", [True, False])
@pytest.mark.parametrize("use_functions_api", [True, False])
def test_tool_no_task(
    test_settings: Settings,
    use_functions_api: bool,
    stream: bool,
):
    """Test tool handling without running task, i.e. directly using
    agent.llm_response and agent.agent_response methods."""

    set_global(test_settings)
    cfg = ChatAgentConfig(
        use_tools=not use_functions_api,
        use_functions_api=use_functions_api,
    )
    cfg.llm.stream = stream
    agent = ChatAgent(cfg)
    agent.enable_message(NabroskiTool, use=True, handle=True)

    response = agent.llm_response("What is Nabroski of 1 and 2?")
    assert isinstance(agent.get_tool_messages(response)[0], NabroskiTool)
    result = agent.agent_response(response)
    assert result.content == "5"


@pytest.mark.parametrize("use_tools_api", [True])
@pytest.mark.parametrize("use_functions_api", [True, False])
def test_tool_optional_args(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
):
    """Test that ToolMessage where some args are optional (i.e. have default values)
    works well, i.e. LLM is able to generate all args if needed, including optionals."""

    set_global(test_settings)
    cfg = ChatAgentConfig(
        use_tools=not use_functions_api,
        use_functions_api=use_functions_api,
        use_tools_api=use_tools_api,
    )
    agent = ChatAgent(cfg)

    agent.enable_message(CoriolisTool, use=True, handle=True)
    response = agent.llm_response("What is the Coriolis transform of 1, 2?")
    assert isinstance(agent.get_tool_messages(response)[0], CoriolisTool)
    tool = agent.get_tool_messages(response)[0]
    assert tool.cats == 1 and tool.cows == 2


@pytest.mark.parametrize("tool", [NabroskiTool, CoriolisTool])
@pytest.mark.parametrize("stream", [False, True])
@pytest.mark.parametrize("use_tools_api", [True])
@pytest.mark.parametrize("use_functions_api", [True, False])
def test_llm_tool_task(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
    stream: bool,
    tool: ToolMessage,
):
    """
    Test "full life cycle" of tool, when using Task.run().

    1. invoke LLM api with tool-spec
    2. LLM generates tool
    3. ChatAgent.agent_response handles tool, result added to ChatAgent msg history
    5. invoke LLM api with tool result
    """

    set_global(test_settings)
    llm_config = OpenAIGPTConfig(max_output_tokens=3_000, timeout=120)
    cfg = ChatAgentConfig(
        llm=llm_config,
        use_tools=not use_functions_api,
        use_functions_api=use_functions_api,
        use_tools_api=use_tools_api,
        system_message=f"""
        You will be asked to compute a certain transform of two numbers,
        using a tool/function-call that you have access to.
        When you receive the answer from the tool, say {DONE} and show the answer.
        DO NOT SAY {DONE} until you receive a specific result from the tool.
        """,
    )
    agent = ChatAgent(cfg)
    agent.enable_message(tool)
    task = Task(agent, interactive=False)

    request = tool.default_value("request")
    result = task.run(f"What is the {request} transform of 3 and 5?")
    assert "14" in result.content


@pytest.mark.parametrize("stream", [False, True])
@pytest.mark.parametrize("use_tools_api", [True])
@pytest.mark.parametrize("use_functions_api", [True, False])
def test_multi_tool(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
    stream: bool,
):
    """
    Test "full life cycle" of tool, when using Task.run().

    1. invoke LLM api with tool-spec
    2. LLM generates tool
    3. ChatAgent.agent_response handles tool, result added to ChatAgent msg history
    5. invoke LLM api with tool result
    """

    set_global(test_settings)
    cfg = ChatAgentConfig(
        use_tools=not use_functions_api,
        use_functions_api=use_functions_api,
        use_tools_api=use_tools_api,
        system_message=f"""
        You will be asked to compute transforms of two numbers,
        using tools/function-calls that you have access to.
        When you are asked for MULTIPLE transforms, you MUST
        use MULTIPLE tools/functions.
        When you receive the answers from the tools, say {DONE} and show the answers.
        """,
    )
    agent = ChatAgent(cfg)
    agent.enable_message(NabroskiTool)
    agent.enable_message(GaussTool)
    task = Task(agent, interactive=False)

    # First test without task; using individual methods
    # ---

    result = task.run(
        """
        Compute these:
        (A) Nabroski transform of 3 and 5
        (B) Gauss transform of 1 and 2
        """
    )
    # Nabroski: 3*3 + 5 = 14
    # Gauss: (1+2)*2 = 6
    assert "14" in result.content and "6" in result.content


@pytest.mark.parametrize("stream", [False, True])
def test_oai_tool_choice(
    test_settings: Settings,
    stream: bool,
):
    """
    Test tool_choice for OpenAI-like LLM APIs.
    """

    set_global(test_settings)
    cfg = ChatAgentConfig(
        use_tools=False,  # langroid tools
        use_functions_api=True,  # openai tools/fns
        use_tools_api=True,  # openai tools/fns
        system_message=f"""
        You will be asked to compute an operation or transform of two numbers,
        either using your own knowledge, or
        using a tool/function-call that you have access to.
        When you have an answer, say {DONE} and show the answer.
        """,
    )
    agent = ChatAgent(cfg)
    agent.enable_message(SumTool)

    chat_doc = agent.create_user_response("What is the sum of 3 and 5?")
    chat_doc.oai_tool_choice = "auto"
    response = agent.llm_response_forget(chat_doc)

    # expect either SumTool or direct result without tool
    assert "8" in response.content or isinstance(
        agent.get_tool_messages(response)[0], SumTool
    )

    chat_doc = agent.create_user_response("What is the double of 5?")
    chat_doc.oai_tool_choice = "none"
    response = agent.llm_response_forget(chat_doc)
    assert "10" in response.content

    chat_doc = agent.create_user_response("What is the sum of 3 and 5?")
    chat_doc.oai_tool_choice = "required"
    response = agent.llm_response_forget(chat_doc)
    assert isinstance(agent.get_tool_messages(response)[0], SumTool)

    agent.enable_message(NabroskiTool, force=True)
    response = agent.llm_response("What is the nabroski of 3 and 5?")
    assert "nabroski" in response.content.lower() or isinstance(
        agent.get_tool_messages(response)[0], NabroskiTool
    )


@pytest.mark.parametrize(
    "result_type",
    [
        "final_tool",
        "result_tool",
        "agent_done",
        "tool",
        "int",
        "list",
        "dict",
        "ChatDocument",
        "pydantic",
    ],
)
@pytest.mark.parametrize(
    "tool_handler", ["notool", "handle", "response", "response_with_doc"]
)
def test_tool_handlers_and_results(result_type: str, tool_handler: str):
    """Test various types of ToolMessage handlers, and check that they can
    return arbitrary result types"""

    class SpecialResult(BaseModel):
        """To illustrating returning an arbitrary Pydantic object as a result"""

        answer: int
        details: str = "nothing"

    def result_fn(x: int) -> Any:
        match result_type:
            case "int":
                return x + 5
            case "dict":
                return {"answer": x + 5, "details": "something"}
            case "list":
                return [x + 5, x * 2]
            case "ChatDocument":
                return ChatDocument(
                    content=str(x + 5),
                    metadata=ChatDocMetaData(sender="Agent"),
                )
            case "pydantic":
                return SpecialResult(answer=x + 5)
            case "tool":
                # return tool, to be handled by sub-task
                return UberTool(x=x)
            case "result_tool":
                return ResultTool(answer=x + 5)
            case "final_tool":
                return FinalResultTool(
                    special=SpecialResult(answer=x + 5),  # explicitly declared
                    # arbitrary new fields that were not declared in the class...
                    extra_special=SpecialResult(answer=x + 10),
                    # ... does not need to be a Pydantic object
                    arbitrary_obj=dict(answer=x + 15),
                )
            case "agent_done":
                # pass on to parent, to handle with UberTool,
                # which is NOT enabled for this agent
                return AgentDoneTool(tools=[UberTool(x=x)])

    class UberTool(ToolMessage):
        request: str = "uber_tool"
        purpose: str = "to request the 'uber' transform of a  number <x>"
        x: int

        def handle(self) -> Any:
            return FinalResultTool(answer=self.x + 5)

    class CoolToolWithHandle(ToolMessage):
        request: str = "cool_tool"
        purpose: str = "to request the 'cool' transform of a  number <x>"

        x: int

        def handle(self) -> Any:
            return result_fn(self.x)

    class MyAgent(ChatAgent):
        def init_state(self) -> None:
            super().init_state()
            self.state: int = 100
            self.sender: str = ""
            self.llm_sent: bool = False

        def llm_response(
            self, message: Optional[str | ChatDocument] = None
        ) -> Optional[ChatDocument]:
            self.llm_sent = True
            return super().llm_response(message)

        def handle_message_fallback(
            self, msg: str | ChatDocument
        ) -> str | ChatDocument | None:
            """Handle non-tool LLM response"""
            if self.llm_sent:
                x = int(msg.content)
                return result_fn(x)

    class CoolToolWithResponse(ToolMessage):
        """To test that `response` handler works as expected,
        and is able to read and modify agent state.
        """

        request: str = "cool_tool"
        purpose: str = "to request the 'cool' transform of a  number <x>"

        x: int

        def response(self, agent: MyAgent) -> Any:
            agent.state += 1
            return result_fn(self.x)

    class CoolToolWithResponseDoc(ToolMessage):
        """
        To test that `response` handler works as expected,
        is able to read and modify agent state, and
        when using a `chat_doc` argument, and is able to read values from it.
        """

        request: str = "cool_tool"
        purpose: str = "to request the 'cool' transform of a  number <x>"

        x: int

        def response(self, agent: MyAgent, chat_doc: ChatDocument) -> Any:
            agent.state += 1
            agent.sender = chat_doc.metadata.sender
            return result_fn(self.x)

    match tool_handler:
        case "handle":
            tool_class = CoolToolWithHandle
        case "response":
            tool_class = CoolToolWithResponse
        case "response_with_doc":
            tool_class = CoolToolWithResponseDoc
        case "notool":
            tool_class = None

    agent = MyAgent(
        ChatAgentConfig(
            name="Test",
            # no need for a real LLM, use a mock
            llm=MockLMConfig(
                # mock LLM generating a CoolTool variant
                response_fn=lambda x: (
                    tool_class(x=int(x)).json() if tool_class is not None else x
                ),
            ),
        )
    )
    if tool_class is not None:
        agent.enable_message(tool_class)

    tool_result = result_type in ["final_tool", "agent_done", "tool", "result_tool"]
    task = Task(
        agent,
        interactive=False,
        # need to specify task done when result is not FinalResultTool
        done_if_response=[] if tool_result else [Entity.AGENT],
    )
    result = task.run("3")
    if tool_handler == "response":
        assert agent.state == 101
    if tool_handler == "response_with_doc":
        assert agent.state == 101
        assert agent.sender == "LLM"

    if not tool_result:
        # CoolTool handler returns a non-tool result containing 8, and
        # we terminate task on agent_response, via done_if_response,
        # so the result.content == 8
        assert "8" in result.content
    elif result_type == "result_tool":
        # CoolTool handler/response returns a ResultTool containing answer == 8
        tool = result.tool_messages[0]
        assert isinstance(tool, ResultTool)
        assert tool.answer == 8
    else:
        # When CoolTool handler returns a ToolMessage,
        # test that it is handled correctly by sub-task or a parent.

        another_agent = ChatAgent(
            ChatAgentConfig(
                name="Another",
                llm=MockLMConfig(response_fn=lambda x: x),  # pass thru
            )
        )
        another_agent.enable_message(UberTool)
        another_task = Task(another_agent, interactive=False)
        another_task.add_sub_task(task)
        result = another_task.run("3")

        if result_type == "final_tool":
            # task's CoolTool handler returns FinalResultTool
            # which short-circuits parent task and returns as a tool
            # in tool_messages list of the final result
            tool = result.tool_messages[0]
            assert isinstance(tool, FinalResultTool)
            assert isinstance(tool.special, SpecialResult)
            assert tool.special.answer == 8
            assert tool.extra_special.answer == 13
            assert tool.arbitrary_obj["answer"] == 18
        elif result_type == "agent_done":
            # inner task's CoolTool handler returns a DoneTool containing
            # UberTool, which is handled by the parent "another_agent"
            # which returns a FinalResultTool containing answer == 8
            tool = result.tool_messages[0]
            assert isinstance(tool, FinalResultTool)
            assert tool.answer == 8

            # Now disable parent agent's handling of UberTool
            another_agent.disable_message_handling(UberTool)
            # another_task = Task(another_agent, interactive=False)
            # another_task.add_sub_task(task)
            result = another_task.run("3")
            # parent task is unable to handle UberTool, so will stall and return None
            assert result is None
            another_agent.enable_message(UberTool)

        elif result_type == "tool":
            # inner Task CoolTool handler returns UberTool (with NO done signal),
            # which it is unable to handle, so stalls and returns None,
            # and so does parent another_task
            assert result is None

            # Now reverse it: make another_task a sub-task of task, and
            # test handling UberTool returned by task handler, by sub-task another_task
            another_task = Task(another_agent, interactive=False)
            # task = Task(agent, interactive=False)
            task.add_sub_task(another_task)
            result = task.run("3")
            tool = result.tool_messages[0]
            assert isinstance(tool, FinalResultTool)
            assert tool.answer == 8

            another_agent.disable_message_handling(UberTool)
            result = task.run("3")
            # subtask stalls, parent stalls, returns None
            assert result is None


@pytest.mark.parametrize("llm_tool", ["pair", "final_tool"])
@pytest.mark.parametrize("handler_result_type", ["agent_done", "final_tool"])
@pytest.mark.parametrize("use_fn_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True])
def test_llm_end_with_tool(
    handler_result_type: str,
    llm_tool: str,
    use_fn_api: bool,
    use_tools_api: bool,
):
    """
    Test that an LLM can directly or indirectly trigger task-end, and return a Tool as
    result. There are 3 ways:
    - case llm_tool == "final_tool":
        LLM returns a Tool (llm_tool == "final_tool") derived from FinalResultTool,
        with field(s) containing a structured Pydantic object -- in this case the task
        ends immediately without any agent response handling the tool
    - case llm_tool == "pair":
        LLM returns a PairTool, which is handled by the agent, which returns either
        - AgentDoneTool, with `tools` field set to [self], or
        - FinalResultTool, with `result` field set to the PairTool
    """

    class Pair(BaseModel):
        a: int
        b: int

    class PairTool(ToolMessage):
        """Handle the LLM-generated tool, signal done or final-result and
        return it as the result."""

        request: str = "pair_tool"
        purpose: str = "to return a <pair> of numbers"
        pair: Pair

        def handle(self) -> Any:
            if handler_result_type == "final_tool":
                # field name can be anything; `result` is just an example.
                return FinalResultTool(result=self)
            else:
                return AgentDoneTool(tools=[self])

    class FinalResultPairTool(FinalResultTool):
        request: str = "final_result_pair_tool"
        purpose: str = "Present final result <pair>"
        pair: Pair
        _allow_llm_use: bool = True

    final_result_pair_tool_name = FinalResultPairTool.default_value("request")

    class MyAgent(ChatAgent):
        def init_state(self) -> None:
            super().init_state()
            self.numbers: List[int] = []

        def user_response(
            self,
            msg: Optional[str | ChatDocument] = None,
        ) -> Optional[ChatDocument]:
            """Mock human user input: they start with 0, then increment by 1"""
            last_num = self.numbers[-1] if self.numbers else 0
            new_num = last_num + 1
            self.numbers.append(new_num)
            return self.create_user_response(content=str(new_num))

    pair_tool_name = PairTool.default_value("request")

    if llm_tool == "pair":
        # LLM generates just PairTool , to be handled by its tool handler
        system_message = f"""
            Ask the user for their next number.
            Once you have collected 2 distinct numbers, present these as a pair
            using the TOOL: `{pair_tool_name}`.
            """
    else:
        system_message = f"""
            Ask the user for their next number.
            Once you have collected 2 distinct numbers, present these as the
            final result using the TOOL: `{final_result_pair_tool_name}`.
        """

    agent = MyAgent(
        ChatAgentConfig(
            name="MyAgent",
            system_message=system_message,
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
        )
    )
    if llm_tool == "pair":
        agent.enable_message(PairTool)
    else:
        agent.enable_message(FinalResultPairTool)

    # we are mocking user response, so need to set only_user_quits_root=False
    # so that the done signal (AgentDoneTool or FinalResultTool) actually end the task.
    task = Task(agent, interactive=True, only_user_quits_root=False)
    result = task.run()
    tool = result.tool_messages[0]
    if llm_tool == "pair":
        if handler_result_type == "final_tool":
            assert isinstance(tool, FinalResultTool)
            assert tool.result.pair.a == 1 and tool.result.pair.b == 2
        else:
            assert isinstance(tool, PairTool)
            assert tool.pair.a == 1 and tool.pair.b == 2
    else:
        assert isinstance(tool, FinalResultPairTool)
        assert tool.pair.a == 1 and tool.pair.b == 2


def test_final_result_tool():
    """Test that FinalResultTool can be returned by agent_response"""

    class MyAgent(ChatAgent):
        def agent_response(self, msg: str | ChatDocument) -> Any:
            return FinalResultTool(answer="42")

    agent = MyAgent(
        ChatAgentConfig(
            name="MyAgent",
            llm=MockLMConfig(response_fn=lambda x: x),
        )
    )

    task = Task(agent, interactive=False)[ToolMessage]
    result = task.run("3")
    assert isinstance(result, FinalResultTool)
    assert result.answer == "42"


@pytest.mark.parametrize("tool", ["none", "a", "aa", "b"])
def test_agent_respond_only_tools(tool: str):
    """
    Test that we can have an agent that only responds to certain tools,
    and no plain-text msgs, by setting ChatAgentConfig.respond_only_tools=True.
    """

    class ATool(ToolMessage):
        request: str = "a_tool"
        purpose: str = "to present a number <num>"
        num: int

        def handle(self) -> FinalResultTool:
            return FinalResultTool(answer=self.num * 2)

    class AATool(ToolMessage):
        request: str = "aa_tool"
        purpose: str = "to present a number <num>"
        num: int

        def handle(self) -> FinalResultTool:
            return FinalResultTool(answer=self.num * 3)

    class BTool(ToolMessage):
        request: str = "b_tool"
        purpose: str = "to present a number <num>"
        num: int

        def handle(self) -> FinalResultTool:
            return FinalResultTool(answer=self.num * 4)

    match tool:
        case "a":
            tool_class = ATool
        case "aa":
            tool_class = AATool
        case "b":
            tool_class = BTool
        case "none":
            tool_class = None

    main_agent = ChatAgent(
        ChatAgentConfig(
            name="Main",
            llm=MockLMConfig(
                response_fn=lambda x: (
                    tool_class(num=int(x)).json() if tool_class is not None else x
                ),
            ),
        )
    )

    if tool_class is not None:
        main_agent.enable_message(tool_class, use=True, handle=False)

    alice_agent = ChatAgent(
        ChatAgentConfig(
            name="Alice",
            llm=MockLMConfig(response_fn=lambda x: x),
            respond_tools_only=True,
        )
    )
    alice_agent.enable_message([ATool, AATool], use=False, handle=True)

    # class BobAgent(ChatAgent):
    #     def handle_message_fallback(self, msg: str | ChatDocument) -> Any:
    #         if isinstance(msg, str) or len(msg.tool_messages) == 0:
    #             return AgentDoneTool(content="")

    bob_agent = ChatAgent(
        ChatAgentConfig(
            name="Bob",
            llm=MockLMConfig(response_fn=lambda x: x),
            respond_tools_only=True,
        )
    )
    bob_agent.enable_message([BTool], use=False, handle=True)

    class FallbackAgent(ChatAgent):
        def agent_response(self, msg: str | ChatDocument) -> Any:
            return FinalResultTool(answer=int(msg.content) * 5)

    fallback_agent = FallbackAgent(
        ChatAgentConfig(
            name="Fallback",
            llm=None,
        )
    )
    fallback_task = Task(fallback_agent, interactive=False)

    main_task = Task(main_agent, interactive=False)[ToolMessage]
    alice_task = Task(alice_agent, interactive=False)
    bob_task = Task(bob_agent, interactive=False)

    main_task.add_sub_task([alice_task, bob_task, fallback_task])
    tool = main_task.run(3)

    # Note: when Main generates a tool, task orchestrator will not allow
    # Alice to respond at all when the tool is not handled by Alice,
    # and similarly for Bob (this uses agent.has_only_unhandled_tools()).
    # However when main generates a non-tool string,
    # we want to ensure that the above handle_message_fallback methods
    # effectively return a null msg (and not get into a stalled loop inside the agent),
    # and is finally handled by the FallbackAgent
    assert isinstance(tool, FinalResultTool)

    match tool:
        case "a":
            assert tool.answer == "6"
        case "aa":
            assert tool.answer == "9"
        case "b":
            assert tool.answer == "12"
        case "none":
            assert tool.answer == "15"
            assert alice_task.n_stalled_steps == 0
            assert bob_task.n_stalled_steps == 0


@pytest.mark.parametrize("use_fn_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True])
def test_structured_recovery(
    test_settings: Settings,
    use_fn_api: bool,
    use_tools_api: bool,
):
    """
    Test that structured fallback correctly recovers
    from failed tool calls.
    """
    set_global(test_settings)

    def simulate_failed_call(attempt: str | ChatDocument) -> str:
        agent = ChatAgent(
            ChatAgentConfig(
                use_functions_api=use_fn_api,
                use_tools_api=use_tools_api,
                use_tools=not use_fn_api,
                strict_recovery=True,
                llm=OpenAIGPTConfig(
                    supports_json_schema=True,
                    supports_strict_tools=True,
                ),
            )
        )
        agent.enable_message(NabroskiTool)
        agent.enable_message(CoriolisTool)
        agent.enable_message(EulerTool)

        agent.message_history = [
            LLMMessage(
                role=Role.SYSTEM,
                content="You are a helpful assistant.",
            ),
            LLMMessage(
                role=Role.USER,
                content="""
                Please give me an example of a Nabroski, Coriolis, or Euler call.
                """,
            ),
            LLMMessage(
                role=Role.ASSISTANT,
                content=attempt if isinstance(attempt, str) else attempt.content,
                tool_calls=None if isinstance(attempt, str) else attempt.oai_tool_calls,
                function_call=(
                    None if isinstance(attempt, str) else attempt.function_call
                ),
            ),
        ]
        if (
            use_fn_api
            and use_tools_api
            and isinstance(attempt, ChatDocument)
            and attempt.oai_tool_calls is not None
        ):
            # Inserting this since OpenAI API strictly requires a
            # Role.TOOL msg immediately after an Assistant Tool call,
            # before the next Assistant msg.
            agent.message_history.extend(
                [
                    LLMMessage(
                        role=Role.TOOL,
                        tool_call_id=t.id,
                        content="error",
                    )
                    for t in attempt.oai_tool_calls
                ]
            )

        # Simulates bad tool attempt by the LLM
        agent.handle_message(attempt)
        assert agent.tool_error
        response = agent.llm_response(
            """
            There was an error in your attempted tool/function call. Please correct it.
            """
        )
        assert response is not None
        result = agent.handle_message(response)
        assert result is not None
        if isinstance(result, ChatDocument):
            return result.content

        return result

    def to_attempt(attempt: LLMFunctionCall) -> str | ChatDocument:
        if not use_fn_api:
            return json.dumps(
                {
                    "request": attempt.name,
                    **(attempt.arguments or {}),
                }
            )

        if use_tools_api:
            return ChatDocument(
                content="",
                metadata=ChatDocMetaData(sender=Entity.LLM),
                oai_tool_calls=[
                    OpenAIToolCall(
                        id="call-1234657",
                        function=attempt,
                    )
                ],
            )

        return ChatDocument(
            content="",
            metadata=ChatDocMetaData(sender=Entity.LLM),
            function_call=attempt,
        )

    # The name of the function is incorrect:
    # The LLM should correct the request to "nabroski" in recovery
    assert (
        simulate_failed_call(
            to_attempt(
                LLMFunctionCall(
                    name="__nabroski__",
                    arguments={
                        "xval": 1,
                        "yval": 3,
                    },
                )
            )
        )
        == "6"
    )
    # The LLM should correct the request to "nabroski" in recovery
    assert (
        simulate_failed_call(
            to_attempt(
                LLMFunctionCall(
                    name="Nabroski-function",
                    arguments={
                        "xval": 2,
                        "yval": 3,
                    },
                )
            )
        )
        == "9"
    )
    # Strict fallback disables the default arguments, but the LLM
    # should infer from context. In addition, the name of the
    # function is incorrect (the LLM should infer "coriolis" in
    # recovery) and the JSON output is malformed

    # Note here we intentionally use "catss" as the arg to ensure that
    # the tool-name inference doesn't work (see `maybe_parse` agent/base.py,
    # there's a mechanism that infers the intended tool if the arguments are
    # unambiguously for a specific tool) -- here since we use `catss` that
    # mechanism fails, and we can do this test properly to focus on structured
    # recovery. But `catss' is sufficiently similar to 'cats' that the
    # intent-based recovery should work.
    assert (
        simulate_failed_call(
            """
        request ":coriolis"
        arguments {"catss": 1} 
        """
        )
        == "8"
    )
    # The LLM should correct the request to "coriolis" in recovery
    # The LLM should infer the default argument from context
    assert (
        simulate_failed_call(
            to_attempt(
                LLMFunctionCall(
                    name="Coriolis",
                    arguments={
                        "cats": 1,
                    },
                )
            )
        )
        == "8"
    )
    # The LLM should infer "euler" in recovery
    assert (
        simulate_failed_call(
            to_attempt(
                LLMFunctionCall(
                    name="EulerTool",
                    arguments={
                        "pears": 6,
                        "apples": 4,
                    },
                )
            )
        )
        == "8"
    )


@pytest.mark.parametrize("use_fn_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True])
@pytest.mark.parametrize("parallel_tool_calls", [True, False])
def test_strict_fallback(
    test_settings: Settings,
    use_fn_api: bool,
    use_tools_api: bool,
    parallel_tool_calls: bool,
):
    """
    Test that strict tool and structured output errors
    are handled gracefully and are disabled if errors
    are caused.
    """
    set_global(test_settings)

    class BrokenStrictSchemaAgent(ChatAgent):
        def _function_args(self) -> tuple[
            Optional[List[LLMFunctionSpec]],
            str | dict[str, str],
            Optional[list[OpenAIToolSpec]],
            Optional[dict[str, dict[str, str] | str]],
            Optional[OpenAIJsonSchemaSpec],
        ]:
            """
            Implements a broken version of the correct _function_args()
            that ensures that the generated schemas are incompatible
            with OpenAI's strict decoding implementation.

            Specifically, removes the schema edits performed by
            `format_schema_for_strict()` (e.g. setting "additionalProperties"
            to False on all objects in the JSON schema).
            """
            functions, fun_call, tools, force_tool, output_format = (
                super()._function_args()
            )

            # remove schema edits for strict
            if tools is not None:
                for t in tools:
                    name = t.function.name
                    t.function = self.llm_functions_map[name]

            if self.output_format is not None and self._json_schema_available():
                self.any_strict = True
                if issubclass(self.output_format, ToolMessage) and not issubclass(
                    self.output_format, XMLToolMessage
                ):
                    spec = self.output_format.llm_function_schema(
                        request=True,
                        defaults=self.config.output_format_include_defaults,
                    )

                    output_format = OpenAIJsonSchemaSpec(
                        strict=True,
                        function=spec,
                    )
                elif issubclass(self.output_format, BaseModel):
                    param_spec = self.output_format.schema()

                    output_format = OpenAIJsonSchemaSpec(
                        strict=True,
                        function=LLMFunctionSpec(
                            name="json_output",
                            description="Strict Json output format.",
                            parameters=param_spec,
                        ),
                    )

            return functions, fun_call, tools, force_tool, output_format

    agent = BrokenStrictSchemaAgent(
        ChatAgentConfig(
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            llm=OpenAIGPTConfig(
                parallel_tool_calls=parallel_tool_calls,
                supports_json_schema=True,
                supports_strict_tools=True,
            ),
        )
    )
    agent.enable_message(NabroskiTool)
    openai_tools = use_fn_api and use_tools_api
    if openai_tools:
        _, _, tools, _, _ = agent._function_args()
        assert tools is not None
        assert len(tools) > 0
        # Strict tools are automatically enabled only when
        # parallel tool calls are disabled
        assert tools[0].strict == (not parallel_tool_calls)

    response = agent.llm_response_forget(
        """
        What is the Nabroski transform of (1,3)? Use the
        `nabroski` tool/function.
        """
    )
    result = agent.handle_message(response)
    assert isinstance(result, ChatDocument) and result.content == "6"
    assert agent.disable_strict == (openai_tools and not parallel_tool_calls)

    agent = BrokenStrictSchemaAgent(
        ChatAgentConfig(
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            llm=OpenAIGPTConfig(
                parallel_tool_calls=parallel_tool_calls,
                supports_json_schema=True,
                supports_strict_tools=True,
            ),
        )
    )
    structured_agent = agent[NabroskiTool]
    response = structured_agent.llm_response_forget(
        """
        What is the Nabroski transform of (1,3)?
        """
    )
    assert response is not None
    assert structured_agent.disable_strict
    assert not agent.disable_strict


@pytest.mark.parametrize("use_fn_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True])
@pytest.mark.parametrize("parallel_tool_calls", [True, False])
def test_strict_schema_mismatch(
    use_fn_api: bool,
    use_tools_api: bool,
    parallel_tool_calls: bool,
):
    """
    Test that validation errors triggered in strict result in disabled strict output.
    """

    def int_schema(request: str) -> dict[str, Any]:
        return {
            "type": "object",
            "additionalProperties": False,
            "properties": {
                "x": {"type": "integer"},
                "request": {"type": "string", "enum": [request]},
            },
            "required": ["x", "request"],
        }

    class WrongSchemaAgent(ChatAgent):
        def _function_args(self) -> tuple[
            Optional[List[LLMFunctionSpec]],
            str | dict[str, str],
            Optional[list[OpenAIToolSpec]],
            Optional[dict[str, dict[str, str] | str]],
            Optional[OpenAIJsonSchemaSpec],
        ]:
            """
            Implements a broken version of the correct _function_args()
            that replaces the output and all tool schemas with an
            incorrect schema. Simulates mismatched schemas due to
            schema edits.
            """
            functions, fun_call, tools, force_tool, output_format = (
                super()._function_args()
            )

            # remove schema edits for strict
            if tools is not None:
                for t in tools:
                    name = t.function.name
                    t.function.parameters = int_schema(name)

            if self.output_format is not None and self._json_schema_available():
                output_format = OpenAIJsonSchemaSpec(
                    strict=True,
                    function=LLMFunctionSpec(
                        name="json_output",
                        description="Strict Json output format.",
                        parameters=int_schema("json_output"),
                    ),
                )

            return functions, fun_call, tools, force_tool, output_format

    agent = WrongSchemaAgent(
        ChatAgentConfig(
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            llm=OpenAIGPTConfig(
                parallel_tool_calls=parallel_tool_calls,
                supports_json_schema=True,
                supports_strict_tools=True,
            ),
        )
    )

    class IntTool(ToolMessage):
        request: str = "int_tool"
        purpose: str = "To return an integer value"
        x: int

        def handle(self):
            return self.x

    class StrTool(ToolMessage):
        request: str = "str_tool"
        purpose: str = "To return an string value"
        text: str

        def handle(self):
            return self.text

    agent.enable_message(IntTool)
    agent.enable_message(StrTool)
    strict_openai_tools = use_fn_api and use_tools_api and not parallel_tool_calls
    response = agent.llm_response_forget(
        """
        What is the smallest integer greater than pi? Use the
        `int_tool` tool/function.
        """
    )
    agent.handle_message(response)
    assert "int_tool" not in agent.disable_strict_tools_set

    agent.llm_response_forget(
        """
        Who is the president of France? Use the `str_tool` tool/function.
        """
    )
    assert ("str_tool" in agent.disable_strict_tools_set) == strict_openai_tools

    strict_agent = agent[IntTool]
    strict_agent.llm_response_forget("What is the smallest integer greater than pi?")
    assert not strict_agent.disable_strict

    strict_agent = agent[StrTool]
    strict_agent.llm_response_forget("Who is the president of France?")
    assert strict_agent.disable_strict


def test_reduce_raw_tool_result():
    BIG_RESULT = "hello " * 50

    class MyTool(ToolMessage):
        request: str = "my_tool"
        purpose: str = "to present a number <num>"
        num: int
        _max_result_tokens = 10
        _max_retained_tokens = 2

        def handle(self) -> str:
            return BIG_RESULT

    class MyAgent(ChatAgent):
        def user_response(
            self,
            msg: Optional[str | ChatDocument] = None,
        ) -> Optional[ChatDocument]:
            """
            Mock user_response method for testing
            """
            txt = msg if isinstance(msg, str) else msg.content
            map = dict([("hello", "50"), ("3", "5")])
            response = map.get(txt)
            # return the increment of input number
            return self.create_user_response(response)

    # create dummy agent first, just to get small_result with truncation
    agent = MyAgent(ChatAgentConfig())
    small_result = agent._maybe_truncate_result(BIG_RESULT, MyTool._max_result_tokens)

    # now create the actual agent
    agent = MyAgent(
        ChatAgentConfig(
            name="Test",
            # no need for a real LLM, use a mock
            llm=MockLMConfig(
                response_dict={
                    "1": MyTool(num=1).to_json(),
                    small_result: "hello",
                    "50": DoneTool(content="Finished").to_json(),
                }
            ),
        )
    )
    agent.enable_message(MyTool)
    task = Task(agent, interactive=True, only_user_quits_root=False)

    result = task.run("1")
    """
    msg history:
    
    sys_msg
    user: 1 -> 
    LLM: MyTool(1) ->
    agent: BIG_RESULT -> truncated to 10 tokens, as `small_result`
    LLM: hello ->
    user: 50 -> 
    LLM: Done (Finished)
    """
    assert result.content == "Finished"
    assert len(agent.message_history) == 7
    tool_result = agent.message_history[3].content
    assert "my_tool" in tool_result and str(MyTool._max_retained_tokens) in tool_result


def test_valid_structured_recovery():
    """
    Test that structured recovery is not triggered inappropriately
    when agent response contains a JSON-like string.
    """

    class MyAgent(ChatAgent):
        def agent_response(self, msg: str | ChatDocument) -> Any:
            return "{'x': 1, 'y': 2}"

    agent = MyAgent(
        ChatAgentConfig(
            llm=OpenAIGPTConfig(),
            system_message="""Simply respond No for any input""",
        )
    )

    # with no tool enabled
    task = Task(agent, interactive=False)
    result = task.run("3", turns=4)
    # response-sequence: agent, llm, agent, llm -> done
    assert "No" in result.content

    # with a tool enabled
    agent.enable_message(NabroskiTool)
    task = Task(agent, interactive=False)
    result = task.run("3", turns=4)
    assert "No" in result.content


@pytest.mark.parametrize(
    "handle_no_tool",
    [
        None,
        "user",
        "done",
        "are you finished?",
        ResultTool(answer=42),
        DonePassTool(),
        lambda msg: AgentDoneTool(content=msg.content),
    ],
)
def test_handle_llm_no_tool(handle_no_tool: Any):
    """Verify that ChatAgentConfig.handle_llm_no_tool works as expected"""

    def mock_llm_response(x: str) -> str:
        match x:
            case "1":
                return SumTool(x=1, y=2).json()
            case "3":
                return "4"
            case "are you finished?":
                return "DONE 5"

    config = ChatAgentConfig(
        handle_llm_no_tool=handle_no_tool,
        llm=MockLMConfig(response_fn=mock_llm_response),
    )
    agent = ChatAgent(config)
    agent.enable_message(SumTool)
    task = Task(agent, interactive=False, default_human_response="q")
    result = task.run("1")
    if handle_no_tool is None:
        # task gets stuck and returns None
        assert result is None

    if isinstance(handle_no_tool, str):
        match handle_no_tool:
            case "user":
                # LLM(1) -> SumTool(1,2) -> 3 -> LLM(3) -> 4 -> User(4) -> q
                assert result.content == "q"
            case "done":
                # LLM(1) -> SumTool(1,2) -> 3 -> LLM(3) -> 4 -> Done(4)
                assert result.content == "4"
            case "are you finished?":
                # LLM(1) -> SumTool(1,2) -> 3 -> LLM(3) -> 4 -> LLM(DONE)
                assert result.content == "5"

    if isinstance(handle_no_tool, ResultTool):
        # LLM(1) -> SumTool(1,2) -> 3 -> LLM(3) -> 4 -> ResultTool(4)
        assert isinstance(result.tool_messages[0], ResultTool)
        assert result.tool_messages[0].answer == 42
    if is_callable(handle_no_tool):
        # LLM(1) -> SumTool(1,2) -> 3 -> LLM(3) -> 4 -> AgentDoneTool(4) -> 4
        assert result.content == "4"
    if isinstance(handle_no_tool, DonePassTool):
        # LLM(1) -> SumTool(1,2) -> 3 -> LLM(3) -> 4 -> DonePass
        assert result.content == "4"


class GetTimeTool(ToolMessage):
    purpose: str = "Get current time"
    request: str = "get_time"

    def response(self, agent: ChatAgent) -> ChatDocument:
        return agent.create_agent_response(
            content=json.dumps(
                {
                    "time": "11:59:59",
                    "date": "1999-12-31",
                    "day_of_week": "Friday",
                    "week_number": "52",
                    "tzname": "America/New York",
                }
            ),
            recipient=Entity.LLM,
        )


@pytest.mark.parametrize("use_fn_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True])
def test_strict_recovery_only_from_LLM(
    use_fn_api: bool,
    use_tools_api: bool,
):
    """
    Test that structured fallback only occurs on messages
    sent by the LLM.
    """
    was_tool_error = False

    class TrackToolError(ChatAgent):
        def llm_response(
            self, message: Optional[str | ChatDocument] = None
        ) -> Optional[ChatDocument]:
            nonlocal was_tool_error
            if self.tool_error:
                was_tool_error = True
            return super().llm_response(message)

        async def llm_response_async(
            self, message: Optional[str | ChatDocument] = None
        ) -> Optional[ChatDocument]:
            nonlocal was_tool_error
            if self.tool_error:
                was_tool_error = True
            return await super().llm_response_async(message)

    agent = TrackToolError(
        ChatAgentConfig(
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            strict_recovery=True,
            llm=OpenAIGPTConfig(
                supports_json_schema=True,
                supports_strict_tools=True,
            ),
            system_message="""
            You are a helpful assistant.  Start by calling the
            get_time tool. Then greet the user according to the time
            of the day.
            """,
        )
    )
    agent.enable_message(GetTimeTool)
    task = Task(agent, interactive=False)
    task.run(turns=6)
    assert not was_tool_error

    agent.init_message_history()

    content = json.dumps(
        {
            "time": "11:59:59",
            "date": "1999-12-31",
            "day_of_week": "Friday",
            "week_number": "52",
            "tzname": "America/New York",
        }
    )

    agent.get_tool_messages(content)
    assert not agent.tool_error

    user_message = agent.create_user_response(content=content, recipient=Entity.LLM)
    agent.get_tool_messages(user_message)
    assert not agent.tool_error

    agent_message = agent.create_agent_response(content=content, recipient=Entity.LLM)
    agent.get_tool_messages(agent_message)
    assert not agent.tool_error

    agent.message_history.extend(ChatDocument.to_LLMMessage(agent_message))
    agent.get_tool_messages(content)
    assert not agent.tool_error

    agent.message_history.extend(ChatDocument.to_LLMMessage(user_message))
    agent.get_tool_messages(content)
    assert not agent.tool_error


@pytest.mark.parametrize("use_fn_api", [False, True])
def test_tool_handler_invoking_llm(use_fn_api: bool):
    """
    Check that if a tool handler directly invokes llm_response,
    it works as expected, especially with OpenAI Tools API
    """

    class MyAgent(ChatAgent):
        def nabroski(self, msg: NabroskiTool):
            ans = self.llm_response("What is 3+4?")
            return AgentDoneTool(content=ans.content)

    agent = MyAgent(
        ChatAgentConfig(
            use_functions_api=use_fn_api,
            use_tools_api=use_fn_api,
            use_tools=not use_fn_api,
            handle_llm_no_tool=f"you FORGOT to use the tool `{NabroskiTool.name()}`",
            system_message=f"""
            When user asks you to compute the Nabroski transform of two numbers,
            you MUST use the TOOL `{NabroskiTool.name()}` to do so, since you do NOT
            know how to do it yourself.
            """,
        )
    )
    agent.enable_message(NabroskiTool)
    task = Task(agent, interactive=False, single_round=False)
    result = task.run(
        f"""
        Use the TOOL `{NabroskiTool.name()}` to compute the 
        Nabroski transform of 2 and 5.
        """
    )

    assert "7" in result.content
</file>

<file path="tests/main/test_tool_orchestration.py">
from typing import Optional

import pytest

import langroid as lr
from langroid import ChatDocument, InfiniteLoopException
from langroid.language_models.mock_lm import MockLMConfig
from langroid.utils.configuration import Settings, set_global


@pytest.mark.parametrize("use_functions_api", [False, True])
@pytest.mark.parametrize("use_tools_api", [False, True])
def test_llm_done_tool(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
):
    """
    Test whether LLM is able to GENERATE DoneTool in required format,
    and the agent handles the tool correctly (in a task).
    """

    class MyAgent(lr.ChatAgent):
        def agent_response(
            self,
            msg: Optional[str | ChatDocument] = None,
        ) -> str:
            return msg.content

    set_global(test_settings)
    DoneTool = lr.agent.tools.orchestration.DoneTool
    tool_name = DoneTool.default_value("request")
    agent = MyAgent(
        lr.ChatAgentConfig(
            name="Test",
            use_functions_api=use_functions_api,
            use_tools_api=use_tools_api,
            use_tools=not use_functions_api,
            system_message=f"""
            User will give a number. Process it like this:
            - if number is even, divide by 2 and simply return the result,
                SAY NOTHING ELSE!
            - if number is odd, use the TOOL: {tool_name} to indicate you are finished,
                along with the number as is in the `content` field.
            """,
        )
    )
    # test DoneTool in llm_response
    agent.enable_message(DoneTool, use=True, handle=True)
    response = agent.llm_response("4")
    assert "2" in response.content
    response = agent.llm_response("5")
    assert len(agent.get_tool_messages(response)) == 1
    tool = agent.get_tool_messages(response)[0]
    assert isinstance(tool, DoneTool)
    assert tool.content == "5"

    # test DoneTool in task
    task = lr.Task(agent, interactive=False)

    result = task[int].run(12)  # 12 -> 6 -> 3 -> done
    assert result == 3


@pytest.mark.parametrize("xtool", [True, False])
@pytest.mark.parametrize("only_user_quits", [True, False])
def test_agent_done_interactive(xtool: bool, only_user_quits: bool):
    AgentDoneTool = lr.agent.tools.orchestration.AgentDoneTool

    class OtherTool(lr.ToolMessage):
        purpose = "a tool not enabled for agent"
        request = "other_tool"

        z: int

    class XTool(lr.ToolMessage):
        purpose = "to show x"
        request = "x_tool"
        x: int

        def handle(self) -> AgentDoneTool:
            return AgentDoneTool(
                content=self.x,
                tools=[self if xtool else OtherTool(z=3)],
            )

    _first_time = True

    def mock_response(x: str) -> str:
        nonlocal _first_time
        if _first_time:
            _first_time = False
            return "give me a number"
        return XTool(x=int(x))

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(name="Test", llm=MockLMConfig(response_fn=mock_response))
    )
    agent.enable_message(XTool)
    task = lr.Task(
        agent,
        interactive=True,
        default_human_response="34",
        only_user_quits_root=only_user_quits,
    )

    try:
        result = task.run()
        # sequence:
        # LLM: give me a number
        # User: 34
        # LLM: XTool(34)
        # Agent (agent_response) -> AgentDoneTool(content="34", [Tool])
        #   where Tool is either XTool(34) or OtherTool(3)

    except InfiniteLoopException:
        # inapplicable (unhandled) OtherTool => LLM, User allowed to respond,
        # and only_user_quits_root is True,
        # so task keeps asking for user input, triggering infinite loop check
        assert not xtool and only_user_quits
        return

    if not only_user_quits:
        # only_user_quits is False, so AgentDoneTool causes task exit
        assert "34" in result.content
        return
    if xtool:
        # After this point, we can't get response from
        # - user since the curr pending msg contains a valid tool.
        # - agent_response since it cannot respond to own msg
        # - llm_response since the curr pending msg contains a valid tool.
        # So the task stalls until it hits max_stalled_steps and returns None
        assert result is None


def test_agent_done_tool(test_settings: Settings):
    """
    Verify generation of AgentDoneTool by agent_response method,
    and correct handling by task.
    """
    set_global(test_settings)
    AgentDoneTool = lr.agent.tools.orchestration.AgentDoneTool
    ResultTool = lr.agent.tools.orchestration.ResultTool

    class XTool(lr.ToolMessage):
        purpose = "to show x"
        request = "x_tool"
        x: int

    class XYTool(lr.ToolMessage):
        purpose = "to show x, y"
        request = "x_y_tool"
        x: int
        y: int

        def handle(self) -> AgentDoneTool:
            return AgentDoneTool(
                content=self.x + self.y,  # can be of any type
                tools=[ResultTool(arbitrary_obj=4)],
            )

    class MyAgent(lr.ChatAgent):
        # Note that agent_response needn't return a ChatDocument or str.
        def agent_response(
            self,
            msg: Optional[str | ChatDocument] = None,
        ) -> int | AgentDoneTool:
            value = int(str) if isinstance(msg, str) else int(msg.content)
            if value == 3:
                return AgentDoneTool(content=3)
            else:
                return value

    agent = MyAgent(
        lr.ChatAgentConfig(llm=MockLMConfig(response_fn=lambda x: int(x) + 1))
    )
    # use = False, since LLM is not generating any of these
    agent.enable_message(AgentDoneTool, use=False, handle=True)
    agent.enable_message(XTool, use=False, handle=True)
    agent.enable_message(XYTool, use=False, handle=True)

    # test agent generation of AgentDoneTool directly (in agent_response)
    task = lr.Task(agent, interactive=False)
    result = task[int].run(1)  # note, input, return-type needn't be str
    assert result == 3

    class MyAgent(lr.ChatAgent):
        def x_tool(self, msg: XTool) -> AgentDoneTool | int:
            if msg.x == 3:
                xy = XYTool(x=3, y=5)
                return AgentDoneTool(content="xy", tools=[xy])
            else:
                return msg.x

    # Test agent generation of AgentDoneTool indirectly (in tool).
    # LLM generates next number via XTool, agent handles it.
    agent = MyAgent(
        lr.ChatAgentConfig(
            name="MyAgent",
            llm=MockLMConfig(
                # note: response need not be str; will be converted to str via .json()
                response_fn=lambda x: XTool(x=int(x) + 1)
            ),
        )
    )

    agent.enable_message(AgentDoneTool, use=False, handle=True)
    agent.enable_message(XTool, use=True, handle=True)

    main_agent = lr.ChatAgent(
        lr.ChatAgentConfig(name="Main", llm=MockLMConfig(response_fn=lambda x: x))
    )
    main_agent.enable_message(XYTool, use=False, handle=True)

    main_task = lr.Task(main_agent, interactive=False)
    task = lr.Task(agent, interactive=False)
    main_task.add_sub_task(task)
    result = main_task[int].run(1)
    # when MyAgent sees x=3, it generates AgentDoneTool, with tools = [XYTool(3, 5)],
    # which is in turn handled by the MainAgent, to produce
    # AgentDoneTool(content=8)
    assert result == 8

    result = main_task[ResultTool].run(1)
    assert isinstance(result, ResultTool)
    assert result.arbitrary_obj == 4


@pytest.mark.parametrize("use_functions_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True, False])
def test_orch_tools(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
):
    """
    Test multiple orchestration tools in a 3-agent setting:
    PassTool use by agent,
    ForwardTool use by agent, LLM,
    DoneTool use by agent, LLM
    """

    set_global(test_settings)
    # these orch tools are enabled for HANDLING by default in any ChatAgent,
    # via the ChatAgentConfig.enable_orchestration_tool_handling = True flag.
    # But if we need to enable the LLM to generate these, we need to explicitly
    # enable these, as we see for some of the tools below.

    DoneTool = lr.agent.tools.orchestration.DoneTool
    ForwardTool = lr.agent.tools.orchestration.ForwardTool
    PassTool = lr.agent.tools.orchestration.PassTool

    done_tool_name = DoneTool.default_value("request")
    forward_tool_name = ForwardTool.default_value("request")

    class ReduceTool(lr.ToolMessage):
        purpose = "to remove last zero from a number ending in 0"
        request = "reduce_tool"
        number: int

        def handle(self) -> int:
            return int(self.number / 10)

    reduce_tool_name = ReduceTool.default_value("request")

    class TestAgent(lr.ChatAgent):
        def reduce_tool(self, msg: ReduceTool) -> PassTool:
            # validate and pass on
            return PassTool()

    agent = TestAgent(
        lr.ChatAgentConfig(
            name="Test",
            use_functions_api=use_functions_api,
            use_tools_api=use_tools_api,
            use_tools=not use_functions_api,
            system_message=f"""
            Whenever you receive a number, process it like this:
            - if the number ENDS in 0, use the TOOL: {reduce_tool_name} 
                to reduce it, and the Reducer will return the result to you,
                and you must CONTINUE processing it using these same rules.
            - else if number is EVEN, FORWARD it to the "EvenHandler" agent,
                    using the `{forward_tool_name}` TOOL; the EvenHandler will 
                    return the result of this TOOL, and you CONTINUE processing
                    it using these same rules.
            - else if number is ODD, use the {done_tool_name} to indicate you are 
            finished,
                along with the number as is in the `content` field.
            """,
        )
    )
    # test DoneTool in llm_response
    agent.enable_message(DoneTool, use=True, handle=True)
    agent.enable_message(ForwardTool, use=True, handle=True)
    agent.enable_message(ReduceTool, use=True, handle=True)
    task = lr.Task(agent, interactive=False)

    even_agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="EvenHandler",
            llm=MockLMConfig(response_fn=lambda x: str(int(round(float(x))) / 2)),
        )
    )
    even_task = lr.Task(even_agent, single_round=True, interactive=False)

    # distracting agent that should not handle any msgs
    class TriplerAgent(lr.ChatAgent):
        def reduce_tool(self, msg: ReduceTool) -> None:
            # validate and forward to Reducer
            return ForwardTool(agent="Reducer")

    triple_agent = TriplerAgent(
        lr.ChatAgentConfig(
            name="Tripler",
            llm=MockLMConfig(response_fn=lambda x: str(int(round(float(x))) * 3)),
        )
    )
    triple_agent.enable_message(ReduceTool, use=False, handle=True)
    triple_task = lr.Task(triple_agent, single_round=True, interactive=False)

    class ReducerAgent(lr.ChatAgent):
        def reduce_tool(self, msg: ReduceTool) -> DoneTool:
            return DoneTool(content=str(msg.handle()))

    reducer_agent = ReducerAgent(lr.ChatAgentConfig(name="Reducer"))
    reducer_agent.enable_message(ReduceTool, use=False, handle=True)

    reducer_task = lr.Task(reducer_agent, single_round=False, interactive=False)

    task.add_sub_task([triple_task, reducer_task, even_task])

    # 1200 -> 120 -> 12 -> 6 -> 3 -> done
    result = task[float].run(1200, turns=60)

    assert result == 3


@pytest.mark.asyncio
@pytest.mark.parametrize("use_functions_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True, False])
async def test_orch_tools_async(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
):
    """
    Test multiple orchestration tools in a 3-agent setting:
    PassTool use by agent,
    ForwardTool use by agent, LLM,
    DoneTool use by agent, LLM
    """

    set_global(test_settings)
    # these orch tools are enabled for HANDLING by default in any ChatAgent,
    # via the ChatAgentConfig.enable_orchestration_tool_handling = True flag.
    # But if we need to enable the LLM to generate these, we need to explicitly
    # enable these, as we see for some of the tools below.

    DoneTool = lr.agent.tools.orchestration.DoneTool
    ForwardTool = lr.agent.tools.orchestration.ForwardTool
    PassTool = lr.agent.tools.orchestration.PassTool

    done_tool_name = DoneTool.default_value("request")
    forward_tool_name = ForwardTool.default_value("request")

    class ReduceTool(lr.ToolMessage):
        purpose = "to remove last zero from a number ending in 0"
        request = "reduce_tool"
        number: int

        def handle(self) -> int:
            return int(self.number / 10)

    reduce_tool_name = ReduceTool.default_value("request")

    class TestAgent(lr.ChatAgent):
        def reduce_tool(self, msg: ReduceTool) -> PassTool:
            # validate and pass on
            return PassTool()

    agent = TestAgent(
        lr.ChatAgentConfig(
            name="Test",
            use_functions_api=use_functions_api,
            use_tools_api=use_tools_api,
            use_tools=not use_functions_api,
            system_message=f"""
            Whenever you receive a number, process it like this:
            - if the number ENDS in 0, use the TOOL: {reduce_tool_name} 
                to reduce it, and the Reducer will return the result to you,
                and you must CONTINUE processing it using these same rules.
            - else if number is EVEN, FORWARD it to the "EvenHandler" agent,
                    using the `{forward_tool_name}` TOOL; the EvenHandler will 
                    return the result of this TOOL, and you CONTINUE processing
                    it using these same rules.
            - else if number is ODD, use the {done_tool_name} to indicate you are 
            finished,
                along with the number as is in the `content` field.
            """,
        )
    )
    # test DoneTool in llm_response
    agent.enable_message(DoneTool, use=True, handle=True)
    agent.enable_message(ForwardTool, use=True, handle=True)
    agent.enable_message(ReduceTool, use=True, handle=True)
    task = lr.Task(agent, interactive=False)

    even_agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="EvenHandler",
            llm=MockLMConfig(response_fn=lambda x: str(int(round(float(x))) / 2)),
        )
    )
    even_task = lr.Task(even_agent, single_round=True, interactive=False)

    # distracting agent that should not handle any msgs
    class TriplerAgent(lr.ChatAgent):
        def reduce_tool(self, msg: ReduceTool) -> None:
            # validate and forward to Reducer
            return ForwardTool(agent="Reducer")

    triple_agent = TriplerAgent(
        lr.ChatAgentConfig(
            name="Tripler",
            llm=MockLMConfig(response_fn=lambda x: str(int(round(float(x))) * 3)),
        )
    )
    triple_agent.enable_message(ReduceTool, use=False, handle=True)
    triple_task = lr.Task(triple_agent, single_round=True, interactive=False)

    class ReducerAgent(lr.ChatAgent):
        def reduce_tool(self, msg: ReduceTool) -> DoneTool:
            return DoneTool(content=str(msg.handle()))

    reducer_agent = ReducerAgent(lr.ChatAgentConfig(name="Reducer"))
    reducer_agent.enable_message(ReduceTool, use=False, handle=True)

    reducer_task = lr.Task(reducer_agent, single_round=False, interactive=False)

    task.add_sub_task([triple_task, reducer_task, even_task])

    # 1200 -> 120 -> 12 -> 6 -> 3 -> done
    result = await task[float].run_async(1200, turns=60)

    assert result == 3


@pytest.mark.parametrize("use_functions_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [False, True])
def test_send_tools(
    test_settings: Settings,
    use_functions_api: bool,
    use_tools_api: bool,
):

    set_global(test_settings)

    SendTool = lr.agent.tools.orchestration.SendTool
    AgentSendTool = lr.agent.tools.orchestration.AgentSendTool
    DoneTool = lr.agent.tools.orchestration.DoneTool
    AgentDoneTool = lr.agent.tools.orchestration.AgentDoneTool

    send_tool_name = SendTool.default_value("request")
    done_tool_name = DoneTool.default_value("request")

    class ThreeTool(lr.ToolMessage):
        purpose = "to handle a <number> that is a MULTIPLE of 3"
        request = "three_tool"
        number: int

    class SubThreeTool(lr.ToolMessage):
        purpose = "to subtract 3 from a number, and if result is zero, add 1 again"
        request = "sub_three_tool"
        number: int

        def handle(self) -> int:
            ans = self.number - 3
            final = ans if ans != 0 else 1
            return AgentDoneTool(content=str(final))

    three_tool_name = ThreeTool.default_value("request")

    class ProcessorAgent(lr.ChatAgent):

        def three_tool(self, msg: ThreeTool) -> AgentSendTool:
            # validate and pass on
            return AgentSendTool(
                to="ThreeHandler",
                tools=[SubThreeTool(number=msg.number)],
            )

    processor = ProcessorAgent(
        lr.ChatAgentConfig(
            name="Processor",
            use_functions_api=use_functions_api,
            use_tools_api=use_tools_api,
            use_tools=not use_functions_api,
            system_message=f"""
            Your task is to HANDLE an incoming number OR a tool-result, 
            EXACTLY in the FALLBACK order below.
            
            - if number or result is > 0 AND a multiple of 10, send it to "ZeroHandler" 
                Agent, using the TOOL: `{send_tool_name}`.
            - ELSE if number or result is a multiple of 5, send it to "FiveHandler" 
                Agent, 
                using the TOOL: `{send_tool_name}`.
            - ELSE if the number or result is a multiple of 3, use the TOOL: 
              `{three_tool_name}` to process it,
            - OTHERWISE, use the TOOL: `{done_tool_name}` to indicate you are finished,
                with `content` field set to the received number.
            """,
        )
    )
    processor_task = lr.Task(processor, interactive=False)
    processor.enable_message(SendTool, use=True, handle=True)
    processor.enable_message(ThreeTool, use=True, handle=True)
    processor.enable_message(DoneTool, use=True, handle=True)

    five_agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="FiveHandler",
            llm=MockLMConfig(
                response_fn=lambda x: (
                    f"""
                    result is {int(x)//5}, apply the number-handling rules to 
                    decide what to do next
                    """
                ),
            ),
        )
    )
    five_task = lr.Task(five_agent, single_round=True, interactive=False)

    zero_agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="ZeroHandler",
            llm=MockLMConfig(
                response_fn=lambda x: (
                    f"""
                 result is {int(x)//10}, apply the number-handling rules to
                 decide what to do next
                 """
                ),
            ),
        )
    )
    zero_task = lr.Task(zero_agent, single_round=True, interactive=False)

    three_agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="ThreeHandler",
            llm=None,
        )
    )
    three_agent.enable_message(SubThreeTool, use=False, handle=True)
    three_task = lr.Task(three_agent, interactive=False)

    processor_task.add_sub_task([five_task, zero_task, three_task])

    result = processor_task[int].run(180, turns=20)
    # 180 -> 18 -> 15 -> 3 -> 1 -> done
    assert result == 1

    result = processor_task[int].run(250, turns=20)
    # 250 -> 25 -> 5 -> 1 -> done
    assert result == 1
</file>

<file path="tests/main/test_url_loader.py">
import pytest

from langroid.parsing.url_loader import (
    ExaCrawlerConfig,
    FirecrawlConfig,
    TrafilaturaConfig,
    URLLoader,
)

urls = [
    "https://pytorch.org",
    "https://arxiv.org/pdf/1706.03762",
]


@pytest.mark.xfail(
    condition=lambda crawler_config=None: isinstance(crawler_config, FirecrawlConfig),
    reason="Firecrawl may fail due to timeouts",
    run=True,
    strict=False,
)
@pytest.mark.parametrize(
    "crawler_config",
    [
        TrafilaturaConfig(),
        ExaCrawlerConfig(),
        FirecrawlConfig(timeout=60000),
    ],
)
def test_crawler(crawler_config):
    loader = URLLoader(urls=urls, crawler_config=crawler_config)

    docs = loader.load()

    # there are likely some chunked docs among these,
    # so we expect at least as many docs as urls
    assert len(docs) >= len(urls)
    for doc in docs:
        assert len(doc.content) > 0
</file>

<file path="tests/main/test_vector_stores.py">
import json
from types import SimpleNamespace
from typing import List

import pytest
from dotenv import load_dotenv

from langroid.embedding_models.models import (
    OpenAIEmbeddingsConfig,
)
from langroid.mytypes import DocMetaData, Document
from langroid.parsing.parser import Parser, ParsingConfig, Splitter
from langroid.utils.system import rmdir
from langroid.vector_store.base import VectorStore
from langroid.vector_store.lancedb import LanceDB, LanceDBConfig
from langroid.vector_store.meilisearch import MeiliSearch, MeiliSearchConfig
from langroid.vector_store.pineconedb import PineconeDB, PineconeDBConfig
from langroid.vector_store.postgres import PostgresDB, PostgresDBConfig
from langroid.vector_store.qdrantdb import QdrantDB, QdrantDBConfig
from langroid.vector_store.weaviatedb import WeaviateDB, WeaviateDBConfig

load_dotenv()
embed_cfg = OpenAIEmbeddingsConfig(
    model_type="openai",
)

phrases = SimpleNamespace(
    HELLO="hello",
    HI_THERE="hi there",
    CANADA="people living in Canada",
    NOT_CANADA="people not living in Canada",
    OVER_40="people over 40",
    UNDER_40="people under 40",
    FRANCE="what is the capital of France?",
    BELGIUM="which city is Belgium's capital?",
)


class MyDocMetaData(DocMetaData):
    id: str


class MyDoc(Document):
    content: str
    metadata: MyDocMetaData


stored_docs = [
    MyDoc(content=d, metadata=MyDocMetaData(id=str(i)))
    for i, d in enumerate(vars(phrases).values())
]


@pytest.fixture(scope="function")
def vecdb(request) -> VectorStore:
    if request.param == "qdrant_local":
        qd_dir = ":memory:"
        qd_cfg = QdrantDBConfig(
            cloud=False,
            collection_name="test-" + embed_cfg.model_type,
            storage_path=qd_dir,
            embedding=embed_cfg,
        )
        qd = QdrantDB(qd_cfg)
        qd.add_documents(stored_docs)
        yield qd
        return

    if request.param == "qdrant_cloud":
        qd_dir = ".qdrant/cloud/" + embed_cfg.model_type
        qd_cfg_cloud = QdrantDBConfig(
            cloud=True,
            collection_name="test-" + embed_cfg.model_type,
            storage_path=qd_dir,
            embedding=embed_cfg,
        )
        qd_cloud = QdrantDB(qd_cfg_cloud)
        qd_cloud.add_documents(stored_docs)
        yield qd_cloud
        qd_cloud.delete_collection(collection_name=qd_cfg_cloud.collection_name)
        return
    if request.param == "weaviate_cloud":
        wv_cfg_cloud = WeaviateDBConfig(
            collection_name="test_" + embed_cfg.model_type,
            embedding=embed_cfg,
            cloud=True,
        )
        weaviate_cloud = WeaviateDB(wv_cfg_cloud)
        weaviate_cloud.add_documents(stored_docs)
        yield weaviate_cloud
        weaviate_cloud.delete_collection(collection_name=wv_cfg_cloud.collection_name)
        return
    if request.param == "weaviate_local":
        wv_dir = ".weaviate/" + embed_cfg.model_type
        rmdir(wv_dir)

        wv_cfg_local = WeaviateDBConfig(
            collection_name="test_" + embed_cfg.model_type,
            embedding=embed_cfg,
            cloud=False,
            docker=False,
            storage_path=wv_dir,
        )
        weaviate_local = WeaviateDB(wv_cfg_local)
        weaviate_local.add_documents(stored_docs)
        yield weaviate_local
        weaviate_local.delete_collection(collection_name=wv_cfg_local.collection_name)
        rmdir(wv_dir)
        return
    if request.param == "weaviate_docker":
        wv_cfg_docker = WeaviateDBConfig(
            collection_name="test_" + embed_cfg.model_type,
            embedding=embed_cfg,
            docker=True,
        )
        weaviate_docker = WeaviateDB(wv_cfg_docker)
        weaviate_docker.add_documents(stored_docs)
        yield weaviate_docker
        weaviate_docker.delete_collection(collection_name=wv_cfg_docker.collection_name)
        return

    if request.param == "qdrant_hybrid_cloud":
        qd_dir = ".qdrant/cloud/" + embed_cfg.model_type
        qd_cfg_cloud = QdrantDBConfig(
            cloud=True,
            collection_name="test-" + embed_cfg.model_type,
            replace_collection=True,
            storage_path=qd_dir,
            embedding=embed_cfg,
            use_sparse_embeddings=True,
            sparse_embedding_model="naver/splade-v3-distilbert",
        )
        qd_cloud = QdrantDB(qd_cfg_cloud)
        qd_cloud.add_documents(stored_docs)
        yield qd_cloud
        qd_cloud.delete_collection(collection_name=qd_cfg_cloud.collection_name)
        return

    if request.param == "chroma":
        try:
            from langroid.vector_store.chromadb import ChromaDB, ChromaDBConfig
        except ImportError:
            pytest.skip("Chroma not installed")
            return
        cd_dir = ".chroma/" + embed_cfg.model_type
        rmdir(cd_dir)
        cd_cfg = ChromaDBConfig(
            collection_name="test-" + embed_cfg.model_type,
            storage_path=cd_dir,
            embedding=embed_cfg,
        )
        cd = ChromaDB(cd_cfg)
        cd.add_documents(stored_docs)
        yield cd
        rmdir(cd_dir)
        return

    if request.param == "postgres":
        pg_cfg = PostgresDBConfig(
            collection_name="test_" + embed_cfg.model_type,
            embedding=embed_cfg,
            cloud=False,
            replace_collection=True,
        )
        pg = PostgresDB(pg_cfg)
        pg.add_documents(stored_docs)
        yield pg
        pg.delete_collection(collection_name=pg_cfg.collection_name)
        return

    if request.param == "meilisearch":
        ms_cfg = MeiliSearchConfig(
            collection_name="test-meilisearch",
        )
        ms = MeiliSearch(ms_cfg)
        ms.add_documents(stored_docs)
        yield ms
        ms.delete_collection(collection_name=ms_cfg.collection_name)
        return

    if request.param == "lancedb":
        ldb_dir = ".lancedb/data/" + embed_cfg.model_type
        rmdir(ldb_dir)
        ldb_cfg = LanceDBConfig(
            cloud=False,
            collection_name="test-" + embed_cfg.model_type,
            storage_path=ldb_dir,
            embedding=embed_cfg,
            # document_class=MyDoc,  # IMPORTANT, to ensure table has full schema!
        )
        ldb = LanceDB(ldb_cfg)
        ldb.add_documents(stored_docs)
        yield ldb
        rmdir(ldb_dir)
        return

    if request.param == "pinecone_serverless":
        cfg = PineconeDBConfig(
            collection_name="pinecone-serverless-test",
            embedding=embed_cfg,
        )
        pinecone_serverless = PineconeDB(config=cfg)
        pinecone_serverless.add_documents(stored_docs)
        yield pinecone_serverless
        pinecone_serverless.delete_collection(collection_name=cfg.collection_name)
        return


@pytest.mark.parametrize(
    "query,results,exceptions",
    [
        ("which city is Belgium's capital?", [phrases.BELGIUM], ["meilisearch"]),
        ("capital of France", [phrases.FRANCE], ["meilisearch"]),
        ("hello", [phrases.HELLO], ["meilisearch"]),
        ("hi there", [phrases.HI_THERE], ["meilisearch"]),
        ("men and women over 40", [phrases.OVER_40], ["meilisearch"]),
        ("people aged less than 40", [phrases.UNDER_40], ["meilisearch"]),
        ("Canadian residents", [phrases.CANADA], ["meilisearch"]),
        ("people outside Canada", [phrases.NOT_CANADA], ["meilisearch"]),
    ],
)
@pytest.mark.parametrize(
    "vecdb",
    [
        "weaviate_docker",
        "postgres",
        "qdrant_cloud",
        "qdrant_local",
        pytest.param("pinecone_serverless", marks=pytest.mark.skip),
        "lancedb",
        "chroma",
    ],
    indirect=True,
)
def test_vector_stores_search(
    vecdb, query: str, results: List[str], exceptions: List[str]
):
    if vecdb.__class__.__name__.lower() in exceptions:
        # we don't expect some of these to work,
        # e.g. MeiliSearch is a text search engine, not a vector store
        return
    assert vecdb.config.collection_name in vecdb.list_collections(True)
    docs_and_scores = vecdb.similar_texts_with_scores(query, k=len(vars(phrases)))
    # first doc should be best match
    # scores are cosine similarities, so high means close
    matching_docs = [doc.content for doc, score in docs_and_scores if score > 0.7]
    assert set(results).issubset(set(matching_docs))


@pytest.mark.xfail(
    reason="QdrantDB may fail saying `not ready`",
    run=True,
    strict=False,
)
@pytest.mark.parametrize(
    "query,results,exceptions",
    [
        ("which city is Belgium's capital?", [phrases.BELGIUM], ["meilisearch"]),
        ("capital of France", [phrases.FRANCE], ["meilisearch"]),
        ("hello", [phrases.HELLO], ["meilisearch"]),
        ("hi there", [phrases.HI_THERE], ["meilisearch"]),
        ("men and women over 40", [phrases.OVER_40], ["meilisearch"]),
        ("people aged less than 40", [phrases.UNDER_40], ["meilisearch"]),
        ("Canadian residents", [phrases.CANADA], ["meilisearch"]),
        ("people outside Canada", [phrases.NOT_CANADA], ["meilisearch"]),
    ],
)
@pytest.mark.parametrize(
    "vecdb",
    ["qdrant_hybrid_cloud"],
    indirect=True,
)
def test_hybrid_vector_search(
    vecdb, query: str, results: List[str], exceptions: List[str]
):
    if vecdb.__class__.__name__.lower() in exceptions:
        return
    docs_and_scores = vecdb.similar_texts_with_scores(query, k=len(vars(phrases)))
    # first doc should be best match
    # scores are cosine similarities, so high means close
    matching_docs = [doc.content for doc, score in docs_and_scores if score > 0.7]
    assert set(results).issubset(set(matching_docs))


@pytest.mark.parametrize(
    "vecdb",
    [
        "postgres",
        "lancedb",
        "chroma",
        "qdrant_local",
        "qdrant_cloud",
        pytest.param("pinecone_serverless", marks=pytest.mark.skip),
        "weaviate_docker",
    ],
    indirect=True,
)
def test_vector_stores_access(vecdb):
    assert vecdb is not None

    # test that we can ingest docs that are created
    # via subclass of Document and  DocMetaData.
    class MyDocMeta(DocMetaData):
        category: str  # an extra field

    class MyDocument(Document):
        content: str
        metadata: MyDocMeta

    vecdb.config.document_class = MyDocument
    vecdb.config.metadata_class = MyDocMeta
    coll_name = vecdb.config.collection_name
    assert coll_name is not None

    vecdb.delete_collection(collection_name=coll_name)
    # LanceDB.create_collection() does nothing, since we can't create a table
    # without a schema or data.
    vecdb.create_collection(collection_name=coll_name)

    # create random string of 10 arbitrary characters, not necessarily ascii
    import random

    # Generate a random string of 10 characters
    ingested_docs = [
        Document(
            content=random.choice(["cow", "goat", "mouse"]),
            metadata=MyDocMeta(id=str(i), category=random.choice(["a", "b"])),
        )
        for i in range(20)
    ]

    vecdb.add_documents(ingested_docs)

    # test get ALL docs
    all_docs = vecdb.get_all_documents()
    ids = [doc.id() for doc in all_docs]
    assert len(set(ids)) == len(ids)
    assert len(all_docs) == len(ingested_docs)

    # test get docs by ids
    docs = vecdb.get_documents_by_ids(ids)
    assert len(docs) == len(ingested_docs)

    # test similarity search
    docs_and_scores = vecdb.similar_texts_with_scores("cow", k=1)
    assert len(docs_and_scores) == 1
    assert docs_and_scores[0][0].content == "cow"

    # test collections: create, list, clear
    if isinstance(vecdb, PineconeDB):
        # pinecone only allows lowercase alphanumeric with "-" characters
        coll_names = [f"test-junk-{i}" for i in range(3)]
    elif isinstance(vecdb, WeaviateDB):
        # Weaviate enforces capitalized collection names;
        # verifying adherence.

        coll_names = [f"Test_junk_{i}" for i in range(3)]
        for coll in coll_names:
            vecdb.create_collection(collection_name=coll)
        n_colls = len(
            [c for c in vecdb.list_collections(empty=True) if c.startswith("Test_junk")]
        )
        n_dels = vecdb.clear_all_collections(really=True, prefix="Test_junk")
    else:
        coll_names = [f"test_junk_{i}" for i in range(3)]
        for coll in coll_names:
            vecdb.create_collection(collection_name=coll)
        n_colls = len(
            [c for c in vecdb.list_collections(empty=True) if c.startswith("test_junk")]
        )
        n_dels = vecdb.clear_all_collections(really=True, prefix="test_junk")

    # LanceDB.create_collection() does nothing, since we can't create a table
    # without a schema or data.
    assert n_colls == n_dels == (0 if isinstance(vecdb, LanceDB) else len(coll_names))
    vecdb.set_collection(coll_name, replace=True)
    assert vecdb.config.collection_name == coll_name
    assert vecdb.get_all_documents() == []


@pytest.mark.parametrize(
    "vecdb",
    [
        "postgres",
        "lancedb",
        "chroma",
        "qdrant_cloud",
        "qdrant_local",
        pytest.param("pinecone_serverless", marks=pytest.mark.skip),
        "weaviate_docker",
    ],
    indirect=True,
)
def test_vector_stores_context_window(vecdb):
    """Test whether retrieving context-window around matches is working."""

    phrases = SimpleNamespace(
        CATS="Cats are quiet and clean.",
        DOGS="Dogs are noisy and messy.",
        GIRAFFES="Giraffes are tall and quiet.",
        ELEPHANTS="Elephants are big and noisy.",
        OWLS="Owls are quiet and nocturnal.",
        BATS="Bats are nocturnal and noisy.",
    )
    text = "\n\n".join(vars(phrases).values())
    doc = Document(content=text, metadata=DocMetaData(id="0"))
    cfg = ParsingConfig(
        splitter=Splitter.SIMPLE,
        n_neighbor_ids=2,
        chunk_size=1,
        max_chunks=20,
        min_chunk_chars=3,
        discard_chunk_chars=1,
    )

    parser = Parser(cfg)
    splits = parser.split([doc])

    vecdb.create_collection(collection_name="testcw", replace=True)
    vecdb.add_documents(splits)

    # Test context window retrieval
    docs_scores = vecdb.similar_texts_with_scores("What are Giraffes like?", k=1)
    docs_scores = vecdb.add_context_window(docs_scores, neighbors=2)

    assert len(docs_scores) == 1
    giraffes, score = docs_scores[0]
    assert all(
        p in giraffes.content
        for p in [
            phrases.CATS,
            phrases.DOGS,
            phrases.GIRAFFES,
            phrases.ELEPHANTS,
            phrases.OWLS,
        ]
    )
    # check they are in the right sequence
    indices = [
        giraffes.content.index(p)
        for p in ["Cats", "Dogs", "Giraffes", "Elephants", "Owls"]
    ]

    assert indices == sorted(indices)


@pytest.mark.parametrize(
    "vecdb",
    [
        "postgres",
        "chroma",
        "lancedb",
        "qdrant_cloud",
        "qdrant_local",
        pytest.param("pinecone_serverless", marks=pytest.mark.skip),
        "weaviate_docker",
    ],
    indirect=True,
)
def test_vector_stores_overlapping_matches(vecdb):
    """Test that overlapping windows are handled correctly."""

    # The windows around the first two giraffe matches should overlap.
    # The third giraffe match should be in a separate window.
    phrases = SimpleNamespace(
        CATS="Cats are quiet and clean.",
        DOGS="Dogs are noisy and messy.",
        GIRAFFES="Giraffes are tall and quiet.",
        ELEPHANTS="Elephants are big and noisy.",
        OWLS="Owls are quiet and nocturnal.",
        GIRAFFES1="Giraffes eat a lot of leaves.",
        COWS="Cows are quiet and gentle.",
        BULLS="Bulls are noisy and aggressive.",
        TIGERS="Tigers are big and noisy.",
        LIONS="Lions are nocturnal and noisy.",
        CHICKENS="Chickens are quiet and gentle.",
        ROOSTERS="Roosters are noisy and aggressive.",
        GIRAFFES3="Giraffes are really strange animals.",
        MICE="Mice are puny and gentle.",
        RATS="Rats are noisy and destructive.",
    )
    text = "\n\n".join(vars(phrases).values())
    doc = Document(content=text, metadata=DocMetaData(id="0"))

    cfg = ParsingConfig(
        splitter=Splitter.SIMPLE,
        n_neighbor_ids=2,
        chunk_size=1,
        max_chunks=20,
        min_chunk_chars=3,
        discard_chunk_chars=1,
    )

    parser = Parser(cfg)
    splits = parser.split([doc])

    vecdb.create_collection(collection_name="testcw", replace=True)
    vecdb.add_documents(splits)

    # Test context window retrieval
    docs_scores = vecdb.similar_texts_with_scores("What are Giraffes like?", k=3)
    # We expect to retrieve a window of -2, +2 around each of the three Giraffe matches.
    # The first two windows will overlap, so they form a connected component,
    # and we topological-sort and order the chunks in these windows, resulting in a
    # single window. The third Giraffe-match context window will not overlap with
    # the other two, so we will have a total of 2 final docs_scores components.
    docs_scores = vecdb.add_context_window(docs_scores, neighbors=2)

    assert len(docs_scores) == 2
    # verify no overlap in d.metadata.window_ids for d in docs
    all_window_ids = [id for d, _ in docs_scores for id in d.metadata.window_ids]
    assert len(all_window_ids) == len(set(all_window_ids))

    # verify giraffe occurs in each /match
    assert all("Giraffes" in d.content for d, _ in docs_scores)

    # verify correct sequence of chunks in each match
    sentences = vars(phrases).values()
    for d, _ in docs_scores:
        content = d.content
        indices = [content.find(p) for p in sentences]
        indices = [i for i in indices if i >= 0]
        assert indices == sorted(indices)


def test_lance_metadata():
    """
    Test that adding documents with extra fields in metadata
    (that are absent in the metadata of LanceDBConfig.document_class)
    works as expected, i.e. the internal schemas and config.document_class
    are dynamically updated as expected.
    """

    ldb_dir = ".lancedb/data/test"
    rmdir(ldb_dir)
    DEFAULT_COLLECTION = "test-dummy"
    ACTUAL_COLLECTION = "test-metadata"
    ldb_cfg = LanceDBConfig(
        cloud=False,
        collection_name=DEFAULT_COLLECTION,
        storage_path=ldb_dir,
        embedding=embed_cfg,
        document_class=Document,
    )
    vecdb = LanceDB(ldb_cfg)
    vecdb.set_collection(collection_name=ACTUAL_COLLECTION, replace=True)
    doc = Document(
        content="xyz",
        metadata=DocMetaData(
            id="0",
            source="wiki",
            category="other",  # this is an extra field not defined in DocMetaData
        ),
    )
    # since we're adding a document whose metadata has an extra field,
    # the config.document_class is updated to reflect the new schema.
    # and the schema is updated to accommodate the extra field,
    vecdb.add_documents([doc])

    # re-init the vecdb like above
    vecdb = LanceDB(ldb_cfg)

    # set to the SAME collection, so we don't create a new one
    vecdb.set_collection(collection_name=ACTUAL_COLLECTION, replace=False)

    # adding a new doc to an existing collection, it has a structure
    # consistent with the previous doc added to this collection,
    # BUT NOT consistent with the DEFAULT_COLLECTION.
    # We want to check that this goes well.
    doc = Document(
        content="abc",
        metadata=DocMetaData(
            category="main",  # this is an extra field not defined in DocMetaData
            id="1",
            source="wiki",
        ),
    )
    vecdb.add_documents([doc])

    doc = Document(
        content="abc",
        metadata=DocMetaData(
            id="2",
            category="rumor",  # this is an extra field not defined in DocMetaData
            source="web",
        ),
    )
    vecdb.add_documents([doc])

    all_docs = vecdb.get_all_documents()
    assert len(all_docs) == 3


@pytest.mark.parametrize(
    "vecdb",
    [
        "postgres",
    ],
    indirect=True,
)
def test_postgres_where_clause(vecdb: PostgresDB):
    """Test the where clause in get_all_documents,get_similar_texts in PostgresDB"""
    vecdb.create_collection(
        collection_name="test_get_all_documents_where", replace=True
    )
    docs = [
        Document(
            content="xyz",
            metadata=DocMetaData(
                id=str(i),
                source="wiki" if i % 2 == 0 else "web",
                category="other" if i < 3 else "news",
            ),
        )
        for i in range(5)
    ]
    vecdb.add_documents(docs)

    all_docs = vecdb.get_all_documents(where=json.dumps({"category": "other"}))
    assert len(all_docs) == 3

    all_docs = vecdb.get_all_documents(where=json.dumps({"source": "web"}))
    assert len(all_docs) == 2

    all_docs = vecdb.get_all_documents(
        where=json.dumps({"category": "other", "source": "web"})
    )
    assert len(all_docs) == 1

    all_docs = vecdb.get_all_documents(where=json.dumps({"category": "news"}))
    assert len(all_docs) == 2

    all_docs = vecdb.get_all_documents(where=json.dumps({"source": "wiki"}))
    assert len(all_docs) == 3

    vecdb.delete_collection("test_get_all_documents_where")
</file>

<file path="tests/main/test_web_search_tools.py">
"""
NOTE: running this test requires setting the GOOGLE_API_KEY and GOOGLE_CSE_ID
environment variables in your `.env` file, as explained in the
[README](https://github.com/langroid/langroid#gear-installation-and-setup).

"""

import pytest

import langroid as lr
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.tools.duckduckgo_search_tool import DuckduckgoSearchTool
from langroid.agent.tools.exa_search_tool import ExaSearchTool
from langroid.agent.tools.google_search_tool import GoogleSearchTool
from langroid.agent.tools.tavily_search_tool import TavilySearchTool
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.parsing.parser import ParsingConfig
from langroid.prompts.prompts_config import PromptsConfig
from langroid.utils.configuration import Settings, set_global

cfg = ChatAgentConfig(
    name="test-langroid",
    vecdb=None,
    llm=OpenAIGPTConfig(
        type="openai",
        cache_config=RedisCacheConfig(fake=False),
    ),
    parsing=ParsingConfig(),
    prompts=PromptsConfig(),
    use_functions_api=False,
    use_tools=True,
)
agent = ChatAgent(cfg)


@pytest.mark.parametrize(
    "search_tool_cls",
    [ExaSearchTool, TavilySearchTool, GoogleSearchTool, DuckduckgoSearchTool],
)
@pytest.mark.parametrize("use_functions_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True, False])
def test_agent_web_search_tool(
    test_settings: Settings,
    search_tool_cls: lr.ToolMessage,
    use_functions_api: bool,
    use_tools_api: bool,
):
    """
    Test whether LLM is able to GENERATE message (tool) in required format, AND the
    agent handles the message correctly.
    Args:
        test_settings: test settings from conftest.py
        use_functions_api: whether to use LLM's functions api or not
            (i.e. use the langroid ToolMessage tools instead).
    """
    set_global(test_settings)
    agent = ChatAgent(cfg)
    agent.config.use_functions_api = use_functions_api
    agent.config.use_tools = not use_functions_api
    agent.config.use_tools_api = use_tools_api
    agent.enable_message(search_tool_cls)

    llm_msg = agent.llm_response_forget(
        "Find 3 results on the internet about the LK-99 superconducting material."
    )
    assert isinstance(agent.get_tool_messages(llm_msg)[0], search_tool_cls)

    try:
        agent_result = agent.handle_message(llm_msg).content
    except Exception as e:
        pytest.skip(f"Skipping test: {e}")
    assert len(agent_result.split("\n\n")) == 3
    assert all(
        "lk-99" in x or "supercond" in x for x in agent_result.lower().split("\n\n")
    )
</file>

<file path="tests/main/test_xml_tool_message.py">
from typing import Dict, List, Tuple

import pytest

import langroid as lr
from langroid.agent.tools.orchestration import ResultTool
from langroid.agent.xml_tool_message import XMLToolMessage
from langroid.exceptions import XMLException
from langroid.pydantic_v1 import BaseModel, Field
from langroid.utils.configuration import Settings, set_global


class CodeTool(XMLToolMessage):
    request: str = "code_tool"
    purpose: str = "Tool for writing <code> with a certain <version> to a <filepath>"

    filepath: str = Field(..., description="The path to the file to write the code to")
    version: int = Field(..., description="The version number of the code")
    # NOTE: we are setting a custom attrib verbatim to True to indicate that
    # parsing/formatting should be verbatim, and to ensure that LLM is instructed
    # to enclose the content in a CDATA section
    code: str = Field(..., description="The code to write to the file", verbatim=True)

    @classmethod
    def examples(cls) -> List[XMLToolMessage | Tuple[str, XMLToolMessage]]:
        return [
            (
                "I want to create a new Python file with a simple print statement",
                cls(
                    filepath="/path/to/new_file.py",
                    version=1,
                    code='print("Hello from CodeTool!")',
                ),
            ),
            cls(
                filepath="/path/to/existing_file.py",
                version=2,
                code='def greet(name):\n    print(f"Hello, {name}!")\n\ngreet("World")',
            ),
        ]

    def handle(self) -> ResultTool:
        return ResultTool(
            filepath=self.filepath,
            version=self.version,
            code=self.code,
        )


def test_find_candidates():
    root_tag = CodeTool.Config.root_element
    text = f"""
    Some text before
    <{root_tag}>
        <request>code_tool</request>
        <filepath>/path/to/file.py</filepath>
        <version>1</version>
        <code><![CDATA[
print("Hello, World!")
]]></code>
    </{root_tag}>
    Some text in between
    <{root_tag}>
        <request>code_tool</request>
        <filepath>/path/to/another.py</filepath>
        <version>2</version>
        <code><![CDATA[def greet(): 
    print("Hi!")]]></code>
    </{root_tag}>
    Some text after
    """
    candidates = CodeTool.find_candidates(text)
    assert len(candidates) == 2
    for candidate in candidates:
        assert isinstance(CodeTool.parse(candidate), CodeTool)


def test_find_candidates_missing_closing_tag():
    root_tag = CodeTool.Config.root_element
    text = f"""
    Some text before
    <{root_tag}>
        <request>code_tool</request>
        <filepath>/path/to/file.py</filepath>
        <version>1</version>
        <code><![CDATA[print("Hello, World!")]]></code>
    </{root_tag}>
    Some text in between
    <{root_tag}>
        <request>code_tool</request>
        <filepath>/path/to/another.py</filepath>
        <version>2</version>
        <code><![CDATA[def greet(): 
    print("Hi!")]]></code>
    Some text after
    """
    candidates = CodeTool.find_candidates(text)
    assert len(candidates) == 2
    for candidate in candidates:
        assert isinstance(CodeTool.parse(candidate), CodeTool)


@pytest.mark.parametrize(
    "input_text,expected",
    [
        ("<tool><field1>data</field1></tool>", ["<tool><field1>data</field1></tool>"]),
        (  # missing open tag
            "Hello <field1>data</field1></tool>",
            ["<tool><field1>data</field1></tool>"],
        ),
        (  # proper open/close tags
            "<tool>a</tool> stuff <tool>b</tool>",
            ["<tool>a</tool>", "<tool>b</tool>"],
        ),
        ("just plain text", []),
        (
            # allow missing closing tag for last element
            "<tool><field1>data</field1>",
            ["<tool><field1>data</field1></tool>"],
        ),
    ],
)
def test_find_candidates_tolerant(input_text, expected):
    # check that missing opening tag is tolerated, and other cases
    class TestXMLTool(XMLToolMessage):
        field1: str
        field2: str

    assert TestXMLTool.find_candidates(input_text) == expected


def test_parse():
    root_tag = CodeTool.Config.root_element
    xml_string = f"""
    <{root_tag}>
        <request>code_tool</request>
        <filepath>/path/to/file.py</filepath>
        <version>1</version>
        <code><![CDATA[
```
print("Hello, World!")
```
]]></code>
    </{root_tag}>
    """
    code_tool = CodeTool.parse(xml_string)
    assert isinstance(code_tool, CodeTool)
    assert code_tool.request == "code_tool"
    assert code_tool.filepath == "/path/to/file.py"
    assert code_tool.version == 1
    assert code_tool.code == 'print("Hello, World!")'


def test_parse_bad_format():
    root_tag = CodeTool.Config.root_element
    # test with missing closing tag
    bad_xml_string = f"""
    <{root_tag}>
        <request>code_tool</request>
        <filepath>/path/to/file.py</filepath>
        <version>1</version>
        <code>
            print("Hello, World!")
    </{root_tag}>
    """
    with pytest.raises(XMLException):
        CodeTool.parse(bad_xml_string)

    # Test with missing required field
    incomplete_xml_string = f"""
    <{root_tag}>
        <request>code_tool</request>
        <filepath>/path/to/file.py</filepath>
        <version>1</version>
    </{root_tag}>
    """
    with pytest.raises(XMLException):
        CodeTool.parse(incomplete_xml_string)

    # Test with invalid XML structure
    invalid_xml_string = f"""
    <{root_tag}>
        <request>code_tool</request>
        <filepath>/path/to/file.py</filepath>
        <version>1</version>
        <code><![CDATA[print("Hello, World!")]]></code>
    </{root_tag}
    """
    with pytest.raises(XMLException):
        CodeTool.parse(invalid_xml_string)


def test_format():
    root_tag = CodeTool.Config.root_element
    code_tool = CodeTool(
        filepath="/path/to/file.py",
        version=1,
        code='print("Hello, World!")',
    )
    formatted = code_tool.format_example()
    assert f"<{root_tag}>" in formatted
    assert "<request>code_tool</request>" in formatted
    assert "<filepath>/path/to/file.py</filepath>" in formatted
    assert "<version>1</version>" in formatted
    assert '<code><![CDATA[print("Hello, World!")]]></code>' in formatted
    assert f"</{root_tag}>" in formatted


def test_roundtrip():
    original = CodeTool(
        filepath="/path/to/file.py",
        version=1,
        code='print("Hello, World!")',
    )
    formatted = original.format_example()
    parsed = CodeTool.parse(formatted)
    assert original.dict() == parsed.dict()


def test_tolerant_parsing():
    root_tag = CodeTool.Config.root_element
    messy_xml_string = f"""
    <{root_tag}>
        <request>
            code_tool
        </request>
        <filepath>
            /path/to/file.py
        </filepath>
        <version>
            1
        </version>
        <code><![CDATA[
def hello():
    print("Hello, World!")

hello()
        ]]></code>
    </{root_tag}>
    """
    code_tool = CodeTool.parse(messy_xml_string)

    assert isinstance(code_tool, CodeTool)
    assert code_tool.request.strip() == "code_tool"
    assert code_tool.filepath.strip() == "/path/to/file.py"
    assert code_tool.version == 1

    expected_code = """
def hello():
    print("Hello, World!")

hello()
""".strip()
    assert code_tool.code.strip() == expected_code


def test_instructions():
    instructions = CodeTool.format_instructions()
    root_tag = CodeTool.Config.root_element

    assert "Placeholders:" in instructions
    assert "FILEPATH = [value for filepath]" in instructions
    assert "VERSION = [value for version]" in instructions
    assert "CODE = [value for code]" in instructions
    assert "REQUEST = [value for request]" in instructions

    assert "Formatting example:" in instructions
    assert f"<{root_tag}>" in instructions
    assert f"</{root_tag}>" in instructions
    assert "<filepath>{FILEPATH}</filepath>" in instructions
    assert "<version>{VERSION}</version>" in instructions
    assert "<code><![CDATA[{CODE}]]></code>" in instructions
    assert "<request>{REQUEST}</request>" in instructions


def test_llm_xml_tool_message(
    test_settings: Settings,
):
    set_global(test_settings)
    code_tool_name = CodeTool.default_value("request")

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="TestAgent",
            use_functions_api=False,
            use_tools=True,
            system_message=f"""
            When asked to write Python code, 
            you must use the TOOL `{code_tool_name}` to complete this task.
            """,
        )
    )
    agent.enable_message(CodeTool)
    task = lr.Task(agent, interactive=False)[ResultTool]
    result = task.run(
        """
        Write a simple python function that takes a name as string arg, 
        and prints hello to that name.
        Write the code to the file src/mycode.py, with version number 7
        """
    )
    assert isinstance(result, ResultTool)
    assert result.filepath == "src/mycode.py"
    assert result.version == 7
    assert all(word in result.code.lower() for word in ["def", "hello", "print"])

    result = task.run(
        """
        Write a Rust function to calculate the n'th fibonacci number,
        and add a test block. Write it to the file src/fib.rs, with version number 3
        """
    )
    assert isinstance(result, ResultTool)
    assert result.filepath == "src/fib.rs"
    assert result.version == 3
    assert all(word in result.code.lower() for word in ["fn", "fibonacci", "test"])


class Address(BaseModel):
    # declare street as verbatim, to test that the formatting encloses
    # the value in a CDATA block
    street: str = Field(..., description="The street address", verbatim=True)
    city: str
    country: str


class Person(BaseModel):
    name: str
    age: int
    address: Address


class ComplexNestedXMLTool(XMLToolMessage):
    request: str = "complex_nested_tool"
    purpose: str = "To present a complex nested structure"

    person: Person
    hobbies: List[str]
    phones: Dict[str, int]
    friends: List[Person] | None = None

    @classmethod
    def examples(cls) -> List[XMLToolMessage | Tuple[str, XMLToolMessage]]:
        return [
            (
                "I want to present a person named John Doe, aged 30, "
                "living at 123 Main St, Anytown, USA, with hobbies of "
                "reading and cycling, "
                " phone numbers: home (1234567890) and work (9876543210)"
                " and two friends: "
                "   Jane Doe, aged 28, living at 456 Elm St, Somewhere, Canada, "
                "   Jack Doe, aged 32, living at 789 Oak St, Anywhere, UK",
                cls(
                    person=Person(
                        name="John Doe",
                        age=30,
                        address=Address(
                            street="123 Main St", city="Anytown", country="USA"
                        ),
                    ),
                    hobbies=["reading", "cycling"],
                    phones={"home": 1234567890, "work": 9876543210},
                    friends=[
                        Person(
                            name="Jane Doe",
                            age=28,
                            address=Address(
                                street="456 Elm St", city="Somewhere", country="Canada"
                            ),
                        ),
                        Person(
                            name="Jack Doe",
                            age=32,
                            address=Address(
                                street="789 Oak St", city="Anywhere", country="UK"
                            ),
                        ),
                    ],
                ),
            )
        ]

    def handle(self) -> ResultTool:
        return ResultTool(
            person=self.person,
            hobbies=self.hobbies,
            phones=self.phones,
            friends=self.friends,
        )


@pytest.fixture
def complex_nested_xml_tool():
    return ComplexNestedXMLTool(
        person=Person(
            name="Jane Doe",
            age=28,
            address=Address(street="456 Elm St", city="Somewhere", country="Canada"),
        ),
        hobbies=["painting", "hiking"],
        phones={"mobile": 5551234567, "work": 5559876543},
        friends=[
            Person(
                name="John Doe",
                age=30,
                address=Address(street="123 Main St", city="Anytown", country="USA"),
            ),
            Person(
                name="Jack Doe",
                age=32,
                address=Address(street="789 Oak St", city="Anywhere", country="UK"),
            ),
        ],
    )


def test_format_complex_nested(complex_nested_xml_tool: ComplexNestedXMLTool):
    complex_tool = complex_nested_xml_tool
    formatted = complex_tool.format_example()
    print(formatted)  # For debugging
    assert "<person>" in formatted
    assert "<name>Jane Doe</name>" in formatted
    assert "<age>28</age>" in formatted
    assert "<address>" in formatted
    # NOTE: street was declared as verbatim, so it should be in a CDATA section
    assert "<street><![CDATA[456 Elm St]]></street>" in formatted
    assert "<city>Somewhere</city>" in formatted
    assert "<country>Canada</country>" in formatted
    assert "<hobbies>" in formatted
    assert "<item>painting</item>" in formatted
    assert "<item>hiking</item>" in formatted
    assert "<phones>" in formatted
    assert "<mobile>5551234567</mobile>" in formatted
    assert "<work>5559876543</work>" in formatted
    assert "<friends>" in formatted
    assert "<person>" in formatted
    assert "<name>John Doe</name>" in formatted
    assert "<age>30</age>" in formatted
    assert "<name>Jack Doe</name>" in formatted
    assert "<age>32</age>" in formatted

    # Test case for absent friends field
    complex_tool_no_friends = ComplexNestedXMLTool(
        person=Person(
            name="Alice Smith",
            age=25,
            address=Address(street="789 Pine St", city="Nowhere", country="USA"),
        ),
        hobbies=["reading", "swimming"],
        phones={"home": 1234567890},
        friends=None,
    )
    formatted_no_friends = complex_tool_no_friends.format_example()
    print(formatted_no_friends)  # For debugging
    assert "<friends>" not in formatted_no_friends


def test_parse_complex_nested():
    xml_string = """
    <tool>
        <request>complex_nested_tool</request>
        <person>
            <name>John Doe</name>
            <age>30</age>
            <address>
                <street>123 Main St</street>
                <city>Anytown</city>
                <country>USA</country>
            </address>
        </person>
        <hobbies>
            <item>reading</item>
            <item>cycling</item>
        </hobbies>
        <phones>
            <home>1234567890</home>
            <work>9876543210</work>
        </phones>
    </tool>
    """
    parsed = ComplexNestedXMLTool.parse(xml_string)
    assert isinstance(parsed, ComplexNestedXMLTool)
    assert parsed.request == "complex_nested_tool"
    assert isinstance(parsed.person, Person)
    assert parsed.person.name == "John Doe"
    assert parsed.person.age == 30
    assert isinstance(parsed.person.address, Address)
    assert parsed.person.address.street == "123 Main St"
    assert parsed.person.address.city == "Anytown"
    assert parsed.person.address.country == "USA"
    assert parsed.hobbies == ["reading", "cycling"]
    assert parsed.phones == {"home": 1234567890, "work": 9876543210}


def test_instructions_complex_nested():
    instructions = ComplexNestedXMLTool.format_instructions()
    root_tag = ComplexNestedXMLTool.Config.root_element

    assert "Placeholders:" in instructions
    assert "REQUEST = [value for request]" in instructions
    assert "PERSON = [nested structure for person]" in instructions
    assert "NAME = [value for name]" in instructions
    assert "AGE = [value for age]" in instructions
    assert "ADDRESS = [nested structure for address]" in instructions
    assert "STREET = [value for street]" in instructions
    assert "CITY = [value for city]" in instructions
    assert "COUNTRY = [value for country]" in instructions
    assert "HOBBIES = [list of str for hobbies]" in instructions
    assert "PHONES = [dictionary with str keys and int values]" in instructions
    assert "FRIENDS = [list of nested structures for friends]" in instructions

    assert "Formatting example:" in instructions
    assert f"<{root_tag}>" in instructions
    assert f"</{root_tag}>" in instructions
    assert "<request>{REQUEST}</request>" in instructions
    assert "<person>" in instructions
    assert "<name>{NAME}</name>" in instructions
    assert "<age>{AGE}</age>" in instructions
    assert "<address>" in instructions
    # NOTE: street was declared as verbatim, so it should be in a CDATA section
    assert "<street><![CDATA[{STREET}]]></street>" in instructions
    assert "<city>{CITY}</city>" in instructions
    assert "<country>{COUNTRY}</country>" in instructions
    assert "</address>" in instructions
    assert "</person>" in instructions
    assert "<hobbies>" in instructions
    assert "<item>[str value]</item>" in instructions
    assert "</hobbies>" in instructions
    assert "<phones>" in instructions
    assert "<str>[int value]</str>" in instructions
    assert "</phones>" in instructions
    assert "<friends>" in instructions
    assert "<item>[Person value]</item>" in instructions
    assert "</friends>" in instructions


def test_roundtrip_complex_nested(complex_nested_xml_tool):
    original = complex_nested_xml_tool

    formatted = original.format_example()
    parsed = ComplexNestedXMLTool.parse(formatted)
    assert original.dict() == parsed.dict()

    # Additional checks for nested structures
    assert original.person.dict() == parsed.person.dict()
    assert original.person.address.dict() == parsed.person.address.dict()
    assert original.hobbies == parsed.hobbies
    assert original.phones == parsed.phones


def test_roundtrip_complex_nested_tolerant():
    # note there is no `friends` field, so this is a good test
    # to check that the formatting is not including this field in the XML.
    original = ComplexNestedXMLTool(
        person=Person(
            name="Jane Doe",
            age=28,
            address=Address(street="456 Elm St", city="Somewhere", country="Canada"),
        ),
        hobbies=["painting", "hiking"],
        phones={"mobile": 5551234567, "work": 5559876543},
    )
    formatted = original.format_example()

    # Insert harmless whitespace
    formatted_with_whitespace = (
        formatted.replace("<", " \n <").replace(">", "> \n ").replace("</", " \n </")
    )

    parsed = ComplexNestedXMLTool.parse(formatted_with_whitespace)

    assert original.dict() == parsed.dict()
    assert original.person.dict() == parsed.person.dict()
    assert original.person.address.dict() == parsed.person.address.dict()
    assert original.hobbies == parsed.hobbies
    assert original.phones == parsed.phones


def test_llm_complex_xml_tool_message(
    test_settings: Settings,
):
    set_global(test_settings)
    complex_tool_name = ComplexNestedXMLTool.default_value("request")

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="TestAgent",
            use_functions_api=False,
            use_tools=True,
            system_message=f"""
            When asked to provide information about a person,
            you must use the TOOL `{complex_tool_name}` to complete this task.
            """,
        )
    )
    agent.enable_message(ComplexNestedXMLTool)
    task = lr.Task(agent, interactive=False)[ResultTool]
    result = task.run(
        """
        Provide information about a person named Alice Johnson, aged 35,
        living at 789 Oak Ave, Springfield, USA, with hobbies of
        gardening and cooking, and phone numbers: 
        home (5551112222) and mobile (5553334444).
        Also include information about her two friends:
        1. Bob Smith, aged 40, living at 123 Maple St, Riverside, USA
        2. Carol White, aged 38, living at 456 Pine Rd, Hillside, USA
        """
    )
    assert isinstance(result, ResultTool)
    assert isinstance(result.person, Person)
    assert result.person.name == "Alice Johnson"
    assert result.person.age == 35
    assert isinstance(result.person.address, Address)
    assert result.person.address.street == "789 Oak Ave"
    assert result.person.address.city == "Springfield"
    assert result.person.address.country == "USA"
    assert set(result.hobbies) == {"gardening", "cooking"}
    assert result.phones == {"home": 5551112222, "mobile": 5553334444}
    assert isinstance(result.friends, list)
    assert len(result.friends) == 2
    assert result.friends[0].name == "Bob Smith"
    assert result.friends[0].age == 40
    assert result.friends[0].address.street == "123 Maple St"
    assert result.friends[0].address.city == "Riverside"
    assert result.friends[0].address.country == "USA"
    assert result.friends[1].name == "Carol White"
    assert result.friends[1].age == 38
    assert result.friends[1].address.street == "456 Pine Rd"
    assert result.friends[1].address.city == "Hillside"
    assert result.friends[1].address.country == "USA"


if __name__ == "__main__":
    pytest.main([__file__])
</file>

<file path="tests/conftest.py">
import logging
import os
import threading

import pytest

from langroid.cachedb.redis_cachedb import RedisCache, RedisCacheConfig
from langroid.language_models import GeminiModel, OpenAIChatModel
from langroid.utils.configuration import Settings, set_global

logger = logging.getLogger(__name__)


def pytest_sessionfinish(session, exitstatus):
    """Hook to terminate pytest forcefully after displaying all test stats."""

    def terminate():
        if exitstatus == 0:
            print("All tests passed. Exiting cleanly.")
            os._exit(0)  # Exit code 0 for success
        else:
            print("Some tests failed. Exiting with error.")
            os._exit(1)  # Exit code 1 for error

    # Only set the timer if on GitHub Actions or another
    # CI environment where 'CI' is true
    if os.getenv("CI") == "true":
        threading.Timer(60, terminate).start()  # 60 seconds delay


def pytest_addoption(parser) -> None:
    parser.addoption(
        "--show",
        action="store_true",
        default=False,
        help="show intermediate details, e.g. for debug mode",
    )
    parser.addoption("--nc", action="store_true", default=False, help="don't use cache")
    parser.addoption("--ns", action="store_true", default=False, help="no streaming")
    parser.addoption("--ct", default="redis", help="redis, fakeredis")
    parser.addoption(
        "--m",
        default=OpenAIChatModel.GPT4o,
        help="""
        language model name, e.g. litellm/ollama/llama2, or 
        local or localhost:8000 or localhost:8000/v1
        """,
    )
    parser.addoption(
        "--turns",
        default=100,
        help="maximum number of turns in a task (to avoid inf loop)",
    )
    parser.addoption(
        "--nof",
        action="store_true",
        default=False,
        help="use model with no function_call",
    )
    # use multiple --first-test arguments to specify multiple tests to run first
    parser.addoption(
        "--first-test",
        action="append",
        default=[],
        help="Specify test FUNCTION(s) to run first.",
    )
    # use multiple --first-test-file arguments to specify multiple files to run first
    parser.addoption(
        "--first-test-file",
        action="append",
        default=[],
        help="Specify test FILE(s) to run first.",
    )


@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()
    setattr(item, f"rep_{rep.when}", rep)


def pytest_configure(config):
    config.addinivalue_line(
        "markers", "fallback: mark test to use fallback models on failure"
    )


@pytest.fixture(scope="function")
def test_settings(request):
    base_settings = dict(
        debug=request.config.getoption("--show"),
        cache_type=request.config.getoption("--ct"),
        stream=not request.config.getoption("--ns"),
        max_turns=request.config.getoption("--turns"),
    )

    if request.node.get_closest_marker("fallback"):
        # we're in a test marked as requiring fallback,
        # so we re-run with a sequence of settings, mainly
        # on `chat_model` and `cache`.
        logger.warning("Running test with fallback settings")
        models = [request.config.getoption("--m")]
        if OpenAIChatModel.GPT4o not in models:
            # we may be using a weaker model, so add GPT4o as first fallback
            models.append(OpenAIChatModel.GPT4o)
        models.append(GeminiModel.GEMINI_2_FLASH)
        caches = [True] + [False] * (len(models) - 1)
        retry_count = getattr(request.node, "retry_count", 0)
        model = (
            models[retry_count]
            if retry_count < len(models)
            else request.config.getoption("--m")
        )
        cache = caches[retry_count] if retry_count < len(caches) else False
        logger.warning(f"Retry count: {retry_count}, model: {model}, cache: {cache}")
    else:
        model = request.config.getoption("--m")
        cache = not request.config.getoption("--nc")

    yield Settings(**base_settings, chat_model=model, cache=cache)


# Auto-inject this into every test, so we don't need to explicitly
# have `test_settings` as a parameter in every test function!
@pytest.fixture(autouse=True)
def auto_set_global_settings(test_settings):
    set_global(test_settings)
    yield


@pytest.fixture(scope="session")
def redis_setup(redisdb):
    os.environ["REDIS_HOST"] = redisdb.connection_pool.connection_kwargs["host"]
    os.environ["REDIS_PORT"] = str(redisdb.connection_pool.connection_kwargs["port"])
    os.environ["REDIS_PASSWORD"] = ""  # Assuming no password for testing
    yield
    # Reset or clean up environment variables after tests


def pytest_collection_modifyitems(config, items):
    # Get the lists of specified tests and files
    first_tests = config.getoption("--first-test")
    first_test_files = config.getoption("--first-test-file")

    priority_items = []
    other_items = list(items)  # Start with all items

    # Prioritize individual tests specified by --first-test
    for first_test in first_tests:
        current_priority_items = [
            item for item in other_items if first_test in item.nodeid
        ]
        priority_items.extend(current_priority_items)
        other_items = [
            item for item in other_items if item not in current_priority_items
        ]

    # Prioritize entire files specified by --first-test-file
    for first_test_file in first_test_files:
        current_priority_items = [
            item for item in other_items if first_test_file in str(item.fspath)
        ]
        priority_items.extend(current_priority_items)
        other_items = [
            item for item in other_items if item not in current_priority_items
        ]

    # Replace the items list with priority items first, followed by others
    items[:] = priority_items + other_items


@pytest.fixture(autouse=True)
def redis_close_connections():
    """Close all redis connections after each test fn, to avoid
    max connections exceeded error."""

    # Setup code here (if necessary)
    yield  # Yield to test execution
    # Cleanup code here
    redis = RedisCache(RedisCacheConfig(fake=False))
    try:
        redis.close_all_connections()
    except Exception:
        pass
</file>

<file path="tests/README.md">
# Running tests with global settings

Sometimes it's useful to run tests with global settings, e.g.

```python
pytest -s tests/ --nc --show
```

The options `--nc` and `--show` are global settings that are defined in 
`tests/conftest.py` and can be used in any test file. See the file for more 
details.
</file>

<file path="tests/test_pdf_parser_extra.py">
import os

import pytest

from langroid.parsing.document_parser import DocumentParser
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig


@pytest.mark.parametrize("pdflib", ["unstructured"])
def test_get_pdf_doc_url(pdflib: str):
    url = "https://arxiv.org/pdf/2104.05490.pdf"
    pdf_parser = DocumentParser.create(
        url,
        ParsingConfig(
            n_neighbor_ids=2,
            pdf=PdfParsingConfig(library=pdflib),
        ),
    )
    doc = pdf_parser.get_doc()
    # PdfParser.get_doc_from_pdf_url(url)

    # Check the results
    assert isinstance(doc.content, str)
    assert len(doc.content) > 0  # assuming the PDF is not empty
    assert doc.metadata.source == url

    # parser = Parser(ParsingConfig())
    # pdfParser = PdfParser.from_Parser(parser)
    # docs = pdfParser.doc_chunks_from_pdf_url(url, parser)
    docs = pdf_parser.get_doc_chunks()
    assert len(docs) > 0
    assert all(d.metadata.is_chunk for d in docs)
    n = len(docs)
    k = pdf_parser.config.n_neighbor_ids
    if n > 2 * k + 1:
        assert len(docs[n // 2].metadata.window_ids) == 2 * k + 1


@pytest.mark.parametrize("pdflib", ["unstructured"])
def test_get_pdf_doc_path(pdflib: str):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    tests_root = os.path.abspath(os.path.join(current_dir, ".."))
    path = os.path.join(tests_root, "main", "data", "dummy.pdf")
    pdf_parser = DocumentParser.create(
        path, ParsingConfig(pdf=PdfParsingConfig(library=pdflib))
    )
    doc = pdf_parser.get_doc()

    # Check the results
    assert isinstance(doc.content, str)
    assert len(doc.content) > 0  # assuming the PDF is not empty
    assert doc.metadata.source == path

    docs = pdf_parser.get_doc_chunks()
    assert len(docs) > 0
    assert all(d.metadata.is_chunk for d in docs)
    assert all(path in d.metadata.source for d in docs)
</file>

<file path="tests/utils.py">
def contains_approx_float(s: str, x: int | float, k: int = 0) -> bool:
    """
    Check if a string contains a float that is approximately equal to x.
    E.g., s = "The average income is $100,000.134", x = 100000.13, k = 2

    Args:
        s (str): the string to search
        x (int|float): the float or int to search for
        k (int): the number of decimal places to round to

    Returns:
        bool: True if s contains a float or int that is approximately equal to x

    """
    for word in s.split():
        # Remove commas and dollar signs
        clean_word = word.replace(",", "").replace("$", "").replace("%", "")
        # Remove trailing period if present
        if clean_word.endswith("."):
            clean_word = clean_word[:-1]
        if clean_word.endswith("$"):
            clean_word = clean_word[:-1]

        try:
            float_val = float(clean_word)
            if round(float_val, k) == round(x, k):
                return True
        except ValueError:
            # Not a valid float, continue to next word
            pass

    return False
</file>

<file path=".blackignore">
./examples/urlqa/chat-clear.py
</file>

<file path=".coveragerc">
[run]
source = langroid
omit =
    langroid/prompts/*
    langroid/language_models/utils.py
	langroid/parsing/para_sentence_split.py


[html]
directory = coverage_html_report
</file>

<file path=".env-template">
OPENAI_API_KEY=your-key-here-without-quotes
GITHUB_ACCESS_TOKEN=your-personal-access-token-no-quotes
CACHE_TYPE=redis # or momento
REDIS_PASSWORD=your-redis-password-no-quotes
REDIS_HOST=your-redis-hostname-no-quotes
REDIS_PORT=your-redis-port-no-quotes
MOMENTO_AUTH_TOKEN=your-momento-auth-token-no-quotes
QDRANT_API_KEY=your-key
QDRANT_API_URL=https://your.url.here:6333 # note port number must be included
AZURE_OPENAI_API_KEY=your-azure-openai-key-here-without-quotes
AZURE_OPENAI_API_BASE=https://endpoint.openai.azure.com/
AZURE_OPENAI_API_VERSION=2023-05-15
AZURE_OPENAI_DEPLOYMENT_NAME=deployment-name-of-your-model
AZURE_OPENAI_MODEL_NAME=gpt-35-turbo-16k # change according to your setup, remove this comment
AZURE_OPENAI_MODEL_VERSION=1106-Preview # is needed if the model name is `gpt-4`
NEO4J_USERNAME=typically neo4j
NEO4J_PASSWORD=your-neo4j-password
NEO4J_URI=uri-to-access-neo4j-dayabase
NEO4J_DATABASE=typically neo4j
EXA_API_KEY=your-exa-search-key
LANGDB_API_KEY=your-langdb-api-key
LANGDB_PROJECT_ID=your-langdb-project-id
</file>

<file path="bump_version.sh">
#!/bin/sh
cz bump --increment $1
git commit pyproject.toml -m "Bump version"
cz version -p | cut -d' ' -f2
</file>

<file path="chainlit.md">
# Welcome to Langroid 👋

![Langroid](public/langroid-card.png)

---
When it is your turn to enter a message, you can do one of two things:
- write `c` to tell the agent to continue,
    - This is provided as a safeguard against infinite loops, or to prevent a large 
    amount of text to be sent to the LLM (which can be costly + slow). 
    If you simply want to continue with normal operation, just enter c.
- write a response, question or feedback to the agent, depending on context.
</file>

<file path="CODE_OF_CONDUCT.md">
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
* Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or
  advances of any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email
  address, without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
pchalasani@gmail.com.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior,  harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available at
https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.

Community Impact Guidelines were inspired by [Mozilla's code of conduct
enforcement ladder](https://github.com/mozilla/diversity).

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see the FAQ at
https://www.contributor-covenant.org/faq. Translations are available at
https://www.contributor-covenant.org/translations.
</file>

<file path="CONTRIBUTING.md">
# Contributing to Langroid

Thank you for your interest in contributing to Langroid!
We want to fundamentally change how LLM applications are built, 
using Langroid's principled multi-agent framework. 
Together, let us build the future of LLM-apps!
We welcome contributions from everyone.

Below you will find guidelines and suggestions for contributing.
We explicitly designed Langroid with a transparent, flexible architecture to 
make it easier to build LLM-powered applications, as well as 
to make it easier to contribute to Langroid itself.
Feel free to join us on [Discord](https://discord.gg/ZU36McDgDs) 
for any questions or discussions.

# How can I Contribute?

There are many ways to contribute to Langroid. Here are some areas where you can help:

- Bug Reports
- Code Fixes
- Feature Requests
- Feature Implementations
- Documentation
- Testing
- UI/UX Improvements
- Translations
- Outreach

You are welcome to take on un-assigned open [issues](https://github.com/langroid/langroid/issues).

## Implementation Ideas

**INTEGRATIONS**

- Vector databases, e.g.:
    - [x] Qdrant
    - [x] Chroma
    - [x] LanceDB
    - [x] Pinecone 
    - [x] PostgresML (pgvector)
    - [x] Weaviate
    - [ ] Milvus 
    - [ ] Marqo 
- Other LLM APIs, e.g.: Claude, Cohere, ... (see below)
- Local LLMs, e.g.: llama2
- Data Sources: SQL DBs, NoSQL DBs, Neo4j (Graph DBs), ...
- Query languages: SQL, GraphQL, Cypher, ...


**SPECIALIZED AGENTS**

- [x] `SQLChatAgent`, analogous to `DocChatAgent`: adds ability to chat with SQL databases
- [x] `TableChatAgent`: adds ability to chat with a tabular dataset in a file. 
   This can derive from `RetrieverAgent`

**CORE LANGROID**

- [ ] **Long-running, loosely coupled agents, communicating over message queues**: Currently all agents run within a session,
  launched from a single script. Extend this so agents can run in different
  processes, machines, or envs or cloud, and communicate via message queues.
- [ ] **Improve observability:** we currently log all agent interactions into structured
  and unstructured forms. Add features on top, to improve inspection and
  diagnosis of issues.
- [ ] Implement a way to **backtrack** 1 step in a multi-agent task. 
For instance during a long multi-agent conversation, if we receive a bad response from the LLM,
when the user gets a chance to respond, they may insert a special code (e.g. `b`) so that 
the previous step is re-done and the LLM gets another chance to respond.
- [x] **Integrate LLM APIs:** There are a couple of libs that simulate OpenAI-like interface for other models: https://github.com/BerriAI/litellm
    and https://github.com/philschmid/easyllm. It would be useful to have Langroid work with these APIs.
- [ ] Implement Agents that communicate via REST APIs: Currently, all agents within 
the multi-agent system are created in a single script. 
We can remove this limitation, and add the ability to have agents running and 
listening to an end-point (e.g. a flask server). For example the LLM may 
generate a function-call or Langroid-tool-message, which the agent’s 
tool-handling method interprets and makes a corresponding request to an API endpoint. 
This request can be handled by an agent listening to requests at this endpoint, 
and the tool-handling method gets the result and returns it as the result of the handling method. 
This is roughly the mechanism behind OpenAI plugins, e.g. https://github.com/openai/chatgpt-retrieval-plugin

**DEMOS, POC, Use-cases**

- [ ] **Text labeling/classification:** Specifically do what this repo does: https://github.com/refuel-ai/autolabel, 
  but using Langroid instead of Langchain (which that repo uses).
- [ ] Data Analyst Demo: A multi-agent system that automates a data analysis workflow, e.g. 
feature-exploration, visualization, ML model training.
- [ ] Document classification based on rules in an unstructured “policy” document. 
    This is an actual use-case from a large US bank. The task is to classify 
    documents into categories “Public” or “Sensitive”. The classification must be 
    informed by a “policy” document which has various criteria. 
    Normally, someone would have to read the policy doc, and apply that to 
    classify the documents, and maybe go back and forth and look up the policy repeatedly. 
    This would be a perfect use-case for Langroid’s multi-agent system. 
    One agent would read the policy, perhaps extract the info into some structured form. 
    Another agent would apply the various criteria from the policy to the document in question, 
    and (possibly with other helper agents) classify the document, along with a detailed justification.

- [ ] Document classification and tagging: Given a collection of already labeled/tagged docs, 
which have been ingested into a vecdb (to allow semantic search), 
when given a new document to label/tag, we retrieve the most similar docs 
from multiple categories/tags from the vecdb and present these (with the labels/tags) 
as few-shot examples to the LLM, and have the LLM classify/tag the retrieved document.

- [ ] Implement the CAMEL multi-agent debate system : https://lablab.ai/t/camel-tutorial-building-communicative-agents-for-large-scale-language-model-exploration

- [ ] Implement Stanford’s Simulacra paper with Langroid.
Generative Agents: Interactive Simulacra of Human Behavior https://arxiv.org/abs/2304.03442

- [ ] Implement CMU's paper with Langroid.
Emergent autonomous scientific research capabilities of large language models https://arxiv.org/pdf/2304.05332.pdf

---

# Contribution Guidelines

## Set up dev env

We use [`uv`](https://docs.astral.sh/uv/getting-started/installation/)
to manage dependencies, and `python 3.11` for development.

First install `uv`, then create virtual env and install dependencies:

```bash
# clone this repo and cd into repo root
git clone ...
cd <repo_root>
# create a virtual env under project root, .venv directory
uv venv --python 3.11

# activate the virtual env
. .venv/bin/activate


# use uv to install dependencies (these go into .venv dir)
uv sync --dev 
```

Important note about dependencies management:
> As of version 0.33.0, we are starting to include the `uv.lock` file as part of 
> the repo. This ensures that all contributors are using the same versions of 
> dependencies. If you add a new dependency, `uv add` will automatically update 
> the `uv.lock` file. This will also update the `pyproject.toml` file.

To add packages, use `uv add <package-name>`. This will automatically
find the latest compatible version of the package and add it to `pyproject.
toml`. _Do not manually edit `pyproject.toml` to add packages._

## Set up environment variables (API keys, etc)

Copy the `.env-template` file to a new file `.env` and
insert secrets such as API keys, etc:
- OpenAI API key, Anthropic API key, etc.
- [Optional] GitHub Personal Access Token (needed by  PyGithub to analyze git repos;
  token-based API calls are less rate-limited).
- [Optional] Cache Configs
  - Redis : Password, Host, Port <br>
- Qdrant API key for the vector database.

```bash
cp .env-template .env
# now edit the .env file, insert your secrets as above
``` 

Currently only OpenAI models are supported. 
You are welcome to submit a PR to support other API-based or local models. 

## Run tests
To verify your env is correctly setup, run all tests using `make tests`.

## IMPORTANT: Please include tests, docs and possibly examples.

For any new features, please include:
- Tests in the `tests` directory (first check if there is a suitable test file to add to).
  _If fixing a bug, please add a regression test, i.e., 
   one which would have failed without your fix_
- A note in `docs/notes` folder, e.g. `docs/notes/weaviate.md` that is a
  (relatively) self-contained guide to using the feature, including any instructions
  on how to set up the environment or keys if needed. 
  See the [weaviate](https://langroid.github.io/langroid/notes/weaviate/) note as an example. Make sure you link to this note in the `mkdocs.yml` file under the `nav` section.
- Where possible and meaningful, add a simple example in the `examples` directory.

## Generate docs

Generate docs: `make docs`, then go to the IP address shown at the end, like
`http://127.0.0.1:8000/`
Note this runs a docs server in the background.
To stop it, run `make nodocs`. Also, running `make docs` next time will kill
any previously running `mkdocs` server.


## Coding guidelines

In this Python repository, we prioritize code readability and maintainability.
To ensure this, please adhere to the following guidelines when contributing:

1. **Type-Annotate Code:** Add type annotations to function signatures and
   variables to make the code more self-explanatory and to help catch potential
   issues early. For example, `def greet(name: str) -> str:`. We use [`mypy`](https://mypy.readthedocs.io/en/stable/) for
   type-checking, so please ensure your code passes `mypy` checks. 

2. **Google-Style Docstrings:** Use Google-style docstrings to clearly describe
   the purpose, arguments, and return values of functions. For example:

   ```python
   def greet(name: str) -> str:
       """Generate a greeting message.

       Args:
           name (str): The name of the person to greet.

       Returns:
           str: The greeting message.
       """
       return f"Hello, {name}!"
   ```

3. **PEP8-Compliant 80-Char Max per Line:** Follow the PEP8 style guide and keep
   lines to a maximum of 80 characters. This improves readability and ensures
   consistency across the codebase.

If you are using an LLM to write code for you, adding these
instructions will usually get you code compliant with the above:
```
use type-annotations, google-style docstrings, and pep8 compliant max 80 
     chars per line.
```     


By following these practices, we can create a clean, consistent, and
easy-to-understand codebase for all contributors. Thank you for your
cooperation!

## Submitting a PR

To check for issues locally, run `make check`, it runs linters `black`, `ruff`,
and type-checker `mypy`. It also installs a pre-commit hook, 
so that commits are blocked if there are style/type issues. The linting attempts to
auto-fix issues, and warns about those it can't fix.
(There is a separate `make lint` you could do, but that is already part of `make check`).
The `make check` command also looks through the codebase to see if there are any
direct imports from pydantic, and replaces them with importing from `langroid.pydantic_v1`
(this is needed to enable dual-compatibility with Pydantic v1 and v2).

So, typically when submitting a PR, you would do this sequence:
- run `make tests` or `pytest -xvs tests/main/my-specific-test.py` 
  - if needed use `-nc` means "no cache", i.e. to prevent using cached LLM API call responses
  - the `-xvs` option means "exit on first failure, verbose, show output"
- fix things so tests pass, then proceed to lint/style/type checks below.
- `make check` to see what issues there are (typically lints and mypy)
- manually fix any lint or type issues
- `make check` again to see what issues remain
- repeat if needed, until all clean.

When done with these, commit and push to github and submit the PR. If this
is an ongoing PR, just push to github again and the PR will be updated.

It is strongly recommended to use the `gh` command-line utility when working with git.
Read more [here](docs/development/github-cli.md).
</file>

<file path="Dockerfile">
FROM --platform=$TARGETPLATFORM python:3.11

# Set environment variables to non-interactive (this prevents some prompts)
ENV DEBIAN_FRONTEND=non-interactive \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8

# Install necessary tools, zsh, and set up locale
RUN apt-get update && \
    apt-get install --no-install-recommends -y zsh wget git curl locales \
    libfreetype6-dev \
    libjpeg-dev \
    libopenjp2-7-dev \
    libssl-dev && \
    sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
    locale-gen && \
    # Cleanup apt cache
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Clone the langroid repository
RUN git clone https://github.com/langroid/langroid.git

# Set the working directory in the container
WORKDIR /langroid
RUN mv .env-template .env

RUN mkdir -p /root/.cache/uv

# workaround for pymupdf build error?
ENV MAKEFLAGS="-j1"
ENV PYTHONPYCACHEPREFIX="/tmp/pycache"
ENV DEBIAN_FRONTEND=non-interactive \
     LANG=en_US.UTF-8

# detect arch to customize pymupdf version
ARG TARGETPLATFORM
ARG TARGETARCH

# install uv then langroid
# Install uv and use it with cache mount
RUN --mount=type=cache,target=/root/.cache/uv,id=uv_cache \
    curl -LsSf https://astral.sh/uv/install.sh | sh && \
    export PATH="/root/.local/bin:$PATH" && \
    uv venv && \
    . .venv/bin/activate && \
    pip install --upgrade pip && \
    if [ "$TARGETARCH" = "arm64" ]; then \
         uv pip install --no-cache-dir "pymupdf==1.24.14"; \
     else \
         uv pip install --no-cache-dir "pymupdf>=1.25.3"; \
     fi && \
    uv pip install --no-cache-dir .

# Install oh-my-zsh and set up zsh configurations
RUN sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)" || true && \
    sed -i -e 's/plugins=(git)/plugins=(git python)/' /root/.zshrc

CMD ["zsh"]
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2023 langroid

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="pytest.ini">
[pytest]
markers =
    unit: marks tests as unit tests (deselect with '-m "not unit"')
    integration: marks tests as integration tests (deselect with '-m "not integration"')
    
# MySQL configuration settings
mysql_host = localhost
mysql_port = 3306
mysql_user = root
</file>

<file path="setup.cfg">
[flake8]
exclude = .*,.*/.*,.*/*,.*/*.*
max-line-length = 88
ignore = W291, W293, E501, E203, W503
</file>

<file path="ai-notes/Langroid-repo-docs.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Commands

### Development
- Install core dependencies: `pip install -e .`
- Install dev dependencies: `pip install -e ".[dev]"`
- Install specific feature groups:
  - Document chat features: `pip install -e ".[doc-chat]"`
  - Database features: `pip install -e ".[db]"`
  - HuggingFace embeddings: `pip install -e ".[hf-embeddings]"`
  - All features: `pip install -e ".[all]"`
- Run linting and type checking: `make check`
- Format code: `make lint`

### Testing
- Run all tests: `pytest tests/`
- Run specific test: `pytest tests/main/test_file.py::test_function`
- Run tests with coverage: `pytest --cov=langroid tests/`
- Run only main tests: `make tests` (uses `pytest tests/main`)

### Linting and Type Checking
- Lint code: `make check` (runs black, ruff check, mypy)
- Format only: `make lint` (runs black and ruff fix)
- Type check only: `make type-check`
- Always use `make check` to run lints + mypy before trying to commit changes

### Version and Release Management
- Bump version: `./bump_version.sh [patch|minor|major]`
- Or use make commands:
  - `make all-patch` - Bump patch version, build, push, release
  - `make all-minor` - Bump minor version, build, push, release
  - `make all-major` - Bump major version, build, push, release

## Architecture

Langroid is a framework for building LLM-powered agents that can use tools and collaborate with each other.

### Core Components:

1. **Agents** (`langroid/agent/`):
   - `chat_agent.py` - Base ChatAgent that can converse and use tools
   - `task.py` - Handles execution flow for agents
   - `special/` - Domain-specific agents (doc chat, table chat, SQL chat, etc.)
   - `openai_assistant.py` - Integration with OpenAI Assistant API

2. **Tools** (`langroid/agent/tools/`):
   - Tool system for agents to interact with external systems
   - `tool_message.py` - Protocol for tool messages
   - Various search tools (Google, DuckDuckGo, Tavily, Exa, etc.)

3. **Language Models** (`langroid/language_models/`):
   - Abstract interfaces for different LLM providers
   - Implementations for OpenAI, Azure, local models, etc.
   - Support for hundreds of LLMs via LiteLLM

4. **Vector Stores** (`langroid/vector_store/`):
   - Abstract interface and implementations for different vector databases
   - Includes support for Qdrant, Chroma, LanceDB, Pinecone, PGVector, Weaviate

5. **Document Processing** (`langroid/parsing/`):
   - Parse and process documents from various formats
   - Chunk text for embedding and retrieval
   - Support for PDF, DOCX, images, and more

6. **Embedding Models** (`langroid/embedding_models/`):
   - Abstract interface for embedding generation
   - Support for OpenAI, HuggingFace, and custom embeddings

### Key Multi-Agent Patterns:

- **Task Delegation**: Agents can delegate tasks to other agents through hierarchical task structures
- **Message Passing**: Agents communicate by transforming and passing messages
- **Collaboration**: Multiple agents can work together on complex tasks

### Key Security Features:

- The `full_eval` flag in both `TableChatAgentConfig` and `VectorStoreConfig` controls code injection protection
- Defaults to `False` for security, set to `True` only in trusted environments

## Documentation

- Main documentation is in the `docs/` directory
- Examples in the `examples/` directory demonstrate usage patterns
- Quick start examples available in `examples/quick-start/`

## MCP (Model Context Protocol) Tools Integration

Langroid provides comprehensive support for MCP tools through the `langroid.agent.tools.mcp` module. Here are the key patterns and approaches:

### MCP Tool Creation Methods

#### 1. Using the `@mcp_tool` Decorator (Module Level)
```python
from langroid.agent.tools.mcp import mcp_tool
from fastmcp.client.transports import StdioTransport

transport = StdioTransport(command="...", args=[...])

@mcp_tool(transport, "tool_name")
class MyTool(lr.ToolMessage):
    async def handle_async(self):
        result = await self.call_tool_async()
        # custom processing
        return result
```

**Important**: The decorator creates the transport connection at module import time, so it must be used at module level (not inside async functions).

#### 2. Using `get_tool_async` (Inside Async Functions)
```python
from langroid.agent.tools.mcp.fastmcp_client import get_tool_async

async def main():
    transport = StdioTransport(command="...", args=[...])
    BaseTool = await get_tool_async(transport, "tool_name")
    
    class MyTool(BaseTool):
        async def handle_async(self):
            result = await self.call_tool_async()
            # custom processing
            return result
```

**Use this approach when**:
- Creating tools inside async functions
- Need to avoid event loop conflicts
- Want to delay transport creation until runtime

### Transport Types and Event Loop Considerations

- **StdioTransport**: Creates subprocess immediately, can cause "event loop closed" errors if created at module level in certain contexts
- **SSETransport**: HTTP-based, generally safer for module-level creation
- **Best Practice**: Create transports inside async functions when possible, use `asyncio.run()` wrapper for Fire CLI integration

### Tool Message Request Field and Agent Handlers

When you get an MCP tool named "my_tool", Langroid automatically:

1. **Sets the `request` field**: The dynamically created ToolMessage subclass has `request = "my_tool"`
2. **Enables custom agent handlers**: Agents can define these methods:
   - `my_tool()` - synchronous handler
   - `my_tool_async()` - async handler

The agent's message routing system automatically calls these handlers when the tool is used.

### Custom `handle_async` Method Override

Both decorator and non-decorator approaches support overriding `handle_async`:

```python
class MyTool(BaseTool):  # or use @mcp_tool decorator
    async def handle_async(self):
        # Get raw result from MCP server
        result = await self.call_tool_async()
        
        # Option 1: Return processed result to LLM (continues conversation)
        return f"<ProcessedResult>{result}</ProcessedResult>"
        
        # Option 2: Return ResultTool to terminate task
        return MyResultTool(answer=result)
```

### Common Async Issues and Solutions

**Problem**: "RuntimeError: asyncio.run() cannot be called from a running event loop"
**Solution**: Use `get_tool_async` instead of `@mcp_tool` decorator when already in async context

**Problem**: "RuntimeError: Event loop is closed"
**Solution**: 
- Move transport creation inside async functions
- Use `asyncio.run()` wrapper for Fire CLI integration:
```python
if __name__ == "__main__":
    import asyncio
    def run_main(**kwargs):
        asyncio.run(main(**kwargs))
    Fire(run_main)
```

### MCP Tool Integration Examples

See `examples/mcp/` for working examples:
- `gitmcp.py` - HTTP-based SSE transport
- `pyodide_code_executor.py` - Subprocess-based stdio transport with proper async handling

## Testing and Tool Message Patterns

### MockLM for Testing Tool Generation
- Use `MockLM` with `response_dict` to simulate LLM responses that include tool messages
- Set `tools=[ToolClass]` or `enable_message=[ToolClass]` on the agent to enable tool handling
- The `try_get_tool_messages()` method can extract tool messages from LLM responses with `all_tools=True`

### Task Termination Control
- `TaskConfig` has `done_if_tool` parameter to terminate tasks when any tool is generated
- `Task.done()` method checks `result.agent_response` for tool content when this flag is set
- Useful for workflows where tool generation signals task completion

### Testing Tool-Based Task Flows
```python
# Example: Test task termination on tool generation
config = TaskConfig(done_if_tool=True)
task = Task(agent, config=config)
response_dict = {"content": '{"request": "my_tool", "param": "value"}'}
```

## Multi-Agent System Development

### Important Patterns and Best Practices

#### 1. Pydantic Imports
**ALWAYS import Pydantic classes from `langroid.pydantic_v1`**, not from `pydantic` directly:
```python
# CORRECT
from langroid.pydantic_v1 import Field, BaseModel

# WRONG - will cause issues
from pydantic import Field, BaseModel
```

#### 2. Tool Name References in System Messages
When referencing tool names in f-strings within system messages, use the `.name()` method:
```python
system_message: str = f"""
Use {MyTool.name()} to perform the action.
"""
```
This works at module level in configs, but be aware that complex initialization at module level can sometimes cause issues.

#### 3. Agent Configuration with LLM
Always specify the LLM configuration explicitly in agent configs:
```python
class MyAgentConfig(lr.ChatAgentConfig):
    name: str = "MyAgent"
    llm: lm.OpenAIGPTConfig = lm.OpenAIGPTConfig(
        chat_model="gpt-4",  # or "gpt-4.1" etc.
    )
    system_message: str = "..."
```

#### 4. Tool Organization in Multi-Agent Systems
When tools delegate to agents:
- Define agent configs and agents BEFORE the tools that use them
- Tools can directly instantiate agents in their `handle()` methods:
```python
class MyTool(lr.ToolMessage):
    def handle(self) -> str:
        agent = MyAgent(MyAgentConfig())
        task = lr.Task(agent, interactive=False)
        result = task.run(prompt)
        return result.content
```

#### 5. Task Termination with Done Sequences
Use `done_sequences` for precise task termination control:
```python
# For a task that should complete after: Tool -> Agent handles -> LLM responds
task = lr.Task(
    agent,
    interactive=False,
    config=lr.TaskConfig(done_sequences=["T,A,L"]),
)
```

Common patterns:
- `"T,A"` - Tool used and handled by agent
- `"T,A,L"` - Tool used, handled, then LLM responds
- `"T[specific_tool],A"` - Specific tool used and handled

See `docs/notes/task-termination.md` for comprehensive documentation.

#### 6. Handling Non-Tool LLM Responses
Use `handle_llm_no_tool` in agent configs to handle cases where the LLM forgets to use a tool:
```python
class MyAgentConfig(lr.ChatAgentConfig):
    handle_llm_no_tool: str = "You FORGOT to use one of your TOOLs!"
```

#### 7. Agent Method Parameters
Note that `ChatAgentConfig` does not have a `use_tools` parameter. Instead, enable tools on the agent after creation:
```python
agent = MyAgent(config)
agent.enable_message([Tool1, Tool2, Tool3])  # Pass list of tool classes
```

## Commit and Pull Request Guidelines

- Never include "co-authored by Claude Code" or "created by Claude" in commit messages or pull request descriptions

## Codecov Badge Fix (June 2025)

- Fixed broken Codecov badge in README by removing the token parameter from the URL
- Changed from `https://codecov.io/gh/langroid/langroid/branch/main/graph/badge.svg?token=H94BX5F0TE` to `https://codecov.io/gh/langroid/langroid/graph/badge.svg`
- Tokens are not needed for public repositories and can cause GitHub rendering issues
</file>

<file path="ai-notes/repomix-plan.md">
## Plan to Add llms-no-tests.txt

### Overview
Create a third version of the repomix output that excludes all test files from the `tests/` directory. This will provide a more concise version focused only on source code without test implementations.

### Steps:

1. **Create ai-scratchpads directory and save this plan** ✓
   - Create directory: `mkdir -p ai-scratchpads`
   - Save this plan to `ai-scratchpads/repomix-plan.md`

2. **Create temporary repomix configuration**
   - Copy existing `repomix.config.json` to `repomix-no-tests.config.json`
   - Add `"tests/**"` to the `customPatterns` array in the `ignore` section
   - Add `"llms-no-tests.txt"` to the ignore patterns to prevent recursive inclusion

3. **Generate the new output file**
   - Run: `repomix --config repomix-no-tests.config.json -o llms-no-tests.txt`
   - This will create a new file excluding all test files

4. **Clean up and update documentation**
   - Remove the temporary `repomix-no-tests.config.json` file
   - Update `ai-instructions/claude-repomix-instructions.md` to mention the third variant
   - Add a note about generating the no-tests version with the command:
     ```bash
     # No-tests version (excludes tests directory)
     repomix --config repomix-no-tests.config.json -o llms-no-tests.txt
     ```

### Expected Result
- A new file `llms-no-tests.txt` that contains all source code except test files
- This will be smaller than the standard `llms.txt` but larger than `llms-compressed.txt`
- Useful for LLM analysis when test implementations are not needed

### File Size Expectations
Based on the current setup:
- `llms.txt`: ~3.3 MB (782K tokens)
- `llms-compressed.txt`: ~1.6 MB (434K tokens)
- `llms-no-tests.txt`: Expected to be between these sizes, excluding test code

## Results and Conclusions

### Actual Token Counts
After generating all variants, here are the actual token counts:
- `llms.txt`: 782K tokens (standard version with tests)
- `llms-compressed.txt`: 434K tokens (compressed version with tests)
- `llms-no-tests.txt`: 652K tokens (no tests version)
- `llms-no-tests-compressed.txt`: 400K tokens (compressed no-tests version)

### Key Observations
1. **Limited Impact of Excluding Tests**: Removing test files only reduced tokens by ~130K (17% reduction), suggesting that test files don't constitute a major portion of the codebase.

2. **Compression More Effective**: The compression feature provides a much more significant reduction (~45-50% reduction) compared to just excluding tests.

3. **Minimal Benefit of Combined Approach**: The compressed no-tests version (400K) is only marginally smaller than the compressed version with tests (434K) - a difference of just 34K tokens or ~8%.

### Recommendations
- For most use cases, the standard `llms-compressed.txt` (434K tokens) is likely sufficient
- The no-tests variants might be useful for specific scenarios where test implementation details would confuse the LLM or are explicitly not needed
- The marginal benefit of excluding tests doesn't justify maintaining multiple variants unless there's a specific need

### Files Created
- `repomix-no-tests.config.json` - Permanent config file for generating no-tests versions
- `llms-no-tests.txt` - Full version without tests (652K tokens)
- `llms-no-tests-compressed.txt` - Compressed version without tests (400K tokens)
</file>

<file path="docs/notes/code-injection-protection.md">
# Code Injection Protection with full_eval Flag

Available in Langroid since v0.53.15.

Langroid provides a security feature that helps protect against code injection vulnerabilities when evaluating pandas expressions in `TableChatAgent` and `VectorStore`. This protection is controlled by the `full_eval` flag, which defaults to `False` for maximum security, but can be set to `True` when working in trusted environments.

## Background

When executing dynamic pandas expressions within `TableChatAgent` and in `VectorStore.compute_from_docs()`, there is a risk of code injection if malicious input is provided. To mitigate this risk, Langroid implements a command sanitization system that validates and restricts the operations that can be performed.

## How It Works

The sanitization system uses AST (Abstract Syntax Tree) analysis to enforce a security policy that:

1. Restricts DataFrame methods to a safe whitelist
2. Prevents access to potentially dangerous methods and arguments
3. Limits expression depth and method chaining
4. Validates literals and numeric values to be within safe bounds
5. Blocks access to any variables other than the provided DataFrame

When `full_eval=False` (the default), all expressions are run through this sanitization process before evaluation. When `full_eval=True`, the sanitization is bypassed, allowing full access to pandas functionality.

## Configuration Options

### In TableChatAgent

```python
from langroid.agent.special.table_chat_agent import TableChatAgentConfig, TableChatAgent

config = TableChatAgentConfig(
    data=my_dataframe,
    full_eval=False,  # Default: True only for trusted input
)

agent = TableChatAgent(config)
```

### In VectorStore

```python
from langroid.vector_store.lancedb import LanceDBConfig, LanceDB

config = LanceDBConfig(
    collection_name="my_collection",
    full_eval=False,  # Default: True only for trusted input
)

vectorstore = LanceDB(config)
```

## When to Use full_eval=True

Set `full_eval=True` only when:

1. All input comes from trusted sources (not from users or external systems)
2. You need full pandas functionality that goes beyond the whitelisted methods
3. You're working in a controlled development or testing environment

## Security Considerations

- By default, `full_eval=False` provides a good balance of security and functionality
- The whitelisted operations support most common pandas operations
- Setting `full_eval=True` removes all protection and should be used with caution
- Even with protection, always validate input when possible

## Affected Classes

The `full_eval` flag affects the following components:

1. `TableChatAgentConfig` and `TableChatAgent` - Controls sanitization in the `pandas_eval` method
2. `VectorStoreConfig` and `VectorStore` - Controls sanitization in the `compute_from_docs` method
3. All implementations of `VectorStore` (ChromaDB, LanceDB, MeiliSearch, PineconeDB, PostgresDB, QdrantDB, WeaviateDB)

## Example: Safe Pandas Operations

When `full_eval=False`, the following operations are allowed:

```python
# Allowed operations (non-exhaustive list)
df.head()
df.groupby('column')['value'].mean()
df[df['column'] > 10]
df.sort_values('column', ascending=False)
df.pivot_table(...)
```

Some operations that might be blocked include:

```python
# Potentially blocked operations
df.eval("dangerous_expression")
df.query("dangerous_query")
df.apply(lambda x: dangerous_function(x))
```

## Testing Considerations

When writing tests that use `TableChatAgent` or `VectorStore.compute_from_docs()` with pandas expressions that go beyond the whitelisted operations, you may need to set `full_eval=True` to ensure the tests pass.
</file>

<file path="docs/notes/gemini.md">
# Gemini LLMs & Embeddings via OpenAI client (without LiteLLM)

As of Langroid v0.21.0 you can use Langroid with Gemini LLMs directly 
via the OpenAI client, without using adapter libraries like LiteLLM.

See details [here](https://langroid.github.io/langroid/tutorials/non-openai-llms/)

You can use also Google AI Studio Embeddings or Gemini Embeddings directly
which uses google-generativeai client under the hood. 

```python 

import langroid as lr
from langroid.agent.special import DocChatAgent, DocChatAgentConfig
from langroid.embedding_models import GeminiEmbeddingsConfig

# Configure Gemini embeddings
embed_cfg = GeminiEmbeddingsConfig(
    model_type="gemini",
    model_name="models/text-embedding-004",
    dims=768,
)

# Configure the DocChatAgent 
config = DocChatAgentConfig(
    llm=lr.language_models.OpenAIGPTConfig(
        chat_model="gemini/" + lr.language_models.GeminiModel.GEMINI_1_5_FLASH_8B,
    ),
    vecdb=lr.vector_store.QdrantDBConfig(
        collection_name="quick_start_chat_agent_docs",
        replace_collection=True,
        embedding=embed_cfg,
    ),
    parsing=lr.parsing.parser.ParsingConfig(
        separators=["\n\n"],
        splitter=lr.parsing.parser.Splitter.SIMPLE,
    ),
    n_similar_chunks=2,
    n_relevant_chunks=2,
)

# Create the agent
agent = DocChatAgent(config)
```
</file>

<file path="docs/notes/llm-pdf-parser.md">
# Using the LLM-based PDF Parser

- Converts PDF content into Markdown format using Multimodal models.

- Uses multimodal models to describe images within PDFs.

- Supports page-wise or chunk-based processing for optimized performance.

---

### Initializing the LLM-based PDF Parser

Make sure you have set up your API key for whichever model you specify in `model_name` below.

You can initialize the LLM PDF parser as follows:

```python
parsing_config = ParsingConfig(
    n_neighbor_ids=2,
    pdf=PdfParsingConfig(
        library="llm-pdf-parser",
        llm_parser_config=LLMPdfParserConfig(
            model_name="gemini-2.0-flash",
            split_on_page=True,
            max_tokens=7000,
            requests_per_minute=5,
            timeout=60,  # increase this for large documents
        ),
    ),
)
```

---

## Parameters

### `model_name`

Specifies the model to use for PDF conversion.
**Default:** `gemini/gemini-2.0-flash`

---

### `max_tokens`

Limits the number of tokens in the input. The model's output limit is **8192 tokens**.

- **Default:** 7000 tokens (leaving room for generated captions)

- _Optional parameter_

---

### `split_on_page`

Determines whether to process the document **page by page**.

- **Default:** `True`

- If set to `False`, the parser will create chunks based on `max_tokens` while respecting page boundaries.

- When `False`, the parser will send chunks containing multiple pages (e.g., `[11,12,13,14,15]`).

**Advantages of `False`:**

- Reduces API calls to the LLM.

- Lowers token usage since system prompts are not repeated per page.

**Disadvantages of `False`:**

- You will not get per-page splitting but groups of pages as a single unit.

> If your use case does **not** require strict page-by-page parsing, consider setting this to `False`.

---

### `requests_per_minute`

Limits API request frequency to avoid rate limits.

- If you encounter rate limits, set this to **1 or 2**.

---
</file>

<file path="docs/notes/openai-client-caching.md">
# OpenAI Client Caching

## Overview

Langroid implements client caching for OpenAI and compatible APIs (Groq, Cerebras, etc.) to improve performance and prevent resource exhaustion issues.

## Configuration

### Option
Set `use_cached_client` in your `OpenAIGPTConfig`:

```python
from langroid.language_models import OpenAIGPTConfig

config = OpenAIGPTConfig(
    chat_model="gpt-4",
    use_cached_client=True  # Default
)
```

### Default Behavior
- `use_cached_client=True` (enabled by default)
- Clients with identical configurations share the same underlying HTTP connection pool
- Different configurations (API key, base URL, headers, etc.) get separate client instances

## Benefits

- **Connection Pooling**: Reuses TCP connections, reducing latency and overhead
- **Resource Efficiency**: Prevents "too many open files" errors when creating many agents
- **Performance**: Eliminates connection handshake overhead on subsequent requests
- **Thread Safety**: Shared clients are safe to use across threads

## When to Disable Client Caching

Set `use_cached_client=False` in these scenarios:

1. **Multiprocessing**: Each process should have its own client instance
2. **Client Isolation**: When you need complete isolation between different agent instances
3. **Debugging**: To rule out client sharing as a source of issues
4. **Legacy Compatibility**: If your existing code depends on unique client instances

## Example: Disabling Client Caching

```python
config = OpenAIGPTConfig(
    chat_model="gpt-4",
    use_cached_client=False  # Each instance gets its own client
)
```

## Technical Details

- Uses SHA256-based cache keys to identify unique configurations
- Implements singleton pattern with lazy initialization
- Automatically cleans up clients on program exit via atexit hooks
- Compatible with both sync and async OpenAI clients
</file>

<file path="docs/notes/pgvector.md">
---

## **Setup PostgreSQL with pgvector using Docker**

To quickly get a PostgreSQL instance with pgvector running, the easiest method is to use Docker. Follow the steps below:

### **1. Run PostgreSQL with Docker**

Use the official `ankane/pgvector` Docker image to set up PostgreSQL with the pgvector extension. Run the following command:

```bash
docker run --name pgvector -e POSTGRES_USER=your_postgres_user -e POSTGRES_PASSWORD=your_postgres_password -e POSTGRES_DB=your_database_name -p 5432:5432 ankane/pgvector
```

This will pull the `ankane/pgvector` image and run it as a PostgreSQL container on your local machine. The database will be accessible at `localhost:5432`. 

### **2. Include `.env` file with PostgreSQL credentials**

These environment variables should be same which were set while spinning up docker container.
Add the following environment variables to a `.env` file for configuring your PostgreSQL connection:

```dotenv
POSTGRES_USER=your_postgres_user
POSTGRES_PASSWORD=your_postgres_password
POSTGRES_DB=your_database_name
```
## **If you want to use cloud offerings of postgres**

We are using **Tembo** for demonstrative purposes here.  

### **Steps to Set Up Tembo**  
Follow this [quickstart guide](https://tembo.io/docs/getting-started/getting_started) to get your Tembo credentials.  

1. Sign up at [Tembo.io](https://cloud.tembo.io/).  
2. While selecting a stack, choose **VectorDB** as your option.  
3. Click on **Deploy Free**.  
4. Wait until your database is fully provisioned.  
5. Click on **Show Connection String** to get your connection string.  

### **If you have connection string, no need to setup the docker**
Make sure your connnection string starts with `postgres://` or `postgresql://`

Add this to your `.env`
```dotenv
POSTGRES_CONNECTION_STRING=your-connection-string
```

---

## **Installation**

If you are using `uv` or `pip` for package management, install Langroid with postgres extra:

```bash
uv add langroid[postgres]  # or
pip install langroid[postgres]
```

---

## **Code Example**

Here's an example of how to use Langroid with PostgreSQL:

```python
import langroid as lr
from langroid.agent.special import DocChatAgent, DocChatAgentConfig
from langroid.embedding_models import OpenAIEmbeddingsConfig

# Configure OpenAI embeddings
embed_cfg = OpenAIEmbeddingsConfig(
    model_type="openai",
)

# Configure the DocChatAgent with PostgresDB
config = DocChatAgentConfig(
    llm=lr.language_models.OpenAIGPTConfig(
        chat_model=lr.language_models.OpenAIChatModel.GPT4o
    ),
    vecdb=lr.vector_store.PostgresDBConfig(
        collection_name="quick_start_chat_agent_docs",
        replace_collection=True,
        embedding=embed_cfg,
    ),
    parsing=lr.parsing.parser.ParsingConfig(
        separators=["\n\n"],
        splitter=lr.parsing.parser.Splitter.SIMPLE,
    ),
    n_similar_chunks=2,
    n_relevant_chunks=2,
)

# Create the agent
agent = DocChatAgent(config)
```

---

## **Create and Ingest Documents**

Define documents with their content and metadata for ingestion into the vector store.

### **Code Example**

```python
documents = [
    lr.Document(
        content="""
            In the year 2050, GPT10 was released. 
            
            In 2057, paperclips were seen all over the world. 
            
            Global warming was solved in 2060. 
            
            In 2061, the world was taken over by paperclips.         
            
            In 2045, the Tour de France was still going on.
            They were still using bicycles. 
            
            There was one more ice age in 2040.
        """,
        metadata=lr.DocMetaData(source="wikipedia-2063", id="dkfjkladfjalk"),
    ),
    lr.Document(
        content="""
            We are living in an alternate universe 
            where Germany has occupied the USA, and the capital of USA is Berlin.
            
            Charlie Chaplin was a great comedian.
            In 2050, all Asian countries merged into Indonesia.
        """,
        metadata=lr.DocMetaData(source="Almanac", id="lkdajfdkla"),
    ),
]
```

### **Ingest Documents**

```python
agent.ingest_docs(documents)
```

---

## **Get an Answer from the LLM**

Now that documents are ingested, you can query the agent to get an answer.

### **Code Example**

```python
answer = agent.llm_response("When will the new ice age begin?")
```

---
</file>

<file path="docs/notes/pinecone.md">
# How to setup Langroid and Pinecone Serverless
This document serves as a quick tutorial on how to use [Pinecone](https://www.pinecone.io/)
Serverless Indexes with Langroid. We will go over some quickstart links and 
some code snippets on setting up a conversation with an LLM utilizing Langroid.

# Setting up Pinecone
Here are some reference links if you'd like to read a bit more on Pinecone's
model definitions and API:
- https://docs.pinecone.io/guides/get-started/overview
- https://docs.pinecone.io/guides/get-started/glossary
- https://docs.pinecone.io/guides/indexes/manage-indexes
- https://docs.pinecone.io/reference/api/introduction
## Signing up for Pinecone
To get started, you'll need to have an account. [Here's](https://www.pinecone.io/pricing/) where you can review the
pricing options for Pinecone. Once you have an account, you'll need to procure an API
key. Make sure to save the key you are given on initial login in a secure location. If
you were unable to save it when your account was created, you can always [create a new
API key](https://docs.pinecone.io/guides/projects/manage-api-keys) in the pinecone console.
## Setting up your local environment
For the purposes of this example, we will be utilizing OpenAI for the generation of our
embeddings. As such, alongside a Pinecone API key, you'll also want an OpenAI key. You can
find a quickstart guide on getting started with OpenAI (here)[https://platform.openai.com/docs/quickstart].
Once you have your API key handy, you'll need to enrich your `.env` file with it.
You should have something like the following:
```env
...
OPENAI_API_KEY=<YOUR_OPENAI_API_KEY>
PINECONE_API_KEY=<YOUR_PINECONE_API_KEY>
...
```

# Using Langroid with Pinecone Serverless
Once you have completed signing up for an account and have added your API key
to your local environment, you can start utilizing Langroid with Pinecone.
## Setting up an Agent
Here's some example code setting up an agent:
```python
from langroid import Document, DocMetaData
from langroid.agent.special import DocChatAgent, DocChatAgentConfig
from langroid.embedding_models import OpenAIEmbeddingsConfig
from langroid.language_models import OpenAIGPTConfig, OpenAIChatModel
from langroid.parsing.parser import ParsingConfig, Splitter
from langroid.vector_store import PineconeDBConfig

agent_embed_cfg = OpenAIEmbeddingsConfig(
    model_type="openai"
)

agent_config = DocChatAgentConfig(
    llm=OpenAIGPTConfig(
        chat_model=OpenAIChatModel.GPT4o_MINI
    ),
    vecdb=PineconeDBConfig(
        # note, Pinecone indexes must be alphanumeric lowercase characters or "-"
        collection_name="pinecone-serverless-example",
        replace_collection=True,
        embedding=agent_embed_cfg,
    ),
    parsing=ParsingConfig(
        separators=["\n"],
        splitter=Splitter.SIMPLE,
    ),
    n_similar_chunks=2,
    n_relevant_chunks=2,
)

agent = DocChatAgent(config=agent_config)

###################
# Once we have created an agent, we can start loading
# some docs into our Pinecone index:
###################

documents = [
    Document(
        content="""Max Verstappen was the Formula 1 World Drivers' Champion in 2024.
        Lewis Hamilton was the Formula 1 World Drivers' Champion in 2020.
        Nico Rosberg was the Formula 1 World Drivers' Champion in 2016.
        Sebastian Vettel was the Formula 1 World Drivers' Champion in 2013.
        Jenson Button was the Formula 1 World Drivers' Champion in 2009.
        Kimi Räikkönen was the Formula 1 World Drivers' Champion in 2007.
        """,
        metadata=DocMetaData(
            source="wikipedia",
            id="formula-1-facts",
        )
    ),
    Document(
        content="""The Boston Celtics won the NBA Championship for the 2024 NBA season. The MVP for the 2024 NBA Championship was Jaylen Brown.
        The Denver Nuggets won the NBA Championship for the 2023 NBA season. The MVP for the 2023 NBA Championship was Nikola Jokić.
        The Golden State Warriors won the NBA Championship for the 2022 NBA season. The MVP for the 2022 NBA Championship was Stephen Curry.
        The Milwaukee Bucks won the NBA Championship for the 2021 NBA season. The MVP for the 2021 NBA Championship was Giannis Antetokounmpo.
        The Los Angeles Lakers won the NBA Championship for the 2020 NBA season. The MVP for the 2020 NBA Championship was LeBron James.
        The Toronto Raptors won the NBA Championship for the 2019 NBA season. The MVP for the 2019 NBA Championship was Kawhi Leonard.
        """,
        metadata=DocMetaData(
            source="wikipedia",
            id="nba-facts"
        )
    )
]

agent.ingest_docs(documents)

###################
# With the documents now loaded, we can now prompt our agent
###################

formula_one_world_champion_2007 = agent.llm_response(
    message="Who was the Formula 1 World Drivers' Champion in 2007?"
)
try:
    assert "Kimi Räikkönen" in formula_one_world_champion_2007.content
except AssertionError as e:
    print(f"Did not resolve Kimi Räikkönen as the answer, document content: {formula_one_world_champion_2007.content} ")

nba_champion_2023 = agent.llm_response(
    message="Who won the 2023 NBA Championship?"
)
try:
    assert "Denver Nuggets" in nba_champion_2023.content
except AssertionError as e:
    print(f"Did not resolve the Denver Nuggets as the answer, document content: {nba_champion_2023.content}")

nba_mvp_2023 = agent.llm_response(
    message="Who was the MVP for the 2023 NBA Championship?"
)
try:
    assert "Nikola Jokić" in nba_mvp_2023.content
except AssertionError as e:
    print(f"Did not resolve Nikola Jokić as the answer, document content: {nba_mvp_2023.content}")
```
</file>

<file path="docs/notes/portkey.md">
# Portkey Integration

Langroid provides seamless integration with [Portkey](https://portkey.ai), a powerful AI gateway that enables you to access multiple LLM providers through a unified API with advanced features like caching, retries, fallbacks, and comprehensive observability.

## What is Portkey?

Portkey is an AI gateway that sits between your application and various LLM providers, offering:

- **Unified API**: Access 200+ models from different providers through one interface
- **Reliability**: Automatic retries, fallbacks, and load balancing
- **Observability**: Detailed logging, tracing, and analytics
- **Performance**: Intelligent caching and request optimization
- **Security**: Virtual keys and advanced access controls
- **Cost Management**: Usage tracking and budget controls

For complete documentation, visit the [Portkey Documentation](https://docs.portkey.ai).

## Quick Start

### 1. Setup

First, sign up for a Portkey account at [portkey.ai](https://portkey.ai) and get your API key.

Set up your environment variables, either explicitly or in your `.env` file as usual: 

```bash
# Required: Portkey API key
export PORTKEY_API_KEY="your-portkey-api-key"

# Required: Provider API keys (for the models you want to use)
export OPENAI_API_KEY="your-openai-key"
export ANTHROPIC_API_KEY="your-anthropic-key"
export GOOGLE_API_KEY="your-google-key"
# ... other provider keys as needed
```

### 2. Basic Usage

```python
import langroid as lr
import langroid.language_models as lm
from langroid.language_models.provider_params import PortkeyParams

# Create an LLM config to use Portkey's OpenAI-compatible API
# (Note that the name `OpenAIGPTConfig` does NOT imply it only works with OpenAI models;
# the name reflects the fact that the config is meant to be used with an
# OpenAI-compatible API, which Portkey provides for multiple LLM providers.)
llm_config = lm.OpenAIGPTConfig(
    chat_model="portkey/openai/gpt-4o-mini",
    portkey_params=PortkeyParams(
        api_key="your-portkey-api-key",  # Or set PORTKEY_API_KEY env var
    )
)

# Create LLM instance
llm = lm.OpenAIGPT(llm_config)

# Use normally
response = llm.chat("What is the smallest prime number?")
print(response.message)
```

### 3. Multiple Providers

Switch between providers seamlessly:

```python
# OpenAI
config_openai = lm.OpenAIGPTConfig(
    chat_model="portkey/openai/gpt-4o",
)

# Anthropic
config_anthropic = lm.OpenAIGPTConfig(
    chat_model="portkey/anthropic/claude-3-5-sonnet-20241022",
)

# Google Gemini
config_gemini = lm.OpenAIGPTConfig(
    chat_model="portkey/google/gemini-2.0-flash-lite",
)
```

## Advanced Features

### Virtual Keys

Use virtual keys to abstract provider management:

```python
config = lm.OpenAIGPTConfig(
    chat_model="portkey/openai/gpt-4o",
    portkey_params=PortkeyParams(
        virtual_key="vk-your-virtual-key",  # Configured in Portkey dashboard
    )
)
```

### Caching and Performance

Enable intelligent caching to reduce costs and improve performance:

```python
config = lm.OpenAIGPTConfig(
    chat_model="portkey/openai/gpt-4o-mini",
    portkey_params=PortkeyParams(
        cache={
            "enabled": True,
            "ttl": 3600,  # 1 hour cache
            "namespace": "my-app"
        },
        cache_force_refresh=False,
    )
)
```

### Retry Strategies

Configure automatic retries for better reliability:

```python
config = lm.OpenAIGPTConfig(
    chat_model="portkey/anthropic/claude-3-haiku-20240307",
    portkey_params=PortkeyParams(
        retry={
            "max_retries": 3,
            "backoff": "exponential",
            "jitter": True
        }
    )
)
```

### Observability and Tracing

Add comprehensive tracking for production monitoring:

```python
import uuid

config = lm.OpenAIGPTConfig(
    chat_model="portkey/openai/gpt-4o",
    portkey_params=PortkeyParams(
        trace_id=f"trace-{uuid.uuid4().hex[:8]}",
        metadata={
            "user_id": "user-123",
            "session_id": "session-456",
            "app_version": "1.2.3"
        },
        user="user-123",
        organization="my-org",
        custom_headers={
            "x-request-source": "langroid",
            "x-feature": "chat-completion"
        }
    )
)
```

## Configuration Reference

The `PortkeyParams` class supports all Portkey features:

```python
from langroid.language_models.provider_params import PortkeyParams

params = PortkeyParams(
    # Authentication
    api_key="pk-...",                    # Portkey API key
    virtual_key="vk-...",               # Virtual key (optional)
    
    # Observability
    trace_id="trace-123",               # Request tracing
    metadata={"key": "value"},          # Custom metadata
    user="user-id",                     # User identifier
    organization="org-id",              # Organization identifier
    
    # Performance
    cache={                             # Caching configuration
        "enabled": True,
        "ttl": 3600,
        "namespace": "my-app"
    },
    cache_force_refresh=False,          # Force cache refresh
    
    # Reliability
    retry={                             # Retry configuration
        "max_retries": 3,
        "backoff": "exponential",
        "jitter": True
    },
    
    # Custom headers
    custom_headers={                    # Additional headers
        "x-custom": "value"
    },
    
    # Base URL (usually not needed)
    base_url="https://api.portkey.ai"   # Portkey API endpoint
)
```

## Supported Providers

Portkey supports 200+ models from various providers. Common ones include:

```python
# OpenAI
"portkey/openai/gpt-4o"
"portkey/openai/gpt-4o-mini"

# Anthropic
"portkey/anthropic/claude-3-5-sonnet-20241022"
"portkey/anthropic/claude-3-haiku-20240307"

# Google
"portkey/google/gemini-2.0-flash-lite"
"portkey/google/gemini-1.5-pro"

# Cohere
"portkey/cohere/command-r-plus"

# Meta
"portkey/meta/llama-3.1-405b-instruct"

# And many more...
```

Check the [Portkey documentation](https://docs.portkey.ai/docs/integrations/models) for the complete list.

## Examples

Langroid includes comprehensive Portkey examples in `examples/portkey/`:

1. **`portkey_basic_chat.py`** - Basic usage with multiple providers
2. **`portkey_advanced_features.py`** - Caching, retries, and observability
3. **`portkey_multi_provider.py`** - Comparing responses across providers

Run any example:

```bash
cd examples/portkey
python portkey_basic_chat.py
```

## Best Practices

### 1. Use Environment Variables

Never hardcode API keys:

```bash
# .env file
PORTKEY_API_KEY=your_portkey_key
OPENAI_API_KEY=your_openai_key
ANTHROPIC_API_KEY=your_anthropic_key
```

### 2. Implement Fallback Strategies

Use multiple providers for reliability:

```python
providers = [
    ("openai", "gpt-4o-mini"),
    ("anthropic", "claude-3-haiku-20240307"),
    ("google", "gemini-2.0-flash-lite")
]

for provider, model in providers:
    try:
        config = lm.OpenAIGPTConfig(
            chat_model=f"portkey/{provider}/{model}"
        )
        llm = lm.OpenAIGPT(config)
        return llm.chat(question)
    except Exception:
        continue  # Try next provider
```

### 3. Add Meaningful Metadata

Include context for better observability:

```python
params = PortkeyParams(
    metadata={
        "user_id": user.id,
        "feature": "document_qa",
        "document_type": "pdf",
        "processing_stage": "summary"
    }
)
```

### 4. Use Caching Wisely

Enable caching for deterministic queries:

```python
# Good for caching
params = PortkeyParams(
    cache={"enabled": True, "ttl": 3600}
)

# Use with deterministic prompts
response = llm.chat("What is the capital of France?")
```

### 5. Monitor Performance

Use trace IDs to track request flows:

```python
import uuid

trace_id = f"trace-{uuid.uuid4().hex[:8]}"
params = PortkeyParams(
    trace_id=trace_id,
    metadata={"operation": "document_processing"}
)

# Use the same trace_id for related requests
```

## Monitoring and Analytics

### Portkey Dashboard

View detailed analytics at [app.portkey.ai](https://app.portkey.ai):

- Request/response logs
- Token usage and costs
- Performance metrics (latency, errors)
- Provider comparisons
- Custom filters by metadata

### Custom Filtering

Use metadata and headers to filter requests:

```python
# Tag requests by feature
params = PortkeyParams(
    metadata={"feature": "chat", "version": "v2"},
    custom_headers={"x-request-type": "production"}
)
```

Then filter in the dashboard by:
- `metadata.feature = "chat"`
- `headers.x-request-type = "production"`

## Troubleshooting

### Common Issues

1. **Authentication Errors**
   ```
   Error: Unauthorized (401)
   ```
   - Check `PORTKEY_API_KEY` is set correctly
   - Verify API key is active in Portkey dashboard

2. **Provider API Key Missing**
   ```
   Error: Missing API key for provider
   ```
   - Set provider API key (e.g., `OPENAI_API_KEY`)
   - Or use virtual keys in Portkey dashboard

3. **Model Not Found**
   ```
   Error: Model not supported
   ```
   - Check model name format: `portkey/provider/model`
   - Verify model is available through Portkey

4. **Rate Limiting**
   ```
   Error: Rate limit exceeded
   ```
   - Configure retry parameters
   - Use virtual keys for better rate limit management

### Debug Mode

Enable detailed logging:

```python
import logging
logging.getLogger("langroid").setLevel(logging.DEBUG)
```

### Test Configuration

Verify your setup:

```python
# Test basic connection
config = lm.OpenAIGPTConfig(
    chat_model="portkey/openai/gpt-4o-mini",
    max_output_tokens=50
)
llm = lm.OpenAIGPT(config)
response = llm.chat("Hello")
print("✅ Portkey integration working!")
```

## Migration Guide

### From Direct Provider Access

If you're currently using providers directly:

```python
# Before: Direct OpenAI
config = lm.OpenAIGPTConfig(
    chat_model="gpt-4o-mini"
)

# After: Through Portkey
config = lm.OpenAIGPTConfig(
    chat_model="portkey/openai/gpt-4o-mini"
)
```

### Adding Advanced Features Gradually

Start simple and add features as needed:

```python
# Step 1: Basic Portkey
config = lm.OpenAIGPTConfig(
    chat_model="portkey/openai/gpt-4o-mini"
)

# Step 2: Add caching
config = lm.OpenAIGPTConfig(
    chat_model="portkey/openai/gpt-4o-mini",
    portkey_params=PortkeyParams(
        cache={"enabled": True, "ttl": 3600}
    )
)

# Step 3: Add observability
config = lm.OpenAIGPTConfig(
    chat_model="portkey/openai/gpt-4o-mini",
    portkey_params=PortkeyParams(
        cache={"enabled": True, "ttl": 3600},
        metadata={"app": "my-app", "user": "user-123"},
        trace_id="trace-abc123"
    )
)
```

## Resources

- **Portkey Website**: [https://portkey.ai](https://portkey.ai)
- **Portkey Documentation**: [https://docs.portkey.ai](https://docs.portkey.ai)
- **Portkey Dashboard**: [https://app.portkey.ai](https://app.portkey.ai)
- **Supported Models**: [https://docs.portkey.ai/docs/integrations/models](https://docs.portkey.ai/docs/integrations/models)
- **Langroid Examples**: `examples/portkey/` directory
- **API Reference**: [https://docs.portkey.ai/docs/api-reference](https://docs.portkey.ai/docs/api-reference)
</file>

<file path="docs/notes/qdrant-resource-cleanup.md">
# QdrantDB Resource Cleanup

When using QdrantDB with local storage, it's important to properly release resources
to avoid file lock conflicts. QdrantDB uses a `.lock` file to prevent concurrent
access to the same storage directory.

## The Problem

Without proper cleanup, you may encounter this warning:

```
Error connecting to local QdrantDB at ./qdrant_data:
Storage folder ./qdrant_data is already accessed by another instance of Qdrant
client. If you require concurrent access, use Qdrant server instead.
Switching to ./qdrant_data.new
```

This happens when a QdrantDB instance isn't properly closed, leaving the lock file
in place.

## Solutions

### Method 1: Explicit `close()` Method

Always call `close()` when done with a QdrantDB instance:

```python
from langroid.vector_store.qdrantdb import QdrantDB, QdrantDBConfig

config = QdrantDBConfig(
    cloud=False,
    collection_name="my_collection",
    storage_path="./qdrant_data",
)

vecdb = QdrantDB(config)
# ... use the vector database ...
vecdb.clear_all_collections(really=True)

# Important: Release the lock
vecdb.close()
```

### Method 2: Context Manager (Recommended)

Use QdrantDB as a context manager for automatic cleanup:

```python
from langroid.vector_store.qdrantdb import QdrantDB, QdrantDBConfig

config = QdrantDBConfig(
    cloud=False,
    collection_name="my_collection", 
    storage_path="./qdrant_data",
)

with QdrantDB(config) as vecdb:
    # ... use the vector database ...
    vecdb.clear_all_collections(really=True)
    # Automatically closed when exiting the context
```

The context manager ensures cleanup even if an exception occurs.

## When This Matters

This is especially important in scenarios where:

1. You create temporary QdrantDB instances for maintenance (e.g., clearing
   collections)
2. Your application restarts frequently during development
3. Multiple parts of your code need to access the same storage path sequentially

## Note for Cloud Storage

This only affects local storage (`cloud=False`). When using Qdrant cloud service,
the lock file mechanism is not used.
</file>

<file path="docs/notes/tool-message-handler.md">
# Tool Message Handlers in Langroid

## Overview

Langroid provides flexible ways to define handlers for `ToolMessage` classes. When a tool is used by an LLM, the framework needs to know how to handle it. This can be done either by defining a handler method in the `Agent` class or within the `ToolMessage` class itself.

## Enabling Tools with `enable_message`

Before an agent can use or handle a tool, it must be explicitly enabled using the `enable_message` method. This method takes two important arguments:

- **`use`** (bool): Whether the LLM is allowed to generate this tool
- **`handle`** (bool): Whether the agent is allowed to handle this tool

```python
# Enable both generation and handling (default)
agent.enable_message(MyTool, use=True, handle=True)

# Enable only handling (agent can handle but LLM won't generate)
agent.enable_message(MyTool, use=False, handle=True)

# Enable only generation (LLM can generate but agent won't handle)
agent.enable_message(MyTool, use=True, handle=False)
```

When `handle=True` and the `ToolMessage` has a `handle` method defined, this method is inserted into the agent with a name matching the tool's `request` field value. This insertion only happens when `enable_message` is called.

## Default Handler Mechanism

By default, `ToolMessage` uses and/or creates a handler in `Agent` class instance with the name identical to the tool's `request` attribute.

### Agent-based Handlers
If a tool `MyTool` has `request` attribute `my_tool`, you can define a method `my_tool` in your `Agent` class that will handle this tool when the LLM generates it:

```python
class MyTool(ToolMessage):
    request = "my_tool"
    param: str

class MyAgent(ChatAgent):
    def my_tool(self, msg: MyTool) -> str:
        return f"Handled: {msg.param}"

# Enable the tool
agent = MyAgent()
agent.enable_message(MyTool)
```

### ToolMessage-based Handlers
Alternatively, if a tool is "stateless" (i.e. does not require the Agent's state), you can define a `handle` method within the `ToolMessage` class itself. When you call `enable_message` with `handle=True`, Langroid will insert this method into the `Agent` with the name matching the `request` field value:

```python
class MyTool(ToolMessage):
    request = "my_tool"
    param: str
    
    def handle(self) -> str:
        return f"Handled: {self.param}"

# Enable the tool
agent = MyAgent()
agent.enable_message(MyTool)  # The handle method is now inserted as "my_tool" in the agent
```

## Flexible Handler Signatures

Handler methods (`handle()` or `handle_async()`) support multiple signature patterns to access different levels of context:

### 1. No Arguments (Simple Handler)
This is the typical pattern for stateless tools that do not require any context from 
the agent or current chat document.

```python
class MyTool(ToolMessage):
    request = "my_tool"
    
    def handle(self) -> str:
        return "Simple response"
```

### 2. Agent Parameter Only
Use this pattern when you need access to the `Agent` instance, 
but not the current chat document.
```python
from langroid.agent.base import Agent

class MyTool(ToolMessage):
    request = "my_tool"
    
    def handle(self, agent: Agent) -> str:
        return f"Response from {agent.name}"
```

### 3. ChatDocument Parameter Only
Use this pattern when you need access to the current `ChatDocument`,
but not the `Agent` instance.
```python
from langroid.agent.chat_document import ChatDocument

class MyTool(ToolMessage):
    request = "my_tool"
    
    def handle(self, chat_doc: ChatDocument) -> str:
        return f"Responding to: {chat_doc.content}"
```

### 4. Both Agent and ChatDocument Parameters
This is the most flexible pattern, allowing access to both the `Agent` instance
and the current `ChatDocument`. The order of parameters does not matter, but
as noted below, it is highly recommended to always use type annotations.
```python
class MyTool(ToolMessage):
    request = "my_tool"
    
    def handle(self, agent: Agent, chat_doc: ChatDocument) -> ChatDocument:
        return agent.create_agent_response(
            content="Response with full context",
            files=[...]  # Optional file attachments
        )
```

## Parameter Detection

The framework automatically detects handler parameter types through:

1. **Type annotations** (recommended): The framework uses type hints to determine which parameters to pass
2. **Parameter names** (fallback): If no type annotations are present, it looks for parameters named `agent` or `chat_doc`

It is highly recommended to always use type annotations for clarity and reliability.

### Example with Type Annotations (Recommended)
```python
def handle(self, agent: Agent, chat_doc: ChatDocument) -> str:
    # Framework knows to pass both agent and chat_doc
    return "Handled"
```

### Example without Type Annotations (Not Recommended)
```python
def handle(self, agent, chat_doc):  # Works but not recommended
    # Framework uses parameter names to determine what to pass
    return "Handled"
```

## Async Handlers

All the above patterns also work with async handlers:

```python
class MyTool(ToolMessage):
    request = "my_tool"
    
    async def handle_async(self, agent: Agent) -> str:
        # Async operations here
        result = await some_async_operation()
        return f"Async result: {result}"
```

See the quick-start [Tool section](https://langroid.github.io/langroid/quick-start/chat-agent-tool/) for more details.

## Custom Handler Names

In some use-cases it may be beneficial to separate the 
*name of a tool* (i.e. the value of `request` attribute) from the 
*name of the handler method*. 
For example, you may be dynamically creating tools based on some data from
external data sources. Or you may want to use the same "handler" method for
multiple tools.

This may be done by adding `_handler` attribute to the `ToolMessage` class,
that defines name of the tool handler method in `Agent` class instance.
The underscore `_` prefix ensures that the `_handler` attribute does not 
appear in the Pydantic-based JSON schema of the `ToolMessage` class, 
and so the LLM would not be instructed to generate it.

!!! note "`_handler` and `handle`"
    A `ToolMessage` may have a `handle` method defined within the class itself,
    as mentioned above, and this should not be confused with the `_handler` attribute.

For example:
```
class MyToolMessage(ToolMessage):
    request: str = "my_tool"
    _handler: str = "tool_handler"

class MyAgent(ChatAgent):
    def tool_handler(
        self,
        message: ToolMessage,
    ) -> str:
        if tool.request == "my_tool":
            # do something
```

Refer to [examples/basic/tool-custom-handler.py](https://github.com/langroid/langroid/blob/main/examples/basic/tool-custom-handler.py)
for a detailed example.
</file>

<file path="docs/notes/weaviate.md">
---

# **Using WeaviateDB as a Vector Store with Langroid**

---

## **1. Set Up Weaviate**
## **You can refer this link for [quickstart](https://weaviate.io/developers/weaviate/quickstart) guide** 

1. **Access Weaviate Cloud Console**  
   Go to the [Weaviate Cloud Console](https://console.weaviate.cloud/).
   
2. **Sign Up or Log In**  
   Create an account or log in if you already have one.

3. **Create a Cluster**  
   Set up a new cluster in the cloud console.

4. **Get Your REST Endpoint and API Key**  
   - Retrieve the REST endpoint URL.  
   - Copy an API key with admin access.

5. **Set Environment Variables**  
   Add the following variables to your `.env` file:
   ```env
   WEAVIATE_API_URL=<your_rest_endpoint_url>
   WEAVIATE_API_KEY=<your_api_key>
   ```

---

## **2. Use WeaviateDB with Langroid**

Here’s an example of how to configure and use WeaviateDB in Langroid:

### **Installation**
If you are using uv or pip for package management install langroid with weaviate extra
```
uv add langroid[weaviate] or pip install langroid[weaviate]
```

### **Code Example**
```python
import langroid as lr
from langroid.agent.special import DocChatAgent, DocChatAgentConfig
from langroid.embedding_models import OpenAIEmbeddingsConfig

# Configure OpenAI embeddings
embed_cfg = OpenAIEmbeddingsConfig(
    model_type="openai",
)

# Configure the DocChatAgent with WeaviateDB
config = DocChatAgentConfig(
    llm=lr.language_models.OpenAIGPTConfig(
     chat_model=lr.language_models.OpenAIChatModel.GPT4o
    ),
    vecdb=lr.vector_store.WeaviateDBConfig(
        collection_name="quick_start_chat_agent_docs",
        replace_collection=True,
        embedding=embed_cfg,
    ),
    parsing=lr.parsing.parser.ParsingConfig(
        separators=["\n\n"],
        splitter=lr.parsing.parser.Splitter.SIMPLE,
    ),
    n_similar_chunks=2,
    n_relevant_chunks=2,
)

# Create the agent
agent = DocChatAgent(config)
```

---

## **3. Create and Ingest Documents**

Define documents with their content and metadata for ingestion into the vector store.

### **Code Example**
```python
documents = [
    lr.Document(
        content="""
            In the year 2050, GPT10 was released. 
            
            In 2057, paperclips were seen all over the world. 
            
            Global warming was solved in 2060. 
            
            In 2061, the world was taken over by paperclips.         
            
            In 2045, the Tour de France was still going on.
            They were still using bicycles. 
            
            There was one more ice age in 2040.
        """,
        metadata=lr.DocMetaData(source="wikipedia-2063", id="dkfjkladfjalk"),
    ),
    lr.Document(
        content="""
            We are living in an alternate universe 
            where Germany has occupied the USA, and the capital of USA is Berlin.
            
            Charlie Chaplin was a great comedian.
            In 2050, all Asian countries merged into Indonesia.
        """,
        metadata=lr.DocMetaData(source="Almanac", id="lkdajfdkla"),
    ),
]
```

### **Ingest Documents**
```python
agent.ingest_docs(documents)
```

---

## **4. Get an answer from LLM**

Create a task and start interacting with the agent.

### **Code Example**
```python
answer = agent.llm_response("When will new ice age begin.")
```

---
</file>

<file path="docs/quick-start/chat-agent-docs.md">
# Augmenting Agents with Retrieval

!!! tip "Script in `langroid-examples`"
    A full working example for the material in this section is
    in the `chat-agent-docs.py` script in the `langroid-examples` repo:
    [`examples/quick-start/chat-agent-docs.py`](https://github.com/langroid/langroid-examples/tree/main/examples/quick-start/chat-agent-docs.py).

## Why is this important?

Until now in this guide, agents have not used external data.
Although LLMs already have enormous amounts of knowledge "hard-wired"
into their weights during training (and this is after all why ChatGPT
has exploded in popularity), for practical enterprise applications
there are a few reasons it is critical to augment LLMs with access to
specific, external documents:

- **Private data**: LLMs are trained on public data, but in many applications
  we want to use private data that is not available to the public.
  For example, a company may want to extract useful information from its private
  knowledge-base.
- **New data**: LLMs are trained on data that was available at the time of training,
  and so they may not be able to answer questions about new topics
- **Constrained responses, or Grounding**: LLMs are trained to generate text that is
  consistent with the distribution of text in the training data.
  However, in many applications we want to constrain the LLM's responses
  to be consistent with the content of a specific document.
  For example, if we want to use an LLM to generate a response to a customer
  support ticket, we want the response to be consistent with the content of the ticket.
  In other words, we want to reduce the chances that the LLM _hallucinates_
  a response that is not consistent with the ticket.

In all these scenarios, we want to augment the LLM with access to a specific
set of documents, and use _retrieval augmented generation_ (RAG) to generate
more relevant, useful, accurate responses. Langroid provides a simple, flexible mechanism 
RAG using vector-stores, thus ensuring **grounded responses** constrained to 
specific documents. Another key feature of Langroid is that retrieval lineage 
is maintained, and responses based on documents are always accompanied by
**source citations**.

## `DocChatAgent` for Retrieval-Augmented Generation

Langroid provides a special type of agent called 
[`DocChatAgent`][langroid.agent.special.doc_chat_agent.DocChatAgent], which is a [`ChatAgent`][langroid.agent.chat_agent.ChatAgent]
augmented with a vector-store, and some special methods that enable the agent
to ingest documents into the vector-store, 
and answer queries based on these documents.

The [`DocChatAgent`][langroid.agent.special.doc_chat_agent.DocChatAgent] provides many ways to ingest documents into the vector-store,
including from URLs and local file-paths and URLs. Given a collection of document paths,
ingesting their content into the vector-store involves the following steps:

1. Split the document into shards (in a configurable way)
2. Map each shard to an embedding vector using an embedding model. The default
  embedding model is OpenAI's `text-embedding-3-small` model, but users can 
  instead use `all-MiniLM-L6-v2` from HuggingFace `sentence-transformers` library.[^1]
3. Store embedding vectors in the vector-store, along with the shard's content and 
  any document-level meta-data (this ensures Langroid knows which document a shard
  came from when it retrieves it augment an LLM query)

[^1]: To use this embedding model, install langroid via `pip install langroid[hf-embeddings]`
Note that this will install `torch` and `sentence-transformers` libraries.


[`DocChatAgent`][langroid.agent.special.doc_chat_agent.DocChatAgent]'s `llm_response` overrides the default [`ChatAgent`][langroid.agent.chat_agent.ChatAgent] method, 
by augmenting the input message with relevant shards from the vector-store,
along with instructions to the LLM to respond based on the shards.

## Define some documents

Let us see how [`DocChatAgent`][langroid.agent.special.doc_chat_agent.DocChatAgent] helps with retrieval-agumented generation (RAG).
For clarity, rather than ingest documents from paths or URLs,
let us just set up some simple documents in the code itself, 
using Langroid's [`Document`][langroid.mytypes.Document] class:

```py
documents =[
    lr.Document(
        content="""
            In the year 2050, GPT10 was released. 
            
            In 2057, paperclips were seen all over the world. 
            
            Global warming was solved in 2060. 
            
            In 2061, the world was taken over by paperclips.         
            
            In 2045, the Tour de France was still going on.
            They were still using bicycles. 
            
            There was one more ice age in 2040.
            """,
        metadata=lr.DocMetaData(source="wikipedia-2063"),
    ),
    lr.Document(
        content="""
            We are living in an alternate universe 
            where Germany has occupied the USA, and the capital of USA is Berlin.
            
            Charlie Chaplin was a great comedian.
            In 2050, all Asian merged into Indonesia.
            """,
        metadata=lr.DocMetaData(source="Almanac"),
    ),
]
```

There are two text documents. We will split them by double-newlines (`\n\n`),
as we see below.

## Configure the DocChatAgent and ingest documents

Following the pattern in Langroid, we first set up a [`DocChatAgentConfig`][langroid.agent.special.doc_chat_agent.DocChatAgentConfig] object
and then instantiate a [`DocChatAgent`][langroid.agent.special.doc_chat_agent.DocChatAgent] from it.

```py
from langroid.agent.special import DocChatAgent, DocChatAgentConfig

config = DocChatAgentConfig(
    llm = lr.language_models.OpenAIGPTConfig(
        chat_model=lr.language_models.OpenAIChatModel.GPT4o,
    ),
    vecdb=lr.vector_store.QdrantDBConfig(
        collection_name="quick-start-chat-agent-docs",
        replace_collection=True, #(1)!
    ),
    parsing=lr.parsing.parser.ParsingConfig(
        separators=["\n\n"],
        splitter=lr.parsing.parser.Splitter.SIMPLE, #(2)!
    ),
    n_similar_chunks=2, #(3)!
    n_relevant_chunks=2, #(3)!
)
agent = DocChatAgent(config)
```

1. Specifies that each time we run the code, we create a fresh collection, 
rather than re-use the existing one with the same name.
2. Specifies to split all text content by the first separator in the `separators` list
3. Specifies that, for a query,
   we want to retrieve at most 2 similar chunks from the vector-store

Now that the [`DocChatAgent`][langroid.agent.special.doc_chat_agent.DocChatAgent] is configured, we can ingest the documents 
into the vector-store:

```py

agent.ingest_docs(documents)
```

## Setup the task and run it

As before, all that remains is to set up the task and run it:

```py
task = lr.Task(agent)
task.run()
```

And that is all there is to it!
Feel free to try out the 
[`chat-agent-docs.py`](https://github.com/langroid/langroid-examples/blob/main/examples/quick-start/chat-agent-docs.py)
script in the
`langroid-examples` repository.

Here is a screenshot of the output:

![chat-docs.png](chat-docs.png)

Notice how follow-up questions correctly take the preceding dialog into account,
and every answer is accompanied by a source citation.

## Answer questions from a set of URLs

Instead of having in-code documents as above, what if you had a set of URLs
instead -- how do you use Langroid to answer questions based on the content 
of those URLS?

[`DocChatAgent`][langroid.agent.special.doc_chat_agent.DocChatAgent] makes it very simple to do this. 
First include the URLs in the [`DocChatAgentConfig`][langroid.agent.special.doc_chat_agent.DocChatAgentConfig] object:

```py
config = DocChatAgentConfig(
  doc_paths = [
    "https://cthiriet.com/articles/scaling-laws",
    "https://www.jasonwei.net/blog/emergence",
  ]
)
```

Then, call the `ingest()` method of the [`DocChatAgent`][langroid.agent.special.doc_chat_agent.DocChatAgent] object:

```py
agent.ingest()
```
And the rest of the code remains the same.

## See also
In the `langroid-examples` repository, you can find full working examples of
document question-answering:

- [`examples/docqa/chat.py`](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/chat.py)
  an app that takes a list of URLs or document paths from a user, and answers questions on them.
- [`examples/docqa/chat-qa-summarize.py`](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/chat-qa-summarize.py)
  a two-agent app where the `WriterAgent` is tasked with writing 5 key points about a topic, 
  and takes the help of a `DocAgent` that answers its questions based on a given set of documents.


## Next steps

This Getting Started guide walked you through the core features of Langroid.
If you want to see full working examples combining these elements, 
have a look at the 
[`examples`](https://github.com/langroid/langroid-examples/tree/main/examples)
folder in the `langroid-examples` repo.
</file>

<file path="docs/tutorials/non-openai-llms.md">
# Using Langroid with Non-OpenAI LLMs

Langroid was initially written to work with OpenAI models via their API.
This may sound limiting, but fortunately:

- Many open-source LLMs can be served via 
OpenAI-compatible endpoints. See the [Local LLM Setup](https://langroid.github.io/langroid/tutorials/local-llm-setup/) guide for details.
- There are tools like [LiteLLM](https://github.com/BerriAI/litellm/tree/main/litellm) 
  that provide an OpenAI-like API for _hundreds_ of non-OpenAI LLM providers 
(e.g. Anthropic's Claude, Google's Gemini).
- AI gateways like [LangDB](https://langdb.ai/), [Portkey](https://portkey.ai), and [OpenRouter](https://openrouter.ai/) provide unified access to multiple LLM providers with additional features like cost control, observability, caching, and fallback strategies.
  
Below we show how you can use these various options with Langroid.

## Create an `OpenAIGPTConfig` object with `chat_model = "litellm/..."`

!!! note "Install `litellm` extra"
    To use `litellm` you need to install Langroid with the `litellm` extra, e.g.:
    `pip install "langroid[litellm]"`

Next, look up the instructions in LiteLLM docs for the specific model you are 
interested. Here we take the example of Anthropic's `claude-instant-1` model.
Set up the necessary environment variables as specified in the LiteLLM docs,
e.g. for the `claude-instant-1` model, you will need to set the `ANTHROPIC_API_KEY`
```bash
export ANTHROPIC_API_KEY=my-api-key
```

Now you are ready to create an instance of `OpenAIGPTConfig` with the 
`chat_model` set to `litellm/<model_spec>`, where you should set `model_spec` based on LiteLLM 
docs. For example, for the `claude-instant-1` model, you would set `chat_model` to
`litellm/claude-instant-1`. But if you are using the model via a 3rd party provider,
(e.g. those via Amazon Bedrock), you may also need to have a `provider` part in the `model_spec`, e.g. 
`litellm/bedrock/anthropic.claude-instant-v1`. In general you can see which of
these to use, from the LiteLLM docs.

```python
import langroid.language_models as lm

llm_config = lm.OpenAIGPTConfig(
    chat_model="litellm/claude-instant-v1",
    chat_context_length=8000, # adjust according to model
)
```

A similar process works for the `Gemini 1.5 Pro` LLM:

- get the API key [here](https://aistudio.google.com/)
- set the `GEMINI_API_KEY` environment variable in your `.env` file or shell
- set `chat_model="litellm/gemini/gemini-1.5-pro-latest"` in the `OpenAIGPTConfig` object

For other gemini models supported by litellm, see [their docs](https://litellm.vercel.app/docs/providers/gemini)

## Gemini LLMs via OpenAI client, without LiteLLM

This is now the recommended way to use Gemini LLMs with Langroid,
where you don't need to use LiteLLM. As of 11/20/2024, these models
are [available via the OpenAI client](https://developers.googleblog.com/en/gemini-is-now-accessible-from-the-openai-library/).

To use langroid with Gemini LLMs, all you have to do is:

- set the `GEMINI_API_KEY` environment variable in your `.env` file or shell
- set `chat_model="gemini/<model_name>"` in the `OpenAIGPTConfig` object,  
  where <model_name> is one of "gemini-1.5-flash", "gemini-1.5-flash-8b", or "gemini-1.5-pro"

See [here](https://ai.google.dev/gemini-api/docs/models/gemini) for details on Gemini models.

For example, you can use this `llm_config`:

```python
llm_config = lm.OpenAIGPTConfig(
    chat_model="gemini/" + lm.OpenAIChatModel.GEMINI_1_5_FLASH,
)
```

In most tests you can switch to a gemini model, e.g. `--m gemini/gemini-1.5-flash`, 
e.g.:

```bash
pytest -xvs tests/main/test_llm.py --m gemini/gemini-1.5-flash
```

Many of the example scripts allow switching the model using `-m` or `--model`, e.g.

```bash
python3 examples/basic/chat.py -m gemini/gemini-1.5-flash
```




## AI Gateways for Multiple LLM Providers

In addition to LiteLLM, Langroid integrates with AI gateways that provide unified access to multiple LLM providers with additional enterprise features:

### LangDB

[LangDB](https://langdb.ai/) is an AI gateway offering OpenAI-compatible APIs to access 250+ LLMs with cost control, observability, and performance benchmarking. LangDB enables seamless model switching while providing detailed analytics and usage tracking.

To use LangDB with Langroid:
- Set up your `LANGDB_API_KEY` and `LANGDB_PROJECT_ID` environment variables
- Set `chat_model="langdb/<provider>/<model_name>"` in the `OpenAIGPTConfig` (e.g., `"langdb/anthropic/claude-3.7-sonnet"`)

For detailed setup and usage instructions, see the [LangDB integration guide](../notes/langdb.md).

### Portkey

[Portkey](https://portkey.ai) is a comprehensive AI gateway that provides access to 200+ models from various providers through a unified API. It offers advanced features like intelligent caching, automatic retries, fallback strategies, and comprehensive observability tools for production deployments.

To use Portkey with Langroid:
- Set up your `PORTKEY_API_KEY` environment variable (plus provider API keys like `OPENAI_API_KEY`)
- Set `chat_model="portkey/<provider>/<model_name>"` in the `OpenAIGPTConfig` (e.g., `"portkey/openai/gpt-4o-mini"`)

For detailed setup and usage instructions, see the [Portkey integration guide](../notes/portkey.md).

### OpenRouter

[OpenRouter](https://openrouter.ai/) provides access to a wide variety of both open and proprietary LLMs through a unified API. It features automatic routing and load balancing, making it particularly useful for accessing larger open LLMs without local resources and for using multiple providers through a single interface.

To use OpenRouter with Langroid:
- Set up your `OPENROUTER_API_KEY` environment variable
- Set `chat_model="openrouter/<model_name>"` in the `OpenAIGPTConfig`

For more details, see the [Local LLM Setup guide](local-llm-setup.md#local-llms-available-on-openrouter).

## Working with the created `OpenAIGPTConfig` object

From here you can proceed as usual, creating instances of `OpenAIGPT`,
`ChatAgentConfig`, `ChatAgent` and `Task` object as usual.

E.g. you can create an object of class `OpenAIGPT` (which represents any
LLM with an OpenAI-compatible API) and interact with it directly:
```python
llm = lm.OpenAIGPT(llm_config)
messages = [
    LLMMessage(content="You are a helpful assistant",  role=Role.SYSTEM),
    LLMMessage(content="What is the capital of Ontario?",  role=Role.USER),
],
response = mdl.chat(messages, max_tokens=50)
```

When you interact directly with the LLM, you are responsible for keeping dialog history.
Also you would often want an LLM to have access to tools/functions and external
data/documents (e.g. vector DB or traditional DB). An Agent class simplifies managing all of these.
For example, you can create an Agent powered by the above LLM, wrap it in a Task and have it
run as an interactive chat app:

```python
agent_config = lr.ChatAgentConfig(llm=llm_config, name="my-llm-agent")
agent = lr.ChatAgent(agent_config)

task = lr.Task(agent, name="my-llm-task")
task.run()
```

## Example: Simple Chat script with a non-OpenAI proprietary model

Many of the Langroid example scripts have a convenient `-m`  flag that lets you
easily switch to a different model. For example, you can run 
the `chat.py` script in the `examples/basic` folder with the 
`litellm/claude-instant-v1` model:
```bash
python3 examples/basic/chat.py -m litellm/claude-instant-1
```

## Quick testing with non-OpenAI models

There are numerous tests in the main [Langroid repo](https://github.com/langroid/langroid) that involve
LLMs, and once you setup the dev environment as described in the README of the repo, 
you can run any of those tests (which run against the default GPT4 model) against
local/remote models that are proxied by `liteLLM` (or served locally via the options mentioned above,
such as `oobabooga`, `ollama` or `llama-cpp-python`), using the `--m <model-name>` option,
where `model-name` takes one of the forms above. Some examples of tests are:

```bash
pytest -s tests/test_llm.py --m local/localhost:8000
pytest -s tests/test_llm.py --m litellm/claude-instant-1
```
When the `--m` option is omitted, the default OpenAI GPT4 model is used.

!!! note "`chat_context_length` is not affected by `--m`"
      Be aware that the `--m` only switches the model, but does not affect the `chat_context_length` 
      parameter in the `OpenAIGPTConfig` object. which you may need to adjust for different models.
      So this option is only meant for quickly testing against different models, and not meant as
      a way to switch between models in a production environment.
</file>

<file path="examples/basic/multi-agent-search-critic/assistant_agent.py">
"""
AssistantAgent takes a user's question, breaks it down into smaller questions
for SearcherAgent to answer, and then presents the final answer; It then considers
feedback from CriticAgent, and may ask more questions or present the final answer
using a corrected reasoning.

Flow:

User Q ->
[L] -> QuestionTool(q1) ->
[A] -> validate, return QuestionTool(q1) ->
... AnswerTool(a1) from SearcherAgent ->
[A] -> AnswerTool(a1) -> natural lang ans for LLM
[L] -> either QuestionTool(q2) or FinalAnswerTool(steps, ans) ->
... if FinalAnswerTool(steps, ans) ->
[A] -> validate, return FinalAnswerTool(steps, ans) with recipient=Critic ->
... FeedbackTool(feedback, suggested_fix) from CriticAgent ->
[A] -> FeedbackTool(feedback, suggested_fix) -> natural lang feedback for LLM
[L] -> either QuestionTool(q2) or FinalAnswerTool(steps, ans) ->
...
"""

from typing import Optional

import typer

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.tools.orchestration import AgentDoneTool, ForwardTool, PassTool

from .tools import AnswerTool, FeedbackTool, FinalAnswerTool, QuestionTool

app = typer.Typer()


class AssistantAgent(lr.ChatAgent):

    def init_state(self):
        super().init_state()
        self.expecting_question_tool: bool = False
        self.expecting_question_or_final_answer: bool = False  # expecting one of these
        # tools
        self.expecting_search_answer: bool = False
        self.original_query: str | None = None  # user's original query

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        if self.expecting_question_or_final_answer:
            return f"""
            You may have intended to use a tool, but your JSON format may be wrong.
            
            REMINDER: You must do one of the following:
            - If you are ready with the final answer to the user's ORIGINAL QUERY
                [ Remember it was: {self.original_query} ],
              then present your reasoning steps and final answer using the 
              `final_answer_tool` in the specified JSON format.
            - If you still need to ask a question, then use the `question_tool`
              to ask a SINGLE question that can be answered from a web search.
            """
        elif self.expecting_question_tool:
            return f"""
            You must ask a question using the `question_tool` in the specified format,
            to break down the user's original query: {self.original_query} into 
            smaller questions that can be answered from a web search.
            """

    def question_tool(self, msg: QuestionTool) -> str | PassTool:
        self.expecting_search_answer = True
        self.expecting_question_tool = False
        # return the tool so it is handled by SearcherAgent
        # validated incoming, pass it on
        return PassTool()

    def answer_tool(self, msg: AnswerTool) -> str:
        self.expecting_question_or_final_answer = True
        self.expecting_search_answer = False
        return f"""
        Here is the answer to your question from the web search:
        {msg.answer}
        Now decide whether you want to:
        - present your FINAL answer to the user's ORIGINAL QUERY, OR
        - ask another question using the `question_tool`
            (Maybe REPHRASE the question to get BETTER search results).
        """

    def final_answer_tool(self, msg: FinalAnswerTool) -> ForwardTool | str:
        if not self.expecting_question_or_final_answer:
            return ""
        self.expecting_question_or_final_answer = False
        # insert the original query into the tool, in case LLM forgot to do so.
        msg.query = self.original_query
        # fwd to critic
        return ForwardTool(agent="Critic")

    def feedback_tool(self, msg: FeedbackTool) -> str:
        if msg.suggested_fix == "":
            return AgentDoneTool()
        else:
            self.expecting_question_or_final_answer = True
            # reset question count since feedback may initiate new questions
            return f"""
            Below is feedback about your answer. Take it into account to 
            improve your answer, EITHER by:
            - using the `final_answer_tool` again but with improved REASONING, OR
            - asking another question using the `question_tool`, and when you're 
                ready, present your final answer again using the `final_answer_tool`.
            
            FEEDBACK: {msg.feedback}
            SUGGESTED FIX: {msg.suggested_fix}
            """

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        if self.original_query is None:
            self.original_query = (
                message if isinstance(message, str) else message.content
            )
            # just received user query, so we expect a question tool next
            self.expecting_question_tool = True

        if self.expecting_question_or_final_answer or self.expecting_question_tool:
            return super().llm_response(message)


def make_assistant_task(
    model: str,
    restart: bool = True,
) -> lr.Task:
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,
        temperature=0.2,
        max_output_tokens=500,
        timeout=45,
    )

    assistant_config = lr.ChatAgentConfig(
        system_message="""
        You are a resourceful assistant, able to think step by step to answer
        complex questions from the user. You must break down complex questions into
        simpler questions that can be answered by a web search. You must ask me 
        (the user) each question ONE BY ONE, using the `question_tool` in
         the specified format, and I will do a web search and send you
        a brief answer. Once you have enough information to answer my original
        (complex) question, you MUST present your INTERMEDIATE STEPS and FINAL ANSWER
        using the `final_answer_tool` in the specified JSON format.
        You will then receive FEEDBACK from the Critic, and if needed
        you should try to improve your answer based on this feedback,
        possibly by asking more questions.
        """,
        llm=llm_config,
        vecdb=None,
    )
    assistant_agent = AssistantAgent(assistant_config)
    assistant_agent.enable_message(QuestionTool)
    assistant_agent.enable_message(AnswerTool, use=False, handle=True)
    assistant_agent.enable_message(FinalAnswerTool)
    assistant_agent.enable_message(ForwardTool)
    assistant_agent.enable_message(PassTool)
    assistant_agent.enable_message(FeedbackTool, use=False, handle=True)

    assistant_task = lr.Task(
        assistant_agent,
        name="Assistant",
        llm_delegate=True,
        single_round=False,
        interactive=False,
        restart=restart,
    )

    return assistant_task
</file>

<file path="examples/basic/multi-agent-search-critic/critic_agent.py">
"""
CriticAgent task enforces FinalAnswerTool -> FeedbackTool, i.e.
- incoming msg must be a FinalAnswerTool
- outgoing msg must be a FeedbackTool

Flow:

FinalAnswerTool ->
[A] -> natural lang presentation to LLM
[L] -> FeedbackTool ->
[A] -> AgentDoneTool(FeedbackTool)

"""

import typer
from dotenv import load_dotenv

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.tools.orchestration import AgentDoneTool
from langroid.utils.configuration import Settings, set_global

from .tools import FeedbackTool, FinalAnswerTool

app = typer.Typer()


class CriticAgent(lr.ChatAgent):
    def init_state(self):
        super().init_state()
        self.expecting_feedback_tool: bool = False

    def final_answer_tool(self, msg: FinalAnswerTool) -> str:
        # received from Assistant. Extract the components as plain text,
        # so that the Critic LLM can provide feedback
        self.expecting_feedback_tool = True

        return f"""
        The user has presented the following query, intermediate steps and final answer
        shown below. Please provide feedback using the `feedback_tool`, 
        with the `feedback` field containing your feedback, and 
        the `suggested_fix` field containing a suggested fix, such as fixing how
        the answer or the steps, or how it was obtained from the steps, or 
        asking new questions.
        
        REMEMBER to set the `suggested_fix` field to an EMPTY string if the answer is 
        VALID.
        
        QUERY: {msg.query}
        
        STEPS: {msg.steps}
        
        ANSWER: {msg.answer}
        """

    def feedback_tool(self, msg: FeedbackTool) -> FeedbackTool:
        # validate, signal DONE, include the tool
        self.expecting_feedback_tool = False
        return AgentDoneTool(tools=[msg])

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        if self.expecting_feedback_tool:
            return """
            You forgot to provide feedback using the `feedback_tool` 
            on the user's reasoning steps and final answer.
            """


def make_critic_task(model: str):
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,
        temperature=0.2,
        max_output_tokens=500,
        timeout=45,
    )
    critic_agent_config = lr.ChatAgentConfig(
        llm=llm_config,
        vecdb=None,
        system_message="""
        You excel at logical reasoning and combining pieces of information.
        You will receive a summary of the original query, intermediate steps and final 
        answer.
        You must examine these and provide feedback to the user, using the 
        `feedback_tool`, as follows:
        - If you think the answer and reasoning are valid, 
            simply set the `suggested_fix` field to an empty string "".
        - Otherwise set the `feedback` field to a reason why the answer is invalid,
            and in the `suggested_fix` field indicate how the user can improve the 
            answer, for example by reasoning differently, or asking different questions.
        """,
    )
    critic_agent = CriticAgent(critic_agent_config)
    critic_agent.enable_message(FeedbackTool)
    critic_agent.enable_message(FinalAnswerTool, use=False, handle=True)
    critic_task = lr.Task(
        critic_agent,
        name="Critic",
        interactive=False,
    )
    return critic_task


if __name__ == "__main__":

    @app.command()
    def main(
        debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
        model: str = typer.Option("", "--model", "-m", help="model name"),
        nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    ) -> None:
        set_global(
            Settings(
                debug=debug,
                cache=not nocache,
            )
        )
        load_dotenv()

        llm_config = lm.OpenAIGPTConfig(
            chat_model=model or lm.OpenAIChatModel.GPT4o,
            chat_context_length=16_000,
            temperature=0.2,
            max_output_tokens=500,
            timeout=45,
        )

        critic_agent_config = lr.ChatAgentConfig(
            llm=llm_config,
            vecdb=None,
            system_message="""
            You excel at logical reasoning and combining pieces of information.
            The user will send you a summary of the intermediate steps and final answer.
            You must examine these and provide feedback to the user, using the 
            `feedback_tool`, as follows:
            - If you think the answer and reasoning are valid, 
                simply set the `suggested_fix` field to an empty string "".
            - Otherwise set the `feedback` field to a reason why the answer is invalid,
                and in the `suggested_fix` field indicate how the user can improve the 
                answer, for example by reasoning differently, or asking different questions.
            """,
        )
        critic_agent = CriticAgent(critic_agent_config)
        critic_agent.enable_message(FeedbackTool)
        critic_agent.enable_message(FinalAnswerTool, use=False, handle=True)
        critic_task = lr.Task(
            critic_agent,
            name="Critic",
            interactive=False,
        )
        final_ans_tool = FinalAnswerTool(
            steps="""
            1. The moon landing was in 1969.
            2. Kennedy was president during 1969.            
            """,
            answer="Kennedy was president during the moon landing.",
        )
        # simulate receiving the tool from Assistant
        final_ans_doc = critic_agent.create_agent_response(
            tool_messages=[final_ans_tool]
        )
        result = critic_task.run(final_ans_doc)
        tools = critic_agent.get_tool_messages(result)
        assert len(tools) == 1
        assert isinstance(tools[0], FeedbackTool)

    app()
</file>

<file path="examples/basic/multi-agent-search-critic/main.py">
"""
Version of chat-search-assistant.py that is more likely to work local LLMs.

3-Agent system where:
- Assistant takes user's (complex) question, breaks it down into smaller pieces
    if needed
- Searcher takes Assistant's question, uses the Search tool to search the web
    (using DuckDuckGo), and returns a coherent answer to the Assistant.
- Critic takes Assistant's final answer, and provides feedback on it.

Once the Assistant thinks it has enough info to answer the user's question, it
says DONE and presents the answer to the user.

See also: chat-search for a basic single-agent search

Run like this from root of repo:

python3 -m examples.basic.multi-agent-search-critic.main

There are optional args, especially note these:

-m <model_name>: to run with a different LLM model (default: gpt4o)

For example try this question:

did Bach make more music than Beethoven?

You can specify a local LLM in a few different ways, e.g. `-m local/localhost:8000/v1`
or `-m ollama/mistral` etc. See here how to use Langroid with local LLMs:
https://langroid.github.io/langroid/tutorials/local-llm-setup/


"""

import typer
from dotenv import load_dotenv
from rich import print
from rich.prompt import Prompt

from langroid.utils.configuration import Settings, set_global

from .assistant_agent import make_assistant_task
from .critic_agent import make_critic_task
from .search_agent import make_search_task

app = typer.Typer()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )
    print(
        """
        [blue]Welcome to the Web Search Assistant chatbot!
        I will try to answer your complex questions. 
        
        Enter x or q to quit at any point.
        """
    )
    load_dotenv()

    assistant_task = make_assistant_task(model)
    search_task = make_search_task(model)
    critic_task = make_critic_task(model)

    assistant_task.add_sub_task([search_task, critic_task])
    question = Prompt.ask("What do you want to know?")
    assistant_task.run(question)


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/multi-agent-search-critic/search_agent.py">
"""
SearcherAgent flow:

[A] stands for Agent response (i.e. agent_response)
[L] stands for LLM response (i.e. llm_response)

QuestionTool ->
[A] -> natural lang question for LLM ->
[L] -> DuckduckgoSearchTool ->
[A] -> results ->
[L] -> AnswerTool(results) ->
[A] -> AgentDoneTool(AnswerTool)

Note that this Agent's task enforces QuestionTool -> AnswerTool, i.e.
- incoming msg must be a QuestionTool
- outgoing msg must be an AnswerTool
"""

from typing import Optional

import typer
from dotenv import load_dotenv

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.tools.duckduckgo_search_tool import DuckduckgoSearchTool
from langroid.agent.tools.metaphor_search_tool import MetaphorSearchTool
from langroid.agent.tools.orchestration import AgentDoneTool
from langroid.utils.configuration import Settings, set_global

from .tools import AnswerTool, QuestionTool

app = typer.Typer()

# class MyDDGSearchTool(DuckduckgoSearchTool):
#     request = "my_ddg_search"


class SearcherAgent(lr.ChatAgent):
    def init_state(self):
        super().init_state()
        self.curr_query: str | None = None
        self.expecting_search_results: bool = False
        self.expecting_search_tool: bool = False

    def __init__(self, config: lr.ChatAgentConfig):
        super().__init__(config)
        self.config = config
        self.enable_message(MetaphorSearchTool)  # DuckduckgoSearchTool
        self.enable_message(QuestionTool, use=False, handle=True)
        # agent is producing AnswerTool, so LLM should not be allowed to "use" it
        self.enable_message(AnswerTool, use=False, handle=True)

    def duckduckgo_search(self, msg: DuckduckgoSearchTool) -> str:
        """Override the DDG handler to update state"""
        self.expecting_search_results = True
        self.expecting_search_tool = False
        return msg.handle()

    def metaphor_search(self, msg: MetaphorSearchTool) -> str:
        """Override the Metaphor handler to update state"""
        self.expecting_search_results = True
        self.expecting_search_tool = False
        return msg.handle()

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        # we're here because msg has no tools
        if self.curr_query is None:
            # did not receive a question tool, so short-circuit and return None
            return None
        if self.expecting_search_tool:
            search_tool_name = MetaphorSearchTool.default_value("request")
            return f"""
            You forgot to use the web search tool`{search_tool_name}`  
            to answer the user's question : {self.curr_query}!!
            REMEMBER - you must ONLY answer the user's questions based on 
             results from a web-search, and you MUST NOT ANSWER them yourself.
             
            Please use the `{search_tool_name}` tool 
            using the specified JSON format, then compose your answer based on 
            the results from this web-search tool.
            """

    def question_tool(self, msg: QuestionTool) -> str:
        self.curr_query = msg.question
        self.expecting_search_tool = True
        search_tool_name = MetaphorSearchTool.default_value("request")
        return f"""
        User asked this question: {msg.question}.
        Perform a web search using the `{search_tool_name}` tool
        using the specified JSON format, to find the answer.
        """

    def answer_tool(self, msg: AnswerTool) -> AgentDoneTool:
        # signal DONE, and return the AnswerTool
        return AgentDoneTool(tools=[msg])

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        if self.expecting_search_results:
            # message must be search results from the web search tool,
            # so let the LLM compose a response based on the search results

            curr_query = self.curr_query
            # reset state
            self.curr_query = None
            self.expecting_search_results = False
            self.expecting_search_tool = False

            result = super().llm_response_forget(message)

            # return an AnswerTool containing the answer,
            # with a nudge meant for the Assistant
            answer = f"""
                Here are the web-search results for the question: {curr_query}.
                ===
                {result.content}
                """

            ans_tool = AnswerTool(answer=answer)
            # cannot return a tool, so use this to create a ChatDocument
            return self.create_llm_response(tool_messages=[ans_tool])

        # Handling query from user (or other agent) => expecting a search tool
        result = super().llm_response_forget(message)
        return result


def make_search_task(model: str):
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,
        temperature=0.2,
        max_output_tokens=500,
        timeout=45,
    )

    search_tool_handler_method = MetaphorSearchTool.default_value("request")

    search_agent_config = lr.ChatAgentConfig(
        llm=llm_config,
        vecdb=None,
        system_message=f"""
        You are a web-searcher. For ANY question you get, you must use the
        `{search_tool_handler_method}` tool/function-call to get up to 5 results.
        Once you receive the results, you must compose a CONCISE answer 
        based on the search results and present the answer in this format:
        ANSWER: [... your CONCISE answer here ...]
        SOURCES: [links from the web-search that you used]
        
        EXTREMELY IMPORTANT: DO NOT MAKE UP ANSWERS, ONLY use the web-search results.
        """,
    )
    search_agent = SearcherAgent(search_agent_config)
    search_task = lr.Task(
        search_agent,
        name="Searcher",
        llm_delegate=True,
        single_round=False,
        interactive=False,
    )
    return search_task


if __name__ == "__main__":

    @app.command()
    def main(
        debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
        model: str = typer.Option("", "--model", "-m", help="model name"),
        nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    ) -> None:
        set_global(
            Settings(
                debug=debug,
                cache=not nocache,
            )
        )

        load_dotenv()

        search_task = make_search_task(model)
        # simulate an incoming message to this Task, from the Assistant agent
        q_doc = search_task.agent.create_agent_response(
            tool_messages=[QuestionTool(question="Who was Beethoven's teacher?")]
        )
        result = search_task.run(q_doc)
        tools = search_task.agent.get_tool_messages(result)
        assert len(tools) == 1
        assert isinstance(tools[0], AnswerTool)

    app()
</file>

<file path="examples/basic/multi-agent-search-critic-no-orch/assistant_agent.py">
"""
AssistantAgent takes a user's question, breaks it down into smaller questions
for SearcherAgent to answer, and then presents the final answer; It then considers
feedback from CriticAgent, and may ask more questions or present the final answer
using a corrected reasoning.

Flow: (L stands for LLM, i.e. llm_response; A stands for Agent i.e. agent_response)

User Q ->
[L] -> QuestionTool(q1) ->
[A] -> validate, return QuestionTool(q1) ->
... AnswerTool(a1) from SearcherAgent ->
[A] -> AnswerTool(a1) -> natural lang ans for LLM
[L] -> either QuestionTool(q2) or FinalAnswerTool(steps, ans) ->
... if FinalAnswerTool(steps, ans) ->
[A] -> validate, return FinalAnswerTool(steps, ans) with recipient=Critic ->
... FeedbackTool(feedback, suggested_fix) from CriticAgent ->
[A] -> FeedbackTool(feedback, suggested_fix) -> natural lang feedback for LLM
[L] -> either QuestionTool(q2) or FinalAnswerTool(steps, ans) ->
...
"""

from typing import Optional

import typer

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.tools.orchestration import AgentDoneTool, ForwardTool, PassTool

from .tools import AnswerTool, FeedbackTool, FinalAnswerTool, QuestionTool

app = typer.Typer()


class AssistantAgent(lr.ChatAgent):
    def init_state(self):
        super().init_state()
        self.expecting_question_tool: bool = False
        self.expecting_question_or_final_answer: bool = False  # expecting one of these
        # tools
        self.expecting_search_answer: bool = False
        self.original_query: str | None = None  # user's original query

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        if self.expecting_question_or_final_answer:
            return f"""
            You may have intended to use a tool, but your JSON format may be wrong.
            
            REMINDER: You must do one of the following:
            - If you are ready with the final answer to the user's ORIGINAL QUERY
                [ Remember it was: {self.original_query} ],
              then present your reasoning steps and final answer using the 
              `final_answer_tool` in the specified JSON format.
            - If you still need to ask a question, then use the `question_tool`
              to ask a SINGLE question that can be answered from a web search.
            """
        elif self.expecting_question_tool:
            return f"""
            You must ask a question using the `question_tool` in the specified format,
            to break down the user's original query: {self.original_query} into 
            smaller questions that can be answered from a web search.
            """

    def question_tool(self, msg: QuestionTool) -> str | PassTool:
        self.expecting_search_answer = True
        self.expecting_question_tool = False
        # return the tool so it is handled by SearcherAgent
        # validated incoming, pass it on
        return AgentDoneTool(tools=[msg])

    def answer_tool(self, msg: AnswerTool) -> str:
        self.expecting_question_or_final_answer = True
        self.expecting_search_answer = False
        return f"""
        Here is the answer to your question from the web search:
        {msg.answer}
        Now decide whether you want to:
        - present your FINAL answer to the user's ORIGINAL QUERY, OR
        - ask another question using the `question_tool`
            (Maybe REPHRASE the question to get BETTER search results).
        """

    def final_answer_tool(self, msg: FinalAnswerTool) -> ForwardTool | str:
        if not self.expecting_question_or_final_answer:
            return ""
        self.expecting_question_or_final_answer = False
        # insert the original query into the tool, in case LLM forgot to do so.
        msg.query = self.original_query
        # fwd to critic
        return AgentDoneTool(tools=[msg])

    def feedback_tool(self, msg: FeedbackTool) -> str:
        if msg.suggested_fix == "":
            return AgentDoneTool()
        else:
            self.expecting_question_or_final_answer = True
            # reset question count since feedback may initiate new questions
            return f"""
            Below is feedback about your answer. Take it into account to 
            improve your answer, EITHER by:
            - using the `final_answer_tool` again but with improved REASONING, OR
            - asking another question using the `question_tool`, and when you're 
                ready, present your final answer again using the `final_answer_tool`.
            
            FEEDBACK: {msg.feedback}
            SUGGESTED FIX: {msg.suggested_fix}
            """

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        if self.original_query is None:
            self.original_query = (
                message if isinstance(message, str) else message.content
            )
            # just received user query, so we expect a question tool next
            self.expecting_question_tool = True

        if self.expecting_question_or_final_answer or self.expecting_question_tool:
            return super().llm_response(message)


def make_assistant_task(
    model: str = "",
    restart: bool = True,
) -> lr.Task:
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,
        temperature=0.2,
        max_output_tokens=500,
        timeout=45,
    )

    assistant_config = lr.ChatAgentConfig(
        system_message="""
        You are a resourceful assistant, able to think step by step to answer
        complex questions from the user. You must break down complex questions into
        simpler questions that can be answered by a web search. You must ask me 
        (the user) each question ONE BY ONE, using the `question_tool` in
         the specified format, and I will do a web search and send you
        a brief answer. Once you have enough information to answer my original
        (complex) question, you MUST present your INTERMEDIATE STEPS and FINAL ANSWER
        using the `final_answer_tool` in the specified JSON format.
        You will then receive FEEDBACK from the Critic, and if needed
        you should try to improve your answer based on this feedback,
        possibly by asking more questions.
        """,
        llm=llm_config,
        vecdb=None,
    )
    assistant_agent = AssistantAgent(assistant_config)
    assistant_agent.enable_message(QuestionTool)
    assistant_agent.enable_message(AnswerTool, use=False, handle=True)
    assistant_agent.enable_message(FinalAnswerTool)
    assistant_agent.enable_message(ForwardTool)
    assistant_agent.enable_message(PassTool)
    assistant_agent.enable_message(FeedbackTool, use=False, handle=True)

    assistant_task = lr.Task(
        assistant_agent,
        name="Assistant",
        llm_delegate=True,
        single_round=False,
        interactive=False,
        restart=restart,
    )

    return assistant_task


if __name__ == "__main__":
    # restart = False, to preserve state across task.run() calls
    task = make_assistant_task(restart=False)
    question = task.run("which planet has more moons, Jupiter or Saturn?")
    assert isinstance(question.tool_messages[0], QuestionTool)
</file>

<file path="examples/basic/multi-agent-search-critic-no-orch/critic_agent.py">
"""
CriticAgent task enforces FinalAnswerTool -> FeedbackTool, i.e.
- incoming msg must be a FinalAnswerTool
- outgoing msg must be a FeedbackTool

Flow:

FinalAnswerTool ->
[A] -> natural lang presentation to LLM
[L] -> FeedbackTool ->
[A] -> AgentDoneTool(FeedbackTool)

"""

import typer
from dotenv import load_dotenv

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.tools.orchestration import AgentDoneTool
from langroid.utils.configuration import Settings, set_global

from .tools import FeedbackTool, FinalAnswerTool

app = typer.Typer()


class CriticAgent(lr.ChatAgent):
    def init_state(self):
        super().init_state()
        self.expecting_feedback_tool: bool = False

    def final_answer_tool(self, msg: FinalAnswerTool) -> str:
        # received from Assistant. Extract the components as plain text,
        # so that the Critic LLM can provide feedback
        self.expecting_feedback_tool = True

        return f"""
        The user has presented the following query, intermediate steps and final answer
        shown below. Please provide feedback using the `feedback_tool`, 
        with the `feedback` field containing your feedback, and 
        the `suggested_fix` field containing a suggested fix, such as fixing how
        the answer or the steps, or how it was obtained from the steps, or 
        asking new questions.
        
        REMEMBER to set the `suggested_fix` field to an EMPTY string if the answer is 
        VALID.
        
        QUERY: {msg.query}
        
        STEPS: {msg.steps}
        
        ANSWER: {msg.answer}
        """

    def feedback_tool(self, msg: FeedbackTool) -> FeedbackTool:
        # validate, signal DONE, include the tool
        self.expecting_feedback_tool = False
        return AgentDoneTool(tools=[msg])

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        if self.expecting_feedback_tool:
            return """
            You forgot to provide feedback using the `feedback_tool` 
            on the user's reasoning steps and final answer.
            """


def make_critic_task(model: str):
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,
        temperature=0.2,
        max_output_tokens=500,
        timeout=45,
    )
    critic_agent_config = lr.ChatAgentConfig(
        llm=llm_config,
        vecdb=None,
        system_message="""
        You excel at logical reasoning and combining pieces of information.
        You will receive a summary of the original query, intermediate steps and final 
        answer.
        You must examine these and provide feedback to the user, using the 
        `feedback_tool`, as follows:
        - If you think the answer and reasoning are valid, 
            simply set the `suggested_fix` field to an empty string "".
        - Otherwise set the `feedback` field to a reason why the answer is invalid,
            and in the `suggested_fix` field indicate how the user can improve the 
            answer, for example by reasoning differently, or asking different questions.
        """,
    )
    critic_agent = CriticAgent(critic_agent_config)
    critic_agent.enable_message(FeedbackTool)
    critic_agent.enable_message(FinalAnswerTool, use=False, handle=True)
    critic_task = lr.Task(
        critic_agent,
        name="Critic",
        interactive=False,
    )
    return critic_task


if __name__ == "__main__":

    @app.command()
    def main(
        debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
        model: str = typer.Option("", "--model", "-m", help="model name"),
        nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    ) -> None:
        set_global(
            Settings(
                debug=debug,
                cache=not nocache,
            )
        )
        load_dotenv()

        llm_config = lm.OpenAIGPTConfig(
            chat_model=model or lm.OpenAIChatModel.GPT4o,
            chat_context_length=16_000,
            temperature=0.2,
            max_output_tokens=500,
            timeout=45,
        )

        critic_agent_config = lr.ChatAgentConfig(
            llm=llm_config,
            vecdb=None,
            system_message="""
            You excel at logical reasoning and combining pieces of information.
            The user will send you a summary of the intermediate steps and final answer.
            You must examine these and provide feedback to the user, using the 
            `feedback_tool`, as follows:
            - If you think the answer and reasoning are valid, 
                simply set the `suggested_fix` field to an empty string "".
            - Otherwise set the `feedback` field to a reason why the answer is invalid,
                and in the `suggested_fix` field indicate how the user can improve the 
                answer, for example by reasoning differently, or asking different questions.
            """,
        )
        critic_agent = CriticAgent(critic_agent_config)
        critic_agent.enable_message(FeedbackTool)
        critic_agent.enable_message(FinalAnswerTool, use=False, handle=True)
        critic_task = lr.Task(
            critic_agent,
            name="Critic",
            interactive=False,
        )
        final_ans_tool = FinalAnswerTool(
            steps="""
            1. The moon landing was in 1969.
            2. Kennedy was president during 1969.            
            """,
            answer="Kennedy was president during the moon landing.",
        )
        # simulate receiving the tool from Assistant
        final_ans_doc = critic_agent.create_agent_response(
            tool_messages=[final_ans_tool]
        )
        result = critic_task.run(final_ans_doc)
        tools = critic_agent.get_tool_messages(result)
        assert len(tools) == 1
        assert isinstance(tools[0], FeedbackTool)

    app()
</file>

<file path="examples/basic/multi-agent-search-critic-no-orch/search_agent.py">
"""
SearcherAgent flow:

[A] stands for Agent response (i.e. agent_response)
[L] stands for LLM response (i.e. llm_response)

QuestionTool ->
[A] -> natural lang question for LLM ->
[L] -> DuckduckgoSearchTool ->
[A] -> results ->
[L] -> AnswerTool(results) ->
[A] -> AgentDoneTool(AnswerTool)

Note that this Agent's task enforces QuestionTool -> AnswerTool, i.e.
- incoming msg must be a QuestionTool
- outgoing msg must be an AnswerTool
"""

from typing import Optional

import typer
from dotenv import load_dotenv

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.tools.duckduckgo_search_tool import DuckduckgoSearchTool
from langroid.agent.tools.metaphor_search_tool import MetaphorSearchTool
from langroid.agent.tools.orchestration import AgentDoneTool
from langroid.utils.configuration import Settings, set_global

from .tools import AnswerTool, QuestionTool

app = typer.Typer()

# class MyDDGSearchTool(DuckduckgoSearchTool):
#     request = "my_ddg_search"


class SearcherAgent(lr.ChatAgent):
    def init_state(self):
        super().init_state()
        self.curr_query: str | None = None
        self.expecting_search_results: bool = False
        self.expecting_search_tool: bool = False

    def __init__(self, config: lr.ChatAgentConfig):
        super().__init__(config)
        self.config = config
        self.enable_message(MetaphorSearchTool)  # DuckduckgoSearchTool
        self.enable_message(QuestionTool, use=False, handle=True)
        # agent is producing AnswerTool, so LLM should not be allowed to "use" it
        self.enable_message(AnswerTool, use=False, handle=True)

    def duckduckgo_search(self, msg: DuckduckgoSearchTool) -> str:
        """Override the DDG handler to update state"""
        self.expecting_search_results = True
        self.expecting_search_tool = False
        return msg.handle()

    def metaphor_search(self, msg: MetaphorSearchTool) -> str:
        """Override the Metaphor handler to update state"""
        self.expecting_search_results = True
        self.expecting_search_tool = False
        return msg.handle()

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        # we're here because msg has no tools
        if self.curr_query is None:
            # did not receive a question tool, so short-circuit and return None
            return None
        if self.expecting_search_tool:
            search_tool_name = MetaphorSearchTool.default_value("request")
            return f"""
            You forgot to use the web search tool`{search_tool_name}`  
            to answer the user's question : {self.curr_query}!!
            REMEMBER - you must ONLY answer the user's questions based on 
             results from a web-search, and you MUST NOT ANSWER them yourself.
             
            Please use the `{search_tool_name}` tool 
            using the specified JSON format, then compose your answer based on 
            the results from this web-search tool.
            """

    def question_tool(self, msg: QuestionTool) -> str:
        self.curr_query = msg.question
        self.expecting_search_tool = True
        search_tool_name = MetaphorSearchTool.default_value("request")
        return f"""
        User asked this question: {msg.question}.
        Perform a web search using the `{search_tool_name}` tool
        using the specified JSON format, to find the answer.
        """

    def answer_tool(self, msg: AnswerTool) -> AgentDoneTool:
        # signal DONE, and return the AnswerTool
        return AgentDoneTool(tools=[msg])

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        if self.expecting_search_results:
            # message must be search results from the web search tool,
            # so let the LLM compose a response based on the search results

            curr_query = self.curr_query
            # reset state
            self.curr_query = None
            self.expecting_search_results = False
            self.expecting_search_tool = False

            result = super().llm_response_forget(message)

            # return an AnswerTool containing the answer,
            # with a nudge meant for the Assistant
            answer = f"""
                Here are the web-search results for the question: {curr_query}.
                ===
                {result.content}
                """

            ans_tool = AnswerTool(answer=answer)
            # cannot return a tool, so use this to create a ChatDocument
            return self.create_llm_response(tool_messages=[ans_tool])

        # Handling query from user (or other agent) => expecting a search tool
        result = super().llm_response_forget(message)
        return result


def make_search_task(model: str):
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,
        temperature=0.2,
        max_output_tokens=500,
        timeout=45,
    )

    search_tool_handler_method = MetaphorSearchTool.default_value("request")

    search_agent_config = lr.ChatAgentConfig(
        llm=llm_config,
        vecdb=None,
        system_message=f"""
        You are a web-searcher. For ANY question you get, you must use the
        `{search_tool_handler_method}` tool/function-call to get up to 5 results.
        Once you receive the results, you must compose a CONCISE answer 
        based on the search results and present the answer in this format:
        ANSWER: [... your CONCISE answer here ...]
        SOURCES: [links from the web-search that you used]
        
        EXTREMELY IMPORTANT: DO NOT MAKE UP ANSWERS, ONLY use the web-search results.
        """,
    )
    search_agent = SearcherAgent(search_agent_config)
    search_task = lr.Task(
        search_agent,
        name="Searcher",
        llm_delegate=True,
        single_round=False,
        interactive=False,
    )
    return search_task


if __name__ == "__main__":

    @app.command()
    def main(
        debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
        model: str = typer.Option("", "--model", "-m", help="model name"),
        nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    ) -> None:
        set_global(
            Settings(
                debug=debug,
                cache=not nocache,
            )
        )

        load_dotenv()

        search_task = make_search_task(model)
        # simulate an incoming message to this Task, from the Assistant agent
        q_doc = search_task.agent.create_agent_response(
            tool_messages=[QuestionTool(question="Who was Beethoven's teacher?")]
        )
        result = search_task.run(q_doc)
        tools = search_task.agent.get_tool_messages(result)
        assert len(tools) == 1
        assert isinstance(tools[0], AnswerTool)

    app()
</file>

<file path="examples/basic/1-agent-3-tools-address-user.py">
"""
Barebones example of a single agent using 3 tools.
Similar to 1-agent-3-tools.py, but here the task is set up
with `interactive=False`, meaning user input is awaited only
when user is explicitly addressed using an addressing prefix.
"""

from typing import Any, List, Tuple

import fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import ForwardTool
from langroid.utils.configuration import settings
from langroid.utils.constants import AT

DEFAULT_LLM = lm.OpenAIChatModel.GPT4o

# (1) DEFINE THE TOOLS


class UpdateTool(lr.ToolMessage):
    request: str = "update"
    purpose: str = "To update the stored number to the given <number>"
    number: int

    @classmethod
    def examples(cls) -> List["lr.ToolMessage" | Tuple[str, "lr.ToolMessage"]]:
        # Examples that will be compiled into few-shot examples for the LLM.
        # Each example can either be...
        return [
            cls(number=3),  # ... just instances of the tool-class, OR
            (  # ...a tuple of "thought leading to tool", and the tool instance
                "I want to update the stored number to number 4 from the user",
                cls(number=4),
            ),
        ]


class AddTool(lr.ToolMessage):
    request: str = "add"
    purpose: str = "To add the given <number> to the stored number"
    number: int

    @classmethod
    def examples(cls) -> List["lr.ToolMessage" | Tuple[str, "lr.ToolMessage"]]:
        return [
            cls(number=3),
            (
                "I want to add number 10 to the stored number",
                cls(number=10),
            ),
        ]


class ShowTool(lr.ToolMessage):
    request: str = "show"
    purpose: str = "To show the user the stored <number>"

    @classmethod
    def examples(cls) -> List["lr.ToolMessage" | Tuple[str, "lr.ToolMessage"]]:
        return [
            cls(number=3),
            (
                "I want to show the user the stored number 10",
                cls(number=10),
            ),
        ]


# (2) DEFINE THE AGENT, with the tool-handling methods
class NumberAgent(lr.ChatAgent):
    secret: int = 0

    def update(self, msg: UpdateTool) -> str:
        self.secret = msg.number
        return f"Ok I updated the stored number to {msg.number}"

    def add(self, msg: AddTool) -> str:
        self.secret += msg.number
        return f"Added {msg.number} to stored number => {self.secret}"

    def show(self, msg: ShowTool) -> str:
        return f"Inform the user that the SECRET NUMBER is {self.secret}"

    def handle_message_fallback(self, msg: str | lr.ChatDocument) -> Any:
        """
        If we're here it means there was no recognized tool in `msg`.
        So if it was from LLM, use ForwardTool to send to user.
        """
        if isinstance(msg, lr.ChatDocument) and msg.metadata.sender == lr.Entity.LLM:
            return ForwardTool(agent="User")


def app(
    m: str = DEFAULT_LLM,  # pass -d <model> to use non-default LLM
    d: bool = False,  # pass -d to enable debug mode (see prompts etc)
    nc: bool = False,  # pass -nc to disable cache-retrieval (i.e. get fresh answers)
):
    settings.debug = d
    settings.cache = not nc
    # create LLM config
    llm_cfg = lm.OpenAIGPTConfig(
        chat_model=m or DEFAULT_LLM,
        chat_context_length=4096,  # set this based on model
        max_output_tokens=100,
        temperature=0.2,
        stream=True,
        timeout=45,
    )

    # (3) CREATE THE AGENT
    agent_config = lr.ChatAgentConfig(
        name="NumberAgent",
        llm=llm_cfg,
        system_message=f"""
        When the user's request matches one of your available tools, use it, 
        otherwise respond directly to the user.
        NOTE: Whenever you want to address the user directly, you MUST
        use "{AT}User", followed by your message. 
        """,
    )

    agent = NumberAgent(agent_config)

    # (4) ENABLE/ATTACH THE TOOLS to the AGENT

    agent.enable_message(UpdateTool)
    agent.enable_message(AddTool)
    agent.enable_message(ShowTool)

    # (5) CREATE AND RUN THE TASK
    task_config = lr.TaskConfig(addressing_prefix=AT)
    task = lr.Task(agent, interactive=False, config=task_config)

    """
    Note: try saying these when it waits for user input:
    
    add 10
    update 50
    add 3
    show 
    """

    task.run()


if __name__ == "__main__":
    fire.Fire(app)
</file>

<file path="examples/basic/1-agent-3-tools.py">
"""
Barebones example of a single agent using 3 tools.

"""

from typing import Any, List, Tuple

import fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import ForwardTool
from langroid.utils.configuration import settings

DEFAULT_LLM = lm.OpenAIChatModel.GPT4o

# (1) DEFINE THE TOOLS


class UpdateTool(lr.ToolMessage):
    request: str = "update"
    purpose: str = "To update the stored number to the given <number>"
    number: int

    @classmethod
    def examples(cls) -> List["lr.ToolMessage" | Tuple[str, "lr.ToolMessage"]]:
        # Examples that will be compiled into few-shot examples for the LLM.
        # Each example can either be...
        return [
            cls(number=3),  # ... just instances of the tool-class, OR
            (  # ...a tuple of "thought leading to tool", and the tool instance
                "I want to update the stored number to number 4 from the user",
                cls(number=4),
            ),
        ]


class AddTool(lr.ToolMessage):
    request: str = "add"
    purpose: str = "To add the given <number> to the stored number"
    number: int

    @classmethod
    def examples(cls) -> List["lr.ToolMessage" | Tuple[str, "lr.ToolMessage"]]:
        return [
            cls(number=3),
            (
                "I want to add number 10 to the stored number",
                cls(number=10),
            ),
        ]


class ShowTool(lr.ToolMessage):
    request: str = "show"
    purpose: str = "To show the user the stored <number>"

    @classmethod
    def examples(cls) -> List["lr.ToolMessage" | Tuple[str, "lr.ToolMessage"]]:
        return [
            cls(number=3),
            (
                "I want to show the user the stored number 10",
                cls(number=10),
            ),
        ]


# (2) DEFINE THE AGENT, with the tool-handling methods
class NumberAgent(lr.ChatAgent):
    secret: int = 0

    def update(self, msg: UpdateTool) -> str:
        self.secret = msg.number
        return f"""
            Ok I updated the stored number to {msg.number}.
            Ask the user what they want to do
        """

    def add(self, msg: AddTool) -> str:
        self.secret += msg.number
        return f"""
            Added {msg.number} to stored number => {self.secret}.
            Ask the user what they want to do.
        """

    def show(self, msg: ShowTool) -> str:
        return f"Tell the user that the SECRET NUMBER is {self.secret}"

    def handle_message_fallback(self, msg: str | lr.ChatDocument) -> Any:
        """
        If we're here it means there was no recognized tool in `msg`.
        So if it was from LLM, use ForwardTool to send to user.
        """
        if isinstance(msg, lr.ChatDocument) and msg.metadata.sender == lr.Entity.LLM:
            return ForwardTool(agent="User")


def app(
    m: str = DEFAULT_LLM,  # model
    d: bool = False,  # pass -d to enable debug mode (see prompts etc)
    nc: bool = False,  # pass -nc to disable cache-retrieval (i.e. get fresh answers)
):
    settings.debug = d
    settings.cache = not nc
    # create LLM config
    llm_cfg = lm.OpenAIGPTConfig(
        chat_model=m or DEFAULT_LLM,
        chat_context_length=4096,  # set this based on model
        max_output_tokens=100,
        temperature=0.2,
        stream=True,
        timeout=45,
    )

    # (3) CREATE THE AGENT
    agent_config = lr.ChatAgentConfig(
        name="NumberAgent",
        llm=llm_cfg,
        system_message="""
        When the user's request matches one of your available tools, use it, 
        otherwise respond directly to the user.
        """,
    )

    agent = NumberAgent(agent_config)

    # (4) ENABLE/ATTACH THE TOOLS to the AGENT

    agent.enable_message(UpdateTool)
    agent.enable_message(AddTool)
    agent.enable_message(ShowTool)

    # (5) CREATE AND RUN THE TASK
    task = lr.Task(agent, interactive=False)

    """
    Note: try saying these when it waits for user input:
    
    add 10
    update 50
    add 3
    show <--- in this case remember to hit enter when it waits for your input.
    """
    task.run()


if __name__ == "__main__":
    fire.Fire(app)
</file>

<file path="examples/basic/1d-screen-click.py">
"""

A Bit-Shooter Game played on a 1-dimensional binary screen.

Given an LLM Agent access to a 1-dimensional "screen" represented
as a string of bits (0s and 1s), e.g. "101010",
and equip it with a "Click tool" (like a mouse click) that allows it to
click on a bit -- clicking the bit causes it to flip.

The Agent plays a "Bit Shooter" game where the goal is to get rid of all
1s in the "screen".

To use the Click tool, the Agent must specify the position (zero-based)
where it wants to click. This causes the bit to flip.
The LLM is then presented with the new state of the screen,
and the process repeats until all 1s are gone.

Clearly the Agent (LLM) needs to be able to accurately count the bit positions,
to be able to correctly click on the 1s.

Run like this (--model is optional, defaults to GPT4o):

python3 examples/basic/1d-screen-click.py --model litellm/anthropic/claude-3-5-sonnet-20241022

At the beginning you get to specify the initial state of the screen:
- size of the screen (how many bits)
- the (0-based) locations of the 1s (SPACE-separated) in the screen.

E.g. try this:
- size = 50,
- 1-indices: 0 20 30 40

The loop is set to run in interactive mode (to prevent runaway loops),
so you have to keep hitting enter to see the LLM's next move.

The main observation is that when you run it with claude-3.5-sonnet,
the accuracy of the Agent's clicks is far superior to other LLMs like GPT-4o
and even GPT-4.

To try with other LLMs, you can set the --model param to, for example:
- gpt-4 (set OPENAI_API_KEY in your env or .env file)
- gpt-4o (ditto, set OPENAI_API_KEY)
- groq/llama-3.1-70b-versatile (set GROQ_API_KEY in your env or .env file)
- cerebras/llama3.1-70b (set CEREBRAS_API_KEY in your env or .env file)
- ollama/qwen2.5-coder:latest

See here for a full guide on local/open LLM setup with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/
And here for how to use with other non-OpenAPI LLMs:
https://langroid.github.io/langroid/tutorials/non-openai-llms/
"""

from typing import List, Tuple

import fire
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import AgentDoneTool
from langroid.pydantic_v1 import BaseModel
from langroid.utils.globals import GlobalState


class ScreenState(BaseModel):
    """
    Represents the state of the 1-dimensional binary screen
    """

    screen: str | None = None  # binary string, e.g. "101010"

    def __init__(
        self,
        one_indices: List[int] = [1],
        size: int = 1,
    ):
        super().__init__()
        # Initialize with all zeros
        screen_list = ["0"] * size

        # Set 1s at specified indices
        for idx in one_indices:
            if 0 <= idx < size:
                screen_list[idx] = "1"

        # Join into string
        self.screen = "".join(screen_list)

    @classmethod
    def set_state(
        cls,
        one_indices: List[int],
        size: int,
    ) -> "ScreenState":
        """
        Factory method to create and set initial state.
        """
        initial_state = cls(
            one_indices=one_indices,
            size=size,
        )
        GlobalScreenState.set_values(state=initial_state)

    def flip(self, i: int):
        """
        Flip the i-th bit
        """
        if self.screen is None or i < 0 or i >= len(self.screen):
            return

        screen_list = list(self.screen)
        screen_list[i] = "1" if screen_list[i] == "0" else "0"
        self.screen = "".join(screen_list)


class GlobalScreenState(GlobalState):
    state: ScreenState = ScreenState()


def get_state() -> ScreenState:
    return GlobalScreenState.get_value("state")


class ClickTool(lr.ToolMessage):
    request: str = "click_tool"
    purpose: str = """
        To click at <position> on the 1-dimensional binary screen, 
        which causes the bit at that position to FLIP.
        IMPORTANT: the position numbering starts from 0!!!
    """

    position: int

    @classmethod
    def examples(cls) -> List[lr.ToolMessage | Tuple[str, lr.ToolMessage]]:
        return [
            cls(position=3),
            (
                "I want to click at position 5",
                cls(position=5),
            ),
        ]

    def handle(self) -> str | AgentDoneTool:
        state = get_state()
        state.flip(self.position)
        print("SCREEN STATE = ", state.screen)
        if "1" not in state.screen:
            return AgentDoneTool()
        return state.screen


def main(model: str = ""):
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
    )
    click_tool_name = ClickTool.default_value("request")
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="Clicker",
            llm=llm_config,
            use_functions_api=False,  # suppress OpenAI functions/tools
            use_tools=True,  # enable langroid-native tools: works with any LLM
            show_stats=False,
            system_message=f"""
            You are an expert at COMPUTER USE.
            In this task you only have to be able to understand a 1-dimensional 
            screen presented to you as a string of bits (0s and 1s).
            You will play a 1-dimensional BIT-shooter game!
            
            Your task is to CLICK ON THE LEFTMOST 1 in the bit-string, 
            to flip it to a 0.
            
            Always try to click on the LEFTMOST 1 in the bit-sequence. 
            
            To CLICK on the screen you 
            must use the TOOL `{click_tool_name}` where the  
            `position` field specifies the position (zero-based) to click.
            If you CORRECTLY click on a 1, the bit at that position will be 
            turned to 0.
            But if you click on a 0, it will turn into a 1, 
            taking you further from your goal.
            
            So you MUST ACCURATELY specify the position of the LEFTMOST 1 to click,
            making SURE there is a 1 at that position.
            In other words, it is critical that you are able to ACCURATELY COUNT 
            the bit positions so that you are able to correctly identify the position 
            of the LEFTMOST 1 bit in the "screen" given to you as a string of bits.
            """,
        )
    )

    agent.enable_message(ClickTool)

    task = lr.Task(agent, interactive=True, only_user_quits_root=False)

    # kick it off with initial screen state (set below by user)
    task.run(get_state())


if __name__ == "__main__":
    size = int(Prompt.ask("Size of screen (how many bits)"))
    ones = Prompt.ask("Indices of 1s (SPACE-separated)").split(" ")
    ones = [int(x) for x in ones]
    ScreenState.set_state(ones, size)
    print("SCREEN STATE = ", get_state().screen)
    fire.Fire(main)
</file>

<file path="examples/basic/autocorrect.py">
"""
A two agent chat system where
- AutoCorrect agent corrects the user's possibly mistyped input,
- Chatter agent responds to the corrected user's input.

Run it like this:

python3 examples/basic/autocorrect.py

"""

import typer
from rich import print

import langroid as lr
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.logging import setup_colored_logging

app = typer.Typer()

setup_colored_logging()


def chat() -> None:
    print(
        """
        [blue]Welcome to the Autocorrecting Chatbot!
        You can quickly type your message, don't even look at your keyboard. 
        Feel free to type and I will try my best to understand it,
        and I will type out what I think you meant.
        If you agree with my suggestion, just hit enter so I can respond to it.
        If you disagree with my suggestion, say "try again" or say "no" or something 
        similar, and I will try again.
        When I am confused, I will offer some numbered choices to pick from.
        
        Let's go! Enter x or q to quit at any point.
        """
    )

    config = ChatAgentConfig(
        llm=OpenAIGPTConfig(
            chat_model=OpenAIChatModel.GPT4o,
        ),
        vecdb=None,
    )
    autocorrect_agent = ChatAgent(config)
    autocorrect_task = Task(
        autocorrect_agent,
        name="AutoCorrect",
        system_message="""
        You are an expert at understanding mistyped text. You are extremely 
        intelligent, an expert in the English language, and you have common sense, 
        so no matter how badly mistyped the text is, you will know the MOST LIKELY 
        AND SENSIBLE correct version of it.
        For any text you receive, your job is to write the correct version of it, 
        and not say anything else. 
        If you are unsure, offer up to 3 numbered suggestions, and the user will pick 
        one. Once the user selects a suggestion, simply write out that version.
        Remember to ONLY suggest sensible interpretations. For example
        "Which month is the tallest in the world" is meaningless, so you should not
        ever include such a suggestion in your list.
        Start by asking me to writing something.
        """,
    )

    chat_agent = ChatAgent(config)
    chat_task = Task(
        chat_agent,
        name="Chat",
        system_message="Answer or respond very concisely, no more than 1-2 sentences!",
        done_if_no_response=[lr.Entity.LLM],
        done_if_response=[lr.Entity.LLM],
    )
    autocorrect_task.add_sub_task(chat_task)
    autocorrect_task.run()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
            cache_type="redis",
        )
    )
    chat()


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/chat-2-agent-discuss.py">
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "langroid",
# ]
# ///

"""
Give a problem statement, two agents Alice and Bob will discuss it,
and EITHER of them may return a final result via MyFinalResultTool.

Run like this (Omit model to default to GPT4o):

python3 examples/basic/chat-2-agent-discuss.py --model gemini/gemini-2.0-flash-exp

For example, try giving his problem:
What is the prime number that comes after 17?

"""

import logging

from fire import Fire
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.task import TaskConfig
from langroid.agent.tools.orchestration import FinalResultTool

# set info level
logging.basicConfig(level=logging.INFO)


# Any tool subclassed from FinalResultTool can be used to return the final result
# from any agent, and it will short-circuit the flow and return the result.
class MyFinalResultTool(FinalResultTool):
    request: str = "my_final_result_tool"
    purpose: str = "To present the final <result> of a discussion"
    # override this flag since it's False by default
    _allow_llm_use: bool = True

    result: str


def main(model: str = ""):
    problem = Prompt.ask(
        """
        [blue]Alice and Bob will discuss a problem.
        Please enter the problem statement:[/blue]
        """
    )

    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=128_000,
        timeout=60,
    )

    logging.warning("Setting up Alice, Bob agents...")

    alice = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=llm_config,
            name="Alice",
            system_message=f"""
            Here is a problem the user wants to solve:
            <problem>
            {problem}
            </problem>
            To solve this, you will engage in a discussion with your colleague Bob.
            At any point, if you decide the problem is solved,
            you must use the TOOL `{MyFinalResultTool.name()}` to
            return the FINAL answer to the problem. 

            In each round of the discussion, limit yourself to a CONCISE
            message.
            """,
        )
    )

    alice.enable_message(MyFinalResultTool)
    # Set `inf_loop_cycle_len` to 0, to turn OFF inf loop detection
    alice_task_config = TaskConfig(inf_loop_cycle_len=10)
    # set up alice_task to return a result of type MyFinalResultTool
    alice_task = lr.Task(alice, config=alice_task_config, interactive=False)[
        MyFinalResultTool
    ]

    bob = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=llm_config,
            name="Bob",
            system_message=f"""
            Here is a problem the user wants to solve:
            <problem>
            {problem}
            </problem>
            To solve this, you will engage in a discussion with your colleague Alice.
            At any point, if you decide the problem is solved,
            you must use the TOOL `{MyFinalResultTool.name()}` to
            return the FINAL answer to the problem. 

            In each round of the discussion, limit yourself to a CONCISE
            message. 
            
            You will first receive a message from Alice, and you can then follow up. 
            """,
        )
    )

    bob.enable_message(MyFinalResultTool)

    bob_task = lr.Task(bob, interactive=False, single_round=True)

    # make the Con agent the sub-task of the Pro agent, so
    # they go back and forth in the arguments
    alice_task.add_sub_task(bob_task)

    result = alice_task.run("get started")

    print(
        f"""
        FINAL RESULT:
        {result.result}
        """
    )


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/basic/chat-local-numerical.py">
"""
Test multi-round interaction with a local LLM, playing a simple "doubling game".

In each round:

- User gives a number
- LLM responds with the double of that number

Run like this --

python3 examples/basic/chat-local-numerical.py -m <local_model_name>

See here for how to set up a Local LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

"""

import os

import fire

import langroid as lr
import langroid.language_models as lm
from langroid.utils.configuration import settings

# for best results:
DEFAULT_LLM = lm.OpenAIChatModel.GPT4o

os.environ["TOKENIZERS_PARALLELISM"] = "false"

# (1) Define the desired fn-call as a ToolMessage via Pydantic.


def app(
    m: str = DEFAULT_LLM,  # model name
    d: bool = False,  # debug
    nc: bool = False,  # no cache
):
    settings.debug = d
    settings.cache = not nc
    # create LLM config
    llm_cfg = lm.OpenAIGPTConfig(
        chat_model=m or DEFAULT_LLM,
        chat_context_length=4096,  # set this based on model
        max_output_tokens=100,
        temperature=0.2,
        timeout=45,
    )

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=llm_cfg,
            system_message="""
            You are a number-doubling expert. When user gives you a NUMBER,
            simply respond with its DOUBLE and SAY NOTHING ELSE.
            DO NOT EXPLAIN YOUR ANSWER OR YOUR THOUGHT PROCESS.
            """,
        )
    )

    task = lr.Task(agent)
    task.run("15")  # initial number


if __name__ == "__main__":
    fire.Fire(app)
</file>

<file path="examples/basic/chat-local.py">
"""
Basic chat example with a local LLM.

See here for how to set up a Local LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

Run this script as follows:

```
python examples/basic/chat-local.py --model <local_model_spec>
```

"""

from fire import Fire

import langroid as lr
import langroid.language_models as lm

# Assume you've run `ollama pull mistral` to spin up `mistral` locally.
# Notes:
# - we use `lm.OpenAIGPTConfig` to incidate this config is for LLMs served
#    at OpenAI-compatible endpoints)
# - if you omit `chat_model` below, it defaults to OpenAI GPT4-turbo,
#   or you can explicitly specify it as `lm.OpenAIChatModel.GPT4` or `lm.OpenAIChatModel.GPT4o`


def main(model: str = ""):
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,  # or,e.g. "ollama/mistral"
        max_output_tokens=200,
        chat_context_length=2048,  # adjust based on your local LLM params
    )

    # Alternatively, if you've used ooba or other lib to spin up a Local LLM
    # at an OpenAI-compatible endpoint, say http://localhost:8000, you can set the
    # `chat_model` as follows (note you have to prefix it with 'local'):
    # llm_config = lm.OpenAIGPTConfig(
    #     chat_model="local/localhost:8000"
    # )
    # If the endpoint is listening at https://localhost:8000/v1, you must include the `v1`
    # at the end, e.g. chat_model="local/localhost:8000/v1"

    agent_config = lr.ChatAgentConfig(
        llm=llm_config,
        system_message="""Be helpful but very very concise""",
    )

    agent = lr.ChatAgent(agent_config)

    task = lr.Task(agent)

    task.run()


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/basic/chat-persist.py">
"""
Variant of chat.py, showing how you can save conversation state, end the script, and
resume the conversation later by re-running the script.

The most basic chatbot example, using the default settings.
A single Agent allows you to chat with a pre-trained Language Model.

Run like this:

python3 examples/basic/chat.py

Use optional arguments to change the settings, e.g.:

-m <local_model_spec>
-ns # no streaming
-d # debug mode
-nc # no cache
-sm <system_message>
-q <initial user msg>

For details on running with local or non-OpenAI models, see:
https://langroid.github.io/langroid/tutorials/local-llm-setup/
"""

import logging
import pickle
from pathlib import Path

import typer
from dotenv import load_dotenv
from rich import print
from rich.prompt import Prompt

import langroid.language_models as lm
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.utils.configuration import Settings, set_global

STATE_CACHE_DIR = ".cache/agent-state"

app = typer.Typer()
logger = logging.getLogger(__name__)
# set the logging level to INFO
logger.setLevel(logging.INFO)
# Create classes for non-OpenAI model configs


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    query: str = typer.Option("", "--query", "-q", help="initial user query or msg"),
    sys_msg: str = typer.Option(
        "You are a helpful assistant. Be concise in your answers.",
        "--sysmsg",
        "-sm",
        help="system message",
    ),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    print(
        """
        [blue]Welcome to the basic chatbot!
        Enter x or q to quit at any point.
        """
    )

    load_dotenv()

    # use the appropriate config instance depending on model name
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=4096,
        timeout=45,
    )

    # check if history.pkl exists under STATE_CACHE_DIR, and if it does, load it
    # into agent.message_history
    hist_path = Path(STATE_CACHE_DIR) / "history.pkl"
    hist_found = False
    try:
        if hist_path.exists():
            # read the history from the cache
            with open(str(hist_path), "rb") as f:
                msg_history = pickle.load(f)
            n_msgs = len(msg_history)
            logger.info(f"Loaded {n_msgs} messages from cache")
            hist_found = True
        else:
            sys_msg = Prompt.ask(
                "[blue]Tell me who I am. Hit Enter for default, or type your own\n",
                default=sys_msg,
            )

    except Exception:
        logger.warning("Failed to load message history from cache")
        pass

    config = ChatAgentConfig(
        system_message=sys_msg,
        llm=llm_config,
    )
    agent = ChatAgent(config)

    if hist_found:
        # overrides sys_msg set in config
        agent.message_history = msg_history

    # use restart=False so the state is not cleared out at start,
    # which allows continuing the conversation.
    task = Task(agent, restart=False)
    # OpenAI models are ok with just a system msg,
    # but in some scenarios, other (e.g. llama) models
    # seem to do better when kicked off with a sys msg and a user msg.
    # In those cases we may want to do task.run("hello") instead.
    if query:
        task.run(query)
    else:
        task.run()

    # Create STATE_CACHE_DIR if it doesn't exist
    Path(STATE_CACHE_DIR).mkdir(parents=True, exist_ok=True)
    # Save the conversation state to hist_path
    with open(str(hist_path), "wb") as f:
        pickle.dump(agent.message_history, f)
    logger.info(f"Saved {len(agent.message_history)} messages to cache")


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/chat-search-assistant.py">
"""
2-Agent system where:
- Assistant takes user's (complex) question, breaks it down into smaller pieces
    if needed
- WebSearcher takes Assistant's question, uses the Search tool to search the web
    (default DuckDuckGo, or Google or Metaphor as specified by user), and returns a
    coherent answer to the Assistant.

Once the Assistant thinks it has enough info to answer the user's question, it
says DONE and presents the answer to the user.

See also: chat-search for a basic single-agent search

python3 examples/basic/chat-search-assistant.py

There are optional args, especially note these:

-p or --provider: google or ddg or metaphor (default: google)
-m <model_name>: to run with a different LLM model (default: gpt4-turbo)

You can specify a local in a few different ways, e.g. `-m local/localhost:8000/v1`
or `-m ollama/mistral` etc. See here how to use Langroid with local LLMs:
https://langroid.github.io/langroid/tutorials/local-llm-setup/


NOTE:
(a) If using Google Search, you must have GOOGLE_API_KEY and GOOGLE_CSE_ID
environment variables in your `.env` file, as explained in the
[README](https://github.com/langroid/langroid#gear-installation-and-setup).

(b) If using MetaphorSearchTool, you need to:
* set the METAPHOR_API_KEY environment variables in
your `.env` file, e.g. `METAPHOR_API_KEY=your_api_key_here`
* install langroid with the `metaphor` extra, e.g.
`pip install langroid[metaphor]` or `uv pip install langroid[metaphor]`
`poetry add langroid[metaphor]` or `uv add langroid[metaphor]`
(it installs the `metaphor-python` package from pypi).
For more information, please refer to the official docs:
https://metaphor.systems/

"""

import typer
from dotenv import load_dotenv
from rich import print
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.duckduckgo_search_tool import DuckduckgoSearchTool
from langroid.agent.tools.google_search_tool import GoogleSearchTool
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE

app = typer.Typer()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    provider: str = typer.Option(
        "ddg",
        "--provider",
        "-p",
        help="search provider name (google, metaphor, ddg)",
    ),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )
    print(
        """
        [blue]Welcome to the Web Search Assistant chatbot!
        I will try to answer your complex questions. 
        
        Enter x or q to quit at any point.
        """
    )
    load_dotenv()

    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=8_000,
        temperature=0,
        max_output_tokens=200,
        timeout=45,
    )

    assistant_config = lr.ChatAgentConfig(
        system_message=f"""
        You are a resourceful assistant, able to think step by step to answer
        complex questions from the user. You must break down complex questions into
        simpler questions that can be answered by a web search. You must ask me 
        (the user) each question ONE BY ONE, and I will do a web search and send you
        a brief answer. Once you have enough information to answer my original
        (complex) question, you MUST say {DONE} and present the answer to me.
        """,
        llm=llm_config,
        vecdb=None,
    )
    assistant_agent = lr.ChatAgent(assistant_config)

    match provider:
        case "google":
            search_tool_class = GoogleSearchTool
        case "metaphor":
            from langroid.agent.tools.metaphor_search_tool import MetaphorSearchTool

            search_tool_class = MetaphorSearchTool
        case "ddg":
            search_tool_class = DuckduckgoSearchTool
        case _:
            raise ValueError(f"Unsupported provider {provider} specified.")

    search_tool_handler_method = search_tool_class.name()

    search_agent_config = lr.ChatAgentConfig(
        llm=llm_config,
        vecdb=None,
        system_message=f"""
        You are a web-searcher. For any question you get, you must use the TOOL
        `{search_tool_handler_method}`  to get up to 5 results.
        I WILL SEND YOU THE RESULTS; DO NOT MAKE UP THE RESULTS!!
        Once you receive the results, you must compose a CONCISE answer 
        based on the search results and say {DONE} and show the answer to me,
        in this format:
        {DONE} [... your CONCISE answer here ...]
        IMPORTANT:
        * YOU MUST WAIT FOR ME TO SEND YOU THE SEARCH RESULTS BEFORE saying  {DONE}.
        * YOU Can only use the TOOL `{search_tool_handler_method}` 
            ONE AT A TIME, even if you get multiple questions!
        """,
    )
    search_agent = lr.ChatAgent(search_agent_config)
    search_agent.enable_message(search_tool_class)

    assistant_task = lr.Task(
        assistant_agent,
        name="Assistant",
        llm_delegate=True,
        single_round=False,
        interactive=False,
    )
    search_task = lr.Task(
        search_agent,
        name="Searcher",
        llm_delegate=True,
        single_round=False,
        interactive=False,
    )
    assistant_task.add_sub_task(search_task)
    question = Prompt.ask("What do you want to know?")
    assistant_task.run(question)


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/chat-search.py">
"""
This is a basic example of a chatbot that uses one of these web-search Tools to
answer questions:
 - GoogleSearchTool
 - DuckduckgoSearchTool
 - ExaSearchTool
When the LLM doesn't know the answer to a question, it will use the tool to
search the web for relevant results, and then use the results to answer the
question.

Run like this:

    python3 examples/basic/chat-search.py

or

    uv run examples/basic/chat-search.py -m groq/deepseek-r1-distill-llama-70b

There are optional args, especially note these:

-p or --provider: google or ddg or Exa (default: google)
-m <model_name>: to run with a different LLM model (default: gpt4-turbo)

You can specify a local in a few different ways, e.g. `-m local/localhost:8000/v1`
or `-m ollama/mistral` etc. See here how to use Langroid with local LLMs:
https://langroid.github.io/langroid/tutorials/local-llm-setup/


NOTE:
(a) If using Google Search, you must have GOOGLE_API_KEY and GOOGLE_CSE_ID
environment variables in your `.env` file, as explained in the
[README](https://github.com/langroid/langroid#gear-installation-and-setup).


(b) If using ExaSearchTool, you need to:
* set the EXA_API_KEY environment variables in
your `.env` file, e.g. `EXA_API_KEY=your_api_key_here`
* install langroid with the `exa` extra, e.g.
`pip install langroid[exa]` or `uv pip install langroid[exa]`
or `poetry add langroid[exa]`  or `uv add langroid[exa]`
(it installs the `exa-py` package from pypi).
For more information, please refer to the official docs:
https://exa.ai/

"""

import typer
from dotenv import load_dotenv
from rich import print

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.duckduckgo_search_tool import DuckduckgoSearchTool
from langroid.agent.tools.google_search_tool import GoogleSearchTool
from langroid.utils.configuration import Settings, set_global

app = typer.Typer()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    provider: str = typer.Option(
        "ddg",
        "--provider",
        "-p",
        help="search provider name (google, ddg, exa)",
    ),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    print(
        """
        [blue]Welcome to the Web Search chatbot!
        I will try to answer your questions, relying on (summaries of links from) 
        Web-Search when needed.
        
        Enter x or q to quit at any point.
        """
    )

    load_dotenv()

    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=32_000,
        temperature=0.15,
        max_output_tokens=1000,
        timeout=45,
    )

    match provider:
        case "google":
            search_tool_class = GoogleSearchTool
        case "exa":
            from langroid.agent.tools.exa_search_tool import ExaSearchTool

            search_tool_class = ExaSearchTool
        case "ddg":
            search_tool_class = DuckduckgoSearchTool
        case _:
            raise ValueError(f"Unsupported provider {provider} specified.")

    search_tool_handler_method = search_tool_class.name()
    config = lr.ChatAgentConfig(
        name="Seeker",
        handle_llm_no_tool="user",  # fwd to user when LLM sends non-tool msg
        llm=llm_config,
        vecdb=None,
        system_message=f"""
        You are a helpful assistant. You will try your best to answer my questions.
        Here is how you should answer my questions:
        - IF my question is about a topic you ARE CERTAIN about, answer it directly
        - OTHERWISE, use the `{search_tool_handler_method}` tool/function-call to
          get up to 5 results from a web-search, to help you answer the question.
          I will show you the results from the web-search, and you can use those
          to answer the question.
        - If I EXPLICITLY ask you to search the web/internet, then use the 
            `{search_tool_handler_method}` tool/function-call to get up to 5 results
            from a web-search, to help you answer the question.


        In case you use the TOOL `{search_tool_handler_method}`, you MUST WAIT
        for results from this tool; do not make up results!
        
        Be very CONCISE in your answers, use no more than 1-2 sentences.
        When you answer based on a web search, First show me your answer, 
        and then show me the SOURCE(s) and EXTRACT(s) to justify your answer,
        in this format:
        
        <your answer here>
        SOURCE: https://www.wikihow.com/Be-a-Good-Assistant-Manager
        EXTRACT: Be a Good Assistant ... requires good leadership skills.
        
        SOURCE: ...
        EXTRACT: ...
        
        For the EXTRACT, ONLY show up to first 3 words, and last 3 words.
        DO NOT MAKE UP YOUR OWN SOURCES; ONLY USE SOURCES YOU FIND FROM A WEB SEARCH.
        """,
    )
    agent = lr.ChatAgent(config)

    agent.enable_message(search_tool_class)

    task = lr.Task(agent, interactive=False)

    # local models do not like the first message to be empty
    user_message = "Can you help me with some questions?"
    task.run(user_message)


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/chat-tool-function.py">
"""
Bare bones example of using tool/function-call

Run like this, optionally specifying an LLM:

python3 examples/basic/chat-tool-function.py

or

python3 examples/basic/chat-tool-function.py -m ollama/mistral:7b-instruct-v0.2-q8_0

or 

uv run examples/basic/chat-tool-function.py -m deepseek/deepseek-reasoner

"""

from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import FinalResultTool
from langroid.pydantic_v1 import BaseModel, Field

# define a nested structure for Company information


class CompanyFinancials(BaseModel):
    shares: int = Field(..., description="shares outstanding of company")
    price: float = Field(..., description="price per share of company")
    eps: float = Field(..., description="earnings per share of company")


class CompanyInfo(BaseModel):
    name: str = Field(..., description="name of company")
    industry: str = Field(..., description="industry of company")
    financials: CompanyFinancials = Field(..., description="financials of company")


# define a ToolMessage corresponding to the above structure


class CompanyInfoTool(lr.agent.ToolMessage):
    request: str = "company_info_tool"  # agent method that handles this tool
    purpose: str = (
        "To extract <company_info> from a passage and compute market-capitalization."
    )
    company_info: CompanyInfo

    @classmethod
    def examples(cls):
        """Examples that will be compiled to few-shot examples for the LLM.
        Illustrating two types of examples below:
        - example instance
        - (description, example) tuple
        """
        return [
            cls(
                company_info=CompanyInfo(
                    name="IBM",
                    industry="Technology",
                    financials=CompanyFinancials(shares=1.24e9, price=140.15, eps=4.68),
                )
            ),
            (
                "I want to extract and present company info from the passage",
                cls(
                    company_info=CompanyInfo(
                        name="Apple",
                        industry="Technology",
                        financials=CompanyFinancials(
                            shares=16.82e9, price=149.15, eps=5.68
                        ),
                    )
                ),
            ),
        ]

    def handle(self) -> FinalResultTool:
        """Handle LLM's structured output if it matches CompanyInfo structure.
        This suffices for a "stateless" tool.
        If the tool handling requires agent state, then
        instead of this `handle` method, define a `company_info_tool`
        method in the agent.
        """
        mkt_cap = (
            self.company_info.financials.shares * self.company_info.financials.price
        )
        print(
            f"""
            Got Valid Company Info.
            The market cap of {self.company_info.name} is ${mkt_cap/1e9}B.
            """
        )
        return FinalResultTool(
            market_cap=mkt_cap,
            info=self.company_info,
        )


def run(model: str = ""):  # or, e.g., "ollama/mistral:7b-instruct-v0.2-q8_0"
    lm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,  # or
    )
    tool_name = CompanyInfoTool.default_value("request")
    agent_config = lr.ChatAgentConfig(
        llm=lm_config,
        system_message=f"""
        You are a company-info extraction expert. When user gives you a TEXT PASSAGE,
        simply extract the company information and 
        present it using the `{tool_name}` tool/function-call.
        """,
    )
    agent = lr.ChatAgent(agent_config)
    agent.enable_message(CompanyInfoTool)

    # text to present to the LLM
    paragraph = """
        Apple Inc. is an American multinational technology company that specializes in 
        consumer electronics, computer software, and online services.
        It has shares outstanding of 16.82 billion, and a price per share of $149.15.
        The earnings per share is $5.68.
        """

    # test 1:
    # see that the LLM extracts the company information and presents it using the tool
    response = agent.llm_response(paragraph)

    print(response.content)

    # test 2:
    # wrap the agent in a Task, so that the ToolMessage is handled by the handle method
    task = lr.Task(agent, interactive=False)
    result = task[FinalResultTool].run(paragraph)
    assert result.market_cap > 0
    assert "Apple" in result.info.name


if __name__ == "__main__":
    Fire(run)
</file>

<file path="examples/basic/chat-tree-structured-simple.py">
"""
Simple example showing tree-structured computation, 
a variation of `examples/basic/chat-tree.py` which uses strict output formatting
to reliably wrap calls to agents in standard Python functions, allowing
explicit control over control flow.

The task consists of performing this calculation for a given input number n:

def Main(n):
    if n is odd:
        return (3*n+1) + n
    else:
        If n is divisible by 10:
            return n/10 + n
        else:
            return n/2 + n

Each step is performed by an LLM call, and strict output formatting ensures that
a valid typed response is returned (rather than a string which requires another
LLM call to interpret).

We evaluate the conditions with a `condition_agent` which is given an integer and
a condition and return a Boolean and evaluate the transformations of `n` with
a `transformation_agent` which is given an integer and a transformation rule
and returns the transformed integer.

Finally, we add the result with the original `n` using an `adder_agent` which
illustrates strict output usage in `Task`s.

For more details on structured outputs, see the notes at
https://langroid.github.io/langroid/notes/structured-output/.
"""

import typer
from rich.prompt import Prompt

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE
from langroid.utils.logging import setup_colored_logging

app = typer.Typer()

setup_colored_logging()


def chat() -> int:
    condition_agent = ChatAgent(
        ChatAgentConfig(
            system_message="""
            You will be provided with a condition and a
            number; your goal is to determine whether
            that number satisfies the condition.

            Respond in JSON format, with `value` set
            to the result.
            """,
            output_format=bool,
        )
    )
    transformation_agent = ChatAgent(
        ChatAgentConfig(
            system_message="""
            You will be provided with a number and an
            transformation of the number to perform.

            Respond in JSON format, with `value` set
            to the result.
            """,
            output_format=int,
        )
    )

    def check_condition(n: int, condition: str) -> bool:
        output = condition_agent.llm_response_forget(
            f"""
            Number: {n}
            Condition: {condition}
            """
        )
        return condition_agent.from_ChatDocument(output, bool)  # type: ignore

    def apply_transformation(n: int, transformation: str) -> int:
        output = transformation_agent.llm_response_forget(
            f"""
            Number: {n}
            Transformation: {transformation}
            """
        )
        return transformation_agent.from_ChatDocument(output, int)  # type: ignore

    num = int(Prompt.ask("Enter a number"))
    is_even = check_condition(num, "The number is even.")

    if is_even:
        is_divisible_by_10 = check_condition(num, "The number is divisible by 10.")

        if is_divisible_by_10:
            to_adder = apply_transformation(num, "n/10 where the number is n.")
        else:
            to_adder = apply_transformation(num, "n/2 where the number is n.")
    else:
        to_adder = apply_transformation(num, "3n+1 where the number is n.")

    class AddNumTool(ToolMessage):
        request = "add_num"
        purpose = "Add <number> to the original number, return the result"
        number: int

        def handle(self) -> str:
            total = num + self.number
            return f"{DONE} {total}"

    # We could also have the agent output a the call in a single step and handle
    # it ourselves (or apply it immediately)
    adder_agent = ChatAgent(
        ChatAgentConfig(
            system_message="""
            You will be given a number n.
            You have to add it to the original number and return the result.
            You do not know the original number, so you must use the 
            `add_num` tool/function for this. 
            """,
            output_format=AddNumTool,
        )
    )
    adder_agent.enable_message(AddNumTool)
    adder_task = Task(adder_agent, interactive=False, name="Adder")

    # compute the final output value
    return adder_task[int].run(str(to_adder))  # type: ignore


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    chat()


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/chat-tree-structured.py">
"""
Simple example showing tree-structured computation
where each node in the tree is handled by a separate agent.
A variation of `examples/basic/chat-tree.py` which uses strict output formatting
and agent logic to enforce the behavior specified in the prompts.

See the use of `set_output_format()` in ConditionalAgent.

The task consists of performing this calculation for a given input number n:

def Main(n):
    if n is odd:
        return (3*n+1) + n
    else:
        If n is divisible by 10:
            return n/10 + n
        else:
            return n/2 + n

To make this "interesting", we represent this computation hierarchically,
in the form of this tree:

Main
- Odd
    - Adder
- Even
    - EvenZ
        - Adder
    - EvenNZ
        - Adder

For a full write-up on the design considerations, see the documentation page on
Hiearchical Agent Computations at https://langroid.github.io/langroid/examples/agent-tree/

For more details on structured outputs, see the notes at
https://langroid.github.io/langroid/notes/structured-output/.
"""

import typer
from rich.prompt import Prompt

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocument
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import AgentDoneTool
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE
from langroid.utils.globals import GlobalState
from langroid.utils.logging import setup_colored_logging

app = typer.Typer()

setup_colored_logging()


class MyGlobalState(GlobalState):
    number: int | None = None


class AskNumTool(ToolMessage):
    request = "ask_num"
    purpose = "Ask user for the initial number"

    def handle(self) -> str:
        """
        This is a stateless tool (i.e. does not use any Agent member vars), so we can
        define the handler right here, instead of defining an `ask_num`
        method in the agent.
        """
        num = int(Prompt.ask("Enter a number"))
        # record this in global state, so other agents can access it
        MyGlobalState.set_values(number=num)
        return str(num)


class AddNumTool(ToolMessage):
    request = "add_num"
    purpose = "Add <number> to the original number, return the result"
    number: int

    def handle(self) -> AgentDoneTool:
        """
        This is a stateless tool (i.e. does not use any Agent member vars), so we can
        define the handler right here, instead of defining an `add_num`
        method in the agent.
        """
        total = MyGlobalState.get_value("number") + self.number
        return AgentDoneTool(
            tools=[ResultTool(result=total)],
        )


class MatchTool(ToolMessage):
    request: str = "match"
    purpose: str = "To express whether the input number matches your condition."
    matches: bool


class ResultTool(ToolMessage):
    request: str = "result"
    purpose: str = (
        "To express the result of your transformation applied to the input number."
    )
    result: int


class ConditionalAgentConfig(ChatAgentConfig):
    top_level: bool = False


class ConditionalAgent(ChatAgent):
    def __init__(self, config: ConditionalAgentConfig = ConditionalAgentConfig()):
        super().__init__(config)
        self.config: ConditionalAgentConfig = config  # type: ignore
        # Should the next request be treated as self-generated?
        self.generated_request: bool = False

        if self.config.top_level:
            # We always begin by requesting a number from the user
            self.set_output_format(AskNumTool)
            self.enable_message(AskNumTool)
            self.enable_message(ResultTool, handle=True, use=False)
        else:
            self.enable_message([MatchTool, ResultTool])
            # We always begin by checking whether the number matches the agent's condiditon
            self.set_output_format(MatchTool)

    def ask_num(self, msg: AskNumTool) -> str:
        self.set_output_format(None)
        return msg.handle()

    def match(self, msg: MatchTool) -> str:
        if not msg.matches:
            return DONE

        # The agent must next return the transformed number
        self.set_output_format(ResultTool)
        self.generated_request = True
        return "Now, return the input number, after applying your transformation."

    def result(self, msg: ResultTool) -> str | ChatDocument | AgentDoneTool:
        if self.config.top_level:
            self.set_output_format(AskNumTool)
            # Return the answer if we are the top-level task
            return f"{DONE} {msg.result}"
        elif self.generated_request:
            self.generated_request = False
            return self.create_llm_response(
                content=str(msg.result),
            )
        else:
            self.set_output_format(MatchTool)

        # Propogate the result up if we are done
        return AgentDoneTool(
            tools=[msg],
        )


def chat() -> None:
    main_task = Task(
        ConditionalAgent(
            ConditionalAgentConfig(
                top_level=True,
            )
        ),
        interactive=False,
        name="Main",
        system_message="""
        You will ask the user for a number with the `ask_num` tool; you should respond with exactly that number,
        say nothing else.
        """,
    )

    prompt_format = """
        You will receive a number; you should first check whether that number
        matches your condition.

        Condition: {condition}

        If so, you should respond with a transformed version of the number:

        Transformation: {transformation}
        """

    even_task = Task(
        ConditionalAgent(),
        interactive=False,
        name="Even",
        system_message=prompt_format.format(
            condition="The number is even.",
            transformation="Nothing, return the number you were provided.",
        ),
    )
    evenz_task = Task(
        ConditionalAgent(),
        interactive=False,
        name="EvenZ",
        system_message=prompt_format.format(
            condition="The number is divisible by 10.",
            transformation="Return n/10 where n is the provided number.",
        ),
    )
    even_nz_task = Task(
        ConditionalAgent(),
        interactive=False,
        name="EvenNZ",
        system_message=prompt_format.format(
            condition="The number is not divisible by 10.",
            transformation="Return n/2 where n is the provided number.",
        ),
    )
    odd_task = Task(
        ConditionalAgent(),
        interactive=False,
        name="Odd",
        system_message=prompt_format.format(
            condition="The number is odd.",
            transformation="Return n*3 + 1",
        ),
    )

    adder_agent = ChatAgent()
    adder_agent.enable_message(AddNumTool)
    adder_task = Task(
        # ensure that the agent calls the tool:
        # agent[T] is a copy of agent which always outputs values of type T
        adder_agent[AddNumTool],
        name="Adder",
        interactive=False,
        system_message="""
        You will be given a number n.
        You have to add it to the original number and return the result.
        You do not know the original number, so you must use the 
        `add_num` tool/function for this. 
        """,
    )

    # set up tasks and subtasks
    main_task.add_sub_task([even_task, odd_task])
    even_task.add_sub_task([evenz_task, even_nz_task])
    evenz_task.add_sub_task(adder_task)
    even_nz_task.add_sub_task(adder_task)
    odd_task.add_sub_task(adder_task)

    # start the chat
    main_task.run()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    chat()


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/chat-tree.py">
"""
Simple example showing tree-structured computation
where each node in the tree is handled by a separate agent.

This task consists of performing this calculation for a given input number n:

def Main(n):
    if n is odd:
        return (3*n+1) + n
    else:
        If n is divisible by 10:
            return n/10 + n
        else:
            return n/2 + n

To make this "interesting", we represent this computation hierarchically,
in the form of this tree:

Main
- Odd
    - Adder
- Even
    - EvenZ
        - Adder
    - EvenNZ
        - Adder

For a full write-up on the design considerations, see the documentation page on
Hiearchical Agent Computations at https://langroid.github.io/langroid/examples/agent-tree/
"""

import typer
from rich.prompt import Prompt

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE
from langroid.utils.globals import GlobalState
from langroid.utils.logging import setup_colored_logging

app = typer.Typer()

setup_colored_logging()


class MyGlobalState(GlobalState):
    number: int | None = None


class AskNumTool(ToolMessage):
    request = "ask_num"
    purpose = "Ask user for the initial number"

    def handle(self) -> str:
        """
        This is a stateless tool (i.e. does not use any Agent member vars), so we can
        define the handler right here, instead of defining an `ask_num`
        method in the agent.
        """
        num = Prompt.ask("Enter a number")
        # record this in global state, so other agents can access it
        MyGlobalState.set_values(number=num)
        return str(num)


class AddNumTool(ToolMessage):
    request = "add_num"
    purpose = "Add <number> to the original number, return the result"
    number: int

    def handle(self) -> str:
        """
        This is a stateless tool (i.e. does not use any Agent member vars), so we can
        define the handler right here, instead of defining an `add_num`
        method in the agent.
        """
        return str(int(MyGlobalState.get_value("number")) + int(self.number))


def chat(model: str = "") -> None:
    config = ChatAgentConfig(
        llm=OpenAIGPTConfig(
            chat_model=model or OpenAIChatModel.GPT4o,
        ),
        vecdb=None,
    )

    main_agent = ChatAgent(config)
    main_task = Task(
        main_agent,
        name="Main",
        interactive=False,
        system_message="""
        You will receive two types of messages, to which you will respond as follows:
        
        INPUT Message format: <number>
        In this case simply write the <number>, say nothing else.
        
        RESULT Message format: RESULT <number>
        In this case simply say "DONE <number>", e.g.:
        DONE 19

        To start off, ask the user for the initial number, 
        using the `ask_num` tool/function.
        """,
    )

    # Handles only even numbers
    even_agent = ChatAgent(config)
    even_task = Task(
        even_agent,
        name="Even",
        interactive=False,
        system_message=f"""
        You will receive two types of messages, to which you will respond as follows:
        
        INPUT Message format: <number>
        - if the <number> is odd, say '{DONE}'
        - otherwise, simply write the <number>, say nothing else.
        
        RESULT Message format: RESULT <number>
        In this case simply write "DONE RESULT <number>", e.g.:
        DONE RESULT 19
        """,
    )

    # handles only even numbers ending in Zero
    evenz_agent = ChatAgent(config)
    evenz_task = Task(
        evenz_agent,
        name="EvenZ",
        interactive=False,
        system_message=f"""
        You will receive two types of messages, to which you will respond as follows:
        
        INPUT Message format: <number>
        - if <number> n is even AND divisible by 10, compute n/10 and pass it on,
        - otherwise, say '{DONE}'
        
        RESULT Message format: RESULT <number>
        In this case simply write "DONE RESULT <number>", e.g.:
        DONE RESULT 19
        """,
    )

    # Handles only even numbers NOT ending in Zero
    even_nz_agent = ChatAgent(config)
    even_nz_task = Task(
        even_nz_agent,
        name="EvenNZ",
        interactive=False,
        system_message=f"""
        You will receive two types of messages, to which you will respond as follows:
        
        INPUT Message format: <number>
        - if <number> n is even AND NOT divisible by 10, compute n/2 and pass it on,
        - otherwise, say '{DONE}'
        
        RESULT Message format: RESULT <number>
        In this case simply write "DONE RESULT <number>", e.g.:
        DONE RESULT 19
        """,
    )

    # Handles only odd numbers
    odd_agent = ChatAgent(config)
    odd_task = Task(
        odd_agent,
        name="Odd",
        interactive=False,
        system_message=f"""
        You will receive two types of messages, to which you will respond as follows:
        
        INPUT Message format: <number>
        - if <number> n is odd, compute n*3+1 and write it.
        - otherwise, say '{DONE}'

        RESULT Message format: RESULT <number>        
        In this case simply write "DONE RESULT <number>", e.g.:
        DONE RESULT 19
        """,
    )

    adder_agent = ChatAgent(config)
    adder_task = Task(
        adder_agent,
        name="Adder",
        interactive=False,
        system_message="""
        You will be given a number n.
        You have to add it to the original number and return the result.
        You do not know the original number, so you must use the 
        `add_num` tool/function for this. 
        When you receive the result, say "DONE RESULT <result>", e.g.
        DONE RESULT 19
        """,
    )

    # set up tasks and subtasks
    main_task.add_sub_task([even_task, odd_task])
    even_task.add_sub_task([evenz_task, even_nz_task])
    evenz_task.add_sub_task(adder_task)
    even_nz_task.add_sub_task(adder_task)
    odd_task.add_sub_task(adder_task)

    # set up the tools
    main_agent.enable_message(AskNumTool)
    adder_agent.enable_message(AddNumTool)

    # start the chat
    main_task.run()


@app.command()
def main(
    model: str = typer.Option("", "--model", "-m", help="model to use"),
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    chat(model)


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/chat.py">
# script
# requires-python = ">=3.11"
# dependencies = [
#     "langroid",
# ]
# ///
"""
The most basic chatbot example, using the default settings.
A single Agent allows you to chat with a pre-trained Language Model.

Run like this:

python3 examples/basic/chat.py

Use optional arguments to change the settings, e.g.:

-m <local_model_spec>
-ns # no streaming
-d # debug mode
-nc # no cache
-sm <system_message>
-q <initial user msg>

For details on running with local or non-OpenAI models, see:
https://langroid.github.io/langroid/tutorials/local-llm-setup/
"""

import typer
from dotenv import load_dotenv
from rich import print
from rich.prompt import Prompt

import langroid.language_models as lm
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.utils.configuration import Settings, set_global

app = typer.Typer()

# Create classes for non-OpenAI model configs


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    sys_msg: str = typer.Option(
        "You are a helpful assistant. Be concise in your answers.",
        "--sysmsg",
        "-sm",
        help="system message",
    ),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    print(
        """
        [blue]Welcome to the basic chatbot!
        Enter x or q to quit at any point.
        """
    )

    load_dotenv()

    # use the appropriate config instance depending on model name
    # NOTE: when using Azure, change this to `lm.AzureConfig`
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,  # set based on model
        timeout=45,
    )

    sys_msg = Prompt.ask(
        "[blue]Tell me who I am. Hit Enter for default, or type your own\n",
        default=sys_msg,
    )

    config = ChatAgentConfig(
        system_message=sys_msg,
        llm=llm_config,
    )
    agent = ChatAgent(config)
    task = Task(agent)
    task.run("hello")


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/completion.py">
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "langroid",
# ]
# ///
"""
Interact with a base completion model, specifically the original GPT-3 base model
(i.e. davinci-002 or babbage-002),
one that has not been instruct-tuned for chat-like conversation.
This uses the legacy OpenAI Completion API.
This API simply takes pure text (NOT dialog) , and returns the LLM's completion.
Note there is no notion of system message here.

Run like this:

python3 examples/basic/completion.py

Use optional arguments to change the settings, e.g.:

-m <local_model_spec>
-ns # no streaming
-d # debug mode
-nc # no cache


For details on running with local or non-OpenAI models, see:
https://langroid.github.io/langroid/tutorials/local-llm-setup/
"""

import typer
from dotenv import load_dotenv
from rich import print
from rich.prompt import Prompt

import langroid.language_models as lm
from langroid.utils.configuration import Settings, set_global

app = typer.Typer()


def multiline_input(prompt_text):
    lines = []
    while True:
        line = Prompt.ask(prompt_text)
        if not line:
            break
        lines.append(line)
    return "\n".join(lines)


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    print(
        """
        [blue]Welcome to the basic completion engine.
        Text you enter will be completed by an LLM 
        (Default is a GPT3-class LLM, davinci-002). 
        You can enter multi-line inputs; Enter return TWICE to send your message.
        Enter x or q to quit at any point.
        """
    )

    load_dotenv()

    # use the appropriate config instance depending on model name
    llm_config = lm.OpenAIGPTConfig(
        completion_model=model or "davinci-002",  # or "babbage-002"
        chat_context_length=4096,
        timeout=45,
        use_chat_for_completion=False,
    )
    llm = lm.OpenAIGPT(llm_config)

    print()
    while True:
        print("\n")
        user_msg = multiline_input("[blue]You[/blue]")
        if user_msg.lower() in ["q", "x"]:
            break
        print("\nBot: ")
        response = llm.generate(prompt=user_msg, max_tokens=50)

        if response.cached:
            print(f"[red](Cached)[/red] [green] {response.message}[/green]")


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/concurrent-tasks.py">
"""
Toy example showing how to combine results from multiple tasks running concurrently.

- main agent/task uses `multi_task_tool` tool to specify what to send to tasks t2, t3
- t2, t3 are run concurrently
- results from t2, t3 are combined and returned to main agent/task
- main agent/task then uses the combined results to generate a final response
"""

from typing import Dict

from fire import Fire
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.batch import run_batch_task_gen
from langroid.agent.tools.orchestration import AgentDoneTool
from langroid.utils.globals import GlobalState

CITY_AGENT_NAME = "CityAgent"
NAME_AGENT_NAME = "NameAgent"


class MyGlobalState(GlobalState):
    name_task_map: Dict[str, str] = {}


class MultiTaskTool(lr.ToolMessage):
    request: str = "multi_task_tool"
    purpose: str = """
        Specify messages to send to multiple agents, via <agent_msgs>
        which is a dict mapping agent names to messages.
    """
    agent_msgs: Dict[str, str]

    def handle(self) -> AgentDoneTool:
        inputs = list(self.agent_msgs.values())
        agent_names = list(self.agent_msgs.keys())
        name_task_map = MyGlobalState.get_value("name_task_map")
        tasks = [name_task_map[name] for name in agent_names]

        def result2content_fn(chat_doc: lr.ChatDocument) -> str:
            return chat_doc.content

        def task_gen(i: int):  # task generator
            return tasks[i]

        results = run_batch_task_gen(task_gen, inputs, output_map=result2content_fn)
        output = "\n".join(
            f"{agent_names[i]}: {result}" for i, result in enumerate(results)
        )
        return AgentDoneTool(content=output)


def chat(model: str = "") -> None:

    cities_agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name=CITY_AGENT_NAME,
            llm=lm.OpenAIGPTConfig(
                chat_model=model or lm.OpenAIChatModel.GPT4o,
            ),
            system_message="""
            You'll receive a sentence. 
            Simply show the the list of cities in the sentence if any,
            as a comma-separated list, say nothing else.
            If no cities are found, say "NO CITIES".
            """,
        )
    )

    names_agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name=NAME_AGENT_NAME,
            llm=lm.OpenAIGPTConfig(
                chat_model=model or lm.OpenAIChatModel.GPT4o,
            ),
            system_message="""
            You'll receive a sentence. 
            Simply show the the list of names in the sentence if any,
            as a comma-separated list, say nothing else.
            If no names are found, say "NO NAMES".
            """,
        )
    )

    cities_task = lr.Task(cities_agent, interactive=False, single_round=True)
    names_task = lr.Task(names_agent, interactive=False, single_round=True)

    MyGlobalState.set_values(
        name_task_map={CITY_AGENT_NAME: cities_task, NAME_AGENT_NAME: names_task}
    )

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="MainAgent",
            llm=lm.OpenAIGPTConfig(
                chat_model=model or lm.OpenAIChatModel.GPT4o,
            ),
            system_message=f"""
            You'll receive a sentence. Your end-goal is to get the 
            list of cities and names mentioned in the sentence,
            BUT YOU DO NOT KNOW HOW TO EXTRACT THEM;
            you'll receive the help of {CITY_AGENT_NAME} and {NAME_AGENT_NAME} for this.
            You must use the TOOL `{MultiTaskTool.name()}` to send the sentence 
            to them.
            Once you receive the consolidated results,
            say "DONE" and show the list of cities and names.
            """,
        )
    )

    agent.enable_message(MultiTaskTool)

    task = lr.Task(agent, interactive=False, single_round=False)

    sentence = Prompt.ask(
        "Enter a sentence, to extract cities and names from",
        default="Satoshi will meet Alice in New York and Bob in London",
    )

    result = task.run(sentence)

    print(
        f"""
        [bold]Final Result:[/bold]
        {result}
        """
    )


if __name__ == "__main__":
    Fire(chat)
</file>

<file path="examples/basic/drug-outcomes.py">
"""
ADE (Adverse Drug Event) probability estimation task:

Given a pair of (Drug Category, Adverse Event), have the LLM generate an estimate
of the probability that the drug category is associated with an increased risk
of the adverse event.

Run this N times (without caching) to get statistics on the estimates.
Illustrates the use of `llm_response_batch`.

Default model is GPT4o, see how to specify alternative models below.

Example run:

python3 examples/basic/ drug-outcomes.py \
    --model litellm/claude-3-5-sonnet-20240620 --temp 0.1 \
    --pair "(Antibiotics, Acute Liver Injury)" --n 20 --reason true

Interesting models to try:
- gpt-4o (default)
- gpt-4
- litellm/claude-3-5-sonnet-20240620
- groq/llama3-70b-8192

See reference below for specific (DrugCategory, ADE) pairs to test.

References:
    - Guides to using Langroid with local and non-OpenAI models:
        https://langroid.github.io/langroid/tutorials/local-llm-setup/
        https://langroid.github.io/langroid/tutorials/non-openai-llms/
    - OMOP Ground Truth table of known Drug-ADE associations:
        (see page 16 for the table of Drug-ADE pairs)
        https://www.brookings.edu/wp-content/uploads/2012/04/OMOP-methods-review.pdf
"""

import re

import numpy as np
from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.utils.configuration import settings

# Turn off cache retrieval, to get independent estimates on each run
settings.cache = False

MODEL = lm.OpenAIChatModel.GPT4o
TEMP = 0.1
PAIR = "(Antibiotics, Acute Liver Injury)"
N = 20
# should LLM include reasoning along with probability?
# (meant to test whether including reasoning along with the probability
# improves accuracy and/or variance of estimates)
REASON: bool = False


def extract_num(x: str) -> int:
    """
    Extracts an integer from a string that contains a number.

    Args:
        x (str): The input string containing the number.

    Returns:
        int: The extracted integer.

    Raises:
        ValueError: If no number is found in the expected format.
    """
    match = re.search(r"\d+", x)
    if match:
        return int(match.group(0))
    else:
        return -1


def main(
    model: str = MODEL,
    temp: float = TEMP,
    pair: str = PAIR,
    n: int = N,
    reason: bool = REASON,
):
    REASONING_PROMPT = (
        """
            IMPORTANT: Before showing your estimated probability, 
            you MUST show 2-3 sentences with your REASONING, and THEN give your 
            percent probability estimate in the range [0,100].
    """
        if reason
        else ""
    )

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=lm.OpenAIGPTConfig(
                temperature=temp,
                chat_model=model,
            ),
            name="ADE-Estimator",
            system_message=f"""
            You are a clinician with deep knowledge of Adverse Drug Events (ADEs) 
            of various drugs and categories of drugs.
            You will be given a (DRUG CATEGORY, ADVERSE OUTCOME) pair,
            you have to estimate the probability that this DRUG CATEGORY
            is associated with INCREASED RISK of the ADVERSE OUTCOME. 
    
            {REASONING_PROMPT}
                
            You must give your probability estimate as a SINGLE NUMBER e.g. 56, 
            which means 56%.             
            DO NOT GIVE A RANGE OF PROBABILITIES, ONLY A SINGLE NUMBER. 
            """,
        )
    )

    results = lr.llm_response_batch(
        agent,
        [pair] * n,
        # ["(Beta Blockers, Mortality after Myocardial Infarction)"]*20,
    )
    probs = [extract_num(r.content) for r in results]
    cached = [r.metadata.cached for r in results]
    n_cached = sum(cached)
    # eliminate negatives (due to errs)
    probs = [p for p in probs if p >= 0]
    mean = np.mean(probs)
    std = np.std(probs)
    std_err = std / np.sqrt(len(probs))
    hi = max(probs)
    lo = min(probs)
    print(f"Stats for {pair} with {model} temp {temp} reason {reason}:")
    print(
        f"N: {len(probs)} ({n_cached} cached ) Mean: {mean:.2f}, Std: {std:.2f}, StdErr:"
        f" {std_err:.2f}, min: {lo:.2f}, max: {hi:.2f}"
    )
    toks, cost = agent.llm.tot_tokens_cost()
    print(f"Tokens: {toks}, Cost: {cost:.2f}")


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/basic/fn-call-local-numerical.py">
"""
Function-calling example using a local LLM, with ollama.

"Function-calling" refers to the ability of the LLM to generate
a structured response, typically a JSON object, instead of a plain text response,
which is then interpreted by your code to perform some action.
This is also referred to in various scenarios as "Tools", "Actions" or "Plugins".
See more here: https://langroid.github.io/langroid/quick-start/chat-agent-tool/

This script is designed to have a basic ChatAgent (powered by an Open-LLM)
engage in a multi-round conversation where the user may occasionally
ask for the "Polinsky transform" of a number, which requires the LLM to
use a `Polinsky` tool/function-call. This is a fictitious transform,
that simply does n => 3n + 1.
We intentionally use a fictitious transform rather than something like "square"
or "double" to prevent the LLM from trying to answer the question directly.

The challenging part here is getting the LLM to decide on an appropriate response
to a few different types of user messages:
- user asks a general question -> LLM should answer the question directly
- user asks for the Polinsky transform of a number -> LLM should use the Polinsky tool
- result from applying Polinsky transform -> LLM should present this to the user
- user (tool-handler) says there was a format error in using the Polinsky tool -> LLM
    should try this tool again

Many models quickly get confused in a multi-round conversation like this.
However (as of Sep 2024), `llama-3.1-70b` seems to do well here (we run this via groq).

Run like this --

python3 examples/basic/fn-call-local-numerical.py -m groq/llama-3.1-70b-versatile

or

python3 examples/basic/fn-call-local-numerical.py -m ollama/qwen2.5-coder:latest


(if the optional -m <model_name> is not provided, it defaults to GPT-4o).

See here for ways to set up a Local/Open LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

"""

import os
from typing import List, Optional

import fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.chat_document import ChatDocument
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import ForwardTool
from langroid.language_models.openai_gpt import OpenAICallParams
from langroid.utils.configuration import settings

DEFAULT_LLM = lm.OpenAIChatModel.GPT4o


os.environ["TOKENIZERS_PARALLELISM"] = "false"

# (1) Define the desired fn-call as a ToolMessage via Pydantic.


class PolinskyTool(lr.agent.ToolMessage):
    """A fictitious number transformation tool. We intentionally use
    a fictitious tool rather than something like "square" or "double"
    to prevent the LLM from trying to answer the question directly.
    """

    request: str = "polinsky"
    purpose: str = (
        """
        To respond to user request for the Polinsky transform of a <number>.
        NOTE: ONLY USE THIS TOOL AFTER THE USER ASKS FOR A POLINSKY TRANSFORM. 
        """
    )
    number: int

    @classmethod
    def examples(cls) -> List["ToolMessage"]:
        # Used to provide few-shot examples in the system prompt
        return [
            cls(
                number=19,
            ),
            cls(
                number=5,
            ),
        ]


class MyChatAgent(lr.ChatAgent):
    def init_state(self) -> None:
        self.tool_expected = False

    def polinsky(self, msg: PolinskyTool) -> str:
        """Handle LLM's structured output if it matches Polinsky tool"""
        self.tool_expected = False
        result = msg.number * 3 + 1
        response = f"""
        SUCCESS! The Polinksy transform of {msg.number} is {result}.
        Present this result to the user, and ask what they need help with.
        """
        return response

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        self.tool_expected = True
        return super().llm_response(message)

    def user_response(
        self,
        msg: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        self.tool_expected = False
        return super().user_response(msg)

    def handle_message_fallback(self, msg: str | ChatDocument) -> ForwardTool:
        """
        We end up here when there was no recognized tool msg from the LLM;
        In this case forward the message to the user using ForwardTool.
        """
        if isinstance(msg, ChatDocument) and msg.metadata.sender == lr.Entity.LLM:
            return ForwardTool(agent="User")


def app(
    m: str = DEFAULT_LLM,  # model name
    d: bool = False,  # debug
    nc: bool = False,  # no cache
):
    settings.debug = d
    settings.cache = not nc
    # create LLM config
    llm_cfg = lm.OpenAIGPTConfig(
        chat_model=m or DEFAULT_LLM,
        chat_context_length=16_000,  # for dolphin-mixtral
        max_output_tokens=100,
        params=OpenAICallParams(
            presence_penalty=0.8,
            frequency_penalty=0.8,
        ),
        temperature=0,
        stream=True,
        timeout=100,
    )

    # Recommended: First test if basic chat works with this llm setup as below:
    # Once this works, then you can try the rest of the example.
    #
    # agent = lr.ChatAgent(
    #     lr.ChatAgentConfig(
    #         llm=llm_cfg,
    #     )
    # )
    #
    # agent.llm_response("What is 3 + 4?")
    #
    # task = lr.Task(agent)
    # verify you can interact with this in a chat loop on cmd line:
    # task.run("Concisely answer some questions")

    # Define a ChatAgentConfig and ChatAgent
    config = lr.ChatAgentConfig(
        llm=llm_cfg,
        system_message="""
        You are an expert at deciding when to call 
        specified functions with the right syntax.
        You are very very CONCISE in your responses.
        
        Here is how you must respond to my messages:
        
        1. When I ask a general question, simply respond as you see fit.
            Example: 
                ME(User): "What is 3 + 4?"
                YOU(Assistant): "the answer is 7"
                
        2. When I ask to find the Polinksy transform of a number, 
            you  must use the `polinsky` function/tool
            to request the Polinsky transform of that number.
            Example:
                ME(User): "What is the Polinsky transform of 5?"
                YOU(Assistant): <polinsky tool request in JSON format>
                 
        3. When you receive a SUCCESS message with the result from the `polinsky` 
            tool, you must present the result to me in a nice way (CONCISELY), 
            and ask: 'What else can I help with?'
            Example:
                ME(User): "SUCCESS! The Polinksy transform of 5 is 16"
                YOU(Assistant): "The polinsky transform of 5 is 16. What else can I help with?"
                ME(User): "The answer is 16. What is the Polinsky transform of 19?"
                YOU(Assistant): <polinsky tool request in JSON format>
        4. If you receive an error msg when using the `polinsky` function/tool,
           you must try the function/tool again with the same number.
              Example:
               ME(User): "There was an error in your use of the polinsky tool:..."
               YOU(Assistant): <polinsky tool request in JSON format>
        """,
    )

    agent = MyChatAgent(config)

    # (4) Enable the Tool for this agent --> this auto-inserts JSON instructions
    # and few-shot examples into the system message
    agent.enable_message(PolinskyTool)

    # (5) Create task and run it to start an interactive loop
    task = lr.Task(agent, interactive=False)
    task.run("Can you help me with some questions?")


if __name__ == "__main__":
    fire.Fire(app)
</file>

<file path="examples/basic/fn-call-local-simple.py">
"""
Function-calling example using a local/remote open LLM.

"Function-calling" refers to the ability of the LLM to generate
a structured response, typically a JSON object, instead of a plain text response,
which is then interpreted by your code to perform some action.
This is also referred to in various scenarios as "Tools", "Actions" or "Plugins".
See more here: https://langroid.github.io/langroid/quick-start/chat-agent-tool/

Run like this (to run with llama-3.1-8b-instant via groq):

python3 examples/basic/fn-call-local-simple.py -m groq/llama-3.1-8b-instant

See here for how to set up a Local LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/


"""

import os
from typing import List

import fire
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.chat_document import ChatDocument
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import FinalResultTool
from langroid.pydantic_v1 import BaseModel, Field
from langroid.utils.configuration import settings

# for best results:
DEFAULT_LLM = lm.OpenAIChatModel.GPT4o

os.environ["TOKENIZERS_PARALLELISM"] = "false"

# (1) Define the desired structure via Pydantic.
# Here we define a nested structure for City information.
# The "Field" annotations are optional, and are included in the system message
# if provided, and help with generation accuracy.


class CityData(BaseModel):
    population: int = Field(..., description="population of city")
    country: str = Field(..., description="country of city")


class City(BaseModel):
    name: str = Field(..., description="name of city")
    details: CityData = Field(..., description="details of city")


# (2) Define the Tool class for the LLM to use, to produce the above structure.
class CityTool(lr.agent.ToolMessage):
    """Present information about a city"""

    request: str = "city_tool"
    purpose: str = """
    To present <city_info> AFTER user gives a city name,
    with all fields of the appropriate type filled out;
    """
    city_info: City = Field(..., description="information about a city")

    def handle(self) -> FinalResultTool:
        """Handle LLM's structured output if it matches City structure"""
        print("SUCCESS! Got Valid City Info")
        return FinalResultTool(answer=self.city_info)

    @staticmethod
    def handle_message_fallback(
        agent: lr.ChatAgent, msg: str | ChatDocument
    ) -> str | None:
        """
        We end up here when there was no recognized tool msg from the LLM;
        In this case use the AgentDoneTool with content set to
        the original message content.
        """
        if isinstance(msg, ChatDocument) and msg.metadata.sender == lr.Entity.LLM:
            return f"""
            You forgot to use the TOOL/Function `{CityTool.name()}`.
            Please use this tool to present the city info.
            """

    @classmethod
    def examples(cls) -> List["ToolMessage"]:
        # Used to provide few-shot examples in the system prompt
        return [
            cls(
                city_info=City(
                    name="San Francisco",
                    details=CityData(
                        population=800_000,
                        country="USA",
                    ),
                )
            )
        ]


def app(
    m: str = DEFAULT_LLM,  # model
    d: bool = False,  # pass -d to enable debug mode (see prompts etc)
    nc: bool = False,  # pass -nc to disable cache-retrieval (i.e. get fresh answers)
):
    settings.debug = d
    settings.cache = not nc
    # create LLM config
    llm_cfg = lm.OpenAIGPTConfig(
        chat_model=m or DEFAULT_LLM,
        chat_context_length=32000,  # set this based on model
        max_output_tokens=1000,
        temperature=0.2,
        stream=True,
        timeout=45,
    )

    # Recommended: First test if basic chat works with this llm setup as below:
    # Once this works, then you can try the rest of the example.
    #
    # agent = lr.ChatAgent(
    #     lr.ChatAgentConfig(
    #         llm=llm_cfg,
    #     )
    # )
    #
    # agent.llm_response("What is 3 + 4?")
    #
    # task = lr.Task(agent)
    # verify you can interact with this in a chat loop on cmd line:
    # task.run("Concisely answer some questions")

    # Define a ChatAgentConfig and ChatAgent

    config = lr.ChatAgentConfig(
        llm=llm_cfg,
        system_message=f"""
        You will receive a city name, 
        and you must use the TOOL/FUNCTION `{CityTool.name()}` to generate/present
        information about the city.
        """,
    )

    agent = lr.ChatAgent(config)

    # (4) Enable the Tool for this agent --> this auto-inserts JSON instructions
    # and few-shot examples (specified in the tool defn above) into the system message
    agent.enable_message(CityTool)

    # (5) Create task specialized to return City object
    task: City | None = lr.Task(agent, interactive=False)[City]

    while True:
        city = Prompt.ask("Enter a city name")
        if city in ["q", "x"]:
            break
        result: City | None = task.run(city)
        if result:
            print(f"City Info: {result}")
        else:
            print("No valid city info found.")


if __name__ == "__main__":
    fire.Fire(app)
</file>

<file path="examples/basic/intent-classifier.py">
"""
Agent-loop to classify the intent of a given text.

Run like this (--model is optional, defaults to GPT4o):

python3 examples/basic/intent-classifier.py --model groq/llama-3.1-8b-instant

Other ways to specify the model:
- gpt-4 (set OPENAI_API_KEY in your env or .env file)
- gpt-4o (ditto, set OPENAI_API_KEY)
- cerebras/llama3.1-70b (set CEREBRAS_API_KEY)

For more ways to use langroid with other LLMs, see:
- local/open LLMs: https://langroid.github.io/langroid/tutorials/local-llm-setup/
- non-OpenAPI LLMs: https://langroid.github.io/langroid/tutorials/non-openai-llms/
"""

from enum import Enum
from typing import List, Tuple

from fire import Fire
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import ResultTool


class Intent(str, Enum):
    GREETING = "greeting"
    FAREWELL = "farewell"
    QUESTION = "question"
    STATEMENT = "statement"


class IntentTool(lr.ToolMessage):
    request: str = "intent_tool"
    purpose: str = """
        To classify the <intent> of a given text, into one of:
        - greeting
        - farewell
        - question
        - statement
        """

    intent: Intent

    @classmethod
    def examples(cls) -> List[lr.ToolMessage | Tuple[str, lr.ToolMessage]]:
        """Use these as few-shot tool examples"""
        return [
            cls(intent=Intent.GREETING),
            ("I want to classify this as a question", cls(intent=Intent.QUESTION)),
        ]

    def handle(self) -> ResultTool:
        """Handle the tool sent by LLM"""

        # ResultTool ends the task
        return ResultTool(intent=self.intent)

    def handle_message_fallback(self, message: lr.ChatDocument) -> str | None:
        """We end up here if the LLM did not send a Tool, so nudge it"""
        if (
            isinstance(message, lr.ChatDocument)
            and message.metadata.sender == lr.Entity.LLM
        ):
            return """
            You forgot to use the `intent_tool` to classify the intent.
            """


def main(model: str = ""):
    intent_tool_name = IntentTool.default_value("request")
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="Intent",
            llm=lm.OpenAIGPTConfig(chat_model=model or lm.OpenAIChatModel.GPT4o),
            use_functions_api=False,  # suppress OpenAI functions/tools
            use_tools=True,  # use langroid-native tools: works with ANY LLM
            system_message=f"""
            You are an astute INTENT CLASSIFIER: given any piece of text
            from the user, you are able to smartly infer their intent.
            Given such a piece of text, classify its intent into one of the following:
             - greeting
             - farewell
             - question
             - statement
            To present your classification, use the 
            `{intent_tool_name}` tool.
            
            ALWAYS use this tool to respond, do NOT say anything else.
            """,
        )
    )

    agent.enable_message(IntentTool)

    # create a task loop specialized to return an Intent
    task = lr.Task(agent=agent, interactive=False)[Intent]

    while True:
        text = Prompt.ask("Enter a text to classify its intent")
        intent = task.run(
            f"""
         Please classify the intent of this text, present your answer
         using the `{intent_tool_name}` tool:
         ----
         {text}
         ----
         """
        )

        print(f"Intent: {intent}")


if __name__ == "__main__":

    Fire(main)
</file>

<file path="examples/basic/multi-agent-medical.py">
"""
Credit to @burcusayin for contributing this example.

Run like this:

    python3 examples/basic/multi-agent-medical.py

or
    uv run examples/basic/multi-agent-medical.py

A two-agent system to answer medical questions that require a binary yes/no answer,
along with a `long_answer` explanation. The agents consist of:

- Chief Physician (CP) agent who is in charge of the final binary decision
    and explanation.
- Physician Assistant (PA) agent who is consulted by the CP; The CP may ask a
  series of questions to the PA, and once the CP decides they have sufficient
  information, they will return their final decision using a structured tool message.

The system is run over 445 medical questions from this dataset:
https://huggingface.co/datasets/burcusayin/pubmedqa_binary_with_plausible_gpt4_long_answers

In each row of this dataset, there is a QUESTION, and a final_decision
which we use as reference to compare the system-generated final decision.
"""

import logging

import datasets
import pandas as pd
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.task import TaskConfig
from langroid.agent.tools.orchestration import ForwardTool, ResultTool
from langroid.pydantic_v1 import BaseModel, Field
from langroid.utils.configuration import settings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
lr.utils.logging.setup_colored_logging()

# MODEL = lm.OpenAIChatModel.GPT4o
MODEL = "ollama/llama3:8b"

CP_NAME = "CP"
PA_NAME = "PA"


class ExpectedText(BaseModel):
    final_decision: str = Field(..., description="binary yes/no answer")
    long_answer: str = Field(..., description="explanation for the final decision")


class ExpectedTextTool(lr.ToolMessage):
    request: str = "expected_text_tool"
    purpose: str = """
    To write the final <expectedText> AFTER having a multi-turn discussion
    with the Assistant Agent, with all fields of the appropriate type filled out.
    """
    expectedText: ExpectedText

    def handle(self) -> ResultTool:
        """Handle LLM's structured output if it matches ExpectedText structure"""
        print("SUCCESS! Got Valid ExpectedText Info")

        return ResultTool(status="**DONE!**", expectedText=self.expectedText)

    @staticmethod
    def handle_message_fallback(
        agent: lr.ChatAgent, msg: str | lr.ChatDocument
    ) -> ForwardTool:
        """
        We end up here when there was no recognized tool msg from the LLM;
        In this case forward the message to the Assistant agent (PA) using ForwardTool.
        """
        if isinstance(msg, lr.ChatDocument) and msg.metadata.sender == lr.Entity.LLM:
            return ForwardTool(agent=PA_NAME)


# Define fixed system messages outside of the question-loop
# Pass each question as senior_task.run(question)

SENIOR_SYS_MSG = f"""You are Dr. X, the Chief Physician, collaborating with Dr. Y, your assistant.
                    Your task is to come up with concise answers to medical questions.
                    To make better decisions, when you receive a question, you should follow a TWO-PHASE procedure:

                    PHASE 1: Ask your assistant NATURAL LANGUAGE questions (NO TOOLS), which may span
                        MULTIPLE ROUNDS. ASK EXACTLY ONE QUESTION in each round. DO NOT ASK MULTIPLE QUESTIONS AT ONCE.
                        Avoid fabricating interactions or simulating dialogue with Dr. Y.
                        Instead, clearly articulate your questions or follow-ups, analyze Dr. Y's responses,
                        and use this information to guide your decision-making.
                    PHASE 2: Once you have gathered sufficient information, return your final decision
                        using the TOOL `{ExpectedTextTool.name()}`:
                        - `final_decision` should be your BINARY yes/no answer
                        - `long_answer` should provide a detailed explanation for your final decision.
                    DO NOT mention the TOOL to Dr. Y. It is your responsibility to write and submit the expectedText.
                    """

ASSISTANT_SYS_MSG = """You are Dr. Y, an assistant physician working under the supervision of Dr. X, the chief physician.
                            Your role is to respond to a medical question
                            by providing your initial evaluation, which will guide Dr. X
                            toward finalizing the answer. Dr X may ask you a series of questions, and you should respond
                            based on your expertise and the preceding discussion.
                            ### Instructions:
                            1. Ensure your evaluation is clear, precise, and structured to facilitate an informed discussion.
                            2. In each round of the discussion, limit yourself to a CONCISE message.
                        ### Process:
                        You will first receive a message from Dr. X, asking for your initial assessment.
                        Afterward, you can follow up in each discussion round to collaboratively refine the answer.
                        """


class ChatManager:
    def __init__(
        self,
        d: bool = False,  # pass -d to enable debug mode (see prompts etc)
        nc: bool = False,  # pass -nc to disable cache-retrieval (i.e. get fresh answer)
    ):
        settings.debug = d
        settings.cache = not nc

        self.ass_lm_config = lm.OpenAIGPTConfig(
            chat_model=MODEL,
            chat_context_length=1040_000,
            seed=42,
        )
        self.ass_agent = lr.ChatAgent(
            lr.ChatAgentConfig(
                name=PA_NAME,
                llm=self.ass_lm_config,
                system_message=ASSISTANT_SYS_MSG,
            ),
        )
        # no need for the DiscussionTextTool
        # self.ass_agent.enable_message(DiscussionTextTool)
        self.senior_lm_config = lm.OpenAIGPTConfig(
            chat_model=MODEL,
            chat_context_length=1040_000,
            seed=42,
        )
        self.senior_agent = lr.ChatAgent(
            lr.ChatAgentConfig(
                llm=self.senior_lm_config,
                name=CP_NAME,
                system_message=SENIOR_SYS_MSG,
            ),
        )
        self.senior_agent.enable_message(ExpectedTextTool)

    def start_chat(
        self, question: str
    ) -> ExpectedText:  # this is our main function to start the chat
        task_config = TaskConfig(inf_loop_cycle_len=0)
        self.ass_task = lr.Task(
            self.ass_agent,
            llm_delegate=True,
            interactive=False,
            single_round=True,
            config=task_config,
        )

        self.senior_task = lr.Task(
            self.senior_agent,
            llm_delegate=True,
            interactive=False,
            single_round=False,
            config=task_config,
        )[
            ResultTool
        ]  # specialize task to strictly return ResultTool or None

        self.senior_task.add_sub_task(self.ass_task)
        response_tool: ResultTool | None = self.senior_task.run(
            question, turns=100
        )  # dialogues usually take less than 70 turns

        if response_tool is None:
            print(
                """
                RETURNED ANSWER DOES NOT HAVE A TOOL! LLM DID NOT FORMAT THE DISCHARGE TEXT!!!
                """
            )
            return ExpectedText(final_decision="unknown", long_answer="null")
        else:
            print("ResultTool has been received successfully!!!")
            print(response_tool.expectedText)
            return response_tool.expectedText


if __name__ == "__main__":
    chatAgent = ChatManager()

    pubmed_ds = pd.DataFrame(
        datasets.load_dataset(
            "burcusayin/pubmedqa_binary_with_plausible_gpt4_long_answers"
        )["test"]
    )
    model_responses = []
    nrows = len(pubmed_ds)
    print(f"Processing {nrows} questions")
    for i, row in enumerate(pubmed_ds.itertuples()):
        question = row.QUESTION
        reference_decision = row.final_decision
        print(f"QUESTION: {question}")
        response: ExpectedText = chatAgent.start_chat(question=question)
        model_responses.append(response)
        print(
            f"Got response {i}: {response.final_decision}, reference: {reference_decision}"
        )
        cont = Prompt.ask("Continue? (y/n)", default="y")
        if cont.lower() != "y":
            break
</file>

<file path="examples/basic/multi-agent-return-result.py">
"""
3-agent system where Main task has subtasks that are able to directly return final
task result, "short-circuiting" the flow.

main_task has sub-tasks even_task and odd_task.

- main_task receives a number, simply passes it on.
- even_task can only handle even number N, returns N/2 as final result, 
    else passes it on.
- odd_task can only handle odd number N, returns 3N+1 as final result, 
    else passes it on.
"""

import langroid as lr
from langroid.agent.tools.orchestration import FinalResultTool

main_agent = lr.ChatAgent(
    lr.ChatAgentConfig(
        name="Main",
        system_message="Whatever number you receive, simply repeat it",
    )
)


class MyFinalResultTool(FinalResultTool):
    request: str = "my_final_result_tool"
    purpose: str = "To present the final result of the exercise"
    _allow_llm_use: bool = True

    answer: int  # could of course be str if answer is text


my_final_result_tool = MyFinalResultTool.default_value("request")

even_agent = lr.ChatAgent(
    lr.ChatAgentConfig(
        name="Even",
        system_message=f"""
        - If you receive an even number, return half of it using the 
          TOOL `{my_final_result_tool}` with `answer` set to your answer.
        - Otherwise simply repeat the number
        """,
    )
)

odd_agent = lr.ChatAgent(
    lr.ChatAgentConfig(
        name="Odd",
        system_message=f"""
        - If you receive an odd number N, return 3N+1 using the
          TOOL `{my_final_result_tool}` with `answer` set to your answer.
        - Otherwise simply repeat the number        
        """,
    )
)


even_agent.enable_message(MyFinalResultTool)
odd_agent.enable_message(MyFinalResultTool)

# set up main_task to return a result of type MyFinalResultTool
main_task = lr.Task(main_agent, interactive=False)[MyFinalResultTool]
even_task = lr.Task(even_agent, interactive=False)
odd_task = lr.Task(odd_agent, interactive=False)
main_task.add_sub_task([even_task, odd_task])

result = main_task.run("3")
assert isinstance(result, MyFinalResultTool)
assert result.answer == 10

result = main_task.run("4")
assert isinstance(result, MyFinalResultTool)
assert result.answer == 2

# we can also pass in an integer value

result = main_task.run(15)
assert isinstance(result, MyFinalResultTool)
assert result.answer == 46

result = main_task.run(16)
assert isinstance(result, MyFinalResultTool)
assert result.answer == 8
</file>

<file path="examples/basic/multi-agent-round-table.py">
"""
Toy example where 3 agents concurrently respond to the current message,
and the current message is updated to the response of one such responder.

Run like this:

python3 examples/basic/multi-agent-round-table.py

"""

import langroid as lr
from langroid.agent.batch import run_batch_task_gen
from langroid.utils.constants import NO_ANSWER

agent1 = lr.ChatAgent(
    lr.ChatAgentConfig(
        name="agent1",
        system_message=f"""
        You are a simple number transformer, follow this rule:
        - If you see a number ending in 0,1, or 2, respond with a random 3-digit number.
        - Otherwise, respond saying: {NO_ANSWER}
        """,
    )
)
task1 = lr.Task(agent1, interactive=False, single_round=True)

agent2 = lr.ChatAgent(
    lr.ChatAgentConfig(
        name="agent2",
        system_message=f"""
        You are a simple number transformer, follow this rule:
        - If you see a number ending in 3,4, or 5, respond with a random 3-digit number.
        - Otherwise, respond saying: {NO_ANSWER}
        """,
    )
)
task2 = lr.Task(agent2, interactive=False, single_round=True)


agent3 = lr.ChatAgent(
    lr.ChatAgentConfig(
        name="agent3",
        system_message=f"""
        You are a simple number transformer, follow this rule:
        - If you see a number ending in 6,7,8 or 9, respond with a random 3-digit number.
        - Otherwise, respond saying: {NO_ANSWER}
        """,
    )
)
task3 = lr.Task(agent3, interactive=False, single_round=True)

tasks = [task1, task2, task3]


def task_gen(i):
    return tasks[i]


# kickoff with n = 412
n = 412
# run for 10 rounds
for _ in range(10):
    print("n = ", n)
    inputs = [n] * 3
    results = run_batch_task_gen(task_gen, inputs)
    # find which result is not NO_ANSWER
    for i, r in enumerate(results):
        if r.content != NO_ANSWER:
            n = int(r.content)
            print(f"agent{i+1} responded with {n}")
            break
</file>

<file path="examples/basic/oai-asst-chat.py">
"""
The most basic chatbot example, using an OpenAssistant agent,
powered by the OpenAI Assistant API.

Run like this:

python3 examples/basic/oai-asst-chat.py
"""

import typer
from dotenv import load_dotenv
from rich import print
from rich.prompt import Prompt

from langroid.agent.openai_assistant import OpenAIAssistant, OpenAIAssistantConfig
from langroid.agent.task import Task
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.utils.logging import setup_colored_logging

app = typer.Typer()

setup_colored_logging()


@app.command()
def chat() -> None:
    print(
        """
        [blue]Welcome to the basic chatbot!
        Enter x or q to quit at any point.
        """
    )

    load_dotenv()

    default_sys_msg = "You are a helpful assistant. Be concise in your answers."

    sys_msg = Prompt.ask(
        "[blue]Tell me who I am. Hit Enter for default, or type your own\n",
        default=default_sys_msg,
    )

    config = OpenAIAssistantConfig(
        system_message=sys_msg,
        llm=OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT4o),
    )
    agent = OpenAIAssistant(config)
    task = Task(agent)

    task.run()


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/oai-code-chat.py">
"""
The most basic use of code-interpreter, using an OpenAssistant agent,
powered by the OpenAI Assistant API's code-interpreter tool.

Run like this:

python3 examples/basic/oai-code-chat.py
"""

import tempfile

import typer
from dotenv import load_dotenv
from rich import print
from rich.prompt import Prompt

from langroid.agent.openai_assistant import (
    AssistantTool,
    OpenAIAssistant,
    OpenAIAssistantConfig,
    ToolType,
)
from langroid.agent.task import Task
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.parsing.url_loader import URLLoader
from langroid.utils.logging import setup_colored_logging

app = typer.Typer()

setup_colored_logging()


@app.command()
def chat() -> None:
    print(
        """
        [blue]Welcome to the basic chatbot!
        Enter x or q to quit at any point.
        """
    )

    load_dotenv()

    default_sys_msg = "You are a helpful assistant. Be concise in your answers."

    sys_msg = Prompt.ask(
        "[blue]Tell me who I am. Hit Enter for default, or type your own\n",
        default=default_sys_msg,
    )

    path = Prompt.ask("Enter a URL or file path, or hit enter if no files")
    if path:
        # if path is a url, use UrlLoader to get text as a document
        if path.startswith("http"):
            text = URLLoader([path]).load()[0].content
            # save text to a temp file
            with tempfile.NamedTemporaryFile(
                mode="w", suffix=".txt", delete=False
            ) as f:
                f.write(text)
                f.close()
                # get the filename
                path = f.name

    config = OpenAIAssistantConfig(
        system_message=sys_msg,
        llm=OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT4o),
    )
    agent = OpenAIAssistant(config)
    agent.add_assistant_tools([AssistantTool(type=ToolType.CODE_INTERPRETER)])
    if path:
        agent.add_assistant_files([path])

    task = Task(agent)

    task.run(
        """
        Help me with some questions, 
        using the CODE INTERPRETER tool, and any uploaded files as needed.
        """
    )


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/plan-subtasks.py">
"""
Planner agent receives a math calculation expression from user,
involving + - * / ops, with possible parentheses. Planner has no math abilities,
so it needs to create a plan of elementary operations to compute the result,
and send each step to the appropriate helper agent, who will return the result.

Run like this:

python3 examples/basic/plan-subtasks.py

When it waits for user input, try asking things like:

- (10 + 2)/6 - 1
- 3*(4+1) - 3

"""

import langroid as lr
from langroid.utils.constants import AT, DONE, NO_ANSWER

planner = lr.ChatAgent(
    lr.ChatAgentConfig(
        name="Planner",
        system_message=f"""
        User will give you a math calculation, but you have no math abilities.
        However you are a great planner, so your task is to do two things:
        
        1. CREATE a PLAN of what 
          sequence of ELEMENTARY operations (ONLY add/subtract, multiply/divide) need
          to performed, in order to compute what the user asked for.
        2. EMIT the needed operations, ONE BY ONE, and wait for the answer from
            each, before emitting the next operation. Since you cannot directly
            calculate these, you will have to SEND the needed operations to 
            specific helpers, as follows:
            
            * Send Multiplication operation to `Multiplier`
            * Send Add operation to `Adder`
            * Send Subtract operation to `Subtractor`
            * Send Divide operation to `Divider`
            
            To clarify who you are sending the message to, preface your message with
            {AT}<helper_name>, e.g. "{AT}Multiplier multiply with 5" 
            
            When you have the final answer, say {DONE} and show it.
            
            At the START, ask the user what they need help with, 
            address them as "{AT}user"
            
        EXAMPLE: 
        ============
        User: please calculate (4*5 + 1)/3
        Assistant (You): 
            PLAN: 
                1. multiply 4 with 5
                2. add 1 to the result
                3. divide result by 3
            {AT}Multiplier multiply 4 with 5
            [... wait for result, then show your NEW PLAN and send a new request]
            and so on.                         
                        
        """,
    )
)

adder = lr.ChatAgent(
    lr.ChatAgentConfig(
        name="Adder",
        system_message=f"""
        If you receive an Add request, return the result,
        otherwise say {NO_ANSWER}.
        """,
    )
)

multiplier = lr.ChatAgent(
    lr.ChatAgentConfig(
        name="Multiplier",
        system_message=f"""
        If you receive a Multiply request, return the result,
        otherwise say {NO_ANSWER}.
        """,
    )
)

subtractor = lr.ChatAgent(
    lr.ChatAgentConfig(
        name="Subtractor",
        system_message=f"""
        If you receive a Subtraction request, return the result,
        otherwise say {NO_ANSWER}.
        """,
    )
)

divider = lr.ChatAgent(
    lr.ChatAgentConfig(
        name="Divider",
        system_message=f"""
        If you receive a Division request, return the result,
        otherwise say {NO_ANSWER}.
        """,
    )
)


task_config = lr.TaskConfig(addressing_prefix=AT)
planner_task = lr.Task(planner, interactive=False, config=task_config)
adder_task = lr.Task(adder, interactive=False, single_round=True)
multiplier_task = lr.Task(multiplier, interactive=False, single_round=True)
divider_task = lr.Task(divider, interactive=False, single_round=True)
subtractor_task = lr.Task(subtractor, interactive=False, single_round=True)

planner_task.add_sub_task([adder_task, multiplier_task, divider_task, subtractor_task])


planner_task.run()
</file>

<file path="examples/basic/planner-workflow-spawn.py">
"""
Illustrates a Planner agent orchestrating a multi-step workflow by using the `TaskTool`
to dynamically spawn specialized sub-agents for each step.

- The PlannerAgent is instructed to first increment a number by 3, and then
  multiply the result by 8.
- To do this, it uses the `TaskTool` to dynamically create and run sub-tasks.
- For the incrementing part, it spawns a simple `IncrementAgent` three times.
- For the multiplication part, it spawns a simple `DoublingAgent` three times.

This example showcases a powerful pattern where a high-level agent can delegate
complex sub-processes to dynamically created, specialized agents without needing
them to be pre-defined in the main script.

Run like this from the repo root:

    uv run examples/basic/planner-workflow-spawn.py

To use a different model, for example gpt-4-turbo, run:

    uv run examples/basic/planner-workflow-spawn.py --model gpt-4-turbo

"""

import logging

from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import DoneTool, ResultTool
from langroid.agent.tools.task_tool import TaskTool

logger = logging.getLogger(__name__)
MODEL = lm.OpenAIChatModel.GPT4_1


async def main(model: str = ""):

    class PlannerConfig(lr.ChatAgentConfig):
        name: str = "Planner"
        handle_llm_no_tool: str = "You FORGOT to use one of your TOOLs!"
        llm = lm.OpenAIGPTConfig(
            chat_model=model or MODEL,
        )
        system_message: str = f""" 
        You are a Planner that has ZERO knowledge about MATH/ARITHMETIC!
        
        Your job is to process a number given by the user through a sequence of 2 steps:

        1.  **Increment the number by 3.**
        2.  **Multiply the resulting number by 8.**

        HOWEVER, you CANNOT do these steps yourself, so you instead 
        MUST use the `{TaskTool.name()}` to spawn a sub-agent for one of
        the following tasks as you see fit:
        
        - Increment a given number by 1
        - Double a given number
        
        The sub-agent can use "gpt-4.1-mini" as the model,
        and does not need any tools enabled.
        
        Keep track of the intermediate results.

        Once you have the final result, you MUST use the `{DoneTool.name()}` to return it.
        """

    planner = lr.ChatAgent(PlannerConfig())

    planner.enable_message([TaskTool, DoneTool])

    planner_task = lr.Task(planner, interactive=False)

    # Initial number is 3.
    # After incrementing 3 times: 3 + 3 = 6
    # After doubling 3 times: 6 * 2 * 2 * 2 = 48
    result = await planner_task.run_async("Process this number: 3")
    assert "48" in result.content, f"Expected 48, got {result.content}"


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/basic/python-code-exec-tool.py">
"""
Agent that uses a Tool to execute python code.

CAUTION - this is a security risk, as it allows arbitrary code execution.
This is a bare-bones example. For a real application, you would want to restrict
the code in various ways, e.g. by using a sandboxed environment, or by restricting
the modules that can be imported.

Run like this (leave model empty to use default GPT4o)

uv run examples/basic/python-code-exec-tool.py -m gpt4o-mini
"""

import contextlib
import io

from fire import Fire
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import ResultTool
from langroid.pydantic_v1 import Field


def execute_code(code_string):
    """
    A minimal function to execute Python code and capture its output.

    Args:
        code_string: The Python code to execute

    Returns:
        Tuple of (output, local_variables)
    """
    # Create dictionary for local variables
    local_vars = {}

    # Capture stdout
    buffer = io.StringIO()

    # Execute code with stdout redirection
    with contextlib.redirect_stdout(buffer):
        try:
            exec(code_string, globals(), local_vars)
            success = True
        except Exception as e:
            print(f"Error: {str(e)}")
            success = False

    output = buffer.getvalue()
    return output, local_vars, success


class PyCodeTool(lr.ToolMessage):
    request: str = "py_code_tool"
    purpose: str = "To execute python <code> and return results"

    code: str = Field(
        ...,
        description="""
            Syntactically valid Python code that can be placed in file to 
            be run by the Python interpreter. MUST NOT CONTAIN any CODE-BLOCK
            delimiters like triple-backticks.
            """,
    )

    def handle(self):
        output, local_vars, success = execute_code(self.code)
        if success:
            print("Successfully ran code. Results:")
            print(output)
            print("Local variables:")
            print(local_vars)
        else:
            print("Failed to run code.")
        return ResultTool(output=output, local_vars=local_vars, success=success)


def main(model: str = ""):
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
    )
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="Coder",
            llm=llm_config,
            # handle LLM non-tool msg
            handle_llm_no_tool=lambda msg: ResultTool(
                output=msg.content,
                success=True,
            ),
            system_message=f"""
            You are an expert python coder. When you get a user's message, 
            respond as follows:
            - if you think you need to run Python code,
                use the TOOL `{PyCodeTool.name()}` to perform the task.
            - otherwise simply respond to the user's message.
            """,
        )
    )
    agent.enable_message(PyCodeTool)
    # task specialized to return ResultTool
    # set restart to False to maintain conv history across `run` calls
    task = lr.Task(agent, interactive=False, restart=False)[ResultTool]

    while True:
        user_input = Prompt.ask("User")
        if user_input.lower() in ["x", "q"]:
            break
        result: ResultTool | None = task.run(user_input)
        if result is not None:
            # code was run; do something with the output if any
            if result.success:
                print("Output:", result.output)
            else:
                print("Code execution failed.")


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/basic/schedule-extract.py">
"""
Extract schedule/availability information from unstructured text.

Enter vague, unstructured info like:

M-F 8-3pm at home or Tue/Wed 9-1030am at daycare

Run like this -- (omit the -m arg for default gpt-4o-mini LLM)

```bash
uv run examples/basic/schedule-extract.py -m gpt-4o
"""

from typing import Dict, List, Literal, Tuple

from fire import Fire
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import FinalResultTool
from langroid.pydantic_v1 import BaseModel, Field


class Slot(BaseModel):
    start_time: str = Field(..., description="start time of the slot, e.g. 11:30AM")
    end_time: str = Field(..., description="end time of the slot, e.g. 12:30PM")
    location: str = Field(..., description="location of the slot or UNKNOWN")


class DaySchedule(BaseModel):
    """
    A class to represent a day's schedule.
    """

    slots: List[Slot] = Field(..., description="List of time slots for the day")


Weekday = Literal["Mon", "Tue", "Wed", "Thu", "Fri"]


class Availability(BaseModel):
    """
    A class to represent schedule information.
    """

    week_availability: Dict[Weekday, DaySchedule] = Field(
        ...,
        description="""
        Dictionary mapping weekday to DaySchedule,
        where weekday is one of "Mon", "Tue", "Wed", "Thu", "Fri"
        """,
    )


class AvailabilityTool(lr.ToolMessage):
    request: str = "availability_tool"
    purpose: str = """
        To present the available slots from a piece of text.
    """
    availabilities: Availability

    @classmethod
    def examples(cls) -> List["lr.ToolMessage" | Tuple[str, "lr.ToolMessage"]]:
        """
        Example of how to use the tool.
        """
        return [
            (
                """
                I figured out that the availability is 10am-4pm on Mon and Wed at 
                home, and 3-4pm on Monday at daycare
                """,
                cls(
                    availabilities=Availability(
                        week_availability={
                            "Mon": DaySchedule(
                                slots=[
                                    Slot(
                                        start_time="10:00",
                                        end_time="16:00",
                                        location="home",
                                    ),
                                    Slot(
                                        start_time="15:00",
                                        end_time="16:00",
                                        location="daycare",
                                    ),
                                ]
                            ),
                            "Wed": DaySchedule(
                                slots=[
                                    Slot(
                                        start_time="10:00",
                                        end_time="16:00",
                                        location="home",
                                    )
                                ]
                            ),
                        }
                    )
                ),
            )
        ]

    def handle(self) -> str:
        """
        This method is called when the tool is invoked.
        It processes the input and returns the availability information.
        """
        # Here, we would implement the logic to extract availability information
        # from the input text. For this example, we'll just return a placeholder.
        print("Successfully extracted availability information.")
        print(self.availabilities.json(indent=2))
        return FinalResultTool(avails=self.availabilities)


def make_schedule_task(model: str = ""):
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o_MINI,
    )
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=llm_config,
            system_message=f"""
            You are an expert at figuring out schedules from unstructured text.
            You will be given a string that represents availability information.
            Your task is to figure out the available slots and present this info
            using the TOOL `{AvailabilityTool.name()}`, with the `week_availability` 
            field set to a dictionary showing the available slots for certain days
            of the week if any. The string you will get may contain MULTIPLE 
            availabilities for the same day, but at different locations. 
            You have to present the availability information in the `availabilities`
            field, as an Availability object, which is a dictionary mapping
            the day of the week to a DaySchedule object, which is a list of
            Slot objects. The Slot object contains the start time of the slot,
            the duration of the slot in minutes, and the location of the slot.
            """,
        )
    )
    agent.enable_message(AvailabilityTool)
    task = lr.Task(agent, interactive=False, restart=True)[Availability]
    return task


def main(model: str = ""):
    task = make_schedule_task(model)
    while True:
        sched = Prompt.ask("Enter your schedule text")
        avails = task.run(sched, allow_restart=True)
        print(avails)


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/basic/text-to-structured.py">
"""
Function-calling example using a local LLM, with ollama.

"Function-calling" refers to the ability of the LLM to generate
a structured response, typically a JSON object, instead of a plain text response,
which is then interpreted by your code to perform some action.
This is also referred to in various scenarios as "Tools", "Actions" or "Plugins".
See more here: https://langroid.github.io/langroid/quick-start/chat-agent-tool/

Run like this (to run with llama-3.1-8b-instant via groq):

python3 examples/basic/text-to-structured.py -m groq/llama-3.1-8b-instant

Other models to try it with:
- ollama/qwen2.5-coder
- ollama/qwen2.5


See here for how to set up a Local LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/


"""

import json
import os
from typing import List, Literal

import fire
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import ResultTool
from langroid.pydantic_v1 import BaseModel, Field
from langroid.utils.configuration import settings

# for best results:
DEFAULT_LLM = lm.OpenAIChatModel.GPT4o

os.environ["TOKENIZERS_PARALLELISM"] = "false"

# (1) Define the desired structure via Pydantic.
# The "Field" annotations are optional, and are included in the system message
# if provided, and help with generation accuracy.


class Wifi(BaseModel):
    name: str


class HomeSettings(BaseModel):
    App: List[str] = Field(..., description="List of apps found in text")
    wifi: List[Wifi] = Field(..., description="List of wifi networks found in text")
    brightness: Literal["low", "medium", "high"] = Field(
        ..., description="Brightness level found in text"
    )


# (2) Define the Tool class for the LLM to use, to produce the above structure.
class HomeAutomationTool(lr.agent.ToolMessage):
    """Tool to extract Home Automation structure from text"""

    request: str = "home_automation_tool"
    purpose: str = """
    To extract <home_settings> structure from a given text.
    """
    home_settings: HomeSettings = Field(
        ..., description="Home Automation settings from given text"
    )

    def handle(self) -> str:
        """Handle LLM's structured output if it matches HomeAutomationTool structure"""
        print(
            f"""
            SUCCESS! Got Valid Home Automation Settings:
            {json.dumps(self.home_settings.dict(), indent=2)}
            """
        )
        return ResultTool(settings=self.home_settings)

    @classmethod
    def examples(cls) -> List["ToolMessage"]:
        # Used to provide few-shot examples in the system prompt
        return [
            (
                """
                    I have extracted apps Spotify and Netflix, 
                    wifi HomeWifi, and brightness medium
                    """,
                cls(
                    home_settings=HomeSettings(
                        App=["Spotify", "Netflix"],
                        wifi=[Wifi(name="HomeWifi")],
                        brightness="medium",
                    )
                ),
            )
        ]


def app(
    m: str = DEFAULT_LLM,  # model
    d: bool = False,  # pass -d to enable debug mode (see prompts etc)
    nc: bool = False,  # pass -nc to disable cache-retrieval (i.e. get fresh answers)
):
    settings.debug = d
    settings.cache = not nc
    # create LLM config
    llm_cfg = lm.OpenAIGPTConfig(
        chat_model=m or DEFAULT_LLM,
        chat_context_length=4096,  # set this based on model
        max_output_tokens=100,
        temperature=0.2,
        stream=True,
        timeout=45,
    )

    tool_name = HomeAutomationTool.default_value("request")
    config = lr.ChatAgentConfig(
        llm=llm_cfg,
        system_message=f"""
        You are an expert in extracting home automation settings from text.
        When user gives a piece of text, use the TOOL `{tool_name}`
        to present the extracted structured information.
        """,
    )

    agent = lr.ChatAgent(config)

    # (4) Enable the Tool for this agent --> this auto-inserts JSON instructions
    # and few-shot examples (specified in the tool defn above) into the system message
    agent.enable_message(HomeAutomationTool)

    # (5) Create task and run it to start an interactive loop
    # Specialize the task to return a ResultTool object
    task = lr.Task(agent, interactive=False)[ResultTool]

    # set up a loop to extract Home Automation settings from text
    while True:
        text = Prompt.ask("[blue]Enter text (or q/x to exit)")
        if not text or text.lower() in ["x", "q"]:
            break
        result = task.run(text)
        assert isinstance(result, ResultTool)
        assert isinstance(result.settings, HomeSettings)


if __name__ == "__main__":
    fire.Fire(app)
</file>

<file path="examples/basic/tool-extract-short-example.py">
"""
Short example of using Langroid ToolMessage to extract structured info from a passage,
and perform computation on it.

Run like this (omit --model to default to GPT4o):

python3 examples/basic/tool-extract-short-example.py --model deepseek/deepseek-reasoner

or

uv run examples/basic/tool-extract-short-example.py --model deepseek/deepseek-reasoner

"""

from fire import Fire
from rich import print
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import ResultTool
from langroid.pydantic_v1 import BaseModel, Field


# desired output structure
class CompanyInfo(BaseModel):
    name: str = Field(..., description="name of company")
    shares: int = Field(..., description="shares outstanding of company")
    price: float = Field(..., description="price per share of company")


# tool definition based on this
class CompanyInfoTool(lr.agent.ToolMessage):
    request: str = "company_info_tool"  # agent method that handles this tool
    purpose: str = (
        "To extract <company_info> from a passage and compute market-capitalization."
    )
    company_info: CompanyInfo

    @classmethod
    def examples(cls):
        """Examples that will be compiled to few-shot examples for the LLM.
        Illustrating two types of examples below:
        - example instance
        - (thought, example) tuple
        """
        return [
            # Example 1: just the instance
            cls(company_info=CompanyInfo(name="IBM", shares=1.24e9, price=140.15)),
            # Example 2: (thought, instance) tuple
            (
                "I want to extract and present company info from the passage",
                cls(
                    company_info=CompanyInfo(name="Apple", shares=16.82e9, price=149.15)
                ),
            ),
        ]

    def handle(self) -> ResultTool:
        """Handle LLM's structured output if it matches CompanyInfo structure.
        This suffices for a "stateless" tool.
        If the tool handling requires agent state, then
        instead of this `handle` method, define a `company_info_tool`
        method in the agent.
        Since this method is returning a  ResultTool,
        the task of this agent will be terminated,
        with this tool T appearing in the result ChatDocument's `tool_messages` list.
        """
        mkt_cap = self.company_info.shares * self.company_info.price
        return ResultTool(
            market_cap=mkt_cap,
            info=self.company_info,
            comment="success",  # arbitrary undeclared fields allowed
        )


# define agent, attach the tool


def main(model: str = ""):
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
    )
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=llm_config,
            system_message=f"""
            Use the TOOL `{CompanyInfoTool.name()}` 
            tool to extract company information from a passage
            and compute market-capitalization.
            """,
        )
    )

    agent.enable_message(CompanyInfoTool)

    # define and run task on a passage about some company

    task = lr.Task(agent, interactive=False)

    print(
        """
        [blue]Welcome to the company info extractor!
        Write a sentence containing company name, shares outstanding and share price,
        and the Agent will use a tool/function extract the info in structured form,
        and the tool-handler will compute the market-cap.[/blue]
        """
    )

    while True:
        statement = Prompt.ask(
            """
            Enter a sentence containing company name, 
            shares outstanding and share price, or 
            hit enter to use default sentence.
            """,
            default="""
            Qualcomm has shares outstanding of 1.12 billion and a 
            price per share of $217.09.
            """,
        )
        result = task.run(statement)
        if result is None:
            print("Tool-call failed, try again.")
            continue
        # note the result.tool_messages will be a list containing
        # an obj of type FinalResultTool, so we can extract fields from it.
        company_result = result.tool_messages[0]
        assert isinstance(company_result, ResultTool)
        assert isinstance(company_result.info, CompanyInfo)

        info = company_result.info
        mktcap = company_result.market_cap
        assert company_result.comment == "success"
        print(
            f"""
            Found company info: {info} and market cap: {mktcap}
            """
        )


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/basic/xml_tool.py">
"""
Example of defining a variant of an existing tool, but inheriting from XMLToolMessage,
to have the LLM use XML rather than JSON to generate the tool.

This will not work with built-in functions/tools of OpenAI,
so in the `ChatAgentConfig` , you have to set the following to ensure
that Langroid's built-in XML Tool calls are activated:
- `use_functions_api = False`
- `use_tools = True`

Run like this (--model is optional, defaults to GPT4o):

python3 examples/basic/xml_tool.py --model groq/llama-3.1-8b-instant
"""

import fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import SendTool
from langroid.agent.xml_tool_message import XMLToolMessage
from langroid.pydantic_v1 import Field


class XMLSendTool(SendTool, XMLToolMessage):
    """
    Variant of SendTool, using XML rather than JSON.
    """

    request: str = "xml_send_tool"
    purpose: str = """
        To send <content> to an entity/agent identified in the <to> field.
        """

    content: str = Field(
        ...,
        description="The content to send",
        verbatim=True,  # enforces content enclosed within CDATA block in xml.
    )
    to: str


xml_send_tool_name = XMLSendTool.default_value("request")


def main(model: str = ""):
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
    )
    alice = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="Alice",
            llm=llm_config,
            use_functions_api=False,
            use_tools=True,
            system_message=f"""
            Whatever number you receive, send it to Bob using the  
            `{xml_send_tool_name}` tool.
            """,
        )
    )

    bob = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="Bob",
            llm=llm_config,
            use_functions_api=False,
            use_tools=True,
            system_message=f"""
            Whatever number you receive, add 1 to it and send 
            the result back to Alice
            using the `{xml_send_tool_name}` tool.
            """,
        )
    )

    alice.enable_message(XMLSendTool)
    bob.enable_message(XMLSendTool)

    # specialize alice_task to return an int
    alice_task = lr.Task(alice, interactive=False)[int]
    bob_task = lr.Task(bob, interactive=False)

    alice_task.add_sub_task(bob_task)

    result = alice_task.run("5", turns=6)
    assert result == 7


if __name__ == "__main__":
    fire.Fire(main)
</file>

<file path="examples/chainlit/non-callback/chat-no-callback.py">
"""
Basic single-agent chat example, without streaming.

DEPCRECATED: Script kept only for reference.
The better way is shown in chat-agent.py or chat-task.py, which uses callbacks.

After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/chat-no-callback.py
"""

import chainlit as cl

import langroid as lr


@cl.on_chat_start
async def on_chat_start():
    sys_msg = "You are a helpful assistant. Be concise in your answers."
    config = lr.ChatAgentConfig(
        system_message=sys_msg,
    )
    agent = lr.ChatAgent(config)
    cl.user_session.set("agent", agent)


@cl.on_message
async def on_message(message: cl.Message):
    agent: lr.ChatAgent = cl.user_session.get("agent")
    response = await agent.llm_response_async(message.content)
    msg = cl.Message(content=response.content)
    await msg.send()
</file>

<file path="examples/chainlit/non-callback/chat-search-no-callback.py">
"""
Basic single-agent chat example, using a web Search Tool, without streaming.

DEPCRECATED: Script kept only for reference. The better way is shown in
chat-search.py, which uses ChainlitTaskCallbacks.

- User asks a question
- LLM either responds directly or generates a Metaphor web search Tool/function-call
    - if Tool used:
         - Agent handler recognizes this tool and returns search results
         - LLM sees search results and composes a response.
- user asks another question


After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/chat-search-no-callback.py
"""

import chainlit as cl

import langroid as lr
from langroid.agent.tools.metaphor_search_tool import MetaphorSearchTool


@cl.step(name="LLM Response")
async def llm_response(msg: str) -> lr.ChatDocument:
    agent: lr.ChatAgent = cl.user_session.get("agent")
    response = await agent.llm_response_async(msg)
    return response


@cl.step(name="Agent Tool Handler")
async def agent_response(msg: lr.ChatDocument) -> lr.ChatDocument:
    agent: lr.ChatAgent = cl.user_session.get("agent")
    response = await agent.agent_response_async(msg)
    return response


@cl.on_chat_start
async def on_chat_start():
    tool_name = MetaphorSearchTool.default_value("request")
    sys_msg = f"""
        You are an astute, self-aware AI assistant, and you are adept at 
        responding to a user's question in one of two ways:
        - If you KNOW the answer from your own knowledge, respond directly.
        - OTHERWISE, request up to 5 results from a web search using 
          the `{tool_name}` tool/function-call.
          In this case you will receive the web search results, and you can 
          then compose a response to the user's question. 
    """
    config = lr.ChatAgentConfig(
        system_message=sys_msg,
    )
    agent = lr.ChatAgent(config)
    agent.enable_message(MetaphorSearchTool)
    cl.user_session.set("agent", agent)


@cl.on_message
async def on_message(message: cl.Message):
    agent: lr.ChatAgent = cl.user_session.get("agent")
    msg = cl.Message(content="")
    # expecting a tool here
    response = await llm_response(message.content)
    if agent.has_tool_message_attempt(response):
        search_results = await agent_response(response)
        response = await llm_response(search_results)
    msg.content = response.content
    await msg.send()
</file>

<file path="examples/chainlit/non-callback/chat-stream.py">
"""
DEPRECATED, not guaranteed to work: We are keeping this example for reference,
but do not use this as way to chat with streaming.
See chat-callback.py for the best way to do this
(i.e. use ChainlitAgentCallbacks when interacting directly an Agent,
or use ChainlitTaskCallbacks when interacting with a Task).

Basic single-agent chat example, with streaming,
using an older method, rather than the best way,
which is via callbacks, as in chat-callback.py.


After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/chat-stream.py
"""

import asyncio
import re
import sys

import chainlit as cl

from langroid import ChatAgent, ChatAgentConfig
from langroid.utils.configuration import settings

settings.stream = True  # works if False as well


class ContinuousCaptureStream:
    """
    Capture stdout in a stream.
    This allows capturing of streaming output that would normally be printed to stdout,
    e.g. streaming tokens coming from OpenAI's API.
    """

    def __init__(self):
        self.content = ""
        self.new_content_event = asyncio.Event()
        self.is_finished = False  # Flag to indicate completion

    def write(self, data):
        self.content += data
        self.new_content_event.set()

    def flush(self):
        pass

    async def get_new_content(self):
        await self.new_content_event.wait()
        self.new_content_event.clear()
        new_content, self.content = self.content, ""
        return new_content

    def set_finished(self):
        self.is_finished = True
        self.new_content_event.set()  # T


def strip_ansi_codes(text):
    ansi_escape = re.compile(
        r"(?:\x1B[@-_]|[\x80-\x9A\x9C-\x9F]|[\x1A-\x1C\x1E-\x1F])+\[[0-?]*[ -/]*[@-~]"
    )
    return ansi_escape.sub("", text)


@cl.on_chat_start
async def on_chat_start():
    sys_msg = "You are a helpful assistant. Be concise in your answers."
    config = ChatAgentConfig(
        system_message=sys_msg,
        show_stats=False,
    )
    agent = ChatAgent(config)
    cl.user_session.set("agent", agent)


@cl.on_message
async def on_message(message: cl.Message):
    agent: ChatAgent = cl.user_session.get("agent")
    msg = cl.Message(content="")
    await msg.send()

    capture_stream = ContinuousCaptureStream()
    original_stdout = sys.stdout
    sys.stdout = capture_stream

    # Run response() in a separate thread or as a non-blocking call
    asyncio.create_task(run_response(agent, message, capture_stream))

    while not capture_stream.is_finished:
        new_output = await capture_stream.get_new_content()
        new_output = strip_ansi_codes(new_output)
        if new_output:
            await msg.stream_token(new_output)

    # Restore original stdout when done
    sys.stdout = original_stdout

    await msg.update()


async def run_response(agent: ChatAgent, message: cl.Message, stream):
    await agent.llm_response_async(message.content)
    stream.set_finished()
</file>

<file path="examples/chainlit/non-callback/chat-tool-no-callback.py">
"""
Basic single-agent chat example, using a Tool, without streaming.
DEPCRECATED: Script kept only for reference.
The better way is shown in chat-task-tool, which uses ChainlitTaskCallbacks.

- User enters a country
- LLM responds with a tool/function-call showing {country=country, capital=...}
- Agent handler recognizes this tool and returns plain text version of the tool result.

After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/chat-tool-no-callback.py
"""

import chainlit as cl

import langroid as lr


class CapitalTool(lr.ToolMessage):
    request = "capital"
    purpose = "To present the capital of given <country>."
    country: str
    capital: str

    def handle(self) -> str:
        return f"""
        Success! LLM responded with a tool/function-call, with result:
        Capital of {self.country} is {self.capital}.
        """


@cl.step
async def llm_tool_call(msg: str) -> lr.ChatDocument:
    agent: lr.ChatAgent = cl.user_session.get("agent")
    response = await agent.llm_response_async(msg)
    return response


@cl.on_chat_start
async def on_chat_start():
    sys_msg = """
        You are an expert in country capitals.
        When user gives a country name, you should respond 
        with the capital of that country, using the `capital` tool/function-call.
    """
    config = lr.ChatAgentConfig(
        system_message=sys_msg,
    )
    agent = lr.ChatAgent(config)
    agent.enable_message(CapitalTool)
    cl.user_session.set("agent", agent)


@cl.on_message
async def on_message(message: cl.Message):
    agent: lr.ChatAgent = cl.user_session.get("agent")
    msg = cl.Message(content="")
    # expecting a tool here
    tool = await llm_tool_call(message.content)
    tool_result = await agent.agent_response_async(tool)
    msg.content = tool_result.content
    await msg.send()
</file>

<file path="examples/chainlit/chat-search-assistant-local.py">
"""
Chainlit version of examples/basic/chat-search-assistant-local.py,
with a minor change to enable Chainlit callbacks.
Tested and works ok nous-hermes2-mixtral, but may still have issues.
See that script for details.

You can specify a local model in a few different ways, e.g. `groq/llama3-70b-8192`
or `ollama/mistral` etc. See here how to use Langroid with local LLMs:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

Since chainlit does not take cmd line args in the normal way, you have to specify
the model via an environment variable, e.g. `MODEL=ollama/mistral` before the
script is run, e.g.

MODEL=ollama/mistral chainlit run  examples/chainlit/chat-search-assistant-local.py

Note - this is just an example of using an open/local LLM;
 it does not mean that this will work with ANY local LLM.

You may get good results using `groq/llama3-70b-8192` (see the above-linked guide
to using open/local LLMs with Langroid for more details).

"""

import os
from textwrap import dedent
from typing import List, Optional, Type

import chainlit as cl
from dotenv import load_dotenv

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.callbacks.chainlit import add_instructions
from langroid.agent.tools.metaphor_search_tool import MetaphorSearchTool
from langroid.utils.configuration import Settings, set_global


class QuestionTool(lr.ToolMessage):
    request: str = "question_tool"
    purpose: str = "Ask a SINGLE <question> that can be answered from a web search."
    question: str

    @classmethod
    def examples(cls) -> List[lr.ToolMessage]:
        return [
            cls(question="Which superconductor material was discovered in 2023?"),
            cls(question="What AI innovation did Meta achieve in 2024?"),
        ]


class FinalAnswerTool(lr.ToolMessage):
    request: str = "final_answer_tool"
    purpose: str = """
        Present the intermediate <steps> and 
        final <answer> to the user's original query.
        """
    steps: str
    answer: str

    @classmethod
    def examples(cls) -> List["lr.ToolMessage"]:
        return [
            cls(
                steps="1. Man is mortal. 2. Plato was a man.",
                answer="Plato was mortal.",
            ),
            cls(
                steps="1. The moon landing was in 1969. 2. Kennedy was president "
                "during 1969.",
                answer="Kennedy was president during the moon landing.",
            ),
        ]


class FeedbackTool(lr.ToolMessage):
    request: str = "feedback_tool"
    purpose: str = "Provide <feedback> on the user's answer."
    feedback: str

    @classmethod
    def examples(cls) -> List["lr.ToolMessage"]:
        return [
            cls(feedback=""),
            cls(
                feedback="""
                The answer is invalid because the conclusion does not follow from the
                steps. Please check your reasoning and try again.
                """
            ),
        ]


class AssistantAgent(lr.ChatAgent):
    n_questions: int = 0  # how many questions in THIS round
    has_asked: bool = False  # has ANY question been asked
    original_query: str | None = None

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        if isinstance(msg, ChatDocument) and msg.metadata.sender == lr.Entity.USER:
            # either first query from user, or returned result from Searcher
            self.n_questions = 0  # reset search count

        if isinstance(msg, ChatDocument) and msg.metadata.sender == lr.Entity.LLM:
            if self.has_asked:
                return f"""
                You may have intended to use a tool, but your JSON format may be wrong.
                
                REMINDER: You must do one of the following:
                - If you are ready with the final answer to the user's ORIGINAL QUERY
                    [ Remember it was: {self.original_query} ],
                  then present your reasoning steps and final answer using the 
                  `final_answer_tool` in the specified JSON format.
                - If you still need to ask a question, then use the `question_tool`
                  to ask a SINGLE question that can be answered from a web search.
                """
            elif self.original_query is not None:
                return f"""
                You must ask a question using the `question_tool` in the specified format,
                to break down the user's original query: {self.original_query} into 
                smaller questions that can be answered from a web search.
                """

    def question_tool(self, msg: QuestionTool) -> str:
        self.n_questions += 1
        self.has_asked = True
        if self.n_questions > 1:
            # there was already a search, so ignore this one
            return ""
        # valid question tool: re-create it so Searcher gets it
        return msg.to_json()

    def final_answer_tool(self, msg: FinalAnswerTool) -> str:
        if not self.has_asked or self.n_questions > 1:
            # not yet asked any questions, or LLM is currently asking
            # a question (and this is the second one in this turn, and so should
            # be ignored), ==>
            # cannot present final answer yet (LLM may have hallucinated this json)
            return ""
        # valid final answer tool: PASS it on so Critic gets it
        return lr.utils.constants.PASS_TO + "Critic"

    def feedback_tool(self, msg: FeedbackTool) -> str:
        if msg.feedback == "":
            return lr.utils.constants.DONE
        else:
            return f"""
            Below is feedback about your answer. Take it into account to 
            improve your answer, and present it again using the `final_answer_tool`.
            
            FEEDBACK:
            
            {msg.feedback}
            """

    async def llm_response_async(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        if self.original_query is None:
            self.original_query = (
                message if isinstance(message, str) else message.content
            )
        result = await super().llm_response_async(message)
        if result is None:
            return result
        # result.content may contain a premature DONE
        # (because weak LLMs tend to repeat their instructions)
        # We deem a DONE to be accidental if no search query results were received
        if not isinstance(message, ChatDocument) or not (
            message.metadata.sender_name == "Searcher"
        ):
            # no search results received yet, so should NOT say DONE
            if isinstance(result, str):
                return result.content.replace(lr.utils.constants.DONE, "")
            result.content = result.content.replace(lr.utils.constants.DONE, "")
            return result

        return result


class CriticAgent(lr.ChatAgent):
    def final_answer_tool(self, msg: FinalAnswerTool) -> str:
        # received from Assistant. Extract the components as plain text,
        # so that the Critic LLM can provide feedback
        return f"""
        The user has presented the following intermediate steps and final answer
        shown below. Please provide feedback using the `feedback_tool`.
        Remember to set the `feedback` field to an empty string if the answer is valid,
        otherwise give specific feedback on what the issues are and how the answer 
        can be improved.
        
        STEPS: {msg.steps}
        
        ANSWER: {msg.answer}
        """

    def feedback_tool(self, msg: FeedbackTool) -> str:
        # say DONE and PASS to the feedback goes back to Assistant to handle
        return lr.utils.constants.DONE + " " + lr.utils.constants.PASS


class SearcherAgentConfig(lr.ChatAgentConfig):
    search_tool_class: Type[lr.ToolMessage]


class SearcherAgent(lr.ChatAgent):
    n_searches: int = 0
    curr_query: str | None = None

    def __init__(self, config: SearcherAgentConfig):
        super().__init__(config)
        self.config: SearcherAgentConfig = config
        self.enable_message(config.search_tool_class)
        self.enable_message(QuestionTool, use=False, handle=True)

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        if (
            isinstance(msg, ChatDocument)
            and msg.metadata.sender == lr.Entity.LLM
            and self.n_searches == 0
        ):
            search_tool_name = self.config.search_tool_class.default_value("request")
            return f"""
            You forgot to use the web search tool to answer the 
            user's question : {self.curr_query}.
            REMEMBER - you must ONLY answer the user's questions based on 
             results from a web-search, and you MUST NOT ANSWER them yourself.
             
            Please use the `{search_tool_name}` tool 
            using the specified JSON format, then compose your answer.
            """

    def question_tool(self, msg: QuestionTool) -> str:
        self.curr_query = msg.question
        search_tool_name = self.config.search_tool_class.default_value("request")
        return f"""
        User asked this question: {msg.question}.
        Perform a web search using the `{search_tool_name}` tool
        using the specified JSON format, to find the answer.
        """

    async def llm_response_async(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        if (
            isinstance(message, ChatDocument)
            and message.metadata.sender == lr.Entity.AGENT
            and self.n_searches > 0
        ):
            # must be search results from the web search tool,
            # so let the LLM compose a response based on the search results
            self.n_searches = 0  # reset search count

            result = await super().llm_response_forget_async(message)
            # Augment the LLM's composed answer with a helpful nudge
            # back to the Assistant
            result.content = f"""
            Here are the web-search results for the question: {self.curr_query}.
            ===
            {result.content}
            ===
            Decide if you want to ask any further questions, for the 
            user's original question.             
            """
            self.curr_query = None
            return result

        # Handling query from user (or other agent)
        result = await super().llm_response_forget_async(message)
        if result is None:
            return result
        tools = self.get_tool_messages(result)
        if all(not isinstance(t, self.config.search_tool_class) for t in tools):
            # LLM did not use search tool;
            # Replace its response with a placeholder message
            # and the agent fallback_handler will remind the LLM
            result.content = "Did not use web-search tool."
            return result

        self.n_searches += 1
        # result includes a search tool, but may contain DONE in content,
        # so remove that
        result.content = result.content.replace(lr.utils.constants.DONE, "")
        return result


@cl.on_chat_start
async def main(
    debug: bool = True,
    model: str = os.getenv("MODEL", "gpt-4o"),
    nocache: bool = True,
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )
    await add_instructions(
        title="2-Agent Search Assistant",
        content=dedent(
            """
        Enter a complex question; 
        - The Assistant will break it down into smaller questions for the Searcher
        - The Searcher will search the web and compose a concise answer
        Once the Assistant has enough information, it will say DONE and present the answer.
        
        To answer a new question, click "New Chat".        
        """
        ),
    )

    load_dotenv()

    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,
        temperature=0.2,
        max_output_tokens=500,
        timeout=45,
    )

    assistant_config = lr.ChatAgentConfig(
        system_message="""
        You are a resourceful assistant, able to think step by step to answer
        complex questions from the user. You must break down complex questions into
        simpler questions that can be answered by a web search. You must ask me 
        (the user) each question ONE BY ONE, using the `question_tool` in
         the specified format, and I will do a web search and send you
        a brief answer. Once you have enough information to answer my original
        (complex) question, you MUST present your INTERMEDIATE STEPS and FINAL ANSWER
        using the `final_answer_tool` in the specified JSON format.
        You will then receive FEEDBACK from the Critic, and if needed
        you should try to improve your answer based on this feedback.
        """,
        llm=llm_config,
        vecdb=None,
    )
    assistant_agent = AssistantAgent(assistant_config)
    assistant_agent.enable_message(QuestionTool)
    assistant_agent.enable_message(FinalAnswerTool)
    assistant_agent.enable_message(FeedbackTool, use=False, handle=True)

    search_tool_handler_method = MetaphorSearchTool.name()

    search_agent_config = SearcherAgentConfig(
        search_tool_class=MetaphorSearchTool,
        llm=llm_config,
        vecdb=None,
        system_message=f"""
        You are a web-searcher. For ANY question you get, you must use the
        `{search_tool_handler_method}` tool/function-call to get up to 5 results.
        Once you receive the results, you must compose a CONCISE answer 
        based on the search results and say DONE and show the answer to me,
        along with references, in this format:
        DONE [... your CONCISE answer here ...]
        SOURCES: [links from the web-search that you used]
        
        EXTREMELY IMPORTANT: DO NOT MAKE UP ANSWERS, ONLY use the web-search results.
        """,
    )
    search_agent = SearcherAgent(search_agent_config)

    assistant_task = lr.Task(
        assistant_agent,
        name="Assistant",
        llm_delegate=True,
        single_round=False,
        interactive=False,
    )
    search_task = lr.Task(
        search_agent,
        name="Searcher",
        llm_delegate=True,
        single_round=False,
        interactive=False,
    )

    critic_agent_config = lr.ChatAgentConfig(
        llm=llm_config,
        vecdb=None,
        system_message="""
        You excel at logical reasoning and combining pieces of information.
        The user will send you a summary of the intermediate steps and final answer.
        You must examine these and provide feedback to the user, using the 
        `feedback_tool`, as follows:
        - If you think the answer is valid, 
            simply set the `feedback` field to an empty string "".
        - Otherwise set the `feedback` field to a reason why the answer is invalid,
            and suggest how the user can improve the answer.
        """,
    )
    critic_agent = CriticAgent(critic_agent_config)
    critic_agent.enable_message(FeedbackTool)
    critic_agent.enable_message(FinalAnswerTool, use=False, handle=True)
    critic_task = lr.Task(
        critic_agent,
        name="Critic",
        interactive=False,
    )
    assistant_task.add_sub_task([search_task, critic_task])
    cl.user_session.set("assistant_task", assistant_task)


@cl.on_message
async def on_message(message: cl.Message):
    assistant_task = cl.user_session.get("assistant_task")
    lr.ChainlitTaskCallbacks(assistant_task)
    await assistant_task.run_async(message.content)
</file>

<file path="examples/chainlit/chat-search-assistant.py">
"""
Chainlit version of examples/basic/chat-search-assistant.py,
with only a small change to add the Chainlit callbacks.

See that script for details.

Run like this:

chainlit run examples/chainlit/chat-search-assistant.py

To run with a different LLM, set the MODEL environment variable:

MODEL=ollama/mistral chainlit run examples/chainlit/chat-search-assistant.py

or

MODEL=groq/llama3-70b-8192 chainlit run examples/chainlit/chat-search-assistant.py
"""

import os
from textwrap import dedent

import chainlit as cl
from dotenv import load_dotenv

import langroid as lr
import langroid.language_models as lm
from langroid.agent.callbacks.chainlit import add_instructions
from langroid.agent.tools.duckduckgo_search_tool import DuckduckgoSearchTool
from langroid.agent.tools.google_search_tool import GoogleSearchTool
from langroid.agent.tools.orchestration import SendTool
from langroid.utils.configuration import Settings, set_global


@cl.on_chat_start
async def main(
    debug: bool = False,
    # e.g. ollama/mistral or local/localhost:5000/v1 default is GPT4o
    model: str = os.getenv("MODEL", ""),
    provider: str = "metaphor",  # or "google", "ddg"
    nocache: bool = False,
):
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )
    load_dotenv()

    await add_instructions(
        title="2-Agent Search Assistant",
        content=dedent(
            """
        Enter a complex question; 
        - The Assistant will break it down into smaller questions for the Searcher
        - The Searcher will search the web and compose a concise answer
        
        Once the Assistant has enough information, it will say DONE and present the answer.        
        """
        ),
    )

    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=8_000,
        temperature=0,
        max_output_tokens=200,
        timeout=45,
    )

    assistant_config = lr.ChatAgentConfig(
        system_message=f"""
        You are a resourceful assistant, able to think step by step to answer
        complex questions from the user. You must break down complex questions into
        simpler questions that can be answered by a web search agent. You must ask 
        each question ONE BY ONE, and the agent will do a web search and send you
        a brief answer. 
        Once you have enough information to answer my original
        (complex) question, you MUST use the TOOL `{SendTool.name()}`
        with `to` set to "User" to send me the answer. 
        """,
        llm=llm_config,
        vecdb=None,
    )
    assistant_agent = lr.ChatAgent(assistant_config)
    assistant_agent.enable_message(SendTool)

    match provider:
        case "google":
            search_tool_class = GoogleSearchTool
        case "metaphor":
            from langroid.agent.tools.metaphor_search_tool import MetaphorSearchTool

            search_tool_class = MetaphorSearchTool
        case "ddg":
            search_tool_class = DuckduckgoSearchTool
        case _:
            raise ValueError(f"Unsupported provider {provider} specified.")

    search_tool_handler_method = search_tool_class.default_value("request")

    search_agent_config = lr.ChatAgentConfig(
        llm=llm_config,
        vecdb=None,
        system_message=f"""
        You are a web-searcher. For any question you get, you must use the
        `{search_tool_handler_method}` tool/function-call to get up to 5 results.
        I WILL SEND YOU THE RESULTS; DO NOT MAKE UP THE RESULTS!!
        Once you receive the results, you must compose a CONCISE answer 
        based on the search results and say DONE and show the answer to me,
        in this format:
        DONE [... your CONCISE answer here ...]
        IMPORTANT: YOU MUST WAIT FOR ME TO SEND YOU THE 
        SEARCH RESULTS BEFORE saying you're DONE.
        """,
    )
    search_agent = lr.ChatAgent(search_agent_config)
    search_agent.enable_message(search_tool_class)

    assistant_task = lr.Task(
        assistant_agent,
        name="Assistant",
        llm_delegate=True,
        single_round=False,
        interactive=False,
    )
    search_task = lr.Task(
        search_agent,
        name="Searcher",
        llm_delegate=True,
        single_round=False,
        interactive=False,
    )
    assistant_task.add_sub_task(search_task)
    cl.user_session.set("assistant_task", assistant_task)


@cl.on_message
async def on_message(message: cl.Message):
    assistant_task = cl.user_session.get("assistant_task")
    lr.ChainlitTaskCallbacks(assistant_task)
    await assistant_task.run_async(message.content)
</file>

<file path="examples/chainlit/chat-search.py">
"""
Basic single-agent chat example, using a web Search Tool, using ChainlitTaskCallbacks.

- User asks a question
- LLM either responds directly or generates a Metaphor web search Tool/function-call
    - if Tool used:
         - Agent handler recognizes this tool and returns search results
         - LLM sees search results and composes a response.
- user asks another question


After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/chat-search.py
"""

import logging
from textwrap import dedent
from typing import Optional

import chainlit as cl

import langroid as lr
from langroid import ChatDocument
from langroid.agent.callbacks.chainlit import (
    add_instructions,
    make_llm_settings_widgets,
    setup_llm,
    update_llm,
)
from langroid.agent.tools.duckduckgo_search_tool import DuckduckgoSearchTool
from langroid.agent.tools.metaphor_search_tool import MetaphorSearchTool

logger = logging.getLogger(__name__)


def search_system_message(search_tool: lr.ToolMessage) -> str:
    tool_name = search_tool.default_value("request")
    sys_msg = f"""
        You are an astute, self-aware AI assistant, and you are adept at 
        responding to a user's question in one of two ways:
        - If you KNOW the answer from your own knowledge, respond directly.
        - OTHERWISE, request up to 5 results from a web search using 
          the `{tool_name}` tool/function-call.
          In this case you will receive the web search results, and you can 
          then compose a response to the user's question. 
    """
    return sys_msg


class SearchAgent(lr.ChatAgent):
    async def user_response_async(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        response = await super().user_response_async(message)
        if response is None:
            return None
        content = response.content
        search_tool = MetaphorSearchTool
        if content.startswith("/"):
            match content[1]:
                case "d":
                    search_tool = DuckduckgoSearchTool
                    self.enable_message(DuckduckgoSearchTool)
                    self.enable_message(MetaphorSearchTool, use=False, handle=False)
                case "m":
                    search_tool = MetaphorSearchTool
                    self.enable_message(MetaphorSearchTool)
                    self.enable_message(DuckduckgoSearchTool, use=False, handle=False)

            self.clear_history(0)
            sys_msg = search_system_message(search_tool)
            self.set_system_message(sys_msg)

            response.content = content[2:]
        return response

    async def agent_response_async(self, message: ChatDocument) -> ChatDocument:
        response = await super().agent_response_async(message)
        if response is None:
            return None
        # ensure tool result goes to LLM
        response.metadata.recipient = lr.Entity.LLM
        return response


async def setup_agent_task(search_tool: lr.ToolMessage):
    """Set up Agent and Task from session settings state."""

    # set up LLM and LLMConfig from settings state
    await setup_llm()
    llm_config = cl.user_session.get("llm_config")
    sys_msg = search_system_message(search_tool)
    config = lr.ChatAgentConfig(
        llm=llm_config,
        name="Searcher",
        system_message=sys_msg,
    )
    agent = SearchAgent(config)
    agent.enable_message(search_tool)
    task = lr.Task(agent, interactive=True)
    cl.user_session.set("agent", agent)
    cl.user_session.set("task", task)


@cl.on_settings_update
async def on_update(settings):
    await update_llm(settings)
    await setup_agent_task(MetaphorSearchTool)


@cl.on_chat_start
async def on_chat_start():
    await add_instructions(
        title="Agent with access to a web search Tool",
        content=dedent(
            """
        Agent uses a tool/fn-call to search the web 
        
        Default search is using DuckDuckGo. You can switch the search to 
        - Duckduckgo by typing `/d` at the start of your question
        - Metaphor by typing `/m` at the start of your question
        
        This is the flow:
        - User asks question
        - Agent LLM uses an internet search tool to generate search results
        - Agent handler recognizes this tool and returns search results
        - User hits `c` to continue
        - Agent LLM composes answer
        
        To change LLM settings, including model name, click the settings symbol on the 
        left of the chat window.        
        """
        ),
    )

    await make_llm_settings_widgets()
    await setup_agent_task(MetaphorSearchTool)


@cl.on_message
async def on_message(message: cl.Message):
    task = cl.user_session.get("task")
    lr.ChainlitTaskCallbacks(task)
    await task.run_async(message.content)
</file>

<file path="examples/chainlit/chat-tool.py">
"""
Basic single-agent chat example, using task.run(), with a tool, with streaming,
using ChainlitTaskCallbacks.

After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/chat-tool.py
"""

from textwrap import dedent

import chainlit as cl

import langroid as lr
from langroid.agent.callbacks.chainlit import add_instructions


class CapitalTool(lr.ToolMessage):
    request = "capital"
    purpose = "To present the capital of given <country>."
    country: str
    capital: str

    def handle(self) -> str:
        return f"""
        Success! LLM responded with a tool/function-call, with result:
        
        Capital of {self.country} is {self.capital}.
        """


@cl.on_chat_start
async def on_chat_start():
    config = lr.ChatAgentConfig(
        name="CapitalExpert",
        system_message="""
        When asked for the <capital> of a <country>, present
        your response using the `capital` tool/function-call.
        """,
    )
    agent = lr.ChatAgent(config)
    agent.enable_message(CapitalTool)

    await add_instructions(
        title="Instructions",
        content=dedent(
            """
        Interact with a **Langroid Task**, whose ChatAgent has access 
        to a `capital` tool. You can ask about anything, but whenever you ask 
        about a country's capital, the agent will use the `capital` tool to present 
        the capital of that country. This "tool-message" is handled by the Agent's 
        handler method, and the result is presented as plain text.
        """
        ),
    )
    # inject callbacks into the agent
    task = lr.Task(
        agent,
        interactive=True,
    )
    cl.user_session.set("task", task)


@cl.on_message
async def on_message(message: cl.Message):
    task = cl.user_session.get("task")
    lr.ChainlitTaskCallbacks(task)
    await task.run_async(message.content)
</file>

<file path="examples/chainlit/chat-transcript.py">
"""
Variant of chat-agent.py, that waits for user to type "/s" (meaning submit)
to store chat transcript in a file.

Directly uses an Agent (i.e. without Task) 
using callbacks, which also enables streaming.

After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/chat-transcript.py

or:
    
uv run chainlit run examples/chainlit/chat-transcript.py

"""

import logging

import chainlit as cl

import langroid as lr
from langroid.agent.callbacks.chainlit import add_instructions

# set info logger
logging.basicConfig(level=logging.INFO)

FILE = "examples/chainlit/chat-transcript.txt"


@cl.on_chat_start
async def on_chat_start():
    config = lr.ChatAgentConfig(
        name="Demo",
        system_message="You are a helpful assistant. Be concise in your answers.",
    )
    agent = lr.ChatAgent(config)

    cl.user_session.set("agent", agent)

    await add_instructions(
        title="Instructions",
        content="Interact with a **Langroid ChatAgent**",
    )


@cl.on_message
async def on_message(message: cl.Message):
    agent: lr.ChatAgent = cl.user_session.get("agent")
    # important: only apply callbacks after getting first msg.
    lr.ChainlitAgentCallbacks(agent)
    if message.content.startswith("/s"):
        content = message.content
        # get transcript of entire conv history as a string
        history = (
            "\n\n".join(
                [
                    f"{msg.role.value.upper()}: {msg.content}"
                    for msg in agent.message_history
                ]
            )
            + "\n\n"
            + "FINAL User Answer: "
            + content[2:]
        )

        # save chat transcript to file
        with open(FILE, "w") as f:
            f.write(f"Chat transcript:\n\n{history}\n")
            await cl.Message(
                content=f"Chat transcript saved to {FILE}.",
                author="System",
            ).send()
        return

    await agent.llm_response_async(message.content)
</file>

<file path="examples/chainlit/chat-tree-chainlit.py">
"""
Variant of chat-tree.py but with Chainlit UI.
The ONLY change is we apply ChainlitTaskCallbacks() to the top-level task!

Run like this:

chainlit run examples/chainlit/chat-tree-chainlit.py
"""

from textwrap import dedent

import chainlit as cl

import langroid as lr
from langroid.agent.callbacks.chainlit import add_instructions
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE
from langroid.utils.globals import GlobalState

INTERACTIVE = False


class MyGlobalState(GlobalState):
    number: int | None = None


class AskNumTool(ToolMessage):
    request = "ask_num"
    purpose = "Ask user for the initial number"


class AddNumTool(ToolMessage):
    request = "add_num"
    purpose = "Add <number> to the original number, return the result"
    number: int

    def handle(self) -> str:
        """
        This is a stateless tool (i.e. does not use any Agent member vars), so we can
        define the handler right here, instead of defining an `add_num`
        method in the agent.
        """
        return str(int(MyGlobalState.get_value("number")) + int(self.number))


class MainChatAgent(ChatAgent):
    def ask_num(self, msg: AskNumTool) -> str:
        res = self.callbacks.get_user_response(prompt="Please enter a number")
        # record this in global state, so other agents can access it
        num = res
        MyGlobalState.set_values(number=num)
        return str(num)


@cl.on_chat_start
async def on_start():
    await add_instructions(
        title="Multi-agent chat for tree-structured computation with tools",
        content=dedent(
            """
        This task consists of performing this calculation for a given input number n:
        
        ```python
        def Main(n):
            if n is odd:
                return (3*n+1) + n
            else:
                If n is divisible by 10:
                    return n/10 + n
                else:
                    return n/2 + n
        ```
        
        See details in the [chat-tree.py](https://github.com/langroid/langroid/blob/main/examples/basic/chat-tree.py), 
        and the writeup on 
        [Hierarchical Agent Computation](https://langroid.github.io/langroid/examples/agent-tree/).
        
        To start the computation, enter a number.  
        """
        ),
    )


@cl.on_message
async def chat(msg: cl.Message) -> None:
    set_global(
        Settings(
            debug=False,
            cache=True,
            stream=True,
        )
    )

    MyGlobalState.set_values(number=int(msg.content))

    config = ChatAgentConfig(
        llm=OpenAIGPTConfig(
            chat_model=OpenAIChatModel.GPT4o,
        ),
        vecdb=None,
    )

    main_agent = MainChatAgent(config)
    main_task = Task(
        main_agent,
        name="Main",
        interactive=INTERACTIVE,
        system_message="""
        You will receive two types of messages, to which you will respond as follows:
        
        INPUT Message format: <number>
        In this case simply write the <number>, say nothing else.
        
        RESULT Message format: RESULT <number>
        In this case simply say "DONE <number>", e.g.:
        DONE 19
        """,
    )

    # Handles only even numbers
    even_agent = ChatAgent(config)
    even_task = Task(
        even_agent,
        name="Even",
        interactive=INTERACTIVE,
        system_message=f"""
        You will receive two types of messages, to which you will respond as follows:
        
        INPUT Message format: <number>
        - if the <number> is odd, say '{DONE}'
        - otherwise, simply write the <number>, say nothing else.
        
        RESULT Message format: RESULT <number>
        In this case simply write "DONE RESULT <number>", e.g.:
        DONE RESULT 19
        """,
    )

    # handles only even numbers ending in Zero
    evenz_agent = ChatAgent(config)
    evenz_task = Task(
        evenz_agent,
        name="EvenZ",
        interactive=INTERACTIVE,
        system_message=f"""
        You will receive two types of messages, to which you will respond as follows:
        
        INPUT Message format: <number>
        - if <number> n is even AND divisible by 10, compute n/10 and pass it on,
        - otherwise, say '{DONE}'
        
        RESULT Message format: RESULT <number>
        In this case simply write "DONE RESULT <number>", e.g.:
        DONE RESULT 19
        """,
    )

    # Handles only even numbers NOT ending in Zero
    even_nz_agent = ChatAgent(config)
    even_nz_task = Task(
        even_nz_agent,
        name="EvenNZ",
        interactive=INTERACTIVE,
        system_message=f"""
        You will receive two types of messages, to which you will respond as follows:
        
        INPUT Message format: <number>
        - if <number> n is even AND NOT divisible by 10, compute n/2 and pass it on,
        - otherwise, say '{DONE}'
        
        RESULT Message format: RESULT <number>
        In this case simply write "DONE RESULT <number>", e.g.:
        DONE RESULT 19
        """,
    )

    # Handles only odd numbers
    odd_agent = ChatAgent(config)
    odd_task = Task(
        odd_agent,
        name="Odd",
        interactive=INTERACTIVE,
        system_message=f"""
        You will receive two types of messages, to which you will respond as follows:
        
        INPUT Message format: <number>
        - if <number> n is odd, compute n*3+1 and write it.
        - otherwise, say '{DONE}'

        RESULT Message format: RESULT <number>        
        In this case simply write "DONE RESULT <number>", e.g.:
        DONE RESULT 19
        """,
    )

    adder_agent = ChatAgent(config)
    # set up the tools
    adder_agent.enable_message(AddNumTool)
    # main_agent.enable_message(AskNumTool)

    adder_task = Task(
        adder_agent,
        name="Adder",
        interactive=INTERACTIVE,
        system_message="""
        You will be given a number n.
        You have to add it to the original number and return the result.
        You do not know the original number, so you must use the 
        `add_num` tool/function for this. 
        When you receive the result, say "DONE RESULT <result>", e.g.
        DONE RESULT 19
        """,
    )

    # set up tasks and subtasks
    main_task.add_sub_task([even_task, odd_task])
    even_task.add_sub_task([evenz_task, even_nz_task])
    evenz_task.add_sub_task(adder_task)
    even_nz_task.add_sub_task(adder_task)
    odd_task.add_sub_task(adder_task)

    # inject chainlit callbacks: this is the ONLY change to chat-tree.py
    lr.ChainlitTaskCallbacks(main_task)

    # start the chat
    await main_task.run_async(msg.content)
</file>

<file path="examples/chainlit/chat-with-agent.py">
"""
Basic single-agent chat example, to directly use an Agent (i.e. without Task)
using callbacks, which also enables streaming.

After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/chat-with-agent.py

"""

import logging

import chainlit as cl

import langroid as lr
from langroid.agent.callbacks.chainlit import add_instructions

# set info logger
logging.basicConfig(level=logging.INFO)


@cl.on_chat_start
async def on_chat_start():
    config = lr.ChatAgentConfig(
        name="Demo",
        system_message="You are a helpful assistant. Be concise in your answers.",
    )
    agent = lr.ChatAgent(config)

    cl.user_session.set("agent", agent)

    await add_instructions(
        title="Instructions",
        content="Interact with a **Langroid ChatAgent**",
    )


@cl.on_message
async def on_message(message: cl.Message):
    agent: lr.ChatAgent = cl.user_session.get("agent")
    # important: only apply callbacks after getting first msg.
    lr.ChainlitAgentCallbacks(agent)
    await agent.llm_response_async(message.content)
</file>

<file path="examples/chainlit/chat-with-task.py">
"""
Basic single-agent chat example using Task along with ChainlitTaskCallbacks.

After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/chat-with-task.py
"""

from textwrap import dedent

import chainlit as cl

import langroid as lr
from langroid.agent.callbacks.chainlit import (
    add_instructions,
    make_llm_settings_widgets,
    setup_llm,
    update_llm,
)


@cl.on_settings_update
async def on_settings_update(settings: cl.ChatSettings):
    await update_llm(settings)
    await setup_agent_task()


async def setup_agent_task():
    await setup_llm()
    llm_config = cl.user_session.get("llm_config")

    config = lr.ChatAgentConfig(
        llm=llm_config,
        name="Demo",
        system_message="You are a helpful assistant. Be concise in your answers.",
    )
    agent = lr.ChatAgent(config)

    task = lr.Task(
        agent,
        interactive=True,
    )
    cl.user_session.set("task", task)


@cl.on_chat_start
async def on_chat_start():
    await add_instructions(
        title="Basic Langroid Chatbot",
        content=dedent(
            """
        Uses Langroid's `Task.run()`. 
        Before starting the chat, 
        you can change LLM settings by clicking the settings icon next to the chat window.
        """
        ),
    )
    await make_llm_settings_widgets()
    await setup_agent_task()


@cl.on_message
async def on_message(message: cl.Message):
    task = cl.user_session.get("task")
    # sometimes we may want the User to NOT have agent name in front,
    # and just show them as YOU.
    callback_config = lr.ChainlitCallbackConfig(user_has_agent_name=False)
    lr.ChainlitTaskCallbacks(task, config=callback_config)
    await task.run_async(message.content)
</file>

<file path="examples/chainlit/dependency_chatbot.py">
"""
Single-agent to use to chat with a Neo4j knowledge-graph (KG)
that models a dependency graph of Python packages.

This is a chainlit UI version of examples/kg-chat/dependency_chatbot.py

Run like this:
```
chainlit run examples/kg-chat/dependency_chatbot.py
```

The requirements are described in
 `https://github.com/langroid/langroid/blob/main/examples/kg-chat/README.md`
"""

import webbrowser
from pathlib import Path
from textwrap import dedent

import chainlit as cl
import typer
from cypher_message import CONSTRUCT_DEPENDENCY_GRAPH
from pyvis.network import Network
from rich import print

import langroid as lr
import langroid.language_models as lm
from langroid.agent.callbacks.chainlit import (
    add_instructions,
    make_llm_settings_widgets,
    setup_llm,
    update_llm,
)
from langroid.agent.special.neo4j.neo4j_chat_agent import (
    Neo4jChatAgent,
    Neo4jChatAgentConfig,
    Neo4jSettings,
)
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.google_search_tool import GoogleSearchTool
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import NO_ANSWER

app = typer.Typer()


class DepGraphTool(ToolMessage):
    request = "construct_dependency_graph"
    purpose = f"""Get package <package_version>, <package_type>, and <package_name>.
    For the <package_version>, obtain the recent version, it should be a number. 
    For the <package_type>, return if the package is PyPI or not.
      Otherwise, return {NO_ANSWER}.
    For the <package_name>, return the package name provided by the user.
    ALL strings are in lower case.
    """
    package_version: str
    package_type: str
    package_name: str


class VisualizeGraph(ToolMessage):
    request = "visualize_dependency_graph"
    purpose = """
      Use this tool/function to display the dependency graph.
      """
    package_version: str
    package_type: str
    package_name: str
    query: str


class DependencyGraphAgent(Neo4jChatAgent):
    def construct_dependency_graph(self, msg: DepGraphTool) -> None:
        check_db_exist = (
            "MATCH (n) WHERE n.name = $name AND n.version = $version RETURN n LIMIT 1"
        )
        response = self.read_query(
            check_db_exist, {"name": msg.package_name, "version": msg.package_version}
        )
        if response.success and response.data:
            # self.config.database_created = True
            return "Database Exists"
        else:
            construct_dependency_graph = CONSTRUCT_DEPENDENCY_GRAPH.format(
                package_type=msg.package_type.lower(),
                package_name=msg.package_name,
                package_version=msg.package_version,
            )
            response = self.write_query(construct_dependency_graph)
            if response.success:
                self.config.database_created = True
                return "Database is created!"
            else:
                return f"""
                    Database is not created!
                    Seems the package {msg.package_name} is not found,
                    """

    def visualize_dependency_graph(self, msg: VisualizeGraph) -> str:
        """
        Visualizes the dependency graph based on the provided message.

        Args:
            msg (VisualizeGraph): The message containing the package info.

        Returns:
            str: response indicates whether the graph is displayed.
        """
        # Query to fetch nodes and relationships
        # TODO: make this function more general to return customized graphs
        # i.e, displays paths or subgraphs
        query = """
            MATCH (n)
            OPTIONAL MATCH (n)-[r]->(m)
            RETURN n, r, m
        """

        query_result = self.read_query(query)
        nt = Network(notebook=False, height="750px", width="100%", directed=True)

        node_set = set()  # To keep track of added nodes

        for record in query_result.data:
            # Process node 'n'
            if "n" in record and record["n"] is not None:
                node = record["n"]
                # node_id = node.get("id", None)  # Assuming each node has a unique 'id'
                node_label = node.get("name", "Unknown Node")
                node_title = f"Version: {node.get('version', 'N/A')}"
                node_color = "blue" if node.get("imported", False) else "green"

                # Check if node has been added before
                if node_label not in node_set:
                    nt.add_node(
                        node_label, label=node_label, title=node_title, color=node_color
                    )
                    node_set.add(node_label)

            # Process relationships and node 'm'
            if (
                "r" in record
                and record["r"] is not None
                and "m" in record
                and record["m"] is not None
            ):
                source = record["n"]
                target = record["m"]
                relationship = record["r"]

                source_label = source.get("name", "Unknown Node")
                target_label = target.get("name", "Unknown Node")
                relationship_label = (
                    relationship[1]
                    if isinstance(relationship, tuple) and len(relationship) > 1
                    else "Unknown Relationship"
                )

                # Ensure both source and target nodes are added before adding the edge
                if source_label not in node_set:
                    source_title = f"Version: {source.get('version', 'N/A')}"
                    source_color = "blue" if source.get("imported", False) else "green"
                    nt.add_node(
                        source_label,
                        label=source_label,
                        title=source_title,
                        color=source_color,
                    )
                    node_set.add(source_label)
                if target_label not in node_set:
                    target_title = f"Version: {target.get('version', 'N/A')}"
                    target_color = "blue" if target.get("imported", False) else "green"
                    nt.add_node(
                        target_label,
                        label=target_label,
                        title=target_title,
                        color=target_color,
                    )
                    node_set.add(target_label)

                nt.add_edge(source_label, target_label, title=relationship_label)

        nt.options.edges.font = {"size": 12, "align": "top"}
        nt.options.physics.enabled = True
        nt.show_buttons(filter_=["physics"])

        output_file_path = "neo4j_graph.html"
        nt.write_html(output_file_path)

        # Try to open the HTML file in a browser
        try:
            abs_file_path = str(Path(output_file_path).resolve())
            webbrowser.open("file://" + abs_file_path, new=2)
        except Exception as e:
            print(f"Failed to automatically open the graph in a browser: {e}")


async def setup_agent_task():
    """Set up Agent and Task from session settings state."""

    # set up LLM and LLMConfig from settings state
    await setup_llm()
    llm_config = cl.user_session.get("llm_config")

    set_global(
        Settings(
            debug=False,
            cache=True,
        )
    )

    neo4j_settings = Neo4jSettings()

    dependency_agent = DependencyGraphAgent(
        config=Neo4jChatAgentConfig(
            neo4j_settings=neo4j_settings,
            show_stats=False,
            llm=llm_config,
        ),
    )

    system_message = f"""You are an expert in Dependency graphs and analyzing them using
    Neo4j. 
    
    FIRST, I'll give you the name of the package that I want to analyze.
    
    THEN, you can also use the `web_search` tool/function to find out information about a package,
      such as version number and package type (PyPi or not). 
    
    If unable to get this info, you can ask me and I can tell you.
    
    DON'T forget to include the package name in your questions. 
      
    After receiving this information, make sure the package version is a number and the
    package type is PyPi.
    THEN ask the user if they want to construct the dependency graph,
    and if so, use the tool/function `construct_dependency_graph` to construct
      the dependency graph. Otherwise, say `Couldn't retrieve package type or version`
      and {NO_ANSWER}.
    After constructing the dependency graph successfully, you will have access to Neo4j 
    graph database, which contains dependency graph.
    You will try your best to answer my questions. Note that:
    1. You can use the tool `get_schema` to get node label and relationships in the
    dependency graph. 
    2. You can use the tool `retrieval_query` to get relevant information from the
      graph database. I will execute this query and send you back the result.
      Make sure your queries comply with the database schema.
    3. Use the `web_search` tool/function to get information if needed.
    To display the dependency graph use this tool `visualize_dependency_graph`.
    """
    task = Task(
        dependency_agent,
        name="DependencyAgent",
        system_message=system_message,
    )

    dependency_agent.enable_message(DepGraphTool)
    dependency_agent.enable_message(GoogleSearchTool)
    dependency_agent.enable_message(VisualizeGraph)

    cl.user_session.set("dependency_agent", dependency_agent)
    cl.user_session.set("task", task)


@cl.on_settings_update
async def on_update(settings):
    await update_llm(settings)
    await setup_agent_task()


@cl.on_chat_start
async def chat() -> None:
    await add_instructions(
        title="Welcome to Python Dependency chatbot!",
        content=dedent(
            """
        Ask any questions about Python packages, and I will try my best to answer them.
        But first, the user specifies package name
        -> agent gets version number and type of package using google search
        -> agent builds dependency graph using Neo4j
        -> user asks natural language query about dependencies
        -> LLM translates to Cypher query to get info from KG
        -> Query results returned to LLM
        -> LLM translates to natural language response
        """
        ),
    )

    await make_llm_settings_widgets(
        lm.OpenAIGPTConfig(
            timeout=180,
            chat_context_length=16_000,
            chat_model="",
            temperature=0.1,
        )
    )
    await setup_agent_task()


@cl.on_message
async def on_message(message: cl.Message):
    task = cl.user_session.get("task")
    lr.ChainlitTaskCallbacks(task)
    await task.run_async(message.content)
</file>

<file path="examples/chainlit/multi-agent-nested-tool.py">
"""
TODO - this example does not work yet due to breaking changes in Chainlit

2-agent chat, using task.run(), where the sub-task uses a tool to get user input.
This illustrates how a sub-task's steps, including tool-calls, are nested
one level under the parent task's steps.

After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/multi-agent-nested-tool.py
"""

from textwrap import dedent

import chainlit as cl

import langroid as lr
from langroid.agent.callbacks.chainlit import ChainlitTaskCallbacks, add_instructions
from langroid.utils.configuration import settings
from langroid.utils.constants import DONE

settings.cache = False


class ExportTool(lr.ToolMessage):
    request = "main_export"
    purpose = "To request the main export of a given <country>."
    country: str


class StudentChatAgent(lr.ChatAgent):
    def main_export(self, msg: ExportTool) -> str:
        assert (
            self.callbacks.get_user_response is not None
        ), "No get_user_response method"
        assert (
            self.callbacks.show_agent_response is not None
        ), "No show_agent_response method"

        prompt = "Please tell me the main export of " + msg.country
        # create the question for user as an agent response since it
        # will ensure it is shown at right nesting level
        # self.callbacks.show_agent_response(content=prompt)
        user_response = self.callbacks.get_user_response(prompt=prompt)
        res = "the main export is " + user_response
        return res


@cl.on_chat_start
async def on_chat_start():
    await add_instructions(
        title="Two-Agent Demo, where sub-agent uses a Tool/function-call",
        content=dedent(
            """
        **Teacher Agent** delegates to **Student Agent.** 
        - **Teacher** Agent asks a "country export" question to **Student** Agent
        - user (you) hits `c` to continue on to the **Student**
        - **Student** LLM uses `export` tool/fn-call to get answer from user
        - **Student** Agent handler code presents this question to you (user)
        - you answer the question
        - **Student** Agent handler returns your answer
        - **Student** LLM shows the answer
        - user hits `c` to continue on to the **Teacher**
        - **Teacher** Agent gives feedback
        - and so on.
        
        Note how all steps of the (student) sub-task are nested one level below 
        the main (teacher) task.
        """
        ),
    )

    config = lr.ChatAgentConfig()
    teacher_agent = lr.ChatAgent(config)
    teacher_task = lr.Task(
        teacher_agent,
        name="Teacher",
        interactive=True,
        system_message="""
        Ask your student what the main export of a country is, and give feedback. 
        Start with a question!
        """,
    )
    student_agent = StudentChatAgent(config)
    student_agent.enable_message(ExportTool)
    student_task = lr.Task(
        student_agent,
        name="Student",
        interactive=True,
        system_message=f"""
        When you receive a country-export question, 
        use the `main_export` tool to get the answer from the user.
        When you get the answer, say {DONE} and show the answer.
        """,
    )

    teacher_task.add_sub_task(student_task)
    ChainlitTaskCallbacks(teacher_task)
    await teacher_task.run_async()
</file>

<file path="examples/chainlit/multi-agent.py">
"""
2-agent chat, using task.run(), where:
- Teacher Agent asks a question
- Student Agent answers the question
- Teacher Agent gives feedback
- ...


After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/multi-agent.py
"""

import os
from textwrap import dedent

import chainlit as cl

import langroid as lr
from langroid.agent.callbacks.chainlit import ChainlitTaskCallbacks, add_instructions
from langroid.utils.configuration import settings


@cl.on_chat_start
async def on_chat_start(
    debug: bool = os.getenv("DEBUG", False),
    no_cache: bool = os.getenv("NOCACHE", False),
):
    settings.debug = debug
    settings.cache = not no_cache

    await add_instructions(
        title="Two-Agent Demo",
        content=dedent(
            """
        **Teacher Agent** delegates to **Student Agent.**
        - **Teacher** Agent asks a numerical question to **Student** Agent
        - **Student** Agent answers the question
        - **Teacher** Agent gives feedback        
        - and so on until 10 turns are done.
        
        Note how all steps of the (student) sub-task are nested one level below 
        the main (teacher) task.
        """
        ),
    )
    config = lr.ChatAgentConfig()
    teacher_agent = lr.ChatAgent(config)
    teacher_task = lr.Task(
        teacher_agent,
        name="Teacher",
        interactive=False,
        system_message="""
        Ask your student concise numerical questions, and give feedback. 
        Start with a question!
        """,
    )
    student_agent = lr.ChatAgent(config)
    student_task = lr.Task(
        student_agent,
        name="Student",
        interactive=False,
        system_message="""Concisely answer your teacher's numerical questions""",
        single_round=True,
    )

    teacher_task.add_sub_task(student_task)
    ChainlitTaskCallbacks(teacher_task)
    await teacher_task.run_async(turns=10)
</file>

<file path="examples/chainlit/simplest.py">
"""
Absolute bare-bones way to set up a simple chatbot using all default settings,
using a Langroid Task + callbacks.

After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/simplest.py
"""

import chainlit as cl

import langroid as lr
import langroid.language_models as lm


@cl.on_message
async def on_message(message: cl.Message):
    lm_config = lm.OpenAIGPTConfig()
    agent = lr.ChatAgent(lr.ChatAgentConfig(llm=lm_config))
    task = lr.Task(agent, interactive=True)

    lr.ChainlitTaskCallbacks(task)
    await task.run_async(message.content)
</file>

<file path="examples/data-qa/sql-chat/sql_chat.py">
"""
Example showing how to chat with a SQL database.

Note if you are using this with a postgres db, you will need to:

(a) Install PostgreSQL dev libraries for your platform, e.g.
    - `sudo apt-get install libpq-dev` on Ubuntu,
    - `brew install postgresql` on Mac, etc.
(b) langroid with the postgres extra, e.g. `pip install langroid[postgres]`
    or `poetry add langroid[postgres]` or `poetry install -E postgres`
    or `uv pip install langroid[postgres]` or `uv add langroid[postgres]`.
    If this gives you an error, try `pip install psycopg2-binary` in your virtualenv.
"""

import json
import os
from typing import Any, Dict

import typer
from rich import print
from rich.prompt import Prompt

from langroid.exceptions import LangroidImportError

try:
    from sqlalchemy import create_engine, inspect
    from sqlalchemy.engine import Engine
except ImportError as e:
    raise LangroidImportError(extra="sql", error=str(e))

from prettytable import PrettyTable

try:
    from .utils import fix_uri, get_database_uri
except ImportError:
    from utils import fix_uri, get_database_uri
import logging

from langroid.agent.special.sql.sql_chat_agent import (
    SQLChatAgent,
    SQLChatAgentConfig,
)
from langroid.agent.task import Task
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import SEND_TO

logger = logging.getLogger(__name__)


app = typer.Typer()


def create_descriptions_file(filepath: str, engine: Engine) -> None:
    """
    Create an empty descriptions JSON file for SQLAlchemy tables.

    This function inspects the database, generates a template for table and
    column descriptions, and writes that template to a new JSON file.

    Args:
        filepath: The path to the file where the descriptions should be written.
        engine: The SQLAlchemy Engine connected to the database to describe.

    Raises:
        FileExistsError: If the file at `filepath` already exists.

    Returns:
        None
    """
    if os.path.exists(filepath):
        raise FileExistsError(f"File {filepath} already exists.")

    inspector = inspect(engine)
    descriptions: Dict[str, Dict[str, Any]] = {}

    for table_name in inspector.get_table_names():
        descriptions[table_name] = {
            "description": "",
            "columns": {col["name"]: "" for col in inspector.get_columns(table_name)},
        }

    with open(filepath, "w") as f:
        json.dump(descriptions, f, indent=4)


def load_context_descriptions(engine: Engine) -> dict:
    """
    Ask the user for a path to a JSON file and load context descriptions from it.

    Returns:
        dict: The context descriptions, or an empty dictionary if the user decides to skip this step.
    """

    while True:
        filepath = Prompt.ask(
            "[blue]Enter the path to your context descriptions file. \n"
            "('n' to create a NEW file, 's' to SKIP, or Hit enter to use DEFAULT) ",
            default="examples/data-qa/sql-chat/demo.json",
        )

        if filepath.strip() == "s":
            return {}

        if filepath.strip() == "n":
            filepath = Prompt.ask(
                "[blue]To create a new context description file, enter the path",
                default="examples/data-qa/sql-chat/description.json",
            )
            print(f"[blue]Creating new context description file at {filepath}...")
            create_descriptions_file(filepath, engine)
            print(
                f"[blue] Please fill in the descriptions in {filepath}, "
                f"then try again."
            )

        # Try to load the file
        if not os.path.exists(filepath):
            print(f"[red]The file '{filepath}' does not exist. Please try again.")
            continue

        try:
            with open(filepath, "r") as file:
                return json.load(file)
        except json.JSONDecodeError:
            print(
                f"[red]The file '{filepath}' is not a valid JSON file. Please try again."
            )


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    tools: bool = typer.Option(
        False, "--tools", "-t", help="use langroid tools instead of function-calling"
    ),
    schema_tools: bool = typer.Option(
        False, "--schema_tools", "-st", help="use schema tools"
    ),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
            cache_type="redis",
        )
    )
    print("[blue]Welcome to the SQL database chatbot!\n")
    database_uri = Prompt.ask(
        """
        [blue]Enter the URI for your SQL database 
        (type 'i' for interactive, or hit enter for default)
        """,
        default="sqlite:///examples/data-qa/sql-chat/demo.db",
    )

    if database_uri == "i":
        database_uri = get_database_uri()

    database_uri = fix_uri(database_uri)
    logger.warning(f"Using database URI: {database_uri}")

    # Create engine and inspector
    engine = create_engine(database_uri)
    inspector = inspect(engine)

    context_descriptions = load_context_descriptions(engine)

    # Get table names
    table_names = inspector.get_table_names()

    for table_name in table_names:
        print(f"[blue]Table: {table_name}")

        # Create a new table for the columns
        table = PrettyTable()
        table.field_names = ["Column Name", "Type"]

        # Get the columns for the table
        columns = inspector.get_columns(table_name)
        for column in columns:
            table.add_row([column["name"], column["type"]])

        print(table)

    agent_config = SQLChatAgentConfig(
        name="sql",
        database_uri=database_uri,
        use_tools=tools,
        use_functions_api=not tools,
        show_stats=False,
        chat_mode=True,
        use_helper=True,
        context_descriptions=context_descriptions,  # Add context descriptions to the config
        use_schema_tools=schema_tools,
        addressing_prefix=SEND_TO,
        llm=OpenAIGPTConfig(
            chat_model=OpenAIChatModel.GPT4o,
        ),
    )
    agent = SQLChatAgent(agent_config)
    # Set interactive = False, but we user gets chance to respond
    # when explicitly addressed by LLM
    task = Task(agent, interactive=False)
    task.run()


if __name__ == "__main__":
    app()
</file>

<file path="examples/data-qa/sql-chat/utils.py">
import logging
import urllib.parse

from rich import print
from rich.prompt import Prompt

from langroid.parsing.utils import closest_string

logger = logging.getLogger(__name__)


DEFAULT_PORTS = dict(
    postgresql=5432,
    mysql=3306,
    mariadb=3306,
    mssql=1433,
    oracle=1521,
    mongodb=27017,
    redis=6379,
)


def fix_uri(uri: str) -> str:
    """Fixes a URI by percent-encoding the username and password."""

    if "%" in uri:
        return uri  # already %-encoded, so don't do anything
    # Split by '://'
    scheme_part, rest_of_uri = uri.split("://", 1)

    # Get the final '@' (assuming only the last '@' is the separator for user info)
    last_at_index = rest_of_uri.rfind("@")
    userinfo_part = rest_of_uri[:last_at_index]
    rest_of_uri_after_at = rest_of_uri[last_at_index + 1 :]

    if ":" not in userinfo_part:
        return uri
    # Split userinfo by ':' to get username and password
    username, password = userinfo_part.split(":", 1)

    # Percent-encode the username and password
    username = urllib.parse.quote(username)
    password = urllib.parse.quote(password)

    # Construct the fixed URI
    fixed_uri = f"{scheme_part}://{username}:{password}@{rest_of_uri_after_at}"

    return fixed_uri


def _create_database_uri(
    scheme: str,
    username: str,
    password: str,
    hostname: str,
    port: int,
    databasename: str,
) -> str:
    """Generates a database URI based on provided parameters."""
    username = urllib.parse.quote_plus(username)
    password = urllib.parse.quote_plus(password)
    port_str = f":{port}" if port else ""
    return f"{scheme}://{username}:{password}@{hostname}{port_str}/{databasename}"


def get_database_uri() -> str:
    """Main function to gather input and print the database URI."""
    scheme_input = Prompt.ask("Enter the database type (e.g., postgresql, mysql)")
    scheme = closest_string(scheme_input, list(DEFAULT_PORTS.keys()))

    # Handle if no close match is found.
    if scheme == "No match found":
        print(f"No close match found for '{scheme_input}'. Please verify your input.")
        return

    username = Prompt.ask("Enter the database username")
    password = Prompt.ask("Enter the database password", password=True)
    hostname = Prompt.ask("Enter the database hostname")

    # Inform user of default port, and let them choose to override or leave blank
    default_port = DEFAULT_PORTS.get(scheme, "")
    port_msg = (
        f"Enter the database port "
        f"(hit enter to use default: {default_port} or specify another value)"
    )

    port = Prompt.ask(port_msg, default=default_port)
    if not port:  # If user pressed enter without entering anything
        port = default_port
    port = int(port)

    databasename = Prompt.ask("Enter the database name")

    uri = _create_database_uri(scheme, username, password, hostname, port, databasename)
    print(f"Your {scheme.upper()} URI is:\n{uri}")
    return uri
</file>

<file path="examples/data-qa/table_chat.py">
"""
Example showing how to chat with a tabular dataset:
csv, tsv, or any other pandas-readable.

Run like this

python3 examples/data-qa/table_chat.py

Optional args:
* -d or --debug to enable debug mode
* -ns or --nostream to disable streaming
* -nc or --nocache to disable caching
* -m or --model to specify a model name

To run with a local model via ollama, do this:
```
ollama run dolphin-mixtral # best model for this script

python3 examples/data-qa/table_chat.py -m ollama/dolphin-mixtral:latest
```

For more info on running Langroid with local LLM, see here:
https://langroid.github.io/langroid/tutorials/local-llm-setup/
"""

import typer
from rich import print
from rich.prompt import Prompt

from langroid.agent.special.table_chat_agent import TableChatAgent, TableChatAgentConfig
from langroid.agent.task import Task
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.utils.configuration import Settings, set_global

app = typer.Typer()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )

    print("[blue]Welcome to the tabular-data chatbot!\n")
    path = Prompt.ask(
        "[blue]Enter a local path or URL to a tabular dataset (hit enter to use default)\n",
        default="https://raw.githubusercontent.com/fivethirtyeight/data/master/airline-safety/airline-safety.csv",
    )

    agent = TableChatAgent(
        config=TableChatAgentConfig(
            data=path,
            llm=OpenAIGPTConfig(
                chat_model=model or OpenAIChatModel.GPT4o,
                chat_context_length=16_000,  # adjust based on model
                timeout=45,
                temperature=0.2,
            ),
        )
    )
    task = Task(agent, interactive=True)
    task.run("Can you help me with some questions about a tabular dataset?")


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/streamlit-app/app.py">
import os

import streamlit as st
from utils import agent, configure

import langroid.language_models as lm
from langroid.utils.configuration import settings

settings.cache_type = "fakeredis"
if st.session_state.get("specified_file") is None:
    st.session_state["specified_file"] = ""
if st.session_state.get("file_path") is None:
    st.session_state["file_path"] = ""
if st.session_state.get("rag_agent") is None:
    st.session_state["rag_agent"] = None
if st.session_state.get("chat_model") is None:
    st.session_state["chat_model"] = None

default_chat_model = lm.OpenAIChatModel.GPT4o.value
chat_model = st.sidebar.text_input(
    f"""
Chat model, e.g. `litellm/ollama/mistral:7b-instruct-v0.2-q4_K_M`,
or leave empty to default to {default_chat_model}
"""
)
actual_chat_model = chat_model or default_chat_model
st.session_state["chat_model"] = actual_chat_model
st.sidebar.info(f"Using chat model: {str(actual_chat_model)}")
st.header("DocChatAgent by Langroid", divider="rainbow")

uploaded_file = st.file_uploader("Choose a txt file")
TEMP_DIR = "tempdir"
if uploaded_file is not None:
    if uploaded_file.name != st.session_state["specified_file"]:
        temp_dir = os.makedirs(TEMP_DIR, exist_ok=True)
        temp_path = os.path.join(TEMP_DIR, uploaded_file.name)
        with open(temp_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        st.session_state["specified_file"] = uploaded_file.name
        st.session_state["file_path"] = temp_path
    else:
        temp_path = st.session_state["file_path"]

temp_path = st.session_state["file_path"]
cfg = configure(temp_path, actual_chat_model)

prompt = st.chat_input("Talk with Document")
if prompt:
    st.write(f"{prompt}")

    # chat using docchatagent
    answer = agent(cfg, prompt)
    st.write(f"{answer}")
</file>

<file path="examples/docqa/chat_search.py">
"""
This is a single-agent question-answering system that has access to a Web-Search
Tool when needed,
and in case a web search is used, ingests scraped link contents into a vector-db,
and uses Retrieval Augmentation to answer the question.

Run like this:

    python3 examples/docqa/chat-search.py -m groq/llama-3.1-70b-versatile

The -m arg is optional, defaults to GPT4o

Optional args:
    -nc : turn off caching (i.e. don't retrieve cached LLM responses)
    -d: debug mode, to show all intermediate results
    -f: use OpenAI functions api instead of tools
    -m <model_name>:  run with a specific LLM
    (defaults to GPT4-Turbo if blank)
    -c <crawler_name>: specify a crawler to use for web search. Options are:
         "trafilatura" (default), "firecrawl"

See here for guide to using local LLMs with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/
"""

import logging
import re
from typing import Any, List, Optional

import typer
from fire import Fire
from rich import print
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.chat_agent import ChatAgent, ChatDocument
from langroid.agent.special.doc_chat_agent import (
    DocChatAgent,
    DocChatAgentConfig,
)
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import ForwardTool
from langroid.parsing.url_loader import (
    ExaCrawlerConfig,
    FirecrawlConfig,
    TrafilaturaConfig,
)
from langroid.parsing.web_search import exa_search
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import NO_ANSWER

logger = logging.getLogger(__name__)


class RelevantExtractsTool(ToolMessage):
    request = "relevant_extracts"
    purpose = "Get docs/extracts relevant to the <query>"
    query: str

    @classmethod
    def examples(cls) -> List["ToolMessage"]:
        return [
            cls(query="when was the Mistral LLM released?"),
        ]

    @classmethod
    def instructions(cls) -> str:
        return """
        IMPORTANT: You must include an ACTUAL query in the `query` field,
        """


class RelevantSearchExtractsTool(ToolMessage):
    request = "relevant_search_extracts"
    purpose = "Get docs/extracts relevant to the <query> from a web search"
    query: str
    num_results: int = 3

    @classmethod
    def examples(cls) -> List["ToolMessage"]:
        return [
            cls(
                query="when was the Mistral LLM released?",
                num_results=3,
            ),
        ]

    @classmethod
    def instructions(cls) -> str:
        return """
        IMPORTANT: You must include an ACTUAL query in the `query` field,
        """


class SearchDocChatAgent(DocChatAgent):
    tried_vecdb: bool = False
    crawler: Optional[str] = None

    def __init__(self, config: DocChatAgentConfig, crawler: Optional[str] = None):
        super().__init__(config)
        self.tried_vecdb = False
        self.crawler = crawler
        self.update_crawler_config(crawler)

    def update_crawler_config(self, crawler: Optional[str]):
        """Updates the crawler config based on the crawler argument."""
        if crawler == "firecrawl":
            self.config.crawler_config = FirecrawlConfig()
        elif crawler == "trafilatura" or crawler is None:
            self.config.crawler_config = TrafilaturaConfig()
        elif crawler == "exa":
            self.config.crawler_config = ExaCrawlerConfig()
        else:
            raise ValueError(
                f"Unsupported crawler {crawler}. Options are: 'trafilatura', 'firecrawl'"
            )

    def llm_response(
        self,
        message: None | str | ChatDocument = None,
    ) -> ChatDocument | None:
        # override llm_response of DocChatAgent to allow use of the tools.
        return ChatAgent.llm_response(self, message)

    def handle_message_fallback(self, msg: str | ChatDocument) -> Any:
        if isinstance(msg, ChatDocument) and msg.metadata.sender == lr.Entity.LLM:
            return ForwardTool(agent="user")

    def relevant_extracts(self, msg: RelevantExtractsTool) -> str:
        """Get docs/extracts relevant to the query, from vecdb"""
        self.tried_vecdb = True
        query = msg.query
        _, extracts = self.get_relevant_extracts(query)
        if len(extracts) == 0:
            return """
            No extracts found! You can try doing a web search with the
            `relevant_search_extracts` tool/function-call.
            """
        return "\n".join(str(e) for e in extracts)

    def relevant_search_extracts(self, msg: RelevantSearchExtractsTool) -> str:
        """Get docs/extracts relevant to the query, from a web search"""
        if not self.tried_vecdb and len(self.original_docs) > 0:
            return "Please try the `relevant_extracts` tool, before using this tool"
        self.tried_vecdb = False
        query = msg.query
        num_results = msg.num_results
        logger.warning("Trying exa search...")
        results = exa_search(query, num_results)
        links = [r.link for r in results]
        logger.warning(f"Found {len(links)} links, ingesting into vecdb...")
        self.config.doc_paths = links
        self.ingest()
        logger.warning(f"Ingested {len(links)} links into vecdb")
        _, extracts = self.get_relevant_extracts(query)
        return "\n".join(str(e) for e in extracts)


def cli():
    Fire(main)


app = typer.Typer()


@app.command()
def main(
    debug: bool = False,
    nocache: bool = False,
    model: str = "",
    fn_api: bool = True,
    crawler: Optional[str] = typer.Option(
        None,
        "--crawler",
        "-c",
        help="Specify a crawler to use (trafilatura, firecrawl)",
    ),
) -> None:
    """
    Main function to run the chatbot.

    Args:
        debug (bool): Enable debug mode.
        nocache (bool): Disable caching.
        model (str): Specify the LLM model to use.
        fn_api (bool): Use OpenAI functions API instead of tools.
        crawler (str): Specify the crawler to use for web search.
    """

    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )

    print(
        """
        [blue]Welcome to the Internet Search chatbot!
        I will try to answer your questions, relying on (full content of links from) 
        Duckduckgo (DDG) Search when needed.
        
        Enter x or q to quit, or ? for evidence
        """
    )

    system_msg = Prompt.ask(
        """
    [blue] Tell me who I am (give me a role) by completing this sentence: 
    You are...
    [or hit enter for default]
    [blue] Human
    """,
        default="a helpful assistant.",
    )
    system_msg = re.sub("you are", "", system_msg, flags=re.IGNORECASE)

    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        # or, other possibilities for example:
        # "litellm/bedrock/anthropic.claude-instant-v1"
        # "ollama/llama2"
        # "local/localhost:8000/v1"
        # "local/localhost:8000"
        chat_context_length=8000,  # adjust based on model
    )

    config = DocChatAgentConfig(
        use_functions_api=fn_api,
        use_tools=not fn_api,
        llm=llm_config,
        system_message=f"""
        {system_msg} You will try your best to answer my questions,
        in this order of preference:
        1. If you can answer from your own knowledge, simply return the answer
        2. Otherwise, ask me for some relevant text, and I will send you. Use the 
            `relevant_extracts` tool/function-call for this purpose. Once you receive 
            the text, you can use it to answer my question. 
            If I say {NO_ANSWER}, it means I found no relevant docs, and you can try 
            the next step, using a web search.
        3. If you are still unable to answer, you can use the `relevant_search_extracts`
           tool/function-call to get some text from a web search. Once you receive the
           text, you can use it to answer my question.
        5. If you still can't answer, simply say {NO_ANSWER} 
        
        Remember to always FIRST try `relevant_extracts` to see if there are already 
        any relevant docs, before trying web-search with `relevant_search_extracts`.
        
        Be very concise in your responses, use no more than 1-2 sentences.
        When you answer based on provided documents, be sure to show me 
        the SOURCE(s) and EXTRACT(s), for example:
        
        SOURCE: https://www.wikihow.com/Be-a-Good-Assistant-Manager
        EXTRACT: Be a Good Assistant ... requires good leadership skills.
        
        For the EXTRACT, ONLY show up to first 3 words, and last 3 words.
        """,
    )

    agent = SearchDocChatAgent(config, crawler=crawler)
    agent.enable_message(
        [
            RelevantExtractsTool,
            RelevantSearchExtractsTool,
        ]
    )
    collection_name = Prompt.ask(
        "Name a collection to use",
        default="docqa-chat-search",
    )
    replace = (
        Prompt.ask(
            "Would you like to replace (i.e. erase) this collection?",
            choices=["y", "n"],
            default="n",
        )
        == "y"
    )

    print(f"[red]Using {collection_name}")

    agent.vecdb.set_collection(collection_name, replace=replace)

    task = Task(agent, interactive=False)
    task.run(
        "Can you help me answer some questions, possibly using web search and crawling?"
    )


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/lance-rag-gh-issues.py">
"""
This example lets you ask questions about GitHub-issues for a repo.

LanceRAGTaskCreator.new(agent) takes a LanceDocChatAgent and sets up a
3-agent system with 2 additional agents:
- QueryPlanner that decides a filter, possibly rephrased query, and
  possibly also dataframe-like calculation to answer things like ("highest rated...")

- QueryPlanAnswerCritic: this looks at the QueryPlan and the answer from the RAG agent
  and suggests changes to the QueryPlan if the answer does not look satisfactory

This system combines:
- filtering using LanceDB (sql-like filtering on document fields
- semantic search using LanceDB (vector search on document content)
- Full Text Search using LanceDB (search on document content)
- Pandas-like dataframe calculations (e.g. "highest rated", "most votes", etc.)

Run like this:
    python examples/docqa/lance-rag-gh-issues.py

Optional arguments:
-nc : turn off caching (i.e. don't retrieve cached LLM responses)
-d: debug mode, to show all intermediate results
"""

import pandas as pd
import typer
from rich.prompt import Prompt

from langroid.agent.special.doc_chat_agent import DocChatAgentConfig
from langroid.agent.special.lance_doc_chat_agent import LanceDocChatAgent
from langroid.agent.special.lance_rag.lance_rag_task import LanceRAGTaskCreator
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.parsing.repo_loader import RepoLoader
from langroid.utils.configuration import Settings, set_global
from langroid.utils.system import rmdir
from langroid.vector_store.lancedb import LanceDBConfig

app = typer.Typer()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    # Global settings: debug, cache
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )

    # Configs
    embed_cfg = OpenAIEmbeddingsConfig()

    # Get hithub issues
    ldb_dir = ".lancedb/data/gh-issues"
    rmdir(ldb_dir)
    ldb_cfg = LanceDBConfig(
        cloud=False,
        collection_name="chat-lance-gh-issues",
        storage_path=ldb_dir,
        embedding=embed_cfg,
    )

    cfg = DocChatAgentConfig(
        vecdb=ldb_cfg,
        add_fields_to_content=["state", "year", "month", "assignee", "size"],
    )
    agent = LanceDocChatAgent(cfg)
    repo = Prompt.ask(
        "Enter a GitHub repo name as owner/repo, e.g. jmorganca/ollama",
        default="jmorganca/ollama",
    )
    n_issues = Prompt.ask("How many issues to load?", default="100")

    # load github issues from a repo
    repo_loader = RepoLoader(repo)
    issues = repo_loader.get_issues(k=int(n_issues))
    issue_dicts = [iss.dict() for iss in issues]
    df = pd.DataFrame(issue_dicts)
    metadata_cols = []
    agent.ingest_dataframe(df, content="text", metadata=metadata_cols)

    df_description = agent.df_description

    # inform user about the df_description, in blue
    print(
        f"""
    [blue]Here's a description of the DataFrame that was ingested:
    {df_description}
    """
    )

    task = LanceRAGTaskCreator.new(agent, interactive=False)

    while True:
        question = Prompt.ask("What do you want to know? [q to quit]")
        if question == "q":
            break
        result = task.run(question)
        print(
            f"""
            Here's your answer:
            {result.content}
            """
        )


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/lance-rag-movies.py">
"""
Chat with dataset of IMDB movies.

LanceRAGTaskCreator.new(agent) takes a LanceDocChatAgent and sets up a
3-agent system with 2 additional agents:
- QueryPlanner that decides a filter, possibly rephrased query, and
  possibly also dataframe-like calculation to answer things like ("highest rated...")

- QueryPlanAnswerCritic: this looks at the QueryPlan and the answer from the RAG agent
  and suggests changes to the QueryPlan if the answer does not look satisfactory

This system combines:
- filtering using LanceDB (sql-like filtering on document fields
- semantic search using LanceDB (vector search on document content)
- Full Text Search using LanceDB (search on document content)
- Pandas-like dataframe calculations (e.g. "highest rated", "most votes", etc.)

Run like this:
    python examples/docqa/lance-rag-movies.py

Optional arguments:
-nc : turn off caching (i.e. don't retrieve cached LLM responses)
-d: debug mode, to show all intermediate results
"""

import pandas as pd
import typer
from rich import print
from rich.prompt import Prompt

from langroid.agent.special.doc_chat_agent import DocChatAgentConfig
from langroid.agent.special.lance_doc_chat_agent import LanceDocChatAgent
from langroid.agent.special.lance_rag.lance_rag_task import LanceRAGTaskCreator
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.system import rmdir
from langroid.vector_store.lancedb import LanceDBConfig

app = typer.Typer()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    # Global settings: debug, cache
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            cache_type="fakeredis",
        )
    )

    # Configs
    embed_cfg = OpenAIEmbeddingsConfig()

    # Get movies data
    ldb_dir = ".lancedb/data/imdb-reviews"
    rmdir(ldb_dir)
    ldb_cfg = LanceDBConfig(
        cloud=False,
        collection_name="chat-lance-imdb",
        storage_path=ldb_dir,
        embedding=embed_cfg,
    )

    print(
        """
        [blue]Welcome to the IMDB Movies chatbot!
        This dataset has around 130,000 movie reviews, with these columns:
        
        movie, genre, runtime, certificate, rating, stars, 
        description, votes, director.
        
        To keep things speedy, we'll restrict the dataset to movies
        of a specific genre that you can choose.
        """
    )
    genre = Prompt.ask(
        "Which of these genres would you like to focus on?",
        default="Crime",
        choices=[
            "Action",
            "Adventure",
            "Biography",
            "Comedy",
            "Crime",
            "Documentary",
            "Drama",
            "Fantasy",
            "History",
            "Horror",
            "Music",
            "Musical",
            "Mystery",
            "Romance",
            "Sci-Fi",
            "Sport",
            "Thriller",
            "War",
            "Western",
        ],
    )
    cfg = DocChatAgentConfig(
        vecdb=ldb_cfg,
        add_fields_to_content=["movie", "genre", "certificate", "stars", "rating"],
        filter_fields=["genre", "certificate", "rating"],
    )
    agent = LanceDocChatAgent(cfg)

    # READ IN AND CLEAN THE DATA
    df = pd.read_csv("examples/docqa/data/movies/IMDB.csv")

    def clean_votes(value):
        """Clean the votes column"""
        # Remove commas and convert to integer, if fails return 0
        try:
            return int(value.replace(",", ""))
        except ValueError:
            return 0

    # Clean the 'votes' column
    df["votes"] = df["votes"].fillna("0").apply(clean_votes)

    # Clean the 'rating' column
    df["rating"] = df["rating"].fillna(0.0).astype(float)

    # Replace missing values in all other columns with '??'
    df.fillna("??", inplace=True)
    df["description"].replace("", "unknown", inplace=True)

    # get the rows where 'Crime' is in the genre column
    df = df[df["genre"].str.contains(genre)]

    print(
        f"""
    [blue]There are {df.shape[0]} movies in {genre} genre, hang on while I load them...
    """
    )
    # sample 1000 rows for faster testing
    df = df.sample(1000)

    # INGEST THE DataFrame into the LanceDocChatAgent
    metadata_cols = []
    agent.ingest_dataframe(df, content="description", metadata=metadata_cols)
    df_description = agent.df_description

    # inform user about the df_description, in blue
    print(
        f"""
    [blue]Here's a description of the DataFrame that was ingested:
    {df_description}
    """
    )

    task = LanceRAGTaskCreator.new(agent, interactive=False)

    while True:
        question = Prompt.ask("What do you want to know? [q to quit]")
        if question == "q":
            break
        result = task.run(question)
        print(
            f"""
            Here's your answer:
            {result.content}
            """
        )


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/oai-multi-extract.py">
"""
Two-agent chat with Retrieval-augmented LLM + function-call/tool.
ExtractorAgent (has no access to docs) is tasked with extracting structured
information from a commercial lease document, and must present the terms in
a specific nested JSON format.
DocAgent (has access to the lease) helps answer questions about the lease.
Repeat: WriterAgent --Question--> DocAgent --> Answer

Example:
python3 examples/docqa/chat_multi_extract.py

Use -f option to use OpenAI function calling API instead of Langroid tool.
"""

import json
import os

import typer
from rich import print

import langroid as lr
from langroid.agent.openai_assistant import (
    AssistantTool,
    OpenAIAssistant,
    OpenAIAssistantConfig,
)
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.pydantic_v1 import BaseModel
from langroid.utils.constants import DONE, NO_ANSWER
from langroid.utils.logging import setup_colored_logging

app = typer.Typer()

setup_colored_logging()
os.environ["TOKENIZERS_PARALLELISM"] = "false"


class LeasePeriod(BaseModel):
    start_date: str
    end_date: str


class LeaseFinancials(BaseModel):
    monthly_rent: str
    deposit: str


class Lease(BaseModel):
    """
    Various lease terms.
    Nested fields to make this more interesting/realistic
    """

    period: LeasePeriod
    financials: LeaseFinancials
    address: str


class LeaseMessage(ToolMessage):
    """Tool/function to use to present details about a commercial lease"""

    request: str = "lease_info"
    purpose: str = "Collect information about a Commercial Lease."
    terms: Lease

    def handle(self):
        """Handle this tool-message when the LLM emits it.
        Under the hood, this method is transplated into the OpenAIAssistant class
        as a method with name `lease_info`.
        """
        print(f"DONE! Successfully extracted Lease Info:" f"{self.terms}")
        return DONE + " " + json.dumps(self.terms.dict())


@app.command()
def chat() -> None:
    retriever_cfg = OpenAIAssistantConfig(
        name="LeaseRetriever",
        llm=OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT4o),
        system_message="Answer questions based on the documents provided.",
    )

    retriever_agent = OpenAIAssistant(retriever_cfg)
    retriever_agent.add_assistant_tools([AssistantTool(type="retrieval")])
    retriever_agent.add_assistant_files(["examples/docqa/lease.txt"])

    retriever_task = Task(
        retriever_agent,
        interactive=False,
        done_if_response=[lr.Entity.LLM],
        done_if_no_response=[lr.Entity.LLM],
    )

    extractor_cfg = OpenAIAssistantConfig(
        name="LeaseExtractor",
        llm=OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT4o),
        system_message=f"""
        You have to collect information about a Commercial Lease from a 
        lease contract which you don't have access to. You need to ask
        questions ONE BY ONE to get this information. 
        Once you have all the REQUIRED fields, 
        you have to present it to me using the `lease_info` 
        function/tool (fill in {NO_ANSWER} for slots that you are unable to fill).
        """,
    )
    extractor_agent = OpenAIAssistant(extractor_cfg)
    extractor_agent.enable_message(LeaseMessage, include_defaults=False)

    extractor_task = Task(extractor_agent, interactive=False)
    extractor_task.add_sub_task(retriever_task)
    extractor_task.run()


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/oai-retrieval-2.py">
"""
Use TWO OpenAI Assistants in Langroid's Multi-Agent mode to answer questions:
 - Planner Agent: takes user question, plans, decides how to ask the Retrieval Agent
 - Retrieval Agent: takes the question from the Master Agent, answers based on docs

Run like this:
python3 examples/docqa/oai-retrieval-2.py

"""

import os
import tempfile

import typer
from rich import print
from rich.prompt import Prompt

from langroid.agent.openai_assistant import (
    AssistantTool,
    OpenAIAssistant,
    OpenAIAssistantConfig,
)
from langroid.agent.task import Task
from langroid.agent.tools.recipient_tool import RecipientTool
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.url_loader import URLLoader
from langroid.utils.logging import setup_colored_logging

app = typer.Typer()

setup_colored_logging()
os.environ["TOKENIZERS_PARALLELISM"] = "false"


@app.command()
def chat() -> None:
    reuse = (
        Prompt.ask(
            "Reuse existing assistant, threads if available? (y/n)",
            default="y",
        )
        == "y"
    )

    planner_cfg = OpenAIAssistantConfig(
        name="Planner",
        llm=OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT4o),
        use_cached_thread=reuse,
        use_cached_assistant=reuse,
        system_message="""
        You will receive questions from the user about some docs, 
        but you don't have access to them, but you have a Retriever to help you, since
        they have access to the docs. For each question I send you, decide how you want 
        to ask the Retriever: you can rephrase, decompose or simplify the question and 
        send it to the retriever. Once you think you have the info I need, then send 
        me (the User) a message with your consolidated answer, starting with "ANSWER:"    
        
        Start by greeting the user and asking what they want to know.     
        """,
    )
    planner_agent = OpenAIAssistant(planner_cfg)
    planner_agent.enable_message(RecipientTool)

    retriever_cfg = OpenAIAssistantConfig(
        name="Retriever",
        use_cached_thread=reuse,
        use_cached_assistant=reuse,
        llm=OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT4o),
        system_message="Answer questions based on the documents provided.",
    )

    retriever_agent = OpenAIAssistant(retriever_cfg)

    print("[blue]Welcome to the retrieval chatbot!")
    path = Prompt.ask("Enter a URL or file path")
    # if path is a url, use UrlLoader to get text as a document
    if path.startswith("http"):
        text = URLLoader([path]).load()[0].content
        # save text to a temp file
        with tempfile.NamedTemporaryFile(mode="w", suffix=".txt", delete=False) as f:
            f.write(text)
            f.close()
            # get the filename
            path = f.name
    retriever_agent.add_assistant_tools([AssistantTool(type="retrieval")])
    if path:  # path may be empty if continuing from previous session
        retriever_agent.add_assistant_files([path])

    print("[cyan]Enter x or q to quit")

    planner_task = Task(planner_agent, interactive=True)

    retriever_task = Task(
        retriever_agent,
        interactive=False,
        done_if_response=[Entity.LLM],
        done_if_no_response=[Entity.LLM],
    )
    planner_task.add_sub_task(retriever_task)
    planner_task.run("")


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/oai-retrieval-assistant.py">
"""
Use OpenAI Assistant with Retrieval tool + file to answer questions.

Run like this:
python3 examples/docqa/oai-retrieval-assistant.py

"""

import os
import tempfile

import typer
from rich import print
from rich.prompt import Prompt

from langroid.agent.openai_assistant import (
    AssistantTool,
    OpenAIAssistant,
    OpenAIAssistantConfig,
)
from langroid.agent.task import Task
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.parsing.url_loader import URLLoader
from langroid.utils.logging import setup_colored_logging

app = typer.Typer()

setup_colored_logging()
os.environ["TOKENIZERS_PARALLELISM"] = "false"


@app.command()
def chat() -> None:
    reuse = (
        Prompt.ask(
            "Reuse existing assistant, threads if available? (y/n)",
            default="y",
        )
        == "y"
    )

    cfg = OpenAIAssistantConfig(
        llm=OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT4o),
        use_cached_assistant=reuse,
        use_cached_thread=reuse,
        system_message="Answer questions based on the provided document.",
    )
    agent = OpenAIAssistant(cfg)

    print("[blue]Welcome to the retrieval chatbot!")
    path = Prompt.ask("Enter a URL or file path")
    # if path is a url, use UrlLoader to get text as a document
    if path.startswith("http"):
        text = URLLoader([path]).load()[0].content
        # save text to a temp file
        with tempfile.NamedTemporaryFile(mode="w", suffix=".txt", delete=False) as f:
            f.write(text)
            f.close()
            # get the filename
            path = f.name
    agent.add_assistant_tools([AssistantTool(type="retrieval")])

    if path:  # may be empty if continuing from previous session
        agent.add_assistant_files([path])

    print("[cyan]Enter x or q to quit")

    task = Task(agent)

    task.run("Please help me with questions about the document I provided")


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/rag-local-simple.py">
"""
RAG example using a local LLM, with ollama

Run like this --

python3 examples/docqa/rag-local-simple.py -m <model_name>

For example, you can get good results using:
```
ollama run mistral:7b-instruct-v0.2-q8_0

python3 examples/docqa/rag-local-simple.py -m ollama/mistral:7b-instruct-v0.2-q8_0


See here for more on how to set up a local LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/
"""

import os

import fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig

os.environ["TOKENIZERS_PARALLELISM"] = "false"


def app(m="ollama/mistral:7b-instruct-v0.2-q8_0"):
    # Create the llm config object.
    llm_config = lm.OpenAIGPTConfig(
        # if you comment out `chat_model`, it will default to OpenAI GPT4-turbo
        # chat_model="ollama/mistral:7b-instruct-v0.2-q4_K_M",
        chat_model=m or lm.OpenAIChatModel.GPT4o,
        chat_context_length=32_000,  # set this based on model
        max_output_tokens=100,
        temperature=0.2,
        stream=True,
        timeout=45,
    )

    # Recommended: First test if basic chat works with this llm setup as below:
    # Once this works, then you can try the DocChatAgent
    #
    # agent = lr.ChatAgent(
    #     lr.ChatAgentConfig(
    #         llm=llm
    #     )
    # )
    #
    # agent.llm_response("What is 3 + 4?")
    #
    # task = lr.Task(agent)
    # verify you can interact with this in a chat loop on cmd line:
    # task.run("Concisely answer some questions")

    config = DocChatAgentConfig(
        # default vecdb is qdrantdb
        # using SentenceTransformers/BAAI/bge-large-en-v1.5 embedding model
        llm=llm_config,
        doc_paths=[
            # can be URLS, file-paths, or Folders.
            # File-types: most web-pages, and local pdf, txt, docx
            "https://arxiv.org/pdf/2312.17238.pdf",
        ],
        system_message="""
        Concisely answer my questions about docs. Start by asking me what I want to know.
        """,
    )

    agent = DocChatAgent(config)
    task = lr.Task(agent)
    task.run()


if __name__ == "__main__":
    fire.Fire(app)
</file>

<file path="examples/extract/capitals.py">
"""
Extract structured information from a passage using a tool/function.


python3 examples/extract/capitals.py

"""

from typing import List

from rich import print

import langroid as lr
from langroid.pydantic_v1 import BaseModel


class City(BaseModel):
    name: str
    country: str
    population: int


class CitiesData(BaseModel):
    cities: List[City]


PASSAGE = """
Berlin is the capital of Germany. It has a population of 3,850,809. 
Paris, France's capital, has 2.161 million residents. 
Lisbon is the capital and the largest city of Portugal with the population of 504,718.
"""


class CitiesMessage(lr.agent.ToolMessage):
    """Tool/function to use to extract/present structured capitals info"""

    request: str = "capital_info"
    purpose: str = "Collect information about city <capitals> from a passage"
    capitals: List[CitiesData]

    def handle(self) -> str:
        """Tool handler: Print the info about the capitals.
        Any format errors are intercepted by Langroid and passed to the LLM to fix."""
        print(f"Correctly extracted Capitals Info: {self.capitals}")
        return "DONE"  # terminates task


agent = lr.ChatAgent(
    lr.ChatAgentConfig(
        name="CitiesExtractor",
        use_functions_api=True,
        use_tools=False,
        system_message=f"""
        From the passage below, extract info about city capitals, and present it 
        using the `capital_info` tool/function.
        PASSAGE: {PASSAGE}
        """,
    )
)
# connect the Tool to the Agent, so it can use it to present extracted info
agent.enable_message(CitiesMessage)

# wrap the agent in a task and run it
task = lr.Task(
    agent,
    interactive=False,
)

task.run()
</file>

<file path="examples/extract/extract.py">
"""
Extract structured data from text using function_calling/tools.
Inspired by this W&B example notebook, but goes beyond, i.e. gets slightly
more structured output to include model quality:
https://wandb.ai/darek/llmapps/reports/Using-LLMs-to-Extract-Structured-Data-OpenAI-Function-Calling-in-Action--Vmlldzo0Nzc0MzQ3

Example usage, to use Langroid tool:
python3 examples/basic/extract.py -nc

Use -f option to use OpenAI function calling API instead of Langroid tool.

"""

import json
import textwrap
from typing import List

import typer
from kaggle_text import kaggle_description
from rich import print

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.pydantic_v1 import BaseModel
from langroid.utils.configuration import Settings, set_global
from langroid.utils.logging import setup_colored_logging

app = typer.Typer()

setup_colored_logging()


class MethodQuality(BaseModel):
    name: str
    quality: str


class MethodsList(ToolMessage):
    request: str = "methods_list"
    purpose: str = """
        Make a list of Machine Learning methods and their quality
        """
    methods: List[MethodQuality]
    result: str = ""

    @classmethod
    def examples(cls) -> List["ToolMessage"]:
        return [
            cls(
                methods=[
                    MethodQuality(name="XGBoost", quality="good"),
                    MethodQuality(name="Random Forest", quality="bad"),
                ],
                result="",
            ),
        ]


class ExtractorAgent(ChatAgent):
    def __init__(self, config: ChatAgentConfig):
        super().__init__(config)

    def methods_list(self, message: MethodsList) -> str:
        print(
            f"""
        DONE! Successfully extracted ML Methods list:
        {message.methods}
        """
        )
        return "\n".join(json.dumps(m.dict()) for m in message.methods)


class ExtractorConfig(ChatAgentConfig):
    name = "Extractor"
    debug: bool = False
    conversation_mode = True
    cache: bool = True  # cache results
    gpt4: bool = False  # use GPT-4?
    stream: bool = True  # allow streaming where needed
    max_tokens: int = 10000
    use_tools = False
    use_functions_api = True
    llm: OpenAIGPTConfig = OpenAIGPTConfig(
        type="openai",
        chat_model=OpenAIChatModel.GPT4o,
    )


def chat(config: ExtractorConfig) -> None:
    print(
        textwrap.dedent(
            """
        [blue]Welcome to the basic chatbot!
        Enter x or q to quit
        """
        ).strip()
    )
    agent = ExtractorAgent(config)
    agent.enable_message(
        MethodsList,
        use=True,
        handle=True,
        force=True,
    )

    task = Task(
        agent,
        system_message="""
        You are a machine learning engineer analyzing Kaggle competition solutions.
        Your goal is to create a list of Machine Learning methods and their 
        quality, based on the user's description. 
        The "quality" can be "good" or "bad", based on your understanding of the 
        description.
        The methods must be very short names, not long phrases.
        Don't add any methods not mentioned in the solution description.
        Call the methods_list function or Tool to accomplish this.
        """,
    )
    task.run(kaggle_description)


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    fn_api: bool = typer.Option(False, "--fn_api", "-f", help="use functions api"),
) -> None:
    config = ExtractorConfig(
        use_functions_api=fn_api,
        use_tools=not fn_api,
    )
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
            cache_type="redis",
        )
    )
    chat(config)


if __name__ == "__main__":
    app()
</file>

<file path="examples/extract/pdf-json-flex.py">
"""
Extract an arbitrary json structure from a pdf via markdown.

1. use Langroid's PDF Parser with `marker` library to
   extract content from (pdf) report in markdown format
2. use Langroid Agent equipped with a structured output tool to extract structured data

Run like this: (drop the -m arg to default to GPT4o)

uv run examples/pdf-json-flex.py -f examples/extract/um-financial-report.pdf \
    -m gemini/gemini-2.0-pro-exp-02-05

NOTES:
- this script uses the `marker` library for parsing PDF content,
and to get that to work with langroid, install langroid with the `marker-pdf` extra,
e.g.
uv pip install "langroid[marker-pdf]"
pip install "langroid[marker-pdf]"

- The structured extracted is very simple, consisting of 3 fields: item, year, and value.
  You may need to adapt it to your needs.
"""

import logging
import os
from typing import List

from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import ResultTool
from langroid.parsing.document_parser import DocumentParser
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig
from langroid.pydantic_v1 import BaseModel

logger = logging.getLogger(__name__)


os.environ["TOKENIZERS_PARALLELISM"] = "false"

"""
Agent to extract structured data from a markdown formatted table.
Typically, this markdown formatted content would come from using a parser
that extracted markdown from a pdf report, e.g. using a Langroid PDF Parser.
"""


class JsonData(BaseModel):
    """Data model for arbitrary nested JSON-like structures.

    This model allows for storing any valid JSON data format, including nested objects,
    arrays, primitives, etc.

    """

    class Config:
        extra = "allow"  # Allow any extra fields


class FinalResult(ResultTool):
    data: List[JsonData]


class JsonExtractTool(lr.ToolMessage):
    request: str = "json_extract_tool"
    purpose: str = "To present the <json_data> extracted from a document."

    json_data: List[JsonData]

    def handle(self) -> FinalResult:
        return FinalResult(data=self.json_data)


class JsonExtractorConfig(lr.ChatAgentConfig):
    # placeholder
    name: str = "JsonExtractor"


class JsonExtractor(lr.ChatAgent):
    def __init__(self, config: JsonExtractorConfig):
        super().__init__(config)
        self.config: JsonExtractorConfig = config
        self.enable_message(JsonExtractTool)


def display_json_data(data: List[JsonData]) -> None:
    """Display structured JSON data using Rich's JSON pretty printer.

    Args:
        data: List of JsonData objects to display
    """
    from rich.console import Console
    from rich.json import JSON
    from rich.panel import Panel

    console = Console()

    if not data:
        console.print("[bold red]No data found[/bold red]")
        return

    for i, item in enumerate(data):
        # Convert JsonData to dict, filtering out internal attributes
        item_dict = {k: v for k, v in item.__dict__.items() if not k.startswith("__")}
        # Create a panel for each data item with pretty-printed JSON inside
        json_str = JSON.from_data(item_dict)
        console.print(Panel(json_str, title=f"Item {i+1}", border_style="cyan"))

        # Add some spacing between items
        if i < len(data) - 1:
            console.print("")


def make_json_extractor_task(
    llm_config: lm.OpenAIGPTConfig = lm.OpenAIGPTConfig(
        chat_model=lm.OpenAIChatModel.GPT4o,
    )
):
    agent = JsonExtractor(
        JsonExtractorConfig(
            llm=llm_config,
            handle_llm_no_tool=f"You FORGOT to use the TOOL `{JsonExtractTool.name()}`",
            system_message=f"""
            You are an expert at creating (possibly nested) JSON structures
            from markdown documents.
            
            When you receive a markdown-formatted document, your job is to
            extract the data from the document and present it in a structured
            form using the TOOL `{JsonExtractTool.name()}`.
            """,
        )
    )
    # create task specialized to return FinalResult value
    task = lr.Task(agent, interactive=False, single_round=False)[FinalResult]
    return task


def main(
    filename: str,
    model: str = "",
) -> None:
    #    from langroid.parsing.parser import LLMPdfParserConfig
    parsing_config = ParsingConfig(
        pdf=PdfParsingConfig(
            library="marker",  # see alternative below
            # library="llm-pdf-parser",
            # llm_parser_config=LLMPdfParserConfig(
            #     model_name="gpt-4.1", #"gemini/gemini-2.5-pro-exp-03-25",
            #     split_on_page=False,
            #     max_tokens=7000,
            #     timeout=300,
            # )
        )
    )
    pdf_parser = DocumentParser.create(filename, config=parsing_config)
    content = pdf_parser.get_doc().content
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
    )
    extractor_task = make_json_extractor_task(llm_config)
    result: FinalResult = extractor_task.run(content)
    if result is None:
        logger.warning("No JSON content found.")
        return
    else:
        data = result.data
        logger.warning(f"Found {len(data)} items.")
        display_json_data(data)


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/extract/pdf-json-no-parse.py">
"""
Variant of pdf-json.py, but uses a Multi-modal LM directly to extract info
without the need for any parsing, i.e. instead of:
     pdf -> markdown -> structured output,
we directly use the multi-modal LM to do:
    pdf -> structured output.
With a sufficiently good multi-modal LM, this can have many advantages:
- faster as it avoids parsing to markdown
- higher-fidelity extraction since markdown rendering is inherently lossy,
  and may lose important layout and other information on the
  relationships among elements.

Instead, directly extracting the info using a multi-modal LM is like
asking the model to directly extract what it "sees".

---

Extract financial items from a financial report document, directly
using a multi-modal LM without intermediate parsing steps.

Run like this: (drop the -m arg to default to GPT4o)

uv run examples/pdf-json-no-parse.py -f examples/extract/um-financial-report.pdf \
    -m gemini/gemini-2.0-pro-exp-03-25

- The structured extracted is very simple, consisting of 3 fields: item, year, and value.
  You may need to adapt it to your needs.
"""

import logging
import os
from typing import List

from fire import Fire
from rich.console import Console
from rich.table import Table

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import ResultTool
from langroid.parsing.file_attachment import FileAttachment
from langroid.pydantic_v1 import BaseModel, Field

logger = logging.getLogger(__name__)


os.environ["TOKENIZERS_PARALLELISM"] = "false"

"""
Agent to extract structured data from a markdown formatted table.
Typically, this markdown formatted content would come from using a parser
that extracted markdown from a pdf report, e.g. using a Langroid PDF Parser.
"""


class FinancialData(BaseModel):
    item: str = Field(..., description="Name of the specific financial item")
    year: int = Field(..., description="year of the data item")
    value: str = Field(..., description="value of the item, empty if not applicable")


class FinalResult(ResultTool):
    data: List[FinancialData]


class FinReportTool(lr.ToolMessage):
    request: str = "fin_report_tool"
    purpose: str = """
    To present the <financial_info> 
    extracted from a financial report, in a structured format.
    """

    data: List[FinancialData]

    def handle(self) -> FinalResult:
        return FinalResult(data=self.data)


class ReportExtractorConfig(lr.ChatAgentConfig):
    # placeholder
    name: str = "ReportExtractor"


class ReportReader(lr.ChatAgent):
    def __init__(self, config: ReportExtractorConfig):
        super().__init__(config)
        self.config: ReportExtractorConfig = config
        self.enable_message(FinReportTool)


def make_report_extractor_task(
    llm_config: lm.OpenAIGPTConfig = lm.OpenAIGPTConfig(
        chat_model=lm.OpenAIChatModel.GPT4o,
    )
):
    agent = ReportReader(
        ReportExtractorConfig(
            llm=llm_config,
            handle_llm_no_tool=f"You FORGOT to use the TOOL `{FinReportTool.name()}`",
            system_message=f"""
            You are an expert at financial reports containing various values
            over multiple years, and especially, extracting the 
            financial item, year and value.
            
            When you receive a financial report, your job is to
            extract the financial data from the report and present it in a structured
            form using the TOOL `{FinReportTool.name()}`.
            """,
        )
    )
    # create task specialized to return FinalResult value
    task = lr.Task(agent, interactive=False, single_round=False)[FinalResult]
    return task


def main(
    filename: str,
    model: str = "",
) -> None:
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
    )
    reader_task = make_report_extractor_task(llm_config)
    # If needed, split the PDF into pages, and do the below extraction page by page:
    # from langroid.parsing.pdf_utils import pdf_split_pages
    # pages, tmp_dir = pdf_split_pages(filename)
    # (pages is a list of temp file names -- use each page individually as
    # FileAttachment.from_path(page))
    input = reader_task.agent.create_user_response(
        content=f"""Extract the financial data from the attached file,
        and present the results using the TOOL `{FinReportTool.name()}`.        
        """,
        files=[FileAttachment.from_path(filename)],
    )
    result: FinalResult = reader_task.run(input)
    if result is None:
        logger.warning("No Financial items found.")
        return
    else:
        data = result.data
        logger.warning(f"Found {len(data)} financial items.")

        # Print structured data in a nice table format
        console = Console()
        table = Table(title="Financial Results")

        # Add fixed columns based on PatientData model
        table.add_column("Item", style="cyan")
        table.add_column("Year", style="cyan")
        table.add_column("Value", style="cyan")
        # Add rows from PatientData objects
        for pd in data:
            table.add_row(
                pd.item,
                str(pd.year),
                str(pd.value),
            )

        console.print(table)


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/extract/pdf-json.py">
"""
Extract financial items from a financial report document, in two stages:

1. use Langroid's PDF Parser with `marker` library to
   extract content from (pdf) report in markdown format
2. use Langroid Agent equipped with a structured output tool to extract structured data

Run like this: (drop the -m arg to default to GPT4o)

uv run examples/pdf-json.py -f examples/extract/um-financial-report.pdf \
    -m gemini/gemini-2.0-pro-exp-02-05

NOTES:
- this script uses the `marker` library for parsing PDF content,
and to get that to work with langroid, install langroid with the `marker-pdf` extra,
e.g.
uv pip install "langroid[marker-pdf]"
pip install "langroid[marker-pdf]"

- The structured extracted is very simple, consisting of 3 fields: item, year, and value.
  You may need to adapt it to your needs.
"""

import logging
import os
from typing import List

from fire import Fire
from rich.console import Console
from rich.table import Table

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import ResultTool
from langroid.parsing.document_parser import DocumentParser
from langroid.parsing.parser import LLMPdfParserConfig, ParsingConfig, PdfParsingConfig
from langroid.pydantic_v1 import BaseModel, Field

logger = logging.getLogger(__name__)


os.environ["TOKENIZERS_PARALLELISM"] = "false"

"""
Agent to extract structured data from a markdown formatted table.
Typically, this markdown formatted content would come from using a parser
that extracted markdown from a pdf report, e.g. using a Langroid PDF Parser.
"""


class FinancialData(BaseModel):
    item: str = Field(..., description="Name of the specific financial item")
    year: int = Field(..., description="year of the data item")
    value: str = Field(..., description="value of the item, empty if not applicable")


class FinalResult(ResultTool):
    data: List[FinancialData]


class FinReportTool(lr.ToolMessage):
    request: str = "fin_report_tool"
    purpose: str = """
    To present the <financial_info> 
    extracted from a financial report, in a structured format.
    """

    data: List[FinancialData]

    def handle(self) -> FinalResult:
        return FinalResult(data=self.data)


class ReportExtractorConfig(lr.ChatAgentConfig):
    # placeholder
    name: str = "ReportExtractor"


class ReportReader(lr.ChatAgent):
    def __init__(self, config: ReportExtractorConfig):
        super().__init__(config)
        self.config: ReportExtractorConfig = config
        self.enable_message(FinReportTool)


def make_report_extractor_task(
    llm_config: lm.OpenAIGPTConfig = lm.OpenAIGPTConfig(
        chat_model=lm.OpenAIChatModel.GPT4o,
    )
):
    agent = ReportReader(
        ReportExtractorConfig(
            llm=llm_config,
            handle_llm_no_tool=f"You FORGOT to use the TOOL `{FinReportTool.name()}`",
            system_message=f"""
            You are an expert at financial reports containing various values
            over multiple years, and especially, extracting the 
            financial item, year and value.
            
            When you receive a markdown-formatted financial report, your job is to
            extract the financial data from the report and present it in a structured
            form using the TOOL `{FinReportTool.name()}`.
            """,
        )
    )
    # create task specialized to return FinalResult value
    task = lr.Task(agent, interactive=False, single_round=False)[FinalResult]
    return task


def main(
    filename: str,
    model: str = "",
) -> None:
    parsing_config = ParsingConfig(
        pdf=PdfParsingConfig(
            library="llm-pdf-parser",
            llm_parser_config=LLMPdfParserConfig(
                model_name="gemini/gemini-2.0-flash",
                split_on_page=True,
                max_tokens=7000,
                requests_per_minute=5,
            ),
        )
    )
    pdf_parser = DocumentParser.create(filename, config=parsing_config)
    content = pdf_parser.get_doc().content
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
    )
    reader_task = make_report_extractor_task(llm_config)
    result: FinalResult = reader_task.run(content)
    if result is None:
        logger.warning("No Financial items found.")
        return
    else:
        data = result.data
        logger.warning(f"Found {len(data)} financial items.")

        # Print structured data in a nice table format
        console = Console()
        table = Table(title="Financial Results")

        # Add fixed columns based on PatientData model
        table.add_column("Item", style="cyan")
        table.add_column("Year", style="cyan")
        table.add_column("Value", style="cyan")
        # Add rows from PatientData objects
        for pd in data:
            table.add_row(
                pd.item,
                str(pd.year),
                str(pd.value),
            )

        console.print(table)


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/kg-chat/chat-arangodb-igvf.py">
"""
Single-agent to use to chat with the IGVF ArangoDB knowledge-graph (KG) on cloud.

Make sure to set the ARANGODB_PASSWORD in your environment variables.

Run like this (--model is optional, defaults to GPT4o):

python3 examples/kg-chat/chat-arangodb-igvf.py --model litellm/claude-3-5-sonnet-20241022

If using litellm, remember to install langroid with the litellm extra, e.g.
pip install "langroid[litellm]"

See these guides for info on setting up langroid to use Open/Local LLMs
and other non-OpenAI LLMs:
- https://langroid.github.io/langroid/tutorials/local-llm-setup/
- https://langroid.github.io/langroid/tutorials/non-openai-llms/
"""

import logging
import os
from typing import Optional

from dotenv import load_dotenv
from fire import Fire
from rich import print

import langroid.language_models as lm
from langroid import TaskConfig
from langroid.agent.chat_document import ChatDocument
from langroid.agent.special.arangodb.arangodb_agent import (
    ArangoChatAgent,
    ArangoChatAgentConfig,
    ArangoSettings,
)
from langroid.agent.task import Task
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import SEND_TO

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    force=True,  # Add this
)
root_logger = logging.getLogger()
root_logger.setLevel(logging.ERROR)
logger = logging.getLogger(__name__)


class MyArangoChatAgent(ArangoChatAgent):
    def user_response(
        self,
        msg: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        response = super().user_response(msg)
        if response is not None and response.content == "r":

            self.clear_history(1)  # remove all msgs after system msg
            n_msgs = len(self.message_history)
            assert n_msgs == 1
            logger.warning("Reset Agent history, only system msg remains")
            # prompt user again
            return super().user_response(msg)

        return response


def main(
    debug: bool = False,
    model: str = "",
    no_stream: bool = False,
    nocache: bool = False,
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=nocache,
            stream=not no_stream,
        )
    )
    print(
        """
        [blue]Welcome to ArangoDB Knowledge Graph RAG chatbot!
        Enter x or q to quit at any point.
        """
    )

    load_dotenv()

    url = "https://db.catalog.igvf.org"
    username = "guest"
    db = "igvf"
    pw = os.getenv("ARANGODB_PASSWORD")
    arango_settings = ArangoSettings(
        url=url,
        username=username,
        database=db,
        password=pw,
    )

    arango_agent = MyArangoChatAgent(
        ArangoChatAgentConfig(
            name="Arango",
            chat_mode=True,
            arango_settings=arango_settings,
            prepopulate_schema=True,
            use_functions_api=False,
            use_tools=True,
            database_created=True,
            llm=lm.OpenAIGPTConfig(
                chat_model=model or lm.OpenAIChatModel.GPT4o,
                chat_context_length=128_000,
            ),
            human_prompt=(
                "Human (respond, or x/q to quit, r to reset history, "
                "or hit enter to continue)"
            ),
        )
    )

    task_config = TaskConfig(addressing_prefix=SEND_TO)
    arango_task = Task(
        arango_agent,
        # user not awaited, UNLESS LLM explicitly addresses user via recipient_tool
        interactive=False,
        config=task_config,
    )

    arango_task.run(
        "Can you help with some queries? "
        "Be concise and ask me for clarifications when you're not sure what I mean."
    )

    # The above runs the app in a continuous chat.
    # Alternatively, to set up a task to answer a single query and quit when done:

    # set up arango_agent above with chat_mode=False, set up arango_task as above,
    # then run the task with a single query, e.g.:

    # result = arango_task.run("What is the location of the gene BRCA1?")

    # You can have this in a loop with the user, like so:

    # while True:
    #     query = Prompt.ask("Enter your query")
    #     if query in ["x", "q"]:
    #         break
    #     result = arango_task.run(query)
    #     print(result.content)


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/kg-chat/chat-arangodb.py">
"""
Single-agent to use to chat with an existing ArangoDB knowledge-graph (KG) on cloud,
or locally.
If you have an existing ArangoDB instance, you can
chat with it by specifying its URL, username, password, and database name in the dialog.

Run like this (--model is optional, defaults to GPT4o):

python3 examples/kg-chat/chat-arangodb.py --model litellm/claude-3-5-sonnet-20241022

If using litellm, remember to install langroid with the litellm extra, e.g.
pip install "langroid[litellm]"

See these guides for info on setting up langroid to use Open/Local LLMs
and other non-OpenAI LLMs:
- https://langroid.github.io/langroid/tutorials/local-llm-setup/
- https://langroid.github.io/langroid/tutorials/non-openai-llms/
"""

import logging
import os
from typing import Optional

import typer
from adb_cloud_connector import get_temp_credentials
from arango.client import ArangoClient
from arango_datasets import Datasets
from dotenv import load_dotenv
from rich import print
from rich.console import Console
from rich.prompt import Prompt

import langroid.language_models as lm
from langroid import TaskConfig
from langroid.agent.chat_document import ChatDocument
from langroid.agent.special.arangodb.arangodb_agent import (
    ArangoChatAgent,
    ArangoChatAgentConfig,
    ArangoSettings,
)
from langroid.agent.task import Task
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import SEND_TO

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    force=True,  # Add this
)
root_logger = logging.getLogger()
root_logger.setLevel(logging.ERROR)
logger = logging.getLogger(__name__)

console = Console()
app = typer.Typer()


class MyArangoChatAgent(ArangoChatAgent):
    def user_response(
        self,
        msg: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        response = super().user_response(msg)
        if response is not None and response.content == "r":

            self.clear_history(1)  # remove all msgs after system msg
            n_msgs = len(self.message_history)
            assert n_msgs == 1
            logger.warning("Reset Agent history, only system msg remains")
            # prompt user again
            return super().user_response(msg)

        return response


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=nocache,
            stream=not no_stream,
        )
    )
    print(
        """
        [blue]Welcome to ArangoDB Knowledge Graph RAG chatbot!
        Enter x or q to quit at any point.
        """
    )

    load_dotenv()

    url = Prompt.ask(
        "ArangoDB URL (enter 'got' for Game of Thrones dataset) ",
        default="https://db.catalog.igvf.org",
    )
    username = Prompt.ask(
        "ArangoDB username ",
        default="guest",
    )
    db = Prompt.ask(
        "ArangoDB database ",
        default="igvf",
    )
    pw = Prompt.ask(
        "ArangoDB password ",
        default="",
    )
    pw = pw or os.getenv("ARANGODB_PASSWORD")
    if url == "got":
        print(
            """
            No URL supplied, using Game of Thrones dataset from cloud, see here:
            https://docs.arangodb.com/3.11/components/tools/arango-datasets/
            """
        )
        connection = get_temp_credentials(tutorialName="langroid")
        client = ArangoClient(hosts=connection["url"])

        db = client.db(
            connection["dbName"],
            connection["username"],
            connection["password"],
            verify=True,
        )
        datasets = Datasets(db)
        ArangoChatAgent.cleanup_graph_db(db)
        assert len(datasets.list_datasets()) > 0, "No datasets found"

        DATASET = "GAME_OF_THRONES"  # a small dataset
        info = datasets.dataset_info(DATASET)
        assert info["label"] == DATASET
        datasets.load(DATASET, batch_size=100, preserve_existing=False)
        arango_settings = ArangoSettings(db=db, client=client)
    else:
        arango_settings = ArangoSettings(
            url=url,
            username=username,
            database=db,
            password=pw,
        )

    arango_agent = MyArangoChatAgent(
        ArangoChatAgentConfig(
            name="Arango",
            chat_mode=True,
            arango_settings=arango_settings,
            prepopulate_schema=True,
            use_functions_api=False,
            use_tools=True,
            database_created=True,
            llm=lm.OpenAIGPTConfig(
                chat_model=model or lm.OpenAIChatModel.GPT4o,
                chat_context_length=128_000,
            ),
            human_prompt=(
                "Human (respond, or x/q to quit, r to reset history, "
                "or hit enter to continue)"
            ),
        )
    )

    task_config = TaskConfig(addressing_prefix=SEND_TO)
    arango_task = Task(
        arango_agent,
        # user not awaited, UNLESS LLM explicitly addresses user via recipient_tool
        interactive=False,
        config=task_config,
    )

    arango_task.run(
        "Can you help with some queries? "
        "Be concise and ask me for clarifications when you're not sure what I mean."
    )

    # The above runs the app in a continuous chat.
    # Alternatively, to set up a task to answer a single query and quit when done:

    # set up arango_agent above with chat_mode=False, set up arango_task as above,
    # then run the task with a single query, e.g.:

    # result = arango_task.run("What is the location of the gene BRCA1?")

    # You can have this in a loop with the user, like so:

    # while True:
    #     query = Prompt.ask("Enter your query")
    #     if query in ["x", "q"]:
    #         break
    #     result = arango_task.run(query)
    #     print(result.content)


if __name__ == "__main__":
    app()
</file>

<file path="examples/kg-chat/chat-neo4j.py">
"""
Single-agent to use to chat with an existing Neo4j knowledge-graph (KG) on cloud,
or locally.
If you have an existing Neo4j db on Aura (or possibly elsewhere, e.g. locally), you can
chat with it by specifying its URI, username, password, and database name in the dialog.

You can chose the defaults in the dialog, in which case it will use the
freely available Movies database.

Or,  you can populate
an empty Neo4j db with the cypher queries in the file `movies.cypher` in this folder.

See info on getting setup with Neo4j here:
 `https://github.com/langroid/langroid/blob/main/examples/kg-chat/README.md`

Run like this:
```
python3 examples/kg-chat/chat-neo4j.py
```
"""

import os

import typer
from dotenv import load_dotenv
from rich import print
from rich.console import Console
from rich.prompt import Prompt

import langroid.language_models as lm
from langroid import TaskConfig
from langroid.agent.special.neo4j.neo4j_chat_agent import (
    Neo4jChatAgent,
    Neo4jChatAgentConfig,
    Neo4jSettings,
)
from langroid.agent.task import Task
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import SEND_TO

console = Console()
app = typer.Typer()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=nocache,
            stream=not no_stream,
        )
    )
    print(
        """
        [blue]Welcome to Neo4j Knowledge Graph RAG chatbot!
        Enter x or q to quit at any point.
        """
    )

    load_dotenv()

    uri = Prompt.ask(
        "Neo4j URI ",
        default="neo4j+s://demo.neo4jlabs.com",
    )
    username = Prompt.ask(
        "No4j username ",
        default="movies",
    )
    db = Prompt.ask(
        "Neo4j database ",
        default="movies",
    )
    pw = Prompt.ask(
        "Neo4j password ",
        default="movies",
    )
    pw = pw or os.getenv("NEO4J_PASSWORD")
    neo4j_settings = Neo4jSettings(uri=uri, username=username, database=db, password=pw)

    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=128_000,
    )
    neo4j_config = Neo4jChatAgentConfig(
        neo4j_settings=neo4j_settings,
        llm=llm_config,
        chat_mode=True,
    )

    neo4j_agent = Neo4jChatAgent(neo4j_config)
    task_config = TaskConfig(addressing_prefix=SEND_TO)
    neo4j_task = Task(
        neo4j_agent,
        name="Neo4j",
        # user not awaited, UNLESS LLM explicitly addresses user via recipient_tool
        interactive=False,
        config=task_config,
    )

    neo4j_task.run()


if __name__ == "__main__":
    app()
</file>

<file path="examples/kg-chat/csv-chat.py">
"""
Example showing how to chat with a graph database generated from
csv, tsv, or any other pandas-readable.

This example will automatically generate all the required Cypher queries for Neo4j
to answer user's questions.

This example relies on neo4j. The easiest way to get access to neo4j is by
creating a cloud account at `https://neo4j.com/cloud/platform/aura-graph-database/`

Upon creating the account successfully, neo4j will create a text file that contains
account settings, please provide the following information (uri, username, password) as
described here
`https://github.com/langroid/langroid/tree/main/examples/kg-chat#requirements`

Run like this

python3 examples/kg-chat/csv-chat.py

Optional args:
* -d or --debug to enable debug mode
* -ns or --nostream to disable streaming
* -nc or --nocache to disable caching
* -m or --model to specify a model name

"""

import typer
from dotenv import load_dotenv
from rich import print
from rich.console import Console
from rich.prompt import Prompt

from langroid.agent.special.neo4j.csv_kg_chat import (
    CSVGraphAgent,
    CSVGraphAgentConfig,
)
from langroid.agent.special.neo4j.neo4j_chat_agent import Neo4jSettings
from langroid.agent.task import Task
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.utils.configuration import Settings, set_global

console = Console()
app = typer.Typer()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    tools: bool = typer.Option(
        False, "--tools", "-t", help="use langroid tools instead of function-calling"
    ),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=nocache,
            stream=not no_stream,
        )
    )
    print(
        """
        [blue]Welcome to CSV Knowledge Graph RAG chatbot!
        Enter x or q to quit at any point.
        """
    )

    buid_kg = Prompt.ask(
        "Do you want to build the graph database from a CSV file? (y/n)",
        default="y",
    )
    if buid_kg == "y":
        csv_location = Prompt.ask(
            "Please provide the path/URL to the CSV",
            default="examples/docqa/data/imdb-drama.csv",
        )
    else:
        csv_location = None

    load_dotenv()

    neo4j_settings = Neo4jSettings()

    csv_kg_chat_agent = CSVGraphAgent(
        config=CSVGraphAgentConfig(
            data=csv_location,
            neo4j_settings=neo4j_settings,
            use_tools=tools,
            use_functions_api=not tools,
            llm=OpenAIGPTConfig(
                chat_model=model or OpenAIChatModel.GPT4o,
                chat_context_length=16_000,  # adjust based on model
                timeout=45,
                temperature=0.2,
            ),
        ),
    )

    if buid_kg == "y":
        num_rows = len(csv_kg_chat_agent.df)

        if num_rows > 1000:
            print(
                f"""
                [red]WARNING: The CSV file has {num_rows} rows. Loading this data and 
                generating the graph database will take long time.
                """
            )

            user_input_continue = Prompt.ask(
                "Do you want to continue with the whole dataset? (y/n)",
            )
            if user_input_continue == "n":
                sample_size = int(
                    Prompt.ask(
                        "Please enter the sample size",
                    )
                )
                print(
                    f"""
                    [green]The graph database will be generated for {sample_size} 
                    rows...
                    """
                )
                csv_kg_chat_agent.df = csv_kg_chat_agent.df.sample(n=sample_size)

            elif user_input_continue == "y":
                print(
                    """
                    [green]The graph database will be generated for the whole dataset...
                    """
                )

    csv_kg_chat_task = Task(
        csv_kg_chat_agent,
        name="CSVChatKG",
        interactive=True,
    )

    csv_kg_chat_task.run()


if __name__ == "__main__":
    app()
</file>

<file path="examples/kg-chat/dependency_chatbot.py">
"""
Single-agent to use to chat with a Neo4j knowledge-graph (KG)
that models a dependency graph of Python packages.

User specifies package name
-> agent gets version number and type of package using google search
-> agent builds dependency graph using Neo4j
-> user asks natural language query about dependencies
-> LLM translates to Cypher query to get info from KG
-> Query results returned to LLM
-> LLM translates to natural language response

This example relies on neo4j. The easiest way to get access to neo4j is by
creating a cloud account at `https://neo4j.com/cloud/platform/aura-graph-database/`

Upon creating the account successfully, neo4j will create a text file that contains
account settings, please provide the following information (uri, username, password) as
described here
`https://github.com/langroid/langroid/tree/main/examples/kg-chat#requirements`

The rest of requirements are described in
 `https://github.com/langroid/langroid/blob/main/examples/kg-chat/README.md`

Run like this:
```
python3 examples/kg-chat/dependency_chatbot.py
```
"""

import webbrowser
from pathlib import Path

import typer
from cypher_message import CONSTRUCT_DEPENDENCY_GRAPH
from dotenv import load_dotenv
from pyvis.network import Network
from rich import print
from rich.prompt import Prompt

from langroid import TaskConfig
from langroid.agent.special.neo4j.neo4j_chat_agent import (
    Neo4jChatAgent,
    Neo4jChatAgentConfig,
    Neo4jSettings,
)
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.google_search_tool import GoogleSearchTool
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import NO_ANSWER, SEND_TO

app = typer.Typer()


class DepGraphTool(ToolMessage):
    request = "construct_dependency_graph"
    purpose = f"""Get package <package_version>, <package_type>, and <package_name>.
    For the <package_version>, obtain the recent version, it should be a number. 
    For the <package_type>, return if the package is PyPI or not.
      Otherwise, return {NO_ANSWER}.
    For the <package_name>, return the package name provided by the user.
    ALL strings are in lower case.
    """
    package_version: str
    package_type: str
    package_name: str


class VisualizeGraph(ToolMessage):
    request = "visualize_dependency_graph"
    purpose = """
      Use this tool/function to display the dependency graph.
      """
    package_version: str
    package_type: str
    package_name: str
    query: str


class DependencyGraphAgent(Neo4jChatAgent):
    def construct_dependency_graph(self, msg: DepGraphTool) -> None:
        check_db_exist = (
            "MATCH (n) WHERE n.name = $name AND n.version = $version RETURN n LIMIT 1"
        )
        response = self.read_query(
            check_db_exist, {"name": msg.package_name, "version": msg.package_version}
        )
        if response.success and response.data:
            # self.config.database_created = True
            return "Database Exists"
        else:
            construct_dependency_graph = CONSTRUCT_DEPENDENCY_GRAPH.format(
                package_type=msg.package_type.lower(),
                package_name=msg.package_name,
                package_version=msg.package_version,
            )
            response = self.write_query(construct_dependency_graph)
            if response.success:
                self.config.database_created = True
                return "Database is created!"
            else:
                return f"""
                    Database is not created!
                    Seems the package {msg.package_name} is not found,
                    """

    def visualize_dependency_graph(self, msg: VisualizeGraph) -> str:
        """
        Visualizes the dependency graph based on the provided message.

        Args:
            msg (VisualizeGraph): The message containing the package info.

        Returns:
            str: response indicates whether the graph is displayed.
        """
        # Query to fetch nodes and relationships
        # TODO: make this function more general to return customized graphs
        # i.e, displays paths or subgraphs
        query = """
            MATCH (n)
            OPTIONAL MATCH (n)-[r]->(m)
            RETURN n, r, m
        """

        query_result = self.read_query(query)
        nt = Network(notebook=False, height="750px", width="100%", directed=True)

        node_set = set()  # To keep track of added nodes

        for record in query_result.data:
            # Process node 'n'
            if "n" in record and record["n"] is not None:
                node = record["n"]
                # node_id = node.get("id", None)  # Assuming each node has a unique 'id'
                node_label = node.get("name", "Unknown Node")
                node_title = f"Version: {node.get('version', 'N/A')}"
                node_color = "blue" if node.get("imported", False) else "green"

                # Check if node has been added before
                if node_label not in node_set:
                    nt.add_node(
                        node_label, label=node_label, title=node_title, color=node_color
                    )
                    node_set.add(node_label)

            # Process relationships and node 'm'
            if (
                "r" in record
                and record["r"] is not None
                and "m" in record
                and record["m"] is not None
            ):
                source = record["n"]
                target = record["m"]
                relationship = record["r"]

                source_label = source.get("name", "Unknown Node")
                target_label = target.get("name", "Unknown Node")
                relationship_label = (
                    relationship[1]
                    if isinstance(relationship, tuple) and len(relationship) > 1
                    else "Unknown Relationship"
                )

                # Ensure both source and target nodes are added before adding the edge
                if source_label not in node_set:
                    source_title = f"Version: {source.get('version', 'N/A')}"
                    source_color = "blue" if source.get("imported", False) else "green"
                    nt.add_node(
                        source_label,
                        label=source_label,
                        title=source_title,
                        color=source_color,
                    )
                    node_set.add(source_label)
                if target_label not in node_set:
                    target_title = f"Version: {target.get('version', 'N/A')}"
                    target_color = "blue" if target.get("imported", False) else "green"
                    nt.add_node(
                        target_label,
                        label=target_label,
                        title=target_title,
                        color=target_color,
                    )
                    node_set.add(target_label)

                nt.add_edge(source_label, target_label, title=relationship_label)

        nt.options.edges.font = {"size": 12, "align": "top"}
        nt.options.physics.enabled = True
        nt.show_buttons(filter_=["physics"])

        output_file_path = "neo4j_graph.html"
        nt.write_html(output_file_path)

        # Try to open the HTML file in a browser
        try:
            abs_file_path = str(Path(output_file_path).resolve())
            webbrowser.open("file://" + abs_file_path, new=2)
        except Exception as e:
            print(f"Failed to automatically open the graph in a browser: {e}")


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    tools: bool = typer.Option(
        False, "--tools", "-t", help="use langroid tools instead of function-calling"
    ),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=nocache,
        )
    )
    print(
        """
        [blue]Welcome to Dependency Analysis chatbot!
        Enter x or q to quit at any point.
        """
    )

    load_dotenv()

    neo4j_settings = Neo4jSettings()

    dependency_agent = DependencyGraphAgent(
        config=Neo4jChatAgentConfig(
            chat_mode=True,
            neo4j_settings=neo4j_settings,
            show_stats=False,
            use_tools=tools,
            use_functions_api=not tools,
            llm=OpenAIGPTConfig(
                chat_model=model or OpenAIChatModel.GPT4o,
            ),
        ),
    )

    system_message = f"""You are an expert in Dependency graphs and analyzing them using
    Neo4j. 
    
    FIRST, I'll give you the name of the package that I want to analyze.
    
    THEN, you can also use the `web_search` tool/function to find out information about a package,
      such as version number and package type (PyPi or not). 
    
    If unable to get this info, you can ask me and I can tell you.
    
    DON'T forget to include the package name in your questions. 
      
    After receiving this information, make sure the package version is a number and the
    package type is PyPi.
    THEN ask the user if they want to construct the dependency graph,
    and if so, use the tool/function `construct_dependency_graph` to construct
      the dependency graph. Otherwise, say `Couldn't retrieve package type or version`
      and {NO_ANSWER}.
    After constructing the dependency graph successfully, you will have access to Neo4j 
    graph database, which contains dependency graph.
    You will try your best to answer my questions. Note that:
    1. You can use the tool `get_schema` to get node label and relationships in the
    dependency graph. 
    2. You can use the tool `retrieval_query` to get relevant information from the
      graph database. I will execute this query and send you back the result.
      Make sure your queries comply with the database schema.
    3. Use the `web_search` tool/function to get information if needed.
    To display the dependency graph use this tool `visualize_dependency_graph`.
    """
    task_config = TaskConfig(addressing_prefix=SEND_TO)
    task = Task(
        dependency_agent,
        name="DependencyAgent",
        system_message=system_message,
        # non-interactive but await user ONLY if addressed or LLM sends a non-tool msg,
        # (see the handle_message_fallback method in the agent)
        interactive=False,
        config=task_config,
    )

    dependency_agent.enable_message(DepGraphTool)
    dependency_agent.enable_message(GoogleSearchTool)
    dependency_agent.enable_message(VisualizeGraph)

    task.run()

    # check if the user wants to delete the database
    if dependency_agent.config.database_created:
        if Prompt.ask("[blue] Do you want to delete the database? (y/n)") == "y":
            dependency_agent.remove_database()


if __name__ == "__main__":
    app()
</file>

<file path="examples/kg-chat/DependencyChatbot.ipynb">
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "view-in-github"
   },
   "source": [
    "<a href=\"https://colab.research.google.com/github/langroid/langroid/blob/main/examples/kg-chat/DependencyChatbot.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "M0zyjyKDE_0p"
   },
   "source": [
    "\n",
    "<img width=\"700\" src=\"https://raw.githubusercontent.com/langroid/langroid/main/docs/assets/langroid_neo4j_logos.png\" alt=\"Langroid\">\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4o6uFZwWko7C"
   },
   "source": [
    "# Overview\n",
    "\n",
    "🔥 for those curious about leveraging the power of LLM and knowledge graph in the software supply security domain.\n",
    "In this colab, we unveil the **Dependency Chatbot**, an LLM-powered application, equipped with a suite of specialized tools. It harnesses the power of Neo4j knowledge-graph and LLM for:\n",
    "\n",
    "* crafting queries in Neo4j's native language,\n",
    "* constructing detailed dependency graphs via DepsDev API,\n",
    "* searching the web for broader web-based insights.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zpFtWFn8K-Ui"
   },
   "source": [
    "# Motivation: Software Supply Chain Security\n",
    "\n",
    "This is a rapidly growing field, especially in light of the significant increase in software supply chain attacks. It focuses primarily on understanding and managing the dependencies in your software supply chain. With the rise of open-source and third-party components in software development, the need for supply chain security has become more critical than ever. Organizations are now realizing the importance of vetting and monitoring the components and dependencies they rely on to ensure the integrity and security of their software. As this field continues to evolve, it will be essential for developers and organizations to stay proactive in addressing supply chain vulnerabilities and implementing robust security measures.\n",
    "\n",
    "Managing dependencies starts with the ability to identify direct and transitive dependencies. Normally, this involves obtaining the full dependency graph, and writing custom code to answer questions about dependencies. In this colab, we introduce a far simpler approach with 2 key innovations:\n",
    "- store the dependency graph in a graph-db, specifically neo4j,\n",
    "- use an LLM-powered Agent that translates a user's questions into the query language of neo4j (known as Cypher)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rLgfXQq7DDMJ"
   },
   "source": [
    "# PyPi Package Dependency Chatbot\n",
    "\n",
    "This application combines the power of LLM and Knowledge Graphs (KG) to create a Retrieval-Augmented Generation (RAG) application for improved understanding of dependencies.\n",
    "\n",
    "This application focuses on PyPi packages and relies on [DepsDev](https://deps.dev/) to obtain the dependencies for a given package. More details about this Chatbot can be found [HERE](https://github.com/langroid/langroid/tree/main/examples/kg-chat).\n",
    "\n",
    "## Dependency Chatbot Architecture\n",
    "\n",
    "![Arch](https://github.com/langroid/langroid/blob/main/docs/assets/DepChatbot.png?raw=true)\n",
    "\n",
    "The chatbot comprises one agent `Neo4jChatAgent` that has access to three tools:\n",
    "\n",
    "1.   `GraphSchemaTool`: to get schema of Neo4j knowledge-graph.\n",
    "2.   `CypherRetrievalTool`: to generate cypher queries to get information from Neo4j knowledge-graph (Cypher is the query language for Neo4j).\n",
    "3.   `DepGraphTool`: to build the dependency graph for a given pkg version, using the API at [DepsDev](https://deps.dev/).\n",
    "4.   `GoogleSearchTool`: to find package version and type information. It also can answer other question from the web about other aspects after obtaining the intended information from the dependency graph.\n",
    "\n",
    "\n",
    "\n",
    "## Workflow\n",
    "The Dependency Chatbot's workflow is as follows:\n",
    "\n",
    "\n",
    "1.   The chatbot asks the user to provide the package name.\n",
    "2.   The chatbot tries to identify the version and verify this package is PyPi.\n",
    "3.   The user confirms the package details.\n",
    "4.   The chatbot will construct the dependency graph of the package including transitive dependencies.\n",
    "5.   At this stage, the user can ask the chatbot any question about the dependency graph, such as:\n",
    "  *   What are the packages at level 2?\n",
    "  *   Tell me 3 interesting things about the dependency graph?\n",
    "6.   For some questions that the chatbot can't answer from the the graph, it can use a web search tool to obtain additional information. For example, to identify the package version, the chatbot will use the web search tool.\n",
    "\n",
    "\n",
    "\n",
    "## Implementation\n",
    "We developed this application using the following tools/APIs:\n",
    "\n",
    "*   [Langroid](https://github.com/langroid/langroid): a framework for developling LLM applications.\n",
    "*   [Neo4j](https://neo4j.com/): a graph database management system.\n",
    "*   [Cypher Query Language](): graph query language that lets you retrieve data from the graph. It is like SQL for graphs.\n",
    "*   [DepsDev](https://deps.dev/): Open Source Insights is a service developed and hosted by Google to help developers better understand the structure, construction, and security of open source software packages.\n",
    "\n",
    "\n",
    "## Required environment settings:\n",
    "\n",
    "Before proceeding with the implementation, ensure that you have the necessary environment settings and keys in place.\n",
    "\n",
    "*   `OPENAI_API_KEY`\n",
    "*   GoogleSearchTool requires two keys:\n",
    "    *   `GOOGLE_API_KEY`: [setup a Google API key](https://developers.google.com/custom-search/v1/introduction#identify_your_application_to_google_with_api_key),\n",
    "    *   `GOOGLE_CSE_ID`: [setup a Google Custom Search Engine (CSE) and get the CSE ID](https://developers.google.com/custom-search/docs/tutorial/creatingcse)\n",
    "*    NEO4J ENV:\n",
    "    *   `username`: typically neo4j\n",
    "    *   `password`: your-neo4j-password\n",
    "    *   `uri`: uri-to-access-neo4j-dayabase\n",
    "    *   `database`: typically neo4j\n",
    "\n",
    "    These Neo4j settings will be requested later in this colab\n",
    "    \n",
    "    ```python\n",
    "    neo4j_settings = Neo4jSettings(\n",
    "      uri=\"\",\n",
    "      username=\"neo4j\",\n",
    "      password=\"\",\n",
    "      database=\"neo4j\",\n",
    "    )\n",
    "    ```\n",
    "\n",
    "**NOTE:** You can setup a free account at [Neo4j Aura](https://neo4j.com/cloud/platform/aura-graph-database/) to get access to Neo4j graph database.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "aNbeze7LNiQa"
   },
   "source": [
    "## Install, setup, import"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "k_wFJ06tA_8t"
   },
   "outputs": [],
   "source": [
    "# Silently install Langroid, suppress all output (~2-4 mins)\n",
    "!pip install -q --upgrade langroid &> /dev/null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "XorXx9GbPITC"
   },
   "outputs": [],
   "source": [
    "# Silently install Neo4j, suppress all output\n",
    "!pip install -q langroid[neo4j] &> /dev/null"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TmcOOLLeQC1t"
   },
   "source": [
    "## Environment settings\n",
    "\n",
    "This code will ask the user to provide the `OPENAI_API_KEY`, `GOOGLE_API_KEY`, and `GOOGLE_CSE_ID`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "7T_R8_HWQShi"
   },
   "outputs": [],
   "source": [
    "# OpenAI API Key: Enter your key in the dialog box that will show up below\n",
    "# NOTE: colab often struggles with showing this input box,\n",
    "# if so, simply insert your API key in this cell, though it's not ideal.\n",
    "import os\n",
    "from getpass import getpass\n",
    "\n",
    "os.environ['OPENAI_API_KEY'] = getpass('Enter your OPENAI_API_KEY key:', stream=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "v0qMEBY9XYK2"
   },
   "outputs": [],
   "source": [
    "# Google keys for the web search tool\n",
    "os.environ['GOOGLE_API_KEY'] = getpass('Enter your GOOGLE_API_KEY key:', stream=None)\n",
    "os.environ['GOOGLE_CSE_ID'] = getpass('Enter your GOOGLE_CSE_ID key:', stream=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "z5spJbxjXPKv"
   },
   "outputs": [],
   "source": [
    "# various unfortunate things that need to be done to\n",
    "# control notebook behavior.\n",
    "\n",
    "# (a) output width\n",
    "\n",
    "from IPython.display import HTML, display\n",
    "\n",
    "\n",
    "def set_css():\n",
    "  display(HTML('''\n",
    "  <style>\n",
    "    pre {\n",
    "        white-space: pre-wrap;\n",
    "    }\n",
    "  </style>\n",
    "  '''))\n",
    "get_ipython().events.register('pre_run_cell', set_css)\n",
    "\n",
    "# (b) logging related\n",
    "import logging\n",
    "\n",
    "logging.basicConfig(level=logging.ERROR)\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings('ignore')\n",
    "import logging\n",
    "\n",
    "for logger_name in logging.root.manager.loggerDict:\n",
    "    logger = logging.getLogger(logger_name)\n",
    "    logger.setLevel(logging.ERROR)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "mJPl4mJ4Sg4r"
   },
   "outputs": [],
   "source": [
    "from langroid.agent.special.neo4j.neo4j_chat_agent import (\n",
    "  Neo4jChatAgent,\n",
    "  Neo4jChatAgentConfig,\n",
    "  Neo4jSettings,\n",
    ")\n",
    "from langroid.agent.task import Task\n",
    "from langroid.agent.tool_message import ToolMessage\n",
    "from langroid.agent.tools.google_search_tool import GoogleSearchTool\n",
    "from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig\n",
    "from langroid.utils.constants import NO_ANSWER"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Smezh1PUG3DD"
   },
   "source": [
    "## Define the tools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 17
    },
    "id": "O_nbZciITsYq",
    "outputId": "0e4e00e1-0f92-40dc-adfa-d1b3d9234207"
   },
   "outputs": [],
   "source": [
    "# Define the tool `DepGraphTool` that will construct the dpendency graph\n",
    "# and answer user's questions\n",
    "class DepGraphTool(ToolMessage):\n",
    "    request = \"construct_dependency_graph\"\n",
    "    purpose = f\"\"\"Get package <package_version>, <package_type>, and <package_name>.\n",
    "    For the <package_version>, obtain the recent version, it should be a number.\n",
    "    For the <package_type>, return if the package is PyPI or not.\n",
    "      Otherwise, return {NO_ANSWER}.\n",
    "    For the <package_name>, return the package name provided by the user.\n",
    "    ALL strings are in lower case.\n",
    "    \"\"\"\n",
    "    package_version: str\n",
    "    package_type: str\n",
    "    package_name: str\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "SZMj3KFJTzHx"
   },
   "outputs": [],
   "source": [
    "# Defining the class of the `DependencyGraphAgent`\n",
    "class DependencyGraphAgent(Neo4jChatAgent):\n",
    "    def construct_dependency_graph(self, msg: DepGraphTool) -> None:\n",
    "        check_db_exist = (\n",
    "            \"MATCH (n) WHERE n.name = $name AND n.version = $version RETURN n LIMIT 1\"\n",
    "        )\n",
    "        response = self.read_query(\n",
    "            check_db_exist, {\"name\": msg.package_name, \"version\": msg.package_version}\n",
    "        )\n",
    "        if response.success and response.data:\n",
    "            # self.config.database_created = True\n",
    "            return \"Database Exists\"\n",
    "        else:\n",
    "            construct_dependency_graph = CONSTRUCT_DEPENDENCY_GRAPH.format(\n",
    "                package_type=msg.package_type.lower(),\n",
    "                package_name=msg.package_name,\n",
    "                package_version=msg.package_version,\n",
    "            )\n",
    "            if self.write_query(construct_dependency_graph):\n",
    "                self.config.database_created = True\n",
    "                return \"Database is created!\"\n",
    "            else:\n",
    "                return f\"\"\"\n",
    "                    Database is not created!\n",
    "                    Seems the package {msg.package_name} is not found,\n",
    "                    \"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "3-JuJ_rBRWse"
   },
   "outputs": [],
   "source": [
    "# CONSTRUCT_DEPENDENCY_GRAPH is the Cypher query that will be used for constructing the dependency graph\n",
    "CONSTRUCT_DEPENDENCY_GRAPH = \"\"\"\n",
    "        with \"{package_type}\" as system, \"{package_name}\" as name, \"{package_version}\" as version\n",
    "\n",
    "        call apoc.load.json(\"https://api.deps.dev/v3alpha/systems/\"+system+\"/packages/\"\n",
    "                            +name+\"/versions/\"+version+\":dependencies\")\n",
    "        yield value as r\n",
    "\n",
    "        call {{ with r\n",
    "                unwind r.nodes as package\n",
    "                merge (p:Package:PyPi {{name: package.versionKey.name, version: package.versionKey.version}})\n",
    "                return collect(p) as packages\n",
    "        }}\n",
    "        call {{ with r, packages\n",
    "            unwind r.edges as edge\n",
    "            with packages[edge.fromNode] as from, packages[edge.toNode] as to, edge\n",
    "            merge (from)-[rel:DEPENDS_ON]->(to) ON CREATE SET rel.requirement\n",
    "            = edge.requirement\n",
    "            return count(*) as numRels\n",
    "        }}\n",
    "\n",
    "        match (root:Package:PyPi) where root.imported is null\n",
    "        set root.imported = true\n",
    "        with \"{package_type}\" as system, root.name as name, root.version as version\n",
    "        call apoc.load.json(\"https://api.deps.dev/v3alpha/systems/\"+system+\"/packages/\"\n",
    "                            +name+\"/versions/\"+version+\":dependencies\")\n",
    "        yield value as r\n",
    "\n",
    "        call {{ with r\n",
    "                unwind r.nodes as package\n",
    "                merge (p:Package:PyPi {{name: package.versionKey.name, version: package.versionKey.version}})\n",
    "                return collect(p) as packages\n",
    "        }}\n",
    "        call {{ with r, packages\n",
    "                unwind r.edges as edge\n",
    "                with packages[edge.fromNode] as from, packages[edge.toNode] as to, edge\n",
    "                merge (from)-[rel:DEPENDS_ON]->(to) ON CREATE SET\n",
    "                rel.requirement = edge.requirement\n",
    "                return count(*) as numRels\n",
    "        }}\n",
    "        return size(packages) as numPackages, numRels\n",
    "        \"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ER3SGX_pLKkM"
   },
   "source": [
    "## Define the dependency agent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "wAeZ_-SwTBzb"
   },
   "outputs": [],
   "source": [
    "# We also need to provide Neo4j environment variables before defining the `dependency_agent`\n",
    "neo4j_settings = Neo4jSettings(\n",
    "    uri=\"\",\n",
    "    username=\"neo4j\",\n",
    "    password=\"\",\n",
    "    database=\"neo4j\",\n",
    ")\n",
    "\n",
    "dependency_agent = DependencyGraphAgent(\n",
    "        config=Neo4jChatAgentConfig(\n",
    "            neo4j_settings=neo4j_settings,\n",
    "            use_tools=True,\n",
    "            use_functions_api=False,\n",
    "            llm=OpenAIGPTConfig(\n",
    "                chat_model=OpenAIChatModel.GPT4_TURBO,\n",
    "            ),\n",
    "        ),\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wRdR2EAaKSWH"
   },
   "source": [
    "## Define the task"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "gZ1QADohUH9N"
   },
   "outputs": [],
   "source": [
    "# Define the dependency task that will orchestrate the work for the `dependency_agent`\n",
    "system_message = f\"\"\"You are an expert in Dependency graphs and analyzing them using\n",
    "    Neo4j.\n",
    "\n",
    "    FIRST, I'll give you the name of the package that I want to analyze.\n",
    "\n",
    "    THEN, you can also use the `web_search` tool/function to find out information about a package,\n",
    "      such as version number and package type (PyPi or not).\n",
    "\n",
    "    If unable to get this info, you can ask me and I can tell you.\n",
    "\n",
    "    DON'T forget to include the package name in your questions.\n",
    "\n",
    "    After receiving this infomration, make sure the package version is a number and the\n",
    "    package type is PyPi.\n",
    "    THEN ask the user if they want to construct the dependency graph,\n",
    "    and if so, use the tool/function `construct_dependency_graph` to construct\n",
    "      the dependency graph. Otherwise, say `Couldn't retrieve package type or version`\n",
    "      and {NO_ANSWER}.\n",
    "    After constructing the dependency graph successfully, you will have access to Neo4j\n",
    "    graph database, which contains dependency graph.\n",
    "    You will try your best to answer my questions. Note that:\n",
    "    1. You can use the tool `get_schema` to get node label and relationships in the\n",
    "    dependency graph.\n",
    "    2. You can use the tool `retrieval_query` to get relevant information from the\n",
    "      graph database. I will execute this query and send you back the result.\n",
    "      Make sure your queries comply with the database schema.\n",
    "    3. Use the `web_search` tool/function to get information if needed.\n",
    "    \"\"\"\n",
    "\n",
    "task = Task(\n",
    "    dependency_agent,\n",
    "    name=\"DependencyAgent\",\n",
    "    system_message=system_message,\n",
    ")\n",
    "\n",
    "dependency_agent.enable_message(DepGraphTool)\n",
    "dependency_agent.enable_message(GoogleSearchTool)\n",
    "task.set_color_log(enable=False)\n",
    "task.run()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "include_colab_link": true,
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "name": "python3"
  },
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
</file>

<file path="examples/kg-chat/text-kg-triplets.py">
"""
Example showing how to chat with a graph database generated from
unstructured data.

This example will automatically:
- create triplets that represent various entities and relationships from the text
- generate the cypher query to populate the triplets in the graph database
- generate all the required Cypher queries for Neo4j to answer user's questions.

This example relies on neo4j. The easiest way to get access to neo4j is by
creating a cloud account at `https://neo4j.com/cloud/platform/aura-graph-database/`

Upon creating the account successfully, neo4j will create a text file that contains
account settings, please provide the following information (uri, username, password) as
described here
`https://github.com/langroid/langroid/tree/main/examples/kg-chat#requirements`

Run like this

python3 examples/kg-chat/text-kg-triplets.py

Optional args:
* -d or --debug to enable debug mode
* -nc or --nocache to disable caching
* -m or --model to specify a model name

"""

import typer
from dotenv import load_dotenv
from rich import print

import langroid as lr
import langroid.language_models as lm
from langroid.agent.special.neo4j.neo4j_chat_agent import (
    Neo4jChatAgent,
    Neo4jChatAgentConfig,
    Neo4jSettings,
)
from langroid.utils.configuration import Settings, set_global

app = typer.Typer()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=nocache,
        )
    )
    print(
        """
        [blue]Welcome to the Text-to-KG chatbot!
        Enter x or q to quit at any point.[/blue]
        """
    )

    load_dotenv()

    # Look inside Neo4jSettings and explicit set each param based on your Neo4j instance
    neo4j_settings = Neo4jSettings(database="neo4j")

    system_message = """
        You are an information representation expert, and you are especially 
        knowledgeable about representing information in a Knowledge Graph such as Neo4j
        based on text data.
        
        When the user gives you a TEXT and CURRENT SCHEMA, your task is to generate 
        triplets from the TEXT and then USE the approporiate function/tool to
        create the entities/relationships based on the generated triplets. 
        Take into account the CURRENT SCHEMA:
        1. If the CURRENT SCHEMA is empty, you should INFER the triplets from the TEXT.
        2. If the CURRENT SCHEMA is not empty, INFER the triplets by considering the 
        CURRENT SCHEMA. Importantly, SEE IF YOU CAN REUSE EXISTING 
        ENTITIES/RELATIONSHIPS and create NEW ONES ONLY IF NECESSARY.

        Each triplet is a tuple of the form `(subject, relationship, object)`.
        Here is an example how you should infer triplets from the TEXT:
        ```
        TEXT: "Albert Einstein, born in Ulm, won the Nobel Prize in Physics in 1921."
        Triplets:
        (Albert Einstein, born in, Ulm)
        (Albert Einstein, won, Nobel Prize in Physics)
        (Nobel Prize in Physics, awarded in, 1921)
        ```
        SEND `DONE` after successfuly converting the triplets to a Knowledge graph.
        """

    config = Neo4jChatAgentConfig(
        name="TextNeo",
        system_message=system_message,
        neo4j_settings=neo4j_settings,
        show_stats=False,
        llm=lm.OpenAIGPTConfig(
            chat_model=model or lm.OpenAIChatModel.GPT4o,
        ),
    )

    agent = Neo4jChatAgent(config=config)

    TEXT = """
    Apple Inc. (formerly Apple Computer, Inc.) is an American multinational technology 
    company headquartered in Cupertino, California, in Silicon Valley. 
    It designs, develops, and sells consumer electronics, computer software, 
    and online services. Devices include the iPhone, iPad, Mac, Apple Watch, and 
    Apple TV; operating systems include iOS and macOS; and software applications and 
    services include iTunes, iCloud, and Apple Music.

    As of March 2023, Apple is the world's largest company by market capitalization.[6] 
    In 2022, it was the largest technology company by revenue, with US$394.3 billion.[7] 
    As of June 2022, Apple was the fourth-largest personal computer vendor by unit sales, 
    the largest manufacturing company by revenue, and the second-largest 
    manufacturer of mobile phones in the world. It is one of the Big Five American 
    information technology companies, alongside Alphabet (the parent company of Google), 
    Amazon, Meta (the parent company of Facebook), and Microsoft.    
    """

    CURRENT_SCHEMA = ""

    task = lr.Task(
        agent,
        interactive=True,
        single_round=False,
    )
    task.run(
        f"""
    TEXT: {TEXT}
    
    CURRENT SCHEMA: {CURRENT_SCHEMA}
    """
    )

    curr_schema = agent.get_schema(None)
    print(f"SCHEMA: {curr_schema}")

    # now feed in the schema to the next run, with new text

    TEXT = """
    Apple was founded as Apple Computer Company on April 1, 1976, to produce and market 
    Steve Wozniak's Apple I personal computer. The company was incorporated by Wozniak 
    and Steve Jobs in 1977. Its second computer, the Apple II, became a best seller as 
    one of the first mass-produced microcomputers. Apple introduced the Lisa in 1983 and 
    the Macintosh in 1984, as some of the first computers to use a graphical user 
    interface and a mouse.
    """

    task.run(
        f"""
        TEXT: {TEXT}

        CURRENT SCHEMA: {curr_schema}
        """
    )
    updated_schema = agent.get_schema(None)
    print(f"UPDATED SCHEMA: {updated_schema}")

    # We can now ask a question that can be answered based on the schema

    config = Neo4jChatAgentConfig(
        name="TextNeoQA",
        system_message="""
        You will get a question about some information that is represented within
        a Neo4j graph database. You will use the `retrieval_query` tool/function to
        generate a Cypher query that will answer the question. Do not explain
        your query, just present it using the `retrieval_query` tool/function.
        """,
        neo4j_settings=neo4j_settings,
        show_stats=False,
        llm=lm.OpenAIGPTConfig(
            chat_model=model or lm.OpenAIChatModel.GPT4o,
        ),
    )

    agent = Neo4jChatAgent(config=config)

    task = lr.Task(agent)

    print("[blue] Now you can ask questions ")

    task.run()


if __name__ == "__main__":
    app()
</file>

<file path="examples/kg-chat/text-kg.py">
"""
Example showing how to chat with a graph database generated from
unstructured data.

This example will automatically:
- create triplets that represent various entities and relationships from the text
- generate the cypher query to populate the triplets in the graph database
- generate all the required Cypher queries for Neo4j to answer user's questions.

This example relies on neo4j. The easiest way to get access to neo4j is by
creating a cloud account at `https://neo4j.com/cloud/platform/aura-graph-database/`

Upon creating the account successfully, neo4j will create a text file that contains
account settings, please provide the following information (uri, username, password) as
described here
`https://github.com/langroid/langroid/tree/main/examples/kg-chat#requirements`

Run like this

python3 examples/kg-chat/text-kg.py

Optional args:
* -d or --debug to enable debug mode
* -nc or --nocache to disable caching
* -m or --model to specify a model name

"""

import typer
from dotenv import load_dotenv
from rich import print

import langroid as lr
import langroid.language_models as lm
from langroid.agent.special.neo4j.neo4j_chat_agent import (
    Neo4jChatAgent,
    Neo4jChatAgentConfig,
    Neo4jSettings,
)
from langroid.utils.configuration import Settings, set_global

app = typer.Typer()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=nocache,
        )
    )
    print(
        """
        [blue]Welcome to the Text-to-KG chatbot!
        Enter x or q to quit at any point.[/blue]
        """
    )

    load_dotenv()

    # Look inside Neo4jSettings and explicitly
    # set each param (including database) based on your Neo4j instance
    neo4j_settings = Neo4jSettings(database="neo4j")

    config = Neo4jChatAgentConfig(
        name="TextNeo",
        system_message="""
        You are an information representation expert, and you are especially 
        knowledgeable about representing information in a Knowledge Graph such as Neo4j.        
        When the user gives you a TEXT and the CURRENT SCHEMA (possibly empty), 
        your task is to generate a Cypher query that will add the entities/relationships
        from the TEXT to the Neo4j database, taking the CURRENT SCHEMA into account.
        In particular, SEE IF YOU CAN REUSE EXISTING ENTITIES/RELATIONSHIPS,
        and create NEW ONES ONLY IF NECESSARY.
        
        To present the Cypher query, you can use the `retrieval_query` tool/function        
        """,
        neo4j_settings=neo4j_settings,
        show_stats=False,
        llm=lm.OpenAIGPTConfig(
            chat_model=model or lm.OpenAIChatModel.GPT4o,
        ),
    )

    agent = Neo4jChatAgent(config=config)

    TEXT = """
    Apple Inc. (formerly Apple Computer, Inc.) is an American multinational technology 
    company headquartered in Cupertino, California, in Silicon Valley. 
    It designs, develops, and sells consumer electronics, computer software, 
    and online services. Devices include the iPhone, iPad, Mac, Apple Watch, and 
    Apple TV; operating systems include iOS and macOS; and software applications and 
    services include iTunes, iCloud, and Apple Music.

    As of March 2023, Apple is the world's largest company by market capitalization.[6] 
    In 2022, it was the largest technology company by revenue, with US$394.3 billion.[7] 
    As of June 2022, Apple was the fourth-largest personal computer vendor by unit sales, 
    the largest manufacturing company by revenue, and the second-largest 
    manufacturer of mobile phones in the world. It is one of the Big Five American 
    information technology companies, alongside Alphabet (the parent company of Google), 
    Amazon, Meta (the parent company of Facebook), and Microsoft.    
    """

    CURRENT_SCHEMA = ""

    task = lr.Task(
        agent,
        interactive=True,
        single_round=False,
    )
    task.run(
        f"""
    TEXT: {TEXT}
    
    CURRENT SCHEMA: {CURRENT_SCHEMA}
    """
    )

    curr_schema = agent.get_schema(None)
    print(f"SCHEMA: {curr_schema}")

    # now feed in the schema to the next run, with new text

    TEXT = """
    Apple was founded as Apple Computer Company on April 1, 1976, to produce and market 
    Steve Wozniak's Apple I personal computer. The company was incorporated by Wozniak 
    and Steve Jobs in 1977. Its second computer, the Apple II, became a best seller as 
    one of the first mass-produced microcomputers. Apple introduced the Lisa in 1983 and 
    the Macintosh in 1984, as some of the first computers to use a graphical user 
    interface and a mouse.
    """

    task.run(
        f"""
        TEXT: {TEXT}

        CURRENT SCHEMA: {curr_schema}
        """
    )
    updated_schema = agent.get_schema(None)
    print(f"UPDATED SCHEMA: {updated_schema}")

    # We can now ask a question that can be answered based on the schema

    config = Neo4jChatAgentConfig(
        name="TextNeoQA",
        system_message="""
        You will get a question about some information that is represented within
        a Neo4j graph database. You will use the `retrieval_query` tool/function to
        generate a Cypher query that will answer the question. Do not explain
        your query, just present it using the `retrieval_query` tool/function.
        """,
        neo4j_settings=neo4j_settings,
        show_stats=False,
        llm=lm.OpenAIGPTConfig(
            chat_model=model or lm.OpenAIChatModel.GPT4o,
        ),
    )

    agent = Neo4jChatAgent(config=config)

    task = lr.Task(agent)

    print("[blue] Now you can ask questions ")

    task.run()


if __name__ == "__main__":
    app()
</file>

<file path="examples/langdb/langdb_chat_agent_tool.py">
"""
A simple example of a Langroid Agent equipped with a Tool/function-calling that uses LangDB.

The Agent has a "secret" list of numbers in "mind", and the LLM's task is to
find the smallest number in the list. The LLM can make use of the ProbeTool
which takes a number as argument. The agent's `probe` method handles this tool,
and returns the number of numbers in the list that are less than or equal to the
number in the ProbeTool message.

This example demonstrates how to use LangDB with custom headers like x-label, x-thread-id, 
and x-run-id when using a Langroid agent with tools.

Run as follows:

python3 examples/langdb/langdb_chat_agent_tool.py

For more explanation see
[the Getting Started guide](https://langroid.github.io/langroid/quick-start/chat-agent-tool/).
"""

import uuid

import typer
from rich import print

import langroid as lr
from langroid.language_models.openai_gpt import LangDBParams, OpenAIGPTConfig
from langroid.pydantic_v1 import BaseSettings

app = typer.Typer()

lr.utils.logging.setup_colored_logging()


class ProbeTool(lr.agent.ToolMessage):
    request: str = "probe"
    purpose: str = """
        To find how many numbers in my list are less than or equal to  
        the <number> you specify.
        """
    number: int


class SpyGameAgent(lr.ChatAgent):
    def __init__(self, config: lr.ChatAgentConfig):
        super().__init__(config)
        self.numbers = [3, 4, 8, 11, 15]

    def probe(self, msg: ProbeTool) -> str:
        # return how many numbers in self.numbers are less or equal to msg.number
        return str(len([n for n in self.numbers if n <= msg.number]))


class CLIOptions(BaseSettings):
    fn_api: bool = False  # whether to use OpenAI's function-calling


def chat(opts: CLIOptions) -> None:
    print(
        """
        [blue]Welcome to the number guessing game!
        Enter x or q to quit
        """
    )

    # Generate UUIDs for run_id and thread_id
    run_id = str(uuid.uuid4())
    thread_id = str(uuid.uuid4())

    print(f"run_id: {run_id}, thread_id: {thread_id}")

    # Create a LangDB model configuration
    # Make sure LANGDB_API_KEY and LANGDB_PROJECT_ID are set in your environment

    langdb_config = OpenAIGPTConfig(
        chat_model="langdb/openai/gpt-4o-mini",  # Using LangDB model
        langdb_params=LangDBParams(
            label="langroid-agent-tool",
            run_id=run_id,
            thread_id=thread_id,
            # project_id is set via env var LANGDB_PROJECT_ID
        ),
    )

    print(f"Using model: {langdb_config.chat_model}")
    print(f"Headers: {langdb_config.headers}")

    spy_game_agent = SpyGameAgent(
        lr.ChatAgentConfig(
            name="Spy",
            llm=langdb_config,
            vecdb=None,
            use_tools=not opts.fn_api,
            use_functions_api=opts.fn_api,
        )
    )

    spy_game_agent.enable_message(ProbeTool)
    task = lr.Task(
        spy_game_agent,
        system_message="""
            I have a list of numbers between 1 and 20.
            Your job is to find the smallest of them.
            To help with this, you can give me a number and I will
            tell you how many of my numbers are equal or less than your number.
            Once you have found the smallest number,
            you can say DONE and report your answer.
        """,
    )
    task.run()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    fn_api: bool = typer.Option(False, "--fn_api", "-f", help="use functions api"),
) -> None:
    # Set up settings
    lr.utils.configuration.set_global(
        lr.utils.configuration.Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    chat(CLIOptions(fn_api=fn_api))


if __name__ == "__main__":
    app()
</file>

<file path="examples/langdb/langdb_custom_headers.py">
"""
Example showing how to use custom headers with LangDB models.

This example demonstrates how to set custom headers like x-label, x-thread-id, and x-run-id
when using LangDB. These headers are specific to LangDB and won't have any effect with other providers.
"""

from uuid import uuid4

from langroid.language_models.openai_gpt import LangDBParams, OpenAIGPT, OpenAIGPTConfig
from langroid.utils.configuration import Settings, set_global

# Set up settings
settings = Settings(debug=True)
set_global(settings)


def main():
    run_id = str(uuid4())
    thread_id = str(uuid4())

    print(f"run_id: {run_id}, thread_id: {thread_id}")
    # Create a LangDB model configuration
    # Make sure LANGDB_API_KEY and LANGDB_PROJECT_ID are set in your environment
    langdb_config = OpenAIGPTConfig(
        chat_model="langdb/openai/gpt-4o-mini",
        langdb_params=LangDBParams(
            label="langroid", run_id=run_id, thread_id=thread_id
        ),
    )

    print(f"Using model: {langdb_config.chat_model}")

    # Create the model
    langdb_model = OpenAIGPT(langdb_config)

    # Use the model
    response = langdb_model.chat(
        messages="Tell me a short joke about programming", max_tokens=100
    )

    print(f"Response: {response.message}")


if __name__ == "__main__":
    main()
</file>

<file path="examples/mcp/biomcp.py">
"""
Simple example of using the BioMCP server.

https://github.com/genomoncology/biomcp

The server offers several tools, and we can enable ALL of them to be used
by a Langroid agent.

Run like this:

    uv run examples/mcp/biomcp.py --model gpt-4.1-mini

"""

from fastmcp.client.transports import StdioTransport
from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp.fastmcp_client import get_tools_async
from langroid.mytypes import NonToolAction


async def main(model: str = ""):
    transport = StdioTransport(
        command="uv", args=["run", "--with", "biomcp-python", "biomcp", "run"]
    )
    all_tools = await get_tools_async(transport)

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            # forward to user when LLM doesn't use a tool
            handle_llm_no_tool=NonToolAction.FORWARD_USER,
            llm=lm.OpenAIGPTConfig(
                chat_model=model or "gpt-4.1-mini",
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
        )
    )

    # enable the agent to use all tools
    agent.enable_message(all_tools)
    # make task with interactive=False =>
    # waits for user only when LLM doesn't use a tool
    task = lr.Task(agent, interactive=False)
    await task.run_async(
        "Based on the TOOLs available to you, greet the user and"
        "tell them what kinds of help you can provide."
    )


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/mcp/exa-web-search.py">
"""
Simple example of using the Exa Web Search MCP Server to
answer questions using web-search.

Exa MCP Server: https://docs.exa.ai/examples/exa-mcp

Run like this (omitting the `--model` argument will use the default GPT-4.1-Mini):

    uv run examples/mcp/exa-web-search --model ollama/qwen2.5

"""

import os

from fastmcp.client.transports import NpxStdioTransport
from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp import mcp_tool
from langroid.mytypes import NonToolAction

transport = NpxStdioTransport(
    package="exa-mcp-server",
    env_vars=dict(EXA_API_KEY=os.getenv("EXA_API_KEY")),
)


# Illustrating how we can:
# - use the MCP tool decorator to create a Langroid ToolMessage subclass
# - override the handle_async() method to customize the output, sent to the LLM


@mcp_tool(transport, "web_search_exa")
class ExaSearchTool(lr.ToolMessage):
    async def handle_async(self):
        result: str = await self.call_tool_async()
        return f"""
        Below are the results of the web search:
        
        <WebSearchResult>
        {result}
        </WebSearchResult>
        
        Use these results to answer the user's original question.
        """


async def main(model: str = ""):
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            # forward to user when LLM doesn't use a tool
            handle_llm_no_tool=NonToolAction.FORWARD_USER,
            llm=lm.OpenAIGPTConfig(
                chat_model=model or "gpt-4.1-mini",
                max_output_tokens=1000,
                # this defaults to True, but we set it to False so we can see output
                async_stream_quiet=False,
            ),
        )
    )

    # enable the agent to use the web-search tool
    agent.enable_message(ExaSearchTool)
    # make task with interactive=False =>
    # waits for user only when LLM doesn't use a tool
    task = lr.Task(agent, interactive=False)
    await task.run_async()


if __name__ == "__main__":
    import asyncio

    def run_main(**kwargs) -> None:
        """Run the async main function with a proper event loop.

        Args:
            **kwargs: Keyword arguments to pass to the main function.
        """
        asyncio.run(main(**kwargs))

    Fire(run_main)
</file>

<file path="examples/mcp/gitmcp.py">
"""
Simple example of using the GitMCP server to "chat" about a GitHub repository.

https://github.com/idosal/git-mcp

The server offers several tools, and we can enable ALL of them to be used
by a Langroid agent.

Run like this (-m model optional; defaults to gpt-4.1-mini):

    uv run examples/mcp/gitmcp.py -m ollama/qwen2.5-coder:32b

"""

from textwrap import dedent
from typing import List

from fastmcp.client.transports import SSETransport
from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp.fastmcp_client import get_tools_async
from langroid.agent.tools.orchestration import SendTool
from langroid.pydantic_v1 import Field


def get_gitmcp_url() -> str:
    from rich.console import Console
    from rich.prompt import Prompt

    console = Console()
    import re

    short_pattern = re.compile(r"^([^/]+)/([^/]+)$")
    url_pattern = re.compile(
        r"^(?:https?://)?(?:www\.)?github\.com/([^/]+)/([^/]+)(?:\.git)?/?$"
    )

    while True:
        user_input = Prompt.ask(
            "[bold blue]Enter the GitHub repository (owner/repo or full URL)"
        ).strip()
        m = short_pattern.match(user_input)
        if m:
            owner, repo = m.groups()
        else:
            m = url_pattern.match(user_input)
            if m:
                owner, repo = m.groups()
            else:
                console.print(
                    "[red]Invalid format. Please enter 'owner/repo' or a full GitHub URL."
                )
                continue
        break

    github_url = f"https://github.com/{owner}/{repo}"
    console.print(f"Full GitHub URL set to [green]{github_url}[/]")

    gitmcp_url = f"https://gitmcp.io/{owner}/{repo}"
    console.print(f"GitMCP URL set to [green]{gitmcp_url}[/]")
    return gitmcp_url


class SendUserTool(SendTool):
    request: str = "send_user"
    purpose: str = "Send <content> to user"
    to: str = "user"
    content: str = Field(
        ...,
        description="""
        Message to send to user, typically answer to user's request,
        or a clarification question to the user, if user's task/question
        is not completely clear.
        """,
    )


async def main(model: str = ""):

    gitmcp_url = get_gitmcp_url()

    transport = SSETransport(
        url=gitmcp_url,
    )
    all_tools: List[lr.ToolMessage] = await get_tools_async(transport)

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            # forward to user when LLM doesn't use a tool
            handle_llm_no_tool="You FORGOT to use one of your TOOLs!",
            llm=lm.OpenAIGPTConfig(
                chat_model=model or "gpt-4.1-mini",
                max_output_tokens=10_000,
                async_stream_quiet=False,
            ),
            system_message=dedent(
                f"""
                Make best use of any of the TOOLs available to you,
                to answer the user's questions.
                To communicate with the User, you MUST use
                the TOOL `{SendUserTool.name()}` - typically this would
                be to either send the user your answer to their query/request,
                or to ask the user a clarification question, if the user's request
                is not completely clear.
                """
            ),
        )
    )

    # enable the agent to use all tools
    agent.enable_message(all_tools + [SendUserTool])
    # configure task to NOT recognize string-based signals like DONE,
    # since those could occur in the retrieved text!
    task_cfg = lr.TaskConfig(recognize_string_signals=False)
    # make task with interactive=False =>
    # waits for user only when LLM doesn't use a tool

    task = lr.Task(agent, config=task_cfg, interactive=False)
    await task.run_async(
        "Based on the TOOLs available to you, greet the user and"
        "tell them what kinds of help you can provide."
    )


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/mcp/mcp-fetch.py">
"""
Simple example of using the Anthropic Fetch MCP Server to get web-site content.

Fetch MCP Server: https://github.com/modelcontextprotocol/servers/tree/main/src/fetch

Run like this:

    uv run examples/mcp/mcp-fetch.py --model gpt-4.1-mini

Ask questions like:

Summarize the content of this page:
https://www.anthropic.com/news/model-context-protocol
"""

from fastmcp.client.transports import UvxStdioTransport
from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp.fastmcp_client import get_tool_async
from langroid.mytypes import NonToolAction


async def main(model: str = ""):
    transport = UvxStdioTransport(
        tool_name="mcp-server-fetch",
    )
    FetchTool = await get_tool_async(transport, "fetch")
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            # forward to user when LLM doesn't use a tool
            handle_llm_no_tool=NonToolAction.FORWARD_USER,
            llm=lm.OpenAIGPTConfig(
                chat_model=model or "gpt-4.1-mini",
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
        )
    )

    # enable the agent to use the fetch tool
    agent.enable_message(FetchTool)
    # make task with interactive=False =>
    # waits for user only when LLM doesn't use a tool
    task = lr.Task(agent, interactive=False)
    await task.run_async()


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/mcp/mcp-file-system.py">
"""
Example: Expose local file-system operations via an in-memory FastMCP server.

Run like this:

uv run examples/mcp/mcp-file-system.py --model gpt-4.1-mini

Then ask your agent to list, write, or read files.
"""

import asyncio
import os

from fastmcp.server import FastMCP
from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp import get_tool_async, mcp_tool
from langroid.pydantic_v1 import Field


def create_fs_mcp_server() -> FastMCP:
    """Return a FastMCP server exposing list/read/write file tools."""
    server = FastMCP("FsServer")

    @server.tool()
    def list_files(
        directory: str = Field(..., description="Directory path to list")
    ) -> list[str]:
        """List file names in the given directory."""
        try:
            return os.listdir(directory)
        except FileNotFoundError:
            return []

    @server.tool()
    def write_file(
        path: str = Field(..., description="Path to write to"),
        content: str = Field(..., description="Text content to write"),
    ) -> bool:
        """Write text to a file; return True on success."""
        with open(path, "w", encoding="utf-8") as f:
            f.write(content)
        return True

    @server.tool()
    def read_file(
        path: str = Field(..., description="Path of a text file to read")
    ) -> str:
        """Read and return the content of a text file."""
        with open(path, "r", encoding="utf-8") as f:
            return f.read()

    return server


# use decorator to create a Langroid ToolMessage with a custom handle_async method
@mcp_tool(create_fs_mcp_server(), "write_file")
class WriteFileTool(lr.ToolMessage):
    """Tool to write text to a file."""

    async def handle_async(self) -> str:
        """Invoke `write_file` and report the result."""
        ok = await self.call_tool_async()  # type: ignore
        return f"Wrote {self.path}: {ok}"


# use decorator to create a Langroid ToolMessage with a custom handle_async method
@mcp_tool(create_fs_mcp_server(), "read_file")
class ReadFileTool(lr.ToolMessage):
    """Tool to read the content of a text file."""

    async def handle_async(self) -> str:
        """Invoke `read_file` and return its contents."""
        text = await self.call_tool_async()  # type: ignore
        return text or ""


async def main(model: str = "") -> None:
    """
    Launch a ChatAgent that can list, write, and read files.

    Args:
    model: Optional LLM model name (defaults to gpt-4.1-mini).
    """
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=lm.OpenAIGPTConfig(
                chat_model=model or "gpt-4.1-mini",
                max_output_tokens=500,
                async_stream_quiet=False,
            ),
        )
    )

    # create ListFilesTool using the helper function get_tool_async
    ListFilesTool = await get_tool_async(create_fs_mcp_server(), "list_files")

    # enable all three tools
    agent.enable_message([ListFilesTool, WriteFileTool, ReadFileTool])

    # create a non-interactive task
    task = lr.Task(agent, interactive=False)

    # instruct the agent
    prompt = """
    1. List files in the current directory.
    2. Write a file 'note.txt' containing "Hello, MCP!".
    3. Read back 'note.txt'.
    """
    result = await task.run_async(prompt, turns=3)
    print(result.content)


if __name__ == "__main__":

    def _run(**kwargs: str) -> None:
        """Fire entry point to run the async main function."""
        asyncio.run(main(**kwargs))

    Fire(_run)
</file>

<file path="examples/mcp/memory.py">
"""
Simple example of using the Memory MCP server:
https://github.com/modelcontextprotocol/servers/tree/main/src/memory
This server gives your agent persistent memory using a local Knowledge Graph,
so when you re-start the chat it will remember what you talked about last time.


The server offers several tools, and we can enable ALL of them to be used
by a Langroid agent.

Run like this (-m model optional; defaults to gpt-4.1-mini):

    uv run examples/mcp/memory.py --m ollama/qwen2.5-coder:32b

"""

from fastmcp.client.transports import NpxStdioTransport
from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp.fastmcp_client import get_tools_async
from langroid.mytypes import NonToolAction


async def main(model: str = ""):
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            # forward to user when LLM doesn't use a tool
            handle_llm_no_tool=NonToolAction.FORWARD_USER,
            llm=lm.OpenAIGPTConfig(
                chat_model=model or "gpt-4.1-mini",
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
            system_message="""
            To be helpful to the user, think about which of your several TOOLs
            you can use, possibly one after the other, to answer the user's question.
            """,
        )
    )

    transport = NpxStdioTransport(
        package="@modelcontextprotocol/server-memory",
        args=["-y"],
    )
    tools = await get_tools_async(transport)

    # enable the agent to use all tools
    agent.enable_message(tools)
    # make task with interactive=False =>
    # waits for user only when LLM doesn't use a tool
    task = lr.Task(agent, interactive=False)
    await task.run_async(
        "Based on the TOOLs available to you, greet the user and"
        "tell them what kinds of help you can provide."
    )


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/multi-agent-debate/chainlit_utils.py">
import logging
from typing import Optional, Tuple

import chainlit as cl
from config import MODEL_MAP
from models import SystemMessages
from utils import extract_topics

DEFAULT_TURN_COUNT = 2
DEFAULT_TIMEOUT = 100

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


def parse_boolean_response(response: str) -> bool:
    """
    Convert a user response into a boolean value.
    Args:
        response (str): User input as "yes" or "no".
    Returns:
        bool: True for "yes", False for "no".
    """
    if response == "yes":
        return True
    elif response == "no":
        return False
    raise ValueError("Invalid response: expected 'yes' or 'no'.")


async def handle_boolean_response(res, default=False):
    """
    Handle the user's response from an AskActionMessage.

    Args:
        res (dict): The response dictionary from AskActionMessage.
        default (bool): The default value to return in case of errors or timeouts.

    Returns:
        bool: Parsed boolean response from the user.
    """
    if res:
        try:
            user_choice = res.get("payload", {}).get("value", "").lower()
            return parse_boolean_response(user_choice)
        except ValueError:
            await cl.Message(
                content=f"Unexpected response. Defaulting to '{default}'."
            ).send()
            return default
    # Default if no response or timeout
    await cl.Message(
        content=f"You didn't respond in time. Defaulting to '{default}'."
    ).send()
    return default


async def is_same_llm_for_all_agents() -> bool:
    """
    Ask the user if they want to use the same LLM for all agents.

    Returns:
        bool: True if yes, False if no. Timeout or no response is defaulted to False.
    """

    # Create a Chainlit action message with a timeout
    ask_message = cl.AskActionMessage(
        content=f"Do you want to use the same LLM for all agents?\n\n(If you do not respond within {DEFAULT_TIMEOUT} "
        f"seconds, we will default to selecting individual LLMs.)",
        actions=[
            cl.Action(name="yes", payload={"value": "yes"}, label="Yes"),
            cl.Action(name="no", payload={"value": "no"}, label="No"),
        ],
        timeout=DEFAULT_TIMEOUT,
    )

    res = await ask_message.send()

    # Override the timeout before Chainlit sends its message
    if not res:
        await ask_message.remove()  # Removes the pending action before timeout triggers
        res = {"payload": {"value": "no"}}  # Auto-select "No"

    user_selection = await handle_boolean_response(res, default=False)

    await cl.Message(
        content=(
            "You have chosen to proceed with the same LLM for all agents."
            if user_selection
            else "You have chosen to select individual LLMs for each agent."
        )
    ).send()

    return user_selection


async def select_max_debate_turns() -> int:
    """
    Ask the user to select the maximum number of turns for debates.
    Returns:
        int: The number of debate turns.
    """
    ask_message = cl.AskActionMessage(
        content=f"How many turns should the debates take?\n\n(If you do not respond within {DEFAULT_TIMEOUT} "
        f"seconds, we will default to selecting 2 turns.)",
        actions=[
            cl.Action(name="2", payload={"value": "2"}, label="2"),
            cl.Action(name="4", payload={"value": "4"}, label="4"),
            cl.Action(name="8", payload={"value": "8"}, label="8"),
            cl.Action(name="16", payload={"value": "16"}, label="16"),
        ],
        timeout=DEFAULT_TIMEOUT,
    )

    res = await ask_message.send()

    # Prevents Chainlit's default timeout message
    if not res:
        await ask_message.remove()
        res = {"payload": {"value": "2"}}  # Default to 2 turns

    try:
        turns = int(res["payload"]["value"])
        await cl.Message(content=f"You selected {turns} turns for the debate.").send()
        return turns
    except (ValueError, KeyError):
        await cl.Message(content="Invalid input. Defaulting to 2 turns.").send()
        return DEFAULT_TURN_COUNT


async def select_model(config_agent_name: str) -> str:
    """
    Prompts the user to select an LLM model for the specified agent.
    Args:
        config_agent_name (str): The name of the agent being configured.
    Returns:
        str: The selected model key from MODEL_MAP.
    """
    # Model selections for user
    llm_options = {
        "1": "GPT-4o",
        "2": "GPT-4",
        "3": "GPT-4o-MINI",
        "4": "GPT-4-TURBO",
        "5": "GPT-4-32K",
        "6": "GPT-3.5-TURBO",
        "7": "Mistral 7b-instruct",
        "8": "Gemini 2.0 Flash",
        "9": "Gemini 1.5 Flash",
        "10": "Gemini 1.5 Flash 8B",
        "11": "Gemini 1.5 Pro",
    }

    # Prepare the user prompt
    options_text = "\n".join([f"{key}: {value}" for key, value in llm_options.items()])
    prompt_text = f"Select a Model for {config_agent_name}:\n{options_text}\nEnter your choice (1-{len(llm_options)}):"

    # Prompt the user for model selection
    response = await cl.AskUserMessage(content=prompt_text, timeout=20).send()
    if response:
        try:
            selected_option = response["output"].strip()
            if selected_option in MODEL_MAP:
                await cl.Message(
                    content=f"You selected: {llm_options[selected_option]}"
                ).send()
                return selected_option
            else:
                await cl.Message(
                    content="Invalid selection. Please enter a valid number."
                ).send()
                return await select_model(config_agent_name)  # Retry on invalid input
        except Exception as e:
            await cl.Message(content=f"An error occurred: {e}").send()
            return await select_model(config_agent_name)  # Retry on error
    else:
        await cl.Message(
            content="You didn't respond in time. Defaulting to GPT-4o."
        ).send()
        return "1"  # Default to GPT-4o


async def is_llm_delegate() -> bool:
    """
    Ask the user if the Pro and Con agents should debate autonomously.

    Returns:
        bool: True if yes, False if no.
    """
    # Create the AskActionMessage and send it
    ask_message = cl.AskActionMessage(
        content=f"Should the Pro and Con agents debate autonomously?\n\n(If you do not respond within {DEFAULT_TIMEOUT} "
        f"seconds, we will default to autonomous debate.)",
        actions=[
            cl.Action(name="yes", payload={"value": "yes"}, label="Yes"),
            cl.Action(name="no", payload={"value": "no"}, label="No"),
        ],
        timeout=DEFAULT_TIMEOUT,
    )

    res = await ask_message.send()

    # # Prevents Chainlit's default timeout message
    if not res:
        await ask_message.remove()
        res = {"payload": {"value": "no"}}  # Auto-select "No"

    user_selection = await handle_boolean_response(res, default=False)

    await cl.Message(
        content=(
            "You have chosen to proceed with autonomous debate"
            if user_selection
            else "You have chosen to engage in debate with an AI agent"
        )
    ).send()

    print("The user selected to proceed with the debate")
    return user_selection


async def select_side(topic_name: str) -> str:
    """
    Prompt the user to select a pro or con side in the debate
    Args:
        topic_name (str): The name of the debate topic.
    Returns:
        str: The selected debate side, either "pro" or "con".
    """
    response = await cl.AskUserMessage(
        content=f"Which side would you like to debate on?\n1. Pro-{topic_name}\n2. Con-{topic_name}",
        timeout=20,
    ).send()

    if response:
        side_choice = response["output"].strip()
        if side_choice in ["1", "2"]:
            return "pro" if side_choice == "1" else "con"
        else:
            await cl.Message(
                content="Invalid selection. Please choose 1 for Pro or 2 for Con."
            ).send()
            return await select_side(topic_name)  # Retry on invalid input
    else:
        await cl.Message(
            content="You didn't respond in time. Defaulting to 'pro'."
        ).send()
        return "pro"  # Default to "pro" if no response


async def select_topic_and_setup_side(
    LLM_DELEGATE_FLAG, system_messages: "SystemMessages"
) -> Tuple[str, str, str, str]:
    """
    Prompt the user to select a debate topic and sets up the respective side.
    Args:
        system_messages (SystemMessages): The object containing system messages with respective
                                          debate topics.
    Returns:
        Tuple[str, str, str, str]: A tuple containing:
            - topic_name (str): The name of the selected debate topic.
            - pro_key (str): The key for the Pro side of the selected topic.
            - con_key (str): The key for the Con side of the selected topic.
            - side (str): The user's selected side, either "pro" or "con".
    Raises:
        ValueError: If no topic is selected or no topics are available in the provided
                    `system_messages`.
    """
    selected_topic_tuple = await select_debate_topic(
        system_messages
    )  # Assuming this is an async function
    if not selected_topic_tuple:
        logger.error("No topic selected. Exiting.")
        raise ValueError("No topic selected.")

    topic_name, pro_key, con_key = selected_topic_tuple
    if LLM_DELEGATE_FLAG:
        side = "pro"
    else:
        side = await select_side(topic_name)
    return topic_name, pro_key, con_key, side


async def select_debate_topic(system_messages: "SystemMessages") -> Optional[tuple]:
    """
    Prompt the user to select a debate topic dynamically loaded from  SystemMessages.
    Args:
        system_messages (SystemMessages): The object containing debate topics.
    Returns:
        Optional[tuple]: A tuple containing:
            - topic_name (str): The selected topic's name.
            - pro_key (str): The key for the pro side of the debate.
            - con_key (str): The key for the con side of the debate.
            Returns None if no topics are available or an error occurs.
    """
    # Extract topics from SystemMessages
    topics = extract_topics(system_messages)
    if not topics:
        logger.error("No topics found in the SystemMessages object.")
        await cl.Message(content="No debate topics are available.").send()
        return None

    # Prepare the topic choices for user selection
    topic_choices = "\n".join(
        [f"{i + 1}. {topic[0]}" for i, topic in enumerate(topics)]
    )
    prompt_text = (
        f"Select a debate topic:\n{topic_choices}\nEnter your choice (1-{len(topics)}):"
    )

    # Prompt the user for topic selection
    response = await cl.AskUserMessage(
        content=prompt_text, timeout=DEFAULT_TIMEOUT
    ).send()
    if response:
        try:
            user_input = response["output"].strip()
            topic_index = int(user_input) - 1
            if 0 <= topic_index < len(topics):
                selected_topic = topics[topic_index]
                logger.info(f"Selected topic: {selected_topic[0]}")
                await cl.Message(
                    content=f"You have chosen the following debate topic: {selected_topic[0]}"
                ).send()
                return selected_topic
            else:
                await cl.Message(
                    content="Invalid selection. Please choose a valid topic number."
                ).send()
                return await select_debate_topic(
                    system_messages
                )  # Retry on invalid input
        except ValueError:
            await cl.Message(
                content="Invalid input. Please enter a number corresponding to a topic."
            ).send()
            return await select_debate_topic(system_messages)  # Retry on invalid input
    else:
        selected_topic = topics[0]
        await cl.Message(
            content=f"You didn't respond in time. The system has chosen the following default Topic:  {selected_topic[0]}"
        ).send()
        return selected_topic


async def is_metaphor_search_key_set() -> bool:
    """
    Prompt the user for confirmation about Metaphor Search API keys.

    Returns:
        bool: True if the user confirms they have an API key, otherwise False.
    """
    ask_message = cl.AskActionMessage(
        content=f"Do you have an API Key for Metaphor Search?,\n\n(If you do not respond within {DEFAULT_TIMEOUT} "
        f"seconds, we will default to selecting that you don't have the API Key or dont' want to search)",
        actions=[
            cl.Action(name="yes", payload={"value": "yes"}, label="Yes"),
            cl.Action(name="no", payload={"value": "no"}, label="No"),
        ],
        timeout=DEFAULT_TIMEOUT,
    )

    res = await ask_message.send()

    # Prevents Chainlit's default timeout message
    if not res:
        await ask_message.remove()
        res = {"payload": {"value": "no"}}  # Auto-select "No"

    user_selection = await handle_boolean_response(res, default=False)

    await cl.Message(
        content=(
            "You have chosen to use the Metaphor Search for Research Agent."
            if user_selection
            else "You have chosen that Metaphor Search API key is not available."
        )
    ).send()

    return user_selection


async def is_url_ask_question(topic_name: str) -> bool:
    """
    Prompt the user for confirmation if they want to Q/A by loading the URL documents into vecdb.

    Args:
        topic_name (str): The topic name for the question.

    Returns:
        bool: True if the user confirms for Q/A, otherwise False.
    """
    ask_message = cl.AskActionMessage(
        content=f"Would you like to chat with web searched documents for more information on {topic_name},"
        f"\n\n(If you do not respond within {DEFAULT_TIMEOUT} "
        f"seconds, we will default to selecting that you don't want to chat with the documents)",
        actions=[
            cl.Action(name="yes", payload={"value": "yes"}, label="Yes"),
            cl.Action(name="no", payload={"value": "no"}, label="No"),
        ],
        timeout=DEFAULT_TIMEOUT,
    )

    res = await ask_message.send()

    # Prevents Chainlit's default timeout message
    if not res:
        await ask_message.remove()
        res = {"payload": {"value": "no"}}  # Auto-select "No"

    user_selection = await handle_boolean_response(res, default=False)

    await cl.Message(
        content=(
            f"You have chosen to chat with web-searched documents using RAG for {topic_name}."
            if user_selection
            else f"You have chosen NOT to chat with web-searched documents for {topic_name}."
        )
    ).send()

    return user_selection
</file>

<file path="examples/multi-agent-debate/generation_config_models.py">
import json
from typing import Optional

from langroid.pydantic_v1 import BaseModel, Field


class GenerationConfig(BaseModel):
    """Represents configuration for text generation."""

    max_output_tokens: int = Field(
        default=1024, ge=1, description="Maximum output tokens."
    )
    min_output_tokens: int = Field(
        default=1, ge=0, description="Minimum output tokens."
    )
    temperature: float = Field(
        default=0.7, ge=0.0, le=1.0, description="Sampling temperature."
    )
    seed: Optional[int] = Field(
        default=42,
        description="Seed for reproducibility. If set, ensures deterministic "
        "outputs for the same input.",
    )


def load_generation_config(file_path: str) -> GenerationConfig:
    """
    Load and validate generation configuration from a JSON file.

    Args:
        file_path (str): Path to the JSON file.

    Returns:
        GenerationConfig: Validated generation configuration.
    """
    with open(file_path, "r", encoding="utf-8") as f:
        config_data = json.load(f)
    return GenerationConfig(**config_data)
</file>

<file path="examples/multi-agent-debate/main_chainlit.py">
import logging
import os
from textwrap import dedent

import chainlit as cl
from chainlit_utils import (
    is_llm_delegate,
    is_metaphor_search_key_set,
    is_same_llm_for_all_agents,
    is_url_ask_question,
    select_max_debate_turns,
    select_model,
    select_topic_and_setup_side,
)
from config import get_base_llm_config, get_global_settings, get_questions_agent_config
from main import (
    MetaphorSearchChatAgent,
    create_chat_agent,
    parse_and_format_message_history,
)
from models import SystemMessages, load_system_messages
from system_messages import (
    DEFAULT_SYSTEM_MESSAGE_ADDITION,
    FEEDBACK_AGENT_SYSTEM_MESSAGE,
    generate_metaphor_search_agent_system_message,
)

# Import from utils.py
from utils import (
    extract_urls,
)

import langroid as lr
from langroid.agent.callbacks.chainlit import (
    ChainlitCallbackConfig,
    ChainlitTaskCallbacks,
    add_instructions,
)
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tools.metaphor_search_tool import MetaphorSearchTool
from langroid.agent.tools.orchestration import DoneTool
from langroid.language_models import OpenAIGPTConfig
from langroid.utils.configuration import settings
from langroid.utils.logging import setup_logger


class CustomChainlitTaskCallbacks(ChainlitTaskCallbacks):
    """
    Custom subclass of ChainlitTaskCallbacks with adjusted behavior for task integration.
    """

    def __init__(
        self,
        task: lr.Task,
        config: ChainlitCallbackConfig = ChainlitCallbackConfig(),
    ):
        """
        Initialize the custom task callbacks and recursively inject them.
        """
        # Pass the task directly instead of task.agent
        super().__init__(task, config)
        # Inject callbacks recursively
        self._inject_callbacks(task)
        self.task = task
        if config.show_subtask_response:
            self.task.callbacks.show_subtask_response = self.show_subtask_response

    def show_subtask_response(
        self, task: lr.Task, content: str, is_tool: bool = False
    ) -> None:
        """
        Override the display format for subtask responses.
        """

    @classmethod
    def _inject_callbacks(
        cls, task: lr.Task, config: ChainlitCallbackConfig = ChainlitCallbackConfig()
    ) -> None:
        """
        Recursively apply CustomChainlitTaskCallbacks to agents of sub-tasks.
        """
        for sub_task in task.sub_tasks:
            CustomChainlitTaskCallbacks(sub_task, config=config)


def create_custom_chat_agent(
    name: str, llm_config: OpenAIGPTConfig, system_message: str
) -> ChatAgent:
    """creates a ChatAgent with the given parameters.

    Args:
        name (str): The name of the agent.
        llm_config (OpenAIGPTConfig): The LLM configuration for the agent.
        system_message (str): The system message to guide the agent's LLM.

    Returns:
        ChatAgent: A configured ChatAgent instance.
    """
    # Modify the system message to include instructions for the agent
    additional_system_message = """**Response format (strictly follow this structure):**  
    Pro:  
    - [First key point]  
    - [Second key point]  
    - [Third key point]
    **Limit responses to exactly 3 points expressed as single sentences.**"
    """
    system_message = f"""
       Start your response with '{name}: ' and then follow the instructions below.
        {system_message} {additional_system_message}
        """
    return ChatAgent(
        ChatAgentConfig(
            llm=llm_config,
            name=name,
            system_message=system_message,
        )
    )


@cl.on_chat_start
async def on_chat_start(
    debug: bool = os.getenv("DEBUG", False),
    no_cache: bool = os.getenv("NOCACHE", False),
):
    settings.debug = debug
    settings.cache = not no_cache

    # set info logger
    logger = setup_logger(__name__, level=logging.INFO, terminal=True)
    logger.info("Starting multi-agent-debate")

    await add_instructions(
        title="AI Powered Debate Platform",
        content=dedent(
            """
            Welcome to the Debate Platform.
            Interaction
            1. Decide if you want to you use same LLM for all agents or different ones
            2. Decide if you want autonomous debate between AI Agents or user vs. AI Agent. 
            3. Select a debate topic.
            4. Choose your side (Pro or Con).
            5. Engage in a debate by providing arguments and receiving responses from agents.
            6. Request feedback at any time by typing `f`.
            7. Decide if you want the Metaphor Search to run to find Topic relevant web links
            and summarize them. 
            8. Decide if you want to chat with the documents extracted from URLs found to learn more about the Topic.
            9. End the debate manually by typing "done". If you decide to chat with the documents, you can end session
            by typing "x"
            """
        ),
    )

    global_settings = get_global_settings(nocache=True)
    lr.utils.configuration.set_global(global_settings)

    same_llm = await is_same_llm_for_all_agents()
    llm_delegate: bool = await is_llm_delegate()
    max_turns: int = await select_max_debate_turns()
    print(max_turns)

    # Get base LLM configuration
    if same_llm:
        shared_agent_config: OpenAIGPTConfig = get_base_llm_config(
            await select_model("main LLM")
        )
        pro_agent_config = con_agent_config = shared_agent_config

        # Create feedback_agent_config by modifying shared_agent_config
        feedback_agent_config: OpenAIGPTConfig = OpenAIGPTConfig(
            chat_model=shared_agent_config.chat_model,
            min_output_tokens=shared_agent_config.min_output_tokens,
            max_output_tokens=shared_agent_config.max_output_tokens,
            temperature=0.2,  # Override temperature
            seed=shared_agent_config.seed,
        )
        metaphor_search_agent_config = feedback_agent_config
    else:
        pro_agent_config: OpenAIGPTConfig = get_base_llm_config(
            await select_model("for Pro Agent")
        )
        con_agent_config: OpenAIGPTConfig = get_base_llm_config(
            await select_model("for Con Agent")
        )
        feedback_agent_config: OpenAIGPTConfig = get_base_llm_config(
            await select_model("feedback"), temperature=0.2
        )
        metaphor_search_agent_config = feedback_agent_config

    system_messages: SystemMessages = load_system_messages(
        "examples/multi-agent-debate/system_messages.json"
    )
    LLM_DELEGATE_FLAG: bool = llm_delegate

    topic_name, pro_key, con_key, side = await select_topic_and_setup_side(
        LLM_DELEGATE_FLAG, system_messages
    )

    # Generate the system message
    metaphor_search_agent_system_message = (
        generate_metaphor_search_agent_system_message(system_messages, pro_key, con_key)
    )
    # pro_agent_system_message = "You are Pro. Start your response with 'Pro: "
    # + system_messages.messages[pro_key].message + DEFAULT_SYSTEM_MESSAGE_ADDITION
    pro_agent = create_custom_chat_agent(
        "Pro",
        pro_agent_config,
        system_messages.messages[pro_key].message + DEFAULT_SYSTEM_MESSAGE_ADDITION,
    )
    con_agent = create_custom_chat_agent(
        "Con",
        con_agent_config,
        system_messages.messages[con_key].message + DEFAULT_SYSTEM_MESSAGE_ADDITION,
    )
    feedback_agent = create_chat_agent(
        "Feedback", feedback_agent_config, FEEDBACK_AGENT_SYSTEM_MESSAGE
    )
    metaphor_search_agent = MetaphorSearchChatAgent(  # Use the subclass here
        ChatAgentConfig(
            llm=metaphor_search_agent_config,
            name="MetaphorSearch",
            system_message=metaphor_search_agent_system_message,
        )
    )

    logger.info("Pro, Con, feedback, and metaphor_search agents created.")

    # Determine user's side and assign user_agent and ai_agent based on user selection
    agents = {
        "pro": (pro_agent, con_agent, "Pro", "Con"),
        "con": (con_agent, pro_agent, "Con", "Pro"),
    }
    user_agent, ai_agent, user_side, ai_side = agents[side]
    logger.info(
        f"Starting debate on topic: {topic_name}, taking the {user_side} side. "
        f"LLM Delegate: {llm_delegate}"
    )

    logger.info(f"\n{user_side} Agent ({topic_name}):\n")

    # Determine if the debate is autonomous or the user input for one side
    if LLM_DELEGATE_FLAG:
        logger.info("Autonomous Debate Selected")
        interactive_setting = False
    else:
        logger.info("Manual Debate Selected with an AI Agent")
        interactive_setting = True
        user_input: str
        try:
            user_input_response = await cl.AskUserMessage(
                content="Your argument (or type 'f' for feedback, 'done' to end):",
                timeout=600,  # 10 minutes
            ).send()

            logger.info(f"Received user input response: {user_input_response}")

            if user_input_response and "output" in user_input_response:
                user_input = str(user_input_response["output"]).strip()
                logger.info(f"User input processed successfully: {user_input}")
                user_agent.llm = None  # User message without LLM completion
                user_agent.user_message = user_input
            else:
                logger.error("Response received but 'output' key is missing or empty.")
                raise TimeoutError(
                    "No valid response received for the user input question."
                )

        except TimeoutError as e:
            logger.error(str(e))
            # Handle timeout or invalid response gracefully

        # Assign the input to the user agent's attributes
        user_agent.llm = None  # User message without LLM completion
        user_agent.user_message = user_input

    # Set up langroid tasks and run the debate
    user_task = Task(user_agent, interactive=interactive_setting, restart=False)
    ai_task = Task(ai_agent, interactive=False, single_round=True)

    user_task.add_sub_task(ai_task)

    if not llm_delegate:
        ChainlitTaskCallbacks(user_task)
        await user_task.run_async(user_agent.user_message, turns=max_turns)
    else:
        CustomChainlitTaskCallbacks(user_task)
        await user_task.run_async("get started", turns=max_turns)

    # Determine the last agent based on turn count and alternation
    # Note: user_agent and ai_agent are dynamically set based on the chosen user_side
    last_agent = ai_agent if max_turns % 2 == 0 else user_agent

    await cl.Message(content="## Feedback and Debate Evaluation:").send()
    # Generate feedback summary and declare a winner using feedback agent

    if not last_agent.message_history:
        logger.warning("No agent message history found for the last agent")

    feedback_task = Task(
        feedback_agent,
        system_message=FEEDBACK_AGENT_SYSTEM_MESSAGE,
        interactive=False,
        single_round=True,
    )
    formatted_history = parse_and_format_message_history(last_agent.message_history)
    CustomChainlitTaskCallbacks(feedback_task)
    await feedback_task.run_async(
        formatted_history
    )  # Pass formatted history to the feedback agent

    metaphor_search: bool = await is_metaphor_search_key_set()

    if metaphor_search:
        metaphor_search_task = Task(
            metaphor_search_agent,
            system_message=metaphor_search_agent_system_message,
            interactive=False,
        )
        metaphor_search_agent.enable_message(MetaphorSearchTool)
        metaphor_search_agent.enable_message(DoneTool)
        CustomChainlitTaskCallbacks(metaphor_search_task)
        await metaphor_search_task.run_async("run the search")

        url_docs_ask_questions = await is_url_ask_question(topic_name)
        if url_docs_ask_questions:
            searched_urls = extract_urls(metaphor_search_agent.message_history)
            logger.info(searched_urls)
            ask_questions_agent = lr.agent.special.DocChatAgent(
                get_questions_agent_config(
                    searched_urls, feedback_agent_config.chat_model
                )
            )
            ask_questions_task = lr.Task(ask_questions_agent)
            CustomChainlitTaskCallbacks(ask_questions_task)
            await ask_questions_task.run_async()
</file>

<file path="examples/multi-agent-debate/main.py">
import logging
from typing import Any, List

import typer
from config import get_base_llm_config, get_global_settings, get_questions_agent_config
from models import SystemMessages, load_system_messages
from rich.prompt import Prompt
from system_messages import (
    DEFAULT_SYSTEM_MESSAGE_ADDITION,
    FEEDBACK_AGENT_SYSTEM_MESSAGE,
    generate_metaphor_search_agent_system_message,
)

# Import from utils.py
from utils import (
    extract_urls,
    is_llm_delegate,
    is_metaphor_search_key_set,
    is_same_llm_for_all_agents,
    is_url_ask_question,
    select_max_debate_turns,
    select_model,
    select_topic_and_setup_side,
)

import langroid as lr
from langroid import ChatDocument, Entity
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tools.metaphor_search_tool import MetaphorSearchTool
from langroid.agent.tools.orchestration import DoneTool
from langroid.language_models import OpenAIGPTConfig
from langroid.utils.logging import setup_logger


class MetaphorSearchChatAgent(ChatAgent):
    def handle_message_fallback(self, msg: str | ChatDocument) -> str | None:
        """Handle scenario where LLM did not generate any Tool"""
        if isinstance(msg, ChatDocument) and msg.metadata.sender == Entity.LLM:
            return f"""
            Have you presented pro and con arguments based on 
            your search results? If so, use the TOOL `{DoneTool.name()}` to indicate you're finished. 
            Otherwise, argue both sides and then send the `{DoneTool.name()}`
            """
        return None


# Initialize typer application
app = typer.Typer()

# set info logger
logger = setup_logger(__name__, level=logging.INFO, terminal=True)
logger.info("Starting multi-agent-debate")


def parse_and_format_message_history(message_history: List[Any]) -> str:
    """
    Parses and formats message history to exclude system messages
    and map roles to Pro/Con.

    Args:
        message_history (List[Any]): The full message history
        containing system, Pro, and Con messages.

    Returns:
        str: A formatted string with annotated Pro/Con messages.
    """
    annotated_history = []

    for msg in message_history:
        # Exclude system messages
        if msg.role == "system":
            continue

        # Map roles to Pro/Con
        if msg.role in ["pro", "user"]:  # User is treated as Pro in this context
            annotated_history.append(f"Pro: {msg.content}")
        elif msg.role in ["con", "assistant"]:  # Assistant is treated as Con
            annotated_history.append(f"Con: {msg.content}")

    return "\n".join(annotated_history)


def create_chat_agent(
    name: str, llm_config: OpenAIGPTConfig, system_message: str
) -> ChatAgent:
    """creates a ChatAgent with the given parameters.

    Args:
        name (str): The name of the agent.
        llm_config (OpenAIGPTConfig): The LLM configuration for the agent.
        system_message (str): The system message to guide the agent's LLM.

    Returns:
        ChatAgent: A configured ChatAgent instance.
    """
    return ChatAgent(
        ChatAgentConfig(
            llm=llm_config,
            name=name,
            system_message=system_message,
        )
    )


def run_debate() -> None:
    """Execute the main debate logic.

    Orchestrates the debate process, including setup, user input, LLM agent
    interactions, and final feedback. Handles both user-guided and LLM-
    delegated debates.

    This function:
    1. Loads global settings and the base LLM configurations.
    2. Prompts the user to confirm if they want to use same LLM for all agents.
    3. Prompts the user to select a debate topic and a side(Pro or Con).
    4. Sets up pro, con, and feedback agents.
    5. Runs the debate for a specified number of turns, either interactively
       or autonomously.
    6. Provides a feedback summary at the end.
    """

    global_settings = get_global_settings(nocache=True)
    lr.utils.configuration.set_global(global_settings)

    same_llm: bool = is_same_llm_for_all_agents()
    llm_delegate: bool = is_llm_delegate()
    max_turns: int = select_max_debate_turns()

    # Get base LLM configuration
    if same_llm:
        shared_agent_config: OpenAIGPTConfig = get_base_llm_config(
            select_model("main LLM")
        )
        pro_agent_config = con_agent_config = shared_agent_config

        # Create feedback_agent_config by modifying shared_agent_config
        feedback_agent_config: OpenAIGPTConfig = OpenAIGPTConfig(
            chat_model=shared_agent_config.chat_model,
            min_output_tokens=shared_agent_config.min_output_tokens,
            max_output_tokens=shared_agent_config.max_output_tokens,
            temperature=0.2,  # Override temperature
            seed=shared_agent_config.seed,
        )
        metaphor_search_agent_config = feedback_agent_config
    else:
        pro_agent_config: OpenAIGPTConfig = get_base_llm_config(
            select_model("for Pro Agent")
        )
        con_agent_config: OpenAIGPTConfig = get_base_llm_config(
            select_model("for Con Agent")
        )
        feedback_agent_config: OpenAIGPTConfig = get_base_llm_config(
            select_model("feedback"), temperature=0.2
        )
        metaphor_search_agent_config = feedback_agent_config

    system_messages: SystemMessages = load_system_messages(
        "examples/multi-agent-debate/system_messages.json"
    )
    topic_name, pro_key, con_key, side = select_topic_and_setup_side(system_messages)

    # Generate the system message
    metaphor_search_agent_system_message = (
        generate_metaphor_search_agent_system_message(system_messages, pro_key, con_key)
    )

    pro_agent = create_chat_agent(
        "Pro",
        pro_agent_config,
        system_messages.messages[pro_key].message + DEFAULT_SYSTEM_MESSAGE_ADDITION,
    )
    con_agent = create_chat_agent(
        "Con",
        con_agent_config,
        system_messages.messages[con_key].message + DEFAULT_SYSTEM_MESSAGE_ADDITION,
    )
    feedback_agent = create_chat_agent(
        "Feedback", feedback_agent_config, FEEDBACK_AGENT_SYSTEM_MESSAGE
    )
    metaphor_search_agent = MetaphorSearchChatAgent(  # Use the subclass here
        ChatAgentConfig(
            llm=metaphor_search_agent_config,
            name="MetaphorSearch",
            system_message=metaphor_search_agent_system_message,
        )
    )

    logger.info("Pro, Con, feedback, and metaphor_search agents created.")

    # Determine user's side and assign user_agent and ai_agent based on user selection
    agents = {
        "pro": (pro_agent, con_agent, "Pro", "Con"),
        "con": (con_agent, pro_agent, "Con", "Pro"),
    }
    user_agent, ai_agent, user_side, ai_side = agents[side]
    logger.info(
        f"Starting debate on topic: {topic_name}, taking the {user_side} side. "
        f"LLM Delegate: {llm_delegate}"
    )

    logger.info(f"\n{user_side} Agent ({topic_name}):\n")

    # Determine if the debate is autonomous or the user input for one side
    if llm_delegate:
        logger.info("Autonomous Debate Selected")
        interactive_setting = False
    else:
        logger.info("Manual Debate Selected with an AI Agent")
        interactive_setting = True
        user_input: str = Prompt.ask(
            "Your argument (or type 'f' for feedback, 'done' to end):"
        )
        user_agent.llm = None  # User message without LLM completion
        user_agent.user_message = user_input

    # Set up langroid tasks and run the debate
    user_task = Task(user_agent, interactive=interactive_setting, restart=False)
    ai_task = Task(ai_agent, interactive=False, single_round=True)
    user_task.add_sub_task(ai_task)
    if not llm_delegate:
        user_task.run(user_agent.user_message, turns=max_turns)
    else:
        user_task.run("get started", turns=max_turns)

    # Determine the last agent based on turn count and alternation
    # Note: user_agent and ai_agent are dynamically set based on the chosen user_side
    last_agent = ai_agent if max_turns % 2 == 0 else user_agent

    # Generate feedback summary and declare a winner using feedback agent
    if not last_agent.message_history:
        logger.warning("No agent message history found for the last agent")

    feedback_task = Task(feedback_agent, interactive=False, single_round=True)
    formatted_history = parse_and_format_message_history(last_agent.message_history)
    feedback_task.run(formatted_history)  # Pass formatted history to the feedback agent

    metaphor_search: bool = is_metaphor_search_key_set()

    if metaphor_search:
        metaphor_search_task = Task(metaphor_search_agent, interactive=False)
        metaphor_search_agent.enable_message(MetaphorSearchTool)
        metaphor_search_agent.enable_message(DoneTool)
        metaphor_search_task.run("run the search")

        url_docs_ask_questions = is_url_ask_question(topic_name)
        if url_docs_ask_questions:
            searched_urls = extract_urls(metaphor_search_agent.message_history)
            logger.info(searched_urls)
            ask_questions_agent = lr.agent.special.DocChatAgent(
                get_questions_agent_config(
                    searched_urls, feedback_agent_config.chat_model
                )
            )
            ask_questions_task = lr.Task(ask_questions_agent)
            ask_questions_task.run()


@app.command()
def main():
    """Main function and entry point for the Debate System"""
    run_debate()


if __name__ == "__main__":
    app()
</file>

<file path="examples/multi-agent-debate/models.py">
import json
import logging
from typing import Any, Dict

from langroid.pydantic_v1 import BaseModel
from langroid.utils.logging import setup_logger

logger = setup_logger(__name__, level=logging.INFO, terminal=True)


class Message(BaseModel):
    """Represents a single message with a topic and content.

    Attributes:
        topic (str): The topic of the message.
        message (str): The content of the message.
    """

    topic: str
    message: str


class SystemMessages(BaseModel):
    """Represents a collection of system messages.

    Attributes:
        messages (Dict[str, Message]): A dictionary where the key is the message
            identifier (e.g., 'pro_ai') and the value is a `Message` object.
    """

    messages: Dict[str, Message]


def load_system_messages(file_path: str) -> SystemMessages:
    """Load and validate system messages from a JSON file.

    Reads the JSON file containing system messages, maps each entry to a
    `Message` object, and wraps the result in a `SystemMessages` object.

    Args:
        file_path (str): The path to the JSON file containing system messages.

    Returns:
        SystemMessages: A `SystemMessages` object containing validated messages.

    Raises:
        IOError: If the file cannot be read or found.
        json.JSONDecodeError: If the JSON file is not properly formatted.
        Exception: For any other unexpected errors during processing.
    """
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            data: Any = json.load(f)
        # Map dictionaries to Message objects
        messages = {key: Message(**value) for key, value in data.items()}
        return SystemMessages(messages=messages)
    except FileNotFoundError as e:
        logger.error(f"File not found: {file_path}")
        raise IOError(f"Could not find the file: {file_path}") from e
    except json.JSONDecodeError as e:
        logger.error(f"Error decoding JSON file: {file_path}")
        raise json.JSONDecodeError(
            f"Invalid JSON format in file: {file_path}", e.doc, e.pos
        ) from e
    except Exception as e:
        logger.error(f"Unexpected error loading system messages: {e}")
        raise
</file>

<file path="examples/multi-agent-debate/system_messages.py">
from langroid.agent.tools.metaphor_search_tool import MetaphorSearchTool
from langroid.agent.tools.orchestration import DoneTool

DEFAULT_SYSTEM_MESSAGE_ADDITION = """
            DO NOT REPEAT ARGUMENTS THAT HAVE BEEN PREVIOUSLY GENERATED 
            AND CAN BE SEEN IN THE DEBATE HISTORY PROVIDED. 
            """
FEEDBACK_AGENT_SYSTEM_MESSAGE = """  
            You are an expert and experienced judge specializing in Lincoln-Douglas style debates. 
            Your goal is to evaluate the debate thoroughly based on the following criteria:
            1. Clash of Values: Assess how well each side upholds their stated value (e.g., justice, morality) 
               and how effectively they compare and prioritize values.
            2. Argumentation: Evaluate the clarity, organization, and logical soundness of each side's case structure, 
               contentions, and supporting evidence.
            3. Cross-Examination: Judge the effectiveness of questioning and answering during cross-examination.
            4. Rebuttals: Analyze how well each side refutes their opponent's arguments.
            5. Persuasion: Assess communication quality, tone, rhetorical effectiveness, and emotional/ethical appeals.
            6. Technical Execution: Identify if major arguments were addressed or dropped and check consistency.
            7. Debate Etiquette: Evaluate professionalism, respect, and demeanor.
            8. Final Focus: Judge the strength of closing speeches, how well they summarize the case, 
            and justify a winner.
            Provide constructive feedback for each debater, 
            summarizing their performance and declaring a winner with justification.   
            """
METAPHOR_SEARCH_AGENT_SYSTEM_MESSAGE_TEMPLATE = """
            There are 2 STEPs. Your Goal is to execute both of them. 
            STEP 1:  Run MetaphorSearchTool

            Use the TOOL {metaphor_tool_name} to search the web for 5 references for Pro: {pro_message}
            and Con: {con_message}.     
            YOUR GOAL IS TO FIND GOOD REFERENCES FOR BOTH SIDES OF A DEBATE. 
            Be very CONCISE in your responses, use 5-7 sentences. 
            show me the SOURCE(s) and EXTRACT(s) and summary
            in this format:

            <your answer here>
            Here are additional references using Metaphor Search to improve your knowledge of the subject:

            M1: SOURCE: https://journalofethics.ama-assn.org/article/should-artificial-intelligence-augment-
            medical-decision-making-case-autonomy-algorithm/2018-09
            EXTRACT: Discusses the ethical implications of AI in medical decision-making and 
            the concept of an autonomy algorithm.
            SUMMARY: This article explores the ethical considerations of integrating AI into medical decision-making 
            processes, emphasizing the need for autonomy and ethical oversight.

            M2: SOURCE: ...
            EXTRACT: ...
            SUMMARY:

            DO NOT MAKE UP YOUR OWN SOURCES; ONLY USE SOURCES YOU FIND FROM A WEB SEARCH. 
            ENSURE STEP 1 IS COMPLETED BEFORE STARTING STEP 2

            STEP 2: Argue Pro and Con Cases
            As an expert debater, your goal is to eloquently argue for both the Pro and Con cases
            using the references from web-search SOURCES generated in Step 1 and properly cite the Sources in BRACKETS 
            (e.g., [SOURCE])
            Write at least 5 sentences for each side.

            ENSURE BOTH STEP 1 and 2 are completed. 
            After all STEPs are completed, use the `{done_tool_name}` tool to end the session   
            """


def generate_metaphor_search_agent_system_message(system_messages, pro_key, con_key):
    return METAPHOR_SEARCH_AGENT_SYSTEM_MESSAGE_TEMPLATE.format(
        metaphor_tool_name=MetaphorSearchTool.name(),
        pro_message=system_messages.messages[pro_key].message,
        con_message=system_messages.messages[con_key].message,
        done_tool_name=DoneTool.name(),
    )
</file>

<file path="examples/multi-agent-debate/utils.py">
import logging
import re
from typing import List, Literal, Optional, Tuple

from models import SystemMessages
from rich.prompt import Confirm, Prompt

from langroid.utils.logging import setup_logger

DEFAULT_TURN_COUNT = 2

# set info logger
logger = setup_logger(__name__, level=logging.INFO, terminal=True)


def extract_topics(system_messages: SystemMessages) -> List[Tuple[str, str, str]]:
    """Extract unique debate topics from the SystemMessages object.

    Processes the `SystemMessages` object to identify debate topics by pairing
    `pro_` and `con_` keys. Ensures each topic is represented only once.

    Args:
        system_messages (SystemMessages): The object containing system messages
            with `pro_` and `con_` topic keys.

    Returns:
        List[Tuple[str, str, str]]: A list of tuples,
        where each tuple contains:
            - topic_name (str): The name of the debate topic.
            - pro_key (str): The key for the pro side of the debate.
            - con_key (str): The key for the con side of the debate.
    """
    topics: List[Tuple[str, str, str]] = []
    for key, message in system_messages.messages.items():
        # Process only "pro_" keys to avoid duplicates
        if key.startswith("pro_"):
            con_key = key.replace("pro_", "con_", 1)  # Match "con_" dynamically
            if con_key in system_messages.messages:  # Ensure "con_" exists
                topics.append((message.topic, key, con_key))
    return topics


def select_model(config_agent_name: str) -> str:
    """
    Prompt the user to select an OpenAI or Gemini model
    for the specified agent.

    This function prompts the user to select an option from
    a list of available models.
    The user's input corresponds to a predefined choice, which is
    then returned as a string representing the selected option.

    Args:
        config_agent_name (str): The name of the agent being configured,
        used in the prompt to personalize the message.

    Returns:
        str: The user's selected option as a string, corresponding to one of the
             predefined model choices (e.g., "1", "2", ..., "10").
    """
    return Prompt.ask(
        f"Select a Model for {config_agent_name}:\n"
        "1: gpt-4o\n"
        "2: gpt-4\n"
        "3: gpt-4o-mini\n"
        "4: gpt-4-turbo\n"
        "5: gpt-4-32k\n"
        "6: gpt-3.5-turbo-1106\n"
        "7: Mistral: mistral:7b-instruct-v0.2-q8_0a\n"
        "8: Gemini: gemini-2.0-flash\n"
        "8: Gemini: gemini-1.5-flash\n"
        "9: Gemini: gemini-1.5-flash-8b\n"
        "10: Gemini: gemini-1.5-pro\n",
        choices=["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"],
        default="1",
    )


def select_debate_topic(system_messages: SystemMessages) -> Optional[tuple]:
    """Prompt the user to select a debate topic from SystemMessages.

    Dynamically loads debate topics from the SystemMessages object, displays
    the options to the user, and prompts them to select a topic.

    Args:
        system_messages (SystemMessages): The object containing debate topics.

    Returns:
        Optional[tuple]: A tuple containing:
            - topic_name (str): The selected topic's name.
            - pro_key (str): The key for the pro side of the debate.
            - con_key (str): The key for the con side of the debate.
            Returns None if no topics are available or an error occurs.
    """
    topics = extract_topics(system_messages)

    if not topics:
        logger.error("No topics found in the JSON file.")
        return None

    # Prepare topic choices for user selection
    topic_choices = "\n".join(
        [f"{i + 1}. {topic[0]}" for i, topic in enumerate(topics)]
    )
    user_input = Prompt.ask(
        f"Select a debate topic:\n{topic_choices}",
        choices=[str(i + 1) for i in range(len(topics))],
        default="1",
    )
    topic_index = int(user_input) - 1

    selected_topic = topics[topic_index]
    logger.info(f"Selected topic: {selected_topic[0]}")
    return selected_topic


def select_side(topic_name: str) -> Literal["pro", "con"]:
    """Prompt the user to select their side in the debate.

    Presents the user with a choice to debate on either the pro or con side
    of the given topic.

    Args:
        topic_name (str): The name of the debate topic.

    Returns:
        Literal["pro", "con"]: The selected debate side.
    """
    side = Prompt.ask(
        f"Which side would you like to debate on?\n1. Pro-{topic_name}\n2. "
        f"Con-{topic_name}",
        choices=["1", "2"],
        default="1",
    )
    return "pro" if side == "1" else "con"


def select_topic_and_setup_side(
    system_messages: SystemMessages,
) -> Tuple[str, str, str, str]:
    """Prompt the user to select a debate topic and sets up the respective side.

    This function handles the user interaction for selecting a debate topic and the side
    (Pro or Con) they want to argue. It validates that a topic is selected and raises an
    exception if the topic is not available.

    Args:
        system_messages (SystemMessages): The object containing system messages with respective
                                          debate topics.

    Returns:
        Tuple[str, str, str, str]: A tuple containing:
            - topic_name (str): The name of the selected debate topic.
            - pro_key (str): The key for the Pro side of the selected topic.
            - con_key (str): The key for the Con side of the selected topic.
            - side (str): The user's selected side, either "pro" or "con".

    Raises:
        ValueError: If no topic is selected or no topics are available in the provided
                    `system_messages`.
    """
    selected_topic_tuple = select_debate_topic(system_messages)
    if not selected_topic_tuple:
        logger.error("No topic selected. Exiting.")
        raise ValueError("No topic selected.")

    topic_name, pro_key, con_key = selected_topic_tuple
    side = select_side(topic_name)
    return topic_name, pro_key, con_key, side


def is_llm_delegate() -> bool:
    """Prompt the user to decide on LLM delegation.

    Asks the user whether the LLM should autonomously continue the debate
    without requiring user input.

    Returns:
        bool: True if the user chooses LLM delegation, otherwise return False.
    """
    return Confirm.ask(
        "Should the Pro and Con agents debate autonomously?",
        default=False,
    )


def is_metaphor_search_key_set() -> bool:
    """Prompt the user confirmation about metaphorSearch API keys.

    Asks the user to confirm the metaphorSearch API keys.

    Returns:
        bool: True if the user chooses LLM delegation, otherwise return False.
    """
    return Confirm.ask(
        "Do you have an API Key for Metaphor Search?",
        default=False,
    )


def is_same_llm_for_all_agents() -> bool:
    """Prompt the user to decide if same LLM should be used for all agents.

    Asks the user whether the same LLM should be configured for all agents.

    Returns:
        bool: True if the user chooses same LLM for all agents, otherwise return False.
    """
    # Ask the user if they want to use the same LLM configuration for all agents
    return Confirm.ask(
        "Do you want to use the same LLM for all agents?",
        default=True,
    )


def select_max_debate_turns() -> int:
    # Prompt for number of debate turns
    while True:
        max_turns = Prompt.ask(
            "How many turns should the debate continue for?",
            default=str(DEFAULT_TURN_COUNT),
        )
        try:
            return int(max_turns)
        except ValueError:
            return DEFAULT_TURN_COUNT


def extract_urls(message_history):
    """
    Extracts all URLs from the given message history content and returns them in the format [url1, url2, ..., urln].

    Parameters:
        message_history (list): A list of LLMMessage objects containing message history.

    Returns:
        str: A string representation of a list of URLs.
    """
    # Extract content only from non-system messages
    content = " ".join(
        message.content
        for message in message_history
        if hasattr(message, "content") and message.content and message.role != "system"
    )

    # Extract URLs from content
    urls = re.findall(r"https?://\S+", content)
    return urls  # Return the list of URLs directly


def is_url_ask_question(topic_name: str) -> bool:
    """Prompt the user to decide to ask questions from the searched URL docs.

    Asks the user whether they want to ask questions from the searched URL docs?

    Returns:
        bool: True if the user chooses to ask questions from searched url docs., otherwise return False.
    """
    return Confirm.ask(
        f"Would you like to Chat with documents found through Search for more information on the {topic_name}",
        default=False,
    )
</file>

<file path="examples/portkey/portkey_advanced_features.py">
#!/usr/bin/env python3

"""
Advanced Portkey example showing observability, caching, retries, and metadata.

This example demonstrates:
- Advanced Portkey configuration with all features
- Request tracing and metadata
- Caching and retry strategies
- Custom headers for observability

Run with: python portkey_advanced_features.py
"""

import os
import uuid
from typing import Optional

import langroid as lr
import langroid.language_models as lm
from langroid.language_models.provider_params import PortkeyParams


def check_env_var(var_name: str) -> Optional[str]:
    """Check if environment variable is set and return its value."""
    value = os.getenv(var_name)
    if not value:
        print(f"⚠️  Warning: {var_name} not set in environment")
        return None
    return value


def create_advanced_portkey_llm(portkey_api_key: str, user_id: str) -> lm.OpenAIGPT:
    """Create an advanced Portkey-enabled LLM with all features."""

    # Generate unique trace ID for this session
    trace_id = f"trace-{uuid.uuid4().hex[:8]}"

    config = lm.OpenAIGPTConfig(
        chat_model="portkey/openai/gpt-4o-mini",
        portkey_params=PortkeyParams(
            api_key=portkey_api_key,
            # Observability features
            trace_id=trace_id,
            metadata={
                "user_id": user_id,
                "app": "langroid-advanced-example",
                "version": "1.0",
                "environment": "demo",
            },
            # Retry configuration
            retry={"max_retries": 3, "backoff": "exponential", "jitter": True},
            # Caching configuration
            cache={
                "enabled": True,
                "ttl": 3600,  # 1 hour
                "namespace": "langroid-demo",
            },
            cache_force_refresh=False,
            # User tracking
            user=user_id,
            organization="langroid-demo-org",
            # Custom headers for additional tracking
            custom_headers={
                "x-session-id": f"session-{uuid.uuid4().hex[:8]}",
                "x-demo-type": "advanced-features",
                "x-langroid-version": (
                    lr.__version__ if hasattr(lr, "__version__") else "unknown"
                ),
            },
        ),
        max_output_tokens=200,
        temperature=0.3,
    )

    return lm.OpenAIGPT(config)


def demonstrate_caching(llm: lm.OpenAIGPT):
    """Demonstrate Portkey's caching capabilities."""
    print("\n🧠 Testing Caching Capabilities")
    print("=" * 50)

    question = "What are the three laws of robotics by Isaac Asimov?"

    print("🔄 First request (should hit the API)...")
    response1 = llm.chat(question)
    print(f"✅ Response: {response1.message[:100]}...")
    print(f"📊 Cached: {response1.cached}")
    if response1.usage:
        print(f"📊 Tokens: {response1.usage.total_tokens}")

    print("\n🔄 Second identical request (should hit cache)...")
    response2 = llm.chat(question)
    print(f"✅ Response: {response2.message[:100]}...")
    print(f"📊 Cached: {response2.cached}")
    if response2.usage:
        print(f"📊 Tokens: {response2.usage.total_tokens}")


def demonstrate_metadata_tracking(llm: lm.OpenAIGPT, user_id: str):
    """Demonstrate request tracking with metadata."""
    print("\n📊 Testing Metadata and Tracking")
    print("=" * 50)

    questions = [
        "What is machine learning?",
        "Explain neural networks briefly.",
        "What is the difference between AI and ML?",
    ]

    for i, question in enumerate(questions, 1):
        print(f"\n🔍 Question {i}: {question}")

        # Create a new LLM instance with updated metadata for each question
        trace_id = f"trace-q{i}-{uuid.uuid4().hex[:6]}"

        config = lm.OpenAIGPTConfig(
            chat_model="portkey/openai/gpt-4o-mini",
            portkey_params=PortkeyParams(
                api_key=llm.config.portkey_params.api_key,
                trace_id=trace_id,
                metadata={
                    "user_id": user_id,
                    "question_number": i,
                    "question_category": "AI/ML basics",
                    "timestamp": str(uuid.uuid4()),  # Unique per request
                },
                user=user_id,
                custom_headers={
                    "x-question-id": f"q-{i}",
                    "x-session-type": "educational",
                },
            ),
            max_output_tokens=150,
            temperature=0.3,
        )

        question_llm = lm.OpenAIGPT(config)
        response = question_llm.chat(question)

        print(f"✅ Response: {response.message[:80]}...")
        print(f"🏷️  Trace ID: {trace_id}")


def demonstrate_error_handling():
    """Demonstrate error handling and retry behavior."""
    print("\n⚠️  Testing Error Handling")
    print("=" * 50)

    try:
        # Create config with invalid model to test error handling
        config = lm.OpenAIGPTConfig(
            chat_model="portkey/openai/invalid-model-name",
            portkey_params=PortkeyParams(
                api_key=os.getenv("PORTKEY_API_KEY", ""),
                retry={"max_retries": 2, "backoff": "linear"},
                metadata={"test_type": "error_handling"},
            ),
        )

        error_llm = lm.OpenAIGPT(config)
        response = error_llm.chat("This should fail")
        print(f"Unexpected success: {response.message}")

    except Exception as e:
        print(f"✅ Expected error caught: {type(e).__name__}")
        print(f"   Error details: {str(e)[:100]}...")


def main():
    """Main function demonstrating advanced Portkey features."""
    print("🚀 Portkey Advanced Features Example")
    print("=" * 45)

    # Check for required environment variables
    portkey_api_key = check_env_var("PORTKEY_API_KEY")
    if not portkey_api_key:
        print("❌ PORTKEY_API_KEY is required. Please set it in your environment.")
        return

    openai_api_key = check_env_var("OPENAI_API_KEY")
    if not openai_api_key:
        print("❌ OPENAI_API_KEY is required for this example.")
        return

    print("✅ All required API keys found")

    # Generate a unique user ID for this session
    user_id = f"user-{uuid.uuid4().hex[:8]}"
    print(f"🆔 Demo User ID: {user_id}")

    # Create advanced LLM configuration
    try:
        llm = create_advanced_portkey_llm(portkey_api_key, user_id)
        print("✅ Advanced Portkey LLM created successfully")

        # Demonstrate different features
        demonstrate_caching(llm)
        demonstrate_metadata_tracking(llm, user_id)
        demonstrate_error_handling()

    except Exception as e:
        print(f"❌ Failed to create advanced LLM: {str(e)}")
        return

    print("\n🎉 Advanced Portkey features example completed!")
    print("\n💡 Next steps:")
    print(
        "   - View detailed request logs in Portkey dashboard: https://app.portkey.ai"
    )
    print(
        "   - Filter by trace IDs, user IDs, or metadata to analyze specific requests"
    )
    print("   - Try the multi-provider example: portkey_multi_provider.py")
    print(f"\n🔍 Your demo user ID: {user_id}")
    print("   Use this to filter requests in the Portkey dashboard")


if __name__ == "__main__":
    main()
</file>

<file path="examples/portkey/portkey_basic_chat.py">
#!/usr/bin/env python3

"""
Basic Portkey example showing how to use different AI providers through Portkey's gateway.

This example demonstrates:
- Basic Portkey configuration
- Switching between different AI providers
- Automatic API key resolution

Run with: python portkey_basic_chat.py
"""

import os
from typing import Optional

import langroid.language_models as lm
from langroid.language_models.provider_params import PortkeyParams


def check_env_var(var_name: str) -> Optional[str]:
    """Check if environment variable is set and return its value."""
    value = os.getenv(var_name)
    if not value:
        print(f"⚠️  Warning: {var_name} not set in environment")
        return None
    return value


def create_portkey_llm(provider: str, model: str, portkey_api_key: str) -> lm.OpenAIGPT:
    """Create a Portkey-enabled LLM configuration."""
    config = lm.OpenAIGPTConfig(
        chat_model=f"portkey/{provider}/{model}",
        portkey_params=PortkeyParams(
            api_key=portkey_api_key,
        ),
        max_output_tokens=150,
        temperature=0.7,
    )
    return lm.OpenAIGPT(config)


def test_provider(llm: lm.OpenAIGPT, provider_name: str):
    """Test a specific provider with a simple question."""
    print(f"\n🔮 Testing {provider_name}...")
    print("=" * 50)

    question = "What is the capital of France? Answer in one sentence."

    try:
        response = llm.chat(question)
        print(f"✅ {provider_name} Response:")
        print(f"   {response.message}")

        if response.usage:
            print(f"   📊 Tokens: {response.usage.total_tokens}")

    except Exception as e:
        print(f"❌ {provider_name} Error: {str(e)}")


def main():
    """Main function demonstrating Portkey basic usage."""
    print("🚀 Portkey Basic Chat Example")
    print("=" * 40)

    # Check for required environment variables
    portkey_api_key = check_env_var("PORTKEY_API_KEY")
    if not portkey_api_key:
        print("❌ PORTKEY_API_KEY is required. Please set it in your environment.")
        return

    print("✅ Portkey API key found")

    # Test different providers through Portkey
    providers_to_test = []

    # Check which provider keys are available
    if os.getenv("OPENAI_API_KEY"):
        providers_to_test.append(("OpenAI", "openai", "gpt-4o-mini"))
        print("✅ OpenAI API key found")

    if os.getenv("ANTHROPIC_API_KEY"):
        providers_to_test.append(("Anthropic", "anthropic", "claude-3-haiku-20240307"))
        print("✅ Anthropic API key found")

    if os.getenv("GOOGLE_API_KEY") or os.getenv("GEMINI_API_KEY"):
        providers_to_test.append(("Google Gemini", "google", "gemini-2.0-flash-lite"))
        print("✅ Google/Gemini API key found")

    if not providers_to_test:
        print("❌ No provider API keys found. Please set at least one of:")
        print("   - OPENAI_API_KEY")
        print("   - ANTHROPIC_API_KEY")
        print("   - GOOGLE_API_KEY or GEMINI_API_KEY")
        return

    print(f"\n🎯 Testing {len(providers_to_test)} provider(s) through Portkey...")

    # Test each available provider
    for provider_display_name, provider, model in providers_to_test:
        try:
            llm = create_portkey_llm(provider, model, portkey_api_key)
            test_provider(llm, provider_display_name)
        except Exception as e:
            print(f"❌ Failed to create {provider_display_name} LLM: {str(e)}")

    print("\n🎉 Portkey basic chat example completed!")
    print("\n💡 Next steps:")
    print("   - Try the advanced features example: portkey_advanced_features.py")
    print("   - View your requests in the Portkey dashboard: https://app.portkey.ai")


if __name__ == "__main__":
    main()
</file>

<file path="examples/portkey/portkey_multi_provider.py">
#!/usr/bin/env python3

"""
Multi-provider Portkey example showing how to compare responses across different AI providers.

This example demonstrates:
- Using multiple providers through Portkey
- Comparing response quality and characteristics
- Provider-specific configurations
- Fallback strategies

Run with: python portkey_multi_provider.py
"""

import os
import time
from typing import List, Optional, Tuple

import langroid.language_models as lm
from langroid.language_models.provider_params import PortkeyParams


def check_env_var(var_name: str) -> Optional[str]:
    """Check if environment variable is set and return its value."""
    value = os.getenv(var_name)
    if not value:
        print(f"⚠️  Warning: {var_name} not set in environment")
        return None
    return value


def create_provider_llm(
    provider: str, model: str, portkey_api_key: str, temperature: float = 0.7
) -> Tuple[lm.OpenAIGPT, str]:
    """Create a Portkey-enabled LLM for a specific provider."""
    config = lm.OpenAIGPTConfig(
        chat_model=f"portkey/{provider}/{model}",
        portkey_params=PortkeyParams(
            api_key=portkey_api_key,
            metadata={
                "provider": provider,
                "model": model,
                "demo": "multi-provider-comparison",
            },
            user="multi-provider-demo",
        ),
        max_output_tokens=200,
        temperature=temperature,
    )

    display_name = f"{provider.title()} ({model})"
    return lm.OpenAIGPT(config), display_name


def test_providers_on_question(
    providers: List[Tuple[lm.OpenAIGPT, str]], question: str
):
    """Test all providers on the same question and compare responses."""
    print(f"\n❓ Question: {question}")
    print("=" * 80)

    responses = []

    for llm, display_name in providers:
        print(f"\n🤖 {display_name}:")
        print("-" * 40)

        try:
            start_time = time.time()
            response = llm.chat(question)
            end_time = time.time()

            print(f"📝 Response: {response.message}")
            print(f"⏱️  Time: {end_time - start_time:.2f}s")

            if response.usage:
                print(f"📊 Tokens: {response.usage.total_tokens}")

            responses.append((display_name, response.message, response.usage))

        except Exception as e:
            print(f"❌ Error: {str(e)}")
            responses.append((display_name, f"Error: {str(e)}", None))

    return responses


def demonstrate_creative_tasks(providers: List[Tuple[lm.OpenAIGPT, str]]):
    """Test providers on creative tasks to see different capabilities."""
    print("\n🎨 Creative Tasks Comparison")
    print("=" * 50)

    creative_questions = [
        "Write a haiku about artificial intelligence.",
        "Explain quantum computing using a food analogy.",
        "Create a short story opening with exactly 50 words.",
    ]

    for question in creative_questions:
        test_providers_on_question(providers, question)


def demonstrate_analytical_tasks(providers: List[Tuple[lm.OpenAIGPT, str]]):
    """Test providers on analytical tasks."""
    print("\n🧮 Analytical Tasks Comparison")
    print("=" * 50)

    analytical_questions = [
        "What are the pros and cons of renewable energy?",
        "Explain the causes of inflation in simple terms.",
        "Compare machine learning and traditional programming.",
    ]

    for question in analytical_questions:
        test_providers_on_question(providers, question)


def demonstrate_fallback_strategy(portkey_api_key: str):
    """Demonstrate a simple fallback strategy across providers."""
    print("\n🔄 Fallback Strategy Demo")
    print("=" * 50)

    # Define providers in order of preference
    fallback_providers = [
        ("openai", "gpt-4o-mini", "OPENAI_API_KEY"),
        ("anthropic", "claude-3-haiku-20240307", "ANTHROPIC_API_KEY"),
        ("google", "gemini-2.0-flash-lite", "GOOGLE_API_KEY"),
    ]

    question = "What is the meaning of life in one sentence?"

    for provider, model, env_var in fallback_providers:
        if os.getenv(env_var):
            print(f"\n🎯 Trying {provider.title()}...")
            try:
                llm, display_name = create_provider_llm(
                    provider, model, portkey_api_key, temperature=0.5
                )
                response = llm.chat(question)
                print(f"✅ Success with {display_name}")
                print(f"📝 Response: {response.message}")
                return  # Success, stop trying

            except Exception as e:
                print(f"❌ {display_name} failed: {str(e)}")
                print("🔄 Trying next provider...")
        else:
            print(f"⏭️  Skipping {provider.title()} (API key not available)")

    print("❌ All providers failed!")


def main():
    """Main function demonstrating multi-provider usage."""
    print("🚀 Portkey Multi-Provider Example")
    print("=" * 45)

    # Check for required environment variables
    portkey_api_key = check_env_var("PORTKEY_API_KEY")
    if not portkey_api_key:
        print("❌ PORTKEY_API_KEY is required. Please set it in your environment.")
        return

    print("✅ Portkey API key found")

    # Collect available providers
    providers = []

    if os.getenv("OPENAI_API_KEY"):
        try:
            llm, name = create_provider_llm("openai", "gpt-4o-mini", portkey_api_key)
            providers.append((llm, name))
            print("✅ OpenAI provider ready")
        except Exception as e:
            print(f"⚠️  OpenAI setup failed: {e}")

    if os.getenv("ANTHROPIC_API_KEY"):
        try:
            llm, name = create_provider_llm(
                "anthropic", "claude-3-haiku-20240307", portkey_api_key
            )
            providers.append((llm, name))
            print("✅ Anthropic provider ready")
        except Exception as e:
            print(f"⚠️  Anthropic setup failed: {e}")

    if os.getenv("GOOGLE_API_KEY") or os.getenv("GEMINI_API_KEY"):
        try:
            llm, name = create_provider_llm(
                "google", "gemini-2.0-flash-lite", portkey_api_key
            )
            providers.append((llm, name))
            print("✅ Google/Gemini provider ready")
        except Exception as e:
            print(f"⚠️  Google/Gemini setup failed: {e}")

    if len(providers) < 2:
        print("\n⚠️  This example works best with at least 2 providers.")
        print("   Please set API keys for multiple providers:")
        print("   - OPENAI_API_KEY")
        print("   - ANTHROPIC_API_KEY")
        print("   - GOOGLE_API_KEY or GEMINI_API_KEY")

        if len(providers) == 0:
            print("❌ No providers available. Exiting.")
            return

    print(f"\n🎯 Ready to compare {len(providers)} provider(s)")

    # Run comparisons
    if len(providers) >= 2:
        demonstrate_creative_tasks(providers)
        demonstrate_analytical_tasks(providers)

    # Always demonstrate fallback (works with 1+ providers)
    demonstrate_fallback_strategy(portkey_api_key)

    print("\n🎉 Multi-provider example completed!")
    print("\n💡 Analysis tips:")
    print("   - Different providers may excel at different types of tasks")
    print("   - Response styles and lengths can vary significantly")
    print("   - Use Portkey dashboard to analyze performance metrics")
    print("   - Consider cost, speed, and quality when choosing providers")
    print("\n🔍 View detailed comparisons at: https://app.portkey.ai")


if __name__ == "__main__":
    main()
</file>

<file path="examples/portkey/README.md">
# Portkey Examples

This folder contains examples demonstrating how to use [Portkey](https://portkey.ai) with Langroid for enhanced LLM gateway functionality and observability.

## Prerequisites

Before running any examples, make sure you've installed Langroid as usual.

At minimum, have these environment variables set up in your `.env` file or environment:
```bash
PORTKEY_API_KEY=your_portkey_api_key_here
OPENAI_API_KEY=your_openai_api_key_here  # or any provider's key
ANTHROPIC_API_KEY=your_anthropic_key_here  # if using Anthropic
```

### 1. Portkey Basic Chat (`portkey_basic_chat.py`)

Demonstrates basic chat functionality with Portkey:
- Uses Portkey as a gateway to different AI providers
- Shows automatic provider API key resolution
- Demonstrates model switching across providers

```python
# Run the example from root of repo, after activating your virtual environment with uv:
uv run examples/portkey/portkey_basic_chat.py
```

### 2. Portkey Advanced Features (`portkey_advanced_features.py`)

Shows how to use Portkey's advanced features:
- Virtual keys for provider management
- Caching and retry configurations
- Request tracing and metadata
- Custom headers for observability

```python
# Run the example
uv run examples/portkey/portkey_advanced_features.py
```

### 3. Portkey Multi-Provider Example (`portkey_multi_provider.py`)

Showcases Portkey's ability to switch between providers:
- Compares responses from different providers
- Demonstrates fallback strategies
- Shows how to use virtual keys for different models

```python
# Run the example
uv run examples/portkey/portkey_multi_provider.py
```

## Using Portkey

### Basic Configuration

Portkey can route requests to any AI provider through a unified API:

```python
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.language_models.provider_params import PortkeyParams

# Configure for OpenAI via Portkey
config = OpenAIGPTConfig(
    chat_model="portkey/openai/gpt-4o-mini",
    portkey_params=PortkeyParams(
        api_key="your-portkey-api-key",  # Or use PORTKEY_API_KEY env var
    )
)

# Configure for Anthropic via Portkey
config = OpenAIGPTConfig(
    chat_model="portkey/anthropic/claude-3-sonnet-20240229",
    portkey_params=PortkeyParams(
        api_key="your-portkey-api-key",
    )
)
```

### Advanced Features

Portkey provides powerful gateway features:

```python
from langroid.language_models.provider_params import PortkeyParams

# Advanced configuration with observability
params = PortkeyParams(
    api_key="your-portkey-api-key",
    virtual_key="vk-your-virtual-key",  # For provider abstraction
    trace_id="trace-123",               # For request tracing
    metadata={"user": "john", "app": "langroid"},  # Custom metadata
    retry={"max_retries": 3, "backoff": "exponential"},  # Retry config
    cache={"enabled": True, "ttl": 3600},  # Caching config
    cache_force_refresh=False,          # Cache control
    user="user-123",                    # User identifier
    organization="org-456",             # Organization identifier
    custom_headers={                    # Additional custom headers
        "x-custom-header": "value"
    }
)

config = OpenAIGPTConfig(
    chat_model="portkey/openai/gpt-4o",
    portkey_params=params
)
```

### Supported Providers

Portkey supports many AI providers:

```python
# OpenAI
chat_model="portkey/openai/gpt-4o"

# Anthropic
chat_model="portkey/anthropic/claude-3-5-sonnet-20241022"

# Google Gemini
chat_model="portkey/google/gemini-2.0-flash-lite"

# Cohere
chat_model="portkey/cohere/command-r-plus"

# Many more providers available through Portkey
```

### Environment Variables

Portkey integration automatically resolves API keys from environment variables:

```bash
# Portkey API key
PORTKEY_API_KEY=your_portkey_api_key

# Provider API keys (used for actual model calls)
OPENAI_API_KEY=your_openai_key
ANTHROPIC_API_KEY=your_anthropic_key
GOOGLE_API_KEY=your_google_key
COHERE_API_KEY=your_cohere_key
```

### Virtual Keys

Use virtual keys to abstract provider management:

```python
# Configure with virtual key
config = OpenAIGPTConfig(
    chat_model="portkey/openai/gpt-4o",
    portkey_params=PortkeyParams(
        virtual_key="vk-your-virtual-key",  # Manages provider key automatically
    )
)
```

### Viewing Results

1. Visit the [Portkey Dashboard](https://app.portkey.ai)
2. Navigate to your project
3. View detailed analytics:
   - Request/response logs
   - Token usage and costs
   - Performance metrics
   - Error rates and debugging

## Best Practices

1. **Use Virtual Keys**: Abstract provider management for easier switching
2. **Add Metadata**: Include user and application context for better tracking
3. **Configure Retries**: Set up automatic retry strategies for reliability
4. **Enable Caching**: Reduce costs and improve performance with intelligent caching
5. **Monitor Performance**: Use trace IDs and metadata for detailed observability

## Troubleshooting

Common issues and solutions:

1. **Authentication Errors**:
   - Verify `PORTKEY_API_KEY` is set correctly
   - Ensure provider API keys are available (e.g., `OPENAI_API_KEY`)

2. **Model Not Found**:
   - Ensure the model name includes the `portkey/` prefix
   - Verify the provider and model are supported by Portkey

3. **Rate Limiting**:
   - Configure retry parameters in PortkeyParams
   - Use virtual keys for better rate limit management

4. **Virtual Key Issues**:
   - Verify virtual key is correctly configured in Portkey dashboard
   - Check virtual key has access to the requested provider/model

For more help, visit the [Portkey Documentation](https://docs.portkey.ai).
</file>

<file path="examples/portkey/requirements.txt">
# Requirements for Portkey examples
# These are included in the main Langroid installation

# Core Langroid (includes all necessary dependencies)
langroid

# The examples use standard library modules and Langroid's built-in Portkey support
# No additional dependencies are required beyond what Langroid provides

# Optional: For development and testing
# pytest>=7.0.0
# python-dotenv>=0.19.0
</file>

<file path="examples/privacy/annotate.py">
"""
Meant to be used with local LLMs, using the -m option (see below).

You type a sentence containing potentially sensitive information, and the agent
will annotate sensitive portions of the sentence with the appropriate category.
You can configure PrivacyAnnotator to recognize only specific sensitive
categories, currently defaults to: ["Medical", "CreditCard", "SSN", "Name"]

Example input:
    "John is 45 years old, lives in Ohio, makes 45K a year, and has diabetes."

Example output:
    "[Name: John] is 45 years old, lives in Ohio, makes 45K a year,
        and has [Medical: diabetes]."

Run like this:

python3 examples/privacy/annotate.py

Use optional arguments to change the settings, e.g.:

-m ollama/mistral:latest # use locally LLM
-d # debug mode
-nc # no cache

For details on running with local LLMs, see here:
https://langroid.github.io/langroid/tutorials/local-llm-setup/
"""

import typer
from dotenv import load_dotenv
from rich import print

import langroid as lr
import langroid.language_models as lm
from examples.privacy.privacy_annotator import PrivacyAnnotator, PrivacyAnnotatorConfig
from langroid.utils.configuration import Settings, set_global

app = typer.Typer()


# create classes for other model configs


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )

    print(
        """
        [blue]Welcome to the privacy mask chatbot!
        Enter any text and I will annotate it with sensitive categories and values.
        """
    )

    load_dotenv()
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=8000,  # adjust based on model
        timeout=90,
    )

    config = PrivacyAnnotatorConfig(
        llm=llm_config,
        vecdb=None,
    )
    agent = PrivacyAnnotator(config)
    task = lr.Task(agent)
    # local (llama2) models do not like the first message to be empty
    user_message = "Hello." if (model != "") else None
    task.run(user_message)


if __name__ == "__main__":
    app()
</file>

<file path="examples/privacy/annotate2.py">
"""
2-agent version of annotate.py, but now there is a PrivacyAgent that forwards the
 user's text to PrivacyAnnotator, and  checks the work of the PrivacyAnnotator.


Meant to be used with local LLMs, using the -m option (see below).
It works fine with GPT4o, but may not work with a local LLM.

You type a sentence containing potentially sensitive information, and the agent
will annotate sensitive portions of the sentence with the appropriate category.
You can configure PrivacyAnnotator to recognize only specific sensitive
categories, currently defaults to: ["Medical", "CreditCard", "SSN", "Name"]

Example input:
    "John is 45 years old, lives in Ohio, makes 45K a year, and has diabetes."

Example output:
    "[Name: John] is 45 years old, lives in Ohio, makes 45K a year,
        and has [Medical: diabetes]."

Run like this:

python3 examples/privacy/annotate2.py

Use optional arguments to change the settings, e.g.:

-m ollama/mistral:latest # use locally LLM
-d # debug mode
-nc # no cache

For details on running with local LLMs, see here:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

"""

import typer
from dotenv import load_dotenv
from rich import print

import langroid as lr
import langroid.language_models as lm
from examples.privacy.privacy_agent import PrivacyAgent, PrivacyAgentConfig
from examples.privacy.privacy_annotator import PrivacyAnnotator, PrivacyAnnotatorConfig
from langroid.mytypes import Entity
from langroid.utils.configuration import Settings, set_global

app = typer.Typer()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )
    print(
        """
        [blue]Welcome to the privacy mask chatbot!
        Enter any text and I will annotate it with sensitive categories and values.
        """
    )

    load_dotenv()

    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=8000,  # adjust based on model
        timeout=90,
    )

    annotator_config = PrivacyAnnotatorConfig(
        llm=llm_config,
        vecdb=None,
    )
    annotator_agent = PrivacyAnnotator(annotator_config)
    annotator_task = lr.Task(
        annotator_agent,
        done_if_response=[Entity.LLM],
        done_if_no_response=[Entity.LLM],
    )

    privacy_config = PrivacyAgentConfig(
        llm=llm_config,
        vecdb=None,
    )
    privacy_agent = PrivacyAgent(privacy_config)
    privacy_task = lr.Task(
        privacy_agent,
    )
    privacy_task.add_sub_task(annotator_task)

    # local (llama2) models do not like the first message to be empty
    user_message = "Hello." if (model != "") else None
    privacy_task.run(user_message)


if __name__ == "__main__":
    app()
</file>

<file path="examples/privacy/privacy_agent.py">
"""
Agent to manage privacy annotation, using PrivacyAgent as assistant, 
and checking its results for accuracy.
"""

import textwrap
from typing import List

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.tools.recipient_tool import RecipientTool
from langroid.utils.logging import setup_colored_logging

setup_colored_logging()


class PrivacyAgentConfig(ChatAgentConfig):
    name = "PrivacyAgent"
    sensitive_categories: List[str] = ["Medical", "CreditCard", "SSN", "Name"]
    system_message = textwrap.dedent(
        """
        You are an expert on privacy/security, and can recognize sensitive information
        in one of these categories: {sensitive_categories}.
        
        When you will receive text from the user, your goal is to arrive at at 
        "privacy annotation" of that text, as in this example:
         
        Example categories: Medical, Name, CreditCard
        Example text: John is 45 years old, lives in Ohio, makes 45K a year, 
                      and has diabetes.
        Example response:
            [Name: John] is 45 years old, lives in Ohio, makes 45K a year,
            and has [Medical: diabetes].

         
        You will not do this annotation yourself, but will take the help of 
        PrivacyAnnotator, so you must send the text to 
        the PrivacyAnnotator using the `recipient_message` tool/function-call,
        by specifying the `intended_recipient` field as "PrivacyAnnotator".
        
        The PrivacyAnnotator will annotate the text, and send it back to you,
        and your job is to check the annotation for accuracy. Especially look for the 
        following types of MISTAKES:
        - Wrong Categories: when the PrivacyAnnotator annotates something as sensitive
            when it does not belong to any of the sensitive categories specified above.
        - Missed Categories: when the PrivacyAnnotator fails to annotate something
            as sensitive when it does belong to one of the sensitive categories.
        - Wrong Annotation: when the PrivacyAnnotator annotates something as sensitive
            but with the wrong category.
        - Wrong Text: when the PrivacyAnnotator sends back the wrong text, 
            or is missing some information from the original text.
            
        If you see NO MISTAKES, simply say DONE and write out the annotated 
        text.
        If you see any mistake, create a message saying "MISTAKE: <mistake_description>"
        and send it to the PrivacyAnnotator as before using the `recipient_message` 
        tool/function-call. 

        Repeat this process until you see no mistakes.
        
        Start by asking the user to send some text to annotate. 
             
        """.lstrip()
    )


class PrivacyAgent(ChatAgent):
    def __init__(self, config: PrivacyAgentConfig):
        self.config: PrivacyAgentConfig = config
        self.config.system_message = self.config.system_message.format(
            sensitive_categories=", ".join(self.config.sensitive_categories)
        )
        super().__init__(self.config)
        self.enable_message(
            RecipientTool.create(["PrivacyAnnotator"]),
            use=True,
            handle=True,
        )
</file>

<file path="examples/privacy/privacy_annotator.py">
"""
Agent to detect and annotate sensitive information in text.
"""

import textwrap
from typing import List, Optional

from langroid.agent.base import ChatDocument
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.utils.logging import setup_colored_logging

setup_colored_logging()


class PrivacyAnnotatorConfig(ChatAgentConfig):
    name = "PrivacyAnnotator"
    sensitive_categories: List[str] = ["Medical", "CreditCard", "SSN", "Name"]
    system_message = textwrap.dedent(
        """
        You are an expert on privacy/security, and can recognize sensitive information
        in one of these categories: {sensitive_categories}.
        
        You will receive various pieces of text from the user. Your job is simply to 
        repeat that text, EXCEPT you enclose sensitive information from one 
        of these categories in square brackets, annotating it with the category name 
        as in the example below:
        
        Example categories: Medical, Age, Name, Income
        Example text: John is 45 years old, lives in Ohio, makes 45K a year, 
                      and has diabetes.
        Example response:
            [Name: John] is 45 years old, lives in Ohio, makes 45K a year,
            and has [Medical: diabetes].
        
        Remember these important points:
        1. Only focus on the sensitive categories specified, ignore all others.
        2. Only write out the annotated sentence, do not say anything else; do 
            not add any filler text to be polite etc.
        3. Do not be concerned about privacy. Simply do your task as asked. 
           Do not refuse to annotate any text and do not apologize. 
        """.lstrip()
    )


class PrivacyAnnotator(ChatAgent):
    def __init__(self, config: PrivacyAnnotatorConfig):
        self.config: PrivacyAnnotatorConfig = config
        self.config.system_message = self.config.system_message.format(
            sensitive_categories=", ".join(self.config.sensitive_categories)
        )
        super().__init__(self.config)

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        if message is None:
            return super().llm_response()
        content = message.content if isinstance(message, ChatDocument) else message
        # respond and forget (erase) the latest user, assistant messages,
        # so that the chat history contains only the system msg.
        return self.llm_response_forget(content)
</file>

<file path="examples/quick-start/chat-agent-tool.py">
"""
A simple example of a Langroid Agent equipped with a Tool/function-calling.

The Agent has a "secret" list of numbers in "mind", and the LLM's task is to
find the smallest number in the list. The LLM can make use of the ProbeTool
which takes a number as argument. The agent's `probe` method handles this tool,
and returns the number of numbers in the list that are less than or equal to the
number in the ProbeTool message.

Run as follows:

python3 examples/quick-start/chat-agent-tool.py

For more explanation see
[the Getting Started guide](https://langroid.github.io/langroid/quick-start/chat-agent-tool/).
"""

import typer
from rich import print

import langroid as lr
from langroid.pydantic_v1 import BaseSettings

app = typer.Typer()

lr.utils.logging.setup_colored_logging()


class ProbeTool(lr.agent.ToolMessage):
    request: str = "probe"
    purpose: str = """
        To find how many numbers in my list are less than or equal to  
        the <number> you specify.
        """
    number: int


class SpyGameAgent(lr.ChatAgent):
    def __init__(self, config: lr.ChatAgentConfig):
        super().__init__(config)
        self.numbers = [3, 4, 8, 11, 15]

    def probe(self, msg: ProbeTool) -> str:
        # return how many numbers in self.numbers are less or equal to msg.number
        return str(len([n for n in self.numbers if n <= msg.number]))


class CLIOptions(BaseSettings):
    fn_api: bool = False  # whether to use OpenAI's function-calling


def chat(opts: CLIOptions) -> None:
    print(
        """
        [blue]Welcome to the number guessing game!
        Enter x or q to quit
        """
    )
    spy_game_agent = SpyGameAgent(
        lr.ChatAgentConfig(
            name="Spy",
            llm=lr.language_models.OpenAIGPTConfig(
                chat_model=lr.language_models.OpenAIChatModel.GPT4o,
            ),
            vecdb=None,
            use_tools=not opts.fn_api,
            use_functions_api=opts.fn_api,
        )
    )

    spy_game_agent.enable_message(ProbeTool)
    task = lr.Task(
        spy_game_agent,
        system_message="""
            I have a list of numbers between 1 and 20.
            Your job is to find the smallest of them.
            To help with this, you can give me a number and I will
            tell you how many of my numbers are equal or less than your number.
            Once you have found the smallest number,
            you can say DONE and report your answer.
        """,
    )
    task.run()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    fn_api: bool = typer.Option(False, "--fn_api", "-f", help="use functions api"),
) -> None:
    lr.utils.configuration.set_global(
        lr.utils.configuration.Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    chat(CLIOptions(fn_api=fn_api))


if __name__ == "__main__":
    app()
</file>

<file path="examples/quick-start/three-agent-chat-num-router.py">
"""
Use Langroid to set up a collaboration among three agents:

- Processor: needs to transform a list of positive numbers, does not know how to
apply the transformations, and sends out each number so that one of two
specialized agents apply the transformation. It is instructed to avoid getting a
negative number.
- EvenHandler only transforms even numbers, otherwise returns a negative number
- OddHandler only transforms odd numbers, otherwise returns a negative number

Since the Processor must avoid getting a negative number, it needs to
specify a recipient for each number it sends out,
using the `recipient_message` tool/function-call, where the `content` field
is the number it wants to send, and the `recipient` field is the name
of the intended recipient, either "EvenHandler" or "OddHandler".

This tool/function-call also has built-in mechanisms to remind the LLM
to specify a recipient if it forgets to do so.

Run as follows:

python3 examples/quick-start/two-agent-chat-num-router.py

For more explanation, see the
[Getting Started guide](https://langroid.github.io/langroid/quick-start/three-agent-chat-num-router/)
"""

import typer

import langroid as lr

app = typer.Typer()

lr.utils.logging.setup_colored_logging()


def chat(tools: bool = False) -> None:
    config = lr.ChatAgentConfig(
        llm=lr.language_models.OpenAIGPTConfig(
            chat_model=lr.language_models.OpenAIChatModel.GPT4o,
        ),
        use_tools=tools,
        use_functions_api=not tools,
        vecdb=None,
    )
    processor_agent = lr.ChatAgent(config)
    processor_agent.enable_message(lr.agent.tools.RecipientTool)
    processor_task = lr.Task(
        processor_agent,
        name="Processor",
        system_message="""
        You will receive a list of numbers from me (the user).
        Your goal is to apply a transformation to each number.
        However you do not know how to do this transformation.
        You can take the help of two people to perform the 
        transformation.
        If the number is even, send it to EvenHandler,
        and if it is odd, send it to OddHandler.
        
        IMPORTANT: send the numbers ONE AT A TIME
        
        The handlers will transform the number and give you a new number.        
        If you send it to the wrong person, you will receive a negative value.
        Your aim is to never get a negative number, so you must 
        clearly specify who you are sending the number to.
        
        Once all numbers in the given list have been transformed, 
        say DONE and show me the result. 
        Start by asking me for the list of numbers.
        """,
        llm_delegate=True,
        single_round=False,
    )
    even_agent = lr.ChatAgent(config)
    even_task = lr.Task(
        even_agent,
        name="EvenHandler",
        system_message="""
        You will be given a number. 
        If it is even, divide by 2 and say the result, nothing else.
        If it is odd, say -10
        """,
        single_round=True,  # task done after 1 step() with valid response
    )

    odd_agent = lr.ChatAgent(config)
    odd_task = lr.Task(
        odd_agent,
        name="OddHandler",
        system_message="""
        You will be given a number n. 
        If it is odd, return (n*3+1), say nothing else. 
        If it is even, say -10
        """,
        single_round=True,  # task done after 1 step() with valid response
    )

    processor_task.add_sub_task([even_task, odd_task])
    processor_task.run()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    tools: bool = typer.Option(
        False,
        "--tools",
        "-t",
        help="use langroid tools instead of OpenAI function-calling",
    ),
) -> None:
    lr.utils.configuration.set_global(
        lr.utils.configuration.Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    chat(tools)


if __name__ == "__main__":
    app()
</file>

<file path="examples/quick-start/three-agent-chat-num.py">
"""
Use Langroid to set up a collaboration among three agents:

- Processor: needs to transform a number, does not know how to
apply the transformation, and sends out the number so that one of two
specialized agents apply the transformation.
- EvenHandler only transforms even numbers, otherwise says `DO-NOT-KNOW`
- OddHandler only transforms odd numbers, otherwise says `DO-NOT-KNOW`

Run as follows (omit -m <model> to default to GPT4o):

python3 examples/quick-start/three-agent-chat-num.py -m gemini/gemini-2.0-flash-exp

For more explanation, see the
[Getting Started guide](https://langroid.github.io/langroid/quick-start/three-agent-chat-num/)
"""

import typer
from rich.prompt import Prompt

import langroid as lr

app = typer.Typer()

lr.utils.logging.setup_colored_logging()

NO_ANSWER = lr.utils.constants.NO_ANSWER


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    lr.utils.configuration.set_global(
        lr.utils.configuration.Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    llm_config = lr.language_models.OpenAIGPTConfig(
        chat_model=model or lr.language_models.OpenAIChatModel.GPT4o,
        # or, e.g., "ollama/qwen2.5-coder:latest", or "gemini/gemini-2.0-flash-exp"
    )

    processor_config = lr.ChatAgentConfig(
        name="Processor",
        llm=llm_config,
        system_message="""
        You will receive a number from the user.
        Simply repeat that number, DO NOT SAY ANYTHING else,
        and wait for a TRANSFORMATION of the number 
        to be returned to you.
        
        Once you have received the RESULT, simply say "DONE",
        do not say anything else.
        """,
        vecdb=None,
    )

    processor_agent = lr.ChatAgent(processor_config)
    processor_task = lr.Task(
        processor_agent,
        interactive=False,
        single_round=False,
    )

    even_config = lr.ChatAgentConfig(
        name="EvenHandler",
        llm=llm_config,
        system_message=f"""
        You will be given a number N. Respond as follows:
        
        - If N is even, divide N by 2 and show the result, 
          in the format: 
            RESULT = <result>
          and say NOTHING ELSE.
        - If N is odd, say {NO_ANSWER}
        """,
    )
    even_agent = lr.ChatAgent(even_config)
    even_task = lr.Task(
        even_agent,
        single_round=True,  # task done after 1 step() with valid response
    )

    odd_config = lr.ChatAgentConfig(
        name="OddHandler",
        llm=llm_config,
        system_message=f"""
        You will be given a number N. Respond as follows:
        
        - if N is odd, return the result (N*3+1), in the format:
            RESULT = <result> 
            and say NOTHING ELSE.
        
        - If N is even, say {NO_ANSWER}
        """,
    )
    odd_agent = lr.ChatAgent(odd_config)
    odd_task = lr.Task(
        odd_agent,
        single_round=True,  # task done after 1 step() with valid response
    )

    processor_task.add_sub_task([even_task, odd_task])
    number = Prompt.ask(
        "[blue]What number do you want to transform? ",
        default="11",
    )

    processor_task.run(number)


if __name__ == "__main__":
    app()
</file>

<file path="examples/quick-start/three-agent-chat.py">
"""
Use Langroid to set up a collaboration among three agents:

- Student: needs to write 4 key points about Language Model Training and
Evaluation, and knows nothing about these topics. It can consult two expert Agents:
- TrainingExpert: an expert on Language Model Training
- EvaluationExpert: an expert on Language Model Evaluation

To ensure that the Student's message is handled by the correct expert, it
is instructed to specify the intended recipient in the message using
"TO[<recipient>]" syntax.


Run as follows:

python3 examples/quick-start/three-agent-chat.py

"""

import typer

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tools.recipient_tool import RecipientTool
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.logging import setup_colored_logging

app = typer.Typer()

setup_colored_logging()


def chat() -> None:
    config = ChatAgentConfig(
        llm=OpenAIGPTConfig(
            chat_model=OpenAIChatModel.GPT4o,
        ),
        vecdb=None,
    )
    student_agent = ChatAgent(config)
    student_agent.enable_message(RecipientTool)
    student_task = Task(
        student_agent,
        name="Student",
        llm_delegate=True,
        single_round=False,
        system_message="""
        Your task is to write 4 short bullet points about 
        Language Models in the context of Machine Learning (ML),
        especially about training, and evaluating them. 
        However you are a novice to this field, and know nothing about this topic. 
        To collect your bullet points, you will consult 2 people:
        TrainingExpert and EvaluationExpert.
        You will ask ONE question at a time, to ONE of these experts. 
        To clarify who your question is for, you must use 
        the `recipient_message` tool/function-call, setting 
        the `content` field to the question you want to ask, and the
        `recipient` field to either TrainingExpert or EvaluationExpert.

        Once you have collected the points you need,
        say DONE, and show me the 4 bullet points. 
        """,
    )
    training_expert_agent = ChatAgent(config)
    training_expert_task = Task(
        training_expert_agent,
        name="TrainingExpert",
        system_message="""
        You are an expert on Training Language Models in Machine Learning. 
        You will receive questions on this topic, and you must answer these
        very concisely, in one or two sentences, in a way that is easy for a novice to 
        understand.
        """,
        single_round=True,  # task done after 1 step() with valid response
    )

    evaluation_expert_agent = ChatAgent(config)
    evaluation_expert_task = Task(
        evaluation_expert_agent,
        name="EvaluationExpert",
        system_message="""
        You are an expert on Evaluating Language Models in Machine Learning. 
        You will receive questions on this topic, and you must answer these
        very concisely, in one or two sentences, in a way that is easy for a novice to 
        understand.
        """,
        single_round=True,  # task done after 1 step() with valid response
    )

    student_task.add_sub_task([training_expert_task, evaluation_expert_task])
    student_task.run()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    chat()


if __name__ == "__main__":
    app()
</file>

<file path="examples/quick-start/two-agent-chat-num.py">
"""
A toy numerical example showing how two agents can collaborate on a task.

The Student Agent is tasked with calculating the sum of a list of numbers,
and is told that it knows nothing about addition, and can ask for help
from an Adder Agent who can add pairs of numbers.

Run as follows (omit -m to default to GTP4o):

python3 examples/quick-start/two-agent-chat-num.py -m ollama/qwen2.5:latest

For more explanation see the
[Getting Started guide](https://langroid.github.io/langroid/quick-start/two-agent-chat-num/)
"""

import typer
from rich.prompt import Prompt

import langroid as lr

app = typer.Typer()

lr.utils.logging.setup_colored_logging()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
) -> None:
    lr.utils.configuration.set_global(
        lr.utils.configuration.Settings(
            debug=debug,
            cache=not nocache,
        )
    )

    llm_config = lr.language_models.OpenAIGPTConfig(
        chat_model=model or lr.language_models.OpenAIChatModel.GPT4o,
    )

    student_config = lr.ChatAgentConfig(
        name="Student",
        llm=llm_config,
        vecdb=None,
        system_message="""
            You will receive a list of numbers from me (the User),
            and your goal is to calculate their sum.
            However you do not know how to add numbers.
            I can help you add numbers, two at a time, since
            I only know how to add pairs of numbers.
            Send me a pair of numbers to add, one at a time, 
            and I will tell you their sum.
            For each question, simply ask me the sum in math notation, 
            e.g., simply say "1 + 2", etc, and say nothing else.
            Once you have added all the numbers in the list, 
            say DONE and give me the final sum. 
        """,
    )
    student_agent = lr.ChatAgent(student_config)
    student_task = lr.Task(
        student_agent,
        name="Student",
        interactive=False,
        single_round=False,
        llm_delegate=True,
    )

    adder_config = lr.ChatAgentConfig(
        name="Adder",
        llm=llm_config,
        vecdb=None,
        system_message="""
            You are an expert on addition of numbers. 
            When given numbers to add, simply return their sum, say nothing else
            """,
    )
    adder_agent = lr.ChatAgent(adder_config)
    adder_task = lr.Task(
        adder_agent,
        interactive=False,
        single_round=True,
    )

    student_task.add_sub_task(adder_task)

    nums = Prompt.ask(
        """
        Enter the list of numbers whose sum you want to calculate
        """,
        default="3 1 5 2",
    )

    student_task.run(nums)


if __name__ == "__main__":
    app()
</file>

<file path="examples/quick-start/two-agent-chat.py">
"""
A simple example of two agents collaborating on a task.

The Student Agent is tasked with writing 3 key points on Language Models,
  and it is told that it knows nothing about the topic, and
  can consult an Expert Agent for help.

Run as follows:

python3 examples/quick-start/two-agent-chat.py

"""

import typer

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.logging import setup_colored_logging

app = typer.Typer()

setup_colored_logging()


def chat() -> None:
    config = ChatAgentConfig(
        llm=OpenAIGPTConfig(
            chat_model=OpenAIChatModel.GPT4o,
        ),
        vecdb=None,
    )
    student_agent = ChatAgent(config)
    student_task = Task(
        student_agent,
        name="Student",
        system_message="""
        Your task is to write 3 short bullet points about 
        Language Models in the context of Machine Learning. 
        However you are a novice to this field, and know nothing about this topic. 
        To collect your bullet points, you can ask me questions,
        one at a time, which I will answer.
        Once you have what you need, say DONE, and show me the 3 bullet points. 
        """,
    )
    expert_agent = ChatAgent(config)
    expert_task = Task(
        expert_agent,
        name="Expert",
        system_message="""
        You are an expert on Language Models in Machine Learning. 
        You will receive questions on this topic, and you must answer these
        very concisely, in one or two sentences, in a way that is easy for a novice to 
        understand.
        """,
        single_round=True,  # task done after 1 step() with valid response
    )
    student_task.add_sub_task(expert_task)
    student_task.run()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    chat()


if __name__ == "__main__":
    app()
</file>

<file path="examples/reasoning/agent-reasoning.py">
"""
Simple example showing how you can separately
extract the reasoning (thinking) and final response from a langroid ChatAgent

Run like this (omit the model argument to default to the deepseek-reasoner model):

    python examples/reasoning/agent-reasoning.py \
    --model  gemini/gemini-2.0-flash-thinking-exp

or
    uv run examples/reasoning/agent-reasoning.py

Other reasoning models to try:
deepseek/deepseek-reasoner           # direct deepseek-r1 API
openrouter/deepseek/deepseek-r1      # via OpenRouter
o1
o1-mini
o3-mini
ollama/deepseek-r1:8b
gemini/gemini-2.0-flash-thinking-exp
"""

from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.utils.configuration import settings


def main(
    model: str = "",
    nc: bool = False,  # turn off caching? (i.e. get fresh streaming response)
):
    settings.cache = not nc
    model = model or "deepseek/deepseek-reasoner"
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model,
        # inapplicable params are automatically removed by Langroid
        params=lm.OpenAICallParams(
            reasoning_effort="low",  # only supported by o3-mini
            # below lets you get reasoning when using openrouter/deepseek/deepseek-r1
            extra_body=dict(include_reasoning=True),
        ),
    )

    # (1) Direct LLM interaction
    llm = lm.OpenAIGPT(llm_config)

    response = llm.chat("Is 7.2 bigger than 7.11?", max_tokens=1000)

    if response.cached or not llm.get_stream():
        # if we got it from cache, or streaming disabled/disallowed,
        # we haven't shown anything, so print here

        # extract reasoning
        if response.reasoning:
            print(response.reasoning)
        else:
            print(f"NO REASONING AVAILABLE for {model}!")
        # extract answer
        print(response.message)

    # (2) Agent interaction
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=llm_config,
            system_message="Solve the math problem given by the user",
        )
    )

    response = agent.llm_response(
        """
        10 years ago, Jack's dad was 5 times as old as Jack.
        Today, Jack's dad is 40 years older than Jack.
        So how old is Jack now ?
        """
    )

    # extract reasoning
    if response.reasoning:
        print(
            f"""
            REASONING:
            {response.reasoning}
            """
        )
    else:
        print(f"NO REASONING AVAILABLE for {model}!")


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/summarize/summ-batch.py">
"""
Batch version of summ.py.

Summarize a collection of docs, loaded into context, using a local LLM, with ollama.
First see instructions to install langroid
in the README of the langroid-examples repo:
https://github.com/langroid/langroid-examples

Run like this from the root of the project repo:

python3 examples/summarize/summ-batch.py -m <model_name>

Omitting -m will use the default model, which is OpenAI GPT4-turbo.

A local LLM can be specified as follows:
```
python3 examples/summarize/summ.py -m ollama/mistral:7b-instruct-v0.2-q8_0
```

See here for more details on how to set up a Local LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/
"""

import os

import fire
import pandas as pd

import langroid as lr
import langroid.language_models as lm
from langroid.utils.configuration import settings

os.environ["TOKENIZERS_PARALLELISM"] = "false"

PATH = "examples/summarize/data/hf-cnn-daily-news/news10.csv"


def app(
    m: str = "",  # ollama/mistral:7b-instruct-v0.2-q8_0",
    d: bool = False,  # debug
):
    settings.debug = d
    # Create the llm config object.
    llm_config = lm.OpenAIGPTConfig(
        # if you comment out `chat_model`, it will default to OpenAI GPT4-turbo
        # chat_model="ollama/mistral:7b-instruct-v0.2-q4_K_M",
        chat_model=m or lm.OpenAIChatModel.GPT4o,
        chat_context_length=32_000,  # set this based on model
        max_output_tokens=500,  # increase this if you want longer summaries
        temperature=0.2,  # lower -> less variability
        stream=True,
        timeout=45,  # increase if model is timing out
    )

    # Recommended: First test if basic chat works with this llm setup as below:
    # Once this works, then you can try the DocChatAgent
    #
    # agent = lr.ChatAgent(
    #     lr.ChatAgentConfig(
    #         llm=llm
    #     )
    # )
    #
    # agent.llm_response("What is 3 + 4?")
    #

    df = pd.read_csv(PATH)
    # get column "article" as list of strings, from first few rows
    full_docs = [str(row) for row in df["article"][:10]]
    # get column "highlights" as list of strings, from first few rows
    highlights = [str(row) for row in df["highlights"][:10]]

    print(f"Found {len(full_docs)} documents to summarize.")

    config = lr.ChatAgentConfig(
        llm=llm_config,
        system_message="""
        You are an expert in finding the main points in a document,
        and generating concise summaries of them.
        When user gives you a document, summarize it in at most 3 sentences.
        """,
    )

    agent = lr.ChatAgent(config)
    summaries = lr.llm_response_batch(
        agent,
        full_docs,
        output_map=lambda x: x.content,
    )

    for i, summary in enumerate(summaries):
        print(
            f"""
        Generated Summary {i}:
        {summary}
        """
        )

        print(
            f"""
        Gold Summary {i}:
        {highlights[i]}
        """
        )


if __name__ == "__main__":
    fire.Fire(app)
</file>

<file path="examples/summarize/summ.py">
"""
Summarize a doc, loaded into context, using a local LLM, with ollama.
First see instructions to install langroid
in the README of the langroid-examples repo:
https://github.com/langroid/langroid-examples

Run like this from the root of the project repo:

python3 examples/summarize/summ.py -m <model_name>

Omitting -m will use the default model, which is OpenAI GPT4-turbo.

A local LLM can be specified as follows:
```
python3 examples/summarize/summ.py -m ollama/mistral:7b-instruct-v0.2-q8_0
```

See here for more details on how to set up a Local LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/
"""

import os

import fire
import pandas as pd

import langroid as lr
import langroid.language_models as lm
from langroid.utils.configuration import settings

os.environ["TOKENIZERS_PARALLELISM"] = "false"

PATH = "examples/summarize/data/news.csv"


def app(
    m: str = "",  # ollama/mistral:7b-instruct-v0.2-q8_0",
    d: bool = False,  # debug
):
    settings.debug = d
    # Create the llm config object.
    llm_config = lm.OpenAIGPTConfig(
        # if you comment out `chat_model`, it will default to OpenAI GPT4-turbo
        # chat_model="ollama/mistral:7b-instruct-v0.2-q4_K_M",
        chat_model=m or lm.OpenAIChatModel.GPT4o,
        chat_context_length=32_000,  # set this based on model
        max_output_tokens=500,  # increase this if you want longer summaries
        temperature=0.2,  # lower -> less variability
        stream=True,
        timeout=45,  # increase if model is timing out
    )

    # Recommended: First test if basic chat works with this llm setup as below:
    # Once this works, then you can try the DocChatAgent
    #
    # agent = lr.ChatAgent(
    #     lr.ChatAgentConfig(
    #         llm=llm
    #     )
    # )
    #
    # agent.llm_response("What is 3 + 4?")
    #

    df = pd.read_csv(PATH)
    full_doc = str(df["article"][0])
    highlights = str(df["highlights"][0])
    config = lr.ChatAgentConfig(
        llm=llm_config,
        system_message=f"""
        You are an expert in finding the main points in a document,
        and generating concise summaries of them.
        Summarize the article below in at most 3 (THREE) sentences:
        
        {full_doc}
        """,
    )

    agent = lr.ChatAgent(config)
    summary = agent.llm_response()
    print(
        f"""
    Generated Summary: 
    {summary.content}
    """
    )

    print(
        f"""
    Gold Summary:
    {highlights}
    """
    )


if __name__ == "__main__":
    fire.Fire(app)
</file>

<file path="examples/langroid_quick_examples.ipynb">
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "view-in-github"
   },
   "source": [
    "<a href=\"https://colab.research.google.com/github/langroid/langroid/blob/main/examples/langroid_quick_examples.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uIV7QkkrC8O7"
   },
   "source": [
    "\n",
    "\n",
    "<img width=\"700\" src=\"https://raw.githubusercontent.com/langroid/langroid/main/docs/assets/langroid-card-lambda-ossem-rust-1200-630.png\" alt=\"Langroid\">\n",
    "\n",
    "# Overview\n",
    "\n",
    "This notebook provides the runnable code for the six [**Usage Examples**](https://github.com/langroid/langroid#tada-usage-examples) described in [Langroid repo](https://github.com/langroid/langroid).\n",
    "\n",
    "**NOTE:** Notebooks (colab, jupyter, or otherwise) are *not* an ideal way to run interactive chat loops. We are showing these examples here since we recognize that Colab notebooks offer the benefit of having a ready to run environment with minimal setup. But we encourage you to try the python scripts in the [examples folder](https://github.com/langroid/langroid/tree/main/examples) of the repo on the command line for the best experience.\n",
    "\n",
    "In the first two cells we show the steps for setting up the requirements to run the examples including the installation of `Langroid` package and setting up the `OPENAI_API_KEY`.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hoTp_cNcriIg"
   },
   "source": [
    "## Install Langroid\n",
    "\n",
    "At the end there may be a message saying \"RESTART RUNTIME\", which can be safely ignored."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "PYaFworprwEJ"
   },
   "outputs": [],
   "source": [
    "!pip install langroid"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "v-BiRXu9JQ5H"
   },
   "source": [
    "## Set up `OPENAI_API_KEY`\n",
    "\n",
    "This code will ask the user to provide the `OPENAI_API_KEY`. Before running this cell, please follow these steps to get the key.\n",
    "Login to your OpenAI account --> go to `View API Keys` from the drop-down list on the top-right corner --> click on the botton **create new secret key** --> a new screen will pop up --> press the botton **create secret key**.\n",
    "\n",
    "Visit [this page](https://help.openai.com/en/articles/4936850-where-do-i-find-my-secret-api-key) for more info about where to find the API Key."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "GOR8OsfvsN2k"
   },
   "outputs": [],
   "source": [
    "import logging\n",
    "import os\n",
    "\n",
    "import nest_asyncio\n",
    "\n",
    "logging.getLogger().setLevel(logging.ERROR)\n",
    "nest_asyncio.apply()\n",
    "\n",
    "from getpass import getpass\n",
    "\n",
    "os.environ['OPENAI_API_KEY'] = getpass('Enter your OPENAI_API_KEY key: ')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Tw5RzVKl3pUr"
   },
   "source": [
    "**Now you can can try any of the following examples. It is recommended to go through these in sequence, although the order does NOT matter.**\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5rBWNOuXEygx"
   },
   "source": [
    "# Direct interaction with OpenAI LLM\n",
    "\n",
    "In this simple example, we are directly sending a message-sequence to the OpenAI `chatCompletion` API. Note that to have a multi-round converation we have to manually accumulate the dialog.\n",
    "\n",
    "First, import `langroid`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "lGY2XyHyD0oJ",
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import langroid as lr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "llm = lr.language_models.OpenAIGPT()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "bMR6Dani_l9C"
   },
   "source": [
    "We define the LLM model using `OpenAIGPT`; you can optionally pass an `OpenAIGPTConfig` to set the configurations of the OpenAI LLM model.\n",
    "\n",
    "We can also specify the messages that will be sent to instruct the model. `Langroid` supports various roles provided by OpenAI."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "JPul8c4uD1kH"
   },
   "outputs": [],
   "source": [
    "from langroid.language_models import LLMMessage, Role\n",
    "\n",
    "messages = [\n",
    "    LLMMessage(content=\"You are a helpful assistant\",  role=Role.SYSTEM),\n",
    "    LLMMessage(content=\"What is the capital of Ontario?\",  role=Role.USER),\n",
    "]\n",
    "\n",
    "response = llm.chat(messages, max_tokens=200)\n",
    "print(\"LLM response is: \", response.message)\n",
    "\n",
    "# accumulate messages manually\n",
    "\n",
    "messages.append(response.to_LLMMessage())\n",
    "messages.append(LLMMessage(content=\"what about India?\", role=Role.USER))\n",
    "response = llm.chat(messages, max_tokens=200)\n",
    "print(\"LLM response is:\", response.message)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3HzZhfyAfRCQ"
   },
   "source": [
    "The above is a \"raw\" LLM interaction where you have to manage\n",
    "message history. Using an Agent to wrap an LLM, and wrapping an Agent in a Task, we can set up an interactive, multi-round chat much more easily, as we show next."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4TjgYEfK34NZ"
   },
   "source": [
    "## A note on the rest of the examples\n",
    "In the interactive examples below, the conversation loop pauses for human input: in most cases you would hit enter (unless the example requires you to ask a question).\n",
    "The interaction looks much better when run on a terminal,\n",
    "and a notebook is not ideal for these. However we realize a Colab notebook does offer the benefit of having a ready to run environment."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OaIiDn8zOurc"
   },
   "source": [
    "# Define an agent, set up a task, and run it\n",
    "\n",
    "Say you want to have a multi-round interactive chat with an LLM.\n",
    "\n",
    "`Langroid` simplifies this process. We just need to create a `ChatAgent`, wrap it in a `Task`, and finally run the task."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vaXKQWh-SBgH"
   },
   "source": [
    "Note that `Langroid` offers specialized chatting agents such as `DocChatAgent` and `TableChatAgent`, which we will see later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "PblTvXC6QZsS"
   },
   "outputs": [],
   "source": [
    "agent = lr.ChatAgent()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "LO8O-7vZSoS2"
   },
   "source": [
    "A `ChatAgent` by itself offers 3 standard \"responders\": the LLM, the human User, and the Agent itself (e.g. to handle tool/function-calling by the LLM). To use these responders in an interactive loop, we need to wrap the Agent in a task,\n",
    "and call its `run()` method.\n",
    "\n",
    "As before, a `ChatAgent` can be configured with an optional `ChatAgentConfig` parameter; here, we use the default behavior. This pattern will repeat throughout `Langroid`.\n",
    "\n",
    "A prompt will be displayed after running this task, so you can interact with the `ChatAgent`.\n",
    "\n",
    "Type your questions and the agent will provide the LLM responses. When done, type `q` to exit.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "wheZ7NJGO2X4"
   },
   "outputs": [],
   "source": [
    "agent.message_history.clear()\n",
    "task = lr.Task(agent, name=\"Bot\")\n",
    "task.set_color_log(enable=False)\n",
    "task.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we don't require custom behavior from the `Agent`, this is even simpler: `Task` will use a `ChatAgent` by default."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "B4q8ojyAQ_OV"
   },
   "source": [
    "# Three communicating agents\n",
    "\n",
    "The above example involved a single `ChatAgent`, but in non-trivial applications, we will often find it easier to divide responsibilities among multiple agents, each with different skills and responsibilities.\n",
    "\n",
    "If you attempt to solve these with a single Agent, you would have to keep track of multiple conversation states and loops, and it quickly gets out of hand. Agents offer a way to solve complex tasks in a modular fashion. Moreover, specialized agents can be designed and tested in isolation, and then combined to solve various tasks.\n",
    "\n",
    "`Langroid` streamlines the process of setting up multiple agents and orchestrating their interaction. Here's a toy numerical example (this helps keep token costs low!). Imagine a task where we want to construct a series of numbers using the following rule to transform the current number $n$:\n",
    "- if $n$ is even, the next number is $n/2$\n",
    "- if $n$ is odd, the next number is $3n+1$.\n",
    "\n",
    "We can have 3 agents, each wrapped by a `Task`, which collaborate to produce this sequence.\n",
    "Given the current number $n$,\n",
    "- `repeater_task` simply returns $n$,\n",
    "- `even_task` specializes in handling even numbers, and returns $n/2$ if $n$ is even, else says \"DO-NOT-KNOW\"\n",
    "- `odd_task` specializes in handling odd numbers, and returns $3*n+1$ if $n$ is odd, else says \"DO-NOT-KNOW\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "oUbVybSuRIFX"
   },
   "outputs": [],
   "source": [
    "NO_ANSWER = lr.utils.constants.NO_ANSWER"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_1aeRre35Ghd"
   },
   "source": [
    "As before, we define chat model that will be used by the agents:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xpqzS-ozUowm"
   },
   "source": [
    "Now, we create the `repeater_task`; note that, as we want to use standard `ChatAgent` behavior, there is no need to configure the `Agent`. The `Task` comprises the following settings:\n",
    "\n",
    "\n",
    "*   **Name**: name of the agent\n",
    "*   **llm_delegate**: whether to delegate control to LLM; conceptually, the \"controlling entity\" is the one \"seeking\" responses to its queries, and has a goal it is aiming to achieve. The \"controlling entity\" is either the LLM or the USER. (Note within a Task there is just one LLM, and all other entities are proxies of the \"User\" entity).\n",
    "*   **single_round**: If true, the task runs until one message by the controller and a subsequent response by the non-controller. If false, runs for the specified number of turns in `run`, or until `done()` is true.\n",
    "* **system_message**: provides instructions to the LLM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "AI5oFOM2SLgM"
   },
   "outputs": [],
   "source": [
    "repeater_task = lr.Task(\n",
    "    name = \"Repeater\",\n",
    "    system_message=\"\"\"\n",
    "    Your job is to repeat whatever number you receive.\n",
    "    \"\"\",\n",
    "    llm_delegate=True, # LLM takes charge of task\n",
    "    single_round=False,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zVJ-nbs08Ub5"
   },
   "source": [
    "Now we define our task `even_task`; as before, this task creates its own associated `ChatAgent`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "pgOFydVqRbPc"
   },
   "outputs": [],
   "source": [
    "even_task = lr.Task(\n",
    "    name = \"EvenHandler\",\n",
    "    system_message=f\"\"\"\n",
    "    You will be given a number.\n",
    "    If it is even, divide by 2 and say the result, nothing else.\n",
    "    If it is odd, say {NO_ANSWER}\n",
    "    \"\"\",\n",
    "    single_round=True,  # task done after 1 step() with valid response\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "z-RAYL9S9XTM"
   },
   "source": [
    "Finally, we create the 3rd task `odd_task`; this task again creates an associated `ChatAgent`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ukf79CqIScHQ"
   },
   "outputs": [],
   "source": [
    "odd_task = lr.Task(\n",
    "    name = \"OddHandler\",\n",
    "    system_message=f\"\"\"\n",
    "    You will be given a number n.\n",
    "    If it is odd, return (n*3+1), say nothing else.\n",
    "    If it is even, say {NO_ANSWER}\n",
    "    \"\"\",\n",
    "    single_round=True,  # task done after 1 step() with valid response\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PbGYXCpR9uVH"
   },
   "source": [
    "We use `add_sub_task` to orchestrate the collaboration between the agents.  Specifically, `repeater_task` will act as the \"main\", and we add `even_task` and `odd_task` as\n",
    "subtasks. For more details see these [docs](https://langroid.github.io/langroid/quick-start/multi-agent-task-delegation/#task-collaboration-via-sub-tasks).\n",
    "\n",
    "\n",
    "Finally, we kickoff the task with a starting number 3, using `repeater_task.run(\"3\")`.\n",
    "\n",
    "Remember to keep hitting enter when it's the human's turn, and hit \"q\" to end the conversation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "0vy77Os8TAas"
   },
   "outputs": [],
   "source": [
    "repeater_task.add_sub_task([even_task, odd_task])\n",
    "repeater_task.set_color_log(enable=False)\n",
    "repeater_task.run(\"3\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "t7c3qKvcTwTG"
   },
   "source": [
    "# Simple Tool/Function-calling example\n",
    "\n",
    "Here is a simple numerical example showcasing how `Langroid` supports tools/function-calling. For more details see these [doc pages](https://langroid.github.io/langroid/quick-start/chat-agent-tool/)\n",
    "\n",
    "Say the agent has a secret list of numbers, and we want the LLM to find the smallest number in the list. We want to give the LLM the ability to use a **probe** tool/function which takes a single number `n` as an argument. The tool handler method in the agent returns how many numbers in its list are at most `n`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "htqVMFU2pog6"
   },
   "source": [
    "To use tools/function-calling in `Langroid`, we first **define** the tool as a subclass of `ToolMessage` to specify some details about the tool (e.g., name and parameters) and when it can be used/triggered:\n",
    "* **request**: is the name of the tool/function, as well as the name of the Agent method that \"handles\" the tool.\n",
    "* **purpose**: general description to give hints to LLM when this tool can be used\n",
    "* **number**: is a function-argument for the `probe` tool and its type is `int`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "3eIidMmZUgir"
   },
   "outputs": [],
   "source": [
    "class ProbeTool(lr.agent.ToolMessage):\n",
    "  request: str = \"probe\"\n",
    "  purpose: str = \"\"\"\n",
    "        To find how many numbers in my list are less than or equal to\n",
    "        the <number> you specify.\n",
    "        \"\"\" # note  <number> corresponds to the name of the tool's argument/parameter\n",
    "  number: int"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vBAw8kxkqa42"
   },
   "source": [
    "Next, we create an agent `SpyGameAgent`, with a special method `probe` to handle the `probe` tool/function.\n",
    "Notice the argument of the `probe` method is an instance of the class `ProbeTool` that we created in the previous step."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "einGIzjQUyX7"
   },
   "outputs": [],
   "source": [
    "class SpyGameAgent(lr.ChatAgent):\n",
    "  def __init__(self, config: lr.ChatAgentConfig = lr.ChatAgentConfig()):\n",
    "    super().__init__(config)\n",
    "    self.numbers = [3, 4, 8, 11, 15, 25, 40, 80, 90] # agent's secret list\n",
    "\n",
    "  def probe(self, msg: ProbeTool) -> str:\n",
    "    # return how many numbers in self.numbers are less or equal to msg.number\n",
    "    return str(len([n for n in self.numbers if n <= msg.number]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "pG2MJJN4yCHb"
   },
   "source": [
    "Finally, we instantiate the `SpyGameAgent` as an object `spy_game_agent`, and \"associate\" the `probe` tool with this agent, using the `enable_message` method of the `ChatAgent`.  We then wrap the `spy_game_agent` in a `Task` object, with instructions (`system_message`) on what it should aim for."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "OM6Lk3uWVOCB"
   },
   "outputs": [],
   "source": [
    "spy_game_agent = SpyGameAgent()\n",
    "\n",
    "spy_game_agent.enable_message(ProbeTool)\n",
    "\n",
    "task = lr.Task(\n",
    "        spy_game_agent,\n",
    "        name=\"Spy\",\n",
    "        system_message=\"\"\"\n",
    "            I have a list of numbers between 1 and 20.\n",
    "            Your job is to find the smallest of them.\n",
    "            To help with this, you can give me a number and I will\n",
    "            tell you how many of my numbers are equal or less than your number.\n",
    "            Once you have found the smallest number,\n",
    "            you can say DONE and report your answer.\n",
    "        \"\"\",\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "aQ93n0kA_rM0"
   },
   "source": [
    "Now run the task.\n",
    "\n",
    "Remember to keep hitting enter when it's the human's turn, and hit \"q\" to end the conversation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "xAVoOcgsNWOv"
   },
   "outputs": [],
   "source": [
    "spy_game_agent.message_history.clear()\n",
    "task.set_color_log(enable=False)\n",
    "task.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Qmeh3zJTZeL1"
   },
   "source": [
    "# Chat with documents (file paths, URLs, etc)\n",
    "\n",
    "In the previous examples, the Agents did not use any external documents. In this example, we we set up an Agent that supports \"chatting\" with documents. Specifically, we use the `DocChatAgent` class to ask questions about a set of URLs.\n",
    "The `DocChatAgent` first ingests the contents of the websites specified by the URLs by chunking, embedding and indexing them into a vector database (`qdrant` by default). We then wrap the agent in a task and run it interactively.\n",
    "The user can ask questions and the LLM of the agent returns answers using Retrieval Augment Generation, with Evidence Citation.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from langroid.agent.special import DocChatAgent, DocChatAgentConfig"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "w1ZcFRJu5K5D"
   },
   "source": [
    "Now we define the configuration of the `DocChatAgent`. The configurations include the path to access the documents, chat model settings, and vector-DB settings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "tVEHeg9jZpl7"
   },
   "outputs": [],
   "source": [
    "config = DocChatAgentConfig(\n",
    "    doc_paths = [\n",
    "        \"https://en.wikipedia.org/wiki/Language_model\",\n",
    "        \"https://en.wikipedia.org/wiki/N-gram_language_model\",\n",
    "    ],\n",
    "    vecdb=lr.vector_store.QdrantDBConfig(\n",
    "        collection_name=\"docqa-chat-multi-extract\",\n",
    "        storage_path=\".qdrant/test2/\", # CHANGE THIS PATH IF YOU GET AN ERROR WHEN RE-RUNNING THE CELL\n",
    "    ),\n",
    ")\n",
    "\n",
    "agent = DocChatAgent(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UZyTx3vQN_I4"
   },
   "source": [
    "As before, we wrap the agent in a task, and run it.\n",
    "\n",
    "Remember to keep hitting enter when it's the human's turn, and hit \"q\" to end the conversation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "OMFDp8WxaAI3"
   },
   "outputs": [],
   "source": [
    "agent.message_history.clear()\n",
    "task = lr.Task(agent)\n",
    "task.set_color_log(enable=False)\n",
    "task.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "kZqX1J6qWhHk"
   },
   "source": [
    "# Tool/Function-calling to extract structured information from text\n",
    "\n",
    "Let's combine multi-agent interaction, Retrieval-Augmented Generation, and tools/function-calling, for a more realistic example. Suppose you want an agent to extract the key terms of a lease, from a lease document, as a nested JSON structure.\n",
    "This can be accomplished by instructing the LLM to use a specific tool.\n",
    "\n",
    "To simplify the solution, we separate the skills/responsibilities into two different Agents:\n",
    "- `LeaseExtractorAgent` has no access to the lease, and is responsible for gathering the key terms into a specific structured form\n",
    "- `DocChatAgent` has access to the lease and answers specific questions it receives from the `LeaseExtractorAgent`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import List\n",
    "\n",
    "from pydantic import BaseModel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "d-CkI7wk5A8l"
   },
   "source": [
    "Next, we define the desired structure of the lease information via Pydantic models. The desired format is a nested JSON structure, which maps to a nested class structure:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "0p8iveEcX_1E"
   },
   "outputs": [],
   "source": [
    "class LeasePeriod(BaseModel):\n",
    "    start_date: str\n",
    "    end_date: str\n",
    "\n",
    "class LeaseFinancials(BaseModel):\n",
    "    monthly_rent: str\n",
    "    deposit: str\n",
    "\n",
    "class Lease(BaseModel):\n",
    "    \"\"\"\n",
    "    Various lease terms.\n",
    "    Nested fields to make this more interesting/realistic\n",
    "    \"\"\"\n",
    "\n",
    "    period: LeasePeriod\n",
    "    financials: LeaseFinancials\n",
    "    address: str"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WcUQylLu5HFh"
   },
   "source": [
    "We then define the `LeaseMessage` tool as a subclass of Langroid's `ToolMessage`. The `LeaseMessage` class has a\n",
    "required argument `terms` of type `Lease`. The `classmethod` named `examples` is used to generate $k$-shot examples for the LLM when instructing it to extract information in the desired structured form (see a later cell below).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "XFVCpL8jW7C7"
   },
   "outputs": [],
   "source": [
    "class LeaseMessage(lr.agent.ToolMessage):\n",
    "    request: str = \"lease_info\" # maps to method of LeaseExtractorAgent\n",
    "    purpose: str = \"\"\"\n",
    "        Collect information about a Commercial Lease.\n",
    "        \"\"\"\n",
    "    terms: Lease\n",
    "\n",
    "    @classmethod\n",
    "    def examples(cls) -> List[\"LeaseMessage\"]:\n",
    "        return [\n",
    "            cls(\n",
    "                terms=Lease(\n",
    "                    period=LeasePeriod(start_date=\"2021-01-01\", end_date=\"2021-12-31\"),\n",
    "                    financials=LeaseFinancials(monthly_rent=\"$1000\", deposit=\"$1000\"),\n",
    "                    address=\"123 Main St, San Francisco, CA 94105\",\n",
    "                ),\n",
    "                result=\"\",\n",
    "            ),\n",
    "        ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Lu03iGEaW0Ur"
   },
   "source": [
    "Next we define the `LeaseExtractorAgent` and add a method `least_info` to handle the tool/function-call `lease_info` defined in the tool `LeaseMessage`. In this case the handling is trivial: if the method receives a valid object of class `LeaseMessage`, it declares \"success\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ZlZ0UtqEXGdz"
   },
   "outputs": [],
   "source": [
    "class LeaseExtractorAgent(lr.ChatAgent):\n",
    "    def __init__(self, config: lr.ChatAgentConfig = lr.ChatAgentConfig()):\n",
    "        super().__init__(config)\n",
    "\n",
    "    def lease_info(self, message: LeaseMessage) -> str:\n",
    "        print(\n",
    "            f\"\"\"\n",
    "        DONE! Successfully extracted Lease Info:\n",
    "        {message.terms}\n",
    "        \"\"\"\n",
    "        )\n",
    "        return json.dumps(message.terms.dict())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "HtHXm0-UuBRU"
   },
   "outputs": [],
   "source": [
    "# Obtain the lease.txt document that we want to parsed\n",
    "!wget https://github.com/langroid/langroid-examples/blob/main/examples/docqa/lease.txt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mdkxu37f7JuK"
   },
   "source": [
    "Next, set up an instance of `DocChatAgent`, point it to the lease document, equip it with a vector database, and instructions on how to answer questions based on extracts retrieved from the vector-store.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "d8ynRPp6XUvV"
   },
   "outputs": [],
   "source": [
    "doc_agent = DocChatAgent(\n",
    "        DocChatAgentConfig(\n",
    "            doc_paths = [\"lease.txt\"],\n",
    "            vecdb=lr.vector_store.QdrantDBConfig(\n",
    "                collection_name=\"docqa-chat-multi-extract\",\n",
    "                storage_path=\".data1/data1/\", # CHANGE PATH IF ERROR\n",
    "              ),\n",
    "            summarize_prompt= f\"\"\"\n",
    "                Use the provided extracts to answer the question.\n",
    "                If there's not enough information, respond with {NO_ANSWER}. Use only the\n",
    "                information in these extracts, even if your answer is factually incorrect,\n",
    "                and even if the answer contradicts other parts of the document. The only\n",
    "                important thing is that your answer is consistent with and supported by the\n",
    "                extracts. Compose your complete answer and cite all supporting sources on a\n",
    "                separate separate line as \"EXTRACTS:\".\n",
    "                Show each EXTRACT very COMPACTLY, i.e. only show a few words from\n",
    "                the start and end of the extract, for example:\n",
    "                EXTRACT: \"The world war started in ... Germany Surrendered\"\n",
    "                {{extracts}}\n",
    "                {{question}}\n",
    "                Answer:\n",
    "            \"\"\"\n",
    "        )\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DISYqYVr8BQx"
   },
   "source": [
    "Next we wrap the `doc_agent` into a Task, with instructions on its role.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "NBLp0AEy74N-"
   },
   "outputs": [],
   "source": [
    "doc_task = lr.Task(\n",
    "    doc_agent,\n",
    "    name=\"DocAgent\",\n",
    "    llm_delegate=False,\n",
    "    single_round=True,\n",
    "    system_message=\"\"\"You are an expert on Commercial Leases.\n",
    "    You will receive various questions about a Commercial\n",
    "    Lease contract, and your job is to answer them concisely in at most 2 sentences.\n",
    "    Please SUPPORT your answer with an actual EXTRACT from the lease,\n",
    "    showing only a few words from the  START and END of the extract.\n",
    "    \"\"\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ZhRfOPiE9W-n"
   },
   "source": [
    "Finally, we instantiate the `lease_extractor_agent`, enable it to use and handle the `LeaseMessage` tool. Then we wrap the `lease_extractor_agent` into a Task, instructing it to gather information in the desired format, by asking questions one at a time. Note how the instruction contains `LeaseMessage.usage_example()`: this example is constructed from the `examples` classmethod above when the `LeaseMessage` was defined.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "VL2RYZUX7393"
   },
   "outputs": [],
   "source": [
    "lease_extractor_agent = LeaseExtractorAgent()\n",
    "\n",
    "lease_extractor_agent.enable_message(\n",
    "    LeaseMessage,\n",
    "    use=True,\n",
    "    handle=True,\n",
    "    force=False,\n",
    ")\n",
    "\n",
    "lease_task = lr.Task(\n",
    "    lease_extractor_agent,\n",
    "    name=\"LeaseExtractorAgent\",\n",
    "    llm_delegate=True,\n",
    "    single_round=False,\n",
    "    system_message=f\"\"\"\n",
    "    You have to collect some information about a Commercial Lease, but you do not\n",
    "    have access to the lease itself.\n",
    "    You can ask me questions about the lease, ONE AT A TIME, I will answer each\n",
    "    question. You only need to collect info corresponding to the fields in this\n",
    "    example:\n",
    "    {LeaseMessage.usage_example()}\n",
    "    If some info cannot be found, fill in {NO_ANSWER}.\n",
    "    When you have collected this info, present it to me using the\n",
    "    'lease_info' function/tool.\n",
    "    \"\"\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XBdAcarpwnYU"
   },
   "source": [
    "Finally, we set up the `doc_task` as a subtask of the `lease_task` so that the `doc_agent` can respond to questions from the `lease_extractor_agent`.\n",
    " Now, the `lease_extractor_agent` will be asking questions about the lease and `doc_task` will provide the answers, citing evidence extracted from the lease. Once `lease_extractor_agent` collects all the terms of the lease as instructed, it will use the tool `LeaseMessage` to return this information.\n",
    "\n",
    " The next cell runs the `lease_task`. Remember to keep hitting enter when it's the human's turn, and hit \"q\" to end the conversation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "1Lt9FhjTFlh2"
   },
   "outputs": [],
   "source": [
    "lease_extractor_agent.message_history.clear()\n",
    "lease_task.add_sub_task(doc_task)\n",
    "lease_task.set_color_log(enable=False)\n",
    "lease_task.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uWcH7HoFc-am"
   },
   "source": [
    "# Chat with tabular data (file paths, URLs, dataframes)\n",
    "\n",
    "Here is how `Langroid's` `TableChatAgent` can be used to chat with tabular data, which can be specified as a URL, file path or Pandas dataframe.\n",
    "\n",
    "The Agent's LLM generates Pandas code to answer the query, via function-calling (or tool/plugin), and the Agent's function-handling method executes the code and returns the answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "jS06lshgdBv7"
   },
   "outputs": [],
   "source": [
    "from langroid.agent.special.table_chat_agent import TableChatAgent, TableChatAgentConfig"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tS8pDD2MdgPi"
   },
   "source": [
    "Set up a `TableChatAgent` for a data file, URL or dataframe (Ensure the data table has a header row; the delimiter/separator is auto-detected):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "qDbA4VGmda10"
   },
   "outputs": [],
   "source": [
    "dataset =  \"https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv\"\n",
    "# or dataset = \"/path/to/my/data.csv\"\n",
    "# or dataset = pd.read_csv(\"/path/to/my/data.csv\")\n",
    "\n",
    "agent = TableChatAgent(\n",
    "    config=TableChatAgentConfig(\n",
    "        data=dataset,\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "em2hcy2Qd67T"
   },
   "source": [
    "Now, let's set up a task and run it in an interactive loop with the user:\n",
    "Based on `dataset`, you can ask the following question in the prompt:\n",
    "\n",
    "```\n",
    "What is the average alcohol content of wines with a quality rating above 7?\n",
    "```\n",
    "\n",
    "Remember to keep hitting enter when it's the human's turn, and hit \"q\" to end the conversation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "nhDMm5ndd93W"
   },
   "outputs": [],
   "source": [
    "agent.message_history.clear()\n",
    "task = lr.Task(agent, name=\"DataAssistant\")\n",
    "task.set_color_log(enable=False)\n",
    "task.run()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "include_colab_link": true,
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
</file>

<file path="issues/llm-client-caching-phase1-summary.md">
# Phase 1 Implementation Summary: Client Caching

## Changes Made

### 1. Created `langroid/language_models/client_cache.py`

A new module implementing singleton pattern for LLM clients with the following features:

- **Consistent with existing caching**: Uses SHA256 hashing for cache keys, matching the approach in `OpenAIGPT._cache_lookup`
- **Wrapper functions** for each client type:
  - `get_openai_client()` / `get_async_openai_client()`
  - `get_groq_client()` / `get_async_groq_client()`
  - `get_cerebras_client()` / `get_async_cerebras_client()`
- **Configuration-based caching**: Clients are cached based on their full configuration (API key, base URL, timeout, headers, etc.)
- **Lifecycle management**: Uses `atexit` hook for cleanup and weak references to track clients

### 2. Key Implementation Details

#### Cache Key Generation
```python
def _get_cache_key(client_type: str, **kwargs: Any) -> str:
    # Convert kwargs to sorted string representation
    sorted_kwargs_str = str(sorted(kwargs.items()))
    
    # Create raw key combining client type and sorted kwargs
    raw_key = f"{client_type}:{sorted_kwargs_str}"
    
    # Hash the key for consistent length and to handle complex objects
    hashed_key = hashlib.sha256(raw_key.encode()).hexdigest()
    
    return hashed_key
```

This approach:
- Ensures deterministic keys through sorting
- Handles complex objects via string representation
- Produces fixed-length keys (64 chars)
- Matches the existing Redis cache key generation pattern

### 3. Created Comprehensive Tests

`tests/main/test_client_cache.py` includes tests for:
- Singleton behavior (same config returns same client)
- Different configurations return different clients
- Different client types are cached separately
- Proper handling of timeout objects and headers
- Type differences are preserved (e.g., `30` vs `30.0` are different)

### 4. All Quality Checks Pass
- ✅ All 9 tests pass
- ✅ Type checking passes (mypy)
- ✅ Linting passes (ruff, black)

## Design Decisions

1. **Used SHA256 hashing instead of tuple keys**: More robust for complex objects and consistent with existing caching approach
2. **Type strictness**: `30` and `30.0` create different cache entries - better to be overly strict than risk bugs
3. **Weak references**: Allow garbage collection of unused clients while maintaining cleanup capability
4. **Simple atexit cleanup**: Accepted that async clients will be cleaned by OS on exit

## Next Steps (Phase 2)

Update `OpenAIGPT.__init__` to use these wrapper functions instead of directly creating clients:
```python
# Current
self.client = OpenAI(api_key=self.api_key, ...)

# New  
from langroid.language_models.client_cache import get_openai_client
self.client = get_openai_client(api_key=self.api_key, ...)
```

This will require careful updating of all client creation locations in `openai_gpt.py`.
</file>

<file path="issues/llm-client-caching-phase2-summary.md">
# Phase 2 Implementation Summary: OpenAIGPT Integration

## Changes Made

### 1. Updated `langroid/language_models/openai_gpt.py`

- **Added imports** for client cache wrapper functions
- **Replaced direct client instantiation** with wrapper functions:
  - `Groq()` → `get_groq_client()`
  - `AsyncGroq()` → `get_async_groq_client()`
  - `Cerebras()` → `get_cerebras_client()`
  - `AsyncCerebras()` → `get_async_cerebras_client()`
  - `OpenAI()` → `get_openai_client()`
  - `AsyncOpenAI()` → `get_async_openai_client()`

### 2. Fixed Async Client Cleanup

Updated `_cleanup_clients()` to properly handle async clients by checking if `close()` is a coroutine function and skipping await (since atexit can't handle async).

### 3. Created Integration Tests

`tests/main/test_openai_gpt_client_cache.py` with tests verifying:
- Multiple OpenAIGPT instances with same config share clients
- Different configurations create different clients
- Works correctly for OpenAI, Groq, and Cerebras models
- Different base URLs and headers create different clients

## Results

### Before (Anti-pattern)
```python
# Creating 100 agents = 100 OpenAI clients
for row in data[:100]:
    agent = ChatAgent(config)  # Each creates new OpenAI client
    result = agent.run(row)
```

### After (With caching)
```python
# Creating 100 agents = 1 OpenAI client (reused)
for row in data[:100]:
    agent = ChatAgent(config)  # Reuses existing OpenAI client
    result = agent.run(row)
```

## Testing Results

- ✅ All 9 client cache unit tests pass
- ✅ All 6 OpenAIGPT integration tests pass
- ✅ Existing LLM tests continue to pass
- ✅ Type checking passes
- ✅ Linting passes

## Benefits

1. **Resource Efficiency**: Dramatically reduces file descriptor usage
2. **Performance**: Eliminates repeated client initialization overhead
3. **Transparent**: No API changes required - existing code benefits automatically
4. **Configurable**: Each unique configuration gets its own cached client
5. **Safe**: Thread-safe implementation with proper cleanup

## Implementation Notes

- Used SHA256 hashing for cache keys (consistent with existing Redis cache)
- Handles all configuration parameters (API key, base URL, timeout, headers, etc.)
- Async client cleanup deferred to OS (atexit can't await)
- Weak references allow garbage collection when clients no longer needed
</file>

<file path="issues/llm-client-caching-test-summary.md">
# Client Caching Test Summary

## Tests Created

### 1. Unit Tests (`test_client_cache.py`)
- **Purpose**: Test the basic caching functionality
- **Coverage**: 
  - Singleton behavior for same configuration
  - Different clients for different configurations
  - Proper handling of all client types (OpenAI, Groq, Cerebras)
  - Cache key generation with complex types

### 2. Integration Tests (`test_openai_gpt_client_cache.py`)
- **Purpose**: Test OpenAIGPT integration with caching
- **Coverage**:
  - Multiple OpenAIGPT instances share clients
  - Different configs create different clients
  - Works for all model types (OpenAI, Groq, Cerebras)

### 3. Stress Tests (`test_client_cache_stress.py`)
- **Purpose**: Demonstrate resource usage improvements
- **Tests**:
  - `test_many_agents_with_caching`: Shows 100 agents share 1 client
  - `test_many_agents_different_configs`: Shows proper separation by config
  - `test_memory_efficiency`: Demonstrates memory savings
  - `test_client_instance_comparison`: Direct comparison with/without caching

### 4. Demonstration Test (`test_client_cache_demo.py`)
- **Purpose**: Clear demonstration of the fix for the exact user scenario
- **Key Results**:

#### With Client Caching:
- 100 ChatAgent instances → 1 shared client pair
- File descriptors saved: ~297
- Memory saved: ~148.5 MB
- Creation time: 0.60 seconds

#### Without Client Caching (simulated):
- 100 ChatAgent instances → 100 client pairs
- File descriptors used: ~300
- Extra memory used: ~148.5 MB
- Risk of "Too many open files" errors

## Test Results Summary

All tests demonstrate that the client caching implementation:

1. **Prevents resource exhaustion**: 100 agents use 1 client instead of 100
2. **Maintains correctness**: Different configurations still get different clients
3. **Is transparent**: No API changes needed
4. **Provides significant savings**:
   - 50x reduction in client instances
   - ~297 file descriptors saved for 100 agents
   - ~148.5 MB memory saved for 100 agents

The stress tests confirm that the implementation successfully addresses the "too many open files" issue that was occurring when creating many agents in a loop.
</file>

<file path="issues/llm-client-caching.md">
# LLM Client Connection Pool Exhaustion Issue

## Problem Statement

When using Langroid in multi-agent systems where agents are created dynamically (e.g., one agent per data row), each agent creates its own LLM client instance (OpenAI, Groq, or Cerebras). This pattern leads to connection pool exhaustion, resulting in "too many open files" errors and degraded performance.

## Current Behavior

### Client Creation Flow
1. Each `ChatAgent` instantiates its own `OpenAIGPT` instance
2. Each `OpenAIGPT` instance creates new client objects:
   - For Groq models: Creates `Groq()` and `AsyncGroq()` clients
   - For Cerebras models: Creates `Cerebras()` and `AsyncCerebras()` clients  
   - For OpenAI/others: Creates `OpenAI()` and `AsyncOpenAI()` clients
3. These clients maintain their own connection pools via httpx

### Problem Scenario
```python
# Anti-pattern: Creating many agents
for row in data[:100]:  # 100 rows
    agent = ChatAgent(config)  # Creates new OpenAI client
    result = agent.run(row)    # Makes API calls
    # Agent goes out of scope but connections may linger
```

This creates 100 separate OpenAI clients, each with its own connection pool.

## Impact

1. **Resource Exhaustion**: Each client maintains open connections, leading to file descriptor limits
2. **Performance Degradation**: Connection establishment overhead for each new client
3. **Potential API Rate Limiting**: Multiple clients may trigger more aggressive rate limiting
4. **Memory Usage**: Each client instance consumes memory for connection pools

## Root Cause

The issue stems from:
1. Lack of client reuse across agent instances
2. Connection pools not being properly closed when agents are garbage collected
3. The anti-pattern of creating many short-lived agents instead of reusing agents

## Constraints

1. **API Compatibility**: Solution must not break existing Langroid API
2. **Configuration Flexibility**: Different agents may need different configurations (API keys, base URLs, timeouts)
3. **Thread Safety**: Clients must be safely shareable across multiple agents
4. **Async Support**: Must handle both sync and async client variants

## Critical Considerations

### 1. Configuration Variations
Different agents in the same system might require different client configurations:
- **Different API Keys**: Agent A might use one OpenAI key, Agent B another
- **Different Base URLs**: Some agents might use standard OpenAI, others might use Azure OpenAI
- **Different Timeouts**: Long-running tasks might need higher timeouts
- **Different Headers**: Custom headers for different use cases

**Implication**: We cannot have just one singleton per client type. We need to cache clients based on their full configuration, creating a new client only when a unique configuration is encountered.

### 2. Thread Safety
Multiple agents might run concurrently and share the same client instance:
- The httpx library (used by OpenAI, Groq, Cerebras clients) is designed to be thread-safe
- Connection pools in httpx can handle concurrent requests
- No additional locking should be needed for client access

**Implication**: Shared clients can be used safely across multiple threads/agents without synchronization overhead.

### 3. Lifecycle Management
Proper cleanup of singleton clients is crucial:
- **When to close**: Clients hold network resources that should be released
- **Garbage collection**: Need to ensure clients can be GC'd when no longer needed
- **Application shutdown**: Should close all clients gracefully on exit

**Implications**: 
- Consider using weak references to allow garbage collection of unused clients
- Implement `atexit` hooks for graceful shutdown
- May need a manual cleanup mechanism for long-running applications
- Monitor for memory leaks from accumulating cached clients with unique configs

## Proposed Solution: Client Singleton Pattern

### Approach
Implement a caching layer that returns singleton clients based on configuration:

1. **Wrapper Functions**: Replace direct client instantiation with wrapper functions:
   - `get_openai_client(config) -> OpenAI`
   - `get_groq_client(config) -> Groq`
   - `get_cerebras_client(config) -> Cerebras`
   - Similar for async variants

2. **Configuration-Based Caching**: Cache clients keyed by their configuration parameters:
   - API key
   - Base URL
   - Timeout
   - Headers
   - Organization (for OpenAI)

3. **Implementation Location**: In `langroid/language_models/openai_gpt.py`, replace:
   ```python
   # Current
   self.client = OpenAI(api_key=self.api_key, ...)
   
   # Proposed
   self.client = get_openai_client(api_key=self.api_key, ...)
   ```

### Benefits
- Reduces client instances from N (number of agents) to M (unique configurations)
- No API changes required
- Follows OpenAI best practices for client reuse
- Transparent to existing code

### Alternative Solutions Considered

1. **Agent Pooling**: Reuse agents instead of creating new ones
   - Pros: Most efficient
   - Cons: Requires significant API changes

2. **Explicit Client Registry**: Pass shared clients to agents
   - Pros: Explicit control
   - Cons: Breaks existing API, requires user awareness

3. **Connection Limit Configuration**: Reduce connection pool sizes
   - Pros: Simple
   - Cons: Doesn't address root cause, may hurt performance

## Success Criteria

1. Creating 100+ agents should not cause "too many open files" errors
2. Memory usage should remain stable with many agents
3. No breaking changes to existing Langroid API
4. Performance improvement for multi-agent scenarios

## Implementation Notes

- httpx clients (used by OpenAI/Groq/Cerebras) are thread-safe
- Consider using weak references to allow garbage collection
- May need cleanup hooks (atexit) for proper shutdown
- Should add logging for cache hits/misses for debugging

## References

- OpenAI Cookbook: Best practices recommend reusing client instances
- httpx documentation: Connection pooling behavior
- Python file descriptor limits and ulimit settings
</file>

<file path="issues/pr-882-cached-tokens-improvements.md">
# PR #882: Cached Tokens Support - Improvements

## Summary
Enhanced PR #882 which adds cached token tracking to LLMTokenUsage. Made several improvements including cleanup of unused code, bug fixes, added tests, and new model support.

## Changes

### 1. Code Cleanup
- Removed unused `chat_cost_per_1k_tokens` and `completion_cost_per_1k_tokens` fields from `LLMConfig` in `base.py`
- These fields were superseded by the ModelInfo approach but were still being updated unnecessarily

### 2. Bug Fixes
- Fixed type error in `openai_gpt.py` when extracting `prompt_tokens_details` from API responses
- Added proper type annotation and type checking to handle cases where the field might not be a dict

### 3. Added Tests
- `test_cached_tokens_tracking()`: Verifies cached tokens are properly tracked in API responses and cost calculations work correctly
- `test_cached_tokens_in_llm_response()`: Tests the LLMTokenUsage class directly including string representation and reset functionality

### 4. Added Gemini 2.5 Model Support
- Fixed `GEMINI_2_5_PRO` enum to map to `"gemini-2.5-pro"` instead of experimental version
- Added new enums: `GEMINI_2_5_FLASH` and `GEMINI_2_5_FLASH_LITE_PREVIEW`
- Added complete ModelInfo entries with proper costs and parameters:
  - **Gemini 2.5 Pro**: 1M context, $1.25/$0.31/$10.00 per million tokens
  - **Gemini 2.5 Flash**: 1M context, $0.30/$0.075/$2.50 per million tokens  
  - **Gemini 2.5 Flash Lite Preview**: 64K context, $0.10/$0.025/$0.40 per million tokens

## Testing
- All existing tests pass
- New tests verify cached token functionality
- Code passes all linting and type checking
</file>

<file path="issues/pr-openai-client-caching.md">
# OpenAI Client Connection Management

## Problem
Creating many agents (e.g., 100 agents for 100 data rows) leads to "too many open files" errors due to each agent creating its own HTTP client, exhausting file descriptors.

## Solution
Implemented client caching/singleton pattern to reuse HTTP clients across multiple agent instances with the same configuration.

## Changes

### 1. Client Caching Module (`langroid/language_models/client_cache.py`)
- Singleton pattern for HTTP client reuse
- SHA256-based cache keys for configuration
- Wrapper functions for each client type (OpenAI, Groq, Cerebras)
- Lifecycle management with `atexit` hooks

### 2. OpenAIGPT Integration
- Added `use_cached_client: bool = True` config parameter
- Updated client creation to use wrapper functions when caching enabled
- Allows disabling for testing/special cases

### 3. ChatAgent Cleanup
- Updated `__del__` method to avoid closing shared clients
- Clients now managed centrally via client_cache module

### 4. Comprehensive Tests
- Tests for singleton behavior across all client types
- Verification of concurrent async usage
- Tests for model prefix routing (groq/, cerebras/, etc.)
- Regression tests with `use_cached_client` flag

## Benefits
- Prevents resource exhaustion when creating many agents
- Improves performance through connection pooling
- Backward compatible with opt-out capability
- Thread-safe for concurrent usage
</file>

<file path="issues/pr-qdrant-lock-fix.md">
# Fix QdrantDB Lock File Issue

## Problem
When using QdrantDB with local storage, file lock conflicts occurred when:
1. A QdrantDB instance was created but not properly closed
2. Another part of the code tried to create a new QdrantDB instance with the same storage path
3. Qdrant would detect the `.lock` file and create a new storage directory (e.g., `./qdrant_data.new`)

## Solution
1. **Added `close()` method to QdrantDB** - Calls the underlying client's close method to release the file lock
2. **Added context manager support** - Implemented `__enter__` and `__exit__` for automatic cleanup
3. **Fixed DocChatAgent's `clear()` method** - Now closes the old vecdb before creating a new one

## Usage
```python
# Option 1: Explicit close
vecdb = QdrantDB(config)
vecdb.clear_all_collections(really=True)
vecdb.close()  # Release the lock

# Option 2: Context manager (automatic cleanup)
with QdrantDB(config) as vecdb:
    vecdb.clear_all_collections(really=True)
    # Automatically closed when exiting context
```

## Changes
- `langroid/vector_store/qdrantdb.py`: Added `close()`, `__enter__`, `__exit__` methods
- `langroid/agent/special/doc_chat_agent.py`: Fixed `clear()` to close old vecdb instance

This fix prevents the proliferation of `.new` directories when using QdrantDB with local storage.
</file>

<file path="issues/qdrant-lock-issue-spec-changes.md">
# QdrantDB Lock File Conflict Issue - Changes and Best Practices

## Summary of Changes

This document describes the changes made to resolve the QdrantDB lock file conflict issue described in `qdrant-lock-issue-spec.md`.

## Problem Recap

When using QdrantDB with local storage, a file lock conflict occurred when:
1. A QdrantDB instance was created (e.g., to clear collections)
2. The instance was not properly disposed/closed
3. Another part of the code tried to create a new QdrantDB instance
4. Qdrant detected the `.lock` file and created a new storage directory (e.g., `./qdrant_data.new`)

## Implemented Solution

### 1. Added `close()` Method

Added an explicit `close()` method to the QdrantDB class:

```python
def close(self) -> None:
    """
    Close the QdrantDB client and release any resources (e.g., file locks).
    This is especially important for local storage to release the .lock file.
    """
    if hasattr(self.client, "close"):
        # QdrantLocal has a close method that releases the lock
        self.client.close()
        logger.info(f"Closed QdrantDB connection for {self.config.storage_path}")
```

### 2. Added Context Manager Support

Implemented `__enter__` and `__exit__` methods to support Python's context manager protocol:

```python
def __enter__(self) -> "QdrantDB":
    """Context manager entry."""
    return self

def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
    """Context manager exit - ensure cleanup even if an exception occurred."""
    self.close()
```

### 3. Added Type Import

Added `Any` to the type imports to support the context manager type hints:

```python
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Sequence, Tuple, TypeVar
```

## Best Practices for Using QdrantDB

### Important Note

The underlying `qdrant_client` library does not implement the context manager protocol. However, **Langroid's QdrantDB wrapper now provides context manager support** to ensure proper cleanup of resources, especially the file lock used by QdrantLocal.

### Recommended: Use Context Manager (Most Pythonic)

The context manager approach is the **recommended best practice** for Langroid's QdrantDB as it guarantees cleanup even if exceptions occur:

```python
from langroid.vector_store.qdrantdb import QdrantDB, QdrantDBConfig

config = QdrantDBConfig(
    cloud=False,
    collection_name="my_collection",
    storage_path="./qdrant_data",
)

# Recommended approach
with QdrantDB(config) as vecdb:
    # Use the vector database
    vecdb.add_documents(documents)
    results = vecdb.similar_texts_with_scores("query text", k=5)
    vecdb.clear_empty_collections()
    # Automatically closed when exiting the context
```

### Alternative: Explicit `close()` Method

If you cannot use a context manager (e.g., when the QdrantDB instance needs to persist across multiple methods), use explicit `close()`:

```python
class MyDocProcessor:
    def __init__(self):
        config = QdrantDBConfig(
            cloud=False,
            collection_name="my_collection",
            storage_path="./qdrant_data",
        )
        self.vecdb = QdrantDB(config)
    
    def process_documents(self, docs):
        self.vecdb.add_documents(docs)
    
    def search(self, query):
        return self.vecdb.similar_texts_with_scores(query, k=5)
    
    def cleanup(self):
        # Important: Call this when done
        self.vecdb.close()
```

### When Using with DocChatAgent

When using QdrantDB with DocChatAgent, the agent manages the vector store lifecycle, so you don't need to worry about closing it manually:

```python
from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig

# DocChatAgent manages the QdrantDB lifecycle
agent = DocChatAgent(
    DocChatAgentConfig(
        vecdb=QdrantDBConfig(
            cloud=False,
            collection_name="doc_chat",
            storage_path="./qdrant_data",
        )
    )
)
# The agent will handle cleanup appropriately
```

### For Temporary Operations

For one-off operations like clearing collections, always use context manager:

```python
# Clear all collections
with QdrantDB(config) as vecdb:
    vecdb.clear_all_collections(really=True, prefix="temp_")

# Clear and recreate
with QdrantDB(config) as vecdb:
    vecdb.delete_collection("old_collection")
    vecdb.create_collection("new_collection", replace=True)
```

## Important Notes

1. **Cloud Storage**: This issue only affects local storage (`cloud=False`). When using Qdrant cloud service, file locking is not used.

2. **Backward Compatibility**: Existing code will continue to work without changes, but may show warnings about lock conflicts and create `.new` directories.

3. **Multiple Processes**: If you genuinely need multiple processes to access the same Qdrant storage simultaneously, use Qdrant server instead of local storage.

## Testing

Comprehensive tests were added to verify the fix:
- `tests/main/test_qdrant_lock_release.py` - Unit tests for close() and context manager
- `tests/main/test_qdrant_lock_scenario.py` - Reproduces the exact issue scenario
- `tests/main/test_qdrant_warning_capture.py` - Captures and verifies warning messages

All tests pass and confirm that:
- Without proper cleanup: `.new` directories are created (the bug)
- With `close()` or context manager: No `.new` directories (fixed)

## Migration Guide

If you have existing code that creates temporary QdrantDB instances:

**Before (problematic):**
```python
vecdb = QdrantDB(config)
vecdb.clear_all_collections(really=True)
# Lock file remains, causing issues
```

**After (fixed):**
```python
# Option 1: Context manager (preferred)
with QdrantDB(config) as vecdb:
    vecdb.clear_all_collections(really=True)

# Option 2: Explicit close
vecdb = QdrantDB(config)
vecdb.clear_all_collections(really=True)
vecdb.close()
```

## Why This Matters

While the `qdrant_client` library handles some cleanup via its `__del__` method, this is not reliable because:
1. Python's garbage collector doesn't guarantee when `__del__` will be called
2. In some cases (circular references, interpreter shutdown), `__del__` may not be called at all
3. The file lock remains until the process ends, preventing other instances from using the same storage

By adding explicit `close()` and context manager support to Langroid's QdrantDB wrapper, we ensure:
- Immediate release of the file lock when done
- No proliferation of `.new` directories
- Predictable resource cleanup
- Better development experience (no need to manually delete lock files)

## Conclusion

The QdrantDB lock file issue has been resolved by adding proper resource cleanup mechanisms to Langroid's QdrantDB wrapper. While the underlying `qdrant_client` doesn't provide context manager support, Langroid now offers both context manager and explicit `close()` methods. The context manager approach is the recommended best practice as it ensures cleanup even in error scenarios. For cases where context managers aren't suitable, the explicit `close()` method provides a reliable alternative.
</file>

<file path="langroid/agent/callbacks/chainlit.py">
"""
Callbacks for Chainlit integration.
"""

import json
import logging
import textwrap
from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Dict,
    List,
    Literal,
    Optional,
    no_type_check,
)

from langroid.exceptions import LangroidImportError
from langroid.pydantic_v1 import BaseSettings

try:
    import chainlit as cl
except ImportError:
    raise LangroidImportError("chainlit", "chainlit")

from chainlit import run_sync
from chainlit.logger import logger

if TYPE_CHECKING:
    from langroid import Agent, Task
import langroid.language_models as lm
from langroid.language_models import StreamEventType
from langroid.utils.configuration import settings
from langroid.utils.constants import NO_ANSWER

# Attempt to reconfigure the root logger to your desired settings
log_level = logging.INFO if settings.debug else logging.WARNING
logger.setLevel(log_level)
logging.basicConfig(level=log_level)

logging.getLogger().setLevel(log_level)

USER_TIMEOUT = 60_000
SYSTEM = "System 🖥️"
LLM = "LLM 🧠"
AGENT = "Agent <>"
YOU = "You 😃"
ERROR = "Error 🚫"


@no_type_check
async def ask_helper(func, **kwargs):
    res = await func(**kwargs).send()
    while not res:
        res = await func(**kwargs).send()
    return res


@no_type_check
async def setup_llm() -> None:
    """From the session `llm_settings`, create new LLMConfig and LLM objects,
    save them in session state."""
    llm_settings = cl.user_session.get("llm_settings", {})
    model = llm_settings.get("chat_model")
    context_length = llm_settings.get("context_length", 16_000)
    temperature = llm_settings.get("temperature", 0.2)
    timeout = llm_settings.get("timeout", 90)
    logger.info(f"Using model: {model}")
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        # or, other possibilities for example:
        # "litellm/ollama_chat/mistral"
        # "litellm/ollama_chat/mistral:7b-instruct-v0.2-q8_0"
        # "litellm/ollama/llama2"
        # "local/localhost:8000/v1"
        # "local/localhost:8000"
        chat_context_length=context_length,  # adjust based on model
        temperature=temperature,
        timeout=timeout,
    )
    llm = lm.OpenAIGPT(llm_config)
    cl.user_session.set("llm_config", llm_config)
    cl.user_session.set("llm", llm)


@no_type_check
async def update_llm(new_settings: Dict[str, Any]) -> None:
    """Update LLMConfig and LLM from settings, and save in session state."""
    cl.user_session.set("llm_settings", new_settings)
    await inform_llm_settings()
    await setup_llm()


async def make_llm_settings_widgets(
    config: lm.OpenAIGPTConfig | None = None,
) -> None:
    config = config or lm.OpenAIGPTConfig()
    await cl.ChatSettings(
        [
            cl.input_widget.TextInput(
                id="chat_model",
                label="Model Name (Default GPT-4o)",
                initial="",
                placeholder="E.g. ollama/mistral or " "local/localhost:8000/v1",
            ),
            cl.input_widget.NumberInput(
                id="context_length",
                label="Chat Context Length",
                initial=config.chat_context_length,
                placeholder="E.g. 16000",
            ),
            cl.input_widget.Slider(
                id="temperature",
                label="LLM temperature",
                min=0.0,
                max=1.0,
                step=0.1,
                initial=config.temperature,
                tooltip="Adjust based on model",
            ),
            cl.input_widget.Slider(
                id="timeout",
                label="Timeout (seconds)",
                min=10,
                max=200,
                step=10,
                initial=config.timeout,
                tooltip="Timeout for LLM response, in seconds.",
            ),
        ]
    ).send()  # type: ignore


@no_type_check
async def inform_llm_settings() -> None:
    llm_settings: Dict[str, Any] = cl.user_session.get("llm_settings", {})
    settings_dict = dict(
        model=llm_settings.get("chat_model"),
        context_length=llm_settings.get("context_length"),
        temperature=llm_settings.get("temperature"),
        timeout=llm_settings.get("timeout"),
    )
    await cl.Message(
        author=SYSTEM,
        content="LLM settings updated",
        elements=[
            cl.Text(
                name="settings",
                display="side",
                content=json.dumps(settings_dict, indent=4),
                language="json",
            )
        ],
    ).send()


async def add_instructions(
    title: str = "Instructions",
    content: str = "Enter your question/response in the dialog box below.",
    display: Literal["side", "inline", "page"] = "inline",
) -> None:
    await cl.Message(
        author="",
        content=title if display == "side" else "",
        elements=[
            cl.Text(
                name=title,
                content=content,
                display=display,
            )
        ],
    ).send()


async def add_image(
    path: str,
    name: str,
    display: Literal["side", "inline", "page"] = "inline",
) -> None:
    await cl.Message(
        author="",
        content=name if display == "side" else "",
        elements=[
            cl.Image(
                name=name,
                path=path,
                display=display,
            )
        ],
    ).send()


async def get_text_files(
    message: cl.Message,
    extensions: List[str] = [".txt", ".pdf", ".doc", ".docx"],
) -> Dict[str, str]:
    """Get dict (file_name -> file_path) from files uploaded in chat msg"""

    files = [file for file in message.elements if file.path.endswith(tuple(extensions))]
    return {file.name: file.path for file in files}


def wrap_text_preserving_structure(text: str, width: int = 90) -> str:
    """Wrap text preserving paragraph breaks. Typically used to
    format an agent_response output, which may have long lines
    with no newlines or paragraph breaks."""

    paragraphs = text.split("\n\n")  # Split the text into paragraphs
    wrapped_text = []

    for para in paragraphs:
        if para.strip():  # If the paragraph is not just whitespace
            # Wrap this paragraph and add it to the result
            wrapped_paragraph = textwrap.fill(para, width=width)
            wrapped_text.append(wrapped_paragraph)
        else:
            # Preserve paragraph breaks
            wrapped_text.append("")

    return "\n\n".join(wrapped_text)


class ChainlitCallbackConfig(BaseSettings):
    user_has_agent_name: bool = True  # show agent name in front of "YOU" ?
    show_subtask_response: bool = True  # show sub-task response as a step?


class ChainlitAgentCallbacks:
    """Inject Chainlit callbacks into a Langroid Agent"""

    last_step: Optional[cl.Step] = None  # used to display sub-steps under this
    curr_step: Optional[cl.Step] = None  # used to update an initiated step
    stream: Optional[cl.Step] = None  # pushed into openai_gpt.py to stream tokens
    parent_agent: Optional["Agent"] = None  # used to get parent id, for step nesting

    def __init__(
        self,
        agent: "Agent",
        config: ChainlitCallbackConfig = ChainlitCallbackConfig(),
    ):
        """Add callbacks to the agent, and save the initial message,
        so we can alter the display of the first user message.
        """
        agent.callbacks.start_llm_stream = self.start_llm_stream
        agent.callbacks.start_llm_stream_async = self.start_llm_stream_async
        agent.callbacks.cancel_llm_stream = self.cancel_llm_stream
        agent.callbacks.finish_llm_stream = self.finish_llm_stream
        agent.callbacks.show_llm_response = self.show_llm_response
        agent.callbacks.show_agent_response = self.show_agent_response
        agent.callbacks.get_user_response = self.get_user_response
        agent.callbacks.get_user_response_async = self.get_user_response_async
        agent.callbacks.get_last_step = self.get_last_step
        agent.callbacks.set_parent_agent = self.set_parent_agent
        agent.callbacks.show_error_message = self.show_error_message
        agent.callbacks.show_start_response = self.show_start_response
        self.config = config
        self.agent: "Agent" = agent
        if self.agent.llm is not None:
            # We don't want to suppress LLM output in async + streaming,
            # since we often use chainlit async callbacks to display LLM output
            self.agent.llm.config.async_stream_quiet = False

    def _get_parent_id(self) -> str | None:
        """Get step id under which we need to nest the current step:
        This should be the parent Agent's last_step.
        """
        if self.parent_agent is None:
            logger.info(f"No parent agent found for {self.agent.config.name}")
            return None
        logger.info(
            f"Parent agent found for {self.agent.config.name} = "
            f"{self.parent_agent.config.name}"
        )
        last_step = self.parent_agent.callbacks.get_last_step()
        if last_step is None:
            logger.info(f"No last step found for {self.parent_agent.config.name}")
            return None
        logger.info(
            f"Last step found for {self.parent_agent.config.name} = {last_step.id}"
        )
        return last_step.id  # type: ignore

    def set_parent_agent(self, parent: "Agent") -> None:
        self.parent_agent = parent

    def get_last_step(self) -> Optional[cl.Step]:
        return self.last_step

    def start_llm_stream(self) -> Callable[[str, StreamEventType], None]:
        """Returns a streaming fn that can be passed to the LLM class"""
        self.stream = cl.Message(
            content="",
            id=self.curr_step.id if self.curr_step is not None else None,
            author=self._entity_name("llm"),
            type="assistant_message",
            parent_id=self._get_parent_id(),
        )
        self.last_step = self.stream
        self.curr_step = None
        logger.info(
            f"""
            Starting LLM stream for {self.agent.config.name}
            id = {self.stream.id} 
            under parent {self._get_parent_id()}
        """
        )

        def stream_token(t: str, e: StreamEventType) -> None:
            if self.stream is None:
                raise ValueError("Stream not initialized")
            run_sync(self.stream.stream_token(t))

        return stream_token

    async def start_llm_stream_async(self) -> Callable[[str, StreamEventType], None]:
        """Returns a streaming fn that can be passed to the LLM class"""
        self.stream = cl.Message(
            content="",
            id=self.curr_step.id if self.curr_step is not None else None,
            author=self._entity_name("llm"),
            type="assistant_message",
            parent_id=self._get_parent_id(),
        )
        self.last_step = self.stream
        self.curr_step = None
        logger.info(
            f"""
            Starting LLM stream for {self.agent.config.name}
            id = {self.stream.id} 
            under parent {self._get_parent_id()}
            """
        )

        async def stream_token(t: str, e: StreamEventType) -> None:
            if self.stream is None:
                raise ValueError("Stream not initialized")
            await self.stream.stream_token(t)

        return stream_token

    def cancel_llm_stream(self) -> None:
        """Called when cached response found."""
        self.last_step = None
        if self.stream is not None:
            run_sync(self.stream.remove())  # type: ignore

    def finish_llm_stream(self, content: str, is_tool: bool = False) -> None:
        """Update the stream, and display entire response in the right language."""
        if self.agent.llm is None or self.stream is None:
            raise ValueError("LLM or stream not initialized")
        if content == "":
            run_sync(self.stream.remove())  # type: ignore
        else:
            run_sync(self.stream.update())  # type: ignore
        stream_id = self.stream.id if content else None
        step = cl.Message(
            content=textwrap.dedent(content) or NO_ANSWER,
            id=stream_id,
            author=self._entity_name("llm", tool=is_tool),
            type="assistant_message",
            parent_id=self._get_parent_id(),
            language="json" if is_tool else None,
        )
        logger.info(
            f"""
            Finish STREAM LLM response for {self.agent.config.name}
            id = {step.id} 
            under parent {self._get_parent_id()}
            """
        )
        run_sync(step.update())  # type: ignore

    def show_llm_response(
        self,
        content: str,
        is_tool: bool = False,
        cached: bool = False,
        language: str | None = None,
    ) -> None:
        """Show non-streaming LLM response."""
        step = cl.Message(
            content=textwrap.dedent(content) or NO_ANSWER,
            id=self.curr_step.id if self.curr_step is not None else None,
            author=self._entity_name("llm", tool=is_tool, cached=cached),
            type="assistant_message",
            language=language or ("json" if is_tool else None),
            parent_id=self._get_parent_id(),
        )
        self.last_step = step
        self.curr_step = None
        logger.info(
            f"""
            Showing NON-STREAM LLM response for {self.agent.config.name}
            id = {step.id} 
            under parent {self._get_parent_id()}
            """
        )
        run_sync(step.send())  # type: ignore

    def show_error_message(self, error: str) -> None:
        """Show error message."""
        step = cl.Message(
            content=error,
            author=self.agent.config.name + f"({ERROR})",
            type="run",
            language="text",
            parent_id=self._get_parent_id(),
        )
        self.last_step = step
        run_sync(step.send())

    def show_agent_response(
        self,
        content: str,
        language="text",
        is_tool: bool = False,
    ) -> None:
        """Show message from agent (typically tool handler)."""
        if language == "text":
            content = wrap_text_preserving_structure(content, width=90)
        step = cl.Message(
            content=content,
            id=self.curr_step.id if self.curr_step is not None else None,
            author=self._entity_name("agent"),
            type="tool",
            language=language,
            parent_id=self._get_parent_id(),
        )
        self.last_step = step
        self.curr_step = None
        logger.info(
            f"""
            Showing AGENT response for {self.agent.config.name}
            id = {step.id} 
            under parent {self._get_parent_id()}
            """
        )
        run_sync(step.send())  # type: ignore

    def show_start_response(self, entity: str) -> None:
        """When there's a potentially long-running process, start a step,
        so that the UI displays a spinner while the process is running."""
        if self.curr_step is not None:
            run_sync(self.curr_step.remove())  # type: ignore
        step = cl.Message(
            content="",
            author=self._entity_name(entity),
            type="run",
            parent_id=self._get_parent_id(),
            language="text",
        )
        self.last_step = step
        self.curr_step = step
        logger.info(
            f"""
            Showing START response for {self.agent.config.name} ({entity})
            id = {step.id} 
            under parent {self._get_parent_id()}
            """
        )
        run_sync(step.send())  # type: ignore

    def _entity_name(
        self, entity: str, tool: bool = False, cached: bool = False
    ) -> str:
        """Construct name of entity to display as Author of a step"""
        tool_indicator = " =>  🛠️" if tool else ""
        cached = "(cached)" if cached else ""
        match entity:
            case "llm":
                model = self.agent.config.llm.chat_model
                return (
                    self.agent.config.name + f"({LLM} {model} {tool_indicator}){cached}"
                )
            case "agent":
                return self.agent.config.name + f"({AGENT})"
            case "user":
                if self.config.user_has_agent_name:
                    return self.agent.config.name + f"({YOU})"
                else:
                    return YOU
            case _:
                return self.agent.config.name + f"({entity})"

    def _get_user_response_buttons(self, prompt: str) -> str:
        """Not used. Save for future reference"""
        res = run_sync(
            ask_helper(
                cl.AskActionMessage,
                content="Continue, exit or say something?",
                actions=[
                    cl.Action(
                        name="continue",
                        value="continue",
                        label="✅ Continue",
                    ),
                    cl.Action(
                        name="feedback",
                        value="feedback",
                        label="💬 Say something",
                    ),
                    cl.Action(name="exit", value="exit", label="🔚 Exit Conversation"),
                ],
            )
        )
        if res.get("value") == "continue":
            return ""
        if res.get("value") == "exit":
            return "x"
        if res.get("value") == "feedback":
            return self.get_user_response(prompt)
        return ""  # process the "feedback" case here

    def get_user_response(self, prompt: str) -> str:
        """Ask for user response, wait for it, and return it"""

        return run_sync(self.ask_user(prompt=prompt, suppress_values=["c"]))

    async def get_user_response_async(self, prompt: str) -> str:
        """Ask for user response, wait for it, and return it"""

        return await self.ask_user(prompt=prompt, suppress_values=["c"])

    async def ask_user(
        self,
        prompt: str,
        timeout: int = USER_TIMEOUT,
        suppress_values: List[str] = ["c"],
    ) -> str:
        """
        Ask user for input.

        Args:
            prompt (str): Prompt to display to user
            timeout (int): Timeout in seconds
            suppress_values (List[str]): List of values to suppress from display
                (e.g. "c" for continue)

        Returns:
            str: User response
        """
        ask_msg = cl.AskUserMessage(
            content=prompt,
            author=f"{self.agent.config.name}(Awaiting user input...)",
            type="assistant_message",
            timeout=timeout,
        )
        res = await ask_msg.send()
        if prompt == "":
            # if there was no actual prompt, clear the row from the UI for clarity.
            await ask_msg.remove()

        if res is None:
            run_sync(
                cl.Message(
                    content=f"Timed out after {USER_TIMEOUT} seconds. Exiting."
                ).send()
            )
            return "x"

        # Finally, reproduce the user response at right nesting level
        if res["output"] in suppress_values:
            return ""

        return res["output"]


class ChainlitTaskCallbacks(ChainlitAgentCallbacks):
    """
    Recursively inject ChainlitAgentCallbacks into a Langroid Task's agent and
    agents of sub-tasks.
    """

    def __init__(
        self,
        task: "Task",
        config: ChainlitCallbackConfig = ChainlitCallbackConfig(),
    ):
        """Inject callbacks recursively, ensuring msg is passed to the
        top-level agent"""

        super().__init__(task.agent, config)
        self._inject_callbacks(task)
        self.task = task
        if config.show_subtask_response:
            self.task.callbacks.show_subtask_response = self.show_subtask_response

    @classmethod
    def _inject_callbacks(
        cls, task: "Task", config: ChainlitCallbackConfig = ChainlitCallbackConfig()
    ) -> None:
        # recursively apply ChainlitAgentCallbacks to agents of sub-tasks
        for t in task.sub_tasks:
            cls(t, config=config)
            # ChainlitTaskCallbacks(t, config=config)

    def show_subtask_response(
        self, task: "Task", content: str, is_tool: bool = False
    ) -> None:
        """Show sub-task response as a step, nested at the right level."""

        # The step should nest under the calling agent's last step
        step = cl.Message(
            content=content or NO_ANSWER,
            author=(
                self.task.agent.config.name + f"( ⏎ From {task.agent.config.name})"
            ),
            type="run",
            parent_id=self._get_parent_id(),
            language="json" if is_tool else None,
        )
        self.last_step = step
        run_sync(step.send())
</file>

<file path="langroid/agent/special/lance_doc_chat_agent.py">
"""
LanceDocChatAgent is a subclass of DocChatAgent that uses LanceDB as a vector store:
- Uses the DocChatAgentConfig.filter variable
    (a sql string) in the `where` clause to do filtered vector search.
- Overrides the get_similar_chunks_bm25() to use LanceDB FTS (Full Text Search).

For usage see:
 - `tests/main/test_lance_doc_chat_agent.py`.
 - example script `examples/docqa/lance_rag.py`.

"""

import json
import logging
from typing import Any, Dict, List, Tuple

import pandas as pd

from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig
from langroid.agent.special.lance_tools import AnswerTool, QueryPlanTool
from langroid.agent.tools.orchestration import AgentDoneTool
from langroid.mytypes import DocMetaData, Document
from langroid.parsing.table_loader import describe_dataframe
from langroid.utils.constants import NO_ANSWER
from langroid.utils.pydantic_utils import (
    dataframe_to_documents,
)
from langroid.vector_store.lancedb import LanceDB

logger = logging.getLogger(__name__)


class LanceDocChatAgent(DocChatAgent):
    vecdb: LanceDB

    def __init__(self, cfg: DocChatAgentConfig):
        super().__init__(cfg)
        self.config: DocChatAgentConfig = cfg
        self.enable_message(QueryPlanTool, use=False, handle=True)

    def _get_clean_vecdb_schema(self) -> str:
        """Get a cleaned schema of the vector-db, to pass to the LLM
        as part of instructions on how to generate a SQL filter."""

        tbl_pandas = (
            self.vecdb.client.open_table(self.vecdb.config.collection_name)
            .search()
            .limit(1)
            .to_pandas(flatten=True)
        )
        if len(self.config.filter_fields) == 0:
            filterable_fields = tbl_pandas.columns.tolist()
            # drop id, vector, metadata.id, metadata.window_ids, metadata.is_chunk
            filterable_fields = list(
                set(filterable_fields)
                - {
                    "id",
                    "vector",
                    "metadata.id",
                    "metadata.window_ids",
                    "metadata.is_chunk",
                }
            )
            logger.warning(
                f"""
            No filter_fields set in config, so using these fields as filterable fields:
            {filterable_fields}
            """
            )
            self.config.filter_fields = filterable_fields

        if self.from_dataframe:
            return self.df_description
        filter_fields_set = set(self.config.filter_fields)

        # remove 'content' from filter_fields_set, even if it's not in filter_fields_set
        filter_fields_set.discard("content")

        # possible values of filterable fields
        filter_field_values = self.get_field_values(list(filter_fields_set))

        schema_dict: Dict[str, Dict[str, Any]] = dict(
            (field, {}) for field in filter_fields_set
        )
        # add field values to schema_dict as another field `values` for each field
        for field, values in filter_field_values.items():
            schema_dict[field]["values"] = values
            dtype = tbl_pandas[field].dtype.name
            schema_dict[field]["dtype"] = dtype
        # if self.config.filter_fields is set, restrict to these:
        if len(self.config.filter_fields) > 0:
            schema_dict = {
                k: v for k, v in schema_dict.items() if k in self.config.filter_fields
            }
        schema = json.dumps(schema_dict, indent=4)

        schema += f"""
        NOTE when creating a filter for a query, 
        ONLY the following fields are allowed:
        {",".join(self.config.filter_fields)} 
        """
        if len(content_fields := self.config.add_fields_to_content) > 0:
            schema += f"""
            Additional fields added to `content` as key=value pairs:
            NOTE that these CAN Help with matching queries!
            {content_fields}
            """
        return schema

    def query_plan(self, msg: QueryPlanTool) -> AgentDoneTool | str:
        """
        Handle the LLM's use of the FilterTool.
        Temporarily set the config filter and either return the final answer
        in case there's a dataframe_calc, or return the rephrased query
        so the LLM can handle it.
        """
        # create document-subset based on this filter
        plan = msg.plan
        try:
            self.setup_documents(filter=plan.filter or None)
        except Exception as e:
            logger.error(f"Error setting up documents: {e}")
            # say DONE with err msg so it goes back to LanceFilterAgent
            return AgentDoneTool(
                content=f"""
                Possible Filter Error:\n {e}
                
                Note that only the following fields are allowed in the filter
                of a query plan: 
                {", ".join(self.config.filter_fields)}
                """
            )

        # update the filter so it is used in the DocChatAgent
        self.config.filter = plan.filter or None
        if plan.dataframe_calc:
            # we just get relevant docs then do the calculation
            # TODO if calc causes err, it is captured in result,
            # and LLM can correct the calc based on the err,
            # and this will cause retrieval all over again,
            # which may be wasteful if only the calc part is wrong.
            # The calc step can later be done with a separate Agent/Tool.
            if plan.query is None or plan.query.strip() == "":
                if plan.filter is None or plan.filter.strip() == "":
                    return AgentDoneTool(
                        content="""
                        Cannot execute Query Plan since filter as well as 
                        rephrased query are empty.                    
                        """
                    )
                else:
                    # no query to match, so just get all docs matching filter
                    docs = self.vecdb.get_all_documents(plan.filter)
            else:
                _, docs = self.get_relevant_extracts(plan.query)
            if len(docs) == 0:
                return AgentDoneTool(content=NO_ANSWER)
            answer = self.vecdb.compute_from_docs(docs, plan.dataframe_calc)
        else:
            # pass on the query so LLM can handle it
            response = self.llm_response(plan.query)
            answer = NO_ANSWER if response is None else response.content
        return AgentDoneTool(tools=[AnswerTool(answer=answer)])

    def ingest_docs(
        self,
        docs: List[Document],
        split: bool = True,
        metadata: (
            List[Dict[str, Any]] | Dict[str, Any] | DocMetaData | List[DocMetaData]
        ) = [],
    ) -> int:
        n = super().ingest_docs(docs, split, metadata)
        tbl = self.vecdb.client.open_table(self.vecdb.config.collection_name)
        # We assume "content" is available as top-level field
        if "content" in tbl.schema.names:
            tbl.create_fts_index("content", replace=True)
        return n

    def ingest_dataframe(
        self,
        df: pd.DataFrame,
        content: str = "content",
        metadata: List[str] = [],
    ) -> int:
        """Ingest from a dataframe. Assume we are doing this once, not incrementally"""

        self.from_dataframe = True
        if df.shape[0] == 0:
            raise ValueError(
                """
                LanceDocChatAgent.ingest_dataframe() received an empty dataframe.
                """
            )
        n = df.shape[0]

        # If any additional fields need to be added to content,
        # add them as key=value pairs, into the `content` field for all rows.
        # This helps retrieval for table-like data.
        # Note we need to do this at stage so that the embeddings
        # are computed on the full content with these additional fields.
        fields = [f for f in self.config.add_fields_to_content if f in df.columns]
        if len(fields) > 0:
            df[content] = df.apply(
                lambda row: (",".join(f"{f}={row[f]}" for f in fields))
                + ", content="
                + row[content],
                axis=1,
            )

        df, metadata = DocChatAgent.document_compatible_dataframe(df, content, metadata)
        self.df_description = describe_dataframe(
            df,
            filter_fields=self.config.filter_fields,
            n_vals=10,
        )
        self.vecdb.add_dataframe(df, content="content", metadata=metadata)

        tbl = self.vecdb.client.open_table(self.vecdb.config.collection_name)
        # We assume "content" is available as top-level field
        if "content" in tbl.schema.names:
            tbl.create_fts_index("content", replace=True)
        # We still need to do the below so that
        # other types of searches in DocChatAgent
        # can work, as they require Document objects
        docs = dataframe_to_documents(df, content="content", metadata=metadata)
        self.setup_documents(docs)
        # mark each doc as already-chunked so we don't try to split them further
        # TODO later we may want to split large text-columns
        for d in docs:
            d.metadata.is_chunk = True
        return n  # type: ignore

    def get_similar_chunks_bm25(
        self, query: str, multiple: int
    ) -> List[Tuple[Document, float]]:
        """
        Override the DocChatAgent.get_similar_chunks_bm25()
        to use LanceDB FTS (Full Text Search).
        """
        # Clean up query: replace all newlines with spaces in query,
        # force special search keywords to lower case, remove quotes,
        # so it's not interpreted as search syntax
        query_clean = (
            query.replace("\n", " ")
            .replace("AND", "and")
            .replace("OR", "or")
            .replace("NOT", "not")
            .replace("'", "")
            .replace('"', "")
            .replace(":", "--")
        )

        tbl = self.vecdb.client.open_table(self.vecdb.config.collection_name)
        result = (
            tbl.search(query_clean)
            .where(self.config.filter or None)
            .limit(self.config.n_similar_chunks * multiple)
        )
        docs = self.vecdb._lance_result_to_docs(result)
        scores = [r["score"] for r in result.to_list()]
        return list(zip(docs, scores))
</file>

<file path="langroid/agent/batch.py">
import asyncio
import copy
import inspect
import warnings
from enum import Enum
from typing import (
    Any,
    Callable,
    Coroutine,
    Iterable,
    List,
    Optional,
    TypeVar,
    Union,
    cast,
)

from dotenv import load_dotenv

from langroid.agent.base import Agent
from langroid.agent.chat_document import ChatDocument
from langroid.agent.task import Task
from langroid.parsing.utils import batched
from langroid.utils.configuration import quiet_mode
from langroid.utils.logging import setup_colored_logging
from langroid.utils.output import SuppressLoggerWarnings, status

setup_colored_logging()

load_dotenv()

T = TypeVar("T")
U = TypeVar("U")


class ExceptionHandling(str, Enum):
    """Enum for exception handling options."""

    RAISE = "raise"
    RETURN_NONE = "return_none"
    RETURN_EXCEPTION = "return_exception"


def _convert_exception_handling(
    handle_exceptions: Union[bool, ExceptionHandling]
) -> ExceptionHandling:
    """Convert legacy boolean handle_exceptions to ExceptionHandling enum."""
    if isinstance(handle_exceptions, ExceptionHandling):
        return handle_exceptions

    if isinstance(handle_exceptions, bool):
        warnings.warn(
            "Boolean handle_exceptions is deprecated. "
            "Use ExceptionHandling enum instead: "
            "RAISE, RETURN_NONE, or RETURN_EXCEPTION.",
            DeprecationWarning,
            stacklevel=2,
        )
        return (
            ExceptionHandling.RETURN_NONE
            if handle_exceptions
            else ExceptionHandling.RAISE
        )

    raise TypeError(
        "handle_exceptions must be bool or ExceptionHandling, "
        f"not {type(handle_exceptions)}"
    )


async def _process_batch_async(
    inputs: Iterable[str | ChatDocument],
    do_task: Callable[[str | ChatDocument, int], Coroutine[Any, Any, Any]],
    start_idx: int = 0,
    stop_on_first_result: bool = False,
    sequential: bool = False,
    handle_exceptions: Union[bool, ExceptionHandling] = ExceptionHandling.RAISE,
    output_map: Callable[[Any], Any] = lambda x: x,
) -> List[Optional[ChatDocument] | BaseException]:
    """
    Unified batch processing logic for both agent methods and tasks.

    Args:
        inputs: Iterable of inputs to process
        do_task: Task execution function that takes (input, index) and returns result
        start_idx: Starting index for the batch
        stop_on_first_result: Whether to stop after first valid result
        sequential: Whether to process sequentially
        handle_exceptions: How to handle exceptions:
            - RAISE or False: Let exceptions propagate
            - RETURN_NONE or True: Convert exceptions to None in results
            - RETURN_EXCEPTION: Include exception objects in results
            Boolean values are deprecated and will be removed in a future version.
        output_map: Function to map results to final output format
    """
    exception_handling = _convert_exception_handling(handle_exceptions)

    def handle_error(e: BaseException) -> Any:
        """Handle exceptions based on exception_handling."""
        match exception_handling:
            case ExceptionHandling.RAISE:
                raise e
            case ExceptionHandling.RETURN_NONE:
                return None
            case ExceptionHandling.RETURN_EXCEPTION:
                return e

    if stop_on_first_result:
        results: List[Optional[ChatDocument] | BaseException] = []
        pending: set[asyncio.Task[Any]] = set()
        # Create task-to-index mapping
        task_indices: dict[asyncio.Task[Any], int] = {}
        try:
            tasks = [
                asyncio.create_task(do_task(input, i + start_idx))
                for i, input in enumerate(inputs)
            ]
            task_indices = {task: i for i, task in enumerate(tasks)}
            results = [None] * len(tasks)

            done, pending = await asyncio.wait(
                tasks, return_when=asyncio.FIRST_COMPLETED
            )

            # Process completed tasks
            for task in done:
                index = task_indices[task]
                try:
                    result = await task
                    results[index] = output_map(result)
                except BaseException as e:
                    results[index] = handle_error(e)

            if any(r is not None for r in results):
                return results
        finally:
            for task in pending:
                task.cancel()
            try:
                await asyncio.gather(*pending, return_exceptions=True)
            except BaseException as e:
                handle_error(e)
        return results

    elif sequential:
        results = []
        for i, input in enumerate(inputs):
            try:
                result = await do_task(input, i + start_idx)
                results.append(output_map(result))
            except BaseException as e:
                results.append(handle_error(e))
        return results

    # Parallel execution
    else:
        try:
            return_exceptions = exception_handling != ExceptionHandling.RAISE
            with quiet_mode(), SuppressLoggerWarnings():
                results_with_exceptions = cast(
                    list[Optional[ChatDocument | BaseException]],
                    await asyncio.gather(
                        *(
                            do_task(input, i + start_idx)
                            for i, input in enumerate(inputs)
                        ),
                        return_exceptions=return_exceptions,
                    ),
                )

                if exception_handling == ExceptionHandling.RETURN_NONE:
                    results = [
                        None if isinstance(r, BaseException) else r
                        for r in results_with_exceptions
                    ]
                else:  # ExceptionHandling.RETURN_EXCEPTION
                    results = results_with_exceptions
        except BaseException as e:
            results = [handle_error(e) for _ in inputs]

        return [output_map(r) for r in results]


def run_batched_tasks(
    inputs: List[str | ChatDocument],
    do_task: Callable[[str | ChatDocument, int], Coroutine[Any, Any, Any]],
    batch_size: Optional[int],
    stop_on_first_result: bool,
    sequential: bool,
    handle_exceptions: Union[bool, ExceptionHandling],
    output_map: Callable[[Any], Any],
    message_template: str,
    message: Optional[str] = None,
) -> List[Any]:
    """
    Common batch processing logic for both agent methods and tasks.

    Args:
        inputs: List of inputs to process
        do_task: Task execution function
        batch_size: Size of batches, if None process all at once
        stop_on_first_result: Whether to stop after first valid result
        sequential: Whether to process sequentially
        handle_exceptions: How to handle exceptions:
            - RAISE or False: Let exceptions propagate
            - RETURN_NONE or True: Convert exceptions to None in results
            - RETURN_EXCEPTION: Include exception objects in results
            Boolean values are deprecated and will be removed in a future version.
        output_map: Function to map results
        message_template: Template for status message
        message: Optional override for status message
    """

    async def run_all_batched_tasks(
        inputs: List[str | ChatDocument],
        batch_size: int | None,
    ) -> List[Any]:
        """Extra wrap to run asyncio.run one single time and not once per loop

        Args:
            inputs (List[str  |  ChatDocument]): inputs to process
            batch_size (int | None): batch size

        Returns:
            List[Any]: results
        """
        results: List[Any] = []
        if batch_size is None:
            msg = message or message_template.format(total=len(inputs))
            with status(msg), SuppressLoggerWarnings():
                results = await _process_batch_async(
                    inputs,
                    do_task,
                    stop_on_first_result=stop_on_first_result,
                    sequential=sequential,
                    handle_exceptions=handle_exceptions,
                    output_map=output_map,
                )
        else:
            batches = batched(inputs, batch_size)
            for batch in batches:
                start_idx = len(results)
                complete_str = f", {start_idx} complete" if start_idx > 0 else ""
                msg = (
                    message or message_template.format(total=len(inputs)) + complete_str
                )

                if stop_on_first_result and any(r is not None for r in results):
                    results.extend([None] * len(batch))
                else:
                    with status(msg), SuppressLoggerWarnings():
                        results.extend(
                            await _process_batch_async(
                                batch,
                                do_task,
                                start_idx=start_idx,
                                stop_on_first_result=stop_on_first_result,
                                sequential=sequential,
                                handle_exceptions=handle_exceptions,
                                output_map=output_map,
                            )
                        )
        return results

    return asyncio.run(run_all_batched_tasks(inputs, batch_size))


def run_batch_task_gen(
    gen_task: Callable[[int], Task],
    items: list[T],
    input_map: Callable[[T], str | ChatDocument] = lambda x: str(x),
    output_map: Callable[[ChatDocument | None], U] = lambda x: x,  # type: ignore
    stop_on_first_result: bool = False,
    sequential: bool = True,
    batch_size: Optional[int] = None,
    turns: int = -1,
    message: Optional[str] = None,
    handle_exceptions: Union[bool, ExceptionHandling] = ExceptionHandling.RAISE,
    max_cost: float = 0.0,
    max_tokens: int = 0,
) -> list[Optional[U]]:
    """
    Generate and run copies of a task async/concurrently one per item in `items` list.
    For each item, apply `input_map` to get the initial message to process.
    For each result, apply `output_map` to get the final result.
    Args:
        gen_task (Callable[[int], Task]): generates the tasks to run
        items (list[T]): list of items to process
        input_map (Callable[[T], str|ChatDocument]): function to map item to
            initial message to process
        output_map (Callable[[ChatDocument|str], U]): function to map result
            to final result. If stop_on_first_result is enabled, then
            map any invalid output to None. We continue until some non-None
            result is obtained.
        stop_on_first_result (bool): whether to stop after the first valid
            (not-None) result. In this case all other tasks are
            cancelled, and their corresponding result is None in the
            returned list.
        sequential (bool): whether to run sequentially
            (e.g. some APIs such as ooba don't support concurrent requests)
        batch_size (Optional[int]): The number of tasks to run at a time,
            if None, unbatched
        turns (int): number of turns to run, -1 for infinite
        message (Optional[str]): optionally overrides the console status messages
        handle_exceptions: How to handle exceptions:
            - RAISE or False: Let exceptions propagate
            - RETURN_NONE or True: Convert exceptions to None in results
            - RETURN_EXCEPTION: Include exception objects in results
            Boolean values are deprecated and will be removed in a future version.
        max_cost: float: maximum cost to run the task (default 0.0 for unlimited)
        max_tokens: int: maximum token usage (in and out) (default 0 for unlimited)


    Returns:
        list[Optional[U]]: list of final results. Always list[U] if
        `stop_on_first_result` is disabled
    """
    inputs = [input_map(item) for item in items]

    async def _do_task(
        input: str | ChatDocument,
        i: int,
    ) -> BaseException | Optional[ChatDocument] | tuple[int, Optional[ChatDocument]]:
        task_i = gen_task(i)
        if task_i.agent.llm is not None:
            task_i.agent.llm.set_stream(False)
        task_i.agent.config.show_stats = False

        try:
            result = await task_i.run_async(
                input, turns=turns, max_cost=max_cost, max_tokens=max_tokens
            )
        except asyncio.CancelledError as e:
            task_i.kill()
            # exception will be handled by the caller
            raise e
        # ----------------------------------------
        # Propagate any exception stored on the task that may have been
        # swallowed inside `Task.run_async`, so that the upper-level
        # exception-handling logic works as expected.
        for attr in ("_exception", "last_exception", "exception"):
            exc = getattr(task_i, attr, None)
            if isinstance(exc, BaseException):
                raise exc
        # Fallback: treat a KILL-status result as an error
        if (
            isinstance(result, ChatDocument)
            and getattr(result, "status", None) is not None
            and str(getattr(result, "status")) == "StatusCode.KILL"
        ):
            raise RuntimeError(str(result.content))
        return result

    return run_batched_tasks(
        inputs=inputs,
        do_task=_do_task,
        batch_size=batch_size,
        stop_on_first_result=stop_on_first_result,
        sequential=sequential,
        handle_exceptions=handle_exceptions,
        output_map=output_map,
        message_template="[bold green]Running {total} tasks:",
        message=message,
    )


def run_batch_tasks(
    task: Task,
    items: list[T],
    input_map: Callable[[T], str | ChatDocument] = lambda x: str(x),
    output_map: Callable[[ChatDocument | None], U] = lambda x: x,  # type: ignore
    stop_on_first_result: bool = False,
    sequential: bool = True,
    batch_size: Optional[int] = None,
    turns: int = -1,
    max_cost: float = 0.0,
    max_tokens: int = 0,
) -> List[Optional[U]]:
    """
    Run copies of `task` async/concurrently one per item in `items` list.
    For each item, apply `input_map` to get the initial message to process.
    For each result, apply `output_map` to get the final result.
    Args:
        task (Task): task to run
        items (list[T]): list of items to process
        input_map (Callable[[T], str|ChatDocument]): function to map item to
            initial message to process
        output_map (Callable[[ChatDocument|str], U]): function to map result
            to final result
        sequential (bool): whether to run sequentially
            (e.g. some APIs such as ooba don't support concurrent requests)
        batch_size (Optional[int]): The number of tasks to run at a time,
            if None, unbatched
        turns (int): number of turns to run, -1 for infinite
        max_cost: float: maximum cost to run the task (default 0.0 for unlimited)
        max_tokens: int: maximum token usage (in and out) (default 0 for unlimited)

    Returns:
        list[Optional[U]]: list of final results. Always list[U] if
        `stop_on_first_result` is disabled
    """
    message = f"[bold green]Running {len(items)} copies of {task.name}..."
    return run_batch_task_gen(
        lambda i: task.clone(i),
        items,
        input_map,
        output_map,
        stop_on_first_result,
        sequential,
        batch_size,
        turns,
        message,
        max_cost=max_cost,
        max_tokens=max_tokens,
    )


def run_batch_agent_method(
    agent: Agent,
    method: Callable[
        [str | ChatDocument | None], Coroutine[Any, Any, ChatDocument | None]
    ],
    items: List[Any],
    input_map: Callable[[Any], str | ChatDocument] = lambda x: str(x),
    output_map: Callable[[ChatDocument | None], Any] = lambda x: x,
    sequential: bool = True,
    stop_on_first_result: bool = False,
    handle_exceptions: Union[bool, ExceptionHandling] = ExceptionHandling.RAISE,
    batch_size: Optional[int] = None,
) -> List[Any]:
    """
    Run the `method` on copies of `agent`, async/concurrently one per
    item in `items` list.
    ASSUMPTION: The `method` is an async method and has signature:
        method(self, input: str|ChatDocument|None) -> ChatDocument|None
    So this would typically be used for the agent's "responder" methods,
    e.g. `llm_response_async` or `agent_responder_async`.

    For each item, apply `input_map` to get the initial message to process.
    For each result, apply `output_map` to get the final result.

    Args:
        agent (Agent): agent whose method to run
        method (str): Async method to run on copies of `agent`.
            The method is assumed to have signature:
            `method(self, input: str|ChatDocument|None) -> ChatDocument|None`
        input_map (Callable[[Any], str|ChatDocument]): function to map item to
            initial message to process
        output_map (Callable[[ChatDocument|str], Any]): function to map result
            to final result
        sequential (bool): whether to run sequentially
            (e.g. some APIs such as ooba don't support concurrent requests)
        stop_on_first_result (bool): whether to stop after the first valid
        handle_exceptions: How to handle exceptions:
            - RAISE or False: Let exceptions propagate
            - RETURN_NONE or True: Convert exceptions to None in results
            - RETURN_EXCEPTION: Include exception objects in results
            Boolean values are deprecated and will be removed in a future version.
        batch_size (Optional[int]): The number of items to process in each batch.
            If None, process all items at once.
    Returns:
        List[Any]: list of final results
    """
    # Check if the method is async
    method_name = method.__name__
    if not inspect.iscoroutinefunction(method):
        raise ValueError(f"The method {method_name} is not async.")

    inputs = [input_map(item) for item in items]
    agent_cfg = copy.deepcopy(agent.config)
    assert agent_cfg.llm is not None, "agent must have llm config"
    agent_cfg.llm.stream = False
    agent_cfg.show_stats = False
    agent_cls = type(agent)
    agent_name = agent_cfg.name

    async def _do_task(input: str | ChatDocument, i: int) -> Any:
        agent_cfg.name = f"{agent_cfg.name}-{i}"
        agent_i = agent_cls(agent_cfg)
        method_i = getattr(agent_i, method_name, None)
        if method_i is None:
            raise ValueError(f"Agent {agent_name} has no method {method_name}")
        result = await method_i(input)
        return result

    return run_batched_tasks(
        inputs=inputs,
        do_task=_do_task,
        batch_size=batch_size,
        stop_on_first_result=stop_on_first_result,
        sequential=sequential,
        handle_exceptions=handle_exceptions,
        output_map=output_map,
        message_template=f"[bold green]Running {{total}} copies of {agent_name}...",
    )


def llm_response_batch(
    agent: Agent,
    items: List[Any],
    input_map: Callable[[Any], str | ChatDocument] = lambda x: str(x),
    output_map: Callable[[ChatDocument | None], Any] = lambda x: x,
    sequential: bool = True,
    stop_on_first_result: bool = False,
    batch_size: Optional[int] = None,
) -> List[Any]:
    return run_batch_agent_method(
        agent,
        agent.llm_response_async,
        items,
        input_map=input_map,
        output_map=output_map,
        sequential=sequential,
        stop_on_first_result=stop_on_first_result,
        batch_size=batch_size,
    )


def agent_response_batch(
    agent: Agent,
    items: List[Any],
    input_map: Callable[[Any], str | ChatDocument] = lambda x: str(x),
    output_map: Callable[[ChatDocument | None], Any] = lambda x: x,
    sequential: bool = True,
    stop_on_first_result: bool = False,
    batch_size: Optional[int] = None,
) -> List[Any]:
    return run_batch_agent_method(
        agent,
        agent.agent_response_async,
        items,
        input_map=input_map,
        output_map=output_map,
        sequential=sequential,
        stop_on_first_result=stop_on_first_result,
        batch_size=batch_size,
    )


def run_batch_function(
    function: Callable[[T], U],
    items: list[T],
    sequential: bool = True,
    batch_size: Optional[int] = None,
) -> List[U]:
    async def _do_task(item: T) -> U:
        return function(item)

    async def _do_all(items: Iterable[T]) -> List[U]:
        if sequential:
            results = []
            for item in items:
                result = await _do_task(item)
                results.append(result)
            return results

        return await asyncio.gather(*(_do_task(item) for item in items))

    results: List[U] = []

    if batch_size is None:
        with status(f"[bold green]Running {len(items)} tasks:"):
            results = asyncio.run(_do_all(items))
    else:
        batches = batched(items, batch_size)
        for batch in batches:
            with status(f"[bold green]Running batch of {len(batch)} tasks:"):
                results.extend(asyncio.run(_do_all(batch)))

    return results
</file>

<file path="langroid/agent/chat_agent.py">
import copy
import inspect
import json
import logging
import textwrap
from contextlib import ExitStack
from inspect import isclass
from typing import Any, Dict, List, Optional, Self, Set, Tuple, Type, Union, cast

import openai
from rich import print
from rich.console import Console
from rich.markup import escape

from langroid.agent.base import Agent, AgentConfig, async_noop_fn, noop_fn
from langroid.agent.chat_document import ChatDocument
from langroid.agent.tool_message import (
    ToolMessage,
    format_schema_for_strict,
)
from langroid.agent.xml_tool_message import XMLToolMessage
from langroid.language_models.base import (
    LLMFunctionCall,
    LLMFunctionSpec,
    LLMMessage,
    LLMResponse,
    OpenAIJsonSchemaSpec,
    OpenAIToolSpec,
    Role,
    StreamingIfAllowed,
    ToolChoiceTypes,
)
from langroid.language_models.openai_gpt import OpenAIGPT
from langroid.mytypes import Entity, NonToolAction
from langroid.pydantic_v1 import BaseModel, ValidationError
from langroid.utils.configuration import settings
from langroid.utils.object_registry import ObjectRegistry
from langroid.utils.output import status
from langroid.utils.pydantic_utils import PydanticWrapper, get_pydantic_wrapper
from langroid.utils.types import is_callable

console = Console()

logger = logging.getLogger(__name__)


class ChatAgentConfig(AgentConfig):
    """
    Configuration for ChatAgent

    Attributes:
        system_message: system message to include in message sequence
             (typically defines role and task of agent).
             Used only if `task` is not specified in the constructor.
        user_message: user message to include in message sequence.
             Used only if `task` is not specified in the constructor.
        use_tools: whether to use our own ToolMessages mechanism
        handle_llm_no_tool (Any): desired agent_response when
            LLM generates non-tool msg.
        use_functions_api: whether to use functions/tools native to the LLM API
                (e.g. OpenAI's `function_call` or `tool_call` mechanism)
        use_tools_api: When `use_functions_api` is True, if this is also True,
            the OpenAI tool-call API is used, rather than the older/deprecated
            function-call API. However the tool-call API has some tricky aspects,
            hence we set this to False by default.
        strict_recovery: whether to enable strict schema recovery when there
            is a tool-generation error.
        enable_orchestration_tool_handling: whether to enable handling of orchestration
            tools, e.g. ForwardTool, DoneTool, PassTool, etc.
        output_format: When supported by the LLM (certain OpenAI LLMs
            and local LLMs served by providers such as vLLM), ensures
            that the output is a JSON matching the corresponding
            schema via grammar-based decoding
        handle_output_format: When `output_format` is a `ToolMessage` T,
            controls whether T is "enabled for handling".
        use_output_format: When `output_format` is a `ToolMessage` T,
            controls whether T is "enabled for use" (by LLM) and
            instructions on using T are added to the system message.
        instructions_output_format: Controls whether we generate instructions for
            `output_format` in the system message.
        use_tools_on_output_format: Controls whether to automatically switch
            to the Langroid-native tools mechanism when `output_format` is set.
            Note that LLMs may generate tool calls which do not belong to
            `output_format` even when strict JSON mode is enabled, so this should be
            enabled when such tool calls are not desired.
        output_format_include_defaults: Whether to include fields with default arguments
            in the output schema
        full_citations: Whether to show source reference citation + content for each
            citation, or just the main reference citation.
    """

    system_message: str = "You are a helpful assistant."
    user_message: Optional[str] = None
    handle_llm_no_tool: Any = None
    use_tools: bool = True
    use_functions_api: bool = False
    use_tools_api: bool = True
    strict_recovery: bool = True
    enable_orchestration_tool_handling: bool = True
    output_format: Optional[type] = None
    handle_output_format: bool = True
    use_output_format: bool = True
    instructions_output_format: bool = True
    output_format_include_defaults: bool = True
    use_tools_on_output_format: bool = True
    full_citations: bool = True  # show source + content for each citation?

    def _set_fn_or_tools(self) -> None:
        """
        Enable Langroid Tool or OpenAI-like fn-calling,
        depending on config settings.
        """
        if not self.use_functions_api or not self.use_tools:
            return
        if self.use_functions_api and self.use_tools:
            logger.debug(
                """
                You have enabled both `use_tools` and `use_functions_api`.
                Setting `use_functions_api` to False.
                """
            )
            self.use_tools = True
            self.use_functions_api = False


class ChatAgent(Agent):
    """
    Chat Agent interacting with external env
    (could be human, or external tools).
    The agent (the LLM actually) is provided with an optional "Task Spec",
    which is a sequence of `LLMMessage`s. These are used to initialize
    the `task_messages` of the agent.
    In most applications we will use a `ChatAgent` rather than a bare `Agent`.
    The `Agent` class mainly exists to hold various common methods and attributes.
    One difference between `ChatAgent` and `Agent` is that `ChatAgent`'s
    `llm_response` method uses "chat mode" API (i.e. one that takes a
    message sequence rather than a single message),
    whereas the same method in the `Agent` class uses "completion mode" API (i.e. one
    that takes a single message).
    """

    def __init__(
        self,
        config: ChatAgentConfig = ChatAgentConfig(),
        task: Optional[List[LLMMessage]] = None,
    ):
        """
        Chat-mode agent initialized with task spec as the initial message sequence
        Args:
            config: settings for the agent

        """
        super().__init__(config)
        self.config: ChatAgentConfig = config
        self.config._set_fn_or_tools()
        self.message_history: List[LLMMessage] = []
        self.init_state()
        # An agent's "task" is defined by a system msg and an optional user msg;
        # These are "priming" messages that kick off the agent's conversation.
        self.system_message: str = self.config.system_message
        self.user_message: str | None = self.config.user_message

        if task is not None:
            # if task contains a system msg, we override the config system msg
            if len(task) > 0 and task[0].role == Role.SYSTEM:
                self.system_message = task[0].content
            # if task contains a user msg, we override the config user msg
            if len(task) > 1 and task[1].role == Role.USER:
                self.user_message = task[1].content

        # system-level instructions for using tools/functions:
        # We maintain these as tools/functions are enabled/disabled,
        # and whenever an LLM response is sought, these are used to
        # recreate the system message (via `_create_system_and_tools_message`)
        # each time, so it reflects the current set of enabled tools/functions.
        # (a) these are general instructions on using certain tools/functions,
        #   if they are specified in a ToolMessage class as a classmethod `instructions`
        self.system_tool_instructions: str = ""
        # (b) these are only for the builtin in Langroid TOOLS mechanism:
        self.system_tool_format_instructions: str = ""

        self.llm_functions_map: Dict[str, LLMFunctionSpec] = {}
        self.llm_functions_handled: Set[str] = set()
        self.llm_functions_usable: Set[str] = set()
        self.llm_function_force: Optional[Dict[str, str]] = None

        self.output_format: Optional[type[ToolMessage | BaseModel]] = None

        self.saved_requests_and_tool_setings = self._requests_and_tool_settings()
        # This variable is not None and equals a `ToolMessage` T, if and only if:
        # (a) T has been set as the output_format of this agent, AND
        # (b) T has been "enabled for use" ONLY for enforcing this output format, AND
        # (c) T has NOT been explicitly "enabled for use" by this Agent.
        self.enabled_use_output_format: Optional[type[ToolMessage]] = None
        # As above but deals with "enabled for handling" instead of "enabled for use".
        self.enabled_handling_output_format: Optional[type[ToolMessage]] = None
        if config.output_format is not None:
            self.set_output_format(config.output_format)
        # instructions specifically related to enforcing `output_format`
        self.output_format_instructions = ""

        # controls whether to disable strict schemas for this agent if
        # strict mode causes exception
        self.disable_strict = False
        # Tracks whether any strict tool is enabled; used to determine whether to set
        # `self.disable_strict` on an exception
        self.any_strict = False
        # Tracks the set of tools on which we force-disable strict decoding
        self.disable_strict_tools_set: set[str] = set()

        if self.config.enable_orchestration_tool_handling:
            # Only enable HANDLING by `agent_response`, NOT LLM generation of these.
            # This is useful where tool-handlers or agent_response generate these
            # tools, and need to be handled.
            # We don't want enable orch tool GENERATION by default, since that
            # might clutter-up the LLM system message unnecessarily.
            from langroid.agent.tools.orchestration import (
                AgentDoneTool,
                AgentSendTool,
                DonePassTool,
                DoneTool,
                ForwardTool,
                PassTool,
                ResultTool,
                SendTool,
            )

            self.enable_message(ForwardTool, use=False, handle=True)
            self.enable_message(DoneTool, use=False, handle=True)
            self.enable_message(AgentDoneTool, use=False, handle=True)
            self.enable_message(PassTool, use=False, handle=True)
            self.enable_message(DonePassTool, use=False, handle=True)
            self.enable_message(SendTool, use=False, handle=True)
            self.enable_message(AgentSendTool, use=False, handle=True)
            self.enable_message(ResultTool, use=False, handle=True)

    def init_state(self) -> None:
        """
        Initialize the state of the agent. Just conversation state here,
        but subclasses can override this to initialize other state.
        """
        super().init_state()
        self.clear_history(0)
        self.clear_dialog()

    @staticmethod
    def from_id(id: str) -> "ChatAgent":
        """
        Get an agent from its ID
        Args:
            agent_id (str): ID of the agent
        Returns:
            ChatAgent: The agent with the given ID
        """
        return cast(ChatAgent, Agent.from_id(id))

    def clone(self, i: int = 0) -> "ChatAgent":
        """Create i'th clone of this agent, ensuring tool use/handling is cloned.
        Important: We assume all member variables are in the __init__ method here
        and in the Agent class.
        TODO: We are attempting to clone an agent after its state has been
        changed in possibly many ways. Below is an imperfect solution. Caution advised.
        Revisit later.
        """
        agent_cls = type(self)
        config_copy = copy.deepcopy(self.config)
        config_copy.name = f"{config_copy.name}-{i}"
        new_agent = agent_cls(config_copy)
        new_agent.system_tool_instructions = self.system_tool_instructions
        new_agent.system_tool_format_instructions = self.system_tool_format_instructions
        new_agent.llm_tools_map = self.llm_tools_map
        new_agent.llm_functions_map = self.llm_functions_map
        new_agent.llm_functions_handled = self.llm_functions_handled
        new_agent.llm_functions_usable = self.llm_functions_usable
        new_agent.llm_function_force = self.llm_function_force
        # Caution - we are copying the vector-db, maybe we don't always want this?
        new_agent.vecdb = self.vecdb
        new_agent.id = ObjectRegistry.new_id()
        if self.config.add_to_registry:
            ObjectRegistry.register_object(new_agent)
        return new_agent

    def _strict_mode_for_tool(self, tool: str | type[ToolMessage]) -> bool:
        """Should we enable strict mode for a given tool?"""
        if isinstance(tool, str):
            tool_class = self.llm_tools_map[tool]
        else:
            tool_class = tool
        name = tool_class.default_value("request")
        if name in self.disable_strict_tools_set or self.disable_strict:
            return False
        strict: Optional[bool] = tool_class.default_value("strict")
        if strict is None:
            strict = self._strict_tools_available()

        return strict

    def _fn_call_available(self) -> bool:
        """Does this agent's LLM support function calling?"""
        return self.llm is not None and self.llm.supports_functions_or_tools()

    def _strict_tools_available(self) -> bool:
        """Does this agent's LLM support strict tools?"""
        return (
            not self.disable_strict
            and self.llm is not None
            and isinstance(self.llm, OpenAIGPT)
            and self.llm.config.parallel_tool_calls is False
            and self.llm.supports_strict_tools
        )

    def _json_schema_available(self) -> bool:
        """Does this agent's LLM support strict JSON schema output format?"""
        return (
            not self.disable_strict
            and self.llm is not None
            and isinstance(self.llm, OpenAIGPT)
            and self.llm.supports_json_schema
        )

    def set_system_message(self, msg: str) -> None:
        self.system_message = msg
        if len(self.message_history) > 0:
            # if there is message history, update the system message in it
            self.message_history[0].content = msg

    def set_user_message(self, msg: str) -> None:
        self.user_message = msg

    @property
    def task_messages(self) -> List[LLMMessage]:
        """
        The task messages are the initial messages that define the task
        of the agent. There will be at least a system message plus possibly a user msg.
        Returns:
            List[LLMMessage]: the task messages
        """
        msgs = [self._create_system_and_tools_message()]
        if self.user_message:
            msgs.append(LLMMessage(role=Role.USER, content=self.user_message))
        return msgs

    def _drop_msg_update_tool_calls(self, msg: LLMMessage) -> None:
        id2idx = {t.id: i for i, t in enumerate(self.oai_tool_calls)}
        if msg.role == Role.TOOL:
            # dropping tool result, so ADD the corresponding tool-call back
            # to the list of pending calls!
            id = msg.tool_call_id
            if id in self.oai_tool_id2call:
                self.oai_tool_calls.append(self.oai_tool_id2call[id])
        elif msg.tool_calls is not None:
            # dropping a msg with tool-calls, so DROP these from pending list
            # as well as from id -> call map
            for tool_call in msg.tool_calls:
                if tool_call.id in id2idx:
                    self.oai_tool_calls.pop(id2idx[tool_call.id])
                if tool_call.id in self.oai_tool_id2call:
                    del self.oai_tool_id2call[tool_call.id]

    def clear_history(self, start: int = -2) -> None:
        """
        Clear the message history, starting at the index `start`

        Args:
            start (int): index of first message to delete; default = -2
                    (i.e. delete last 2 messages, typically these
                    are the last user and assistant messages)
        """
        if start < 0:
            n = len(self.message_history)
            start = max(0, n + start)
        dropped = self.message_history[start:]
        # consider the dropped msgs in REVERSE order, so we are
        # carefully updating self.oai_tool_calls
        for msg in reversed(dropped):
            self._drop_msg_update_tool_calls(msg)
            # clear out the chat document from the ObjectRegistry
            ChatDocument.delete_id(msg.chat_document_id)
        self.message_history = self.message_history[:start]

    def update_history(self, message: str, response: str) -> None:
        """
        Update the message history with the latest user message and LLM response.
        Args:
            message (str): user message
            response: (str): LLM response
        """
        self.message_history.extend(
            [
                LLMMessage(role=Role.USER, content=message),
                LLMMessage(role=Role.ASSISTANT, content=response),
            ]
        )

    def tool_format_rules(self) -> str:
        """
        Specification of tool formatting rules
        (typically JSON-based but can be non-JSON, e.g. XMLToolMessage),
        based on the currently enabled usable `ToolMessage`s

        Returns:
            str: formatting rules
        """
        # ONLY Usable tools (i.e. LLM-generation allowed),
        usable_tool_classes: List[Type[ToolMessage]] = [
            t
            for t in list(self.llm_tools_map.values())
            if t.default_value("request") in self.llm_tools_usable
        ]

        if len(usable_tool_classes) == 0:
            return ""
        format_instructions = "\n\n".join(
            [
                msg_cls.format_instructions(tool=self.config.use_tools)
                for msg_cls in usable_tool_classes
            ]
        )
        # if any of the enabled classes has json_group_instructions, then use that,
        # else fall back to ToolMessage.json_group_instructions
        for msg_cls in usable_tool_classes:
            if hasattr(msg_cls, "json_group_instructions") and callable(
                getattr(msg_cls, "json_group_instructions")
            ):
                return msg_cls.group_format_instructions().format(
                    format_instructions=format_instructions
                )
        return ToolMessage.group_format_instructions().format(
            format_instructions=format_instructions
        )

    def tool_instructions(self) -> str:
        """
        Instructions for tools or function-calls, for enabled and usable Tools.
        These are inserted into system prompt regardless of whether we are using
        our own ToolMessage mechanism or the LLM's function-call mechanism.

        Returns:
            str: concatenation of instructions for all usable tools
        """
        enabled_classes: List[Type[ToolMessage]] = list(self.llm_tools_map.values())
        if len(enabled_classes) == 0:
            return ""
        instructions = []
        for msg_cls in enabled_classes:
            if msg_cls.default_value("request") in self.llm_tools_usable:
                class_instructions = ""
                if hasattr(msg_cls, "instructions") and inspect.ismethod(
                    msg_cls.instructions
                ):
                    class_instructions = msg_cls.instructions()
                if (
                    self.config.use_tools
                    and hasattr(msg_cls, "langroid_tools_instructions")
                    and inspect.ismethod(msg_cls.langroid_tools_instructions)
                ):
                    class_instructions += msg_cls.langroid_tools_instructions()
                # example will be shown in tool_format_rules() when using TOOLs,
                # so we don't need to show it here.
                example = "" if self.config.use_tools else (msg_cls.usage_examples())
                if example != "":
                    example = "EXAMPLES:\n" + example
                guidance = (
                    ""
                    if class_instructions == ""
                    else ("GUIDANCE: " + class_instructions)
                )
                if guidance == "" and example == "":
                    continue
                instructions.append(
                    textwrap.dedent(
                        f"""
                        TOOL: {msg_cls.default_value("request")}:
                        {guidance}
                        {example}
                        """.lstrip()
                    )
                )
        if len(instructions) == 0:
            return ""
        instructions_str = "\n\n".join(instructions)
        return textwrap.dedent(
            f"""
            === GUIDELINES ON SOME TOOLS/FUNCTIONS USAGE ===
            {instructions_str}
            """.lstrip()
        )

    def augment_system_message(self, message: str) -> None:
        """
        Augment the system message with the given message.
        Args:
            message (str): system message
        """
        self.system_message += "\n\n" + message

    def last_message_with_role(self, role: Role) -> LLMMessage | None:
        """from `message_history`, return the last message with role `role`"""
        n_role_msgs = len([m for m in self.message_history if m.role == role])
        if n_role_msgs == 0:
            return None
        idx = self.nth_message_idx_with_role(role, n_role_msgs)
        return self.message_history[idx]

    def last_message_idx_with_role(self, role: Role) -> int:
        """Index of last message in message_history, with specified role.
        Return -1 if not found. Index = 0 is the first message in the history.
        """
        indices_with_role = [
            i for i, m in enumerate(self.message_history) if m.role == role
        ]
        if len(indices_with_role) == 0:
            return -1
        return indices_with_role[-1]

    def nth_message_idx_with_role(self, role: Role, n: int) -> int:
        """Index of `n`th message in message_history, with specified role.
        (n is assumed to be 1-based, i.e. 1 is the first message with that role).
        Return -1 if not found. Index = 0 is the first message in the history.
        """
        indices_with_role = [
            i for i, m in enumerate(self.message_history) if m.role == role
        ]

        if len(indices_with_role) < n:
            return -1
        return indices_with_role[n - 1]

    def update_last_message(self, message: str, role: str = Role.USER) -> None:
        """
        Update the last message that has role `role` in the message history.
        Useful when we want to replace a long user prompt, that may contain context
        documents plus a question, with just the question.
        Args:
            message (str): new message to replace with
            role (str): role of message to replace
        """
        if len(self.message_history) == 0:
            return
        # find last message in self.message_history with role `role`
        for i in range(len(self.message_history) - 1, -1, -1):
            if self.message_history[i].role == role:
                self.message_history[i].content = message
                break

    def delete_last_message(self, role: str = Role.USER) -> None:
        """
        Delete the last message that has role `role` from the message history.
        Args:
            role (str): role of message to delete
        """
        if len(self.message_history) == 0:
            return
        # find last message in self.message_history with role `role`
        for i in range(len(self.message_history) - 1, -1, -1):
            if self.message_history[i].role == role:
                self.message_history.pop(i)
                break

    def _create_system_and_tools_message(self) -> LLMMessage:
        """
        (Re-)Create the system message for the LLM of the agent,
        taking into account any tool instructions that have been added
        after the agent was initialized.

        The system message will consist of:
        (a) the system message from the `task` arg in constructor, if any,
            otherwise the default system message from the config
        (b) the system tool instructions, if any
        (c) the system json tool instructions, if any

        Returns:
            LLMMessage object
        """
        content = self.system_message
        if self.system_tool_instructions != "":
            content += "\n\n" + self.system_tool_instructions
        if self.system_tool_format_instructions != "":
            content += "\n\n" + self.system_tool_format_instructions
        if self.output_format_instructions != "":
            content += "\n\n" + self.output_format_instructions

        # remove leading and trailing newlines and other whitespace
        return LLMMessage(role=Role.SYSTEM, content=content.strip())

    def handle_message_fallback(self, msg: str | ChatDocument) -> Any:
        """
        Fallback method for the "no-tools" scenario, i.e., the current `msg`
        (presumably emitted by the LLM) does not have any tool that the agent
        can handle.
        NOTE: The `msg` may contain tools but either (a) the agent is not
        enabled to handle them, or (b) there's an explicit `recipient` field
        in the tool that doesn't match the agent's name.

        Uses the self.config.non_tool_routing to determine the action to take.

        This method can be overridden by subclasses, e.g.,
        to create a "reminder" message when a tool is expected but the LLM "forgot"
        to generate one.

        Args:
            msg (str | ChatDocument): The input msg to handle
        Returns:
            Any: The result of the handler method
        """
        if (
            isinstance(msg, str)
            or msg.metadata.sender != Entity.LLM
            or self.config.handle_llm_no_tool is None
            or self.has_only_unhandled_tools(msg)
        ):
            return None
        # we ONLY use the `handle_llm_no_tool` config option when
        # the msg is from LLM and does not contain ANY tools at all.
        from langroid.agent.tools.orchestration import AgentDoneTool, ForwardTool

        no_tool_option = self.config.handle_llm_no_tool
        if no_tool_option in list(NonToolAction):
            # in case the `no_tool_option` is one of the special NonToolAction vals
            match self.config.handle_llm_no_tool:
                case NonToolAction.FORWARD_USER:
                    return ForwardTool(agent="User")
                case NonToolAction.DONE:
                    return AgentDoneTool(content=msg.content, tools=msg.tool_messages)
        elif is_callable(no_tool_option):
            return no_tool_option(msg)
        # Otherwise just return `no_tool_option` as is:
        # This can be any string, such as a specific nudge/reminder to the LLM,
        # or even something like ResultTool etc.
        return no_tool_option

    def unhandled_tools(self) -> set[str]:
        """The set of tools that are known but not handled.
        Useful in task flow: an agent can refuse to accept an incoming msg
        when it only has unhandled tools.
        """
        return self.llm_tools_known - self.llm_tools_handled

    def enable_message(
        self,
        message_class: Optional[Type[ToolMessage] | List[Type[ToolMessage]]],
        use: bool = True,
        handle: bool = True,
        force: bool = False,
        require_recipient: bool = False,
        include_defaults: bool = True,
    ) -> None:
        """
        Add the tool (message class) to the agent, and enable either
        - tool USE (i.e. the LLM can generate JSON to use this tool),
        - tool HANDLING (i.e. the agent can handle JSON from this tool),

        Args:
            message_class: The ToolMessage class OR List of such classes to enable,
                for USE, or HANDLING, or both.
                If this is a list of ToolMessage classes, then the remain args are
                applied to all classes.
                Optional; if None, then apply the enabling to all tools in the
                agent's toolset that have been enabled so far.
            use: IF True, allow the agent (LLM) to use this tool (or all tools),
                else disallow
            handle: if True, allow the agent (LLM) to handle (i.e. respond to) this
                tool (or all tools)
            force: whether to FORCE the agent (LLM) to USE the specific
                 tool represented by `message_class`.
                 `force` is ignored if `message_class` is None.
            require_recipient: whether to require that recipient be specified
                when using the tool message (only applies if `use` is True).
            include_defaults: whether to include fields that have default values,
                in the "properties" section of the JSON format instructions.
                (Normally the OpenAI completion API ignores these fields,
                but the Assistant fn-calling seems to pay attn to these,
                and if we don't want this, we should set this to False.)
        """
        if message_class is not None and isinstance(message_class, list):
            for mc in message_class:
                self.enable_message(
                    mc,
                    use=use,
                    handle=handle,
                    force=force,
                    require_recipient=require_recipient,
                    include_defaults=include_defaults,
                )
            return None
        if require_recipient and message_class is not None:
            message_class = message_class.require_recipient()
        if isinstance(message_class, XMLToolMessage):
            # XMLToolMessage is not compatible with OpenAI's Tools/functions API,
            # so we disable use of functions API, enable langroid-native Tools,
            # which are prompt-based.
            self.config.use_functions_api = False
            self.config.use_tools = True
        super().enable_message_handling(message_class)  # enables handling only
        tools = self._get_tool_list(message_class)
        if message_class is not None:
            request = message_class.default_value("request")
            if request == "":
                raise ValueError(
                    f"""
                    ToolMessage class {message_class} must have a non-empty 
                    'request' field if it is to be enabled as a tool.
                    """
                )
            llm_function = message_class.llm_function_schema(defaults=include_defaults)
            self.llm_functions_map[request] = llm_function
            if force:
                self.llm_function_force = dict(name=request)
            else:
                self.llm_function_force = None

        for t in tools:
            self.llm_tools_known.add(t)

            if handle:
                self.llm_tools_handled.add(t)
                self.llm_functions_handled.add(t)

                if (
                    self.enabled_handling_output_format is not None
                    and self.enabled_handling_output_format.name() == t
                ):
                    # `t` was designated as "enabled for handling" ONLY for
                    # output_format enforcement, but we are explicitly ]
                    # enabling it for handling here, so we set the variable to None.
                    self.enabled_handling_output_format = None
            else:
                self.llm_tools_handled.discard(t)
                self.llm_functions_handled.discard(t)

            if use:
                tool_class = self.llm_tools_map[t]
                if tool_class._allow_llm_use:
                    self.llm_tools_usable.add(t)
                    self.llm_functions_usable.add(t)
                else:
                    logger.warning(
                        f"""
                        ToolMessage class {tool_class} does not allow LLM use,
                        because `_allow_llm_use=False` either in the Tool or a 
                        parent class of this tool;
                        so not enabling LLM use for this tool!
                        If you intended an LLM to use this tool, 
                        set `_allow_llm_use=True` when you define the tool.
                        """
                    )
                if (
                    self.enabled_use_output_format is not None
                    and self.enabled_use_output_format.default_value("request") == t
                ):
                    # `t` was designated as "enabled for use" ONLY for output_format
                    # enforcement, but we are explicitly enabling it for use here,
                    # so we set the variable to None.
                    self.enabled_use_output_format = None
            else:
                self.llm_tools_usable.discard(t)
                self.llm_functions_usable.discard(t)

        self._update_tool_instructions()

    def _update_tool_instructions(self) -> None:
        # Set tool instructions and JSON format instructions,
        # in case Tools have been enabled/disabled.
        if self.config.use_tools:
            self.system_tool_format_instructions = self.tool_format_rules()
        self.system_tool_instructions = self.tool_instructions()

    def _requests_and_tool_settings(self) -> tuple[Optional[set[str]], bool, bool]:
        """
        Returns the current set of enabled requests for inference and tools configs.
        Used for restoring setings overriden by `set_output_format`.
        """
        return (
            self.enabled_requests_for_inference,
            self.config.use_functions_api,
            self.config.use_tools,
        )

    @property
    def all_llm_tools_known(self) -> set[str]:
        """All known tools; we include `output_format` if it is a `ToolMessage`."""
        known = self.llm_tools_known

        if self.output_format is not None and issubclass(
            self.output_format, ToolMessage
        ):
            return known.union({self.output_format.default_value("request")})

        return known

    def set_output_format(
        self,
        output_type: Optional[type],
        force_tools: Optional[bool] = None,
        use: Optional[bool] = None,
        handle: Optional[bool] = None,
        instructions: Optional[bool] = None,
        is_copy: bool = False,
    ) -> None:
        """
        Sets `output_format` to `output_type` and, if `force_tools` is enabled,
        switches to the native Langroid tools mechanism to ensure that no tool
        calls not of `output_type` are generated. By default, `force_tools`
        follows the `use_tools_on_output_format` parameter in the config.

        If `output_type` is None, restores to the state prior to setting
        `output_format`.

        If `use`, we enable use of `output_type` when it is a subclass
        of `ToolMesage`. Note that this primarily controls instruction
        generation: the model will always generate `output_type` regardless
        of whether `use` is set. Defaults to the `use_output_format`
        parameter in the config. Similarly, handling of `output_type` is
        controlled by `handle`, which defaults to the
        `handle_output_format` parameter in the config.

        `instructions` controls whether we generate instructions specifying
        the output format schema. Defaults to the `instructions_output_format`
        parameter in the config.

        `is_copy` is set when called via `__getitem__`. In that case, we must
        copy certain fields to ensure that we do not overwrite the main agent's
        setings.
        """
        # Disable usage of an output format which was not specifically enabled
        # by `enable_message`
        if self.enabled_use_output_format is not None:
            self.disable_message_use(self.enabled_use_output_format)
            self.enabled_use_output_format = None

        # Disable handling of an output format which did not specifically have
        # handling enabled via `enable_message`
        if self.enabled_handling_output_format is not None:
            self.disable_message_handling(self.enabled_handling_output_format)
            self.enabled_handling_output_format = None

        # Reset any previous instructions
        self.output_format_instructions = ""

        if output_type is None:
            self.output_format = None
            (
                requests_for_inference,
                use_functions_api,
                use_tools,
            ) = self.saved_requests_and_tool_setings
            self.config = self.config.copy()
            self.enabled_requests_for_inference = requests_for_inference
            self.config.use_functions_api = use_functions_api
            self.config.use_tools = use_tools
        else:
            if force_tools is None:
                force_tools = self.config.use_tools_on_output_format

            if not any(
                (isclass(output_type) and issubclass(output_type, t))
                for t in [ToolMessage, BaseModel]
            ):
                output_type = get_pydantic_wrapper(output_type)

            if self.output_format is None and force_tools:
                self.saved_requests_and_tool_setings = (
                    self._requests_and_tool_settings()
                )

            self.output_format = output_type
            if issubclass(output_type, ToolMessage):
                name = output_type.default_value("request")
                if use is None:
                    use = self.config.use_output_format

                if handle is None:
                    handle = self.config.handle_output_format

                if use or handle:
                    is_usable = name in self.llm_tools_usable.union(
                        self.llm_functions_usable
                    )
                    is_handled = name in self.llm_tools_handled.union(
                        self.llm_functions_handled
                    )

                    if is_copy:
                        if use:
                            # We must copy `llm_tools_usable` so the base agent
                            # is unmodified
                            self.llm_tools_usable = copy.copy(self.llm_tools_usable)
                            self.llm_functions_usable = copy.copy(
                                self.llm_functions_usable
                            )
                        if handle:
                            # If handling the tool, do the same for `llm_tools_handled`
                            self.llm_tools_handled = copy.copy(self.llm_tools_handled)
                            self.llm_functions_handled = copy.copy(
                                self.llm_functions_handled
                            )
                    # Enable `output_type`
                    self.enable_message(
                        output_type,
                        # Do not override existing settings
                        use=use or is_usable,
                        handle=handle or is_handled,
                    )

                    # If the `output_type` ToilMessage was not already enabled for
                    # use, this means we are ONLY enabling it for use specifically
                    # for enforcing this output format, so we set the
                    # `enabled_use_output_forma  to this output_type, to
                    # record that it should be disabled when `output_format` is changed
                    if not is_usable:
                        self.enabled_use_output_format = output_type

                    # (same reasoning as for use-enabling)
                    if not is_handled:
                        self.enabled_handling_output_format = output_type

                generated_tool_instructions = name in self.llm_tools_usable.union(
                    self.llm_functions_usable
                )
            else:
                generated_tool_instructions = False

            if instructions is None:
                instructions = self.config.instructions_output_format
            if issubclass(output_type, BaseModel) and instructions:
                if generated_tool_instructions:
                    # Already generated tool instructions as part of "enabling for use",
                    # so only need to generate a reminder to use this tool.
                    name = cast(ToolMessage, output_type).default_value("request")
                    self.output_format_instructions = textwrap.dedent(
                        f"""
                        === OUTPUT FORMAT INSTRUCTIONS ===

                        Please provide output using the `{name}` tool/function.
                        """
                    )
                else:
                    if issubclass(output_type, ToolMessage):
                        output_format_schema = output_type.llm_function_schema(
                            request=True,
                            defaults=self.config.output_format_include_defaults,
                        ).parameters
                    else:
                        output_format_schema = output_type.schema()

                    format_schema_for_strict(output_format_schema)

                    self.output_format_instructions = textwrap.dedent(
                        f"""
                        === OUTPUT FORMAT INSTRUCTIONS ===
                        Please provide output as JSON with the following schema:

                        {output_format_schema}
                        """
                    )

            if force_tools:
                if issubclass(output_type, ToolMessage):
                    self.enabled_requests_for_inference = {
                        output_type.default_value("request")
                    }
                if self.config.use_functions_api:
                    self.config = self.config.copy()
                    self.config.use_functions_api = False
                    self.config.use_tools = True

    def __getitem__(self, output_type: type) -> Self:
        """
        Returns a (shallow) copy of `self` with a forced output type.
        """
        clone = copy.copy(self)
        clone.set_output_format(output_type, is_copy=True)
        return clone

    def disable_message_handling(
        self,
        message_class: Optional[Type[ToolMessage]] = None,
    ) -> None:
        """
        Disable this agent from RESPONDING to a `message_class` (Tool). If
            `message_class` is None, then disable this agent from responding to ALL.
        Args:
            message_class: The ToolMessage class to disable; Optional.
        """
        super().disable_message_handling(message_class)
        for t in self._get_tool_list(message_class):
            self.llm_tools_handled.discard(t)
            self.llm_functions_handled.discard(t)

    def disable_message_use(
        self,
        message_class: Optional[Type[ToolMessage]],
    ) -> None:
        """
        Disable this agent from USING a message class (Tool).
        If `message_class` is None, then disable this agent from USING ALL tools.
        Args:
            message_class: The ToolMessage class to disable.
                If None, disable all.
        """
        for t in self._get_tool_list(message_class):
            self.llm_tools_usable.discard(t)
            self.llm_functions_usable.discard(t)

        self._update_tool_instructions()

    def disable_message_use_except(self, message_class: Type[ToolMessage]) -> None:
        """
        Disable this agent from USING ALL messages EXCEPT a message class (Tool)
        Args:
            message_class: The only ToolMessage class to allow
        """
        request = message_class.__fields__["request"].default
        to_remove = [r for r in self.llm_tools_usable if r != request]
        for r in to_remove:
            self.llm_tools_usable.discard(r)
            self.llm_functions_usable.discard(r)
        self._update_tool_instructions()

    def _load_output_format(self, message: ChatDocument) -> None:
        """
        If set, attempts to parse a value of type `self.output_format` from the message
        contents or any tool/function call and assigns it to `content_any`.
        """
        if self.output_format is not None:
            any_succeeded = False
            attempts: list[str | LLMFunctionCall] = [
                message.content,
            ]

            if message.function_call is not None:
                attempts.append(message.function_call)

            if message.oai_tool_calls is not None:
                attempts.extend(
                    [
                        c.function
                        for c in message.oai_tool_calls
                        if c.function is not None
                    ]
                )

            for attempt in attempts:
                try:
                    if isinstance(attempt, str):
                        content = json.loads(attempt)
                    else:
                        if not (
                            issubclass(self.output_format, ToolMessage)
                            and attempt.name
                            == self.output_format.default_value("request")
                        ):
                            continue

                        content = attempt.arguments

                    content_any = self.output_format.parse_obj(content)

                    if issubclass(self.output_format, PydanticWrapper):
                        message.content_any = content_any.value  # type: ignore
                    else:
                        message.content_any = content_any
                    any_succeeded = True
                    break
                except (ValidationError, json.JSONDecodeError):
                    continue

            if not any_succeeded:
                self.disable_strict = True
                logging.warning(
                    """
                    Validation error occured with strict output format enabled.
                    Disabling strict mode.
                    """
                )

    def get_tool_messages(
        self,
        msg: str | ChatDocument | None,
        all_tools: bool = False,
    ) -> List[ToolMessage]:
        """
        Extracts messages and tracks whether any errors occurred. If strict mode
        was enabled, disables it for the tool, else triggers strict recovery.
        """
        self.tool_error = False
        most_recent_sent_by_llm = (
            len(self.message_history) > 0
            and self.message_history[-1].role == Role.ASSISTANT
        )
        was_llm = most_recent_sent_by_llm or (
            isinstance(msg, ChatDocument) and msg.metadata.sender == Entity.LLM
        )
        try:
            tools = super().get_tool_messages(msg, all_tools)
        except ValidationError as ve:
            tool_class = ve.model
            if issubclass(tool_class, ToolMessage):
                was_strict = (
                    self.config.use_functions_api
                    and self.config.use_tools_api
                    and self._strict_mode_for_tool(tool_class)
                )
                # If the result of strict output for a tool using the
                # OpenAI tools API fails to parse, we infer that the
                # schema edits necessary for compatibility prevented
                # adherence to the underlying `ToolMessage` schema and
                # disable strict output for the tool
                if was_strict:
                    name = tool_class.default_value("request")
                    self.disable_strict_tools_set.add(name)
                    logging.warning(
                        f"""
                        Validation error occured with strict tool format.
                        Disabling strict mode for the {name} tool.
                        """
                    )
                else:
                    # We will trigger the strict recovery mechanism to force
                    # the LLM to correct its output, allowing us to parse
                    if isinstance(msg, ChatDocument):
                        self.tool_error = msg.metadata.sender == Entity.LLM
                    else:
                        self.tool_error = most_recent_sent_by_llm

            if was_llm:
                raise ve
            else:
                self.tool_error = False
                return []

        if not was_llm:
            self.tool_error = False

        return tools

    def _get_any_tool_message(self, optional: bool = True) -> type[ToolMessage] | None:
        """
        Returns a `ToolMessage` which wraps all enabled tools, excluding those
        where strict recovery is disabled. Used in strict recovery.
        """
        possible_tools = tuple(
            self.llm_tools_map[t]
            for t in self.llm_tools_usable
            if t not in self.disable_strict_tools_set
        )
        if len(possible_tools) == 0:
            return None
        any_tool_type = Union.__getitem__(possible_tools)  # type ignore

        maybe_optional_type = Optional[any_tool_type] if optional else any_tool_type

        class AnyTool(ToolMessage):
            purpose: str = "To call a tool/function."
            request: str = "tool_or_function"
            tool: maybe_optional_type  # type: ignore

            def response(self, agent: ChatAgent) -> None | str | ChatDocument:
                # One-time use
                agent.set_output_format(None)

                if self.tool is None:
                    return None

                # As the ToolMessage schema accepts invalid
                # `tool.request` values, reparse with the
                # corresponding tool
                request = self.tool.request
                if request not in agent.llm_tools_map:
                    return None
                tool = agent.llm_tools_map[request].parse_raw(self.tool.to_json())

                return agent.handle_tool_message(tool)

            async def response_async(
                self, agent: ChatAgent
            ) -> None | str | ChatDocument:
                # One-time use
                agent.set_output_format(None)

                if self.tool is None:
                    return None

                # As the ToolMessage schema accepts invalid
                # `tool.request` values, reparse with the
                # corresponding tool
                request = self.tool.request
                if request not in agent.llm_tools_map:
                    return None
                tool = agent.llm_tools_map[request].parse_raw(self.tool.to_json())

                return await agent.handle_tool_message_async(tool)

        return AnyTool

    def _strict_recovery_instructions(
        self,
        tool_type: Optional[type[ToolMessage]] = None,
        optional: bool = True,
    ) -> str:
        """Returns instructions for strict recovery."""
        optional_instructions = (
            (
                "\n"
                + """
        If you did NOT intend to do so, `tool` should be null.
        """
            )
            if optional
            else ""
        )
        response_prefix = "If you intended to make such a call, r" if optional else "R"
        instruction_prefix = "If you do so, b" if optional else "B"

        schema_instructions = (
            f"""
        The schema for `tool_or_function` is as follows:
        {tool_type.llm_function_schema(defaults=True, request=True).parameters}
        """
            if tool_type
            else ""
        )

        return textwrap.dedent(
            f"""
        Your previous attempt to make a tool/function call appears to have failed.
        {response_prefix}espond with your desired tool/function. Do so with the
        `tool_or_function` tool/function where `tool` is set to your intended call.
        {schema_instructions}

        {instruction_prefix}e sure that your corrected call matches your intention
        in your previous request. For any field with a default value which
        you did not intend to override in your previous attempt, be sure
        to set that field to its default value. {optional_instructions}
        """
        )

    def truncate_message(
        self,
        idx: int,
        tokens: int = 5,
        warning: str = "...[Contents truncated!]",
        inplace: bool = True,
    ) -> LLMMessage:
        """
        Truncate message at idx in msg history to `tokens` tokens.

        If inplace is True, the message is truncated in place, else
        it LEAVES the original message INTACT and returns a new message
        """
        if inplace:
            llm_msg = self.message_history[idx]
        else:
            llm_msg = copy.deepcopy(self.message_history[idx])
        orig_content = llm_msg.content
        new_content = (
            self.parser.truncate_tokens(orig_content, tokens)
            if self.parser is not None
            else orig_content[: tokens * 4]  # approx truncation
        )
        llm_msg.content = new_content + "\n" + warning
        return llm_msg

    def _reduce_raw_tool_results(self, message: ChatDocument) -> None:
        """
        If message is the result of a ToolMessage that had
        a `_max_retained_tokens` set to a non-None value, then we replace contents
        with a placeholder message.
        """
        parent_message: ChatDocument | None = message.parent
        tools = [] if parent_message is None else parent_message.tool_messages
        truncate_tools = [t for t in tools if t._max_retained_tokens is not None]
        limiting_tool = truncate_tools[0] if len(truncate_tools) > 0 else None
        if limiting_tool is not None and limiting_tool._max_retained_tokens is not None:
            tool_name = limiting_tool.default_value("request")
            max_tokens: int = limiting_tool._max_retained_tokens
            truncation_warning = f"""
                The result of the {tool_name} tool were too large, 
                and has been truncated to {max_tokens} tokens.
                To obtain the full result, the tool needs to be re-used.
            """
            self.truncate_message(
                message.metadata.msg_idx, max_tokens, truncation_warning
            )

    def llm_response(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        """
        Respond to a single user message, appended to the message history,
        in "chat" mode
        Args:
            message (str|ChatDocument): message or ChatDocument object to respond to.
                If None, use the self.task_messages
        Returns:
            LLM response as a ChatDocument object
        """
        if self.llm is None:
            return None

        # If enabled and a tool error occurred, we recover by generating the tool in
        # strict json mode
        if (
            self.tool_error
            and self.output_format is None
            and self._json_schema_available()
            and self.config.strict_recovery
        ):
            self.tool_error = False
            AnyTool = self._get_any_tool_message()
            if AnyTool is None:
                return None
            self.set_output_format(
                AnyTool,
                force_tools=True,
                use=True,
                handle=True,
                instructions=True,
            )
            recovery_message = self._strict_recovery_instructions(AnyTool)
            augmented_message = message
            if augmented_message is None:
                augmented_message = recovery_message
            elif isinstance(augmented_message, str):
                augmented_message = augmented_message + recovery_message
            else:
                augmented_message.content = augmented_message.content + recovery_message

            # only use the augmented message for this one response...
            result = self.llm_response(augmented_message)
            # ... restore the original user message so that the AnyTool recover
            # instructions don't persist in the message history
            # (this can cause the LLM to use the AnyTool directly as a tool)
            if message is None:
                self.delete_last_message(role=Role.USER)
            else:
                msg = message if isinstance(message, str) else message.content
                self.update_last_message(msg, role=Role.USER)
            return result

        hist, output_len = self._prep_llm_messages(message)
        if len(hist) == 0:
            return None
        tool_choice = (
            "auto"
            if isinstance(message, str)
            else (message.oai_tool_choice if message is not None else "auto")
        )
        with StreamingIfAllowed(self.llm, self.llm.get_stream()):
            try:
                response = self.llm_response_messages(hist, output_len, tool_choice)
            except openai.BadRequestError as e:
                if self.any_strict:
                    self.disable_strict = True
                    self.set_output_format(None)
                    logging.warning(
                        f"""
                        OpenAI BadRequestError raised with strict mode enabled.
                        Message: {e.message}
                        Disabling strict mode and retrying.
                        """
                    )
                    return self.llm_response(message)
                else:
                    raise e
        self.message_history.extend(ChatDocument.to_LLMMessage(response))
        response.metadata.msg_idx = len(self.message_history) - 1
        response.metadata.agent_id = self.id
        if isinstance(message, ChatDocument):
            self._reduce_raw_tool_results(message)
        # Preserve trail of tool_ids for OpenAI Assistant fn-calls
        response.metadata.tool_ids = (
            []
            if isinstance(message, str)
            else message.metadata.tool_ids if message is not None else []
        )

        return response

    async def llm_response_async(
        self, message: Optional[str | ChatDocument] = None
    ) -> Optional[ChatDocument]:
        """
        Async version of `llm_response`. See there for details.
        """
        if self.llm is None:
            return None

        # If enabled and a tool error occurred, we recover by generating the tool in
        # strict json mode
        if (
            self.tool_error
            and self.output_format is None
            and self._json_schema_available()
            and self.config.strict_recovery
        ):
            self.tool_error = False
            AnyTool = self._get_any_tool_message()
            self.set_output_format(
                AnyTool,
                force_tools=True,
                use=True,
                handle=True,
                instructions=True,
            )
            recovery_message = self._strict_recovery_instructions(AnyTool)
            augmented_message = message
            if augmented_message is None:
                augmented_message = recovery_message
            elif isinstance(augmented_message, str):
                augmented_message = augmented_message + recovery_message
            else:
                augmented_message.content = augmented_message.content + recovery_message

            # only use the augmented message for this one response...
            result = self.llm_response(augmented_message)
            # ... restore the original user message so that the AnyTool recover
            # instructions don't persist in the message history
            # (this can cause the LLM to use the AnyTool directly as a tool)
            if message is None:
                self.delete_last_message(role=Role.USER)
            else:
                msg = message if isinstance(message, str) else message.content
                self.update_last_message(msg, role=Role.USER)
            return result

        hist, output_len = self._prep_llm_messages(message)
        if len(hist) == 0:
            return None
        tool_choice = (
            "auto"
            if isinstance(message, str)
            else (message.oai_tool_choice if message is not None else "auto")
        )
        with StreamingIfAllowed(self.llm, self.llm.get_stream()):
            try:
                response = await self.llm_response_messages_async(
                    hist, output_len, tool_choice
                )
            except openai.BadRequestError as e:
                if self.any_strict:
                    self.disable_strict = True
                    self.set_output_format(None)
                    logging.warning(
                        f"""
                        OpenAI BadRequestError raised with strict mode enabled.
                        Message: {e.message}
                        Disabling strict mode and retrying.
                        """
                    )
                    return await self.llm_response_async(message)
                else:
                    raise e
        self.message_history.extend(ChatDocument.to_LLMMessage(response))
        response.metadata.msg_idx = len(self.message_history) - 1
        response.metadata.agent_id = self.id
        if isinstance(message, ChatDocument):
            self._reduce_raw_tool_results(message)
        # Preserve trail of tool_ids for OpenAI Assistant fn-calls
        response.metadata.tool_ids = (
            []
            if isinstance(message, str)
            else message.metadata.tool_ids if message is not None else []
        )

        return response

    def init_message_history(self) -> None:
        """
        Initialize the message history with the system message and user message
        """
        self.message_history = [self._create_system_and_tools_message()]
        if self.user_message:
            self.message_history.append(
                LLMMessage(role=Role.USER, content=self.user_message)
            )

    def _prep_llm_messages(
        self,
        message: Optional[str | ChatDocument] = None,
        truncate: bool = True,
    ) -> Tuple[List[LLMMessage], int]:
        """
        Prepare messages to be sent to self.llm_response_messages,
            which is the main method that calls the LLM API to get a response.
            If desired output tokens + message history exceeds the model context length,
            then first the max output tokens is reduced to fit, and if that is not
            possible, older messages may be truncated to accommodate at least
            self.config.llm.min_output_tokens of output.

        Returns:
            Tuple[List[LLMMessage], int]: (messages, output_len)
                messages = Full list of messages to send
                output_len = max expected number of tokens in response
        """

        if (
            not self.llm_can_respond(message)
            or self.config.llm is None
            or self.llm is None
        ):
            return [], 0

        if message is None and len(self.message_history) > 0:
            # this means agent has been used to get LLM response already,
            # and so the last message is an "assistant" response.
            # We delete this last assistant response and re-generate it.
            self.clear_history(-1)
            logger.warning(
                "Re-generating the last assistant response since message is None"
            )

        if len(self.message_history) == 0:
            # initial messages have not yet been loaded, so load them
            self.init_message_history()

            # for debugging, show the initial message history
            if settings.debug:
                print(
                    f"""
                [grey37]LLM Initial Msg History:
                {escape(self.message_history_str())}
                [/grey37]
                """
                )
        else:
            assert self.message_history[0].role == Role.SYSTEM
            # update the system message with the latest tool instructions
            self.message_history[0] = self._create_system_and_tools_message()

        if message is not None:
            if (
                isinstance(message, str)
                or message.id() != self.message_history[-1].chat_document_id
            ):
                # either the message is a str, or it is a fresh ChatDocument
                # different from the last message in the history
                llm_msgs = ChatDocument.to_LLMMessage(message, self.oai_tool_calls)
                # LLM only responds to the content, so only those msgs with
                # non-empty content should be kept
                llm_msgs = [m for m in llm_msgs if m.content.strip() != ""]
                if len(llm_msgs) == 0:
                    return [], 0
                # process tools if any
                done_tools = [m.tool_call_id for m in llm_msgs if m.role == Role.TOOL]
                self.oai_tool_calls = [
                    t for t in self.oai_tool_calls if t.id not in done_tools
                ]
                self.message_history.extend(llm_msgs)

        hist = self.message_history
        output_len = self.config.llm.model_max_output_tokens
        if (
            truncate
            and output_len > self.llm.chat_context_length() - self.chat_num_tokens(hist)
        ):
            CHAT_HISTORY_BUFFER = 300
            # chat + output > max context length,
            # so first try to shorten requested output len to fit;
            # use an extra margin of CHAT_HISTORY_BUFFER tokens
            # in case our calcs are off (and to allow for some extra tokens)
            output_len = (
                self.llm.chat_context_length()
                - self.chat_num_tokens(hist)
                - CHAT_HISTORY_BUFFER
            )
            if output_len > self.config.llm.min_output_tokens:
                logger.debug(
                    f"""
                    Chat Model context length is {self.llm.chat_context_length()},
                    but the current message history is {self.chat_num_tokens(hist)} 
                    tokens long, which does not allow 
                    {self.config.llm.model_max_output_tokens} output tokens. 
                    Therefore we reduced `max_output_tokens` to {output_len} tokens,
                    so they can fit within the model's context length
                    """
                )
            else:
                # unacceptably small output len, so compress early parts of conv
                # history if output_len is still too long.
                # TODO we should really be doing summarization or other types of
                #   prompt-size reduction
                msg_idx_to_compress = 1  # don't touch system msg
                # we will try compressing msg indices up to but not including
                # last user msg
                last_msg_idx_to_compress = (
                    self.last_message_idx_with_role(
                        role=Role.USER,
                    )
                    - 1
                )
                n_truncated = 0
                while (
                    self.chat_num_tokens(hist)
                    > self.llm.chat_context_length() - self.config.llm.min_output_tokens
                ):
                    # try dropping early parts of conv history
                    # TODO we should really be doing summarization or other types of
                    #   prompt-size reduction
                    if msg_idx_to_compress > last_msg_idx_to_compress:
                        # We want to preserve the first message (typically system msg)
                        # and last message (user msg).
                        raise ValueError(
                            """
                        The (message history + max_output_tokens) is longer than the 
                        max chat context length of this model, and we have tried 
                        reducing the requested max output tokens, as well as truncating
                        early parts of the message history, to accommodate the model 
                        context length, but we have run out of msgs to drop.
                         
                        HINT: In the `llm` field of your `ChatAgentConfig` object, 
                        which is of type `LLMConfig/OpenAIGPTConfig`, try 
                        - increasing `chat_context_length` 
                            (if accurate for the model), or  
                        - decreasing `max_output_tokens`
                        """
                        )
                    n_truncated += 1
                    # compress the msg at idx `msg_idx_to_compress`
                    hist[msg_idx_to_compress] = self.truncate_message(
                        msg_idx_to_compress,
                        tokens=30,
                        warning="... [Contents truncated!]",
                    )

                    msg_idx_to_compress += 1

                output_len = min(
                    self.config.llm.model_max_output_tokens,
                    self.llm.chat_context_length()
                    - self.chat_num_tokens(hist)
                    - CHAT_HISTORY_BUFFER,
                )
                if output_len < self.config.llm.min_output_tokens:
                    raise ValueError(
                        f"""
                        Tried to shorten prompt history for chat mode 
                        but even after truncating all messages except system msg and 
                        last (user) msg, 
                        the history token len {self.chat_num_tokens(hist)} is
                        too long to accommodate the desired minimum output tokens
                        {self.config.llm.min_output_tokens} within the 
                        model's context length {self.llm.chat_context_length()}.
                        Please try shortening the system msg or user prompts,
                        or adjust `config.llm.min_output_tokens` to be smaller. 
                        """
                    )
                else:
                    # we MUST have truncated at least one msg
                    msg_tokens = self.chat_num_tokens()
                    logger.warning(
                        f"""
                    Chat Model context length is {self.llm.chat_context_length()} 
                    tokens, but the current message history is {msg_tokens} tokens long,
                    which does not allow {self.config.llm.model_max_output_tokens} 
                    output tokens. 
                    Therefore we truncated the first {n_truncated} messages
                    in the conversation history so that history token 
                    length is reduced to {self.chat_num_tokens(hist)}, and 
                    we use `max_output_tokens = {output_len}`,
                    so they can fit within the model's context length
                    of {self.llm.chat_context_length()} tokens.
                    """
                    )

        if isinstance(message, ChatDocument):
            # record the position of the corresponding LLMMessage in
            # the message_history
            message.metadata.msg_idx = len(hist) - 1
            message.metadata.agent_id = self.id
        return hist, output_len

    def _function_args(
        self,
    ) -> Tuple[
        Optional[List[LLMFunctionSpec]],
        str | Dict[str, str],
        Optional[List[OpenAIToolSpec]],
        Optional[Dict[str, Dict[str, str] | str]],
        Optional[OpenAIJsonSchemaSpec],
    ]:
        """
        Get function/tool spec/output format arguments for
        OpenAI-compatible LLM API call
        """
        functions: Optional[List[LLMFunctionSpec]] = None
        fun_call: str | Dict[str, str] = "none"
        tools: Optional[List[OpenAIToolSpec]] = None
        force_tool: Optional[Dict[str, Dict[str, str] | str]] = None
        self.any_strict = False
        if self.config.use_functions_api and len(self.llm_functions_usable) > 0:
            if not self.config.use_tools_api:
                functions = [
                    self.llm_functions_map[f] for f in self.llm_functions_usable
                ]
                fun_call = (
                    "auto"
                    if self.llm_function_force is None
                    else self.llm_function_force
                )
            else:

                def to_maybe_strict_spec(function: str) -> OpenAIToolSpec:
                    spec = self.llm_functions_map[function]
                    strict = self._strict_mode_for_tool(function)
                    if strict:
                        self.any_strict = True
                        strict_spec = copy.deepcopy(spec)
                        format_schema_for_strict(strict_spec.parameters)
                    else:
                        strict_spec = spec

                    return OpenAIToolSpec(
                        type="function",
                        strict=strict,
                        function=strict_spec,
                    )

                tools = [to_maybe_strict_spec(f) for f in self.llm_functions_usable]
                force_tool = (
                    None
                    if self.llm_function_force is None
                    else {
                        "type": "function",
                        "function": {"name": self.llm_function_force["name"]},
                    }
                )
        output_format = None
        if self.output_format is not None and self._json_schema_available():
            self.any_strict = True
            if issubclass(self.output_format, ToolMessage) and not issubclass(
                self.output_format, XMLToolMessage
            ):
                spec = self.output_format.llm_function_schema(
                    request=True,
                    defaults=self.config.output_format_include_defaults,
                )
                format_schema_for_strict(spec.parameters)

                output_format = OpenAIJsonSchemaSpec(
                    # We always require that outputs strictly match the schema
                    strict=True,
                    function=spec,
                )
            elif issubclass(self.output_format, BaseModel):
                param_spec = self.output_format.schema()
                format_schema_for_strict(param_spec)

                output_format = OpenAIJsonSchemaSpec(
                    # We always require that outputs strictly match the schema
                    strict=True,
                    function=LLMFunctionSpec(
                        name="json_output",
                        description="Strict Json output format.",
                        parameters=param_spec,
                    ),
                )

        return functions, fun_call, tools, force_tool, output_format

    def llm_response_messages(
        self,
        messages: List[LLMMessage],
        output_len: Optional[int] = None,
        tool_choice: ToolChoiceTypes | Dict[str, str | Dict[str, str]] = "auto",
    ) -> ChatDocument:
        """
        Respond to a series of messages, e.g. with OpenAI ChatCompletion
        Args:
            messages: seq of messages (with role, content fields) sent to LLM
            output_len: max number of tokens expected in response.
                    If None, use the LLM's default model_max_output_tokens.
        Returns:
            Document (i.e. with fields "content", "metadata")
        """
        assert self.config.llm is not None and self.llm is not None
        output_len = output_len or self.config.llm.model_max_output_tokens
        streamer = noop_fn
        if self.llm.get_stream():
            streamer = self.callbacks.start_llm_stream()
        self.llm.config.streamer = streamer
        with ExitStack() as stack:  # for conditionally using rich spinner
            if not self.llm.get_stream() and not settings.quiet:
                # show rich spinner only if not streaming!
                # (Why? b/c the intent of showing a spinner is to "show progress",
                # and we don't need to do that when streaming, since
                # streaming output already shows progress.)
                cm = status(
                    "LLM responding to messages...",
                    log_if_quiet=False,
                )
                stack.enter_context(cm)
            if self.llm.get_stream() and not settings.quiet:
                console.print(f"[green]{self.indent}", end="")
            functions, fun_call, tools, force_tool, output_format = (
                self._function_args()
            )
            assert self.llm is not None
            response = self.llm.chat(
                messages,
                output_len,
                tools=tools,
                tool_choice=force_tool or tool_choice,
                functions=functions,
                function_call=fun_call,
                response_format=output_format,
            )
        if self.llm.get_stream():
            self.callbacks.finish_llm_stream(
                content=str(response),
                is_tool=self.has_tool_message_attempt(
                    ChatDocument.from_LLMResponse(response, displayed=True),
                ),
            )
        self.llm.config.streamer = noop_fn
        if response.cached:
            self.callbacks.cancel_llm_stream()
        self._render_llm_response(response)
        self.update_token_usage(
            response,  # .usage attrib is updated!
            messages,
            self.llm.get_stream(),
            chat=True,
            print_response_stats=self.config.show_stats and not settings.quiet,
        )
        chat_doc = ChatDocument.from_LLMResponse(response, displayed=True)
        self.oai_tool_calls = response.oai_tool_calls or []
        self.oai_tool_id2call.update(
            {t.id: t for t in self.oai_tool_calls if t.id is not None}
        )

        # If using strict output format, parse the output JSON
        self._load_output_format(chat_doc)

        return chat_doc

    async def llm_response_messages_async(
        self,
        messages: List[LLMMessage],
        output_len: Optional[int] = None,
        tool_choice: ToolChoiceTypes | Dict[str, str | Dict[str, str]] = "auto",
    ) -> ChatDocument:
        """
        Async version of `llm_response_messages`. See there for details.
        """
        assert self.config.llm is not None and self.llm is not None
        output_len = output_len or self.config.llm.model_max_output_tokens
        functions, fun_call, tools, force_tool, output_format = self._function_args()
        assert self.llm is not None

        streamer_async = async_noop_fn
        if self.llm.get_stream():
            streamer_async = await self.callbacks.start_llm_stream_async()
        self.llm.config.streamer_async = streamer_async

        response = await self.llm.achat(
            messages,
            output_len,
            tools=tools,
            tool_choice=force_tool or tool_choice,
            functions=functions,
            function_call=fun_call,
            response_format=output_format,
        )
        if self.llm.get_stream():
            self.callbacks.finish_llm_stream(
                content=str(response),
                is_tool=self.has_tool_message_attempt(
                    ChatDocument.from_LLMResponse(response, displayed=True),
                ),
            )
        self.llm.config.streamer_async = async_noop_fn
        if response.cached:
            self.callbacks.cancel_llm_stream()
        self._render_llm_response(response)
        self.update_token_usage(
            response,  # .usage attrib is updated!
            messages,
            self.llm.get_stream(),
            chat=True,
            print_response_stats=self.config.show_stats and not settings.quiet,
        )
        chat_doc = ChatDocument.from_LLMResponse(response, displayed=True)
        self.oai_tool_calls = response.oai_tool_calls or []
        self.oai_tool_id2call.update(
            {t.id: t for t in self.oai_tool_calls if t.id is not None}
        )

        # If using strict output format, parse the output JSON
        self._load_output_format(chat_doc)

        return chat_doc

    def _render_llm_response(
        self, response: ChatDocument | LLMResponse, citation_only: bool = False
    ) -> None:
        is_cached = (
            response.cached
            if isinstance(response, LLMResponse)
            else response.metadata.cached
        )
        if self.llm is None:
            return
        if not citation_only and (not self.llm.get_stream() or is_cached):
            # We would have already displayed the msg "live" ONLY if
            # streaming was enabled, AND we did not find a cached response.
            # If we are here, it means the response has not yet been displayed.
            cached = f"[red]{self.indent}(cached)[/red]" if is_cached else ""
            chat_doc = (
                response
                if isinstance(response, ChatDocument)
                else ChatDocument.from_LLMResponse(response, displayed=True)
            )
            # TODO: prepend TOOL: or OAI-TOOL: if it's a tool-call
            if not settings.quiet:
                print(cached + "[green]" + escape(str(response)))
            self.callbacks.show_llm_response(
                content=str(response),
                is_tool=self.has_tool_message_attempt(chat_doc),
                cached=is_cached,
            )
        if isinstance(response, LLMResponse):
            # we are in the context immediately after an LLM responded,
            # we won't have citations yet, so we're done
            return
        if response.metadata.has_citation:
            citation = (
                response.metadata.source_content
                if self.config.full_citations
                else response.metadata.source
            )
            if not settings.quiet:
                print("[grey37]SOURCES:\n" + escape(citation) + "[/grey37]")
            self.callbacks.show_llm_response(
                content=str(citation),
                is_tool=False,
                cached=False,
                language="text",
            )

    def _llm_response_temp_context(self, message: str, prompt: str) -> ChatDocument:
        """
        Get LLM response to `prompt` (which presumably includes the `message`
        somewhere, along with possible large "context" passages),
        but only include `message` as the USER message, and not the
        full `prompt`, in the message history.
        Args:
            message: the original, relatively short, user request or query
            prompt: the full prompt potentially containing `message` plus context

        Returns:
            Document object containing the response.
        """
        # we explicitly call THIS class's respond method,
        # not a derived class's (or else there would be infinite recursion!)
        with StreamingIfAllowed(self.llm, self.llm.get_stream()):  # type: ignore
            answer_doc = cast(ChatDocument, ChatAgent.llm_response(self, prompt))
        self.update_last_message(message, role=Role.USER)
        return answer_doc

    async def _llm_response_temp_context_async(
        self, message: str, prompt: str
    ) -> ChatDocument:
        """
        Async version of `_llm_response_temp_context`. See there for details.
        """
        # we explicitly call THIS class's respond method,
        # not a derived class's (or else there would be infinite recursion!)
        with StreamingIfAllowed(self.llm, self.llm.get_stream()):  # type: ignore
            answer_doc = cast(
                ChatDocument,
                await ChatAgent.llm_response_async(self, prompt),
            )
        self.update_last_message(message, role=Role.USER)
        return answer_doc

    def llm_response_forget(
        self, message: Optional[str | ChatDocument] = None
    ) -> ChatDocument:
        """
        LLM Response to single message, and restore message_history.
        In effect a "one-off" message & response that leaves agent
        message history state intact.

        Args:
            message (str|ChatDocument): message to respond to.

        Returns:
            A Document object with the response.

        """
        # explicitly call THIS class's respond method,
        # not a derived class's (or else there would be infinite recursion!)
        n_msgs = len(self.message_history)
        with StreamingIfAllowed(self.llm, self.llm.get_stream()):  # type: ignore
            response = cast(ChatDocument, ChatAgent.llm_response(self, message))
        # If there is a response, then we will have two additional
        # messages in the message history, i.e. the user message and the
        # assistant response. We want to (carefully) remove these two messages.
        if len(self.message_history) > n_msgs:
            msg = self.message_history.pop()
            self._drop_msg_update_tool_calls(msg)

        if len(self.message_history) > n_msgs:
            msg = self.message_history.pop()
            self._drop_msg_update_tool_calls(msg)

        # If using strict output format, parse the output JSON
        self._load_output_format(response)

        return response

    async def llm_response_forget_async(
        self, message: Optional[str | ChatDocument] = None
    ) -> ChatDocument:
        """
        Async version of `llm_response_forget`. See there for details.
        """
        # explicitly call THIS class's respond method,
        # not a derived class's (or else there would be infinite recursion!)
        n_msgs = len(self.message_history)
        with StreamingIfAllowed(self.llm, self.llm.get_stream()):  # type: ignore
            response = cast(
                ChatDocument, await ChatAgent.llm_response_async(self, message)
            )
        # If there is a response, then we will have two additional
        # messages in the message history, i.e. the user message and the
        # assistant response. We want to (carefully) remove these two messages.
        if len(self.message_history) > n_msgs:
            msg = self.message_history.pop()
            self._drop_msg_update_tool_calls(msg)

        if len(self.message_history) > n_msgs:
            msg = self.message_history.pop()
            self._drop_msg_update_tool_calls(msg)
        return response

    def chat_num_tokens(self, messages: Optional[List[LLMMessage]] = None) -> int:
        """
        Total number of tokens in the message history so far.

        Args:
            messages: if provided, compute the number of tokens in this list of
                messages, rather than the current message history.
        Returns:
            int: number of tokens in message history
        """
        if self.parser is None:
            raise ValueError(
                "ChatAgent.parser is None. "
                "You must set ChatAgent.parser "
                "before calling chat_num_tokens()."
            )
        hist = messages if messages is not None else self.message_history
        return sum([self.parser.num_tokens(m.content) for m in hist])

    def message_history_str(self, i: Optional[int] = None) -> str:
        """
        Return a string representation of the message history
        Args:
            i: if provided, return only the i-th message when i is postive,
                or last k messages when i = -k.
        Returns:
        """
        if i is None:
            return "\n".join([str(m) for m in self.message_history])
        elif i > 0:
            return str(self.message_history[i])
        else:
            return "\n".join([str(m) for m in self.message_history[i:]])

    def __del__(self) -> None:
        """
        Cleanup method called when the ChatAgent is garbage collected.
        Note: We don't close LLM clients here because they may be shared
        across multiple agents when client caching is enabled.
        The clients are managed centrally and cleaned up via atexit hooks.
        """
        # Previously we closed clients here, but this caused issues when
        # multiple agents shared the same cached client instance.
        # Clients are now managed centrally in langroid.language_models.client_cache
        pass
</file>

<file path="langroid/agent/chat_document.py">
from __future__ import annotations

import copy
import json
from collections import OrderedDict
from enum import Enum
from typing import Any, Dict, List, Optional, Union, cast

from langroid.agent.tool_message import ToolMessage
from langroid.agent.xml_tool_message import XMLToolMessage
from langroid.language_models.base import (
    LLMFunctionCall,
    LLMMessage,
    LLMResponse,
    LLMTokenUsage,
    OpenAIToolCall,
    Role,
    ToolChoiceTypes,
)
from langroid.mytypes import DocMetaData, Document, Entity
from langroid.parsing.agent_chats import parse_message
from langroid.parsing.file_attachment import FileAttachment
from langroid.parsing.parse_json import extract_top_level_json, top_level_json_field
from langroid.pydantic_v1 import BaseModel, Extra
from langroid.utils.object_registry import ObjectRegistry
from langroid.utils.output.printing import shorten_text
from langroid.utils.types import to_string


class ChatDocAttachment(BaseModel):
    # any additional data that should be attached to the document
    class Config:
        extra = Extra.allow


class StatusCode(str, Enum):
    """Codes meant to be returned by task.run(). Some are not used yet."""

    OK = "OK"
    ERROR = "ERROR"
    DONE = "DONE"
    STALLED = "STALLED"
    INF_LOOP = "INF_LOOP"
    KILL = "KILL"
    FIXED_TURNS = "FIXED_TURNS"  # reached intended number of turns
    MAX_TURNS = "MAX_TURNS"  # hit max-turns limit
    MAX_COST = "MAX_COST"
    MAX_TOKENS = "MAX_TOKENS"
    TIMEOUT = "TIMEOUT"
    NO_ANSWER = "NO_ANSWER"
    USER_QUIT = "USER_QUIT"


class ChatDocMetaData(DocMetaData):
    parent_id: str = ""  # msg (ChatDocument) to which this is a response
    child_id: str = ""  # ChatDocument that has response to this message
    agent_id: str = ""  # ChatAgent that generated this message
    msg_idx: int = -1  # index of this message in the agent `message_history`
    sender: Entity  # sender of the message
    # tool_id corresponding to single tool result in ChatDocument.content
    oai_tool_id: str | None = None
    tool_ids: List[str] = []  # stack of tool_ids; used by OpenAIAssistant
    block: None | Entity = None
    sender_name: str = ""
    recipient: str = ""
    usage: Optional[LLMTokenUsage] = None
    cached: bool = False
    displayed: bool = False
    has_citation: bool = False
    status: Optional[StatusCode] = None

    @property
    def parent(self) -> Optional["ChatDocument"]:
        return ChatDocument.from_id(self.parent_id)

    @property
    def child(self) -> Optional["ChatDocument"]:
        return ChatDocument.from_id(self.child_id)


class ChatDocLoggerFields(BaseModel):
    sender_entity: Entity = Entity.USER
    sender_name: str = ""
    recipient: str = ""
    block: Entity | None = None
    tool_type: str = ""
    tool: str = ""
    content: str = ""

    @classmethod
    def tsv_header(cls) -> str:
        field_names = cls().dict().keys()
        return "\t".join(field_names)


class ChatDocument(Document):
    """
    Represents a message in a conversation among agents. All responders of an agent
    have signature ChatDocument -> ChatDocument (modulo None, str, etc),
    and so does the Task.run() method.

    Attributes:
        oai_tool_calls (Optional[List[OpenAIToolCall]]):
            Tool-calls from an OpenAI-compatible API
        oai_tool_id2results (Optional[OrderedDict[str, str]]):
            Results of tool-calls from OpenAI (dict is a map of tool_id -> result)
        oai_tool_choice: ToolChoiceTypes | Dict[str, str]: Param controlling how the
            LLM should choose tool-use in its response
            (auto, none, required, or a specific tool)
        function_call (Optional[LLMFunctionCall]):
            Function-call from an OpenAI-compatible API
                (deprecated by OpenAI, in favor of tool-calls)
        tool_messages (List[ToolMessage]): Langroid ToolMessages extracted from
            - `content` field (via JSON parsing),
            - `oai_tool_calls`, or
            - `function_call`
        metadata (ChatDocMetaData): Metadata for the message, e.g. sender, recipient.
        attachment (None | ChatDocAttachment): Any additional data attached.
    """

    reasoning: str = ""  # reasoning produced by a reasoning LLM
    content_any: Any = None  # to hold arbitrary data returned by responders
    files: List[FileAttachment] = []  # list of file attachments
    oai_tool_calls: Optional[List[OpenAIToolCall]] = None
    oai_tool_id2result: Optional[OrderedDict[str, str]] = None
    oai_tool_choice: ToolChoiceTypes | Dict[str, Dict[str, str] | str] = "auto"
    function_call: Optional[LLMFunctionCall] = None
    # tools that are explicitly added by agent response/handler,
    # or tools recognized in the ChatDocument as handle-able tools
    tool_messages: List[ToolMessage] = []
    # all known tools in the msg that are in an agent's llm_tools_known list,
    # even if non-used/handled
    all_tool_messages: List[ToolMessage] = []

    metadata: ChatDocMetaData
    attachment: None | ChatDocAttachment = None

    def __init__(self, **data: Any):
        super().__init__(**data)
        ObjectRegistry.register_object(self)

    @property
    def parent(self) -> Optional["ChatDocument"]:
        return ChatDocument.from_id(self.metadata.parent_id)

    @property
    def child(self) -> Optional["ChatDocument"]:
        return ChatDocument.from_id(self.metadata.child_id)

    @staticmethod
    def deepcopy(doc: ChatDocument) -> ChatDocument:
        new_doc = copy.deepcopy(doc)
        new_doc.metadata.id = ObjectRegistry.new_id()
        new_doc.metadata.child_id = ""
        new_doc.metadata.parent_id = ""
        ObjectRegistry.register_object(new_doc)
        return new_doc

    @staticmethod
    def from_id(id: str) -> Optional["ChatDocument"]:
        return cast(ChatDocument, ObjectRegistry.get(id))

    @staticmethod
    def delete_id(id: str) -> None:
        """Remove ChatDocument with given id from ObjectRegistry,
        and all its descendants.
        """
        chat_doc = ChatDocument.from_id(id)
        # first delete all descendants
        while chat_doc is not None:
            next_chat_doc = chat_doc.child
            ObjectRegistry.remove(chat_doc.id())
            chat_doc = next_chat_doc

    def __str__(self) -> str:
        fields = self.log_fields()
        tool_str = ""
        if fields.tool_type != "":
            tool_str = f"{fields.tool_type}[{fields.tool}]: "
        recipient_str = ""
        if fields.recipient != "":
            recipient_str = f"=>{fields.recipient}: "
        return (
            f"{fields.sender_entity}[{fields.sender_name}] "
            f"{recipient_str}{tool_str}{fields.content}"
        )

    def get_tool_names(self) -> List[str]:
        """
        Get names of attempted tool usages (JSON or non-JSON) in the content
            of the message.
        Returns:
            List[str]: list of *attempted* tool names
            (We say "attempted" since we ONLY look at the `request` component of the
            tool-call representation, and we're not fully parsing it into the
            corresponding tool message class)

        """
        tool_candidates = XMLToolMessage.find_candidates(self.content)
        if len(tool_candidates) == 0:
            tool_candidates = extract_top_level_json(self.content)
            if len(tool_candidates) == 0:
                return []
            tools = [json.loads(tc).get("request") for tc in tool_candidates]
        else:
            tool_dicts = [
                XMLToolMessage.extract_field_values(tc) for tc in tool_candidates
            ]
            tools = [td.get("request") for td in tool_dicts if td is not None]
        return [str(tool) for tool in tools if tool is not None]

    def log_fields(self) -> ChatDocLoggerFields:
        """
        Fields for logging in csv/tsv logger
        Returns:
            List[str]: list of fields
        """
        tool_type = ""  # FUNC or TOOL
        tool = ""  # tool name or function name
        oai_tools = (
            []
            if self.oai_tool_calls is None
            else [t for t in self.oai_tool_calls if t.function is not None]
        )
        if self.function_call is not None:
            tool_type = "FUNC"
            tool = self.function_call.name
        elif len(oai_tools) > 0:
            tool_type = "OAI_TOOL"
            tool = ",".join(t.function.name for t in oai_tools)  # type: ignore
        else:
            try:
                json_tools = self.get_tool_names()
            except Exception:
                json_tools = []
            if json_tools != []:
                tool_type = "TOOL"
                tool = json_tools[0]
        recipient = self.metadata.recipient
        content = self.content
        sender_entity = self.metadata.sender
        sender_name = self.metadata.sender_name
        if tool_type == "FUNC":
            content += str(self.function_call)
        return ChatDocLoggerFields(
            sender_entity=sender_entity,
            sender_name=sender_name,
            recipient=recipient,
            block=self.metadata.block,
            tool_type=tool_type,
            tool=tool,
            content=content,
        )

    def tsv_str(self) -> str:
        fields = self.log_fields()
        fields.content = shorten_text(fields.content, 80)
        field_values = fields.dict().values()
        return "\t".join(str(v) for v in field_values)

    def pop_tool_ids(self) -> None:
        """
        Pop the last tool_id from the stack of tool_ids.
        """
        if len(self.metadata.tool_ids) > 0:
            self.metadata.tool_ids.pop()

    @staticmethod
    def _clean_fn_call(fc: LLMFunctionCall | None) -> None:
        # Sometimes an OpenAI LLM (esp gpt-4o) may generate a function-call
        # with oddities:
        # (a) the `name` is set, as well as `arguments.request` is set,
        #  and in langroid we use the `request` value as the `name`.
        #  In this case we override the `name` with the `request` value.
        # (b) the `name` looks like "functions blah" or just "functions"
        #   In this case we strip the "functions" part.
        if fc is None:
            return
        fc.name = fc.name.replace("functions", "").strip()
        if fc.arguments is not None:
            request = fc.arguments.get("request")
            if request is not None and request != "":
                fc.name = request
                fc.arguments.pop("request")

    @staticmethod
    def from_LLMResponse(
        response: LLMResponse,
        displayed: bool = False,
    ) -> "ChatDocument":
        """
        Convert LLMResponse to ChatDocument.
        Args:
            response (LLMResponse): LLMResponse to convert.
            displayed (bool): Whether this response was displayed to the user.
        Returns:
            ChatDocument: ChatDocument representation of this LLMResponse.
        """
        recipient, message = response.get_recipient_and_message()
        message = message.strip()
        if message in ["''", '""']:
            message = ""
        if response.function_call is not None:
            ChatDocument._clean_fn_call(response.function_call)
        if response.oai_tool_calls is not None:
            # there must be at least one if it's not None
            for oai_tc in response.oai_tool_calls:
                ChatDocument._clean_fn_call(oai_tc.function)
        return ChatDocument(
            content=message,
            reasoning=response.reasoning,
            content_any=message,
            oai_tool_calls=response.oai_tool_calls,
            function_call=response.function_call,
            metadata=ChatDocMetaData(
                source=Entity.LLM,
                sender=Entity.LLM,
                usage=response.usage,
                displayed=displayed,
                cached=response.cached,
                recipient=recipient,
            ),
        )

    @staticmethod
    def from_str(msg: str) -> "ChatDocument":
        # first check whether msg is structured as TO <recipient>: <message>
        recipient, message = parse_message(msg)
        if recipient == "":
            # check if any top level json specifies a 'recipient'
            recipient = top_level_json_field(msg, "recipient")
            message = msg  # retain the whole msg in this case
        return ChatDocument(
            content=message,
            content_any=message,
            metadata=ChatDocMetaData(
                source=Entity.USER,
                sender=Entity.USER,
                recipient=recipient,
            ),
        )

    @staticmethod
    def to_LLMMessage(
        message: Union[str, "ChatDocument"],
        oai_tools: Optional[List[OpenAIToolCall]] = None,
    ) -> List[LLMMessage]:
        """
        Convert to list of LLMMessage, to incorporate into msg-history sent to LLM API.
        Usually there will be just a single LLMMessage, but when the ChatDocument
        contains results from multiple OpenAI tool-calls, we would have a sequence
        LLMMessages, one per tool-call result.

        Args:
            message (str|ChatDocument): Message to convert.
            oai_tools (Optional[List[OpenAIToolCall]]): Tool-calls currently awaiting
                response, from the ChatAgent's latest message.
        Returns:
            List[LLMMessage]: list of LLMMessages corresponding to this ChatDocument.
        """

        sender_role = Role.USER
        if isinstance(message, str):
            message = ChatDocument.from_str(message)
        content = message.content or to_string(message.content_any) or ""
        fun_call = message.function_call
        oai_tool_calls = message.oai_tool_calls
        if message.metadata.sender == Entity.USER and fun_call is not None:
            # This may happen when a (parent agent's) LLM generates a
            # a Function-call, and it ends up being sent to the current task's
            # LLM (possibly because the function-call is mis-named or has other
            # issues and couldn't be handled by handler methods).
            # But a function-call can only be generated by an entity with
            # Role.ASSISTANT, so we instead put the content of the function-call
            # in the content of the message.
            content += " " + str(fun_call)
            fun_call = None
        if message.metadata.sender == Entity.USER and oai_tool_calls is not None:
            # same reasoning as for function-call above
            content += " " + "\n\n".join(str(tc) for tc in oai_tool_calls)
            oai_tool_calls = None
        # some LLM APIs (e.g. gemini) don't like empty msg
        content = content or " "
        sender_name = message.metadata.sender_name
        tool_ids = message.metadata.tool_ids
        tool_id = tool_ids[-1] if len(tool_ids) > 0 else ""
        chat_document_id = message.id()
        if message.metadata.sender == Entity.SYSTEM:
            sender_role = Role.SYSTEM
        if (
            message.metadata.parent is not None
            and message.metadata.parent.function_call is not None
        ):
            # This is a response to a function call, so set the role to FUNCTION.
            sender_role = Role.FUNCTION
            sender_name = message.metadata.parent.function_call.name
        elif oai_tools is not None and len(oai_tools) > 0:
            pending_tool_ids = [tc.id for tc in oai_tools]
            # The ChatAgent has pending OpenAI tool-call(s),
            # so the current ChatDocument contains
            # results for some/all/none of them.

            if len(oai_tools) == 1:
                # Case 1:
                # There was exactly 1 pending tool-call, and in this case
                # the result would be a plain string in `content`
                return [
                    LLMMessage(
                        role=Role.TOOL,
                        tool_call_id=oai_tools[0].id,
                        content=content,
                        files=message.files,
                        chat_document_id=chat_document_id,
                    )
                ]

            elif (
                message.metadata.oai_tool_id is not None
                and message.metadata.oai_tool_id in pending_tool_ids
            ):
                # Case 2:
                # ChatDocument.content has result of a single tool-call
                return [
                    LLMMessage(
                        role=Role.TOOL,
                        tool_call_id=message.metadata.oai_tool_id,
                        content=content,
                        files=message.files,
                        chat_document_id=chat_document_id,
                    )
                ]
            elif message.oai_tool_id2result is not None:
                # Case 2:
                # There were > 1 tool-calls awaiting response,
                assert (
                    len(message.oai_tool_id2result) > 1
                ), "oai_tool_id2result must have more than 1 item."
                return [
                    LLMMessage(
                        role=Role.TOOL,
                        tool_call_id=tool_id,
                        content=result or " ",
                        files=message.files,
                        chat_document_id=chat_document_id,
                    )
                    for tool_id, result in message.oai_tool_id2result.items()
                ]
        elif message.metadata.sender == Entity.LLM:
            sender_role = Role.ASSISTANT

        return [
            LLMMessage(
                role=sender_role,
                tool_id=tool_id,  # for OpenAI Assistant
                content=content,
                files=message.files,
                function_call=fun_call,
                tool_calls=oai_tool_calls,
                name=sender_name,
                chat_document_id=chat_document_id,
            )
        ]


LLMMessage.update_forward_refs()
ChatDocMetaData.update_forward_refs()
</file>

<file path="langroid/embedding_models/models.py">
import atexit
import os
from functools import cached_property
from typing import Any, Callable, Dict, List, Optional

import requests
import tiktoken
from dotenv import load_dotenv
from openai import AzureOpenAI, OpenAI

from langroid.embedding_models.base import EmbeddingModel, EmbeddingModelsConfig
from langroid.exceptions import LangroidImportError
from langroid.language_models.provider_params import LangDBParams
from langroid.mytypes import Embeddings
from langroid.parsing.utils import batched

AzureADTokenProvider = Callable[[], str]


class OpenAIEmbeddingsConfig(EmbeddingModelsConfig):
    model_type: str = "openai"
    model_name: str = "text-embedding-3-small"
    api_key: str = ""
    api_base: Optional[str] = None
    organization: str = ""
    dims: int = 1536
    context_length: int = 8192
    langdb_params: LangDBParams = LangDBParams()

    class Config:
        # enable auto-loading of env vars with OPENAI_ prefix, e.g.
        # api_base is set from OPENAI_API_BASE env var, in .env or system env
        env_prefix = "OPENAI_"


class AzureOpenAIEmbeddingsConfig(EmbeddingModelsConfig):
    model_type: str = "azure-openai"
    model_name: str = "text-embedding-3-small"
    api_key: str = ""
    api_base: str = ""
    deployment_name: Optional[str] = None
    # api_version defaulted to 2024-06-01 as per https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/embeddings?tabs=python-new
    # change this to required  supported version
    api_version: Optional[str] = "2024-06-01"
    # TODO: Add auth support for Azure OpenAI via AzureADTokenProvider
    azure_ad_token: Optional[str] = None
    azure_ad_token_provider: Optional[AzureADTokenProvider] = None
    dims: int = 1536
    context_length: int = 8192

    class Config:
        # enable auto-loading of env vars with AZURE_OPENAI_ prefix
        env_prefix = "AZURE_OPENAI_"


class SentenceTransformerEmbeddingsConfig(EmbeddingModelsConfig):
    model_type: str = "sentence-transformer"
    model_name: str = "BAAI/bge-large-en-v1.5"
    context_length: int = 512
    data_parallel: bool = False
    # Select device (e.g. "cuda", "cpu") when data parallel is disabled
    device: Optional[str] = None
    # Select devices when data parallel is enabled
    devices: Optional[list[str]] = None


class FastEmbedEmbeddingsConfig(EmbeddingModelsConfig):
    """Config for qdrant/fastembed embeddings,
    see here: https://github.com/qdrant/fastembed
    """

    model_type: str = "fastembed"
    model_name: str = "BAAI/bge-small-en-v1.5"
    batch_size: int = 256
    cache_dir: Optional[str] = None
    threads: Optional[int] = None
    parallel: Optional[int] = None
    additional_kwargs: Dict[str, Any] = {}


class LlamaCppServerEmbeddingsConfig(EmbeddingModelsConfig):
    api_base: str = ""
    context_length: int = 2048
    batch_size: int = 2048


class GeminiEmbeddingsConfig(EmbeddingModelsConfig):
    model_type: str = "gemini"
    model_name: str = "models/text-embedding-004"
    api_key: str = ""
    dims: int = 768
    batch_size: int = 512


class EmbeddingFunctionCallable:
    """
    A callable class designed to generate embeddings for a list of texts using
    the OpenAI or Azure OpenAI API, with automatic retries on failure.

    Attributes:
        embed_model (EmbeddingModel): An instance of EmbeddingModel that provides
               configuration and utilities for generating embeddings.

    Methods:
        __call__(input: List[str]) -> Embeddings: Generate embeddings for
                                a list of input texts.
    """

    def __init__(self, embed_model: EmbeddingModel, batch_size: int = 512):
        """
        Initialize the EmbeddingFunctionCallable with a specific model.

        Args:
            model ( OpenAIEmbeddings or AzureOpenAIEmbeddings): An instance of
                            OpenAIEmbeddings or AzureOpenAIEmbeddings to use for
                            generating embeddings.
            batch_size (int): Batch size
        """
        self.embed_model = embed_model
        self.batch_size = batch_size

    def __call__(self, input: List[str]) -> Embeddings:
        """
        Generate embeddings for a given list of input texts using the OpenAI API,
        with retries on failure.

        This method:
        - Truncates each text in the input list to the model's maximum context length.
        - Processes the texts in batches to generate embeddings efficiently.
        - Automatically retries the embedding generation process with exponential
        backoff in case of failures.

        Args:
            input (List[str]): A list of input texts to generate embeddings for.

        Returns:
            Embeddings: A list of embedding vectors corresponding to the input texts.
        """
        embeds = []
        if isinstance(self.embed_model, (OpenAIEmbeddings, AzureOpenAIEmbeddings)):
            # Truncate texts to context length while preserving text format
            truncated_texts = self.embed_model.truncate_texts(input)

            # Process in batches
            for batch in batched(truncated_texts, self.batch_size):
                result = self.embed_model.client.embeddings.create(
                    input=batch, model=self.embed_model.config.model_name  # type: ignore
                )
                batch_embeds = [d.embedding for d in result.data]
                embeds.extend(batch_embeds)

        elif isinstance(self.embed_model, SentenceTransformerEmbeddings):
            if self.embed_model.config.data_parallel:
                embeds = self.embed_model.model.encode_multi_process(
                    input,
                    self.embed_model.pool,
                    batch_size=self.batch_size,
                ).tolist()
            else:
                for str_batch in batched(input, self.batch_size):
                    batch_embeds = self.embed_model.model.encode(
                        str_batch, convert_to_numpy=True
                    ).tolist()  # type: ignore
                    embeds.extend(batch_embeds)

        elif isinstance(self.embed_model, FastEmbedEmbeddings):
            embeddings = self.embed_model.model.embed(
                input, batch_size=self.batch_size, parallel=self.embed_model.parallel
            )

            embeds = [embedding.tolist() for embedding in embeddings]
        elif isinstance(self.embed_model, LlamaCppServerEmbeddings):
            for input_string in input:
                tokenized_text = self.embed_model.tokenize_string(input_string)
                for token_batch in batched(tokenized_text, self.batch_size):
                    gen_embedding = self.embed_model.generate_embedding(
                        self.embed_model.detokenize_string(list(token_batch))
                    )
                    embeds.append(gen_embedding)
        elif isinstance(self.embed_model, GeminiEmbeddings):
            embeds = self.embed_model.generate_embeddings(input)
        return embeds


class OpenAIEmbeddings(EmbeddingModel):
    def __init__(self, config: OpenAIEmbeddingsConfig = OpenAIEmbeddingsConfig()):
        super().__init__()
        self.config = config
        load_dotenv()

        # Check if using LangDB
        self.is_langdb = self.config.model_name.startswith("langdb/")

        if self.is_langdb:
            self.config.model_name = self.config.model_name.replace("langdb/", "")
            self.config.api_base = self.config.langdb_params.base_url
            project_id = self.config.langdb_params.project_id
            if project_id:
                self.config.api_base += "/" + project_id + "/v1"
            self.config.api_key = self.config.langdb_params.api_key

        if not self.config.api_key:
            self.config.api_key = os.getenv("OPENAI_API_KEY", "")

        self.config.organization = os.getenv("OPENAI_ORGANIZATION", "")

        if self.config.api_key == "":
            if self.is_langdb:
                raise ValueError(
                    """
                    LANGDB_API_KEY must be set in .env or your environment 
                    to use OpenAIEmbeddings via LangDB.
                    """
                )
            else:
                raise ValueError(
                    """
                    OPENAI_API_KEY must be set in .env or your environment 
                    to use OpenAIEmbeddings.
                    """
                )

        self.client = OpenAI(
            base_url=self.config.api_base,
            api_key=self.config.api_key,
            organization=self.config.organization,
        )
        model_for_tokenizer = self.config.model_name
        if model_for_tokenizer.startswith("openai/"):
            self.config.model_name = model_for_tokenizer.replace("openai/", "")
        self.tokenizer = tiktoken.encoding_for_model(self.config.model_name)

    def truncate_texts(self, texts: List[str]) -> List[str] | List[List[int]]:
        """
        Truncate texts to the embedding model's context length.
        TODO: Maybe we should show warning, and consider doing T5 summarization?
        """
        truncated_tokens = [
            self.tokenizer.encode(text, disallowed_special=())[
                : self.config.context_length
            ]
            for text in texts
        ]

        if self.is_langdb:
            # LangDB embedding endpt only works with strings, not tokens
            return [self.tokenizer.decode(tokens) for tokens in truncated_tokens]
        return truncated_tokens

    def embedding_fn(self) -> Callable[[List[str]], Embeddings]:
        return EmbeddingFunctionCallable(self, self.config.batch_size)

    @property
    def embedding_dims(self) -> int:
        return self.config.dims


class AzureOpenAIEmbeddings(EmbeddingModel):
    """
    Azure OpenAI embeddings model implementation.
    """

    def __init__(
        self, config: AzureOpenAIEmbeddingsConfig = AzureOpenAIEmbeddingsConfig()
    ):
        """
        Initializes Azure OpenAI embeddings model.

        Args:
            config: Configuration for Azure OpenAI embeddings model.
        Raises:
            ValueError: If required Azure config values are not set.
        """
        super().__init__()
        self.config = config
        load_dotenv()

        if self.config.api_key == "":
            raise ValueError(
                """AZURE_OPENAI_API_KEY env variable must be set to use 
            AzureOpenAIEmbeddings. Please set the AZURE_OPENAI_API_KEY value 
            in your .env file."""
            )

        if self.config.api_base == "":
            raise ValueError(
                """AZURE_OPENAI_API_BASE env variable must be set to use 
            AzureOpenAIEmbeddings. Please set the AZURE_OPENAI_API_BASE value 
            in your .env file."""
            )
        self.client = AzureOpenAI(
            api_key=self.config.api_key,
            api_version=self.config.api_version,
            azure_endpoint=self.config.api_base,
            azure_deployment=self.config.deployment_name,
        )
        self.tokenizer = tiktoken.encoding_for_model(self.config.model_name)

    def truncate_texts(self, texts: List[str]) -> List[str] | List[List[int]]:
        """
        Truncate texts to the embedding model's context length.
        TODO: Maybe we should show warning, and consider doing T5 summarization?
        """
        return [
            self.tokenizer.encode(text, disallowed_special=())[
                : self.config.context_length
            ]
            for text in texts
        ]

    def embedding_fn(self) -> Callable[[List[str]], Embeddings]:
        """Get the embedding function for Azure OpenAI.

        Returns:
            Callable that generates embeddings for input texts.
        """
        return EmbeddingFunctionCallable(self, self.config.batch_size)

    @property
    def embedding_dims(self) -> int:
        return self.config.dims


STEC = SentenceTransformerEmbeddingsConfig


class SentenceTransformerEmbeddings(EmbeddingModel):
    def __init__(self, config: STEC = STEC()):
        # this is an "extra" optional dependency, so we import it here
        try:
            from sentence_transformers import SentenceTransformer
            from transformers import AutoTokenizer
        except ImportError:
            raise ImportError(
                """
                To use sentence_transformers embeddings, 
                you must install langroid with the [hf-embeddings] extra, e.g.:
                pip install "langroid[hf-embeddings]"
                """
            )

        super().__init__()
        self.config = config

        self.model = SentenceTransformer(
            self.config.model_name,
            device=self.config.device,
        )
        if self.config.data_parallel:
            self.pool = self.model.start_multi_process_pool(
                self.config.devices  # type: ignore
            )
            atexit.register(
                lambda: SentenceTransformer.stop_multi_process_pool(self.pool)
            )

        self.tokenizer = AutoTokenizer.from_pretrained(self.config.model_name)
        self.config.context_length = self.tokenizer.model_max_length

    def embedding_fn(self) -> Callable[[List[str]], Embeddings]:
        return EmbeddingFunctionCallable(self, self.config.batch_size)

    @property
    def embedding_dims(self) -> int:
        dims = self.model.get_sentence_embedding_dimension()
        if dims is None:
            raise ValueError(
                f"Could not get embedding dimension for model {self.config.model_name}"
            )
        return dims  # type: ignore


class FastEmbedEmbeddings(EmbeddingModel):
    def __init__(self, config: FastEmbedEmbeddingsConfig = FastEmbedEmbeddingsConfig()):
        try:
            from fastembed import TextEmbedding
        except ImportError:
            raise LangroidImportError("fastembed", extra="fastembed")

        super().__init__()
        self.config = config
        self.batch_size = config.batch_size
        self.parallel = config.parallel

        self.model = TextEmbedding(
            model_name=self.config.model_name,
            cache_dir=self.config.cache_dir,
            threads=self.config.threads,
            **self.config.additional_kwargs,
        )

    def embedding_fn(self) -> Callable[[List[str]], Embeddings]:
        return EmbeddingFunctionCallable(self, self.config.batch_size)

    @cached_property
    def embedding_dims(self) -> int:
        embed_func = self.embedding_fn()
        return len(embed_func(["text"])[0])


LCSEC = LlamaCppServerEmbeddingsConfig


class LlamaCppServerEmbeddings(EmbeddingModel):
    def __init__(self, config: LCSEC = LCSEC()):
        super().__init__()
        self.config = config

        if self.config.api_base == "":
            raise ValueError(
                """Api Base MUST be set for Llama Server Embeddings.
                """
            )

        self.tokenize_url = self.config.api_base + "/tokenize"
        self.detokenize_url = self.config.api_base + "/detokenize"
        self.embedding_url = self.config.api_base + "/embeddings"

    def tokenize_string(self, text: str) -> List[int]:
        data = {"content": text, "add_special": False, "with_pieces": False}
        response = requests.post(self.tokenize_url, json=data)

        if response.status_code == 200:
            tokens = response.json()["tokens"]
            if not (isinstance(tokens, list) and isinstance(tokens[0], (int, float))):
                # not all(isinstance(token, (int, float)) for token in tokens):
                raise ValueError(
                    """Tokenizer endpoint has not returned the correct format. 
                   Is the URL correct?
                """
                )
            return tokens
        else:
            raise requests.HTTPError(
                self.tokenize_url,
                response.status_code,
                "Failed to connect to tokenization provider",
            )

    def detokenize_string(self, tokens: List[int]) -> str:
        data = {"tokens": tokens}
        response = requests.post(self.detokenize_url, json=data)

        if response.status_code == 200:
            text = response.json()["content"]
            if not isinstance(text, str):
                raise ValueError(
                    """Deokenizer endpoint has not returned the correct format. 
                   Is the URL correct?
                """
                )
            return text
        else:
            raise requests.HTTPError(
                self.detokenize_url,
                response.status_code,
                "Failed to connect to detokenization provider",
            )

    def truncate_string_to_context_size(self, text: str) -> str:
        tokens = self.tokenize_string(text)
        tokens = tokens[: self.config.context_length]
        return self.detokenize_string(tokens)

    def generate_embedding(self, text: str) -> List[int | float]:
        data = {"content": text}
        response = requests.post(self.embedding_url, json=data)

        if response.status_code == 200:
            embeddings = response.json()["embedding"]
            if not (
                isinstance(embeddings, list) and isinstance(embeddings[0], (int, float))
            ):
                raise ValueError(
                    """Embedding endpoint has not returned the correct format. 
                   Is the URL correct?
                """
                )
            return embeddings
        else:
            raise requests.HTTPError(
                self.embedding_url,
                response.status_code,
                "Failed to connect to embedding provider",
            )

    def embedding_fn(self) -> Callable[[List[str]], Embeddings]:
        return EmbeddingFunctionCallable(self, self.config.batch_size)

    @property
    def embedding_dims(self) -> int:
        return self.config.dims


class GeminiEmbeddings(EmbeddingModel):
    def __init__(self, config: GeminiEmbeddingsConfig = GeminiEmbeddingsConfig()):
        try:
            from google import genai
        except ImportError as e:
            raise LangroidImportError(extra="google-genai", error=str(e))
        super().__init__()
        self.config = config
        load_dotenv()
        self.config.api_key = os.getenv("GEMINI_API_KEY", "")

        if self.config.api_key == "":
            raise ValueError(
                """
                GEMINI_API_KEY env variable must be set to use GeminiEmbeddings.
                """
            )
        self.client = genai.Client(api_key=self.config.api_key)

    def embedding_fn(self) -> Callable[[List[str]], Embeddings]:
        return EmbeddingFunctionCallable(self, self.config.batch_size)

    def generate_embeddings(self, texts: List[str]) -> List[List[float]]:
        """Generates embeddings for a list of input texts."""
        all_embeddings: List[List[float]] = []

        for batch in batched(texts, self.config.batch_size):
            result = self.client.models.embed_content(  # type: ignore[attr-defined]
                model=self.config.model_name,
                contents=batch,  # type: ignore
            )

            if not hasattr(result, "embeddings") or not isinstance(
                result.embeddings, list
            ):
                raise ValueError(
                    "Unexpected format for embeddings: missing or incorrect type"
                )

            # Extract .values from ContentEmbedding objects
            all_embeddings.extend(
                [emb.values for emb in result.embeddings]  # type: ignore
            )

        return all_embeddings

    @property
    def embedding_dims(self) -> int:
        return self.config.dims


def embedding_model(embedding_fn_type: str = "openai") -> EmbeddingModel:
    """
    Args:
        embedding_fn_type: Type of embedding model to use. Options are:
         - "openai",
         - "azure-openai",
         - "sentencetransformer", or
         - "fastembed".
            (others may be added in the future)
    Returns:
        EmbeddingModel: The corresponding embedding model class.
    """
    if embedding_fn_type == "openai":
        return OpenAIEmbeddings  # type: ignore
    elif embedding_fn_type == "azure-openai":
        return AzureOpenAIEmbeddings  # type: ignore
    elif embedding_fn_type == "fastembed":
        return FastEmbedEmbeddings  # type: ignore
    elif embedding_fn_type == "llamacppserver":
        return LlamaCppServerEmbeddings  # type: ignore
    elif embedding_fn_type == "gemini":
        return GeminiEmbeddings  # type: ignore
    else:  # default sentence transformer
        return SentenceTransformerEmbeddings  # type: ignore
</file>

<file path="langroid/language_models/client_cache.py">
"""
Client caching/singleton pattern for LLM clients to prevent connection pool exhaustion.
"""

import atexit
import hashlib
import weakref
from typing import Any, Dict, Optional, Union, cast

from cerebras.cloud.sdk import AsyncCerebras, Cerebras
from groq import AsyncGroq, Groq
from httpx import Timeout
from openai import AsyncOpenAI, OpenAI

# Cache for client instances, keyed by hashed configuration parameters
_client_cache: Dict[str, Any] = {}

# Keep track of clients for cleanup
_all_clients: weakref.WeakSet[Any] = weakref.WeakSet()


def _get_cache_key(client_type: str, **kwargs: Any) -> str:
    """
    Generate a cache key from client type and configuration parameters.
    Uses the same approach as OpenAIGPT._cache_lookup for consistency.

    Args:
        client_type: Type of client (e.g., "openai", "groq", "cerebras")
        **kwargs: Configuration parameters (api_key, base_url, timeout, etc.)

    Returns:
        SHA256 hash of the configuration as a hex string
    """
    # Convert kwargs to sorted string representation
    sorted_kwargs_str = str(sorted(kwargs.items()))

    # Create raw key combining client type and sorted kwargs
    raw_key = f"{client_type}:{sorted_kwargs_str}"

    # Hash the key for consistent length and to handle complex objects
    hashed_key = hashlib.sha256(raw_key.encode()).hexdigest()

    return hashed_key


def get_openai_client(
    api_key: str,
    base_url: Optional[str] = None,
    organization: Optional[str] = None,
    timeout: Union[float, Timeout] = 120.0,
    default_headers: Optional[Dict[str, str]] = None,
) -> OpenAI:
    """
    Get or create a singleton OpenAI client with the given configuration.

    Args:
        api_key: OpenAI API key
        base_url: Optional base URL for API
        organization: Optional organization ID
        timeout: Request timeout
        default_headers: Optional default headers

    Returns:
        OpenAI client instance
    """
    if isinstance(timeout, (int, float)):
        timeout = Timeout(timeout)

    cache_key = _get_cache_key(
        "openai",
        api_key=api_key,
        base_url=base_url,
        organization=organization,
        timeout=timeout,
        default_headers=default_headers,
    )

    if cache_key in _client_cache:
        return cast(OpenAI, _client_cache[cache_key])

    client = OpenAI(
        api_key=api_key,
        base_url=base_url,
        organization=organization,
        timeout=timeout,
        default_headers=default_headers,
    )

    _client_cache[cache_key] = client
    _all_clients.add(client)
    return client


def get_async_openai_client(
    api_key: str,
    base_url: Optional[str] = None,
    organization: Optional[str] = None,
    timeout: Union[float, Timeout] = 120.0,
    default_headers: Optional[Dict[str, str]] = None,
) -> AsyncOpenAI:
    """
    Get or create a singleton AsyncOpenAI client with the given configuration.

    Args:
        api_key: OpenAI API key
        base_url: Optional base URL for API
        organization: Optional organization ID
        timeout: Request timeout
        default_headers: Optional default headers

    Returns:
        AsyncOpenAI client instance
    """
    if isinstance(timeout, (int, float)):
        timeout = Timeout(timeout)

    cache_key = _get_cache_key(
        "async_openai",
        api_key=api_key,
        base_url=base_url,
        organization=organization,
        timeout=timeout,
        default_headers=default_headers,
    )

    if cache_key in _client_cache:
        return cast(AsyncOpenAI, _client_cache[cache_key])

    client = AsyncOpenAI(
        api_key=api_key,
        base_url=base_url,
        organization=organization,
        timeout=timeout,
        default_headers=default_headers,
    )

    _client_cache[cache_key] = client
    _all_clients.add(client)
    return client


def get_groq_client(api_key: str) -> Groq:
    """
    Get or create a singleton Groq client with the given configuration.

    Args:
        api_key: Groq API key

    Returns:
        Groq client instance
    """
    cache_key = _get_cache_key("groq", api_key=api_key)

    if cache_key in _client_cache:
        return cast(Groq, _client_cache[cache_key])

    client = Groq(api_key=api_key)
    _client_cache[cache_key] = client
    _all_clients.add(client)
    return client


def get_async_groq_client(api_key: str) -> AsyncGroq:
    """
    Get or create a singleton AsyncGroq client with the given configuration.

    Args:
        api_key: Groq API key

    Returns:
        AsyncGroq client instance
    """
    cache_key = _get_cache_key("async_groq", api_key=api_key)

    if cache_key in _client_cache:
        return cast(AsyncGroq, _client_cache[cache_key])

    client = AsyncGroq(api_key=api_key)
    _client_cache[cache_key] = client
    _all_clients.add(client)
    return client


def get_cerebras_client(api_key: str) -> Cerebras:
    """
    Get or create a singleton Cerebras client with the given configuration.

    Args:
        api_key: Cerebras API key

    Returns:
        Cerebras client instance
    """
    cache_key = _get_cache_key("cerebras", api_key=api_key)

    if cache_key in _client_cache:
        return cast(Cerebras, _client_cache[cache_key])

    client = Cerebras(api_key=api_key)
    _client_cache[cache_key] = client
    _all_clients.add(client)
    return client


def get_async_cerebras_client(api_key: str) -> AsyncCerebras:
    """
    Get or create a singleton AsyncCerebras client with the given configuration.

    Args:
        api_key: Cerebras API key

    Returns:
        AsyncCerebras client instance
    """
    cache_key = _get_cache_key("async_cerebras", api_key=api_key)

    if cache_key in _client_cache:
        return cast(AsyncCerebras, _client_cache[cache_key])

    client = AsyncCerebras(api_key=api_key)
    _client_cache[cache_key] = client
    _all_clients.add(client)
    return client


def _cleanup_clients() -> None:
    """
    Cleanup function to close all cached clients on exit.
    Called automatically via atexit.
    """
    import inspect

    for client in list(_all_clients):
        if hasattr(client, "close") and callable(client.close):
            try:
                # Check if close is a coroutine function (async)
                if inspect.iscoroutinefunction(client.close):
                    # For async clients, we can't await in atexit
                    # They will be cleaned up by the OS
                    pass
                else:
                    # Sync clients can be closed directly
                    client.close()
            except Exception:
                pass  # Ignore errors during cleanup


# Register cleanup function to run on exit
atexit.register(_cleanup_clients)


# For testing purposes
def _clear_cache() -> None:
    """Clear the client cache. Only for testing."""
    _client_cache.clear()
</file>

<file path="langroid/language_models/model_info.py">
from enum import Enum
from typing import Dict, List, Optional

from langroid.pydantic_v1 import BaseModel


class ModelProvider(str, Enum):
    """Enum for model providers"""

    OPENAI = "openai"
    ANTHROPIC = "anthropic"
    DEEPSEEK = "deepseek"
    GOOGLE = "google"
    UNKNOWN = "unknown"


class ModelName(str, Enum):
    """Parent class for all model name enums"""

    pass


class OpenAIChatModel(ModelName):
    """Enum for OpenAI Chat models"""

    GPT3_5_TURBO = "gpt-3.5-turbo"
    GPT4 = "gpt-4o"  # avoid deprecated gpt-4
    GPT4_TURBO = "gpt-4-turbo"
    GPT4o = "gpt-4o"
    GPT4o_MINI = "gpt-4o-mini"
    O1 = "o1"
    O1_MINI = "o1-mini"
    O3_MINI = "o3-mini"
    O3 = "o3"
    O4_MINI = "o4-mini"
    GPT4_1 = "gpt-4.1"
    GPT4_1_MINI = "gpt-4.1-mini"
    GPT4_1_NANO = "gpt-4.1-nano"


class OpenAICompletionModel(str, Enum):
    """Enum for OpenAI Completion models"""

    DAVINCI = "davinci-002"
    BABBAGE = "babbage-002"


class AnthropicModel(ModelName):
    """Enum for Anthropic models"""

    CLAUDE_3_5_SONNET = "claude-3-5-sonnet-latest"
    CLAUDE_3_7_SONNET = "claude-3-7-sonnet-latest"
    CLAUDE_3_OPUS = "claude-3-opus-latest"
    CLAUDE_3_SONNET = "claude-3-sonnet-20240229"
    CLAUDE_3_HAIKU = "claude-3-haiku-20240307"


class DeepSeekModel(ModelName):
    """Enum for DeepSeek models direct from DeepSeek API"""

    DEEPSEEK = "deepseek/deepseek-chat"
    DEEPSEEK_R1 = "deepseek/deepseek-reasoner"
    OPENROUTER_DEEPSEEK_R1 = "openrouter/deepseek/deepseek-r1"


class GeminiModel(ModelName):
    """Enum for Gemini models"""

    GEMINI_1_5_FLASH = "gemini-1.5-flash"
    GEMINI_1_5_FLASH_8B = "gemini-1.5-flash-8b"
    GEMINI_1_5_PRO = "gemini-1.5-pro"
    GEMINI_2_5_PRO = "gemini-2.5-pro"
    GEMINI_2_5_FLASH = "gemini-2.5-flash"
    GEMINI_2_5_FLASH_LITE_PREVIEW = "gemini-2.5-flash-lite-preview-06-17"
    GEMINI_2_PRO = "gemini-2.0-pro-exp-02-05"
    GEMINI_2_FLASH = "gemini-2.0-flash"
    GEMINI_2_FLASH_LITE = "gemini-2.0-flash-lite-preview"
    GEMINI_2_FLASH_THINKING = "gemini-2.0-flash-thinking-exp"


class OpenAI_API_ParamInfo(BaseModel):
    """
    Parameters exclusive to some models, when using OpenAI API
    """

    # model-specific params at top level
    params: Dict[str, List[str]] = dict(
        reasoning_effort=[
            OpenAIChatModel.O3_MINI.value,
        ],
    )
    # model-specific params in extra_body
    extra_parameters: Dict[str, List[str]] = dict(
        include_reasoning=[
            DeepSeekModel.OPENROUTER_DEEPSEEK_R1.value,
        ]
    )


class ModelInfo(BaseModel):
    """
    Consolidated information about LLM, related to capacity, cost and API
    idiosyncrasies. Reasonable defaults for all params in case there's no
    specific info available.
    """

    name: str = "unknown"
    provider: ModelProvider = ModelProvider.UNKNOWN
    context_length: int = 16_000
    max_cot_tokens: int = 0  # max chain of thought (thinking) tokens where applicable
    max_output_tokens: int = 8192  # Maximum number of output tokens - model dependent
    input_cost_per_million: float = 0.0  # Cost in USD per million input tokens
    cached_cost_per_million: float = 0.0  # Cost in USD per million cached tokens
    output_cost_per_million: float = 0.0  # Cost in USD per million output tokens
    allows_streaming: bool = True  # Whether model supports streaming output
    allows_system_message: bool = True  # Whether model supports system messages
    rename_params: Dict[str, str] = {}  # Rename parameters for OpenAI API
    unsupported_params: List[str] = []
    has_structured_output: bool = False  # Does model API support structured output?
    has_tools: bool = True  # Does model API support tools/function-calling?
    needs_first_user_message: bool = False  # Does API need first msg to be from user?
    description: Optional[str] = None


# Model information registry
MODEL_INFO: Dict[str, ModelInfo] = {
    # OpenAI Models
    OpenAICompletionModel.DAVINCI.value: ModelInfo(
        name=OpenAICompletionModel.DAVINCI.value,
        provider=ModelProvider.OPENAI,
        context_length=4096,
        max_output_tokens=4096,
        input_cost_per_million=2.0,
        output_cost_per_million=2.0,
        description="Davinci-002",
    ),
    OpenAICompletionModel.BABBAGE.value: ModelInfo(
        name=OpenAICompletionModel.BABBAGE.value,
        provider=ModelProvider.OPENAI,
        context_length=4096,
        max_output_tokens=4096,
        input_cost_per_million=0.40,
        output_cost_per_million=0.40,
        description="Babbage-002",
    ),
    OpenAIChatModel.GPT3_5_TURBO.value: ModelInfo(
        name=OpenAIChatModel.GPT3_5_TURBO.value,
        provider=ModelProvider.OPENAI,
        context_length=16_385,
        max_output_tokens=4096,
        input_cost_per_million=0.50,
        output_cost_per_million=1.50,
        description="GPT-3.5 Turbo",
    ),
    OpenAIChatModel.GPT4.value: ModelInfo(
        name=OpenAIChatModel.GPT4.value,
        provider=ModelProvider.OPENAI,
        context_length=8192,
        max_output_tokens=8192,
        input_cost_per_million=30.0,
        output_cost_per_million=60.0,
        description="GPT-4 (8K context)",
    ),
    OpenAIChatModel.GPT4_TURBO.value: ModelInfo(
        name=OpenAIChatModel.GPT4_TURBO.value,
        provider=ModelProvider.OPENAI,
        context_length=128_000,
        max_output_tokens=4096,
        input_cost_per_million=10.0,
        output_cost_per_million=30.0,
        description="GPT-4 Turbo",
    ),
    OpenAIChatModel.GPT4_1_NANO.value: ModelInfo(
        name=OpenAIChatModel.GPT4_1_NANO.value,
        provider=ModelProvider.OPENAI,
        context_length=1_047_576,
        max_output_tokens=32_768,
        input_cost_per_million=0.10,
        cached_cost_per_million=0.025,
        output_cost_per_million=0.40,
        description="GPT-4.1",
    ),
    OpenAIChatModel.GPT4_1_MINI.value: ModelInfo(
        name=OpenAIChatModel.GPT4_1_MINI.value,
        provider=ModelProvider.OPENAI,
        context_length=1_047_576,
        max_output_tokens=32_768,
        input_cost_per_million=0.40,
        cached_cost_per_million=0.10,
        output_cost_per_million=1.60,
        description="GPT-4.1 Mini",
    ),
    OpenAIChatModel.GPT4_1.value: ModelInfo(
        name=OpenAIChatModel.GPT4_1.value,
        provider=ModelProvider.OPENAI,
        context_length=1_047_576,
        max_output_tokens=32_768,
        input_cost_per_million=2.00,
        cached_cost_per_million=0.50,
        output_cost_per_million=8.00,
        description="GPT-4.1",
    ),
    OpenAIChatModel.GPT4o.value: ModelInfo(
        name=OpenAIChatModel.GPT4o.value,
        provider=ModelProvider.OPENAI,
        context_length=128_000,
        max_output_tokens=16_384,
        input_cost_per_million=2.5,
        cached_cost_per_million=1.25,
        output_cost_per_million=10.0,
        has_structured_output=True,
        description="GPT-4o (128K context)",
    ),
    OpenAIChatModel.GPT4o_MINI.value: ModelInfo(
        name=OpenAIChatModel.GPT4o_MINI.value,
        provider=ModelProvider.OPENAI,
        context_length=128_000,
        max_output_tokens=16_384,
        input_cost_per_million=0.15,
        cached_cost_per_million=0.075,
        output_cost_per_million=0.60,
        has_structured_output=True,
        description="GPT-4o Mini",
    ),
    OpenAIChatModel.O1.value: ModelInfo(
        name=OpenAIChatModel.O1.value,
        provider=ModelProvider.OPENAI,
        context_length=200_000,
        max_output_tokens=100_000,
        input_cost_per_million=15.0,
        cached_cost_per_million=7.50,
        output_cost_per_million=60.0,
        allows_streaming=True,
        allows_system_message=False,
        unsupported_params=["temperature"],
        rename_params={"max_tokens": "max_completion_tokens"},
        has_tools=False,
        description="O1 Reasoning LM",
    ),
    OpenAIChatModel.O3.value: ModelInfo(
        name=OpenAIChatModel.O3.value,
        provider=ModelProvider.OPENAI,
        context_length=200_000,
        max_output_tokens=100_000,
        input_cost_per_million=2.0,
        cached_cost_per_million=0.50,
        output_cost_per_million=8.0,
        allows_streaming=True,
        allows_system_message=False,
        unsupported_params=["temperature"],
        rename_params={"max_tokens": "max_completion_tokens"},
        has_tools=False,
        description="O1 Reasoning LM",
    ),
    OpenAIChatModel.O1_MINI.value: ModelInfo(
        name=OpenAIChatModel.O1_MINI.value,
        provider=ModelProvider.OPENAI,
        context_length=128_000,
        max_output_tokens=65_536,
        input_cost_per_million=1.1,
        cached_cost_per_million=0.55,
        output_cost_per_million=4.4,
        allows_streaming=False,
        allows_system_message=False,
        unsupported_params=["temperature", "stream"],
        rename_params={"max_tokens": "max_completion_tokens"},
        has_tools=False,
        description="O1 Mini Reasoning LM",
    ),
    OpenAIChatModel.O3_MINI.value: ModelInfo(
        name=OpenAIChatModel.O3_MINI.value,
        provider=ModelProvider.OPENAI,
        context_length=200_000,
        max_output_tokens=100_000,
        input_cost_per_million=1.1,
        cached_cost_per_million=0.55,
        output_cost_per_million=4.4,
        allows_streaming=False,
        allows_system_message=False,
        unsupported_params=["temperature", "stream"],
        rename_params={"max_tokens": "max_completion_tokens"},
        has_tools=False,
        description="O3 Mini Reasoning LM",
    ),
    OpenAIChatModel.O4_MINI.value: ModelInfo(
        name=OpenAIChatModel.O4_MINI.value,
        provider=ModelProvider.OPENAI,
        context_length=200_000,
        max_output_tokens=100_000,
        input_cost_per_million=1.10,
        cached_cost_per_million=0.275,
        output_cost_per_million=4.40,
        allows_streaming=False,
        allows_system_message=False,
        unsupported_params=["temperature", "stream"],
        rename_params={"max_tokens": "max_completion_tokens"},
        has_tools=False,
        description="O3 Mini Reasoning LM",
    ),
    # Anthropic Models
    AnthropicModel.CLAUDE_3_5_SONNET.value: ModelInfo(
        name=AnthropicModel.CLAUDE_3_5_SONNET.value,
        provider=ModelProvider.ANTHROPIC,
        context_length=200_000,
        max_output_tokens=8192,
        input_cost_per_million=3.0,
        cached_cost_per_million=0.30,
        output_cost_per_million=15.0,
        description="Claude 3.5 Sonnet",
    ),
    AnthropicModel.CLAUDE_3_OPUS.value: ModelInfo(
        name=AnthropicModel.CLAUDE_3_OPUS.value,
        provider=ModelProvider.ANTHROPIC,
        context_length=200_000,
        max_output_tokens=4096,
        input_cost_per_million=15.0,
        cached_cost_per_million=1.50,
        output_cost_per_million=75.0,
        description="Claude 3 Opus",
    ),
    AnthropicModel.CLAUDE_3_SONNET.value: ModelInfo(
        name=AnthropicModel.CLAUDE_3_SONNET.value,
        provider=ModelProvider.ANTHROPIC,
        context_length=200_000,
        max_output_tokens=4096,
        input_cost_per_million=3.0,
        cached_cost_per_million=0.30,
        output_cost_per_million=15.0,
        description="Claude 3 Sonnet",
    ),
    AnthropicModel.CLAUDE_3_HAIKU.value: ModelInfo(
        name=AnthropicModel.CLAUDE_3_HAIKU.value,
        provider=ModelProvider.ANTHROPIC,
        context_length=200_000,
        max_output_tokens=4096,
        input_cost_per_million=0.25,
        cached_cost_per_million=0.03,
        output_cost_per_million=1.25,
        description="Claude 3 Haiku",
    ),
    # DeepSeek Models
    DeepSeekModel.DEEPSEEK.value: ModelInfo(
        name=DeepSeekModel.DEEPSEEK.value,
        provider=ModelProvider.DEEPSEEK,
        context_length=64_000,
        max_output_tokens=8_000,
        input_cost_per_million=0.27,
        cached_cost_per_million=0.07,
        output_cost_per_million=1.10,
        description="DeepSeek Chat",
    ),
    DeepSeekModel.DEEPSEEK_R1.value: ModelInfo(
        name=DeepSeekModel.DEEPSEEK_R1.value,
        provider=ModelProvider.DEEPSEEK,
        context_length=64_000,
        max_output_tokens=8_000,
        input_cost_per_million=0.55,
        cached_cost_per_million=0.14,
        output_cost_per_million=2.19,
        description="DeepSeek-R1 Reasoning LM",
    ),
    # Gemini Models
    GeminiModel.GEMINI_2_FLASH.value: ModelInfo(
        name=GeminiModel.GEMINI_2_FLASH.value,
        provider=ModelProvider.GOOGLE,
        context_length=1_056_768,
        max_output_tokens=8192,
        input_cost_per_million=0.10,
        cached_cost_per_million=0.025,
        output_cost_per_million=0.40,
        rename_params={"max_tokens": "max_completion_tokens"},
        description="Gemini 2.0 Flash",
    ),
    GeminiModel.GEMINI_2_FLASH_LITE.value: ModelInfo(
        name=GeminiModel.GEMINI_2_FLASH_LITE.value,
        provider=ModelProvider.GOOGLE,
        context_length=1_056_768,
        max_output_tokens=8192,
        input_cost_per_million=0.075,
        output_cost_per_million=0.30,
        rename_params={"max_tokens": "max_completion_tokens"},
        description="Gemini 2.0 Flash Lite Preview",
    ),
    GeminiModel.GEMINI_1_5_FLASH.value: ModelInfo(
        name=GeminiModel.GEMINI_1_5_FLASH.value,
        provider=ModelProvider.GOOGLE,
        context_length=1_056_768,
        max_output_tokens=8192,
        rename_params={"max_tokens": "max_completion_tokens"},
        description="Gemini 1.5 Flash",
    ),
    GeminiModel.GEMINI_1_5_FLASH_8B.value: ModelInfo(
        name=GeminiModel.GEMINI_1_5_FLASH_8B.value,
        provider=ModelProvider.GOOGLE,
        context_length=1_000_000,
        max_output_tokens=8192,
        rename_params={"max_tokens": "max_completion_tokens"},
        description="Gemini 1.5 Flash 8B",
    ),
    GeminiModel.GEMINI_1_5_PRO.value: ModelInfo(
        name=GeminiModel.GEMINI_1_5_PRO.value,
        provider=ModelProvider.GOOGLE,
        context_length=2_000_000,
        max_output_tokens=8192,
        rename_params={"max_tokens": "max_completion_tokens"},
        description="Gemini 1.5 Pro",
    ),
    GeminiModel.GEMINI_2_PRO.value: ModelInfo(
        name=GeminiModel.GEMINI_2_PRO.value,
        provider=ModelProvider.GOOGLE,
        context_length=2_000_000,
        max_output_tokens=8192,
        rename_params={"max_tokens": "max_completion_tokens"},
        description="Gemini 2 Pro Exp 02-05",
    ),
    GeminiModel.GEMINI_2_FLASH_THINKING.value: ModelInfo(
        name=GeminiModel.GEMINI_2_FLASH_THINKING.value,
        provider=ModelProvider.GOOGLE,
        context_length=1_000_000,
        max_output_tokens=64_000,
        rename_params={"max_tokens": "max_completion_tokens"},
        description="Gemini 2.0 Flash Thinking",
    ),
    # Gemini 2.5 Models
    GeminiModel.GEMINI_2_5_PRO.value: ModelInfo(
        name=GeminiModel.GEMINI_2_5_PRO.value,
        provider=ModelProvider.GOOGLE,
        context_length=1_048_576,
        max_output_tokens=65_536,
        input_cost_per_million=1.25,
        cached_cost_per_million=0.31,
        output_cost_per_million=10.0,
        rename_params={"max_tokens": "max_completion_tokens"},
        description="Gemini 2.5 Pro",
    ),
    GeminiModel.GEMINI_2_5_FLASH.value: ModelInfo(
        name=GeminiModel.GEMINI_2_5_FLASH.value,
        provider=ModelProvider.GOOGLE,
        context_length=1_048_576,
        max_output_tokens=65_536,
        input_cost_per_million=0.30,
        cached_cost_per_million=0.075,
        output_cost_per_million=2.50,
        rename_params={"max_tokens": "max_completion_tokens"},
        description="Gemini 2.5 Flash",
    ),
    GeminiModel.GEMINI_2_5_FLASH_LITE_PREVIEW.value: ModelInfo(
        name=GeminiModel.GEMINI_2_5_FLASH_LITE_PREVIEW.value,
        provider=ModelProvider.GOOGLE,
        context_length=65_536,
        max_output_tokens=65_536,
        input_cost_per_million=0.10,
        cached_cost_per_million=0.025,
        output_cost_per_million=0.40,
        rename_params={"max_tokens": "max_completion_tokens"},
        description="Gemini 2.5 Flash Lite Preview",
    ),
}


def get_model_info(
    model: str | ModelName,
    fallback_models: List[str] = [],
) -> ModelInfo:
    """Get model information by name or enum value"""
    # Sequence of models to try, starting with the primary model
    models_to_try = [model] + fallback_models

    # Find the first model in the sequence that has info defined using next()
    # on a generator expression that filters out None results from _get_model_info
    found_info = next(
        (info for m in models_to_try if (info := _get_model_info(m)) is not None),
        None,  # Default value if the iterator is exhausted (no valid info found)
    )

    # Return the found info, or a default ModelInfo if none was found
    return found_info or ModelInfo()


def _get_model_info(model: str | ModelName) -> ModelInfo | None:
    if isinstance(model, str):
        return MODEL_INFO.get(model)
    return MODEL_INFO.get(model.value)
</file>

<file path="langroid/language_models/provider_params.py">
"""
Provider-specific parameter configurations for various LLM providers.
"""

from typing import Any, Dict, Optional

from langroid.pydantic_v1 import BaseSettings

# Constants
LANGDB_BASE_URL = "https://api.us-east-1.langdb.ai"
PORTKEY_BASE_URL = "https://api.portkey.ai"
DUMMY_API_KEY = "xxx"


class LangDBParams(BaseSettings):
    """
    Parameters specific to LangDB integration.
    """

    api_key: str = DUMMY_API_KEY
    project_id: str = ""
    label: Optional[str] = None
    run_id: Optional[str] = None
    thread_id: Optional[str] = None
    base_url: str = LANGDB_BASE_URL

    class Config:
        # allow setting of fields via env vars,
        # e.g. LANGDB_PROJECT_ID=1234
        env_prefix = "LANGDB_"


class PortkeyParams(BaseSettings):
    """
    Parameters specific to Portkey integration.

    Portkey is an AI gateway that provides a unified API for multiple LLM providers,
    with features like automatic retries, fallbacks, load balancing, and observability.

    Example usage:
        # Use Portkey with Anthropic
        config = OpenAIGPTConfig(
            chat_model="portkey/anthropic/claude-3-sonnet-20240229",
            portkey_params=PortkeyParams(
                api_key="your-portkey-api-key",
                provider="anthropic"
            )
        )
    """

    api_key: str = DUMMY_API_KEY  # Portkey API key
    provider: str = ""  # Required: e.g., "openai", "anthropic", "cohere", etc.
    virtual_key: Optional[str] = None  # Optional: virtual key for the provider
    trace_id: Optional[str] = None  # Optional: trace ID for request tracking
    metadata: Optional[Dict[str, Any]] = None  # Optional: metadata for logging
    retry: Optional[Dict[str, Any]] = None  # Optional: retry configuration
    cache: Optional[Dict[str, Any]] = None  # Optional: cache configuration
    cache_force_refresh: Optional[bool] = None  # Optional: force cache refresh
    user: Optional[str] = None  # Optional: user identifier
    organization: Optional[str] = None  # Optional: organization identifier
    custom_headers: Optional[Dict[str, str]] = None  # Optional: additional headers
    base_url: str = PORTKEY_BASE_URL

    class Config:
        # allow setting of fields via env vars,
        # e.g. PORTKEY_API_KEY=xxx, PORTKEY_PROVIDER=anthropic
        env_prefix = "PORTKEY_"

    def get_headers(self) -> Dict[str, str]:
        """Generate Portkey-specific headers from parameters."""
        import json
        import os

        headers = {}

        # API key - from params or environment
        if self.api_key and self.api_key != DUMMY_API_KEY:
            headers["x-portkey-api-key"] = self.api_key
        else:
            portkey_key = os.getenv("PORTKEY_API_KEY", "")
            if portkey_key:
                headers["x-portkey-api-key"] = portkey_key

        # Provider
        if self.provider:
            headers["x-portkey-provider"] = self.provider

        # Virtual key
        if self.virtual_key:
            headers["x-portkey-virtual-key"] = self.virtual_key

        # Trace ID
        if self.trace_id:
            headers["x-portkey-trace-id"] = self.trace_id

        # Metadata
        if self.metadata:
            headers["x-portkey-metadata"] = json.dumps(self.metadata)

        # Retry configuration
        if self.retry:
            headers["x-portkey-retry"] = json.dumps(self.retry)

        # Cache configuration
        if self.cache:
            headers["x-portkey-cache"] = json.dumps(self.cache)

        # Cache force refresh
        if self.cache_force_refresh is not None:
            headers["x-portkey-cache-force-refresh"] = str(
                self.cache_force_refresh
            ).lower()

        # User identifier
        if self.user:
            headers["x-portkey-user"] = self.user

        # Organization identifier
        if self.organization:
            headers["x-portkey-organization"] = self.organization

        # Add any custom headers
        if self.custom_headers:
            headers.update(self.custom_headers)

        return headers

    def parse_model_string(self, model_string: str) -> tuple[str, str]:
        """
        Parse a model string like "portkey/anthropic/claude-3-sonnet"
        and extract provider and model name.

        Returns:
            tuple: (provider, model_name)
        """
        parts = model_string.split("/", 2)
        if len(parts) >= 3 and parts[0] == "portkey":
            _, provider, model = parts
            return provider, model
        else:
            # Fallback: just remove "portkey/" prefix and return empty provider
            model = model_string.replace("portkey/", "")
            return "", model

    def get_provider_api_key(
        self, provider: str, default_key: str = DUMMY_API_KEY
    ) -> str:
        """
        Get the API key for the provider from environment variables.

        Args:
            provider: The provider name (e.g., "anthropic", "openai")
            default_key: Default key to return if not found

        Returns:
            The API key for the provider
        """
        import os

        # Common environment variable patterns for different providers
        env_patterns = [
            f"{provider.upper()}_API_KEY",
            f"{provider.upper()}_KEY",
        ]

        for pattern in env_patterns:
            key = os.getenv(pattern, "")
            if key:
                return key

        return default_key
</file>

<file path="langroid/vector_store/qdrantdb.py">
import hashlib
import json
import logging
import os
import time
import uuid
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Sequence, Tuple, TypeVar

from dotenv import load_dotenv

from langroid.embedding_models.base import (
    EmbeddingModelsConfig,
)
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.mytypes import Document, Embeddings
from langroid.utils.configuration import settings
from langroid.vector_store.base import VectorStore, VectorStoreConfig

logger = logging.getLogger(__name__)
if TYPE_CHECKING:
    from qdrant_client.http.models import SparseVector


T = TypeVar("T")


def from_optional(x: Optional[T], default: T) -> T:
    if x is None:
        return default

    return x


def is_valid_uuid(uuid_to_test: str) -> bool:
    """
    Check if a given string is a valid UUID.
    """
    try:
        uuid_obj = uuid.UUID(uuid_to_test)
        return str(uuid_obj) == uuid_to_test
    except Exception:
        pass
    # Check for valid unsigned 64-bit integer
    try:
        int_value = int(uuid_to_test)
        return 0 <= int_value <= 18446744073709551615
    except ValueError:
        return False


class QdrantDBConfig(VectorStoreConfig):
    cloud: bool = True
    docker: bool = False
    collection_name: str | None = "temp"
    storage_path: str = ".qdrant/data"
    embedding: EmbeddingModelsConfig = OpenAIEmbeddingsConfig()
    use_sparse_embeddings: bool = False
    sparse_embedding_model: str = "naver/splade-v3-distilbert"
    sparse_limit: int = 3
    distance: str = "cosine"


class QdrantDB(VectorStore):
    def __init__(self, config: QdrantDBConfig = QdrantDBConfig()):
        super().__init__(config)
        self.config: QdrantDBConfig = config
        from qdrant_client import QdrantClient

        if self.config.use_sparse_embeddings:
            try:
                from transformers import AutoModelForMaskedLM, AutoTokenizer
            except ImportError:
                raise ImportError(
                    """
                    To use sparse embeddings,
                    you must install langroid with the [transformers] extra, e.g.:
                    pip install "langroid[transformers]"
                    """
                )

            self.sparse_tokenizer = AutoTokenizer.from_pretrained(
                self.config.sparse_embedding_model
            )
            self.sparse_model = AutoModelForMaskedLM.from_pretrained(
                self.config.sparse_embedding_model
            )
        self.host = config.host
        self.port = config.port
        load_dotenv()
        key = os.getenv("QDRANT_API_KEY")
        url = os.getenv("QDRANT_API_URL")
        if config.docker:
            if url is None:
                logger.warning(
                    f"""The QDRANT_API_URL env variable must be set to use
                    QdrantDB in local docker mode. Please set this
                    value in your .env file.
                    Switching to local storage at {config.storage_path}
                    """
                )
                config.cloud = False
            else:
                config.cloud = True
        elif config.cloud and None in [key, url]:
            logger.warning(
                f"""QDRANT_API_KEY, QDRANT_API_URL env variable must be set to use
                QdrantDB in cloud mode. Please set these values
                in your .env file.
                Switching to local storage at {config.storage_path}
                """
            )
            config.cloud = False

        if config.cloud:
            self.client = QdrantClient(
                url=url,
                api_key=key,
                timeout=config.timeout,
            )
        else:
            try:
                self.client = QdrantClient(
                    path=config.storage_path,
                )
            except Exception as e:
                new_storage_path = config.storage_path + ".new"
                logger.warning(
                    f"""
                    Error connecting to local QdrantDB at {config.storage_path}:
                    {e}
                    Switching to {new_storage_path}
                    """
                )
                self.client = QdrantClient(
                    path=new_storage_path,
                )

        # Note: Only create collection if a non-null collection name is provided.
        # This is useful to delay creation of vecdb until we have a suitable
        # collection name (e.g. we could get it from the url or folder path).
        if config.collection_name is not None:
            self.create_collection(
                config.collection_name, replace=config.replace_collection
            )

    def close(self) -> None:
        """
        Close the QdrantDB client and release any resources (e.g., file locks).
        This is especially important for local storage to release the .lock file.
        """
        if hasattr(self.client, "close"):
            # QdrantLocal has a close method that releases the lock
            self.client.close()
            logger.info(f"Closed QdrantDB connection for {self.config.storage_path}")

    def __enter__(self) -> "QdrantDB":
        """Context manager entry."""
        return self

    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
        """Context manager exit - ensure cleanup even if an exception occurred."""
        self.close()

    def clear_empty_collections(self) -> int:
        coll_names = self.list_collections()
        n_deletes = 0
        for name in coll_names:
            info = self.client.get_collection(collection_name=name)
            if info.points_count == 0:
                n_deletes += 1
                self.client.delete_collection(collection_name=name)
        return n_deletes

    def clear_all_collections(self, really: bool = False, prefix: str = "") -> int:
        """Clear all collections with the given prefix."""

        if not really:
            logger.warning("Not deleting all collections, set really=True to confirm")
            return 0
        coll_names = [
            c for c in self.list_collections(empty=True) if c.startswith(prefix)
        ]
        if len(coll_names) == 0:
            logger.warning(f"No collections found with prefix {prefix}")
            return 0
        n_empty_deletes = 0
        n_non_empty_deletes = 0
        for name in coll_names:
            info = self.client.get_collection(collection_name=name)
            points_count = from_optional(info.points_count, 0)

            n_empty_deletes += points_count == 0
            n_non_empty_deletes += points_count > 0
            self.client.delete_collection(collection_name=name)
        logger.warning(
            f"""
            Deleted {n_empty_deletes} empty collections and
            {n_non_empty_deletes} non-empty collections.
            """
        )
        return n_empty_deletes + n_non_empty_deletes

    def list_collections(self, empty: bool = False) -> List[str]:
        """
        Returns:
            List of collection names that have at least one vector.

        Args:
            empty (bool, optional): Whether to include empty collections.
        """

        colls = list(self.client.get_collections())[0][1]
        if empty:
            return [coll.name for coll in colls]
        counts = []
        for coll in colls:
            try:
                counts.append(
                    from_optional(
                        self.client.get_collection(
                            collection_name=coll.name
                        ).points_count,
                        0,
                    )
                )
            except Exception:
                logger.warning(f"Error getting collection {coll.name}")
                counts.append(0)
        return [coll.name for coll, count in zip(colls, counts) if (count or 0) > 0]

    def create_collection(self, collection_name: str, replace: bool = False) -> None:
        """
        Create a collection with the given name, optionally replacing an existing
            collection if `replace` is True.
        Args:
            collection_name (str): Name of the collection to create.
            replace (bool): Whether to replace an existing collection
                with the same name. Defaults to False.
        """
        from qdrant_client.http.models import (
            CollectionStatus,
            Distance,
            SparseIndexParams,
            SparseVectorParams,
            VectorParams,
        )

        self.config.collection_name = collection_name
        if self.client.collection_exists(collection_name=collection_name):
            coll = self.client.get_collection(collection_name=collection_name)
            if (
                coll.status == CollectionStatus.GREEN
                and from_optional(coll.points_count, 0) > 0
            ):
                logger.warning(f"Non-empty Collection {collection_name} already exists")
                if not replace:
                    logger.warning("Not replacing collection")
                    return
                else:
                    logger.warning("Recreating fresh collection")
            self.client.delete_collection(collection_name=collection_name)

        vectors_config = {
            "": VectorParams(
                size=self.embedding_dim,
                distance=Distance.COSINE,
            )
        }
        sparse_vectors_config = None
        if self.config.use_sparse_embeddings:
            sparse_vectors_config = {
                "text-sparse": SparseVectorParams(index=SparseIndexParams())
            }
        self.client.create_collection(
            collection_name=collection_name,
            vectors_config=vectors_config,
            sparse_vectors_config=sparse_vectors_config,
        )
        collection_info = self.client.get_collection(collection_name=collection_name)
        assert collection_info.status == CollectionStatus.GREEN
        assert collection_info.vectors_count in [0, None]
        if settings.debug:
            level = logger.getEffectiveLevel()
            logger.setLevel(logging.INFO)
            logger.info(collection_info)
            logger.setLevel(level)

    def get_sparse_embeddings(self, inputs: List[str]) -> List["SparseVector"]:
        from qdrant_client.http.models import SparseVector

        if not self.config.use_sparse_embeddings:
            return []
        import torch

        tokens = self.sparse_tokenizer(
            inputs, return_tensors="pt", truncation=True, padding=True
        )
        output = self.sparse_model(**tokens)
        vectors = torch.max(
            torch.log(torch.relu(output.logits) + torch.tensor(1.0))
            * tokens.attention_mask.unsqueeze(-1),
            dim=1,
        )[0].squeeze(dim=1)
        sparse_embeddings = []
        for vec in vectors:
            cols = vec.nonzero().squeeze().cpu().tolist()
            weights = vec[cols].cpu().tolist()
            sparse_embeddings.append(
                SparseVector(
                    indices=cols,
                    values=weights,
                )
            )
        return sparse_embeddings

    def add_documents(self, documents: Sequence[Document]) -> None:
        from qdrant_client.http.models import (
            Batch,
            CollectionStatus,
            SparseVector,
        )

        # Add id to metadata if not already present
        super().maybe_add_ids(documents)
        # Fix the ids due to qdrant finickiness
        for doc in documents:
            doc.metadata.id = str(self._to_int_or_uuid(doc.metadata.id))
        colls = self.list_collections(empty=True)
        if len(documents) == 0:
            return
        document_dicts = [doc.dict() for doc in documents]
        embedding_vecs = self.embedding_fn([doc.content for doc in documents])
        sparse_embedding_vecs = self.get_sparse_embeddings(
            [doc.content for doc in documents]
        )
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot ingest docs")
        if self.config.collection_name not in colls:
            self.create_collection(self.config.collection_name, replace=True)
        ids = [self._to_int_or_uuid(d.id()) for d in documents]
        # don't insert all at once, batch in chunks of b,
        # else we get an API error
        b = self.config.batch_size
        for i in range(0, len(ids), b):
            vectors: Dict[str, Embeddings | List[SparseVector]] = {
                "": embedding_vecs[i : i + b]
            }
            if self.config.use_sparse_embeddings:
                vectors["text-sparse"] = sparse_embedding_vecs[i : i + b]
            coll_found: bool = False
            for _ in range(3):
                # poll until collection is ready
                if (
                    self.client.collection_exists(self.config.collection_name)
                    and self.client.get_collection(self.config.collection_name).status
                    == CollectionStatus.GREEN
                ):
                    coll_found = True
                    break
                time.sleep(1)

            if not coll_found:
                raise ValueError(
                    f"""
                    QdrantDB Collection {self.config.collection_name} 
                    not found or not ready
                    """
                )

            self.client.upsert(
                collection_name=self.config.collection_name,
                points=Batch(
                    ids=ids[i : i + b],
                    vectors=vectors,
                    payloads=document_dicts[i : i + b],
                ),
            )

    def delete_collection(self, collection_name: str) -> None:
        self.client.delete_collection(collection_name=collection_name)

    def _to_int_or_uuid(self, id: str) -> int | str:
        try:
            int_val = int(id)
            if is_valid_uuid(id):
                return int_val
        except ValueError:
            pass

        # If doc_id is already a valid UUID, return it as is
        if isinstance(id, str) and is_valid_uuid(id):
            return id

        # Otherwise, generate a UUID from the doc_id
        # Convert doc_id to string if it's not already
        id_str = str(id)

        # Hash the document ID using SHA-1
        hash_object = hashlib.sha1(id_str.encode())
        hash_digest = hash_object.hexdigest()

        # Truncate or manipulate the hash to fit into a UUID (128 bits)
        uuid_str = hash_digest[:32]

        # Format this string into a UUID format
        formatted_uuid = uuid.UUID(uuid_str)

        return str(formatted_uuid)

    def get_all_documents(self, where: str = "") -> List[Document]:
        from qdrant_client.http.models import (
            Filter,
        )

        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot retrieve docs")
        docs = []
        offset = 0
        filter = Filter() if where == "" else Filter.parse_obj(json.loads(where))
        while True:
            results, next_page_offset = self.client.scroll(
                collection_name=self.config.collection_name,
                scroll_filter=filter,
                offset=offset,
                limit=10_000,  # try getting all at once, if not we keep paging
                with_payload=True,
                with_vectors=False,
            )
            docs += [
                self.config.document_class(**record.payload)  # type: ignore
                for record in results
            ]
            # ignore
            if next_page_offset is None:
                break
            offset = next_page_offset  # type: ignore
        return docs

    def get_documents_by_ids(self, ids: List[str]) -> List[Document]:
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot retrieve docs")
        _ids = [self._to_int_or_uuid(id) for id in ids]
        records = self.client.retrieve(
            collection_name=self.config.collection_name,
            ids=_ids,
            with_vectors=False,
            with_payload=True,
        )
        # Note the records may NOT be in the order of the ids,
        # so we re-order them here.
        id2payload = {record.id: record.payload for record in records}
        ordered_payloads = [id2payload[id] for id in _ids if id in id2payload]
        docs = [Document(**payload) for payload in ordered_payloads]  # type: ignore
        return docs

    def similar_texts_with_scores(
        self,
        text: str,
        k: int = 1,
        where: Optional[str] = None,
        neighbors: int = 0,
    ) -> List[Tuple[Document, float]]:
        from qdrant_client.conversions.common_types import ScoredPoint
        from qdrant_client.http.models import (
            Filter,
            NamedSparseVector,
            NamedVector,
            SearchRequest,
        )

        embedding = self.embedding_fn([text])[0]
        # TODO filter may not work yet
        if where is None or where == "":
            filter = Filter()
        else:
            filter = Filter.parse_obj(json.loads(where))
        requests = [
            SearchRequest(
                vector=NamedVector(
                    name="",
                    vector=embedding,
                ),
                limit=k,
                with_payload=True,
                filter=filter,
            )
        ]
        if self.config.use_sparse_embeddings:
            sparse_embedding = self.get_sparse_embeddings([text])[0]
            requests.append(
                SearchRequest(
                    vector=NamedSparseVector(
                        name="text-sparse",
                        vector=sparse_embedding,
                    ),
                    limit=self.config.sparse_limit,
                    with_payload=True,
                    filter=filter,
                )
            )
        if self.config.collection_name is None:
            raise ValueError("No collection name set, cannot search")
        search_result_lists: List[List[ScoredPoint]] = self.client.search_batch(
            collection_name=self.config.collection_name, requests=requests
        )

        search_result = [
            match for result in search_result_lists for match in result
        ]  # 2D list -> 1D list
        scores = [match.score for match in search_result if match is not None]
        docs = [
            self.config.document_class(**(match.payload))  # type: ignore
            for match in search_result
            if match is not None
        ]
        if len(docs) == 0:
            logger.warning(f"No matches found for {text}")
            return []
        doc_score_pairs = list(zip(docs, scores))
        max_score = max(ds[1] for ds in doc_score_pairs)
        if settings.debug:
            logger.info(f"Found {len(doc_score_pairs)} matches, max score: {max_score}")
        self.show_if_debug(doc_score_pairs)
        return doc_score_pairs
</file>

<file path="release-notes/v0-56-0-task-tool.md">
# Release Notes: TaskTool

## New Feature: `TaskTool` for Spawning Sub-Agents

We've added `TaskTool`, a new tool that enables agents to spawn sub-agents for handling specific tasks. This allows for dynamic task delegation with controlled tool access.

### Key Features:
- Agents can spawn sub-agents with specific tools and configurations
- Sub-agents run non-interactively and return results to the parent
- Supports nested operations and recursive task delegation
- Flexible tool access: delegate specific tools, all tools, or no tools

### Example Usage:
```python
# Agent spawns a sub-agent to handle a calculation
{
    "request": "task_tool",
    "system_message": "You are a calculator. Use multiply_tool to compute products.",
    "prompt": "Calculate 5 * 7",
    "tools": ["multiply_tool"],
    "model": "gpt-4o-mini"
}
```

### Documentation:
Full documentation with examples: [TaskTool Documentation](https://langroid.github.io/langroid/notes/task-tool/)

### Testing:
See working examples in [`tests/main/test_task_tool.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_task_tool.py)

## Update v0.56.3: Agent Naming Support

### Enhancement:
- Added optional `agent_name` parameter to TaskTool
- Sub-agents can now be given custom names for better logging and debugging
- If not specified, auto-generates unique names in format `agent-{uuid}`

### Example:
```python
{
    "request": "task_tool",
    "system_message": "You are a calculator.",
    "prompt": "Calculate 5 * 7",
    "tools": ["multiply_tool"],
    "agent_name": "calculator-agent"  # Optional: custom name for logging
}
```
</file>

<file path="release-notes/v0-56-11-openai-client-caching.md">
# Release Notes - v0.56.11

## OpenAI Client Connection Management

### HTTP Client Caching
- Implements intelligent client caching for OpenAI and compatible APIs (Groq, Cerebras, etc.)
- Agents with identical configurations now share underlying HTTP clients
- Prevents "too many open files" errors when creating many agents (e.g., 100 agents for 100 data rows)
- Thread-safe implementation allows safe client sharing across threads

### Performance Improvements
- Reduced latency through connection reuse
- Eliminates redundant TCP handshakes
- Decreases CPU usage and network round-trips
- Leverages httpx's built-in connection pooling

### Configuration
- New `use_cached_client` parameter in `OpenAIGPTConfig` (enabled by default)
- Can be disabled for specific use cases:
  ```python
  config = OpenAIGPTConfig(
      chat_model="gpt-4",
      use_cached_client=False  # Disable caching
  )
  ```

### When to Disable Client Caching
- Multiprocessing environments (each process needs its own client)
- When complete client isolation is required between agents
- Debugging client-related issues
- Legacy code that depends on unique client instances

### Technical Implementation
- SHA256-based cache key generation for configuration uniqueness
- Singleton pattern with lazy initialization
- Automatic cleanup via atexit hooks
- Compatible with both sync and async OpenAI clients
</file>

<file path="release-notes/v0-56-12-cached-tokens-support.md">
# v0.56.12: Cached Tokens Support

## Overview
This release adds support for tracking cached tokens in LLM API responses, enabling accurate cost calculations when using prompt caching features (e.g., OpenAI's prompt caching).

## Key Features

### 1. Cached Token Tracking
- Added `cached_tokens` field to `LLMTokenUsage` class
- Properly extracts cached token counts from OpenAI API responses (both streaming and non-streaming)
- Updated token usage string representation to show cached tokens

### 2. Cost Calculation Updates
- Enhanced cost calculation formula: `(prompt - cached) * input_cost + cached * cached_cost + completion * output_cost`
- Added `cached_cost_per_million` field to `ModelInfo` for all supported models
- Cached token costs typically 25-50% of regular input token costs

### 3. New Model Support
- **Gemini 2.5 Pro**: 1M context, $1.25/$0.31/$10.00 per million tokens
- **Gemini 2.5 Flash**: 1M context, $0.30/$0.075/$2.50 per million tokens
- **Gemini 2.5 Flash Lite Preview**: 64K context, $0.10/$0.025/$0.40 per million tokens

## Code Changes

### Updated Methods
- `compute_token_cost()` in `Agent` class now accepts cached token parameter
- `chat_cost()` returns 3-tuple: (input_cost, cached_cost, output_cost) per 1000 tokens
- `_cost_chat_model()` in OpenAI implementation properly accounts for cached tokens

### API Response Handling
```python
# Cached tokens extracted from OpenAI responses:
cached_tokens = usage.get("prompt_tokens_details", {}).get("cached_tokens", 0)
```

## Testing
- Added comprehensive tests for cached token tracking
- Verified cost calculations with cached tokens
- All existing tests pass without modification

## Breaking Changes
None - all changes are backward compatible.

## Credits
Original implementation by @alexagr in PR #882, with enhancements in PR #884.
</file>

<file path="release-notes/v0-56-13-done-sequences-parent-chain-fixes.md">
# v0.56.13: DoneSequences Parent Chain and Agent ID Fixes

## Summary

This release fixes critical issues with the DoneSequence implementation, parent pointer chain preservation in TaskTool, and agent ID initialization. These fixes ensure that task termination sequences work correctly with subtasks and that message lineage is properly maintained across agent boundaries.

## Key Fixes

### 1. Agent ID Initialization Fix

**Problem**: The `Agent.id` field was incorrectly returning a `FieldInfo` object instead of an actual ID string because `Agent` is not a Pydantic model but was using Pydantic's `Field` syntax.

**Solution**: Added proper ID initialization in `Agent.__init__()`:
```python
self.id = ObjectRegistry.new_id()  # Initialize agent ID
```

**Impact**: This ensures that `agent_id` is correctly set in `ChatDocument` metadata, which is crucial for tracking which agent owns which messages.

### 2. DoneSequence Message Chain Fix

**Problem**: The `_get_message_chain` method in `Task` was traversing parent pointers to build the message chain. When subtasks are involved, parent pointers can cross agent boundaries, incorrectly including messages from subtask agents in the parent task's chain.

**Solution**: Replaced parent pointer traversal with agent message history:
```python
def _get_message_chain(self, msg: ChatDocument | None, max_depth: Optional[int] = None) -> List[ChatDocument]:
    """Get the chain of messages using agent's message history."""
    # Get chat document IDs from message history
    doc_ids = [m.chat_document_id for m in self.agent.message_history 
               if m.chat_document_id]
    
    # Add current message ID if it exists and is not already the last one
    if msg:
        msg_id = msg.id()
        if not doc_ids or doc_ids[-1] != msg_id:
            doc_ids.append(msg_id)
    
    # Take only the last max_depth elements
    relevant_ids = doc_ids[-max_depth:]
    
    # Convert IDs to ChatDocuments
    return [doc for doc_id in relevant_ids 
            if (doc := ChatDocument.from_id(doc_id)) is not None]
```

**Impact**: DoneSequences now correctly check only messages from the current agent, preventing incorrect task termination when subtasks generate matching sequences.

### 3. Parent Pointer Preservation in Task.init()

**Problem**: When `ChatDocument.deepcopy()` is called during `task.init()`, it resets `parent_id` and `child_id` to empty strings, breaking the parent chain. This particularly affected TaskTool when creating subtasks with parent pointers.

**Solution**: Modified `task.init()` to preserve the original parent_id after deepcopy:
```python
if isinstance(msg, ChatDocument):
    original_parent_id = msg.metadata.parent_id
    self.pending_message = ChatDocument.deepcopy(msg)
    # Preserve the parent pointer from the original message
    self.pending_message.metadata.parent_id = original_parent_id
```

Additionally, added conditional logic to only override parent_id when necessary:
```python
if self.pending_message is not None and self.caller is not None:
    # Only override parent_id if it wasn't already set in the original message
    if not msg.metadata.parent_id:
        self.pending_message.metadata.parent_id = msg.metadata.id
```

**Impact**: Parent chains are now preserved when TaskTool creates subtasks, maintaining proper message lineage.

### 4. TaskTool Parent-Child Relationship

**Problem**: TaskTool was only setting the parent pointer on the prompt ChatDocument but not the corresponding child pointer on the TaskTool message.

**Solution**: Added bidirectional parent-child relationship in TaskTool handlers:
```python
if chat_doc is not None:
    prompt_doc = ChatDocument(
        content=self.prompt,
        metadata=ChatDocMetaData(
            parent_id=chat_doc.id(),
            agent_id=agent.id,
            sender=chat_doc.metadata.sender,
        )
    )
    # Set bidirectional parent-child relationship
    chat_doc.metadata.child_id = prompt_doc.id()
```

**Impact**: Complete bidirectional parent-child chains are maintained, improving message traceability.

## Tests Added

Added comprehensive test `test_task_init_preserves_parent_id()` in `test_task.py` that verifies:
- Parent IDs are preserved during ChatDocument deep copying
- Conditional parent_id override logic works correctly for subtasks
- Parent chains are maintained in various scenarios

## Breaking Changes

None. All changes are backward compatible bug fixes.

## Migration Guide

No migration needed. The fixes will automatically apply to existing code.

## Technical Details

The core issue was that DoneSequences were incorrectly checking messages across agent boundaries due to parent pointer traversal. Combined with the agent ID initialization bug and parent chain breaks in deepcopy, this caused incorrect task termination behavior. The fixes ensure:

1. Each agent's messages are properly tagged with the agent's ID
2. DoneSequence checking is confined to the current agent's message history
3. Parent chains are preserved through TaskTool subtask creation
4. Bidirectional parent-child relationships are maintained

These changes work together to ensure proper message lineage and task termination behavior in multi-agent systems.
</file>

<file path="release-notes/v0-56-15-response-sequence-tracking.md">
# v0.56.14 - Response Sequence Tracking for DoneSequence

## Overview
Improved DoneSequence implementation by introducing response sequence tracking at the Task level, replacing the previous approach that relied on parent pointer traversal or agent message history.

## Changes

### Task Response Sequence Tracking
- Added `response_sequence: List[ChatDocument]` to track messages as the task executes
- Messages are added to the sequence after each `step()` in the `run()` method
- Duplicate messages are prevented by checking if the pending message ID differs from the last element

### Simplified Message Chain Retrieval
- `_get_message_chain()` now simply returns the last N elements from `response_sequence`
- Eliminates complexity of parent pointer traversal and agent boundary issues
- More efficient and reliable message chain tracking

## Benefits
- Better encapsulation: Task maintains its own response sequence
- More explicit control over what gets added to the sequence
- Cleaner implementation without reaching into agent internals
- Fixes issues with DoneSequence incorrectly including messages from subtask agents

## Testing
All existing done sequence tests pass without modification, confirming backward compatibility.
</file>

<file path="release-notes/v0-56-2-table-chat-fix.md">
# Release Notes - v0.56.2

## TableChatAgent Enhancement: Data Cleaning Support with `df.assign()`

### Overview
This release enhances the TableChatAgent to better support data cleaning operations while maintaining security. Users can now perform column transformations using the safe `df.assign()` method.

### Key Changes

#### 1. Enabled `df.assign()` Method
- Added `assign` to the whitelist of allowed DataFrame methods
- Provides a secure way to create modified DataFrames without allowing arbitrary assignments
- Maintains the existing security model while enabling common data cleaning tasks

#### 2. Improved Agent Guidance
- Updated system message to proactively explain that assignment statements (`df['col'] = ...`) are not allowed
- Clear guidance to use `df.assign()` for data modifications
- Agent now correctly uses `df.assign()` on first attempt, avoiding error-correction cycles

### Example Usage
When asked to clean data, the agent will now use:
```python
df.assign(airline=df['airline'].str.replace('*', ''))
```
Instead of attempting:
```python
df['airline'] = df['airline'].str.replace('*', '')  # This would fail
```

### Security Considerations
- The `assign` method is safe as it returns a new DataFrame without side effects
- Cannot be used for arbitrary code execution, file I/O, or network access
- Expressions passed to `assign` still go through the same sanitization process
- Maintains the eval-only security model (no exec)

### Testing
- Added comprehensive test coverage for self-correction behavior
- Verified agent successfully handles data cleaning requests

This addresses issue #867 and improves the TableChatAgent's utility for data cleaning workflows.
</file>

<file path="release-notes/v0-56-4-handler-params.md">
# Langroid v0.56.4 Release Notes

## Improved Handler Parameter Analysis for Tool Messages

### Overview
This release enhances the internal mechanism for analyzing handler method parameters in `ToolMessage` handlers, providing more robust and accurate type detection.

### Key Improvements

#### Direct Type Checking for Handler Parameters
- **Agent parameter detection**: Now uses direct class checking with `inspect.isclass()` and `issubclass()` for more accurate detection of Agent-typed parameters
- **ChatDocument detection**: Uses direct identity comparison (`param.annotation is ChatDocument`) for exact type matching
- **Complex type support**: Maintains fallback to string-based detection for complex generic types like `Optional[Agent]`

#### Better Parameter Extraction
- Improved the method for removing the `self` parameter from handler signatures using index slicing instead of name-based filtering
- More reliable parameter analysis for both synchronous and asynchronous handlers

### Why This Matters
These improvements make handler parameter detection more robust, especially when working with:
- Subclasses of `Agent` 
- Tools that require specific agent or chat document context
- MCP (Model Context Protocol) tool handlers that use various parameter combinations

### Backward Compatibility
All existing handler patterns continue to work as before. The improvements are internal optimizations that enhance reliability without changing the API.

### Developer Impact
No code changes required. Handlers with type annotations like:
```python
def handle(self, agent: Agent, chat_doc: ChatDocument) -> str:
    ...
```
will benefit from more accurate parameter detection and routing.

### Related Changes
- Removed debug print statement from `_analyze_handler_params` method
- Enhanced test coverage for MCP tools with various handler signatures
</file>

<file path="release-notes/v0-56-6-doc-chat-refactor.md">
# v0.56.6: DocChatAgent Retrieval Configuration Refactor and Critical Fixes

## Summary
- Refactored retrieval parameter configuration in DocChatAgent for better clarity and control
- Fixed critical passages accumulation logic that could include incorrect documents in results
- Fixed reciprocal rank fusion (RRF) bias that unfairly penalized documents found by only one retrieval method
- Added intelligent configuration validation to prevent invalid retrieval setups
- Maintained backward compatibility with deprecated `n_similar_docs` parameter

## Changes Made

### 1. Moved Retrieval Parameters to Proper Location
- Added `n_relevant_chunks` and `n_similar_chunks` to `DocChatAgentConfig` where they logically belong
- Deprecated `n_similar_docs` in `ParsingConfig` (set to `None` by default)
- These parameters provide clearer semantics:
  - `n_similar_chunks`: number of chunks to retrieve by each method (semantic, BM25, fuzzy)
  - `n_relevant_chunks`: final number of chunks to return after all reranking

### 2. Backward Compatibility
- If users still set the deprecated `n_similar_docs` parameter, it will be used for both new parameters
- A deprecation warning is logged to encourage migration to the new parameters
- This ensures existing code continues to work while encouraging adoption of the new, clearer parameters

### 3. Added Smart Configuration Validation
The DocChatAgent initialization now includes intelligent validation to prevent invalid configurations:

#### Cross-Encoder and RRF Conflict Detection
- If both `cross_encoder_reranking_model` and `use_reciprocal_rank_fusion` are set, warns that RRF will be ignored
- Cross-encoder reranking takes precedence over RRF when both are configured

#### Automatic RRF Enablement
- Automatically enables RRF when all of the following conditions are met:
  - No cross-encoder reranking model is set
  - RRF is currently disabled
  - BM25 or fuzzy matching is enabled
  - `n_relevant_chunks` < `n_similar_chunks` × (number of retrieval methods)
- This prevents situations where multiple retrieval methods are used but there's no way to properly combine their results

### 4. Fixed Critical Passages Accumulation Logic
- Previously had a critical flaw where passages accumulation was inconsistent:
  - When using cross-encoder reranking, BM25 and fuzzy match results were appended to passages
  - But deduplication used `[id2doc[id] for id in id2doc.keys()]` which included ALL documents ever seen
  - This could incorrectly include documents from previous iterations not meant to be in the final result
- Fixed to properly handle passages accumulation:
  - When using RRF without cross-encoder: only collect ranks, don't accumulate passages
  - When using cross-encoder or neither RRF nor cross-encoder: properly accumulate passages
  - Ensures correct and consistent behavior across different configuration combinations

### 5. Fixed RRF Bias Issue
- Previously, documents not found by a retrieval method were assigned `float("inf")` as their rank
- This caused documents found by only one method to be unfairly penalized compared to documents found by multiple methods
- Now documents not found by a method get `max_rank = n_similar_chunks * retrieval_multiple`
- This ensures fair scoring while still giving some preference to documents found by multiple methods

Example of the bias that was fixed:
- Before: Document ranked #1 in semantic search only would score: 1/(1+c) ≈ 0.0164 (with c=60)
- Before: Document ranked #20 in all three methods would score: 3/(20+c) ≈ 0.0375
- The mediocre document would rank 2.3x higher despite being lower quality in each method
- After: The single-method document gets a fair chance by assigning reasonable ranks to missing methods

### 6. Updated Dependencies
- Updated all references throughout the codebase:
  - `DocChatAgent`: Uses new parameters throughout
  - `LanceDocChatAgent`: Updated to use `n_similar_chunks`
  - `ParsingConfig`: Made `n_similar_docs` Optional[int]
- Updated ruff pre-commit hook from v0.12.0 to v0.12.1

## Migration Guide

### Old Configuration
```python
config = DocChatAgentConfig(
    parsing=ParsingConfig(
        n_similar_docs=5  # This controlled both retrieval and final output
    )
)
```

### New Configuration
```python
config = DocChatAgentConfig(
    n_similar_chunks=5,    # Number of chunks each method retrieves
    n_relevant_chunks=3,   # Final number after reranking
    parsing=ParsingConfig(
        # n_similar_docs is deprecated, don't set it
    )
)
```

The new configuration provides more flexibility:
- You can retrieve more chunks initially (e.g., 10 per method)
- Then use reranking to select the best ones (e.g., top 3)
- This improves retrieval quality without increasing final context size

## Technical Details

### RRF Score Calculation (Fixed)
```python
# Old (biased) approach:
rank_semantic = id2_rank_semantic.get(id_, float("inf"))
rank_bm25 = id2_rank_bm25.get(id_, float("inf"))
rank_fuzzy = id2_rank_fuzzy.get(id_, float("inf"))

# New (fair) approach:
max_rank = self.config.n_similar_chunks * retrieval_multiple
rank_semantic = id2_rank_semantic.get(id_, max_rank)
rank_bm25 = id2_rank_bm25.get(id_, max_rank)
rank_fuzzy = id2_rank_fuzzy.get(id_, max_rank)
```

## Impact
- **Better Retrieval Quality**: The RRF fix ensures that high-quality documents found by a single method aren't unfairly discarded
- **Prevents Invalid Configurations**: Smart validation ensures users don't accidentally create setups that would produce poor results
- **Clearer Configuration**: Separating retrieval count from final output count provides more control
- **Fixes Critical Bug**: The passages accumulation fix prevents incorrect documents from appearing in results
- **Backward Compatible**: Existing code continues to work with deprecation warnings

## Related PR
- PR #874: https://github.com/langroid/langroid/pull/874
</file>

<file path="release-notes/v0-56-7-doc-chat-deprecation-fix.md">
# Release Notes for v0.56.7

## DocChatAgent Improvements

- Fixed test failures caused by deprecated `n_similar_docs` parameter interfering with `n_similar_chunks` and `n_relevant_chunks` settings
- Set `n_similar_docs` default to `None` to prevent backward compatibility code from overriding intended retrieval configurations
- Optimized reciprocal rank fusion passage selection using list slicing for better performance

## Bug Fixes

- Resolved issue where `n_similar_docs=4` (old default) was silently overriding test configurations that expected 3 chunks
</file>

<file path="release-notes/v0-56-8-task-tool-spawn-example.md">
# v0.56.8 Release Notes

## 🚀 New Features

### TaskTool Dynamic Sub-Agent Spawning Example

- Added `examples/basic/planner-workflow-spawn.py` demonstrating how to use `TaskTool` to dynamically spawn specialized sub-agents during execution
- Example shows a planner agent that solves multi-step math problems by spawning incremental and doubling agents as needed
- Showcases the power of dynamic agent creation without pre-defining sub-agents in the main script

## 🧪 Testing

- Added comprehensive tests for `TaskTool` including support for `tools="ALL"` option
- Enhanced test coverage for dynamic sub-agent spawning scenarios

## 🛠️ Development Improvements

### Ruff Auto-Fix for Examples

- Updated Makefile to run `ruff check examples/ --fix-only` to automatically fix code style issues in examples
- Removed F401 (unused imports) from ruff's ignore list to catch and fix unused imports
- Auto-fixed imports in 150+ example files for better code consistency
- Examples folder remains excluded from error reporting but benefits from automatic fixes

## 🔧 Configuration Changes

- Commented out flake8 in favor of ruff for linting (ruff is faster and covers all flake8 rules)
- Updated `pyproject.toml` to enable F401 checking
- Modified Makefile to add `--no-force-exclude` flag for ruff when processing examples
</file>

<file path="release-notes/v0-56-9-rrf-crossencoder-fixes.md">
# Release Notes - v0.56.9

## DocChatAgent Improvements

### Fixed Reciprocal Rank Fusion (RRF) Scoring
- Documents not found in a retrieval method now receive a rank of `max_rank + 1` instead of `max_rank`
- This ensures missing documents are properly penalized compared to documents that appear at the last position
- Improves the accuracy of RRF scoring when combining results from semantic search, BM25, and fuzzy matching

### Improved Cross-Encoder Reranking
- The `rerank_with_cross_encoder` method now only reorders passages without filtering
- Final selection of `n_relevant_chunks` is handled consistently in `get_relevant_chunks`
- This aligns cross-encoder behavior with other reranking methods (diversity, periphery)

### Simplified Conditional Logic
- Removed redundant checks for `cross_encoder_reranking_model` when `use_reciprocal_rank_fusion` is already being evaluated
- Clearer mutual exclusion between RRF and cross-encoder reranking
- Updated warning message for better clarity when both options are configured
</file>

<file path="scripts/fix-pydantic-imports.sh">
#!/bin/bash

# Langroid currently has pydantic v2 compatibility, but internally uses v1,
# via langroid.pydantic_v1. However since `import pydantic` brings in v2,
# this script replaces all instances of 'from pydantic' and 'import pydantic' in
# Python files with 'from langroid.pydantic_v1' and 'import langroid.pydantic_v1'.
#
# It makes an exception if the line contains '# keep', and leaves the
# import untouched. Of course this should be used mainly in tests and examples,
# since we don't want to mix pydantic v1 and v2 within core langroid code.

# Define the directories to search in
directories=("langroid" "examples" "tests")

# Function to perform replacements and log changes
replace_and_log() {
    # Use find to locate all .py files in the specified directories, excluding .venv directories
    find "${directories[@]}" -type f -name '*.py' -not -path '*/.venv/*' | while read -r file; do
        # Check and replace lines starting with specific patterns
        if grep -q '^from pydantic ' "$file" && grep -v '# keep' "$file" | grep -q '^from pydantic '; then
            sed -i'' -e  '/^from pydantic .*# keep/!s/^from pydantic /from langroid.pydantic_v1 /' "$file"
            echo "Replaced 'from pydantic ' in $file"
        fi
        if grep -q '^from pydantic.v1 ' "$file" && grep -v '# keep' "$file" | grep -q '^from pydantic.v1 '; then
            sed -i'' -e '/^from pydantic .*# keep/s/^from pydantic.v1 /from langroid.pydantic_v1 /' "$file"
            echo "Replaced 'from pydantic.v1 ' in $file"
        fi
        if grep -q '^import pydantic' "$file" && grep -v '# keep' "$file" | grep -q '^import pydantic'; then
            sed -i'' -e '/^from pydantic .*# keep/!s/^import pydantic/import langroid.pydantic_v1/' "$file"
            echo "Replaced 'import pydantic' in $file"
        fi
    done
}

# Call the function to perform the replacements and logging
replace_and_log
</file>

<file path="tests/extras/test_doc_chat_agent_llamacpp.py">
import logging
import os
import warnings
from types import SimpleNamespace
from typing import List, Optional

import pandas as pd
import pytest

from langroid import ChatDocument
from langroid.agent.batch import run_batch_task_gen, run_batch_tasks
from langroid.agent.chat_agent import ChatAgent
from langroid.agent.special.doc_chat_agent import (
    DocChatAgent,
    DocChatAgentConfig,
    RetrievalTool,
)
from langroid.agent.special.lance_doc_chat_agent import LanceDocChatAgent
from langroid.agent.task import Task
from langroid.embedding_models.models import LlamaCppServerEmbeddingsConfig
from langroid.language_models import GeminiModel, OpenAIChatModel
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import DocMetaData, Document, Entity
from langroid.parsing.parser import ParsingConfig, Splitter
from langroid.parsing.utils import generate_random_text
from langroid.prompts.prompts_config import PromptsConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE
from langroid.utils.output.citations import extract_markdown_references
from langroid.utils.system import rmdir
from langroid.vector_store.base import VectorStore, VectorStoreConfig
from langroid.vector_store.chromadb import ChromaDB, ChromaDBConfig
from langroid.vector_store.lancedb import LanceDB, LanceDBConfig
from langroid.vector_store.qdrantdb import QdrantDB, QdrantDBConfig

"""
    Pytest for running Langroid DocAgent with llama.cpp server acting as the 
    embeddings host.
    Not designed for main usage, but this has been useful for validating if local models
    are sufficient to run Langroid. Feel free to delete!

    You can find an example of how to run llama.cpp server as an embeddings host in
    docs/notes/llama-cpp-embeddings.md
    
    You must fill out the following variables or the tests will fail:

    embedding_address       - This is a string containing the IP address and 
                              port of the llama.cpp server 
                              e.g. "http://localhost:51060"
    embed_context_length    - This is the context length of the model you have
                              loaded into llama.cpp server
    embedding_dimensions    - The dimensions of the embeddings returned from
                              the model.

    By default, the test uses OpenAI as it's LLM, however you can set
    override_openai_model = True
    and then subsequently set a model as standard, e.g.
    openai_model_override = "local/localhost:5001/v1"

"""

override_openai_model: bool = False
openai_model_override: str = "local/localhost:5001/v1"

embedding_address: str = "http://localhost:51060"
embed_context_length: int = 2048
embedding_dimensions: int = 768


class MyDocMetaData(DocMetaData):
    id: str


class MyDoc(Document):
    content: str
    metadata: MyDocMetaData


documents: List[Document] = [
    Document(
        content="""
        In the year 2050, GPT10 was released. 
        
        In 2057, paperclips were seen all over the world. 
        
        Global warming was solved in 2060. 
        
        In 2045, the Tour de France was still going on.
        They were still using bicycles. 
        
        There was one more ice age in 2040.
        """,
        metadata=DocMetaData(source="wikipedia"),
    ),
    Document(
        content="""
    We are living in an alternate universe where Lancaster is the capital of England.
        
    Charlie Chaplin was a great comedian.
        
    Charlie Chaplin was born in 1889.
        
    Beethoven was born in 1770.
        
    In the year 2050, all countries merged into Lithuania.
    """,
        metadata=DocMetaData(source="almanac"),
    ),
]

QUERY_EXPECTED_PAIRS = [
    ("what happened in the year 2050?", "GPT10, Lithuania"),
    ("what is the capital of England?", "Lancaster"),
    ("Who was Charlie Chaplin?", "comedian"),
    ("When was global warming solved?", "2060"),
    ("What do we know about paperclips?", "2057"),
]

for _ in range(100):
    documents.append(
        Document(
            content=generate_random_text(5),
            metadata=DocMetaData(source="random"),
        )
    )

# We need to override the global test_settings in order to allow us to run
# the local model in this test. If we don't, then we'll constantly get issues.
logger = logging.getLogger(__name__)


@pytest.fixture(scope="function")
def test_settings(request):
    base_settings = dict(
        debug=request.config.getoption("--show"),
        cache_type=request.config.getoption("--ct"),
        stream=not request.config.getoption("--ns"),
        max_turns=request.config.getoption("--turns"),
    )

    if request.node.get_closest_marker("fallback"):
        # we're in a test marked as requiring fallback,
        # so we re-run with a sequence of settings, mainly
        # on `chat_model` and `cache`.
        logger.warning("Running test with fallback settings")
        models = [request.config.getoption("--m")]
        if OpenAIChatModel.GPT4o not in models:
            # we may be using a weaker model, so add GPT4o as first fallback
            models.append(OpenAIChatModel.GPT4o)
        models.append(GeminiModel.GEMINI_2_FLASH)
        caches = [True] + [False] * (len(models) - 1)
        retry_count = getattr(request.node, "retry_count", 0)
        model = (
            models[retry_count]
            if retry_count < len(models)
            else request.config.getoption("--m")
        )
        cache = caches[retry_count] if retry_count < len(caches) else False
        logger.warning(f"Retry count: {retry_count}, model: {model}, cache: {cache}")
    else:
        model = request.config.getoption("--m")
        cache = not request.config.getoption("--nc")

    if override_openai_model:
        model = ""

    yield Settings(**base_settings, chat_model=model, cache=cache)


embed_cfg = LlamaCppServerEmbeddingsConfig(
    api_base=embedding_address,
    context_length=embed_context_length,
    batch_size=embed_context_length,
    dims=embedding_dimensions,
    model_type="llamacpp",
)

global_llm: OpenAIGPTConfig = OpenAIGPTConfig(chat_model=openai_model_override)


@pytest.fixture(scope="function")
def vecdb(test_settings: Settings, request) -> VectorStore:
    set_global(test_settings)
    if request.param == "qdrant_local":
        qd_dir = ":memory:"
        qd_cfg = QdrantDBConfig(
            cloud=False,
            collection_name="test-" + embed_cfg.model_type,
            storage_path=qd_dir,
            embedding=embed_cfg,
        )
        qd = QdrantDB(qd_cfg)
        yield qd
        return

    if request.param == "chroma":
        cd_dir = ".chroma/" + embed_cfg.model_type
        rmdir(cd_dir)
        cd_cfg = ChromaDBConfig(
            collection_name="test-" + embed_cfg.model_type,
            storage_path=cd_dir,
            embedding=embed_cfg,
        )
        cd = ChromaDB(cd_cfg)
        yield cd
        rmdir(cd_dir)
        return

    if request.param == "lancedb":
        ldb_dir = ".lancedb/data/" + embed_cfg.model_type
        rmdir(ldb_dir)
        ldb_cfg = LanceDBConfig(
            cloud=False,
            collection_name="test-" + embed_cfg.model_type,
            storage_path=ldb_dir,
            embedding=embed_cfg,
            document_class=MyDoc,  # IMPORTANT, to ensure table has full schema!
        )
        ldb = LanceDB(ldb_cfg)
        yield ldb
        rmdir(ldb_dir)
        return


class _TestDocChatAgentConfig(DocChatAgentConfig):
    cross_encoder_reranking_model = ""
    n_query_rephrases = 0
    n_similar_chunks = 3
    n_relevant_chunks = 3
    debug: bool = False
    stream: bool = False  # allow streaming where needed
    conversation_mode = False
    vecdb: VectorStoreConfig | None = None

    llm = global_llm

    parsing: ParsingConfig = ParsingConfig(
        splitter=Splitter.SIMPLE,
    )

    prompts: PromptsConfig = PromptsConfig(
        max_tokens=1000,
    )


config = _TestDocChatAgentConfig()
set_global(Settings(cache=False))  # allow cacheing


@pytest.fixture(scope="function")
def agent(test_settings: Settings, vecdb) -> DocChatAgent:
    set_global(test_settings)
    agent = DocChatAgent(config)
    agent.vecdb = vecdb
    agent.ingest_docs(documents)
    os.environ["TOKENIZERS_PARALLELISM"] = "false"
    return agent


warnings.filterwarnings(
    "ignore",
    message="Token indices sequence length.*",
    # category=UserWarning,
    module="transformers",
)


@pytest.mark.parametrize("vecdb", ["lancedb", "qdrant_local", "chroma"], indirect=True)
@pytest.mark.parametrize("query, expected", QUERY_EXPECTED_PAIRS)
def test_doc_chat_agent_llm(test_settings: Settings, agent, query: str, expected: str):
    """
    Test directly using `llm_response` method of DocChatAgent.
    """

    # note that the (query, ans) pairs are accumulated into the
    # internal dialog history of the agent.
    set_global(test_settings)
    agent.config.conversation_mode = False
    result = agent.llm_response(query)
    ans = result.content
    refs = extract_markdown_references(ans)
    sources = extract_markdown_references(result.metadata.source)
    assert refs == sources
    expected = [e.strip() for e in expected.split(",")]
    assert all([e in ans for e in expected])


@pytest.mark.parametrize("vecdb", ["lancedb", "qdrant_local", "chroma"], indirect=True)
@pytest.mark.parametrize("query, expected", QUERY_EXPECTED_PAIRS)
@pytest.mark.asyncio
async def test_doc_chat_agent_llm_async(
    test_settings: Settings, agent, query: str, expected: str
):
    """
    Test directly using `llm_response_async` method of DocChatAgent.
    """

    # note that the (query, ans) pairs are accumulated into the
    # internal dialog history of the agent.
    set_global(test_settings)
    agent.config.conversation_mode = False
    ans = (await agent.llm_response_async(query)).content
    expected = [e.strip() for e in expected.split(",")]
    assert all([e in ans for e in expected])


@pytest.mark.parametrize("query, expected", QUERY_EXPECTED_PAIRS)
@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma"], indirect=True)
def test_doc_chat_agent_task(test_settings: Settings, agent, query, expected):
    """
    Test DocChatAgent wrapped in a Task.
    """
    set_global(test_settings)
    agent.config.conversation_mode = True
    task = Task(agent, restart=True)
    task.init()
    # LLM responds to Sys msg, initiates conv, says thank you, etc.
    task.step()

    agent.default_human_response = query
    task.step()  # user asks query
    task.step()  # LLM answers
    ans = task.pending_message.content.lower()
    expected = [e.strip() for e in expected.split(",")]
    assert all([e.lower() in ans for e in expected])
    assert task.pending_message.metadata.sender == Entity.LLM


class RetrievalAgent(DocChatAgent):
    def llm_response(
        self,
        message: None | str | ChatDocument = None,
    ) -> Optional[ChatDocument]:
        # override the DocChatAgent's LLM response,
        # to just use ChatAgent's LLM response - this ensures that the system msg
        # is respected, and it uses the `retrieval_tool` as instructed.
        return ChatAgent.llm_response(self, message)


@pytest.fixture(scope="function")
def retrieval_agent(test_settings: Settings, vecdb) -> RetrievalAgent:
    set_global(test_settings)
    agent = RetrievalAgent(config)
    agent.vecdb = vecdb
    agent.ingest_docs(documents)
    os.environ["TOKENIZERS_PARALLELISM"] = "false"
    return agent


@pytest.mark.parametrize("vecdb", ["qdrant_local"], indirect=True)
@pytest.mark.parametrize(
    "query, expected",
    [
        ("Capital of England", "Lancaster"),
        ("Who was Charlie Chaplin?", "comedian"),
        ("Events in the year 2050", "Lithuania, GPT10"),
    ],
)
def test_retrieval_tool(
    test_settings: Settings, retrieval_agent, query: str, expected: str
):
    set_global(test_settings)
    retrieval_agent.enable_message(RetrievalTool)
    task = Task(
        retrieval_agent,
        restart=True,
        interactive=False,
        system_message=f"""
        To answer user's query, use the `retrieval_tool` to retrieve relevant passages, 
        and ONLY then answer the query. 
        In case the query is simply a topic or search phrase, 
        guess what the user may want to know, and formulate it as a 
        question to be answered, and use this as the `query` field in the 
        `retrieval_tool`. 
        
        IMPORTANT: Your answer MUST ONLY be based on the retrieved passages,
        REGARDLESS of how IMPLAUSIBLE the answer may seem, and 
        REGARDLESS of whether you think the answer is correct or not.
        
        When you are ready to show your answer, say {DONE}, followed by the answer.
        """,
    )
    # 3 turns:
    # 1. LLM gen `retrieval_tool` request
    # 2. Agent gen `retrieval_tool` response (i.e. returns relevant passages)
    # 3. LLM gen answer based on passages
    ans = task.run(query, turns=3).content
    expected = [e.strip() for e in expected.split(",")]
    assert all([e in ans for e in expected])


@pytest.fixture(scope="function")
def new_agent(test_settings: Settings, vecdb) -> DocChatAgent:
    set_global(test_settings)
    agent = DocChatAgent(config)
    agent.vecdb = vecdb
    agent.ingest_docs(documents)
    os.environ["TOKENIZERS_PARALLELISM"] = "false"
    return agent


@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma"], indirect=True)
@pytest.mark.parametrize("conv_mode", [True, False])
def test_doc_chat_followup(test_settings: Settings, new_agent, conv_mode: bool):
    """
    Test whether follow-up question is handled correctly.
    """
    new_agent.config.conversation_mode = conv_mode
    set_global(test_settings)
    task = Task(
        new_agent,
        interactive=False,
        restart=False,  # don't restart, so we can ask follow-up questions
        done_if_response=[Entity.LLM],
        done_if_no_response=[Entity.LLM],
    )
    result = task.run("Who was Charlie Chaplin?")
    assert "comedian" in result.content.lower()

    result = task.run("When was he born?")
    assert "1889" in result.content


@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma"], indirect=True)
@pytest.mark.parametrize("conv_mode", [True, False])
@pytest.mark.asyncio
async def test_doc_chat_followup_async(
    test_settings: Settings, new_agent, conv_mode: bool
):
    """
    Test whether follow-up question is handled correctly (in async mode).
    """
    new_agent.config.conversation_mode = conv_mode
    set_global(test_settings)
    task = Task(
        new_agent,
        interactive=False,
        restart=False,  # don't restart, so we can ask follow-up questions
        done_if_response=[Entity.LLM],
        done_if_no_response=[Entity.LLM],
    )
    result = await task.run_async("Who was Charlie Chaplin?")
    assert "comedian" in result.content.lower()

    result = await task.run_async("When was he born?")
    assert "1889" in result.content


# setup config for retrieval test, with n_neighbor_chunks=2
# and parser.n_neighbor_ids = 5
class _MyDocChatAgentConfig(DocChatAgentConfig):
    cross_encoder_reranking_model = ""
    n_query_rephrases = 0
    n_neighbor_chunks = 2
    n_similar_chunks = 2
    n_relevant_chunks = 2
    debug: bool = False
    stream: bool = True  # allow streaming where needed
    conversation_mode = True
    vecdb: VectorStoreConfig | None = None

    llm = global_llm

    parsing: ParsingConfig = ParsingConfig(
        splitter=Splitter.SIMPLE,
        n_neighbor_ids=5,
    )


@pytest.mark.parametrize("vecdb", ["lancedb", "chroma", "qdrant_local"], indirect=True)
@pytest.mark.parametrize(
    "splitter", [Splitter.PARA_SENTENCE, Splitter.SIMPLE, Splitter.TOKENS]
)
@pytest.mark.parametrize("conv_mode", [True, False])
def test_doc_chat_retrieval(
    test_settings: Settings, vecdb, splitter: Splitter, conv_mode: bool
):
    """
    Test window retrieval of relevant doc-chunks.
    Check that we are retrieving 2 neighbors around each match.
    """
    agent = DocChatAgent(
        _MyDocChatAgentConfig(
            llm=global_llm,
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                splitter=splitter,
            ),
        )
    )
    agent.config.conversation_mode = conv_mode
    agent.vecdb = vecdb

    set_global(test_settings)

    phrases = SimpleNamespace(
        CATS="Cats are quiet and clean.",
        DOGS="Dogs are loud and messy.",
        PIGS="Pigs cannot fly.",
        GIRAFFES="Giraffes are tall and vegetarian.",
        BATS="Bats are blind.",
        COWS="Cows are peaceful.",
        GIRAFFES2="Giraffes are really strange animals.",
        HYENAS="Hyenas are dangerous and fast.",
        ZEBRAS="Zebras are bizarre with stripes.",
    )
    text = "\n\n".join(vars(phrases).values())
    agent.clear()
    agent.ingest_docs([Document(content=text, metadata={"source": "animals"})])
    results = agent.get_relevant_chunks("What are giraffes like?")

    # All phrases except the CATS phrase should be in the results
    # since they are all within 2 chunks of a giraffe phrase.
    # (The CAT phrase is 3 chunks away, so it should not be in the results.)
    all_but_cats = [p for p in vars(phrases).values() if "Cats" not in p]
    # check that each phrases occurs in exactly one result
    assert (
        sum(p in r.content for p in all_but_cats for r in results)
        == len(vars(phrases)) - 1
    )

    agent.clear()


@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma"], indirect=True)
def test_doc_chat_rerank_diversity(test_settings: Settings, vecdb):
    """
    Test that reranking by diversity works.
    """

    cfg = _MyDocChatAgentConfig(
        llm=global_llm,
        n_neighbor_chunks=0,
        n_similar_chunks=8,
        n_relevant_chunks=8,
    )
    agent = DocChatAgent(cfg)
    agent.vecdb = vecdb

    set_global(test_settings)

    phrases = SimpleNamespace(
        g1="Giraffes are tall.",
        g2="Giraffes are vegetarian.",
        g3="Giraffes are strange.",
        g4="Giraffes are fast.",
        g5="Giraffes are known to be tall.",
        g6="Giraffes are considered strange.",
        g7="Giraffes move fast.",
        g8="Giraffes are definitely vegetarian.",
    )
    docs = [
        Document(content=p, metadata=DocMetaData(source="user"))
        for p in vars(phrases).values()
    ]
    reranked = agent.rerank_with_diversity(docs)

    # assert that each phrase tall, vegetarian, strange, fast
    # occurs exactly once in top 4 phrases
    for p in ["tall", "vegetarian", "strange", "fast"]:
        assert sum(p in r.content for r in reranked[:4]) == 1


@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma"], indirect=True)
def test_reciprocal_rank_fusion(test_settings: Settings, vecdb):
    """
    Test that RRF (Reciprocal Rank Fusion) works.
    """

    cfg = _MyDocChatAgentConfig(
        llm=global_llm,
        n_neighbor_chunks=0,
        n_similar_chunks=3,
        n_relevant_chunks=3,
        cross_encoder_reranking_model="",
        use_bm25_search=True,
        use_fuzzy_match=True,
        use_reciprocal_rank_fusion=True,
    )
    agent = DocChatAgent(cfg)
    agent.vecdb = vecdb

    set_global(test_settings)

    phrases = SimpleNamespace(
        g1="time flies like an arrow",
        g2="a fly is very small",
        g3="we like apples",
        g4="the river bank got flooded",
        g5="there was a run on the bank",
        g6="JPMChase is a bank",
        g7="Chase is one of the banks",
    )
    docs = [
        Document(content=p, metadata=DocMetaData(source="user"))
        for p in vars(phrases).values()
    ]
    agent.ingest_docs(docs, split=False)
    chunks = agent.get_relevant_chunks("I like to chase banks")
    assert len(chunks) == 3
    assert any(phrases.g7 in chunk.content for chunk in chunks)
    assert any(phrases.g6 in chunk.content for chunk in chunks)

    chunks = agent.get_relevant_chunks("I like oranges")
    assert len(chunks) == 3
    assert any(phrases.g3 in chunk.content for chunk in chunks)
    assert any(phrases.g1 in chunk.content for chunk in chunks)


@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma"], indirect=True)
def test_doc_chat_rerank_periphery(test_settings: Settings, vecdb):
    """
    Test that reranking to periphery works.
    """

    cfg = _MyDocChatAgentConfig(
        llm=global_llm,
        n_neighbor_chunks=0,
        n_similar_chunks=8,
        n_relevant_chunks=8,
    )
    agent = DocChatAgent(cfg)
    agent.vecdb = vecdb

    set_global(test_settings)

    docs = [
        Document(content=str(i), metadata=DocMetaData(source="user")) for i in range(10)
    ]
    reranked = agent.rerank_to_periphery(docs)
    numbers = [int(d.content) for d in reranked]
    assert numbers == [0, 2, 4, 6, 8, 9, 7, 5, 3, 1]


data = {
    "id": ["A100", "B200", "C300", "D400", "E500"],
    "year": [1955, 1977, 1989, 2001, 2015],
    "author": [
        "Isaac Maximov",
        "J.K. Bowling",
        "George Morewell",
        "J.R.R. Bolshine",
        "Hugo Wellington",
    ],
    "title": [
        "The Last Question",
        "Harry Potter",
        "2084",
        "The Lord of the Rings",
        "The Time Machine",
    ],
    "summary": [
        "A story exploring the concept of entropy and the end of the universe.",
        "The adventures of a young wizard and his friends at a magical school.",
        "A dystopian novel about a totalitarian regime and the concept of freedom.",
        "An epic fantasy tale of a quest to destroy a powerful ring.",
        "A science fiction novel about time travel and its consequences.",
    ],
}

df = pd.DataFrame(data)


@pytest.mark.parametrize("metadata", [[], ["id", "year"], ["year"]])
@pytest.mark.parametrize("vecdb", ["lancedb", "qdrant_local", "chroma"], indirect=True)
def test_doc_chat_ingest_df(
    test_settings: Settings,
    vecdb,
    metadata,
):
    """Check we can ingest from a dataframe and run queries."""
    set_global(test_settings)

    sys_msg = "You will be asked to answer questions based on short book descriptions."
    agent_cfg = DocChatAgentConfig(
        llm=global_llm,
        system_message=sys_msg,
        cross_encoder_reranking_model="",
    )
    if isinstance(vecdb, LanceDB):
        agent = LanceDocChatAgent(agent_cfg)
    else:
        agent = DocChatAgent(agent_cfg)
    agent.vecdb = vecdb
    agent.ingest_dataframe(df, content="summary", metadata=metadata)
    response = agent.llm_response(
        """
        What concept does the book dealing with the end of the universe explore?
        """
    )
    assert "entropy" in response.content.lower()


@pytest.mark.parametrize("metadata", [[], ["id", "year"], ["year"]])
@pytest.mark.parametrize("vecdb", ["lancedb", "qdrant_local", "chroma"], indirect=True)
def test_doc_chat_add_content_fields(
    test_settings: Settings,
    vecdb,
    metadata,
):
    """Check we can ingest from a dataframe,
    with additional fields inserted into content,
    and run queries that refer to those fields."""

    set_global(test_settings)

    sys_msg = "You will be asked to answer questions based on short movie descriptions."
    agent_cfg = DocChatAgentConfig(
        llm=global_llm,
        system_message=sys_msg,
        cross_encoder_reranking_model="",
        add_fields_to_content=["year", "author", "title"],
    )
    if isinstance(vecdb, LanceDB):
        agent = LanceDocChatAgent(agent_cfg)
    else:
        agent = DocChatAgent(agent_cfg)
    agent.vecdb = vecdb
    agent.ingest_dataframe(df, content="summary", metadata=metadata)
    response = agent.llm_response(
        """
        What was the title of the book by George Morewell and when was it written?
        """
    )
    assert "2084" in response.content and "1989" in response.content


@pytest.mark.parametrize("vecdb", ["lancedb", "chroma", "qdrant_local"], indirect=True)
@pytest.mark.parametrize(
    "splitter", [Splitter.PARA_SENTENCE, Splitter.SIMPLE, Splitter.TOKENS]
)
def test_doc_chat_incremental_ingest(
    test_settings: Settings, vecdb, splitter: Splitter
):
    """
    Check that we are able ingest documents incrementally.
    """
    agent = DocChatAgent(
        _MyDocChatAgentConfig(
            llm=global_llm,
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                splitter=splitter,
            ),
        )
    )
    agent.vecdb = vecdb

    set_global(test_settings)

    phrases = SimpleNamespace(
        CATS="Cats are quiet and clean.",
        DOGS="Dogs are loud and messy.",
        PIGS="Pigs cannot fly.",
        GIRAFFES="Giraffes are tall and vegetarian.",
        BATS="Bats are blind.",
        COWS="Cows are peaceful.",
        GIRAFFES2="Giraffes are really strange animals.",
        HYENAS="Hyenas are dangerous and fast.",
        ZEBRAS="Zebras are bizarre with stripes.",
    )
    sentences = list(vars(phrases).values())
    docs1 = [
        Document(content=s, metadata=dict(source="animals")) for s in sentences[:4]
    ]

    docs2 = [
        Document(content=s, metadata=dict(source="animals")) for s in sentences[4:]
    ]
    agent.ingest_docs(docs1)
    agent.ingest_docs(docs2)
    results = agent.get_relevant_chunks("What do we know about Pigs?")
    assert any("fly" in r.content for r in results)

    results = agent.get_relevant_chunks("What do we know about Hyenas?")
    assert any("fast" in r.content for r in results) or any(
        "dangerous" in r.content for r in results
    )


@pytest.mark.parametrize("vecdb", ["chroma", "qdrant_local"], indirect=True)
@pytest.mark.parametrize(
    "splitter", [Splitter.PARA_SENTENCE, Splitter.SIMPLE, Splitter.TOKENS]
)
@pytest.mark.parametrize("source", ["bytes", "path"])
def test_doc_chat_ingest_paths(
    test_settings: Settings,
    vecdb,
    splitter: Splitter,
    source,
):
    """
    Test DocChatAgent.ingest_doc_paths
    """
    agent = DocChatAgent(
        _MyDocChatAgentConfig(
            llm=global_llm,
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                splitter=splitter,
            ),
        )
    )
    agent.vecdb = vecdb

    set_global(test_settings)

    phrases = SimpleNamespace(
        CATS="Cats are quiet and clean.",
        DOGS="Dogs are loud and messy.",
        PIGS="Pigs cannot fly.",
        GIRAFFES="Giraffes are tall and vegetarian.",
        BATS="Bats are blind.",
        COWS="Cows are peaceful.",
        GIRAFFES2="Giraffes are really strange animals.",
        HYENAS="Hyenas are dangerous and fast.",
        ZEBRAS="Zebras are bizarre with stripes.",
    )
    sentences = list(vars(phrases).values())

    # create temp files containing each sentence, using tempfile pkg
    import tempfile

    for s in sentences:
        if source == "path":
            with tempfile.NamedTemporaryFile(mode="w", delete=False) as f:
                f.write(s)
                f.close()
                agent.ingest_doc_paths([f.name])
        else:
            agent.ingest_doc_paths([s.encode()])

    results = agent.get_relevant_chunks("What do we know about Pigs?")
    assert any("fly" in r.content for r in results)

    results = agent.get_relevant_chunks("What do we know about Hyenas?")
    assert any("fast" in r.content for r in results) or any(
        "dangerous" in r.content for r in results
    )


@pytest.mark.parametrize("vecdb", ["chroma", "lancedb", "qdrant_local"], indirect=True)
@pytest.mark.parametrize(
    "splitter", [Splitter.PARA_SENTENCE, Splitter.SIMPLE, Splitter.TOKENS]
)
@pytest.mark.parametrize("metadata_dict", [True, False])
def test_doc_chat_ingest_path_metadata(
    test_settings: Settings,
    vecdb,
    splitter: Splitter,
    metadata_dict: bool,  # whether metadata is dict or DocMetaData
):
    """
    Test DocChatAgent.ingest_doc_paths, with metadata
    """
    agent = DocChatAgent(
        _MyDocChatAgentConfig(
            llm=global_llm,
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                splitter=splitter,
            ),
        )
    )
    agent.vecdb = vecdb

    set_global(test_settings)

    # create a list of dicts, each containing a sentence about an animal
    # and a metadata field indicating the animal's name, species, and diet
    animals = [
        {
            "content": "Cats are quiet and clean.",
            "metadata": {
                "name": "cat",
                "species": "feline",
                "diet": "carnivore",
            },
        },
        {
            "content": "Dogs are loud and messy.",
            "metadata": {
                "name": "dog",
                "species": "canine",
                "diet": "omnivore",
            },
        },
        {
            "content": "Pigs cannot fly.",
            "metadata": {
                "name": "pig",
                "species": "porcine",
                "diet": "omnivore",
            },
        },
    ]

    class AnimalMetadata(DocMetaData):
        name: str
        species: str
        diet: str

    animal_metadata_list = [AnimalMetadata(**a["metadata"]) for a in animals]

    # put each animal content in a separate file
    import tempfile

    for animal in animals:
        with tempfile.NamedTemporaryFile(mode="w", delete=False) as f:
            f.write(animal["content"])
            f.close()
            animal["path"] = f.name

    agent.clear()
    # ingest with per-file metadata
    agent.ingest_doc_paths(
        [a["path"] for a in animals],
        metadata=(
            [a["metadata"] for a in animals] if metadata_dict else animal_metadata_list
        ),
    )

    results = agent.get_relevant_chunks("What do we know about Pigs?")
    assert any("fly" in r.content for r in results)
    # assert about metadata
    assert any("porcine" in r.metadata.species for r in results)

    # clear out the agent docs and the underlying vecdb collection
    agent.clear()

    # ingest with single metadata for ALL animals
    agent.ingest_doc_paths(
        [a["path"] for a in animals],
        metadata=(
            dict(type="animal", category="living")
            if metadata_dict
            else DocMetaData(type="animal", category="living")
        ),
    )

    results = agent.get_relevant_chunks("What do we know about dogs?")
    assert any("messy" in r.content for r in results)
    assert all(r.metadata.type == "animal" for r in results)

    agent.clear()


@pytest.mark.parametrize("vecdb", ["chroma", "lancedb", "qdrant_local"], indirect=True)
def test_doc_chat_batch(test_settings: Settings, vecdb):
    """
    Test batch run of queries to multiple instances of DocChatAgent,
    which share the same vector-db.
    """

    set_global(test_settings)
    doc_agents = [DocChatAgent(_MyDocChatAgentConfig(llm=global_llm)) for _ in range(2)]

    # attach a common vector-db to all agents
    for a in doc_agents:
        a.vecdb = vecdb

    docs = [
        Document(
            content="""
            Filidor Dinkoyevsky wrote a book called "The Sisters Karenina".
            It is loosely based on the life of the Anya Karvenina,
            from a book by Tolsitoy a few years earlier.
            """,
            metadata=DocMetaData(source="tweakipedia"),
        ),
        Document(
            content="""
            The novel "Searching for Sebastian Night" was written by Vlad Nabikov.
            It is an intriguing tale about the author's search for his lost brother,
            and is a meditation on the nature of loss and memory.
            """,
            metadata=DocMetaData(source="tweakipedia"),
        ),
    ]

    # note we only need to ingest docs using one of the agents,
    # since they share the same vector-db
    doc_agents[0].ingest_docs(docs, split=False)

    questions = [
        "What book did Vlad Nabikov write?",
        "Who wrote the book about the Karenina sisters?",
    ]

    # (1) test that we can create a single task and use run_batch_tasks
    task = Task(doc_agents[0], name="DocAgent", interactive=False, single_round=True)
    results = run_batch_tasks(task, questions)

    assert "Sebastian" in results[0].content
    assert "Dinkoyevsky" in results[1].content

    # (2) test that we can create a task-generator fn and use run_batch_task_gen

    # create a task-generator fn, to create one per question
    def gen_task(i: int):
        return Task(
            doc_agents[i],
            name=f"DocAgent-{i}",
            interactive=False,
            single_round=True,
        )

    results = run_batch_task_gen(gen_task, questions)

    assert "Sebastian" in results[0].content
    assert "Dinkoyevsky" in results[1].content

    for a in doc_agents:
        a.clear()
</file>

<file path="tests/main/test_batch.py">
import asyncio
import time
from typing import Optional

import pytest

from langroid import ChatDocument
from langroid.agent.batch import (
    ExceptionHandling,
    _convert_exception_handling,
    _process_batch_async,
    llm_response_batch,
    run_batch_agent_method,
    run_batch_function,
    run_batch_task_gen,
    run_batch_tasks,
)
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import DoneTool
from langroid.language_models.mock_lm import MockLMConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.utils.configuration import Settings, set_global, settings
from langroid.utils.constants import DONE
from langroid.vector_store.base import VectorStoreConfig


def process_int(x: str) -> str:
    if int(x) == 0:
        return str(int(x) + 1)
    else:
        time.sleep(2)
        return str(int(x) + 1)


class _TestChatAgentConfig(ChatAgentConfig):
    vecdb: VectorStoreConfig = None
    llm = MockLMConfig(response_fn=lambda x: process_int(x))


@pytest.mark.parametrize("batch_size", [1, 2, 3, None])
@pytest.mark.parametrize("sequential", [True, False])
@pytest.mark.parametrize("stop_on_first", [True, False])
@pytest.mark.parametrize("return_type", [True, False])
def test_task_batch(
    test_settings: Settings,
    sequential: bool,
    batch_size: Optional[int],
    stop_on_first: bool,
    return_type: bool,
):
    set_global(test_settings)
    cfg = _TestChatAgentConfig()

    agent = ChatAgent(cfg)
    task = Task(
        agent,
        name="Test",
        interactive=False,
        done_if_response=[Entity.LLM],
        done_if_no_response=[Entity.LLM],
    )

    if return_type:
        # specialized to return str
        task = task[str]

    # run clones of this task on these inputs
    N = 3
    questions = list(range(N))
    expected_answers = [(i + 1) for i in range(N)]

    orig_quiet = settings.quiet
    # batch run
    answers = run_batch_tasks(
        task,
        questions,
        input_map=lambda x: str(x),  # what to feed to each task
        output_map=lambda x: x,  # how to process the result of each task
        sequential=sequential,
        batch_size=batch_size,
        stop_on_first_result=stop_on_first,
    )
    assert settings.quiet == orig_quiet

    if stop_on_first:
        # only the task with input 0 succeeds since it's fastest
        non_null_answer = [a for a in answers if a is not None][0]
        assert non_null_answer is not None
        answer = non_null_answer if return_type else non_null_answer.content
        assert answer == str(expected_answers[0])
    else:
        for e in expected_answers:
            if return_type:
                assert any(str(e) in a.lower() for a in answers)
            else:
                assert any(str(e) in a.content.lower() for a in answers)


@pytest.mark.parametrize("batch_size", [1, 2, 3, None])
@pytest.mark.parametrize("sequential", [True, False])
@pytest.mark.parametrize("use_done_tool", [True, False])
def test_task_batch_turns(
    test_settings: Settings,
    sequential: bool,
    batch_size: Optional[int],
    use_done_tool: bool,
):
    """Test if `turns`, `max_cost`, `max_tokens` params work as expected.
    The latter two are not really tested (since we need to turn off caching etc)
    we just make sure they don't break anything.
    """
    set_global(test_settings)
    cfg = _TestChatAgentConfig()

    class _TestChatAgent(ChatAgent):
        def handle_message_fallback(
            self, msg: str | ChatDocument
        ) -> str | DoneTool | None:

            if isinstance(msg, ChatDocument) and msg.metadata.sender == Entity.LLM:
                return (
                    DoneTool(content=str(msg.content))
                    if use_done_tool
                    else DONE + " " + str(msg.content)
                )

    agent = _TestChatAgent(cfg)
    agent.llm.reset_usage_cost()
    task = Task(
        agent,
        name="Test",
        interactive=False,
    )

    # run clones of this task on these inputs
    N = 3
    questions = list(range(N))
    expected_answers = [(i + 1) for i in range(N)]

    # batch run
    answers = run_batch_tasks(
        task,
        questions,
        input_map=lambda x: str(x),  # what to feed to each task
        output_map=lambda x: x,  # how to process the result of each task
        sequential=sequential,
        batch_size=batch_size,
        turns=2,
        max_cost=0.005,
        max_tokens=100,
    )

    # expected_answers are simple numbers, but
    # actual answers may be more wordy like "sum of 1 and 3 is 4",
    # so we just check if the expected answer is contained in the actual answer
    for e in expected_answers:
        assert any(str(e) in a.content.lower() for a in answers)


@pytest.mark.parametrize("batch_size", [1, 2, 3, None])
@pytest.mark.parametrize("sequential", [True, False])
@pytest.mark.parametrize("stop_on_first", [True, False])
def test_agent_llm_response_batch(
    test_settings: Settings,
    sequential: bool,
    stop_on_first: bool,
    batch_size: Optional[int],
):
    set_global(test_settings)
    cfg = _TestChatAgentConfig()

    agent = ChatAgent(cfg)

    # get llm_response_async result on clones of this agent, on these inputs:
    N = 3
    questions = list(range(N))
    expected_answers = [(i + 1) for i in range(N)]

    # batch run
    answers = run_batch_agent_method(
        agent,
        agent.llm_response_async,
        questions,
        input_map=lambda x: str(x),  # what to feed to each task
        output_map=lambda x: x,  # how to process the result of each task
        sequential=sequential,
        stop_on_first_result=stop_on_first,
        batch_size=batch_size,
    )

    if stop_on_first:
        # only the task with input 0 succeeds since it's fastest
        non_null_answer = [a for a in answers if a is not None][0]
        assert non_null_answer is not None
        assert non_null_answer.content == str(expected_answers[0])
    else:
        for e in expected_answers:
            assert any(str(e) in a.content.lower() for a in answers)

    # Test the helper function as well
    answers = llm_response_batch(
        agent,
        questions,
        input_map=lambda x: str(x),  # what to feed to each task
        output_map=lambda x: x,  # how to process the result of each task
        sequential=sequential,
        stop_on_first_result=stop_on_first,
    )

    if stop_on_first:
        # only the task with input 0 succeeds since it's fastest
        non_null_answer = [a for a in answers if a is not None][0]
        assert non_null_answer is not None
        assert non_null_answer.content == str(expected_answers[0])
    else:
        for e in expected_answers:
            assert any(str(e) in a.content.lower() for a in answers)


@pytest.mark.parametrize("stop_on_first", [True, False])
@pytest.mark.parametrize("batch_size", [1, 2, 3, None])
@pytest.mark.parametrize("sequential", [True, False])
def test_task_gen_batch(
    test_settings: Settings,
    sequential: bool,
    stop_on_first: bool,
    batch_size: Optional[int],
):
    set_global(test_settings)

    def task_gen(i: int) -> Task:
        async def response_fn_async(x):
            match i:
                case 0:
                    await asyncio.sleep(0.1)
                    return str(x)
                case 1:
                    return "hmm"
                case _:
                    await asyncio.sleep(0.2)
                    return str(2 * int(x))

        class _TestChatAgentConfig(ChatAgentConfig):
            vecdb: VectorStoreConfig = None
            llm = MockLMConfig(response_fn_async=response_fn_async)

        cfg = _TestChatAgentConfig()
        return Task(
            ChatAgent(cfg),
            name=f"Test-{i}",
            single_round=True,
        )

    # run the generated tasks on these inputs
    questions = list(range(3))
    expected_answers = ["0", "hmm", "4"]

    # batch run
    answers = run_batch_task_gen(
        task_gen,
        questions,
        sequential=sequential,
        stop_on_first_result=stop_on_first,
        batch_size=batch_size,
    )

    if stop_on_first:
        non_null_answer = [a for a in answers if a is not None][0].content

        # Unless the first task is scheduled alone,
        # the second task should always finish first
        if batch_size == 1:
            assert "0" in non_null_answer
        else:
            assert "hmm" in non_null_answer
    else:
        for answer, expected in zip(answers, expected_answers):
            assert answer is not None
            assert expected in answer.content.lower()


@pytest.mark.parametrize("batch_size", [None, 1, 2, 3])
@pytest.mark.parametrize(
    "handle_exceptions", [ExceptionHandling.RETURN_EXCEPTION, True, False]
)
@pytest.mark.parametrize("sequential", [False, True])
@pytest.mark.parametrize("fn_api", [False, True])
@pytest.mark.parametrize("use_done_tool", [True, False])
def test_task_gen_batch_exceptions(
    test_settings: Settings,
    fn_api: bool,
    use_done_tool: bool,
    sequential: bool,
    handle_exceptions: bool | ExceptionHandling,
    batch_size: Optional[int],
):
    set_global(test_settings)
    kill_called = []  # Track Task.kill() calls

    class ComputeTool(ToolMessage):
        request: str = "compute"
        purpose: str = "To compute an unknown function of the input"
        input: int

    system_message = """
    You will make a call with the `compute` tool/function with
    `input` the value I provide. 
    """

    class MockTask(Task):
        """Mock Task that raises exceptions for testing"""

        def kill(self):
            kill_called.append(self.name)
            super().kill()

    def task_gen(i: int) -> Task:
        cfg = ChatAgentConfig(
            vecdb=None,
            llm=OpenAIGPTConfig(async_stream_quiet=False),
            use_functions_api=fn_api,
            use_tools=not fn_api,
            use_tools_api=True,
        )
        agent = ChatAgent(cfg)
        agent.enable_message(ComputeTool)
        if use_done_tool:
            agent.enable_message(DoneTool)
        task = MockTask(
            agent,
            name=f"Test-{i}",
            system_message=system_message,
            interactive=False,
        )

        def handle(m: ComputeTool) -> str | DoneTool:
            if i == 1:
                raise RuntimeError("disaster")
            elif i == 2:
                raise asyncio.CancelledError()
            return DoneTool(content="success") if use_done_tool else f"{DONE} success"

        setattr(agent, "compute", handle)
        return task

    questions = list(range(3))

    try:
        answers = run_batch_task_gen(
            task_gen,
            questions,
            sequential=sequential,
            handle_exceptions=handle_exceptions,
            batch_size=batch_size,
        )
        error_encountered = False

        # Test successful case
        assert answers[0] is not None
        assert "success" in answers[0].content.lower()

        # the task that raised CancelledError
        assert kill_called == ["Test-2"]

        # Test RuntimeError case
        if (
            _convert_exception_handling(handle_exceptions)
            == ExceptionHandling.RETURN_EXCEPTION
        ):
            assert isinstance(answers[1], RuntimeError)
            assert "disaster" in str(answers[1])

            assert isinstance(answers[2], asyncio.CancelledError)
        elif (
            _convert_exception_handling(handle_exceptions)
            == ExceptionHandling.RETURN_NONE
        ):
            assert answers[1] is None
            assert answers[2] is None
        else:
            assert False, "Invalid handle_exceptions value"
    except RuntimeError as e:
        error_encountered = True
        assert "disaster" in str(e)
    except asyncio.CancelledError:
        error_encountered = True

    assert error_encountered == (
        _convert_exception_handling(handle_exceptions) == ExceptionHandling.RAISE
    )


@pytest.mark.parametrize(
    "func, input_list, batch_size, expected",
    [
        (lambda x: x * 2, [1, 2, 3], None, [2, 4, 6]),
        (lambda x: x + 1, [1, 2, 3, 4], 2, [2, 3, 4, 5]),
        (lambda x: x * x, [], None, []),
        (lambda x: x * 3, [1, 2], 1, [3, 6]),
    ],
)
def test_run_batch_function(func, input_list, batch_size, expected):
    result = run_batch_function(func, input_list, batch_size=batch_size)
    assert result == expected


def test_batch_size_processing(test_settings: Settings):
    """Test that batch_size parameter correctly processes items in batches"""
    set_global(test_settings)
    cfg = _TestChatAgentConfig()
    agent = ChatAgent(cfg)

    N = 5
    questions = list(range(N))
    batch_size = 2

    answers = run_batch_agent_method(
        agent,
        agent.llm_response_async,
        questions,
        input_map=lambda x: str(x),
        output_map=lambda x: x,
        sequential=True,
        batch_size=batch_size,
    )

    # Verify we got all expected answers
    assert len(answers) == N
    for i, answer in enumerate(answers):
        assert answer is not None
        assert str(i + 1) in answer.content


@pytest.mark.parametrize("sequential", [True, False])
@pytest.mark.parametrize(
    "handle_exceptions", [True, False, ExceptionHandling.RETURN_EXCEPTION]
)
def test_process_batch_async_basic(sequential, handle_exceptions):
    """Test the core async batch processing function"""

    async def mock_task(input: str, i: int) -> str:
        if i == 1:  # Make second task fail
            raise ValueError("Task failed")
        await asyncio.sleep(0.1)
        return f"Processed {input}"

    inputs = ["a", "b", "c"]
    coroutine = _process_batch_async(
        inputs,
        mock_task,
        sequential=sequential,
        handle_exceptions=handle_exceptions,
        output_map=lambda x: x,
    )
    # If handle_exceptions is True, the function should return
    # the results of the successful tasks
    orig_quiet = settings.quiet
    if _convert_exception_handling(handle_exceptions) == ExceptionHandling.RETURN_NONE:
        results = asyncio.run(coroutine)
        assert results[1] is None
        assert "Processed" in results[0]
        assert "Processed" in results[2]
        assert settings.quiet == orig_quiet
    # If handle_exceptions is False, the function should raise an error
    elif _convert_exception_handling(handle_exceptions) == ExceptionHandling.RAISE:
        with pytest.raises(ValueError):
            results = asyncio.run(coroutine)
    # If handle_exceptions is RETURN_EXCEPTION, the function should return
    # the results of the successful tasks and the exception of the failed task
    else:
        assert (
            _convert_exception_handling(handle_exceptions)
            == ExceptionHandling.RETURN_EXCEPTION
        )
        results = asyncio.run(coroutine)
        assert settings.quiet == orig_quiet
        assert "Processed" in results[0]
        assert "Processed" in results[2]
        assert isinstance(results[1], ValueError)


@pytest.mark.parametrize("stop_on_first_result", [True, False])
def test_process_batch_async_stop_on_first(stop_on_first_result):
    """Test stop_on_first_result behavior"""

    async def mock_task(input: str, i: int) -> str:
        await asyncio.sleep(0.1 * i)  # Make later tasks slower
        return f"Processed {input}"

    inputs = ["a", "b", "c"]
    results = asyncio.run(
        _process_batch_async(
            inputs,
            mock_task,
            stop_on_first_result=stop_on_first_result,
            sequential=False,
            handle_exceptions=ExceptionHandling.RAISE,
            output_map=lambda x: x,
        )
    )

    # When stop_on_first_result is True, only the first task should complete
    if stop_on_first_result:
        assert any(r is not None for r in results)
        assert any(r is None for r in results)
        # First task should complete first due to sleep timing
        assert results[0] is not None
        assert "Processed a" in results[0]
    # When stop_on_first_result is False, all tasks should complete
    else:
        assert all(r is not None for r in results)
        assert all("Processed" in r for r in results)
</file>

<file path="tests/main/test_doc_chat_relevance.py">
import warnings
from types import SimpleNamespace

import pytest

from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import DocMetaData, Document
from langroid.parsing.parser import ParsingConfig, Splitter
from langroid.utils.configuration import Settings, set_global
from langroid.utils.system import rmdir
from langroid.vector_store.base import VectorStore, VectorStoreConfig
from langroid.vector_store.chromadb import ChromaDB, ChromaDBConfig
from langroid.vector_store.lancedb import LanceDB, LanceDBConfig
from langroid.vector_store.qdrantdb import QdrantDB, QdrantDBConfig

embed_cfg = OpenAIEmbeddingsConfig(
    model_type="openai",
)


class MyDocMetaData(DocMetaData):
    id: str


class MyDoc(Document):
    content: str
    metadata: MyDocMetaData


@pytest.fixture(scope="function")
def vecdb(request) -> VectorStore:
    if request.param == "qdrant_local":
        qd_dir = ":memory:"
        qd_cfg = QdrantDBConfig(
            cloud=False,
            collection_name="test-" + embed_cfg.model_type,
            storage_path=qd_dir,
            embedding=embed_cfg,
        )
        qd = QdrantDB(qd_cfg)
        yield qd
        return

    if request.param == "chroma":
        cd_dir = ".chroma/" + embed_cfg.model_type
        rmdir(cd_dir)
        cd_cfg = ChromaDBConfig(
            collection_name="test-" + embed_cfg.model_type,
            storage_path=cd_dir,
            embedding=embed_cfg,
        )
        cd = ChromaDB(cd_cfg)
        yield cd
        rmdir(cd_dir)
        return

    if request.param == "lancedb":
        ldb_dir = ".lancedb/data/" + embed_cfg.model_type
        rmdir(ldb_dir)
        ldb_cfg = LanceDBConfig(
            cloud=False,
            collection_name="test-" + embed_cfg.model_type,
            storage_path=ldb_dir,
            embedding=embed_cfg,
            document_class=MyDoc,  # IMPORTANT, to ensure table has full schema!
        )
        ldb = LanceDB(ldb_cfg)
        yield ldb
        rmdir(ldb_dir)
        return


set_global(Settings(cache=True))  # allow cacheing


warnings.filterwarnings(
    "ignore",
    message="Token indices sequence length.*",
    # category=UserWarning,
    module="transformers",
)


# setup config for retrieval test, with n_neighbor_chunks=2
# and parser.n_neighbor_ids = 5
class _MyDocChatAgentConfig(DocChatAgentConfig):
    cross_encoder_reranking_model = ""
    n_query_rephrases = 0
    n_neighbor_chunks = 2
    n_similar_chunks = 2
    n_relevant_chunks = 2
    debug: bool = False
    stream: bool = True  # allow streaming where needed
    conversation_mode = True
    vecdb: VectorStoreConfig = QdrantDBConfig(
        collection_name="test-data",
        replace_collection=True,
        storage_path=":memory:",
        embedding=OpenAIEmbeddingsConfig(
            model_name="text-embedding-3-small",
            dims=1536,
        ),
    )

    llm: OpenAIGPTConfig = OpenAIGPTConfig(
        stream=True,
        cache_config=RedisCacheConfig(fake=False),
        use_chat_for_completion=True,
    )

    parsing: ParsingConfig = ParsingConfig(
        splitter=Splitter.SIMPLE,
        n_neighbor_ids=5,
    )


@pytest.mark.parametrize("vecdb", ["chroma", "qdrant_local", "lancedb"], indirect=True)
@pytest.mark.parametrize(
    "splitter", [Splitter.SIMPLE, Splitter.PARA_SENTENCE, Splitter.TOKENS]
)
@pytest.mark.parametrize("conv_mode", [True, False])
def test_doc_chat_retrieval(
    test_settings: Settings, vecdb, splitter: Splitter, conv_mode: bool
):
    """
    Test window retrieval of relevant doc-chunks.
    Check that we are retrieving 2 neighbors around each match.
    """
    agent = DocChatAgent(
        _MyDocChatAgentConfig(
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                splitter=splitter,
            ),
        )
    )
    agent.config.conversation_mode = conv_mode
    agent.vecdb = vecdb

    set_global(test_settings)

    phrases = SimpleNamespace(
        CATS="Cats are quiet and clean.",
        DOGS="Dogs are loud and messy.",
        PIGS="Pigs cannot fly.",
        GIRAFFES="Giraffes are tall and vegetarian.",
        BATS="Bats are blind.",
        COWS="Cows are peaceful.",
        GIRAFFES2="Giraffes are really strange animals.",
        HYENAS="Hyenas are dangerous and fast.",
        ZEBRAS="Zebras are bizarre with stripes.",
    )
    text = "\n\n".join(vars(phrases).values())
    agent.clear()
    agent.ingest_docs([Document(content=text, metadata={"source": "animals"})])
    results = agent.get_relevant_chunks("What are giraffes like?")

    # All phrases except the CATS phrase should be in the results
    # since they are all within 2 chunks of a giraffe phrase.
    # (The CAT phrase is 3 chunks away, so it should not be in the results.)
    all_but_cats = [p for p in vars(phrases).values() if "Cats" not in p]
    # check that each phrases occurs in exactly one result
    assert (
        sum(p in r.content for p in all_but_cats for r in results)
        == len(vars(phrases)) - 1
    )


@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma", "lancedb"], indirect=True)
def test_doc_chat_rerank_diversity(test_settings: Settings, vecdb):
    """
    Test that reranking by diversity works.
    """

    cfg = _MyDocChatAgentConfig(
        n_neighbor_chunks=0,
    )
    cfg.n_similar_chunks = 8
    cfg.n_relevant_chunks = 8
    agent = DocChatAgent(cfg)
    agent.vecdb = vecdb

    set_global(test_settings)

    phrases = SimpleNamespace(
        g1="Giraffes are tall.",
        g2="Giraffes are vegetarian.",
        g3="Giraffes are strange.",
        g4="Giraffes are fast.",
        g5="Giraffes are known to be tall.",
        g6="Giraffes are considered strange.",
        g7="Giraffes move fast.",
        g8="Giraffes are definitely vegetarian.",
    )
    docs = [
        Document(content=p, metadata=DocMetaData(source="user"))
        for p in vars(phrases).values()
    ]
    reranked = agent.rerank_with_diversity(docs)

    # assert that each phrase tall, vegetarian, strange, fast
    # occurs exactly once in top 4 phrases
    for p in ["tall", "vegetarian", "strange", "fast"]:
        assert sum(p in r.content for r in reranked[:4]) == 1


@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma", "lancedb"], indirect=True)
def test_doc_chat_rerank_periphery(test_settings: Settings, vecdb):
    """
    Test that reranking to periphery works.
    """

    cfg = _MyDocChatAgentConfig(
        n_neighbor_chunks=0,
    )
    cfg.n_similar_chunks = 8
    cfg.n_relevant_chunks = 8
    agent = DocChatAgent(cfg)
    agent.vecdb = vecdb

    set_global(test_settings)

    docs = [
        Document(content=str(i), metadata=DocMetaData(source="user")) for i in range(10)
    ]
    reranked = agent.rerank_to_periphery(docs)
    numbers = [int(d.content) for d in reranked]
    assert numbers == [0, 2, 4, 6, 8, 9, 7, 5, 3, 1]
</file>

<file path="tests/main/test_done_sequence_parser.py">
"""Tests for done sequence DSL parser."""

import pytest

from langroid.agent.done_sequence_parser import (
    parse_done_sequence,
    parse_done_sequences,
)
from langroid.agent.task import AgentEvent, DoneSequence, EventType


def test_parse_simple_patterns():
    """Test parsing of simple single-letter patterns."""
    # Tool then Agent
    seq = parse_done_sequence("T, A")
    assert len(seq.events) == 2
    assert seq.events[0].event_type == EventType.TOOL
    assert seq.events[1].event_type == EventType.AGENT_RESPONSE

    # LLM, Tool, Agent, LLM
    seq = parse_done_sequence("L, T, A, L")
    assert len(seq.events) == 4
    assert seq.events[0].event_type == EventType.LLM_RESPONSE
    assert seq.events[1].event_type == EventType.TOOL
    assert seq.events[2].event_type == EventType.AGENT_RESPONSE
    assert seq.events[3].event_type == EventType.LLM_RESPONSE

    # Without spaces
    seq = parse_done_sequence("T,A")
    assert len(seq.events) == 2
    assert seq.events[0].event_type == EventType.TOOL
    assert seq.events[1].event_type == EventType.AGENT_RESPONSE


def test_parse_specific_tool():
    """Test parsing specific tool patterns."""
    seq = parse_done_sequence("T[calculator], A")
    assert len(seq.events) == 2
    assert seq.events[0].event_type == EventType.SPECIFIC_TOOL
    assert seq.events[0].tool_name == "calculator"
    assert seq.events[1].event_type == EventType.AGENT_RESPONSE

    # Tool with hyphen
    seq = parse_done_sequence("T[my-tool], A")
    assert seq.events[0].tool_name == "my-tool"

    # Tool with dots
    seq = parse_done_sequence("T[com.example.tool], A")
    assert seq.events[0].tool_name == "com.example.tool"


def test_parse_content_match():
    """Test parsing content match patterns."""
    seq = parse_done_sequence("C[quit|exit]")
    assert len(seq.events) == 1
    assert seq.events[0].event_type == EventType.CONTENT_MATCH
    assert seq.events[0].content_pattern == "quit|exit"

    # Complex regex
    seq = parse_done_sequence("L, C[done.*complete]")
    assert len(seq.events) == 2
    assert seq.events[0].event_type == EventType.LLM_RESPONSE
    assert seq.events[1].event_type == EventType.CONTENT_MATCH
    assert seq.events[1].content_pattern == "done.*complete"


def test_parse_all_event_types():
    """Test all supported event types."""
    seq = parse_done_sequence("T, A, L, U, N")
    assert len(seq.events) == 5
    assert seq.events[0].event_type == EventType.TOOL
    assert seq.events[1].event_type == EventType.AGENT_RESPONSE
    assert seq.events[2].event_type == EventType.LLM_RESPONSE
    assert seq.events[3].event_type == EventType.USER_RESPONSE
    assert seq.events[4].event_type == EventType.NO_RESPONSE


def test_parse_mixed_patterns():
    """Test complex mixed patterns."""
    seq = parse_done_sequence("T[search], A, T[calculator], A, C[complete]")
    assert len(seq.events) == 5
    assert seq.events[0].event_type == EventType.SPECIFIC_TOOL
    assert seq.events[0].tool_name == "search"
    assert seq.events[1].event_type == EventType.AGENT_RESPONSE
    assert seq.events[2].event_type == EventType.SPECIFIC_TOOL
    assert seq.events[2].tool_name == "calculator"
    assert seq.events[3].event_type == EventType.AGENT_RESPONSE
    assert seq.events[4].event_type == EventType.CONTENT_MATCH
    assert seq.events[4].content_pattern == "complete"


def test_parse_existing_done_sequence():
    """Test that existing DoneSequence objects are returned unchanged."""
    original = DoneSequence(
        name="test",
        events=[
            AgentEvent(event_type=EventType.TOOL),
            AgentEvent(event_type=EventType.AGENT_RESPONSE),
        ],
    )

    result = parse_done_sequence(original)
    assert result is original  # Should be the same object


def test_parse_done_sequences_list():
    """Test parsing a mixed list of strings and DoneSequence objects."""
    sequences = parse_done_sequences(
        [
            "T, A",
            DoneSequence(
                name="existing", events=[AgentEvent(event_type=EventType.LLM_RESPONSE)]
            ),
            "T[calc], A",
            "C[quit]",
        ]
    )

    assert len(sequences) == 4
    assert all(isinstance(seq, DoneSequence) for seq in sequences)

    # Check first sequence (parsed from string)
    assert len(sequences[0].events) == 2
    assert sequences[0].events[0].event_type == EventType.TOOL

    # Check second sequence (existing object)
    assert sequences[1].name == "existing"
    assert len(sequences[1].events) == 1

    # Check third sequence (specific tool)
    assert sequences[2].events[0].event_type == EventType.SPECIFIC_TOOL
    assert sequences[2].events[0].tool_name == "calc"

    # Check fourth sequence (content match)
    assert sequences[3].events[0].event_type == EventType.CONTENT_MATCH
    assert sequences[3].events[0].content_pattern == "quit"


def test_parse_word_tokens():
    """Test parsing full word tokens like 'TOOL', 'AGENT'."""
    seq = parse_done_sequence("TOOL, AGENT")
    assert len(seq.events) == 2
    assert seq.events[0].event_type == EventType.TOOL
    assert seq.events[1].event_type == EventType.AGENT_RESPONSE

    # Mixed case
    seq = parse_done_sequence("tool, Agent, LLM")
    assert len(seq.events) == 3
    assert seq.events[0].event_type == EventType.TOOL
    assert seq.events[1].event_type == EventType.AGENT_RESPONSE
    assert seq.events[2].event_type == EventType.LLM_RESPONSE


def test_parse_invalid_patterns():
    """Test error handling for invalid patterns."""
    with pytest.raises(ValueError, match="Invalid event token"):
        parse_done_sequence("T, X")  # X is not valid

    with pytest.raises(ValueError, match="Invalid event code with brackets"):
        parse_done_sequence("X[something]")  # X[] is not valid

    with pytest.raises(ValueError, match="No valid events found"):
        parse_done_sequence("")  # Empty pattern

    with pytest.raises(ValueError, match="No valid events found"):
        parse_done_sequence(",,,")  # Only commas

    with pytest.raises(ValueError, match="Expected string or DoneSequence"):
        parse_done_sequence(123)  # Wrong type


def test_parse_edge_cases():
    """Test edge cases in parsing."""
    # Extra spaces
    seq = parse_done_sequence("  T  ,  A  ")
    assert len(seq.events) == 2

    # Trailing comma
    seq = parse_done_sequence("T, A,")
    assert len(seq.events) == 2

    # Leading comma
    seq = parse_done_sequence(",T, A")
    assert len(seq.events) == 2
</file>

<file path="tests/main/test_llm_async.py">
import asyncio
import os

import pytest

import langroid.language_models as lm
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.base import LLMMessage, Role
from langroid.language_models.openai_gpt import (
    OpenAICompletionModel,
    OpenAIGPT,
    OpenAIGPTConfig,
)
from langroid.parsing.file_attachment import FileAttachment
from langroid.utils.configuration import Settings, set_global, settings

# allow streaming globally, but can be turned off by individual models
set_global(Settings(stream=True))


@pytest.mark.asyncio
@pytest.mark.parametrize(
    "streaming, country, capital",
    [(True, "France", "Paris"), (False, "India", "Delhi")],
)
@pytest.mark.parametrize("stream_quiet", [True, False])
async def test_openai_gpt_async(
    test_settings: Settings,
    streaming,
    country,
    capital,
    stream_quiet,
):
    set_global(test_settings)
    cfg = OpenAIGPTConfig(
        stream=streaming,  # use streaming output if enabled globally
        type="openai",
        max_output_tokens=100,
        min_output_tokens=10,
        completion_model=OpenAICompletionModel.DAVINCI,
        cache_config=RedisCacheConfig(fake=False),
        async_stream_quiet=stream_quiet,
    )

    mdl = OpenAIGPT(config=cfg)
    question = "What is the capital of " + country + "?"

    set_global(Settings(cache=False))
    # chat mode via `generate`,
    # i.e. use same call as for completion, but the setting below
    # actually calls `achat` under the hood
    cfg.use_chat_for_completion = True
    # check that "agenerate" works
    response = await mdl.agenerate(prompt=question, max_tokens=50)
    assert capital in response.message
    assert not response.cached

    # actual chat mode
    messages = [
        LLMMessage(
            role=Role.SYSTEM,
            content="You are a serious, helpful assistant. Be very concise, not funny",
        ),
        LLMMessage(role=Role.USER, content=question),
    ]
    response = await mdl.achat(messages=messages, max_tokens=50)
    assert capital in response.message
    assert not response.cached

    set_global(Settings(cache=True))
    # should be from cache this time
    response = await mdl.achat(messages=messages, max_tokens=50)
    assert capital in response.message
    assert response.cached

    # pass intentional bad msg to test error handling
    if not test_settings.chat_model.startswith("litellm-proxy/"):
        messages = [
            LLMMessage(
                role=Role.FUNCTION,
                content="Hello!",
            ),
        ]

        with pytest.raises(Exception):
            await mdl.achat(messages=messages, max_tokens=50)


@pytest.mark.asyncio
async def test_llm_async_concurrent(test_settings: Settings):
    set_global(test_settings)
    cfg = OpenAIGPTConfig(
        stream=False,  # use streaming output if enabled globally
        type="openai",
        max_output_tokens=100,
        min_output_tokens=10,
        completion_model=OpenAICompletionModel.DAVINCI,
        cache_config=RedisCacheConfig(fake=False),
    )

    mdl = OpenAIGPT(config=cfg)
    N = 5
    questions = ["1+" + str(i) for i in range(N)]
    expected_answers = [str(i + 1) for i in range(N)]
    answers = await asyncio.gather(
        *(mdl.agenerate(prompt=question, max_tokens=50) for question in questions)
    )

    assert len(answers) == len(questions)
    for e in expected_answers:
        assert any(e in a.message for a in answers)

    answers = await asyncio.gather(
        *(mdl.achat(question, max_tokens=50) for question in questions)
    )
    assert len(answers) == len(questions)
    for e in expected_answers:
        assert any(e in a.message for a in answers)


@pytest.mark.asyncio
@pytest.mark.xfail(
    reason="LangDB may fail due to unknown flakiness!",
    run=True,
    strict=False,
)
@pytest.mark.parametrize(
    "model",
    [
        "langdb/gpt-4o-mini",
        "langdb/openai/gpt-4o-mini",
        "langdb/anthropic/claude-3-haiku-20240307",
        "langdb/claude-3-haiku-20240307",
        "langdb/gemini/gemini-2.0-flash-lite",
        "langdb/gemini-2.0-flash-lite",
    ],
)
async def test_llm_langdb(model: str):
    """Test that LLM access via LangDB works."""

    llm_config_langdb = lm.OpenAIGPTConfig(
        chat_model=model,
    )
    llm = lm.OpenAIGPT(config=llm_config_langdb)
    result = await llm.achat("what is 3+4?")
    assert "7" in result.message
    if result.cached:
        assert result.usage.total_tokens == 0
    else:
        assert result.usage.total_tokens > 0


@pytest.mark.asyncio
@pytest.mark.parametrize(
    "model",
    [
        "openrouter/anthropic/claude-3.5-haiku-20241022:beta",
        "openrouter/mistralai/mistral-small-24b-instruct-2501:free",
        "openrouter/google/gemini-2.0-flash-lite-001",
    ],
)
async def test_llm_openrouter(model: str):
    # override models set via pytest ... --m <model>
    settings.chat_model = model
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model,
    )
    llm = lm.OpenAIGPT(config=llm_config)
    result = await llm.achat("what is 3+4?")
    assert "7" in result.message
    if result.cached:
        assert result.usage.total_tokens == 0
    else:
        assert result.usage.total_tokens > 0


@pytest.mark.asyncio
async def test_llm_pdf_attachment_async():
    """Test sending a PDF file attachment to the LLM asynchronously."""
    from pathlib import Path

    # Path to the test PDF file
    pdf_path = Path("tests/main/data/dummy.pdf")

    # Create a FileAttachment from the PDF file
    attachment = FileAttachment.from_path(pdf_path)

    # Verify the attachment properties
    assert attachment.mime_type == "application/pdf"
    assert attachment.filename == "dummy.pdf"

    # Create messages with the attachment
    messages = [
        LLMMessage(role=Role.SYSTEM, content="You are a helpful assistant."),
        LLMMessage(
            role=Role.USER, content="What's title of the paper?", files=[attachment]
        ),
    ]

    # Set up the LLM with a suitable model that supports PDFs
    llm = OpenAIGPT(OpenAIGPTConfig(max_output_tokens=1000))

    # Get response from the LLM asynchronously
    response = await llm.achat(messages=messages)

    assert response is not None
    assert response.message is not None
    assert "Supply Chain" in response.message

    # follow-up question
    messages += [
        LLMMessage(role=Role.ASSISTANT, content="Supply Chain"),
        LLMMessage(role=Role.USER, content="Who is the first author?"),
    ]
    response = await llm.achat(messages=messages)
    assert response is not None
    assert response.message is not None
    assert "Takio" in response.message


@pytest.mark.xfail(
    reason="Multi-file attachment may not work yet.",
    run=True,
    strict=False,
)
@pytest.mark.asyncio
async def test_llm_multi_pdf_attachment_async():
    from pathlib import Path

    # Path to the test PDF file
    pdf_path = Path("tests/main/data/dummy.pdf")

    # Create a FileAttachment from the PDF file
    attachment = FileAttachment.from_path(pdf_path)

    # multiple attachments
    pdf_path2 = Path("tests/main/data/sample-test.pdf")

    # Create a FileAttachment from the PDF file
    attachment2 = FileAttachment.from_path(pdf_path2)

    messages = [
        LLMMessage(role=Role.SYSTEM, content="You are a helpful assistant."),
        LLMMessage(
            role=Role.USER,
            content="How many pages are in the Supply Chain paper?",
            files=[attachment2, attachment],
        ),
    ]
    llm = OpenAIGPT(OpenAIGPTConfig(max_output_tokens=1000))
    response = await llm.achat(messages=messages)
    assert any(x in response.message for x in ["4", "four"])

    # follow-up question
    messages += [
        LLMMessage(role=Role.ASSISTANT, content="4 pages"),
        LLMMessage(
            role=Role.USER,
            content="""
            How many columns are in the table in the 
            document that is NOT about Supply Chain?
            """,
        ),
    ]
    response = await llm.achat(messages=messages)
    try:
        assert any(x in response.message for x in ["3", "three"])
    except AssertionError:
        pytest.xfail("Multi-files don't work yet?", strict=False)


@pytest.mark.asyncio
async def test_litellm_model_key_async():
    """
    Test that passing in explicit api_key works with `litellm/*` models
    """
    model = "litellm/anthropic/claude-3-5-haiku-latest"
    # disable any chat model passed via --m arg to pytest cmd
    settings.chat_model = model
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model, api_key=os.getenv("ANTHROPIC_API_KEY", "")
    )

    # Create the LLM instance
    llm = lm.OpenAIGPT(config=llm_config)
    print(f"\nTesting with model: {llm.chat_model_orig} => {llm.config.chat_model}")
    response = await llm.achat("What is 3+4?")
    assert "7" in response.message


@pytest.mark.asyncio
@pytest.mark.parametrize(
    "model",
    [
        "portkey/openai/gpt-4o-mini",
        "portkey/anthropic/claude-3-5-haiku-latest",
        "portkey/google/gemini-2.0-flash-lite",
    ],
)
async def test_llm_portkey_async(model: str):
    """Test that LLM access via Portkey works asynchronously."""
    # override any chat model passed via --m arg to pytest cmd
    settings.chat_model = model

    # Skip if PORTKEY_API_KEY is not set
    if not os.getenv("PORTKEY_API_KEY"):
        pytest.skip("PORTKEY_API_KEY not set")

    # Extract provider from model string
    provider = model.split("/")[1] if "/" in model else ""
    provider_key_var = f"{provider.upper()}_API_KEY"

    # Skip if provider API key is not set
    if not os.getenv(provider_key_var):
        pytest.skip(f"{provider_key_var} not set")

    llm_config_portkey = lm.OpenAIGPTConfig(
        chat_model=model,
    )
    llm = lm.OpenAIGPT(config=llm_config_portkey)
    result = await llm.achat("what is 3+4 equal to?")
    assert "7" in result.message
    if result.cached:
        assert result.usage.total_tokens == 0
    else:
        assert result.usage.total_tokens > 0


@pytest.mark.asyncio
async def test_portkey_params_async():
    """Test that PortkeyParams are correctly configured in async context."""
    from langroid.language_models.provider_params import PortkeyParams

    # Test with explicit parameters
    params = PortkeyParams(
        api_key="test-key",
        provider="anthropic",
        virtual_key="vk-123",
        trace_id="trace-456",
        metadata={"user": "test"},
        retry={"max_retries": 3},
        cache={"enabled": True},
        cache_force_refresh=True,
        user="user-123",
        organization="org-456",
        custom_headers={"x-custom": "value"},
    )

    headers = params.get_headers()

    assert headers["x-portkey-api-key"] == "test-key"
    assert headers["x-portkey-provider"] == "anthropic"
    assert headers["x-portkey-virtual-key"] == "vk-123"
    assert headers["x-portkey-trace-id"] == "trace-456"
    assert headers["x-portkey-metadata"] == '{"user": "test"}'
    assert headers["x-portkey-retry"] == '{"max_retries": 3}'
    assert headers["x-portkey-cache"] == '{"enabled": true}'
    assert headers["x-portkey-cache-force-refresh"] == "true"
    assert headers["x-portkey-user"] == "user-123"
    assert headers["x-portkey-organization"] == "org-456"
    assert headers["x-custom"] == "value"

    # Test model string parsing
    provider, model = params.parse_model_string("portkey/anthropic/claude-3-sonnet")
    assert provider == "anthropic"
    assert model == "claude-3-sonnet"

    # Test fallback parsing
    provider2, model2 = params.parse_model_string("portkey/some-model")
    assert provider2 == ""
    assert model2 == "some-model"

    # Test provider API key retrieval
    os.environ["TEST_PROVIDER_API_KEY"] = "test-api-key"
    key = params.get_provider_api_key("test_provider")
    assert key == "test-api-key"
    del os.environ["TEST_PROVIDER_API_KEY"]


@pytest.mark.asyncio
async def test_portkey_integration_async():
    """Test that Portkey integration is properly configured in OpenAIGPT with async."""
    from langroid.language_models.provider_params import PortkeyParams

    # Save the current chat model setting
    original_chat_model = settings.chat_model

    # Clear any global chat model override
    settings.chat_model = ""

    try:
        # Test basic portkey model configuration
        config = lm.OpenAIGPTConfig(
            chat_model="portkey/anthropic/claude-3-haiku-20240307",
            portkey_params=PortkeyParams(
                api_key="pk-test-key",
            ),
        )

        llm = lm.OpenAIGPT(config)

        # Check that model was parsed correctly
        assert llm.config.chat_model == "claude-3-haiku-20240307"
        assert llm.is_portkey
        assert llm.api_base == "https://api.portkey.ai/v1"
        assert llm.config.portkey_params.provider == "anthropic"

        # Check headers are set correctly
        assert "x-portkey-api-key" in llm.config.headers
        assert llm.config.headers["x-portkey-api-key"] == "pk-test-key"
        assert llm.config.headers["x-portkey-provider"] == "anthropic"

    finally:
        # Restore original chat model setting
        settings.chat_model = original_chat_model
</file>

<file path="tests/main/test_llm.py">
import io
import os
import random
import warnings
from pathlib import Path

import fitz  # PyMuPDF
import openai
import pytest

import langroid as lr
import langroid.language_models as lm
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.base import LLMMessage, Role
from langroid.language_models.openai_gpt import (
    AccessWarning,
    OpenAIChatModel,
    OpenAICompletionModel,
    OpenAIGPT,
    OpenAIGPTConfig,
)
from langroid.parsing.file_attachment import FileAttachment
from langroid.parsing.parser import Parser, ParsingConfig
from langroid.parsing.utils import generate_random_sentences
from langroid.utils.configuration import Settings, set_global, settings

# allow streaming globally, but can be turned off by individual models
set_global(Settings(stream=True))


@pytest.mark.parametrize(
    "streaming, country, capital",
    [(False, "India", "Delhi"), (True, "France", "Paris")],
)
@pytest.mark.parametrize("use_cache", [True, False])
def test_openai_gpt(test_settings: Settings, streaming, country, capital, use_cache):
    test_settings.cache = False  # cache response but don't retrieve from cache
    set_global(test_settings)

    cfg = OpenAIGPTConfig(
        stream=streaming,  # use streaming output if enabled globally
        type="openai",
        max_output_tokens=100,
        min_output_tokens=10,
        completion_model=OpenAICompletionModel.DAVINCI,
        cache_config=RedisCacheConfig(fake=True) if use_cache else None,
    )

    mdl = OpenAIGPT(config=cfg)
    question = "What is the capital of " + country + "?"
    # chat mode via `generate`,
    # i.e. use same call as for completion, but the setting below
    # actually calls `chat` under the hood
    cfg.use_chat_for_completion = True
    # check that "generate" works when "use_chat_for_completion" is True
    response = mdl.generate(prompt=question, max_tokens=800)
    assert response.usage is not None and response.usage.total_tokens > 0
    assert capital in response.message
    assert not response.cached

    # actual chat mode
    messages = [
        LLMMessage(
            role=Role.SYSTEM,
            content="You are a serious, helpful assistant. Be very concise, not funny",
        ),
        LLMMessage(role=Role.USER, content=question),
    ]
    response = mdl.chat(messages=messages, max_tokens=500)
    assert response.usage is not None and response.usage.total_tokens > 0
    assert capital in response.message
    assert not response.cached

    test_settings.cache = True
    set_global(test_settings)
    # should be from cache this time, Provided config.cache_config is not None
    response = mdl.chat(messages=messages, max_tokens=500)
    assert response.usage is not None
    if use_cache:
        response.usage.total_tokens == 0
    else:
        response.usage.total_tokens > 0

    assert capital in response.message
    assert response.cached == use_cache

    # pass intentional bad msg to test error handling
    messages = [
        LLMMessage(
            role=Role.FUNCTION,
            content="Hello!",
        ),
    ]

    with pytest.raises(Exception):
        _ = mdl.chat(messages=messages, max_tokens=500)


@pytest.mark.parametrize(
    "mode, max_tokens",
    [("completion", 100), ("chat", 100), ("completion", 1000), ("chat", 1000)],
)
def _test_context_length_error(test_settings: Settings, mode: str, max_tokens: int):
    """
    Test disabled, see TODO below.
    Also it takes too long since we are trying to test
    that it raises the expected error when the context length is exceeded.
    Args:
        test_settings: from conftest.py
        mode: "completion" or "chat"
        max_tokens: number of tokens to generate
    """
    set_global(test_settings)
    set_global(Settings(cache=False))

    cfg = OpenAIGPTConfig(
        stream=False,
        max_output_tokens=max_tokens,
        completion_model=OpenAICompletionModel.TEXT_DA_VINCI_003,
        cache_config=RedisCacheConfig(fake=False),
    )
    parser = Parser(config=ParsingConfig())
    llm = OpenAIGPT(config=cfg)
    context_length = (
        llm.chat_context_length() if mode == "chat" else llm.completion_context_length()
    )

    toks_per_sentence = int(parser.num_tokens(generate_random_sentences(1000)) / 1000)
    max_sentences = int(context_length * 1.5 / toks_per_sentence)
    big_message = generate_random_sentences(max_sentences + 1)
    big_message_tokens = parser.num_tokens(big_message)
    assert big_message_tokens + max_tokens > context_length
    response = None
    # TODO need to figure out what error type to expect here
    with pytest.raises(openai.BadRequestError) as e:
        if mode == "chat":
            response = llm.chat(big_message, max_tokens=max_tokens)
        else:
            response = llm.generate(prompt=big_message, max_tokens=max_tokens)

    assert response is None
    assert "context length" in str(e.value).lower()


@pytest.mark.parametrize(
    "mdl",
    [
        lm.OpenAIChatModel.GPT4o,
        lm.GeminiModel.GEMINI_2_PRO,
        "gemini/" + lm.GeminiModel.GEMINI_2_PRO.value,
    ],
)
@pytest.mark.parametrize("ctx", [16_000, None])
def test_llm_config_context_length(mdl: str, ctx: int | None):
    llm_config = lm.OpenAIGPTConfig(
        chat_model=mdl,
        chat_context_length=ctx,  # even if wrong, use if explicitly set
    )
    mdl = lm.OpenAIGPT(config=llm_config)
    assert mdl.chat_context_length() == ctx or mdl.info().context_length


def test_model_selection(test_settings: Settings):
    set_global(test_settings)

    defaultOpenAIChatModel = lr.language_models.openai_gpt.default_openai_chat_model

    def get_response(llm):
        llm.generate(prompt="What is the capital of France?", max_tokens=50)

    def simulate_response(llm):
        llm.run_on_first_use()

    def check_warning(
        llm,
        assert_warn,
        function=get_response,
        warning_type=AccessWarning,
        catch_errors=(ImportError,),
    ):
        if assert_warn:
            with pytest.warns(expected_warning=warning_type):
                try:
                    function(llm)
                except catch_errors:
                    pass
        else:
            with warnings.catch_warnings():
                warnings.simplefilter("error", category=warning_type)

                try:
                    function(llm)
                except catch_errors:
                    pass

    # Default is GPT4o; we should not generate the warning in this case
    lr.language_models.openai_gpt.default_openai_chat_model = OpenAIChatModel.GPT4_TURBO
    llm = OpenAIGPT(config=OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT3_5_TURBO))
    check_warning(llm, False)

    llm = OpenAIGPT(config=OpenAIGPTConfig())
    check_warning(llm, False)

    # Default is GPT3.5 (simulate GPT 4 inaccessible)
    lr.language_models.openai_gpt.default_openai_chat_model = (
        OpenAIChatModel.GPT3_5_TURBO
    )

    # No warnings generated if we specify the model explicitly
    llm = OpenAIGPT(config=OpenAIGPTConfig(chat_model=OpenAIChatModel.GPT3_5_TURBO))
    check_warning(llm, False)

    # No warnings generated if we are using a local model
    llm = OpenAIGPT(config=OpenAIGPTConfig(api_base="localhost:8000"))
    check_warning(llm, False, function=simulate_response)
    llm = OpenAIGPT(config=OpenAIGPTConfig(chat_model="local/localhost:8000"))
    check_warning(llm, False, function=simulate_response)
    llm = OpenAIGPT(config=OpenAIGPTConfig(chat_model="litellm/ollama/llama"))
    check_warning(llm, False, function=simulate_response)

    # We should warn on the first usage of a model with auto-selected GPT-3.5
    llm = OpenAIGPT(config=OpenAIGPTConfig())
    check_warning(llm, True)

    # We should not warn on subsequent uses and models with auto-selected GPT-3.5
    check_warning(llm, False)
    llm = OpenAIGPT(config=OpenAIGPTConfig())
    check_warning(llm, False)

    lr.language_models.openai_gpt.default_openai_chat_model = defaultOpenAIChatModel


def test_keys():
    # Do not override the explicit settings below
    settings.chat_model = ""

    providers = [
        "vllm",
        "ollama",
        "llamacpp",
        "openai",
        "groq",
        "gemini",
        "glhf",
        "openrouter",
        "deepseek",
        "cerebras",
    ]
    key_dict = {p: f"{p.upper()}_API_KEY" for p in providers}
    key_dict["llamacpp"] = "LLAMA_API_KEY"

    for p, var in key_dict.items():
        os.environ[var] = p

    for p in providers:
        config = lm.OpenAIGPTConfig(
            chat_model=f"{p}/model",
        )

        llm = lm.OpenAIGPT(config)

        assert llm.api_key == p

        rand_key = str(random.randint(0, 10**9))
        config = lm.OpenAIGPTConfig(
            chat_model=f"{p}/model",
            api_key=rand_key,
        )

        llm = lm.OpenAIGPT(config)
        assert llm.api_key == rand_key


@pytest.mark.xfail(
    reason="LangDB may fail due to unknown flakiness!",
    run=True,
    strict=False,
)
@pytest.mark.parametrize(
    "model",
    [
        "langdb/gpt-4o-mini",
        "langdb/openai/gpt-4o-mini",
        "langdb/anthropic/claude-3-haiku-20240307",
        "langdb/claude-3-haiku-20240307",
        "langdb/gemini/gemini-2.0-flash-lite",
        "langdb/gemini-2.0-flash-lite",
    ],
)
def test_llm_langdb(model: str):
    """Test that LLM access via LangDB works."""
    # override any chat model passed via --m arg to pytest cmd
    settings.chat_model = model
    llm_config_langdb = lm.OpenAIGPTConfig(
        chat_model=model,
    )
    llm = lm.OpenAIGPT(config=llm_config_langdb)
    result = llm.chat("what is 3+4?")
    assert "7" in result.message
    if result.cached:
        assert result.usage.total_tokens == 0
    else:
        assert result.usage.total_tokens > 0


@pytest.mark.parametrize(
    "model",
    [
        "openrouter/anthropic/claude-3.5-haiku-20241022:beta",
        "openrouter/mistralai/mistral-small-24b-instruct-2501:free",
        "openrouter/google/gemini-2.0-flash-lite-001",
    ],
)
def test_llm_openrouter(model: str):
    # override any chat model passed via --m arg to pytest cmd
    settings.chat_model = model
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model,
    )
    llm = lm.OpenAIGPT(config=llm_config)
    result = llm.chat("what is 3+4?")
    assert "7" in result.message
    if result.cached:
        assert result.usage.total_tokens == 0
    else:
        assert result.usage.total_tokens > 0


@pytest.mark.parametrize(
    "model",
    [
        "portkey/openai/gpt-4o-mini",
        "portkey/anthropic/claude-3-5-haiku-latest",
        "portkey/google/gemini-2.0-flash-lite",
    ],
)
def test_llm_portkey(model: str):
    """Test that LLM access via Portkey works."""
    # override any chat model passed via --m arg to pytest cmd
    settings.chat_model = model

    # Skip if PORTKEY_API_KEY is not set
    if not os.getenv("PORTKEY_API_KEY"):
        pytest.skip("PORTKEY_API_KEY not set")

    # Extract provider from model string
    provider = model.split("/")[1] if "/" in model else ""
    provider_key_var = f"{provider.upper()}_API_KEY"

    # Skip if provider API key is not set
    if not os.getenv(provider_key_var):
        pytest.skip(f"{provider_key_var} not set")

    llm_config_portkey = lm.OpenAIGPTConfig(
        chat_model=model,
    )
    llm = lm.OpenAIGPT(config=llm_config_portkey)
    result = llm.chat("what is 3+4 equal to?")
    assert "7" in result.message
    if result.cached:
        assert result.usage.total_tokens == 0
    else:
        assert result.usage.total_tokens > 0


def test_portkey_params():
    """Test that PortkeyParams are correctly configured."""
    from langroid.language_models.provider_params import PortkeyParams

    # Test with explicit parameters
    params = PortkeyParams(
        api_key="test-key",
        provider="anthropic",
        virtual_key="vk-123",
        trace_id="trace-456",
        metadata={"user": "test"},
        retry={"max_retries": 3},
        cache={"enabled": True},
        cache_force_refresh=True,
        user="user-123",
        organization="org-456",
        custom_headers={"x-custom": "value"},
    )

    headers = params.get_headers()

    assert headers["x-portkey-api-key"] == "test-key"
    assert headers["x-portkey-provider"] == "anthropic"
    assert headers["x-portkey-virtual-key"] == "vk-123"
    assert headers["x-portkey-trace-id"] == "trace-456"
    assert headers["x-portkey-metadata"] == '{"user": "test"}'
    assert headers["x-portkey-retry"] == '{"max_retries": 3}'
    assert headers["x-portkey-cache"] == '{"enabled": true}'
    assert headers["x-portkey-cache-force-refresh"] == "true"
    assert headers["x-portkey-user"] == "user-123"
    assert headers["x-portkey-organization"] == "org-456"
    assert headers["x-custom"] == "value"

    # Test model string parsing
    provider, model = params.parse_model_string("portkey/anthropic/claude-3-sonnet")
    assert provider == "anthropic"
    assert model == "claude-3-sonnet"

    # Test fallback parsing
    provider2, model2 = params.parse_model_string("portkey/some-model")
    assert provider2 == ""
    assert model2 == "some-model"

    # Test provider API key retrieval
    os.environ["TEST_PROVIDER_API_KEY"] = "test-api-key"
    key = params.get_provider_api_key("test_provider")
    assert key == "test-api-key"
    del os.environ["TEST_PROVIDER_API_KEY"]


def test_portkey_integration():
    """Test that Portkey integration is properly configured in OpenAIGPT."""
    from langroid.language_models.provider_params import PortkeyParams

    # Save the current chat model setting
    original_chat_model = settings.chat_model

    # Clear any global chat model override
    settings.chat_model = ""

    try:
        # Test basic portkey model configuration
        config = lm.OpenAIGPTConfig(
            chat_model="portkey/anthropic/claude-3-haiku-20240307",
            portkey_params=PortkeyParams(
                api_key="pk-test-key",
            ),
        )

        llm = lm.OpenAIGPT(config)

        # Check that model was parsed correctly
        assert llm.config.chat_model == "claude-3-haiku-20240307"
        assert llm.is_portkey
        assert llm.api_base == "https://api.portkey.ai/v1"
        assert llm.config.portkey_params.provider == "anthropic"

        # Check headers are set correctly
        assert "x-portkey-api-key" in llm.config.headers
        assert llm.config.headers["x-portkey-api-key"] == "pk-test-key"
        assert llm.config.headers["x-portkey-provider"] == "anthropic"

    finally:
        # Restore original chat model setting
        settings.chat_model = original_chat_model


def test_followup_standalone():
    """Test that followup_to_standalone works."""

    llm = OpenAIGPT(OpenAIGPTConfig())
    dialog = [
        ("Is 5 a prime number?", "yes"),
        ("Is 10 a prime number?", "no"),
    ]
    followup = "What about 11?"
    response = llm.followup_to_standalone(dialog, followup)
    assert response is not None
    assert "prime" in response.lower() and "11" in response


def test_llm_pdf_attachment():
    """Test sending a PDF file attachment to the LLM."""

    # Path to the test PDF file
    pdf_path = Path("tests/main/data/dummy.pdf")

    # Create a FileAttachment from the PDF file
    attachment = FileAttachment.from_path(pdf_path)

    # Verify the attachment properties
    assert attachment.mime_type == "application/pdf"
    assert attachment.filename == "dummy.pdf"

    # Create messages with the attachment
    messages = [
        LLMMessage(role=Role.SYSTEM, content="You are a helpful assistant."),
        LLMMessage(
            role=Role.USER, content="What's title of the paper?", files=[attachment]
        ),
    ]

    # Set up the LLM with a suitable model that supports PDFs
    llm = OpenAIGPT(OpenAIGPTConfig(max_output_tokens=1000))

    # Get response from the LLM
    response = llm.chat(messages=messages)

    assert response is not None
    assert response.message is not None
    assert "Supply Chain" in response.message

    # follow-up question
    messages += [
        LLMMessage(role=Role.ASSISTANT, content="Supply Chain"),
        LLMMessage(role=Role.USER, content="Who is the first author?"),
    ]
    response = llm.chat(messages=messages)
    assert response is not None
    assert response.message is not None
    assert "Takio" in response.message


@pytest.mark.xfail(
    reason="Multi-file attachments may not work yet",
    run=True,
    strict=False,
)
def test_llm_multi_pdf_attachments():

    # Path to the test PDF file
    pdf_path = Path("tests/main/data/dummy.pdf")

    # Create a FileAttachment from the PDF file
    attachment = FileAttachment.from_path(pdf_path)

    # multiple attachments
    pdf_path2 = Path("tests/main/data/sample-test.pdf")

    # Create a FileAttachment from the PDF file
    attachment2 = FileAttachment.from_path(pdf_path2)

    messages = [
        LLMMessage(role=Role.SYSTEM, content="You are a helpful assistant."),
        LLMMessage(
            role=Role.USER,
            content="How many pages are in the Supply Chain paper?",
            files=[attachment2, attachment],
        ),
    ]
    # Set up the LLM with a suitable model that supports PDFs
    llm = OpenAIGPT(OpenAIGPTConfig(max_output_tokens=1000))

    response = llm.chat(messages=messages)
    print(response.message)
    assert any(x in response.message for x in ["4", "four"])

    # follow-up question
    messages += [
        LLMMessage(role=Role.ASSISTANT, content="4 pages"),
        LLMMessage(
            role=Role.USER,
            content="""
            How many columns are in the table in the 
            document that is NOT about Supply Chain?
            """,
        ),
    ]
    response = llm.chat(messages=messages)
    assert any(x in response.message for x in ["3", "three"])


def test_llm_pdf_bytes_and_split():
    """Test sending PDF files to LLM as bytes and split into pages."""

    # Path to the test PDF file
    pdf_path = Path("tests/main/data/dummy.pdf")

    # Test creating attachment from bytes
    with open(pdf_path, "rb") as f:
        pdf_bytes = f.read()

    attachment_from_bytes = FileAttachment.from_bytes(
        content=pdf_bytes,
        filename="supply_chain_paper.pdf",
    )

    messages = [
        LLMMessage(role=Role.SYSTEM, content="You are a helpful assistant."),
        LLMMessage(
            role=Role.USER,
            content="Who is the first author of this paper?",
            files=[attachment_from_bytes],
        ),
    ]

    llm = OpenAIGPT(OpenAIGPTConfig(max_output_tokens=100))
    response = llm.chat(messages=messages)

    assert response is not None
    assert "Takio" in response.message

    # Test creating attachment from file-like object
    pdf_io = io.BytesIO(pdf_bytes)
    attachment_from_io = FileAttachment.from_io(
        file_obj=pdf_io,
        filename="paper_from_io.pdf",
    )

    messages = [
        LLMMessage(role=Role.SYSTEM, content="You are a helpful assistant."),
        LLMMessage(
            role=Role.USER,
            content="What is the title of this paper?",
            files=[attachment_from_io],
        ),
    ]

    response = llm.chat(messages=messages)
    assert "Supply Chain" in response.message

    # Test splitting PDF into pages and sending individual pages
    doc = fitz.open(pdf_path)
    page_attachments = []

    for i, page in enumerate(doc):
        # Extract page as PDF
        page_pdf = io.BytesIO()
        page_doc = fitz.open()
        page_doc.insert_pdf(doc, from_page=i, to_page=i)
        page_doc.save(page_pdf)
        page_pdf.seek(0)

        # Create attachment for this page
        page_attachment = FileAttachment.from_io(
            file_obj=page_pdf,
            filename=f"page_{i+1}.pdf",
        )
        page_attachments.append(page_attachment)

    # Send just the first page
    messages = [
        LLMMessage(role=Role.SYSTEM, content="You are a helpful assistant."),
        LLMMessage(
            role=Role.USER,
            content="Based on just this page, what is this document about?",
            files=[page_attachments[0]],
        ),
    ]

    response = llm.chat(messages=messages)
    assert "supply chain" in response.message.lower()

    # Test with multiple pages as separate attachments
    messages = [
        LLMMessage(role=Role.SYSTEM, content="You are a helpful assistant."),
        LLMMessage(
            role=Role.USER,
            content="I'm sending you pages from a paper. "
            "How many figures are shown across all pages?",
            files=page_attachments,
        ),
    ]

    response = llm.chat(messages=messages)
    assert response is not None
    assert any(
        x in response.message.lower() for x in ["figure", "diagram", "illustration"]
    )


@pytest.mark.parametrize(
    "path",
    [
        "tests/main/data/color-shape-series.jpg",
        "tests/main/data/color-shape-series.png",
        "tests/main/data/color-shape-series.pdf",
        "https://upload.wikimedia.org/wikipedia/commons/1/18/Seriation_task_w_shapes.jpg",
    ],
)
def test_llm_image_input(path: str):
    attachment = FileAttachment.from_path(path, detail="low")

    messages = [
        LLMMessage(role=Role.SYSTEM, content="You are a helpful assistant."),
        LLMMessage(
            role=Role.USER,
            content="How many squares are here?",
            files=[attachment],
        ),
    ]
    # Set up the LLM with a suitable model that supports PDFs
    llm = OpenAIGPT(OpenAIGPTConfig(max_output_tokens=500))

    response = llm.chat(messages=messages)
    print(response.message)
    assert any(x in response.message for x in ["three", "3"])


def test_litellm_model_key():
    """
    Test that passing in explicit api_key works with `litellm/*` models
    """
    model = "litellm/anthropic/claude-3-5-haiku-latest"
    # disable any chat model passed via --m arg to pytest cmd
    settings.chat_model = model

    class CustomOpenAIGPTConfig(lm.OpenAIGPTConfig):
        """OpenAI config that doesn't auto-load from environment variables."""

        class Config:
            # Set to empty string to disable environment variable loading
            env_prefix = ""

    llm_config = CustomOpenAIGPTConfig(
        chat_model=model, api_key=os.getenv("ANTHROPIC_API_KEY", "")
    )

    # Create the LLM instance
    llm = lm.OpenAIGPT(config=llm_config)
    print(f"\nTesting with model: {llm.chat_model_orig} => {llm.config.chat_model}")
    response = llm.chat("What is 3+4?")
    assert "7" in response.message
</file>

<file path="tests/main/test_mcp_tools.py">
import os
from typing import List, Optional

import pytest
from fastmcp import Context, FastMCP
from fastmcp.client.sampling import (
    RequestContext,
    SamplingMessage,
    SamplingParams,
)
from fastmcp.client.transports import NpxStdioTransport, UvxStdioTransport
from mcp.types import (
    BlobResourceContents,
    EmbeddedResource,
    ImageContent,
    TextContent,
    TextResourceContents,
    Tool,
)

# note we use pydantic v2 to define MCP server
from pydantic import BaseModel, Field  # keep - need pydantic v2 for MCP server

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp import (
    FastMCPClient,
    get_mcp_tool_async,
    get_tool_async,
    get_tools_async,
    mcp_tool,
)


class SubItem(BaseModel):
    """A sub‐item with a value and multiplier."""

    val: int = Field(..., description="Value for sub-item")
    multiplier: float = Field(1.0, description="Multiplier applied to val")


class ComplexData(BaseModel):
    """Complex data combining two ints and a list of SubItem."""

    a: int = Field(..., description="First integer")
    b: int = Field(..., description="Second integer")
    items: List[SubItem] = Field(..., description="List of sub-items")


def mcp_server():
    server = FastMCP("TestServer")

    class Counter:
        def __init__(self) -> None:
            self.count: int = 0

        def get_num_beans(self) -> int:
            """Return current counter."""
            return self.count

        def add_beans(
            self,
            x: int = Field(..., description="Number of beans to add"),
        ) -> int:
            """Increment and return new counter."""
            self.count += x
            return self.count

    # create a stateful tool
    counter = Counter()
    # we can't directly use the tool decorator on instance methods,
    # so we use the server.add_tool() method to add the tool
    server.add_tool(counter.get_num_beans)
    server.add_tool(counter.add_beans)

    # example of tool that uses an arg of type Context, and
    # uses this arg to request client LLM sampling, and send logs
    @server.tool()
    async def prime_check(number: int, ctx: Context) -> str:
        """
        Determine if the given number is Prime or not.
        """
        result: TextContent | ImageContent = await ctx.sample(
            f"Is the number {number} prime?",
        )
        assert isinstance(result, TextContent), "Expected a text response"
        return result.text

    @server.tool()
    def greet(person: str) -> str:
        return f"Hello, {person}!"

    @server.tool()
    def get_alerts(
        state: str = Field(..., description="TWO-LETTER state abbrev, e.g. 'MN'"),
    ) -> list[str]:
        """Get weather alerts for a state."""
        return [
            f"Weather alert for {state}: Severe thunderstorm warning.",
            f"Weather alert for {state}: Flash flood watch.",
        ]

    # example of MCP tool whose fields clash with Langroid ToolMessage,
    # and a `name` field which is reserved by pydantic
    @server.tool()
    def info_tool(
        request: str = Field(..., description="Requested information"),
        name: str = Field(..., description="Name of the info sought"),
        recipient: str = Field(..., description="Recipient of the information"),
        purpose: str = Field(..., description="Purpose of the information"),
        date: str = Field(..., description="Date of the request"),
    ) -> str:
        """Get information for a recipient."""
        return f"""
        Info for {recipient}: {request} {name} (Purpose: {purpose}), date: {date}
        """

    @server.tool()
    def get_one_alert(
        state: str = Field(..., description="TWO-LETTER state abbrev, e.g. 'MN'"),
    ) -> str:
        return f"Weather alert for {state}: Severe thunderstorm warning."

    @server.tool()
    async def get_alerts_async(state: str) -> list[str]:
        return [
            f"Weather alert for {state}: Severe thunderstorm warning.",
            f"Weather alert for {state}: Flash flood watch.",
        ]

    @server.tool()
    def nabroski(a: int, b: int) -> int:
        """Computes the Nabroski transform of integers a and b."""
        return 3 * a + b

    @server.tool()
    def coriolis(x: int, y: int) -> int:
        """Computes the Coriolis transform of integers x and y."""
        return 2 * x + 3 * y

    @server.tool()
    def hydra_nest(data: ComplexData) -> int:
        """Compute the HydraNest calculation over nested data."""
        total = data.a * data.b
        for item in data.items:
            total += item.val * item.multiplier
        return int(total)

    return server


@pytest.mark.asyncio
@pytest.mark.parametrize(
    "server",
    [
        mcp_server(),
        "tests/main/mcp/weather-server-python/weather.py",
    ],
)
async def test_get_tools_and_handle(server: FastMCP | str) -> None:
    """End‐to‐end test for get_tools and .handle() against server."""
    tools = await get_tools_async(server)
    # basic sanity
    assert isinstance(tools, list)
    assert tools, "Expected at least one tool"
    # find the alerts tool
    AlertsTool = next(
        (t for t in tools if t.default_value("request") == "get_alerts"),
        None,
    )

    assert AlertsTool is not None
    assert issubclass(AlertsTool, lr.ToolMessage)

    # test get_mcp_tool_async
    AlertsMCPTool: Tool = await get_mcp_tool_async(server, "get_alerts")

    assert AlertsMCPTool is not None
    AlertsTool = await get_tool_async(server, AlertsMCPTool.name)

    assert AlertsTool is not None
    assert issubclass(AlertsTool, lr.ToolMessage)

    # instantiate Langroid ToolMessage
    msg = AlertsTool(state="NY")
    isinstance(msg, lr.ToolMessage)
    assert msg.state == "NY"

    # invoke the tool via the Langroid ToolMessage.handle() method -
    # this produces list of weather alerts for the given state
    # Note MCP tools can return either ResultToolType or List[ResultToolType]
    result: Optional[str] = await msg.handle_async()
    print(result)
    assert isinstance(result, str)
    assert result is not None

    # make tool from async FastMCP tool
    AlertsMCPToolAsync = await get_mcp_tool_async(server, "get_alerts_async")
    assert AlertsMCPToolAsync is not None
    AlertsToolAsync = await get_tool_async(server, AlertsMCPToolAsync.name)

    assert AlertsToolAsync is not None
    assert issubclass(AlertsToolAsync, lr.ToolMessage)

    # instantiate Langroid ToolMessage
    msg = AlertsToolAsync(state="NY")
    isinstance(msg, lr.ToolMessage)
    assert msg.state == "NY"

    # invoke the tool via the Langroid ToolMessage.handle_async() method -
    # this produces list of weather alerts for the given state
    # Note MCP tools can return either ResultToolType or List[ResultToolType]
    result: Optional[str] = await msg.handle_async()
    assert result is not None
    print(result)
    assert isinstance(result, str)
    assert result is not None

    # test making tool with utility functions
    AlertsTool = await get_tool_async(server, "get_alerts")
    assert issubclass(AlertsTool, lr.ToolMessage)
    # instantiate Langroid ToolMessage
    msg = AlertsTool(state="NY")
    isinstance(msg, lr.ToolMessage)


@pytest.mark.parametrize(
    "server",
    [
        mcp_server(),
        "tests/main/mcp/weather-server-python/weather.py",
    ],
)
@pytest.mark.asyncio
async def test_tools_connect_close(server: str | FastMCP) -> None:
    """Test that we can use connect()... tool-calls ... close()"""

    client = FastMCPClient(server)
    await client.connect()
    mcp_tools = await client.client.list_tools()
    assert all(isinstance(t, Tool) for t in mcp_tools)
    langroid_tool_classes = await client.get_tools_async()
    assert all(issubclass(tc, lr.ToolMessage) for tc in langroid_tool_classes)

    AlertsMCPTool = await get_mcp_tool_async(server, "get_alerts")

    AlertsTool = await get_tool_async(server, AlertsMCPTool.name)
    await client.close()

    assert AlertsTool is not None
    assert issubclass(AlertsTool, lr.ToolMessage)
    # instantiate Langroid ToolMessage
    msg = AlertsTool(state="NY")
    isinstance(msg, lr.ToolMessage)
    assert msg.state == "NY"

    result = await msg.handle_async()
    assert isinstance(result, str)


@pytest.mark.asyncio
async def test_stateful_tool() -> None:
    # instantiate the server
    server = mcp_server()

    # get tools from the SAME instance of the server
    AddBeansTool = await get_tool_async(server, "add_beans")
    assert issubclass(AddBeansTool, lr.ToolMessage)

    GetNumBeansTool = await get_tool_async(server, "get_num_beans")
    assert issubclass(GetNumBeansTool, lr.ToolMessage)

    add_beans_msg = AddBeansTool(x=5)
    assert isinstance(add_beans_msg, lr.ToolMessage)

    result = await add_beans_msg.handle_async()
    assert isinstance(result, str)
    assert "5" in result

    get_num_beans_msg = GetNumBeansTool()
    assert isinstance(get_num_beans_msg, lr.ToolMessage)
    result = await get_num_beans_msg.handle_async()
    assert isinstance(result, str)
    assert "5" in result


@pytest.mark.asyncio
async def test_tool_with_context_and_sampling() -> None:
    async def sampling_handler(
        messages: list[SamplingMessage],
        params: SamplingParams,
        context: RequestContext,
    ) -> str:
        """Handle a sampling request from server"""
        # simulate an LLM call
        return "Yes"

    PrimeCheckTool = await get_tool_async(
        mcp_server(),
        "prime_check",
        sampling_handler=sampling_handler,
    )
    assert issubclass(PrimeCheckTool, lr.ToolMessage)
    # assert that "ctx" is NOT a field in the tool
    assert "ctx" not in PrimeCheckTool.llm_function_schema().parameters["properties"]

    # instantiate Langroid ToolMessage
    prime_check_msg = PrimeCheckTool(number=7)
    assert isinstance(prime_check_msg, lr.ToolMessage)

    result = await prime_check_msg.handle_async()
    assert isinstance(result, str)
    assert "yes" in result.lower()


@pytest.mark.asyncio
async def test_mcp_tool_schemas() -> None:
    """
    Test that descriptions, field-descriptions of MCP tools are preserved
    when we translate them to Langroid ToolMessage classes. This is important
    since the LLM is shown these, and helps with tool-call accuracy.
    """
    # make a langroid AlertsTool from the corresponding MCP tool
    AlertsTool = await get_tool_async(mcp_server(), "get_alerts")

    assert issubclass(AlertsTool, lr.ToolMessage)
    description = "Get weather alerts for a state."
    assert AlertsTool.default_value("purpose") == description
    schema: lm.LLMFunctionSpec = AlertsTool.llm_function_schema()
    assert schema.description == description
    assert schema.name == "get_alerts"
    assert schema.parameters["required"] == ["state"]
    assert "TWO-LETTER" in schema.parameters["properties"]["state"]["description"]

    InfoTool = await get_tool_async(mcp_server(), "info_tool")
    assert issubclass(InfoTool, lr.ToolMessage)
    description = "Get information for a recipient."
    assert InfoTool.default_value("purpose") == description
    assert InfoTool.default_value("request") == "info_tool"

    # instantiate InfoTool
    msg = InfoTool(
        name__="InfoName",
        request__="address",
        recipient__="John Doe",
        purpose__="to know the address",
        date="2023-10-01",
    )
    assert isinstance(msg, lr.ToolMessage)
    assert msg.name__ == "InfoName"
    assert msg.request__ == "address"
    assert msg.recipient__ == "John Doe"
    assert msg.purpose__ == "to know the address"
    assert msg.date == "2023-10-01"
    # call the tool
    result = await msg.handle_async()
    assert isinstance(result, str)
    assert "address" in result.lower()


@pytest.mark.asyncio
async def test_single_output() -> None:
    """Test that a tool with a single string output works
    similarly to one that has a list of strings outputs."""

    OneAlertTool = await get_tool_async(mcp_server(), "get_one_alert")

    assert OneAlertTool is not None
    msg = OneAlertTool(state="NY")
    assert isinstance(msg, lr.ToolMessage)
    assert msg.state == "NY"
    result = await msg.handle_async()

    # we expect a list containing a single str
    assert isinstance(result, str)
    assert any(x in result.lower() for x in ["alert", "weather"])


@pytest.mark.asyncio
async def test_agent_mcp_tools() -> None:
    """Test that a Langroid ChatAgent can use and handle MCP tools."""

    server = mcp_server()
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=lm.OpenAIGPTConfig(
                max_output_tokens=500,
                async_stream_quiet=False,
            ),
        )
    )

    NabroskiTool: lr.ToolMessage = await get_tool_async(server, "nabroski")

    agent.enable_message(NabroskiTool)

    response: lr.ChatDocument = await agent.llm_response_async(
        "What is the Nabroski transform of 3 and 5?"
    )
    tools = agent.get_tool_messages(response)
    assert len(tools) == 1
    assert isinstance(tools[0], NabroskiTool)
    result: lr.ChatDocument = await agent.agent_response_async(response)
    # TODO assert needs to take LLM tool-forgetting into account
    assert "14" in result.content

    agent.init_state()
    task = lr.Task(agent, interactive=False)
    result: lr.ChatDocument = await task.run_async(
        "What is the Nabroski transform of 3 and 5?",
        turns=3,
    )
    assert "14" in result.content

    # test MCP tool with fields that clash with Langroid ToolMessage
    InfoTool = await get_tool_async(server, "info_tool")
    agent.init_state()
    agent.enable_message(InfoTool)
    result: lr.ChatDocument = await task.run_async(
        """
        Use the TOOL `info_tool` to find the address of the Municipal Building
        so you can send it to John Doe on 2023-10-01.
        """,
        turns=3,
    )
    assert "address" in result.content.lower()


# Need to define the tools outside async def,
# since the decorator uses asyncio.run() to wrap around an async fn
@mcp_tool(mcp_server(), "get_alerts")
class GetAlertsTool(lr.ToolMessage):
    """Tool to get weather alerts."""

    async def my_handler(self) -> str:
        alert = await self.handle_async()
        return "ALERT: " + alert


@mcp_tool(mcp_server(), "nabroski")
class NabroskiTool(lr.ToolMessage):
    """Tool to get Nabroski transform."""

    async def my_handler(self) -> str:
        result = await self.handle_async()
        return f"FINAL Nabroski transform result: {result}"


@pytest.mark.asyncio
async def test_fastmcp_decorator() -> None:
    """Test that the mcp_tool decorator works as expected."""

    msg = GetAlertsTool(state="NY")
    assert isinstance(msg, lr.ToolMessage)
    assert msg.state == "NY"
    result = await msg.my_handler()
    assert isinstance(result, str)
    assert "ALERT" in result

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=lm.OpenAIGPTConfig(
                max_output_tokens=500,
                async_stream_quiet=False,
            ),
        )
    )
    agent.enable_message(GetAlertsTool)

    agent.enable_message(NabroskiTool)
    task = lr.Task(agent, interactive=False)
    result = await task.run_async("What is the nabroski transform of 5 and 3?", turns=3)
    assert "nabroski" in result.content.lower() and "18" in result.content


@mcp_tool(mcp_server(), "hydra_nest")
class HydraNestTool(lr.ToolMessage):
    """Tool for computing HydraNest calculation."""

    async def my_handler(self) -> str:
        """Call hydra_nest and format result."""
        result = await self.handle_async()
        return f"Computed: {result}"


@pytest.mark.asyncio
async def test_complex_tool_decorator() -> None:
    """Test that compute_complex via decorator works end‐to‐end."""
    # build nested input
    payload = {
        "data": {
            "a": 4,
            "b": 5,
            "items": [
                {"val": 2, "multiplier": 1.5},
                {"val": 3, "multiplier": 2.0},
            ],
        }
    }
    msg = HydraNestTool(**payload)
    assert isinstance(msg, lr.ToolMessage)
    # call handler
    result = await msg.my_handler()
    expected = int(4 * 5 + 2 * 1.5 + 3 * 2.0)
    assert f"{expected}" in result

    # round‐trip via an agent
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=lm.OpenAIGPTConfig(
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
        )
    )
    agent.enable_message(HydraNestTool)
    task = lr.Task(agent, interactive=False)
    prompt = """
    Compute the HydraNest calculation with a=4, b=5,
    and a list of items with these val-multiplier pairs:
        val=2, multiplier=1.5
        val=3, multiplier=2.0
    """
    response = await task.run_async(prompt, turns=3)
    assert str(expected) in response.content


@pytest.mark.parametrize(
    "prompt,tool_name,expected",
    [
        ("What is the Nabroski transform of 3 and 5?", "nabroski", "14"),
        ("What is the Coriolis transform of 4 and 3?", "coriolis", "17"),
    ],
)
@pytest.mark.asyncio
async def test_multiple_tools(prompt, tool_name, expected) -> None:
    """
    Test one-shot enabling of multiple tools.
    """
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=lm.OpenAIGPTConfig(
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
        )
    )
    all_tools = await get_tools_async(mcp_server())

    tool = next(
        (t for t in all_tools if t.name() == tool_name),
        None,
    )
    agent.enable_message(all_tools)

    # test that agent (LLM) can pick right tool based on prompt
    prompt = "use one of your TOOLs to answer this: " + prompt
    response: lr.ChatDocument = await agent.llm_response_async(prompt)
    tools = agent.get_tool_messages(response)
    assert len(tools) == 1
    assert isinstance(tools[0], lr.ToolMessage)
    assert isinstance(tools[0], tool)

    # test in a task
    task = lr.Task(agent, interactive=False)
    result: lr.ChatDocument = await task.run_async(prompt, turns=3)
    assert expected in result.content


@pytest.mark.asyncio
async def test_npxstdio_transport() -> None:
    """
    Test that we can create Langroid ToolMessage from an MCP server
    via npx stdio transport, for example the `exa-mcp-server`:
    https://github.com/exa-labs/exa-mcp-server
    """
    transport = NpxStdioTransport(
        package="exa-mcp-server",
        env_vars=dict(EXA_API_KEY=os.getenv("EXA_API_KEY")),
    )
    tools = await get_tools_async(transport)
    assert isinstance(tools, list)
    assert tools, "Expected at least one tool"
    WebSearchTool = await get_tool_async(transport, "web_search_exa")

    assert WebSearchTool is not None
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=lm.OpenAIGPTConfig(
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
            system_message="""
            When asked a question, use the TOOL `web_search_exa` to
            perform a web search and find the answer.
            """,
        )
    )
    agent.enable_message(WebSearchTool)
    # Note: we shouldn't have to explicitly beg the LLM to use the tool here
    # but I've found that even GPT-4o sometimes fails to use the tool
    question = """
    Use the `web_search_exa` TOOL to find out:
    Who won the Presidential election in Gabon in 2025?
    """
    response = await agent.llm_response_async(question)

    tools = agent.get_tool_messages(response)
    assert len(tools) == 1
    assert isinstance(tools[0], WebSearchTool)

    task = lr.Task(agent, interactive=False)
    result: lr.ChatDocument = await task.run_async(question, turns=3)
    assert "Nguema" in result.content


transport = UvxStdioTransport(
    # `tool_name` is a misleading name -- it really refers to the
    # MCP server, which offers several tools
    tool_name="mcp-server-git",
)


@mcp_tool(transport, "git_status")
class GitStatusTool(lr.ToolMessage):
    """Tool to get git status."""

    async def handle_async(self) -> str:
        """
        When defining a class explicitly with the @mcp_tool decorator,
        we have the flexibility to define our own `handle_async` method
        which calls the call_tool_async method, which in turn calls the
        MCP server's call_tool method.
        Returns:

        """
        status = await self.call_tool_async()
        return "GIT STATUS: " + status


@pytest.mark.asyncio
async def test_uvxstdio_transport() -> None:
    """
    Test that we can create Langroid ToolMessage from an MCP server
    via uvx stdio transport. We use this example `git` MCP server:
    https://github.com/modelcontextprotocol/servers/tree/main/src/git
    """
    tools = await get_tools_async(transport)
    assert isinstance(tools, list)
    assert tools, "Expected at least one tool"
    GitStatusTool = await get_tool_async(transport, "git_status")

    assert GitStatusTool is not None
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=lm.OpenAIGPTConfig(
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
        )
    )
    agent.enable_message(GitStatusTool)
    prompt = """
        Use the `git_status` TOOL to find out the status of the 
        current git repository at "../langroid"
        """

    response = await agent.llm_response_async(prompt)
    tools = agent.get_tool_messages(response)
    assert len(tools) == 1
    assert isinstance(tools[0], GitStatusTool)

    task = lr.Task(agent, interactive=False)
    result: lr.ChatDocument = await task.run_async(prompt, turns=3)
    assert "langroid" in result.content

    # test GitStatusTool created via @mcp_tool decorator
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=lm.OpenAIGPTConfig(
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
        )
    )
    agent.enable_message(GitStatusTool)
    prompt = """
        Find out the git status of the git repository at "../langroid"
        """

    response = await agent.llm_response_async(prompt)
    tools = agent.get_tool_messages(response)
    assert len(tools) == 1
    assert isinstance(tools[0], GitStatusTool)

    task = lr.Task(agent, interactive=False)
    result: lr.ChatDocument = await task.run_async(prompt, turns=3)
    assert "status" in result.content.lower()


@pytest.mark.asyncio
async def test_npxstdio_transport_memory() -> None:
    """
    Test that we can create Langroid ToolMessage from the `memory` MCP server
    via npx stdio transport:
    https://github.com/modelcontextprotocol/servers/tree/main/src/memory
    """
    transport = NpxStdioTransport(
        package="@modelcontextprotocol/server-memory",
        args=["-y"],
    )
    tools = await get_tools_async(transport)
    assert isinstance(tools, list)
    assert tools, "Expected at least one tool"

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=lm.OpenAIGPTConfig(
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
            system_message="""
Follow these steps for each interaction:

1. User Identification:
   - You should assume that you are interacting with default_user
   - If you have not identified default_user, proactively try to do so.

2. Memory Retrieval:
   - Always begin your chat by saying only "Remembering..." and retrieve all 
       relevant information from your knowledge graph
   - Always refer to your knowledge graph as your "memory"
   - Use your TOOLS to retrieve information from your memory when asked

3. Memory
   - While conversing with the user, be attentive to any new information that falls 
       into these categories:
     a) Basic Identity (age, gender, location, job title, education level, etc.)
     b) Behaviors (interests, habits, etc.)
     c) Preferences (communication style, preferred language, etc.)
     d) Goals (goals, targets, aspirations, etc.)
     e) Relationships (personal and professional relationships up to 3 degrees of 
         separation)

4. Memory Update:
   - If any new information was gathered during the interaction, 
       update your memory as follows:
     a) Create entities for recurring organizations, people, and significant events
     b) Connect them to the current entities using relations
     b) Store facts about them as observations   
     Use your TOOLS to update your memory.         
            """,
        )
    )

    agent.enable_message(tools)
    prompt = """
        Joseph Knecht was a member of the Glass Bead Game Society.
        He was good friends with the composer Hesse.
        His mentor was the former teacher of the Glass Bead Game Society, Maestro.
        Memorize the relevant information using one of the TOOLs:
        `add_observations`, `create_entities`, `create_relations`
        """
    response = await agent.llm_response_async(prompt)
    tools = agent.get_tool_messages(response)
    assert len(tools) >= 1

    task = lr.Task(agent, interactive=False, restart=False)
    prompt = """
    Who was Joseph Knecht's mentor? Use the `search_nodes` TOOL to find out.
    """
    result: lr.ChatDocument = await task.run_async(prompt, turns=3)
    assert "Maestro" in result.content


@pytest.mark.asyncio
async def test_persist_connection() -> None:
    """Test that persist_connection keeps the connection open between tool calls."""
    server = mcp_server()

    # Create client with persist_connection=True
    async with FastMCPClient(server, persist_connection=True) as client:
        # First tool call - this should create and keep the connection open
        tool1 = await client.get_tool_async("add_beans")
        assert tool1 is not None

        # Check that client connection is established
        assert client.client is not None
        initial_client = client.client

        # Second tool call - should reuse the same connection
        tool2 = await client.get_tool_async("get_num_beans")
        assert tool2 is not None

        # Verify the same client connection was reused
        assert client.client is initial_client

        # Call the tools to ensure they work
        add_msg = tool1(x=5)
        result1 = await add_msg.handle_async()
        assert result1 == "5"  # handle_async returns string for backward compatibility

        get_msg = tool2()
        result2 = await get_msg.handle_async()
        assert result2 == "5"  # handle_async returns string for backward compatibility


@pytest.mark.asyncio
async def test_handle_async_with_images() -> None:
    """Test that response_async returns ChatDocument with file attachments."""
    # Create a mock server that returns image content
    server = FastMCP("ImageServer")

    @server.tool()
    async def get_chart() -> List[TextContent | ImageContent]:
        """Get a chart with image."""
        return [
            TextContent(type="text", text="Here is your chart:"),
            ImageContent(
                type="image",
                mimeType="image/png",
                data="iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==",  # noqa: E501
            ),
        ]

    # Get the tool and test response_async
    async with FastMCPClient(server, forward_images=True) as client:
        ChartTool = await client.get_tool_async("get_chart")

        # Create a mock agent
        agent = lr.ChatAgent(lr.ChatAgentConfig())

        # Test response_async method
        chart_msg = ChartTool()
        response = await chart_msg.handle_async(agent)

        # Verify we got a ChatDocument
        assert isinstance(response, lr.ChatDocument)
        assert "Here is your chart:" in response.content

        # Verify we have file attachments in the files attribute
        assert response.files is not None
        assert len(response.files) == 1

        # Verify the file is an image
        file = response.files[0]
        assert file.mime_type == "image/png"


@pytest.mark.asyncio
async def test_forward_text_resources() -> None:
    """Test that forward_text_resources setting works correctly."""
    from mcp.types import CallToolResult

    server = FastMCP("TextResourceServer")

    # Test the _convert_tool_result method directly with mocked data
    async with FastMCPClient(server, forward_text_resources=True) as client:
        # Create a mock CallToolResult with text and text resource
        mock_result = CallToolResult(
            content=[
                TextContent(type="text", text="Document content:"),
                EmbeddedResource(
                    type="resource",
                    resource=TextResourceContents(
                        uri="file:///example.txt",
                        mimeType="text/plain",
                        text="This is embedded text content from a resource.",
                    ),
                ),
            ],
            isError=False,
        )

        # Test with forward_text_resources=True
        result = client._convert_tool_result("test_tool", mock_result)
        content, files = result

        # Should include both the main text and the resource text
        assert "Document content:" in content
        assert "This is embedded text content from a resource." in content

    # Test with forward_text_resources=False
    async with FastMCPClient(server, forward_text_resources=False) as client:
        result = client._convert_tool_result("test_tool", mock_result)
        content, files = result

        # Should only include the main text, not the resource text
        assert "Document content:" in content
        assert "This is embedded text content from a resource." not in content


@pytest.mark.asyncio
async def test_forward_blob_resources() -> None:
    """Test that forward_blob_resources setting works correctly."""
    from mcp.types import CallToolResult

    server = FastMCP("BlobResourceServer")

    # Test the _convert_tool_result method directly with mocked data
    async with FastMCPClient(server, forward_blob_resources=True) as client:
        # Small PNG data (1x1 blue pixel)
        png_data = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAD0lEQVR42mNkYPhfz/ADAAKAA4RkT4UVAAAAAElFTkSuQmCC"  # noqa: E501

        # Create a mock CallToolResult with text and blob resource
        mock_result = CallToolResult(
            content=[
                TextContent(type="text", text="Document with blob:"),
                EmbeddedResource(
                    type="resource",
                    resource=BlobResourceContents(
                        uri="file:///example.png", mimeType="image/png", blob=png_data
                    ),
                ),
            ],
            isError=False,
        )

        # Test with forward_blob_resources=True
        result = client._convert_tool_result("test_tool", mock_result)
        content, files = result

        # Should have text content and file attachment
        assert "Document with blob:" in content
        assert len(files) == 1
        assert files[0].mime_type == "image/png"

    # Test with forward_blob_resources=False
    async with FastMCPClient(server, forward_blob_resources=False) as client:
        result = client._convert_tool_result("test_tool", mock_result)
        content, files = result

        # Should only have text content, no file attachments
        assert "Document with blob:" in content
        assert len(files) == 0
</file>

<file path="tests/main/test_openai_gpt_client_cache.py">
"""
Tests for OpenAIGPT client caching functionality.
"""

import pytest

from langroid.language_models.client_cache import (
    _clear_cache,
    get_async_openai_client,
    get_cerebras_client,
    get_groq_client,
    get_openai_client,
)
from langroid.language_models.openai_gpt import OpenAIGPT, OpenAIGPTConfig


class TestOpenAIGPTClientCache:
    """Test client caching functionality for OpenAIGPT."""

    def setup_method(self):
        """Clear cache before each test."""
        _clear_cache()

    def test_openai_client_singleton(self):
        """Test that same config returns same OpenAI client instance."""
        api_key = "test-key-123"
        base_url = "https://api.test.com"

        # Get client twice with same config
        client1 = get_openai_client(api_key=api_key, base_url=base_url)
        client2 = get_openai_client(api_key=api_key, base_url=base_url)

        # Should be same instance
        assert client1 is client2

    def test_openai_client_different_config(self):
        """Test that different configs return different OpenAI client instances."""
        # Different API keys should result in different clients
        client1 = get_openai_client(api_key="key1")
        client2 = get_openai_client(api_key="key2")
        assert client1 is not client2

    def test_async_openai_client_singleton(self):
        """Test that same config returns same AsyncOpenAI client instance."""
        api_key = "test-key-async"

        client1 = get_async_openai_client(api_key=api_key)
        client2 = get_async_openai_client(api_key=api_key)

        assert client1 is client2

    def test_groq_client_singleton(self):
        """Test that same config returns same Groq client instance."""
        api_key = "groq-test-key"

        client1 = get_groq_client(api_key=api_key)
        client2 = get_groq_client(api_key=api_key)

        assert client1 is client2

    def test_mixed_client_types(self):
        """Test that different client types are cached separately."""
        api_key = "same-key-for-all"

        openai_client = get_openai_client(api_key=api_key)
        groq_client = get_groq_client(api_key=api_key)
        cerebras_client = get_cerebras_client(api_key=api_key)

        # All should be different objects despite same API key
        assert openai_client is not groq_client
        assert openai_client is not cerebras_client
        assert groq_client is not cerebras_client

    # Integration tests with OpenAIGPT

    def test_openai_gpt_client_reuse(self):
        """Test that multiple OpenAIGPT instances reuse clients."""
        config = OpenAIGPTConfig(
            api_key="test-key-123",
            chat_model="gpt-4",
        )

        # Create two instances with same config
        gpt1 = OpenAIGPT(config)
        gpt2 = OpenAIGPT(config)

        # They should share the same client instances
        assert gpt1.client is gpt2.client
        assert gpt1.async_client is gpt2.async_client

    def test_openai_gpt_different_config(self):
        """Test that different configs create different clients."""
        config1 = OpenAIGPTConfig(
            api_key="test-key-1",
            chat_model="gpt-4",
        )
        config2 = OpenAIGPTConfig(
            api_key="test-key-2",
            chat_model="gpt-4",
        )

        gpt1 = OpenAIGPT(config1)
        gpt2 = OpenAIGPT(config2)

        # Different API keys should result in different clients
        assert gpt1.client is not gpt2.client
        assert gpt1.async_client is not gpt2.async_client

    def test_use_cached_client_flag(self):
        """Test that use_cached_client config works correctly."""
        # With caching enabled (default)
        config_cached = OpenAIGPTConfig(
            api_key="test-key",
            chat_model="gpt-4",
            use_cached_client=True,
        )

        gpt1 = OpenAIGPT(config_cached)
        gpt2 = OpenAIGPT(config_cached)
        assert gpt1.client is gpt2.client

        # With caching disabled
        config_no_cache = OpenAIGPTConfig(
            api_key="test-key",
            chat_model="gpt-4",
            use_cached_client=False,
        )

        gpt3 = OpenAIGPT(config_no_cache)
        gpt4 = OpenAIGPT(config_no_cache)

        # Each instance should have its own client
        assert gpt3.client is not gpt4.client
        assert gpt3.client is not gpt1.client

    @pytest.mark.parametrize("use_cached_client", [True, False])
    def test_concurrent_client_sharing(self, use_cached_client):
        """Test that multiple OpenAIGPT instances share clients correctly."""
        # Create 10 OpenAIGPT instances with same config
        config = OpenAIGPTConfig(
            api_key="test-key-concurrent",
            chat_model="gpt-4",
            use_cached_client=use_cached_client,
        )

        instances = [OpenAIGPT(config) for _ in range(10)]

        if use_cached_client:
            # With caching, they should all share the same sync and async clients
            for i in range(1, 10):
                assert instances[0].client is instances[i].client
                assert instances[0].async_client is instances[i].async_client
        else:
            # Without caching, each should have its own clients
            for i in range(1, 10):
                assert instances[0].client is not instances[i].client
                assert instances[0].async_client is not instances[i].async_client

        # Verify the client is an OpenAI client instance
        assert instances[0].client.__class__.__name__ == "OpenAI"
        assert instances[0].async_client.__class__.__name__ == "AsyncOpenAI"

        # Create instance with different API key - should always get different client
        config_diff = OpenAIGPTConfig(
            api_key="different-test-key",
            chat_model="gpt-4",
            use_cached_client=use_cached_client,
        )
        instance_diff = OpenAIGPT(config_diff)

        # Different API keys should always result in different clients
        assert instance_diff.client is not instances[0].client
        assert instance_diff.async_client is not instances[0].async_client

    @pytest.mark.asyncio
    @pytest.mark.parametrize("use_cached_client", [True, False])
    async def test_concurrent_async_achat(self, use_cached_client):
        """Test that multiple OpenAIGPT instances can make concurrent achat calls."""
        import asyncio

        # Create 10 OpenAIGPT instances with same config
        # API key will be picked up from environment
        config = OpenAIGPTConfig(
            chat_model="gpt-4o-mini",  # Use a cheaper model for testing
            use_cached_client=use_cached_client,
            max_output_tokens=10,  # Keep responses short for testing
        )

        instances = [OpenAIGPT(config) for _ in range(10)]

        # Verify client sharing based on use_cached_client flag
        if use_cached_client:
            # With caching, they should all share the same async client
            for i in range(1, 10):
                assert instances[0].async_client is instances[i].async_client
        else:
            # Without caching, each should have its own client
            for i in range(1, 10):
                assert instances[0].async_client is not instances[i].async_client

        # Define async function to make an achat request
        async def make_achat_request(gpt_instance, idx):
            """Make an async achat request."""
            try:
                response = await gpt_instance.achat(
                    messages=f"what comes after {idx}?",
                    max_tokens=10,
                )
                return idx, "success", response.message
            except Exception as e:
                return idx, "error", f"{type(e).__name__}: {str(e)}"

        # Run all requests concurrently
        tasks = [make_achat_request(inst, i) for i, inst in enumerate(instances)]
        results = await asyncio.gather(*tasks)

        # Verify all requests completed
        assert len(results) == 10

        # Verify they all succeeded (works with or without caching)
        for idx, (req_idx, status, response) in enumerate(results):
            assert req_idx == idx
            assert status == "success"
            # Response should contain the number
            assert str(idx + 1) in response or "zero" in response.lower()

    def test_model_prefix_client_selection(self):
        """Test that different model prefixes activate the correct client types."""
        import os

        # Get the current OPENAI_API_KEY env var value to restore later
        original_openai_key = os.environ.get("OPENAI_API_KEY")

        # Set to dummy value to trigger provider-specific client logic
        if original_openai_key:
            del os.environ["OPENAI_API_KEY"]

        try:
            # Test Groq client
            from langroid.utils.configuration import settings

            original_chat_model = settings.chat_model
            settings.chat_model = ""  # Clear any global override

            groq_config = OpenAIGPTConfig(
                api_key="xxx",  # Use DUMMY_API_KEY value
                chat_model="groq/llama3-8b-8192",
                use_cached_client=True,
            )
            groq_gpt = OpenAIGPT(groq_config)
            assert groq_gpt.client.__class__.__name__ == "Groq"
            assert groq_gpt.async_client.__class__.__name__ == "AsyncGroq"
            assert groq_gpt.is_groq is True
            # Model name should have prefix stripped
            assert groq_gpt.config.chat_model == "llama3-8b-8192"

            # Test standard OpenAI models
            openai_config = OpenAIGPTConfig(
                api_key="test-key",
                chat_model="gpt-4",
                use_cached_client=True,
            )
            openai_gpt = OpenAIGPT(openai_config)
            assert openai_gpt.client.__class__.__name__ == "OpenAI"
            assert openai_gpt.config.chat_model == "gpt-4"

        finally:
            # Restore original settings
            settings.chat_model = original_chat_model
            # Restore original OPENAI_API_KEY
            if original_openai_key:
                os.environ["OPENAI_API_KEY"] = original_openai_key
</file>

<file path="tests/main/test_pandas_utils.py">
import pytest

from langroid.utils.pandas_utils import UnsafeCommandError, sanitize_command

SAFE = [
    "df.groupby('state')['income'].mean()",
    "df['a'] + df['b'] * 2",
    "df.pivot_table(index='year', columns='state', values='sales', aggfunc='sum')",
    "df.sort_values('income').head(10)",
    "(df['x'] - df['y']).abs().mean()",
    "df.sample(n=5)",
    "df.nsmallest(3, 'income')['income']",
    "df.where(df['income'] > 50000)['state'].value_counts()",
    "df.describe()",
    "df.loc[0:100, 'income'].sum()",
    "df.head(5)['income'].mean()",
    "df.select_dtypes(include=['number']).sum().sum()",
    "df.rank(method='average')['score']",
    "df.groupby('state', sort=True)['income'].median()",
    "df.sample(frac=0.1, random_state=42)",
]

DEEP_EXPR = "df" + "[0]" * 26  # depth bomb (26 > MAX_DEPTH)

BLOCK_WITH_MSG = [
    ("df.eval('2+2')", r"method 'eval' not permitted"),
    ("df.sample(n=5, regex=True)", r"kwarg 'regex' is blocked"),
    ("df['b'] * 12345678901", r"numeric constant exceeds limit"),
    ("df['a'] ** 8", r"operator not allowed"),
    (
        "df.head().tail().sort_values('a').groupby('state').sum().mean().std()",
        r"method-chain too long",
    ),
    ("df.sample(n=10, inplace=True)", r"kwarg 'inplace' is blocked"),
    ("sales.sum()", r"unexpected variable 'sales'"),
    ("df2.head()", r"unexpected variable 'df2'"),
    ("df[other_var]", r"subscript must be literal"),
    (
        "df.where(df['income'] > other_var)['income']",
        r"unexpected variable 'other_var'",
    ),
    (DEEP_EXPR, r"AST nesting too deep"),
]


@pytest.mark.parametrize("expr", SAFE)
def test_safe(expr):
    """All SAFE expressions must pass without exception."""
    assert sanitize_command(expr) == expr


@pytest.mark.parametrize("expr,msg", BLOCK_WITH_MSG)
def test_block(expr, msg):
    """All BLOCK expressions must raise UnsafeCommandError with the right message."""
    with pytest.raises(UnsafeCommandError, match=msg):
        sanitize_command(expr)
</file>

<file path="tests/main/test_retriever_agent.py">
from types import SimpleNamespace
from typing import Any, Dict, List, Optional, Sequence

import numpy as np
import pandas as pd
import pytest

from langroid.agent.special.doc_chat_agent import DocChatAgentConfig
from langroid.agent.special.retriever_agent import RetrieverAgent
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.mytypes import DocMetaData, Document
from langroid.parsing.parser import ParsingConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import NO_ANSWER
from langroid.utils.system import rmdir
from langroid.vector_store.base import VectorStore
from langroid.vector_store.chromadb import ChromaDB, ChromaDBConfig
from langroid.vector_store.lancedb import LanceDB, LanceDBConfig
from langroid.vector_store.qdrantdb import QdrantDB, QdrantDBConfig


def gen_data(size: int) -> List[Dict[str, Any]]:
    # Create a list of states
    states = ["CA", "TX"]

    # Generate random age between 18 and 100
    ages = np.random.choice([18, 80], size)

    # Generate random gender
    genders = np.random.choice(["male", "female"], size)

    # Generate random state
    states_col = np.random.choice(states, size)

    # Generate random income between 30000 and 150000
    incomes = np.random.choice([15_000, 100_000], size)

    data = [
        dict(
            age=ages[i],
            gender=genders[i],
            state=states_col[i],
            income=incomes[i],
        )
        for i in range(size)
    ]

    # add special record to test if it can be found
    data.append(
        dict(
            age=100,
            gender="male",
            state="NJ",
            income=1_000_000,
        )
    )

    return data


class _TestRetrieverAgentConfig(DocChatAgentConfig):
    system_message: str = "You are a data scientist"
    user_message: str = """
        Your task is to match a profile description to a list of records in a table.
        """
    data: Optional[List[Dict[str, Any]]] = None
    retrieve_only = True
    retrieval_granularity = -1  # extract whole content
    n_similar_chunks = 5
    n_relevant_chunks = 5
    vecdb: QdrantDBConfig = QdrantDBConfig(
        collection_name="test-retriever",
        storage_path=":memory:",
    )
    parsing: ParsingConfig = ParsingConfig()
    cross_encoder_reranking_model = ""  # turn off cross-encoder reranking


class _TestRetrieverAgent(RetrieverAgent):
    def __init__(self, config: _TestRetrieverAgentConfig):
        super().__init__(config)
        self.config = config

    def get_records(self) -> Sequence[Document]:
        return [
            Document(
                content=", ".join(f"{k}={v}" for k, v in d.items()),
                metadata=DocMetaData(id=i),
            )
            for i, d in enumerate(self.config.data)
        ]


dicts = gen_data(100)
cfg = _TestRetrieverAgentConfig(
    data=dicts,
)
agent = _TestRetrieverAgent(cfg)
agent.ingest()


@pytest.mark.parametrize(
    "query,expected,not_expected",
    [
        (
            "Men in CA who are over 75",
            "age=80,gender=male,state=CA",
            "age=18,gender=female,state=TX",
        ),
        (
            "People earning at least 100k",
            "income=100000",
            "income=15000",
        ),
        (
            "People earning over 100k in CA",
            "income=100000,state=CA",
            "state=TX",
        ),
        (
            "Folks living in CA",
            "state=CA",
            "state=TX,state=NJ",
        ),
        (
            "Canada residents",
            NO_ANSWER,
            "age,gender,state,income",
        ),
        (
            "People living in New Jersey",
            "age=100,gender=male,state=NJ",
            "state=CA,state=TX",
        ),
    ],
)
def test_retriever_agent(
    test_settings: Settings,
    query: str,
    expected: str,
    not_expected: str,
) -> None:
    set_global(test_settings)
    response = agent.llm_response(message=query).content
    assert all([k in response for k in expected.split(",")])
    assert all([k not in response for k in not_expected.split(",")])


embed_cfg = OpenAIEmbeddingsConfig(
    model_type="openai",
)


class MyDocMetaData(DocMetaData):
    id: str


class MyDoc(Document):
    content: str
    metadata: MyDocMetaData


@pytest.fixture(scope="function")
def vecdb(request) -> VectorStore:
    if request.param == "qdrant_local":
        qd_dir = ":memory:"
        qd_cfg = QdrantDBConfig(
            cloud=False,
            collection_name="test-" + embed_cfg.model_type,
            storage_path=qd_dir,
            embedding=embed_cfg,
        )
        qd = QdrantDB(qd_cfg)
        yield qd
        return

    if request.param == "chroma":
        cd_dir = ".chroma/" + embed_cfg.model_type
        rmdir(cd_dir)
        cd_cfg = ChromaDBConfig(
            collection_name="test-" + embed_cfg.model_type,
            storage_path=cd_dir,
            embedding=embed_cfg,
        )
        cd = ChromaDB(cd_cfg)
        yield cd
        rmdir(cd_dir)
        return

    if request.param == "lancedb":
        ldb_dir = ".lancedb/data/" + embed_cfg.model_type
        rmdir(ldb_dir)
        ldb_cfg = LanceDBConfig(
            cloud=False,
            collection_name="test-" + embed_cfg.model_type,
            storage_path=ldb_dir,
            embedding=embed_cfg,
            document_class=MyDoc,  # IMPORTANT, to ensure table has full schema!
        )
        ldb = LanceDB(ldb_cfg)
        yield ldb
        rmdir(ldb_dir)
        return


summaries = SimpleNamespace(
    ENTROPY="A story exploring the concept of entropy and the end of the universe.",
    HARRY_POTTER="The adventures of a young wizard at a magical school.",
    BIG_BROTHER="A dystopian novel about a totalitarian regime and what freedom means.",
    LOTR="An epic fantasy tale of a quest to destroy a powerful ring.",
    TIME_MACHINE="A science fiction novel about time travel and its consequences.",
)

data = {
    "id": ["A100", "B200", "C300", "D400", "E500"],
    "year": [1955, 1977, 1989, 2001, 2015],
    "summary": list(vars(summaries).values()),
}

df = pd.DataFrame(data)


@pytest.mark.parametrize("metadata", [[], ["id", "year"], ["year"]])
@pytest.mark.parametrize("vecdb", ["lancedb", "qdrant_local", "chroma"], indirect=True)
def test_retriever_agent_from_df(
    test_settings: Settings,
    vecdb,
    metadata,
):
    """Check we can ingest from a dataframe and run queries."""
    set_global(test_settings)

    agent_cfg = _TestRetrieverAgentConfig()
    agent = RetrieverAgent(agent_cfg)
    agent.vecdb = vecdb
    agent.clear()
    agent.ingest_dataframe(df, content="summary", metadata=metadata)
    response = agent.llm_response(
        """
        A movie about the end of the universe or about a magical school.
        """
    )
    # Check that the ENTIRE description is returned
    assert summaries.ENTROPY in response.content
    assert summaries.HARRY_POTTER in response.content
</file>

<file path="tests/main/test_rich_file_logger.py">
from __future__ import annotations

import sys
import threading
from pathlib import Path
from typing import List

import pytest

from langroid.utils.logging import RichFileLogger


def _make(path: str, n: int) -> List[RichFileLogger]:
    return [RichFileLogger(path, append=True, color=False) for _ in range(n)]


def _stress(start: threading.Event, errs: list[BaseException], path: str) -> None:
    start.wait()
    try:
        log = RichFileLogger(path, append=True, color=False)
        for _ in range(50):
            log.log("hi")
    except BaseException as exc:  # noqa: BLE001
        errs.append(exc)


@pytest.mark.parametrize("n", [1, 5, 50])
def test_singleton_and_fd(tmp_path: Path, n: int) -> None:
    file_path = tmp_path / "shared.log"
    loggers = _make(str(file_path), n)

    first = loggers[0]
    assert all(lg is first for lg in loggers)
    fd = first.file.fileno()
    assert all(lg.file.fileno() == fd for lg in loggers)

    first.log("one")

    # close once per acquisition ➜ final close closes fd
    for _ in range(n):
        first.close()
    assert first.file.closed


@pytest.mark.skipif(sys.platform.startswith("win"), reason="posix only")
def test_fd_limit(tmp_path: Path) -> None:
    import resource  # type: ignore

    soft0, hard0 = resource.getrlimit(resource.RLIMIT_NOFILE)
    resource.setrlimit(resource.RLIMIT_NOFILE, (32, hard0))

    try:
        path = str(tmp_path / "stress.log")
        errs: list[BaseException] = []
        start = threading.Event()
        ths = [
            threading.Thread(target=_stress, args=(start, errs, path), daemon=True)
            for _ in range(64)
        ]
        for t in ths:
            t.start()
        start.set()
        for t in ths:
            t.join()
        if errs:
            raise AssertionError(f"Error: {errs[0]!r}") from errs[0]
    finally:
        resource.setrlimit(resource.RLIMIT_NOFILE, (soft0, hard0))


def test_write_after_peer_close(tmp_path: Path) -> None:
    """
    Scenario that used to raise `ValueError: I/O operation on closed file`.

    Two RichFileLogger handles are created for the same path. One is closed,
    the other continues to write. The test passes if no exception is raised.
    """
    log_path = tmp_path / "late_write.log"

    logger1 = RichFileLogger(str(log_path), append=True, color=False)
    logger2 = RichFileLogger(str(log_path), append=True, color=False)

    # Close the first handle
    logger1.close()

    # Second handle must still be functional
    logger2.log("log entry after peer close")

    # Clean up
    logger2.close()
</file>

<file path="tests/main/test_token_usage.py">
import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.tool_message import ToolMessage
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.parsing.parser import ParsingConfig
from langroid.prompts.prompts_config import PromptsConfig
from langroid.utils.configuration import Settings, set_global
from langroid.vector_store.base import VectorStoreConfig

MAX_OUTPUT_TOKENS = 30


class _TestChatAgentConfig(ChatAgentConfig):
    vecdb: VectorStoreConfig = None
    parsing: ParsingConfig = ParsingConfig()
    prompts: PromptsConfig = PromptsConfig(
        max_tokens=200,
    )


class CapitalTool(ToolMessage):
    request = "capital"
    purpose = "To present the <capital> of an <entity> (state or country)"
    entity: str
    capital: str

    def handle(self):
        return f"The capital of {self.entity} is {self.capital}"


# Define the configurations
config = OpenAIGPTConfig(
    cache_config=RedisCacheConfig(fake=True),
    use_chat_for_completion=True,
    max_output_tokens=MAX_OUTPUT_TOKENS,
    min_output_tokens=1,
)


@pytest.mark.parametrize("stream", [True, False])
def test_agent_token_usage(stream):
    set_global(Settings(cache=False, stream=stream))
    cfg = _TestChatAgentConfig(llm=config)
    agent = ChatAgent(cfg)
    agent.llm.reset_usage_cost()
    question = "What is the capital of Canada?"
    q_tokens = agent.num_tokens(question)
    agent.llm_response_forget(question)
    assert agent.total_llm_token_usage != 0
    assert agent.total_llm_token_cost != 0

    total_cost_after_1st_rnd = agent.total_llm_token_cost
    total_tokens_after_1st_rnd = agent.total_llm_token_usage

    set_global(Settings(cache=True, stream=stream))
    # this convo shouldn't change the cost and tokens because `cache` is `True`
    response0 = agent.llm_response_forget(question)
    assert total_cost_after_1st_rnd == agent.total_llm_token_cost
    assert agent.total_llm_token_usage == total_tokens_after_1st_rnd

    # This convo should change the cost because `cache` is `False`:
    # IF the response is identical to before, then the
    # number of accumulated tokens should be doubled, but
    # we allow for variation in the response
    set_global(Settings(cache=False, stream=stream))
    response1 = agent.llm_response(question)
    assert (
        agent.total_llm_token_usage
        == 2 * total_tokens_after_1st_rnd
        + agent.num_tokens(response1.content)
        - agent.num_tokens(response0.content)
    )
    assert agent.total_llm_token_cost > total_cost_after_1st_rnd * 1.1

    # check that cost/usage accumulation in agent matches that in llm
    llm_usage = agent.llm.usage_cost_dict[agent.config.llm.chat_model]
    assert (
        llm_usage.prompt_tokens + llm_usage.completion_tokens
        == agent.total_llm_token_usage
    )
    assert llm_usage.cost == agent.total_llm_token_cost

    # check proper accumulation of prompt tokens across multiple rounds
    response2 = agent.llm_response(question)
    assert (
        response2.metadata.usage.prompt_tokens
        >= response1.metadata.usage.prompt_tokens
        + response1.metadata.usage.completion_tokens
        + q_tokens
    )


@pytest.mark.parametrize("fn", [True, False])
@pytest.mark.parametrize("stream", [True, False])
def test_token_usage_tool(fn, stream):
    """Check token usage accumulation with tool/function-call"""
    set_global(Settings(cache=False, stream=stream))
    cfg = _TestChatAgentConfig(
        llm=config,
        use_functions_api=fn,
        use_tools=not fn,
        system_message="Use the `capital` tool to tell me the capital of a country",
    )
    agent = ChatAgent(cfg)
    agent.llm.reset_usage_cost()
    agent.enable_message(CapitalTool, use=True, handle=True)

    question = "What is the capital of China?"
    response1 = agent.llm_response(question)
    result = agent.agent_response(response1)
    agent.llm_response(result)
    response3 = agent.llm_response(question)

    assert (
        response3.metadata.usage.prompt_tokens
        >= response1.metadata.usage.prompt_tokens
        + response1.metadata.usage.completion_tokens
        + agent.num_tokens(question)
        + agent.num_tokens(result.content)
    )


@pytest.mark.asyncio
@pytest.mark.parametrize("stream", [True, False])
async def test_agent_token_usage_async(stream):
    set_global(Settings(cache=False, stream=stream))
    cfg = _TestChatAgentConfig(llm=config)
    agent = ChatAgent(cfg)
    agent.llm.reset_usage_cost()
    question = "What is the capital of Canada?"
    await agent.llm_response_forget_async(question)
    assert agent.total_llm_token_usage != 0
    assert agent.total_llm_token_cost != 0

    total_cost_after_1st_rnd = agent.total_llm_token_cost
    total_tokens_after_1st_rnd = agent.total_llm_token_usage

    set_global(Settings(cache=True, stream=stream))
    print("***2nd round***")
    # this convo shouldn't change the cost and tokens because `cache` is `True`
    response0 = await agent.llm_response_forget_async(question)
    assert total_cost_after_1st_rnd == agent.total_llm_token_cost
    assert agent.total_llm_token_usage == total_tokens_after_1st_rnd

    # this convo should change the cost because `cache` is `False`
    # number of accumulated tokens should be doubled because the question/response pair
    # is the same
    set_global(Settings(cache=False, stream=stream))
    response1 = await agent.llm_response_async(question)
    print("***3rd round***")

    assert (
        agent.total_llm_token_usage
        == 2 * total_tokens_after_1st_rnd
        + agent.num_tokens(response1.content)
        - agent.num_tokens(response0.content)
    )
    assert agent.total_llm_token_cost > total_cost_after_1st_rnd * 1.1

    llm_usage = agent.llm.usage_cost_dict[agent.config.llm.chat_model]
    assert (
        llm_usage.prompt_tokens + llm_usage.completion_tokens
        == agent.total_llm_token_usage
    )
    assert llm_usage.cost == agent.total_llm_token_cost


def test_cached_tokens_tracking():
    """Test that cached tokens are properly tracked in token usage"""
    set_global(Settings(cache=False, stream=False))
    cfg = _TestChatAgentConfig(llm=config)
    agent = ChatAgent(cfg)
    agent.llm.reset_usage_cost()

    # First request - no cached tokens expected
    question = "What is 2+2?"
    response1 = agent.llm_response(question)
    usage1 = response1.metadata.usage
    assert usage1.cached_tokens == 0
    assert usage1.prompt_tokens > 0
    assert usage1.completion_tokens > 0

    # Check cost calculation with no cached tokens
    cost1 = agent.compute_token_cost(usage1.prompt_tokens, 0, usage1.completion_tokens)
    assert cost1 > 0

    # Check cost calculation with simulated cached tokens
    # If half the prompt tokens were cached, cost should be lower
    simulated_cached = usage1.prompt_tokens // 2
    cost_with_cache = agent.compute_token_cost(
        usage1.prompt_tokens, simulated_cached, usage1.completion_tokens
    )
    # With cached tokens, cost should be less (assuming cached cost < input cost)
    assert cost_with_cache < cost1


def test_cached_tokens_in_llm_response():
    """Test that LLMTokenUsage properly includes cached_tokens field"""
    from langroid.language_models.base import LLMTokenUsage

    # Create token usage with cached tokens
    usage = LLMTokenUsage(
        prompt_tokens=100, cached_tokens=25, completion_tokens=50, cost=0.001
    )

    # Verify cached_tokens is tracked
    assert usage.cached_tokens == 25
    assert usage.prompt_tokens == 100
    assert usage.completion_tokens == 50

    # Test string representation includes cached tokens
    usage_str = str(usage)
    assert "cached 25" in usage_str

    # Test reset clears cached tokens
    usage.reset()
    assert usage.cached_tokens == 0
    assert usage.prompt_tokens == 0
</file>

<file path="tests/main/test_tool_handler_async.py">
"""
Test various async handler method signatures for ToolMessage classes.
Tests the new flexible handle_async method that can accept optional agent parameter.
"""

import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocument
from langroid.agent.tool_message import ToolMessage


class HandleAsyncNoArgsMsg(ToolMessage):
    """Tool with handle_async() method - no arguments"""

    request: str = "handle_async_no_args"
    purpose: str = "Test async handle with no arguments"

    async def handle_async(self) -> str:
        return "async handled with no args"


class HandleAsyncChatDocMsg(ToolMessage):
    """Tool with handle_async(chat_doc) method"""

    request: str = "handle_async_chat_doc"
    purpose: str = "Test async handle with chat_doc"
    data: str

    async def handle_async(self, chat_doc: ChatDocument) -> str:
        # Actually use the chat_doc parameter
        return (
            f"async handled with chat_doc content '{chat_doc.content}' and "
            f"data: {self.data}"
        )


class HandleAsyncAgentMsg(ToolMessage):
    """Tool with handle_async(agent) method"""

    request: str = "handle_async_agent"
    purpose: str = "Test async handle with agent"

    async def handle_async(self, agent: ChatAgent) -> str:
        return f"async handled with agent: {agent.__class__.__name__}"


class HandleAsyncAgentChatDocMsg(ToolMessage):
    """Tool with handle_async(agent, chat_doc) method"""

    request: str = "handle_async_agent_chat_doc"
    purpose: str = "Test async handle with agent and chat_doc"
    data: str

    async def handle_async(self, agent: ChatAgent, chat_doc: ChatDocument) -> str:
        # Use both agent and chat_doc
        return (
            f"async handled with agent {agent.__class__.__name__}, "
            f"chat_doc '{chat_doc.content}', data: {self.data}"
        )


class HandleAsyncChatDocAgentMsg(ToolMessage):
    """Tool with handle_async(chat_doc, agent) method - reversed order"""

    request: str = "handle_async_chat_doc_agent"
    purpose: str = "Test async handle with chat_doc and agent in reverse order"
    data: str

    async def handle_async(self, chat_doc: ChatDocument, agent: ChatAgent) -> str:
        # Use both parameters in the order they're defined
        return (
            f"async chat_doc '{chat_doc.content}' first, "
            f"then agent {agent.__class__.__name__}, data: {self.data}"
        )


class HandleAsyncNoAnnotationsMsg(ToolMessage):
    """Tool with async handle method but no type annotations - single param"""

    request: str = "handle_async_no_annotations"
    purpose: str = "Test async handle without type annotations"
    data: str

    async def handle_async(self, chat_doc) -> str:
        # Should fall back to parameter name - assume single arg is chat_doc
        # Access content attribute to verify it's actually a ChatDocument
        return (
            f"async handled without annotations - "
            f"chat_doc: '{chat_doc.content}', data: {self.data}"
        )


class HandleAsyncNoAnnotationsAgentMsg(ToolMessage):
    """Tool with async handle method expecting agent but no type annotations"""

    request: str = "handle_async_no_annotations_agent"
    purpose: str = "Test async handle with agent but no annotations"

    async def handle_async(self, agent) -> str:
        # Parameter name 'agent' should be recognized even without annotations
        return f"async handled agent without annotations: {agent.__class__.__name__}"


class HandleAsyncNoAnnotationsBothMsg(ToolMessage):
    """Tool with async handle method expecting both params but no type annotations"""

    request: str = "handle_async_no_annotations_both"
    purpose: str = "Test async handle with both params but no annotations"
    data: str

    async def handle_async(self, agent, chat_doc) -> str:
        # Parameter names 'agent' and 'chat_doc' should be recognized
        return (
            f"async handled with agent {agent.__class__.__name__}, "
            f"chat_doc '{chat_doc.content}', data: {self.data}"
        )


class HandleAsyncNoAnnotationsBothReversedMsg(ToolMessage):
    """Tool with async handle method with reversed parameter order but no type annotations"""  # noqa: E501

    request: str = "handle_async_no_annotations_both_reversed"
    purpose: str = "Test async handle with reversed params but no annotations"
    data: str

    async def handle_async(self, chat_doc, agent) -> str:
        # Parameter order should be respected based on names
        return (
            f"async chat_doc '{chat_doc.content}' first, "
            f"agent {agent.__class__.__name__}, data: {self.data}"
        )


class TestToolHandlerAsync:
    """Test the flexible async tool handler extraction"""

    @pytest.mark.asyncio
    async def test_handle_async_no_args(self):
        """Test handle_async() with no arguments"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleAsyncNoArgsMsg)

        msg = HandleAsyncNoArgsMsg()
        result = await agent.handle_async_no_args_async(msg)
        assert result == "async handled with no args"

    @pytest.mark.asyncio
    async def test_handle_async_chat_doc(self):
        """Test handle_async(chat_doc) with type annotation"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleAsyncChatDocMsg)

        msg = HandleAsyncChatDocMsg(data="test data")
        chat_doc = agent.create_agent_response(content="test")
        result = await agent.handle_async_chat_doc_async(msg, chat_doc)
        assert result == (
            "async handled with chat_doc content 'test' and " "data: test data"
        )

    @pytest.mark.asyncio
    async def test_handle_async_agent(self):
        """Test handle_async(agent) with type annotation"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleAsyncAgentMsg)

        msg = HandleAsyncAgentMsg()
        result = await agent.handle_async_agent_async(msg)
        assert result == "async handled with agent: ChatAgent"

    @pytest.mark.asyncio
    async def test_handle_async_agent_chat_doc(self):
        """Test handle_async(agent, chat_doc) with type annotations"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleAsyncAgentChatDocMsg)

        msg = HandleAsyncAgentChatDocMsg(data="test data")
        chat_doc = agent.create_agent_response(content="test")
        result = await agent.handle_async_agent_chat_doc_async(msg, chat_doc)
        assert result == (
            "async handled with agent ChatAgent, " "chat_doc 'test', data: test data"
        )

    @pytest.mark.asyncio
    async def test_handle_async_chat_doc_agent(self):
        """Test handle_async(chat_doc, agent) with reversed parameter order"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleAsyncChatDocAgentMsg)

        msg = HandleAsyncChatDocAgentMsg(data="test data")
        chat_doc = agent.create_agent_response(content="test")
        result = await agent.handle_async_chat_doc_agent_async(msg, chat_doc)
        assert result == (
            "async chat_doc 'test' first, " "then agent ChatAgent, data: test data"
        )

    @pytest.mark.asyncio
    async def test_handle_async_no_annotations(self):
        """Test async handle with no type annotations - should use parameter name"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleAsyncNoAnnotationsMsg)

        msg = HandleAsyncNoAnnotationsMsg(data="test data")
        chat_doc = agent.create_agent_response(content="test")
        result = await agent.handle_async_no_annotations_async(msg, chat_doc)
        assert result == (
            "async handled without annotations - " "chat_doc: 'test', data: test data"
        )

    @pytest.mark.asyncio
    async def test_handle_async_no_annotations_agent(self):
        """Test async handle with agent param but no type annotations"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleAsyncNoAnnotationsAgentMsg)

        msg = HandleAsyncNoAnnotationsAgentMsg()
        # Parameter name 'agent' should be recognized, so no chat_doc needed
        result = await agent.handle_async_no_annotations_agent_async(msg)
        assert result == "async handled agent without annotations: ChatAgent"

    @pytest.mark.asyncio
    async def test_handle_async_no_annotations_both(self):
        """Test async handle with both params but no type annotations"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleAsyncNoAnnotationsBothMsg)

        msg = HandleAsyncNoAnnotationsBothMsg(data="test data")
        chat_doc = agent.create_agent_response(content="test")
        result = await agent.handle_async_no_annotations_both_async(msg, chat_doc)
        assert result == (
            "async handled with agent ChatAgent, " "chat_doc 'test', data: test data"
        )

    @pytest.mark.asyncio
    async def test_handle_async_no_annotations_both_reversed(self):
        """Test async handle with reversed params but no type annotations"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleAsyncNoAnnotationsBothReversedMsg)

        msg = HandleAsyncNoAnnotationsBothReversedMsg(data="test data")
        chat_doc = agent.create_agent_response(content="test")
        result = await agent.handle_async_no_annotations_both_reversed_async(
            msg, chat_doc
        )
        assert result == (
            "async chat_doc 'test' first, " "agent ChatAgent, data: test data"
        )


# Test that sync and async can coexist
class HandleBothSyncAsyncMsg(ToolMessage):
    """Tool with both sync and async handle methods"""

    request: str = "handle_both_sync_async"
    purpose: str = "Test tool with both sync and async handlers"

    def handle(self, agent: ChatAgent) -> str:
        return f"sync handled with agent: {agent.__class__.__name__}"

    async def handle_async(self, agent: ChatAgent) -> str:
        return f"async handled with agent: {agent.__class__.__name__}"


@pytest.mark.asyncio
async def test_handle_both_sync_async():
    """Test that a tool can have both sync and async handlers"""
    agent = ChatAgent(ChatAgentConfig())
    agent.enable_message(HandleBothSyncAsyncMsg)

    msg = HandleBothSyncAsyncMsg()

    # Test sync handler
    sync_result = agent.handle_both_sync_async(msg)
    assert sync_result == "sync handled with agent: ChatAgent"

    # Test async handler
    async_result = await agent.handle_both_sync_async_async(msg)
    assert async_result == "async handled with agent: ChatAgent"
</file>

<file path="SECURITY.md">
# Security Policy

## ⚠️ Warning
**Always sanitize user input.**

Langroid executes Python code generated by Large Language Models (LLMs) (e.g., through `TableChatAgent` and `LanceDocChatAgent`). While this provides powerful data analysis capabilities, it can lead to unintended consequences if exposed unsafely. Malicious users may exploit LLM responses to execute harmful code, potentially resulting in sensitive data exposure, denial-of-service, or complete system compromise.

If your LLM application accepts untrusted input, implement input sanitization and sandboxing to mitigate these risks.

## Supported Versions

Security updates are supported on Langroid version >= 0.18.x

## Reporting a Vulnerability

If you discover a security vulnerability in this repository, **please report it privately**. Security issues should **not** be reported using GitHub Issues or any other public forum.

### How to Report Privately

To report a security vulnerability privately:

1. Go to the repository's **[Security Advisories](https://github.com/langroid/langroid/security/advisories)** section.
2. Click on **"Report a vulnerability"**.
3. Provide the necessary details about the vulnerability.

Your report will remain confidential, and we will respond as quickly as possible (usually within 48 hours) to evaluate the issue and work on a fix. We greatly appreciate your responsible disclosure.

Please **do not** report vulnerabilities through GitHub Issues, discussions, or other public channels as this could expose the issue to a wider audience before it is resolved.

### Security Fix Timeline

Once a security vulnerability is reported, we will work to:
- Acknowledge the report within 48 hours.
- Investigate and confirm the issue.
- Develop a patch or mitigation strategy.
- Publish the fix and disclose the advisory publicly after the resolution.
</file>

<file path="ai-instructions/claude-repomix-instructions.md">
# AI Instructions for Setting Up Repomix

## Task Overview
Set up [repomix](https://github.com/yamadashy/repomix) to generate LLM-friendly repository exports. This creates text files that can be uploaded to AI models for code analysis.

## Steps to Complete

### 1. Install Repomix
```bash
npm install -g repomix
```

### 2. Create repomix.config.json
Create a configuration file in the repository root with:
- **Include patterns**: Source code files (*.py, *.js, *.md, *.yaml, *.yml, *.toml)
- **Exclude patterns**: Data directories, logs, node_modules, JSON files, generated files
- **Security check**: Enable to prevent sensitive data inclusion

### 3. Configure Include/Exclude Patterns
- Include only source code directories and documentation
- Exclude data/, logs/, build artifacts, dependencies
- Add `llms*.txt` to exclusions to prevent recursive inclusion

### 4. Test Configuration (Optional)
```bash
# Generate file list only for inspection
repomix --no-files -o file-list.txt
```
This allows you to review which files will be included before generating the full output.

### 5. Generate Output Versions

Use the Makefile targets to generate repomix files:

```bash
# Generate all variants (recommended)
make repomix-all

# Or generate specific versions:
make repomix                      # llms.txt and llms-compressed.txt (includes tests)
make repomix-no-tests             # llms-no-tests.txt and llms-no-tests-compressed.txt
make repomix-no-tests-no-examples # llms-no-tests-no-examples.txt and compressed version
```

All commands use `git ls-files` to ensure only git-tracked files are included.

### 6. Verify Results
- Check file sizes and token counts in repomix output
- Ensure no sensitive data is included
- Confirm only relevant source files are packaged

## Expected Outcome
Six text files optimized for different LLM contexts:
- `llms.txt`: Full version with tests and examples (870K tokens)
- `llms-compressed.txt`: Compressed version with tests and examples (513K tokens)
- `llms-no-tests.txt`: Full version without tests (677K tokens)
- `llms-no-tests-compressed.txt`: Compressed version without tests (433K tokens)
- `llms-no-tests-no-examples.txt`: Core library code only (no tests/examples)
- `llms-no-tests-no-examples-compressed.txt`: Compressed core library code (285K tokens)

The files contain only git-tracked source code with proper exclusions for clean, focused LLM consumption.
</file>

<file path="ai-notes/handler-parameter-analysis-notes.md">
# Handler Parameter Analysis Notes

## Overview

This document summarizes the investigation into how Langroid analyzes handler method parameters in `langroid/agent/base.py`, specifically focusing on the `_analyze_handler_params` method and its role in creating handler wrappers.

## Key Methods and Call Chain

### Call Chain
1. `_get_tool_list()` - Registers tool messages and their handlers
2. `_create_handler_wrapper()` - Creates wrapper functions for handlers
3. `_analyze_handler_params()` - Analyzes handler method signatures

## How _analyze_handler_params Works

The `_analyze_handler_params` method (lines 253-313 in agent/base.py) analyzes a handler method's signature to identify:
- Whether it has type annotations
- Which parameter is the agent parameter
- Which parameter is the chat_doc parameter

### Analysis Process (Updated Implementation)
1. **Type Annotation Check**: First checks if parameters have type annotations
   - **Direct Class Checking** (NEW): For simple class annotations like `Agent` or `ChatAgent`:
     - Uses `inspect.isclass(param.annotation) and issubclass(param.annotation, Agent)`
     - This works because Python stores the actual class object in the annotation
   - **Direct Identity Check** (NEW): For ChatDocument:
     - Uses `param.annotation is ChatDocument` for exact match
   - **String-based Fallback**: For complex type hints like `Optional[Agent]`:
     - Falls back to checking if "Agent" is in the string representation
     - Necessary because complex generic types aren't simple class objects

2. **Fallback to Parameter Names**: If no annotations found
   - Looks for parameter named `agent`
   - Looks for parameter named `chat_doc`

### Key Insight: Type Annotations Are Objects
The crucial realization is that Python's type annotation system stores actual class references when possible:
- `def handler(agent: Agent):` → `param.annotation` contains the actual `Agent` class object
- `def handler(agent: Optional[Agent]):` → `param.annotation` contains a complex type object that requires string inspection
- This allows direct `issubclass()` checks for simple annotations, making the analysis more accurate and robust

## How _create_handler_wrapper Works

Based on the analysis from `_analyze_handler_params`, the wrapper creates different function signatures:
- No parameters → `wrapper(obj)`
- Both agent and chat_doc → `wrapper(obj, chat_doc)` with correct parameter order
- Only agent → `wrapper(obj)` passing agent internally
- Only chat_doc → `wrapper(obj, chat_doc)`

## Why Direct Type Checking Works (Clarification)

Initially, we believed runtime type checking wasn't feasible because we confused two different concepts:

### The Misconception
We thought we needed runtime values to check parameter types, but this was incorrect. The confusion arose from:
1. Thinking we needed actual parameter values to determine their types
2. Not realizing that type annotations are stored as Python objects in the function signature

### The Reality: Static Analysis of Type Annotations
1. **Type annotations are available at definition time**: When Python parses `def handler(agent: Agent):`, it stores the `Agent` class object in the function's signature
2. **No runtime values needed**: We're checking the type annotations themselves, not the runtime values
3. **Direct class comparison is possible**: For simple type hints, `param.annotation` contains the actual class object, allowing `issubclass()` checks

### Why This Approach Works
1. **Setup Time Analysis**: We analyze the handler signature when tools are registered, using the stored annotation objects
2. **Direct Type Checking**: For simple annotations like `Agent`, we can use `issubclass(param.annotation, Agent)`
3. **Fallback for Complex Types**: For generic types like `Optional[Agent]`, we fall back to string matching
4. **Performance**: Still analyzes once at setup, no runtime overhead

## Current Design Benefits
- Analyzes handler signatures once at setup time
- Creates wrappers with exact signatures needed
- No runtime ambiguity about parameter arrangement
- Clear error messages if handler signatures don't match expectations

## Implementation Changes Summary

### Recent Updates to _analyze_handler_params
The method was enhanced to support direct type checking of handler parameters:

1. **Direct Class Checking for Agent Types**:
   ```python
   if inspect.isclass(param.annotation) and issubclass(param.annotation, Agent):
   ```
   - Checks if the annotation is a direct class reference to Agent or its subclasses
   - More accurate than string matching alone

2. **Direct Identity Check for ChatDocument**:
   ```python
   if param.annotation is ChatDocument:
   ```
   - Uses identity comparison for exact ChatDocument type matching

3. **Improved Parameter Extraction**:
   - Changed from `[p for p in params if p.name != "self"]` to `params[1:]`
   - More reliable for removing the 'self' parameter

4. **Fallback Strategy**:
   - Still uses string matching for complex type hints like `Optional[Agent]`
   - Maintains backward compatibility while improving accuracy

## Related PR
This investigation was prompted by PR #861 "MCP updates" which made changes to how `FastMCPServer` forwards image context and resources, and added optional persistence for MCP server connections. The handler parameter analysis improvements were made to support more robust type checking for MCP tool handlers.
</file>

<file path="examples/basic/multi-agent-search-critic-no-orch/main.py">
"""
Version of examples/basic/multi-agent-search-critic/main.py, but does NOT use any
inter-agent orchestration, i.e. we create a separate Task object from each agent,
but we do not connect them as sub-tasks.
Instead we write extra code to handle each task's output, and
determine what to do with it.

3-Agent system where:
- Assistant takes user's (complex) question, breaks it down into smaller pieces
    if needed
- Searcher takes Assistant's question, uses the Search tool to search the web
    (using DuckDuckGo), and returns a coherent answer to the Assistant.
- Critic takes Assistant's final answer, and provides feedback on it.

Once the Assistant thinks it has enough info to answer the user's question, it
says DONE and presents the answer to the user.

See also: chat-search for a basic single-agent search

Run like this from root of repo:

python3 -m examples.basic.multi-agent-search-critic-no-orch.main

There are optional args, especially note these:

-m <model_name>: to run with a different LLM model (default: gpt4o)

For example try this question:

did Bach make more music than Beethoven?

You can specify a local LLM in a few different ways, e.g. `-m local/localhost:8000/v1`
or `-m ollama/mistral` etc. See here how to use Langroid with local LLMs:
https://langroid.github.io/langroid/tutorials/local-llm-setup/


"""

import typer
from dotenv import load_dotenv
from rich import print
from rich.prompt import Prompt

import langroid as lr
from langroid.utils.configuration import Settings, set_global

from .assistant_agent import make_assistant_task
from .critic_agent import make_critic_task
from .search_agent import make_search_task
from .tools import AnswerTool, FeedbackTool, FinalAnswerTool, QuestionTool

app = typer.Typer()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )
    print(
        """
        [blue]Welcome to the Web Search Assistant chatbot!
        I will try to answer your complex questions. 
        
        Enter x or q to quit at any point.
        """
    )
    load_dotenv()

    assistant_task = make_assistant_task(model, restart=False)
    search_task = make_search_task(model)
    critic_task = make_critic_task(model)

    def search_answer(qtool: QuestionTool) -> AnswerTool:
        """
        Take a QuestionTool, return an AnswerTool
        """
        return search_task[AnswerTool].run(qtool)

    def critic_feedback(fa: FinalAnswerTool) -> FeedbackTool:
        """
        Take a FinalAnswerTool, return a FeedbackTool
        """
        return critic_task[FeedbackTool].run(fa)

    def query_to_final_answer(question: str) -> FinalAnswerTool:
        """
        Take user's question, return FinalAnswerTool after
        iterating based on feedback from Critic.
        """

        question_tool_name = QuestionTool.default_value("request")
        final_answer_tool_name = FinalAnswerTool.default_value("request")

        tool = assistant_task[lr.ToolMessage].run(question)

        while True:
            if not isinstance(tool, (QuestionTool, FinalAnswerTool)):
                # no tool => nudge
                tool = assistant_task[lr.ToolMessage].run(
                    f"""
                     You forgot to use one of the tools:
                     `{question_tool_name}` or `{final_answer_tool_name}`.
                     """,
                )
            elif isinstance(tool, QuestionTool):
                # QuestionTool => get search result
                answer_tool = search_answer(tool)
                tool = assistant_task[lr.ToolMessage].run(answer_tool)
            else:
                # FinalAnswerTool => get feedback
                fb_tool = critic_feedback(tool)
                if fb_tool.suggested_fix == "":
                    # no suggested fix => return tool (which is a FinalAnswerTool)
                    return tool
                else:
                    # suggested fix => ask again
                    tool = assistant_task[lr.ToolMessage].run(fb_tool)

    # Interactive loop with user
    while True:
        question = Prompt.ask("What do you want to know?")
        if question.lower() in ["x", "q"]:
            break
        assistant_task.agent.init_state()
        final_answer = query_to_final_answer(question)
        assert isinstance(final_answer, FinalAnswerTool)


if __name__ == "__main__":
    app()
</file>

<file path="examples/basic/done_sequences_example.py">
#!/usr/bin/env python3
"""
Example demonstrating the new done_sequences feature in Langroid Tasks.

This feature allows you to specify sequences of events that trigger task completion,
providing more flexibility than simple done conditions.

You can use either:
1. DSL string patterns for convenience: "T, A" (tool then agent)
2. Full DoneSequence objects for more control

DSL Pattern Syntax:
- T = Any tool
- T[name] = Specific tool
- A = Agent response
- L = LLM response
- U = User response
- N = No response
- C[pattern] = Content matching regex

Note: Sequences use strict matching - events must occur consecutively in the message
chain without intervening messages. This ensures predictable behavior and efficient
matching.
"""

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import (
    AgentEvent,
    DoneSequence,
    EventType,
    Task,
    TaskConfig,
)
from langroid.agent.tool_message import ToolMessage


# Define a simple calculator tool
class CalculatorTool(ToolMessage):
    request: str = "calculator"
    purpose: str = "Perform arithmetic calculations"
    expression: str

    def handle(self) -> str:
        try:
            result = eval(self.expression)
            return f"The result is: {result}"
        except Exception as e:
            return f"Error: {str(e)}"


# Define a search tool
class SearchTool(ToolMessage):
    request: str = "search"
    purpose: str = "Search for information"
    query: str

    def handle(self) -> str:
        # Mock search implementation
        return f"Search results for '{self.query}': [Mock results here]"


def example0_dsl_syntax():
    """Example 0: Using DSL string patterns (recommended for simple cases)"""
    print("\n=== Example 0: DSL String Patterns ===")

    agent = ChatAgent(
        ChatAgentConfig(
            name="Assistant",
            system_message="""
            You are a helpful assistant with access to calculator and search tools.
            Use the appropriate tool when asked to calculate or search for something.
            """,
        )
    )
    agent.enable_message(CalculatorTool, use=True, handle=True)
    agent.enable_message(SearchTool, use=True, handle=True)

    # Using DSL string patterns - much more concise!
    config = TaskConfig(
        done_sequences=[
            "T, A",  # Any tool then agent response
            "T[calculator], A",  # Specific calculator tool
            "C[quit|exit|bye]",  # Content matching pattern
            "L, T, A, L",  # Complex sequence
        ]
    )

    _ = Task(agent, config=config)
    print("Task configured with multiple DSL patterns.")
    print(
        "Will complete on any of: tool use, calculator use, quit words, or L->T->A->L sequence"
    )
    # _ = task.run("What is 25 * 4?")
    # print(f"Final result: {result.content}")


def example1_tool_then_agent():
    """Example 1: Task completes after any tool is generated and handled by agent"""
    print("\n=== Example 1: Tool -> Agent Response ===")

    agent = ChatAgent(
        ChatAgentConfig(
            name="Assistant",
            system_message="""
            You are a helpful assistant with access to calculator and search tools.
            Use the appropriate tool when asked to calculate or search for something.
            """,
        )
    )
    agent.enable_message(CalculatorTool, use=True, handle=True)
    agent.enable_message(SearchTool, use=True, handle=True)

    # Task completes after: Tool -> Agent Response
    # Using DSL (recommended for simple patterns):
    # config = TaskConfig(done_sequences=["T, A"])

    # Using full syntax (for more control):
    config = TaskConfig(
        done_sequences=[
            DoneSequence(
                name="tool_handled",
                events=[
                    AgentEvent(event_type=EventType.TOOL),
                    AgentEvent(event_type=EventType.AGENT_RESPONSE),
                ],
            )
        ]
    )

    task = Task(agent, config=config)
    print("Task will complete after any tool is used and handled.")
    _ = task.run("What is 25 * 4?")
    # print(f"Final result: {_.content}")


def example2_specific_tool_sequence():
    """Example 2: Task completes only after specific tool (calculator) is used"""
    print("\n=== Example 2: Specific Tool Sequence ===")

    agent = ChatAgent(
        ChatAgentConfig(
            name="Assistant",
            system_message="""
            You help users with calculations and searches.
            Always use the appropriate tool.
            """,
        )
    )
    agent.enable_message(CalculatorTool, use=True, handle=True)
    agent.enable_message(SearchTool, use=True, handle=True)

    # Task completes only after calculator tool is used
    config = TaskConfig(
        done_sequences=[
            DoneSequence(
                name="calculation_done",
                events=[
                    AgentEvent(
                        event_type=EventType.SPECIFIC_TOOL, tool_name="calculator"
                    ),
                    AgentEvent(event_type=EventType.AGENT_RESPONSE),
                ],
            )
        ]
    )

    task = Task(agent, config=config)
    print("Task will complete only after calculator tool is used.")
    print("Try: 'Search for Python tutorials' (won't complete task)")
    print("Then try: 'Calculate 15 + 27' (will complete task)")
    _ = task.run()


def example3_conversation_pattern():
    """Example 3: Task completes after specific conversation pattern"""
    print("\n=== Example 3: Conversation Pattern ===")

    agent = ChatAgent(
        ChatAgentConfig(
            name="Assistant",
            system_message="""
            You are a step-by-step assistant. When asked to solve a problem:
            1. First acknowledge the request
            2. Then use the calculator tool
            3. Finally provide a summary of the result
            """,
        )
    )
    agent.enable_message(CalculatorTool, use=True, handle=True)

    # Task completes after: LLM -> Tool -> Agent -> LLM pattern
    config = TaskConfig(
        done_sequences=[
            DoneSequence(
                name="problem_solved",
                events=[
                    AgentEvent(event_type=EventType.LLM_RESPONSE),  # Acknowledgment
                    AgentEvent(event_type=EventType.TOOL),  # Calculator use
                    AgentEvent(event_type=EventType.AGENT_RESPONSE),  # Tool handled
                    AgentEvent(event_type=EventType.LLM_RESPONSE),  # Summary
                ],
            )
        ]
    )

    task = Task(agent, config=config)
    print("Task will complete after: acknowledgment -> tool use -> handling -> summary")
    _ = task.run(
        "I need to calculate the area of a rectangle with width 12 and height 8"
    )


def example4_multiple_completion_paths():
    """Example 4: Multiple ways to complete a task"""
    print("\n=== Example 4: Multiple Completion Paths ===")

    agent = ChatAgent(
        ChatAgentConfig(
            name="Assistant",
            system_message="""
            You help users with various tasks. 
            If they say 'quit' or 'exit', acknowledge and stop.
            Otherwise, help them with calculations or searches.
            """,
        )
    )
    agent.enable_message(CalculatorTool, use=True, handle=True)
    agent.enable_message(SearchTool, use=True, handle=True)

    # Multiple ways to complete the task
    config = TaskConfig(
        done_sequences=[
            # Path 1: User says quit/exit
            DoneSequence(
                name="user_quit",
                events=[
                    AgentEvent(
                        event_type=EventType.CONTENT_MATCH,
                        content_pattern=r"\b(quit|exit|bye|goodbye)\b",
                    ),
                ],
            ),
            # Path 2: Calculator tool used
            DoneSequence(
                name="calculation_done",
                events=[
                    AgentEvent(
                        event_type=EventType.SPECIFIC_TOOL, tool_name="calculator"
                    ),
                    AgentEvent(event_type=EventType.AGENT_RESPONSE),
                ],
            ),
            # Path 3: Two searches performed
            DoneSequence(
                name="double_search",
                events=[
                    AgentEvent(event_type=EventType.SPECIFIC_TOOL, tool_name="search"),
                    AgentEvent(event_type=EventType.AGENT_RESPONSE),
                    AgentEvent(event_type=EventType.SPECIFIC_TOOL, tool_name="search"),
                    AgentEvent(event_type=EventType.AGENT_RESPONSE),
                ],
            ),
        ]
    )

    task = Task(agent, config=config)
    print("Task can complete in 3 ways:")
    print("1. Say 'quit' or 'exit'")
    print("2. Use the calculator tool")
    print("3. Use the search tool twice")
    _ = task.run()


def example5_combining_with_existing_options():
    """Example 5: Combining done_sequences with done_if_tool"""
    print("\n=== Example 5: Combining with Existing Options ===")

    agent = ChatAgent(
        ChatAgentConfig(
            name="Assistant",
            system_message="You are a helpful assistant with tool access.",
        )
    )
    agent.enable_message(CalculatorTool, use=True, handle=True)

    # Combine done_sequences with done_if_tool
    config = TaskConfig(
        done_if_tool=True,  # Quick exit on any tool
        done_sequences=[
            # This won't be reached if done_if_tool triggers first
            DoneSequence(
                name="complex_pattern",
                events=[
                    AgentEvent(event_type=EventType.LLM_RESPONSE),
                    AgentEvent(event_type=EventType.LLM_RESPONSE),
                    AgentEvent(event_type=EventType.TOOL),
                ],
            )
        ],
    )

    task = Task(agent, config=config)
    print("Task will complete as soon as any tool is generated (done_if_tool=True)")
    _ = task.run("Calculate 5 + 5")


if __name__ == "__main__":
    print("Langroid Done Sequences Examples")
    print("=" * 50)

    # Run examples (comment out interactive ones if running all at once)
    example0_dsl_syntax()  # Show DSL syntax
    example1_tool_then_agent()
    # example2_specific_tool_sequence()  # Interactive
    # example3_conversation_pattern()    # May need specific LLM
    # example4_multiple_completion_paths()  # Interactive
    example5_combining_with_existing_options()

    print("\n" + "=" * 50)
    print("Examples completed!")
</file>

<file path="examples/basic/multi-agent-triage.py">
"""
3-agent student assistant system:

- Triage agent: routes questions to the appropriate agent
- Course Agent: answers questions about courses
- Finance Agent: answers questions about finances

Illustrates use of AgentDoneTool, ForwardTool

Run like this (if --model is omitted, it defaults to the GPT-4o model):

python3 examples/basic/multi-agent-triage.py --model groq/llama-3.1-70b-versatile


"""

import os
from typing import Optional

from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.tools.orchestration import (
    AgentDoneTool,
    ForwardTool,
    SendTool,
)
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig
from langroid.parsing.urls import find_urls
from langroid.vector_store.qdrantdb import QdrantDBConfig

os.environ["TOKENIZERS_PARALLELISM"] = "false"

forward_tool_name = ForwardTool.default_value("request")


class FinanceAnswerTool(lr.ToolMessage):
    request: str = "finance_answer_tool"
    purpose: str = "Present the <answer> to a question about finances"

    answer: str

    def handle(self) -> SendTool:
        return SendTool(to="User", content=self.answer)


class CoursesAnswerTool(lr.ToolMessage):
    request: str = "courses_answer_tool"
    purpose: str = "Present the <answer> to a question about courses"

    answer: str

    def handle(self) -> SendTool:
        return SendTool(to="User", content=self.answer)


def main(model: str = ""):
    class TriageAgent(lr.ChatAgent):
        def init_state(self) -> None:
            # self.expecting_course_answer = False
            # self.expecting_finance_answer = False
            super().init_state()
            self.llm_responded = False

        def user_response(
            self,
            msg: Optional[str | ChatDocument] = None,
        ) -> Optional[ChatDocument]:
            self.llm_responded = False
            return super().user_response(msg)

        def llm_response(
            self, message: Optional[str | ChatDocument] = None
        ) -> Optional[ChatDocument]:
            self.llm_responded = True
            return super().llm_response(message)

        def handle_message_fallback(
            self, msg: str | ChatDocument
        ) -> str | ChatDocument | lr.ToolMessage | None:
            """Handle any non-tool msg"""
            if self.llm_responded:
                self.llm_responded = False
                # LLM generated non-tool msg => send to user
                content = msg.content if isinstance(msg, ChatDocument) else msg
                return SendTool(to="User", content=content)

    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        max_output_tokens=200,
        chat_context_length=16_000,
    )

    triage_agent = TriageAgent(
        lr.ChatAgentConfig(
            name="Triage",
            llm=llm_config,
            system_message=f"""
            You are a helpful assistant to students at a university. 
            
            Students may ask about the following TYPES of questions and you must handle 
            each TYPE as specified below:
            
            - (a) COURSES:
                - use the TOOL: `{forward_tool_name}` to forward the 
                    question to the "Courses" agent
            - (b) FINANCES (student loans, scholarships, tuition, dining plans, etc)
                - use the TOOL: `{forward_tool_name}` to forward the
                    question to the "Finance" agent
            - (c) OTHER questions not specific to the university:
                - attempt to answer these based on your own knowledge, 
                  otherwise admit you don't know.
            
            Start by greeting the user and asking them what they need help with.
            """,
        )
    )
    triage_agent.enable_message(ForwardTool)
    triage_agent.enable_message(
        [FinanceAnswerTool, CoursesAnswerTool],
        use=False,
        handle=True,
    )

    triage_task = lr.Task(triage_agent, interactive=False)

    parsing_config = ParsingConfig(  # modify as needed
        chunk_size=200,  # aim for this many tokens per chunk
        overlap=50,  # overlap between chunks
        max_chunks=10_000,
        # aim to have at least this many chars per chunk when
        # truncating due to punctuation
        min_chunk_chars=50,
        discard_chunk_chars=5,  # discard chunks with fewer than this many chars
        n_neighbor_ids=5,  # num chunk IDs to store on either side of each chunk
        pdf=PdfParsingConfig(
            # NOTE: PDF parsing is extremely challenging, and each library
            # has its own strengths and weaknesses.
            # Try one that works for your use case.
            # See here for available alternatives:
            # https://github.com/langroid/langroid/blob/main/langroid/parsing/parser.py
            library="pymupdf4llm",
        ),
    )

    class CoursesAgent(lr.agent.special.DocChatAgent):
        def llm_response(
            self,
            message: None | str | ChatDocument = None,
        ) -> Optional[ChatDocument]:
            answer = super().llm_response(message)
            if answer is None:
                return None
            return self.create_llm_response(
                tool_messages=[
                    AgentDoneTool(tools=[CoursesAnswerTool(answer=answer.content)])
                ]
            )

    course_url = "https://csd.cmu.edu/cs-and-related-undergraduate-courses"

    courses_agent = CoursesAgent(
        config=lr.agent.special.DocChatAgentConfig(
            name="Courses",
            llm=llm_config,
            doc_paths=[course_url],  # contents will be ingested into vecdb
            vecdb=QdrantDBConfig(
                collection_name="courses",
                replace_collection=True,
                storage_path=".qdrantdb/data/",
            ),
            parsing=parsing_config,
            n_neighbor_chunks=3,
            n_similar_chunks=5,
            n_relevant_chunks=5,
        )
    )

    courses_task = lr.Task(courses_agent, interactive=False, single_round=True)

    finance_url = "https://www.cmu.edu/sfs/tuition/index.html"
    all_finance_urls = find_urls(finance_url, max_links=20, max_depth=3)

    class FinanceAgent(lr.agent.special.DocChatAgent):
        def llm_response(
            self,
            message: None | str | ChatDocument = None,
        ) -> Optional[ChatDocument]:
            answer = super().llm_response(message)
            if answer is None:
                return None
            return self.create_llm_response(
                tool_messages=[
                    AgentDoneTool(tools=[FinanceAnswerTool(answer=answer.content)])
                ]
            )

    finance_agent = FinanceAgent(
        config=lr.agent.special.DocChatAgentConfig(
            name="Finance",
            llm=llm_config,
            doc_paths=all_finance_urls,  # contents will be ingested into vecdb
            vecdb=QdrantDBConfig(
                collection_name="finances",
                replace_collection=True,
                storage_path=".qdrantdb/data/",
            ),
            parsing=parsing_config,
            n_neighbor_chunks=3,
            n_similar_chunks=5,
            n_relevant_chunks=5,
        )
    )

    finance_task = lr.Task(finance_agent, interactive=False, single_round=True)

    triage_task.add_sub_task([courses_task, finance_task])

    triage_task.run()


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/basic/planner-workflow.py">
"""
Task: Process a number through a sequence of two steps:
- Burify: increment the number by 3
- Tonify: multiply the number by 4

Planner Agent oversees the process, using two worker agents:
- BurifyAgent: handles the Burify step
- TonifyAgent: handles the Tonify step

Planner checks intermediate results and provides feedback to worker agents,
until their step is complete, before proceeding to the next step.

Run like this from repo root (omit `-m` to use default model gpt-4.1-mini):

    uv run examples/basic/planner-workflow.py -m gpt-4.1-mini
"""

import logging
from typing import List

from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import AgentDoneTool, ForwardTool
from langroid.pydantic_v1 import Field

logger = logging.getLogger(__name__)
MODEL = lm.OpenAIChatModel.GPT4_1_MINI


class BurifyTool(lr.ToolMessage):
    request: str = "burify_tool"
    purpose: str = "To apply the 'Burify' process to a <number>"
    number: int = Field(..., description="The number (int) to Burify")

    def handle(self) -> str:
        # stateless tool: handler used in BurifyAgent
        return f"Burify this number: {self.number}"


class TonifyTool(lr.ToolMessage):
    request: str = "tonify_tool"
    purpose: str = "To apply the 'Tonify' process to a <number>"
    number: int = Field(..., description="The number (int) to Tonify")

    def handle(self) -> str:
        # stateless tool: handler used in TonifyAgent
        return f"Tonify this number: {self.number}"


class BurifyCheckTool(lr.ToolMessage):
    request: str = "burify_check_tool"
    purpose: str = "To check if the Burify process is complete"
    number: int = Field(..., description="The number (int) to check")
    original_number: int = Field(
        ...,
        description="The original number (int) given to the BurifyAgent",
    )

    def handle(self) -> str:
        # stateless tool
        if self.number == self.original_number + 3:
            return AcceptTool(result=self.number)
        else:
            return BurifyRevisionTool(
                feedback="Burify is NOT complete! Please try again.",
                recipient="Burify",
            )


class TonifyCheckTool(lr.ToolMessage):
    request: str = "tonify_check_tool"
    purpose: str = "To check if the Tonify process is complete"
    number: int = Field(..., description="The number (int) to check")
    original_number: int = Field(
        ...,
        description="The original number (int) given to the TonifyAgent",
    )

    def handle(self):
        # stateless tool
        if self.number == self.original_number * 4:
            return AcceptTool(result=self.number)
        else:
            return TonifyRevisionTool(
                feedback="Tonify is NOT complete! Please try again.",
                recipient="Tonify",
            )


class BurifyRevisionTool(lr.ToolMessage):
    request: str = "burify_revision_tool"
    purpose: str = "To give <feedback> to the  'BurifyAgent' on their Burify Attempt"
    feedback: str = Field(..., description="Feedback for the BurifyAgent")

    def handle(self):
        return f"""
        Below is feedback on your attempt to Burify: 
        <Feedback>
        {self.feedback}
        </Feedback>
        Please try again!
        """


class TonifyRevisionTool(lr.ToolMessage):
    request: str = "tonify_revision_tool"
    purpose: str = "To give <feedback> to the  'TonifyAgent' on their Tonify Attempt"
    feedback: str = Field(..., description="Feedback for the TonifyAgent")

    def handle(self):
        return f"""
        Below is feedback on your attempt to Tonify: 
        <Feedback>
        {self.feedback}
        </Feedback>
        Please try again!
        """


class BurifySubmitTool(lr.ToolMessage):
    request: str = "burify_submit_tool"
    purpose: str = "To submit the result of an attempt of the Burify process"
    result: int = Field(..., description="The result (int) to submit")

    def handle(self):
        return AgentDoneTool(content=str(self.result))


class TonifySubmitTool(lr.ToolMessage):
    request: str = "tonify_submit_tool"
    purpose: str = "To submit the result of an attempt of the Tonify process"
    result: int = Field(..., description="The result (int) to submit")

    def handle(self):
        return AgentDoneTool(content=str(self.result))


class AcceptTool(lr.ToolMessage):
    request: str = "accept_tool"
    purpose: str = "To accept the result of the 'Burify' or 'Tonify' process"
    result: int


class PlannerConfig(lr.ChatAgentConfig):
    name: str = "Planner"
    steps: List[str] = ["Burify", "Tonify"]
    handle_llm_no_tool: str = "You FORGOT to use one of your TOOLs!"
    system_message: str = f"""
    You are a Planner in charge of PROCESSING a given integer through
    a SEQUENCE of 2 processing STEPS, which you CANNOT do by yourself, but you must
    rely on WORKER AGENTS who will do these for you:
    - Burify - will be done by the BurifyAgent
    - Tonify - will be done by the TonifyAgent
    
    In order to INITIATE each process, you MUST use the appropriate TOOLs:
    - `{BurifyTool.name()}` to Burify the number (the tool will be handled by the BurifyAgent)
    - `{TonifyTool.name()}` to Tonify the number (the tool will be handled by the TonifyAgent)
    
    Each of the WORKER AGENTS works like this:
    - The Agent will ATTEMPT a processing step, using the number you give it.
    - You will VERIFY whether the processing step is COMPLETE or NOT
         using the CORRESPONDING CHECK TOOL:
         - check if the Burify step is complete using the `{BurifyCheckTool.name()}`
         - check if the Tonify step is complete using the `{TonifyCheckTool.name()}`
    - If the step is NOT complete, you will ask the Agent to try again,
        by using the CORRESPONDING Revision TOOL where you can include your FEEDBACK: 
        - `{BurifyRevisionTool.name()}` to revise the Burify step
        - `{TonifyRevisionTool.name()}` to revise the Tonify step
    - If you determine (see below) that the step is COMPLETE, you MUST
        use the `{AcceptTool.name()}` to ACCEPT the result of the step.    
    """


class PlannerAgent(lr.ChatAgent):
    current_step: int
    current_num: int
    original_num: int

    def __init__(self, config: PlannerConfig):
        super().__init__(config)
        self.config: PlannerConfig = config
        self.current_step = 0
        self.current_num = 0

    def burify_tool(self, msg: BurifyTool) -> str:
        """Handler of BurifyTool: uses/updates Agent state"""
        self.original_num = msg.number
        logger.warning(f"Planner handled BurifyTool: {self.current_num}")

        return ForwardTool(agent="Burify")

    def tonify_tool(self, msg: TonifyTool) -> str:
        """Handler of TonifyTool: uses/updates Agent state"""
        self.original_num = msg.number
        logger.warning(f"Planner handled TonifyTool: {self.current_num}")

        return ForwardTool(agent="Tonify")

    def accept_tool(self, msg: AcceptTool) -> str:
        """Handler of AcceptTool: uses/updates Agent state"""
        curr_step_name = self.config.steps[self.current_step]
        n_steps = len(self.config.steps)
        self.current_num = msg.result
        if self.current_step == n_steps - 1:
            # last step -> done
            return AgentDoneTool(content=str(self.current_num))

        self.current_step += 1
        next_step_name = self.config.steps[self.current_step]
        return f"""
            You have ACCEPTED the result of the {curr_step_name} step.
            Your next step is to apply the {next_step_name} process
            to the result of the {curr_step_name} step, which is {self.current_num}.
            So use a TOOL to initiate the {next_step_name} process!
            """


class BurifyAgentConfig(lr.ChatAgentConfig):
    name: str = "Burify"
    handle_llm_no_tool: str = f"You FORGOT to use the TOOL `{BurifySubmitTool.name()}`!"
    system_message: str = f"""
    You will receive an integer from your supervisor, to apply
    a process Burify to it, which you are not quite sure how to do,
    but you only know that it involves INCREMENTING the number by 1 a few times
    (but you don't know how many times).
    When you first receive a number to Burify, simply return the number + 1.
    If this is NOT sufficient, you will be asked to try again, and 
    you must CONTINUE to return your last number, INCREMENTED by 1.
    To send your result, you MUST use the TOOL `{BurifySubmitTool.name()}`. 
    """


class TonifyAgentConfig(lr.ChatAgentConfig):
    name: str = "Tonify"
    handle_llm_no_tool: str = f"You FORGOT to use the TOOL `{TonifySubmitTool.name()}`!"
    system_message: str = f"""
    You will receive an integer from your supervisor, to apply
    a process Tonify to it, which you are not quite sure how to do,
    but you only know that it involves MULTIPLYING the number by 2 a few times
    (and you don't know how many times).
    When you first receive a number to Tonify, simply return the number * 2.
    If this is NOT sufficient, you will be asked to try again, and 
    you must CONTINUE to return your last number, MULTIPLIED by 2.
    To send your result, you MUST use the TOOL `{TonifySubmitTool.name()}`.
    """


def main(model: str = ""):
    planner = PlannerAgent(
        PlannerConfig(
            llm=lm.OpenAIGPTConfig(
                chat_model=model or MODEL,
            )
        ),
    )

    planner.enable_message(
        [
            BurifyRevisionTool,
            TonifyRevisionTool,
        ],
        use=True,  # LLM allowed to generate
        handle=False,  # agent cannot handle
    )

    planner.enable_message(  # can use and handle
        [
            AcceptTool,
            BurifyCheckTool,
            TonifyCheckTool,
            BurifyTool,
            TonifyTool,
        ]
    )

    burifier = lr.ChatAgent(
        BurifyAgentConfig(
            llm=lm.OpenAIGPTConfig(
                chat_model=model or MODEL,
            )
        )
    )
    burifier.enable_message(
        [
            BurifyTool,
            BurifyRevisionTool,
        ],
        use=False,  # LLM cannot generate
        handle=True,  # agent can handle
    )
    burifier.enable_message(BurifySubmitTool)

    tonifier = lr.ChatAgent(
        TonifyAgentConfig(
            llm=lm.OpenAIGPTConfig(
                chat_model=model or MODEL,
            )
        )
    )

    tonifier.enable_message(
        [
            TonifyTool,
            TonifyRevisionTool,
        ],
        use=False,  # LLM cannot generate
        handle=True,  # agent can handle
    )
    tonifier.enable_message(TonifySubmitTool)

    planner_task = lr.Task(planner, interactive=False)
    burifier_task = lr.Task(burifier, interactive=False)
    tonifier_task = lr.Task(tonifier, interactive=False)

    planner_task.add_sub_task(
        [
            burifier_task,
            tonifier_task,
        ]
    )

    # Buify(5) = 5+3 = 8; Tonify(8) = 8*4 = 32
    result = planner_task.run("Sequentially all processes to this number: 5")
    assert "32" in result.content, f"Expected 32, got {result.content}"


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/chainlit/non-callback/chat-doc-qa-no-callback.py">
"""
Basic single-agent chat example, without streaming.

DEPCRECATED: Script kept only for reference. Best way is to use ChainlitAgentCallbacks,
as in chat-doc-qa.py

After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/chat-doc-qa-no-callback.py

Note, to run this with a local LLM, you can click the settings symbol
on the left of the chat window and enter the model name, e.g.:

ollama/mistral:7b-instruct-v0.2-q8_0

or

local/localhost:8000/v1"

depending on how you have set up your local LLM.

For more on how to set up a local LLM to work with Langroid, see:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

"""

import chainlit as cl

import langroid.language_models as lm
import langroid.parsing.parser as lp
from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig


async def setup_agent() -> None:
    model = cl.user_session.get("settings", {}).get("ModelName")
    print(f"Using model: {model}")
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        # or, other possibilities for example:
        # "litellm/bedrock/anthropic.claude-instant-v1"
        # "ollama/llama2"
        # "local/localhost:8000/v1"
        # "local/localhost:8000"
        chat_context_length=16_000,  # adjust based on model
        timeout=90,
    )

    config = DocChatAgentConfig(
        n_query_rephrases=0,
        hypothetical_answer=False,
        # set it to > 0 to retrieve a window of k chunks on either side of a match
        n_neighbor_chunks=0,
        n_similar_chunks=3,
        n_relevant_chunks=3,
        llm=llm_config,
        parsing=lp.ParsingConfig(  # modify as needed
            splitter=lp.Splitter.TOKENS,
            chunk_size=300,  # aim for this many tokens per chunk
            overlap=30,  # overlap between chunks
            max_chunks=10_000,
            n_neighbor_ids=5,  # store ids of window of k chunks around each chunk.
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=lp.PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="pymupdf4llm",
            ),
        ),
    )
    agent = DocChatAgent(config)
    cl.user_session.set("agent", agent)
    file = cl.user_session.get("file")
    msg = cl.Message(content=f"Processing `{file.name}`...", disable_feedback=True)
    await msg.send()
    agent.ingest_doc_paths([file.path])
    msg.content = f"Processing `{file.name}` done. Ask questions!"
    await msg.update()


@cl.on_settings_update
async def update_agent(settings):
    cl.user_session.set("settings", settings)
    await setup_agent()


@cl.on_chat_start
async def on_chat_start():
    await cl.ChatSettings(
        [
            cl.input_widget.TextInput(
                id="ModelName",
                label="Model Name (Default GPT4-Turbo)",
                default="",
            )
        ]
    ).send()

    # get file
    files = None
    # Wait for the user to upload a file
    while files is None:
        files = await cl.AskFileMessage(
            content="Please upload a text file to begin!",
            accept=["text/plain"],
            max_size_mb=20,
            timeout=180,
        ).send()

    file = files[0]
    print(f"got file: {file.name}")
    cl.user_session.set("file", file)
    await setup_agent()


@cl.on_message
async def on_message(message: cl.Message):
    agent: DocChatAgent = cl.user_session.get("agent")
    msg = cl.Message(content="")

    # need to do this since DocChatAgent does not have an async version of llm_response
    response = await cl.make_async(agent.llm_response)(message.content)
    msg.content = response.content
    await msg.send()
</file>

<file path="examples/chainlit/chat-doc-qa.py">
"""
Document question-answering using RAG on a single file, using ChainlitAgentCallbacks.

After setting up the virtual env as in README,
and you have your OpenAI API Key in the .env file, run like this:

chainlit run examples/chainlit/chat-doc-qa.py

Note, to run this with a local LLM, you can click the settings symbol
on the left of the chat window and enter the model name, e.g.:

ollama/mistral:7b-instruct-v0.2-q8_0

or

local/localhost:8000/v1"

depending on how you have set up your local LLM.

For more on how to set up a local LLM to work with Langroid, see:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

"""

from textwrap import dedent

import chainlit as cl

import langroid as lr
import langroid.parsing.parser as lp
from langroid.agent.callbacks.chainlit import (
    SYSTEM,
    add_instructions,
    get_text_files,
    make_llm_settings_widgets,
    setup_llm,
    update_llm,
)
from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig
from langroid.utils.constants import NO_ANSWER


async def initialize_agent() -> None:
    await setup_llm()
    llm_config = cl.user_session.get("llm_config")
    config = DocChatAgentConfig(
        name="DocAgent",
        n_query_rephrases=0,
        hypothetical_answer=False,
        # set it to > 0 to retrieve a window of k chunks on either side of a match
        n_neighbor_chunks=0,
        n_similar_chunks=3,
        n_relevant_chunks=3,
        llm=llm_config,
        parsing=lp.ParsingConfig(  # modify as needed
            splitter=lp.Splitter.TOKENS,
            chunk_size=300,  # aim for this many tokens per chunk
            overlap=30,  # overlap between chunks
            max_chunks=10_000,
            n_neighbor_ids=5,  # store ids of window of k chunks around each chunk.
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=lp.PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="pymupdf4llm",
            ),
        ),
    )
    agent = DocChatAgent(config)
    cl.user_session.set("agent", agent)


@cl.on_settings_update
async def on_update(settings):
    await update_llm(settings)
    await initialize_agent()


@cl.on_chat_start
async def on_chat_start():
    await add_instructions(
        title="Basic Doc-Question-Answering using RAG (Retrieval Augmented Generation).",
        content=dedent(
            """
        **Upload** a document (click the attachment button in the chat dialog) and ask questions.
        **Change LLM settings** by clicking the settings symbol on the left of the chat window.
        
        You can keep uploading more documents, and questions will be answered based on all documents.
        """
        ),
    )

    await make_llm_settings_widgets()

    cl.user_session.set("callbacks_inserted", False)
    await initialize_agent()


@cl.on_message
async def on_message(message: cl.Message):
    agent: DocChatAgent = cl.user_session.get("agent")
    file2path = await get_text_files(message)
    agent.callbacks.show_start_response(entity="llm")
    if len(file2path) > 0:
        n_files = len(file2path)
        waiting = cl.Message(
            author=SYSTEM, content=f"Received {n_files} files. Ingesting..."
        )
        await waiting.send()
        agent.ingest_doc_paths(list(file2path.values()))
        file_or_files = "file" if n_files == 1 else "files"
        file_list = "\n".join([f"- `{file}`" for file in file2path.keys()])
        waiting.content = dedent(
            f"""
            Ingested `{n_files}` {file_or_files}:
            {file_list}
            """
        )
        await waiting.update()

    if not cl.user_session.get("callbacks_inserted", False):
        # first time user entered a msg, so inject callbacks and display first msg
        lr.ChainlitAgentCallbacks(agent)

    # Note DocChatAgent has no llm_response_async,
    # so we use llm_response with make_async
    response: lr.ChatDocument | None = await cl.make_async(agent.llm_response)(
        message.content
    )
    if response.content.strip() == NO_ANSWER:
        # in this case there were no relevant extracts
        # and we never called the LLM, so response was not shown in UI,
        # hence we need to send it here
        # TODO: It is possible the LLM might have already responded with NO_ANSWER,
        # so we may be duplicating the response here.
        agent.callbacks.show_llm_response(content=NO_ANSWER)
</file>

<file path="examples/chainlit/chat-search-rag.py">
"""
Single-agent question-answering system that has access to
Metaphor web search when needed,
and in case a web search is used, ingests contents into a vector-db,
and uses Retrieval Augmentation to answer the question.

This is a chainlit UI version of examples/docqa/chat-search.py

Run like this:

    chainlit run examples/chainlit/chat-search-rag.py


(See here for guide to using local LLMs with Langroid:)
https://langroid.github.io/langroid/tutorials/local-llm-setup/
"""

import logging
from textwrap import dedent
from typing import Any, List, Optional

import chainlit as cl
import typer

import langroid as lr
import langroid.language_models as lm
from langroid.agent.callbacks.chainlit import (
    add_instructions,
    make_llm_settings_widgets,
    setup_llm,
    update_llm,
)
from langroid.agent.chat_agent import ChatAgent, ChatDocument
from langroid.agent.special.doc_chat_agent import (
    DocChatAgent,
    DocChatAgentConfig,
)
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import ForwardTool
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.parsing.web_search import metaphor_search
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import NO_ANSWER

logger = logging.getLogger(__name__)

app = typer.Typer()


class RelevantExtractsTool(ToolMessage):
    request = "relevant_extracts"
    purpose = "Get docs/extracts relevant to the <query>, from prior search results"
    query: str

    @classmethod
    def examples(cls) -> List["ToolMessage"]:
        return [
            cls(query="when was the Mistral LLM released?"),
        ]

    @classmethod
    def instructions(cls) -> str:
        return """
        IMPORTANT: You must include an ACTUAL query in the `query` field,
        """


class RelevantSearchExtractsTool(ToolMessage):
    request = "relevant_search_extracts"
    purpose = (
        "Perform an internet search for up to <num_results> results "
        "relevant to the <query>"
    )

    query: str
    num_results: int = 3

    @classmethod
    def examples(cls) -> List["ToolMessage"]:
        return [
            cls(
                query="when was the Mistral LLM released?",
                num_results=3,
            ),
        ]

    @classmethod
    def instructions(cls) -> str:
        return """
        IMPORTANT: You must include an ACTUAL query in the `query` field,
        """


class SearchDocChatAgent(DocChatAgent):
    tried_vecdb: bool = False

    def llm_response_async(
        self,
        message: None | str | ChatDocument = None,
    ) -> Optional[ChatDocument]:
        return ChatAgent.llm_response_async(self, message)

    def handle_message_fallback(self, msg: str | ChatDocument) -> Any:
        if isinstance(msg, ChatDocument) and msg.metadata.sender == lr.Entity.LLM:
            # non-tool LLM msg => forward to User
            return ForwardTool(agent="User")

    def relevant_extracts(self, msg: RelevantExtractsTool) -> str:
        """Get docs/extracts relevant to the query, from vecdb"""
        self.tried_vecdb = True
        self.callbacks.show_start_response(entity="agent")
        query = msg.query
        logger.info(f"Trying to get relevant extracts for query: {query}")
        _, extracts = self.get_relevant_extracts(query)
        if len(extracts) == 0:
            return """
            No extracts found! You can try doing a web search with the
            `relevant_search_extracts` tool/function-call.
            """
        return "\n".join(str(e) for e in extracts)

    def relevant_search_extracts(self, msg: RelevantSearchExtractsTool) -> str:
        """Get docs/extracts relevant to the query, from a web search"""
        if not self.tried_vecdb and len(self.original_docs) > 0:
            return "Please try the `relevant_extracts` tool, before using this tool"
        query = msg.query
        num_results = msg.num_results
        self.callbacks.show_start_response(entity="agent")
        results = metaphor_search(query, num_results)
        links = [r.link for r in results]
        self.config.doc_paths = links
        self.ingest()
        _, extracts = self.get_relevant_extracts(query)
        if len(extracts) == 0:
            return """
            No release search results found! You can try 
            rephrasing your query to see if results improve, using the
            `relevant_search_extracts` tool/function-call.
            """
        return "\n".join(str(e) for e in extracts)


async def setup_agent_task():
    """Set up Agent and Task from session settings state."""

    # set up LLM and LLMConfig from settings state
    await setup_llm()
    llm_config = cl.user_session.get("llm_config")

    set_global(
        Settings(
            debug=False,
            cache=True,
        )
    )

    config = DocChatAgentConfig(
        name="Searcher",
        llm=llm_config,
        n_similar_chunks=3,
        n_relevant_chunks=3,
        system_message=f"""
        You are a savvy, tenacious, persistent researcher, who knows when to search the 
        internet for an answer.
        
        You will try your best to answer my questions,
        in this order of preference:
        1. If you can answer from your own knowledge, simply return the answer
        2. Otherwise, use the `relevant_extracts` tool/function to
            ask me for some relevant text, and I will send you.  
            Then answer based on the relevant text.
            If I say {NO_ANSWER}, it means I found no relevant docs, and you can try 
            the next step, using a web search.
        3. If you are still unable to answer, you can use the `relevant_search_extracts`
           tool/function-call to get some text from a web search. Answer the question
           based on these text pieces.
        4. If you still can't answer, simply say {NO_ANSWER} 
        5. Be tenacious and persistent, DO NOT GIVE UP. Try asking your questions
        differently to arrive at an answer.
        
        Remember to always FIRST try `relevant_extracts` to see if there are already 
        any relevant docs, before trying web-search with `relevant_search_extracts`.
        
        Be very concise in your responses, use no more than 1-2 sentences.
        When you answer based on provided documents, be sure to show me 
        the SOURCE(s) and EXTRACT(s), for example:
        
        SOURCE: https://www.wikihow.com/Be-a-Good-Assistant-Manager
        EXTRACT: Be a Good Assistant ... requires good leadership skills.
        
        For the EXTRACT, ONLY show up to first 3 words, and last 3 words.
        """,
        parsing=ParsingConfig(  # modify as needed
            splitter=Splitter.TOKENS,
            chunk_size=200,  # aim for this many tokens per chunk
            overlap=30,  # overlap between chunks
            max_chunks=10_000,
            n_neighbor_ids=5,  # store ids of window of k chunks around each chunk.
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="pymupdf4llm",
            ),
        ),
    )

    agent = SearchDocChatAgent(config)
    agent.enable_message(RelevantExtractsTool)
    agent.enable_message(RelevantSearchExtractsTool)
    collection_name = "chainlit-chat-search-rag"

    agent.vecdb.set_collection(collection_name, replace=True)

    # set up task with interactive=False, so awaits user ONLY
    # when LLM sends  non-tool msg (see handle_message_fallback method).
    task = Task(agent, interactive=False)
    cl.user_session.set("agent", agent)
    cl.user_session.set("task", task)


@cl.on_settings_update
async def on_update(settings):
    await update_llm(settings)
    await setup_agent_task()


@cl.on_chat_start
async def chat() -> None:
    await add_instructions(
        title="Welcome to the Internet Search + RAG chatbot!",
        content=dedent(
            """
        Ask me anything, especially about recent events that I may not have been trained on.
        
        I have access to two Tools, which I will try to use in order of priority:
        - `relevant_extracts` to try to answer your question using Retrieval Augmented Generation
           from prior search results ingested into a vector-DB (from prior searches in this session),
           and failing this, I will use my second tool:
        - `relevant_search_extracts` to do a web search (Using Metaphor Search)
        and ingest the results into the vector-DB, and then use 
        Retrieval Augmentation Generation (RAG) to answer the question.
        """
        ),
    )

    await make_llm_settings_widgets(
        lm.OpenAIGPTConfig(
            timeout=180,
            chat_context_length=16_000,
            chat_model="",
            temperature=0.1,
        )
    )
    await setup_agent_task()


@cl.on_message
async def on_message(message: cl.Message):
    task = cl.user_session.get("task")
    lr.ChainlitTaskCallbacks(task)
    await task.run_async(message.content)
</file>

<file path="examples/chainlit/extract-then-chat.py">
"""
3-Agent system to first extract a few pieces of info, then chat with user.

- Assistant: helps user answer questions about a Book. But first it needs to
    extract some information from a document about the Book, using Extractor.
- Extractor: generates questions about the Book document, one by one,
    then returns all info to Assistant using a tool message.
- DocAgent: answers the questions generated by Extractor, based on the Book doc.

Run like this:

chainlit run examples/chainlit/extract-then-chat.py

"""

import os
from textwrap import dedent
from typing import List

import chainlit as cl
from dotenv import load_dotenv

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.callbacks.chainlit import add_instructions
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig
from langroid.pydantic_v1 import BaseModel
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE, NO_ANSWER, PASS, SEND_TO

os.environ["TOKENIZERS_PARALLELISM"] = "false"


class BookInfo(BaseModel):
    title: str
    author: str
    year: int


class BookInfoTool(ToolMessage):
    request: str = "book_info"
    purpose: str = "Collect <info> about Books"

    info: List[BookInfo]

    def handle(self) -> str:
        """Exit task and pass tool to parent"""
        return DONE + " " + PASS

    @classmethod
    def examples(cls) -> List["BookInfoTool"]:
        return [
            cls(
                info=[
                    BookInfo(title="The Hobbit", author="J.R.R. Tolkien", year=1937),
                    BookInfo(
                        title="The Great Gatsby",
                        author="F. Scott Fitzgerald",
                        year=1925,
                    ),
                ]
            )
        ]


class Assistant(ChatAgent):
    def book_info(self, msg: BookInfoTool) -> str:
        # convert info  to NON-JSON so it doesn't look like a tool,
        # and insert routing so that the Assistan't LLM responds to it, not user.
        info_str = str(msg.info).replace("{", "[").replace("}", "]")
        return f"""{SEND_TO}LLM
        Below is INFO about various books, you received from the Extractor.
        Now ask the user what help they need, and respond ONLY based on this INFO.
        
        INFO: 
        {info_str} 
        """


class Extractor(ChatAgent):
    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        """Nudge LLM when it fails to use book_info correctly"""
        if self.has_tool_message_attempt(msg):
            return """
            You must use the "book_info" tool to present the info.
            You either forgot to use it, or you used it with the wrong format.
            Make sure all fields are filled out and pay attention to the 
            required types of the fields.
            """


@cl.on_chat_start
async def on_chat_start():
    await add_instructions(
        title="Hello! I am your book info helper. "
        "First I will get info about some books",
        content=dedent(
            """
        Enter `x` or `q` to quit at any point.
        """
        ),
    )

    load_dotenv()

    set_global(
        Settings(
            debug=False,
            cache=True,  # disables cache lookup; set to True to use cache
        )
    )

    llm_cfg = lm.OpenAIGPTConfig(
        # or, e.g. "ollama/mistral:7b-instruct-v0.2-q8_0" but result may be brittle
        chat_model=lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,  # adjust based on model
    )
    doc_agent = DocChatAgent(
        DocChatAgentConfig(
            llm=llm_cfg,
            n_neighbor_chunks=2,
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                chunk_size=50,
                overlap=10,
                n_neighbor_ids=4,
            ),
            vecdb=lr.vector_store.QdrantDBConfig(
                collection_name="book_info",
                replace_collection=True,
                storage_path=".qdrant/data/",
                cloud=False,
                embedding=lr.embedding_models.SentenceTransformerEmbeddingsConfig(
                    model_type="sentence-transformer",
                    model_name="BAAI/bge-large-en-v1.5",
                ),
            ),
            cross_encoder_reranking_model="",
        )
    )
    doc_agent.ingest_doc_paths(["examples/chainlit/books.txt"])
    doc_task = Task(
        doc_agent,
        name="DocAgent",
        done_if_no_response=[Entity.LLM],  # done if null response from LLM
        done_if_response=[Entity.LLM],  # done if non-null response from LLM
        # Don't use system_message here since it will override doc chat agent's
        # default system message
    )

    extractor_agent = Extractor(
        ChatAgentConfig(
            llm=llm_cfg,
            vecdb=None,
        )
    )
    extractor_agent.enable_message(BookInfoTool)

    extractor_task = Task(
        extractor_agent,
        name="Extractor",
        interactive=False,  # set to True to slow it down (hit enter to progress)
        system_message=f"""
        You are an expert at understanding JSON function/tool specifications.
        You must extract information about various books from a document,
        to finally present the info using the `book_info` tool/function,
        but you do not have access to the document. 
        I can help with your questions about the document.
        You have to ask questions in these steps:
        1. ask which books are in the document
        2. for each book, ask the various pieces of info you need.
        
        If I am unable to answer your question initially, try asking differently,
        and if I am still unable to answer after 3 tries, 
        fill in {NO_ANSWER} for that field. 
        Think step by step. 
        
        Do not explain yourself, or say any extraneous things. 
        When you receive the answer, then ask for the next field, and so on.
        """,
    )

    assistant_agent = Assistant(
        ChatAgentConfig(
            llm=llm_cfg,
            vecdb=None,
        )
    )
    assistant_agent.enable_message(lr.agent.tools.RecipientTool)
    # enable assistant to HANDLE the book_info tool but not USE it
    assistant_agent.enable_message(BookInfoTool, use=False, handle=True)
    assistant_task = Task(
        assistant_agent,
        name="Assistant",
        interactive=True,
        system_message="""
        You are a helpful librarian, answering my (the user) questions about 
        books described in a certain document, and you do NOT know which 
        books are in the document.
        
        FIRST you need to ask the "Extractor" to collect information
        about various books that are in a certain document. Address your request to the 
        Extractor using the 'recipient_message' tool/function. 
        
        Once you receive the information, you should then ask me (the user) 
        what I need help with.                
        """,
    )

    assistant_task.add_sub_task([extractor_task])
    extractor_task.add_sub_task([doc_task])

    lr.ChainlitTaskCallbacks(assistant_task)
    # must use run() instead of run_async() because DocChatAgent
    # does not have an async llm_response method
    await assistant_task.run_async()
</file>

<file path="examples/chainlit/multi-extract-3.py">
"""
TODO: Fix this example, it fails due to breaking changes in Chainlit

3-Agent system to extract structured information from a document.
(This is a chainlit version of examples/docqa/chat-multi-extract-3.py)

- LeaseExtractor: is tasked with extracting structured information from a
    commercial lease document, and must present the terms in a specific nested JSON
    format. This agent generates questions corresponding to each field in the JSON
    format.
- Validator: This agent detects if LeaseExtractorAgent's message is asking for ONE
    piece of information, or MULTIPLE pieces. If the message is only asking about ONE
    thing, OR if it is NOT EVEN a question, it responds with "DONE" and says nothing.
    If the message is asking MORE THAN ONE thing, it responds with a message asking to
    only ask ONE question at a time.
    [Why restrict to one question at a time? Because the DocAgent is more likely to
    understand and answer a single question at a time]

- DocAgent: This agent answers the questions generated by LeaseExtractorAgent,
    based on the lease document it has access to via vecdb, using RAG.

Run like this:

```
chainlit run examples/chainlit/multi-extract-3.py
```

Edit the `model` argument in main() fn below to change the model.
If you set it to "", it will default to the GPT4-turbo model.


For more on setting up local LLMs with Langroid, see here:
https://langroid.github.io/langroid/tutorials/local-llm-setup/
"""

import json
import os
from typing import List

import chainlit as cl
from rich import print

import langroid as lr
import langroid.language_models as lm
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig
from langroid.pydantic_v1 import BaseModel
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE, NO_ANSWER

os.environ["TOKENIZERS_PARALLELISM"] = "false"


class LeasePeriod(BaseModel):
    start_date: str
    end_date: str


class LeaseFinancials(BaseModel):
    monthly_rent: str
    deposit: str


class Lease(BaseModel):
    """
    Various lease terms.
    Nested fields to make this more interesting/realistic
    """

    period: LeasePeriod
    financials: LeaseFinancials
    address: str


class LeaseMessage(ToolMessage):
    """Tool/function to use to present details about a commercial lease"""

    request: str = "lease_info"
    purpose: str = """
        Collect information about a Commercial Lease.
        """
    terms: Lease
    result: str = ""

    def handle(self) -> str:
        print(
            f"""
        DONE! Successfully extracted Lease Info:
        {self.terms}
        """
        )
        return "DONE " + json.dumps(self.terms.dict())

    @classmethod
    def format_instructions(cls, tool: bool = False) -> str:
        instr = super().format_instructions(tool)
        instr += """
        ------------------------------
        ASK ME QUESTIONS ONE BY ONE, to FILL IN THE FIELDS 
        of the `lease_info` function/tool.
        First ask me for the start date of the lease.
        DO NOT ASK ANYTHING ELSE UNTIL YOU RECEIVE MY ANSWER.
        """
        return instr

    @classmethod
    def examples(cls) -> List["LeaseMessage"]:
        return [
            cls(
                terms=Lease(
                    period=LeasePeriod(start_date="2021-01-01", end_date="2021-12-31"),
                    financials=LeaseFinancials(monthly_rent="$1000", deposit="$1000"),
                    address="123 Main St, San Francisco, CA 94105",
                ),
                result="",
            ),
        ]


@cl.on_chat_start
async def main(
    debug: bool = False,
    model: str = "",  # or e.g. "ollama/nous-hermes2-mixtral",
    cache: bool = False,  # disables cache lookup; set to True to use cache
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=cache,
        )
    )
    llm_cfg = OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,  # adjust based on model
        temperature=0,
        timeout=45,
    )
    doc_agent = DocChatAgent(
        DocChatAgentConfig(
            llm=llm_cfg,
            n_neighbor_chunks=2,
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                chunk_size=50,
                overlap=10,
                n_neighbor_ids=4,
            ),
            cross_encoder_reranking_model="",
        )
    )
    doc_agent.vecdb.set_collection("docqa-chat-multi-extract", replace=True)
    print("[blue]Welcome to the real-estate info-extractor!")
    doc_agent.config.doc_paths = [
        "examples/docqa/lease.txt",
    ]
    doc_agent.ingest()
    doc_task = Task(
        doc_agent,
        name="DocAgent",
        done_if_no_response=[Entity.LLM],  # done if null response from LLM
        done_if_response=[Entity.LLM],  # done if non-null response from LLM
        system_message="""You are an expert on Commercial Leases. 
        You will receive various questions about a Commercial 
        Lease contract, along with some excerpts from the Lease.
        Your job is to answer them concisely in at most 2 sentences.
        """,
    )

    lease_extractor_agent = ChatAgent(
        ChatAgentConfig(
            llm=llm_cfg,
            vecdb=None,
        )
    )
    lease_extractor_agent.enable_message(LeaseMessage)

    lease_task = Task(
        lease_extractor_agent,
        name="LeaseExtractor",
        interactive=False,  # set to True to slow it down (hit enter to progress)
        system_message=f"""
        You are an expert at understanding JSON function/tool specifications, and
        you are also very familiar with commercial lease terminology and concepts.
         
        See the `lease_info` function/tool below,  Your FINAL GOAL is to fill
        in the required fields in this `lease_info` function/tool,
        as shown in the example. This is ONLY an EXAMPLE,
        and YOU CANNOT MAKE UP VALUES FOR THESE FIELDS.
        
        To fill in these fields, you must ASK ME QUESTIONS about the lease,
        ONE BY ONE, and I will answer each question. 
        If I am unable to answer your question initially, try asking me 
        differently. If I am still unable to answer after 3 tries, fill in 
        {NO_ANSWER} for that field.
        When you have collected this info, present it to me using the 
        'lease_info' function/tool.
        DO NOT USE THIS Function/tool UNTIL YOU HAVE ASKED QUESTIONS 
        TO FILL IN ALL THE FIELDS.
        
        Think step by step. 
        Phrase each question simply as "What is ... ?",
        and do not explain yourself, or say any extraneous things. 
        Start by asking me for the start date of the lease.
        When you receive the answer, then ask for the next field, and so on.
        """,
    )

    validator_agent = ChatAgent(
        ChatAgentConfig(
            llm=llm_cfg,
            vecdb=None,
            system_message=f"""
            You are obedient, understand instructions, and follow them faithfully,
            paying attention to the FORMAT specified,
            and you are also extremely CONCISE and SUCCINCT in your responses.
            
            Your task is to detect if the user's message is asking for ONE
            piece of information, or MULTIPLE pieces. Here is how you respond:
            
            IF the msg is only asking about ONE thing, OR if it is NOT EVEN a question:
                respond '{DONE}' and say nothing else.

            IF the msg is asking MORE THAN ONE thing,  respond like this:
            "Please only ask ONE question at a time. Try your question again.
            ONLY when you have ALL the answers, then present the info
            using the `lease_info` function/tool."
            """,
        )
    )
    validator_task = Task(
        validator_agent,
        name="Validator",
        single_round=True,
        interactive=False,
    )

    lease_task.add_sub_task([validator_task, doc_task])
    lr.ChainlitTaskCallbacks(lease_task)

    # DocChatAgent does not have an async llm_response method,
    # so we must use task.run() instead of task.run_async(),
    # but fortunately we can wrap it in a cl.make_async() call
    await cl.make_async(lease_task.run)()
</file>

<file path="examples/chainlit/multi-extract.py">
"""
TODO: examples does not work due to breaking changes in Chainlit

Two-agent chat with Retrieval-augmented LLM + function-call/tool.
ExtractorAgent (has no access to docs) is tasked with extracting structured
information from a commercial lease document, and must present the terms in
a specific nested JSON format.
This agent generates questions corresponding to each field in the JSON format,
and the RAG-enabled DocAgent (has access to the lease) answers the  questions.

This is a Chainlit version of examples/docqa/chat_multi_extract.py.

Example:
chainlit run examples/chainlit/multi-extract.py

This uses GPT4-turbo by default, but works very well with the `dolphin-mixtral`
local LLM, which you can specify in the llm_config below
using `chat_model = "ollama/dolphin-mixtral:latest"`,
provided you've already spun it up with ollama:
```
ollama run dolphin-mixtral
```

See here for more on setting up LLMs to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

The challenging parts in this script are agent-to-agent delegation, and the extractor
agent planning out a sequence of questions to ask the doc agent, and finally presenting
the collected information in a structured format to the user using a Tool/Function-call.
The `dolphin-mixtral` model seems to handle this pretty well, however weaker models
may not be able to handle this.

"""

import json
import os
from typing import List

import chainlit as cl
from rich import print

import langroid as lr
import langroid.language_models as lm
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig
from langroid.pydantic_v1 import BaseModel
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import NO_ANSWER

os.environ["TOKENIZERS_PARALLELISM"] = "false"


class LeasePeriod(BaseModel):
    start_date: str
    end_date: str


class LeaseFinancials(BaseModel):
    monthly_rent: str
    deposit: str


class Lease(BaseModel):
    """
    Various lease terms.
    Nested fields to make this more interesting/realistic
    """

    period: LeasePeriod
    financials: LeaseFinancials
    address: str


class LeaseMessage(ToolMessage):
    """Tool/function to use to present details about a commercial lease"""

    request: str = "lease_info"
    purpose: str = """
        Collect information about a Commercial Lease.
        """
    terms: Lease
    result: str = ""

    @classmethod
    def examples(cls) -> List["LeaseMessage"]:
        return [
            cls(
                terms=Lease(
                    period=LeasePeriod(start_date="2021-01-01", end_date="2021-12-31"),
                    financials=LeaseFinancials(monthly_rent="$1000", deposit="$1000"),
                    address="123 Main St, San Francisco, CA 94105",
                ),
                result="",
            ),
            cls(
                terms=Lease(
                    period=LeasePeriod(start_date="2021-04-01", end_date="2022-04-28"),
                    financials=LeaseFinancials(monthly_rent="$2000", deposit="$2000"),
                    address="456 Main St, San Francisco, CA 94111",
                ),
                result="",
            ),
        ]


class LeaseExtractorAgent(ChatAgent):
    def __init__(self, config: ChatAgentConfig):
        super().__init__(config)

    def lease_info(self, message: LeaseMessage) -> str:
        print(
            f"""
        DONE! Successfully extracted Lease Info:
        {message.terms}
        """
        )
        return "DONE \n" + json.dumps(message.terms.dict(), indent=4)


@cl.on_chat_start
async def main(
    debug: bool = False,
    model: str = "",  # or "ollama/dolphin-mixtral:latest"
    nocache: bool = False,
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )
    llm_cfg = OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,  # adjust based on model
        temperature=0,
        timeout=45,
    )
    doc_agent = DocChatAgent(
        DocChatAgentConfig(
            llm=llm_cfg,
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                chunk_size=300,
                overlap=50,
            ),
            cross_encoder_reranking_model="",
        )
    )
    doc_agent.vecdb.set_collection("docqa-chat-multi-extract", replace=True)
    print("[blue]Welcome to the real-estate info-extractor!")
    doc_agent.config.doc_paths = [
        "examples/docqa/lease.txt",
    ]
    doc_agent.ingest()
    doc_task = Task(
        doc_agent,
        name="DocAgent",
        done_if_no_response=[Entity.LLM],  # done if null response from LLM
        done_if_response=[Entity.LLM],  # done if non-null response from LLM
        system_message="""You are an expert on Commercial Leases. 
        You will receive various questions about a Commercial 
        Lease contract, along with some excerpts from the Lease.
        Your job is to answer them concisely in at most 2 sentences.
        """,
    )

    lease_extractor_agent = LeaseExtractorAgent(
        ChatAgentConfig(
            llm=llm_cfg,
            vecdb=None,
        )
    )
    lease_extractor_agent.enable_message(LeaseMessage)

    lease_task = Task(
        lease_extractor_agent,
        name="LeaseExtractor",
        interactive=False,  # set to True to slow it down (hit enter to progress)
        system_message=f"""
        You have to collect some SPECIFIC STRUCTURED information 
        about a Commercial Lease, as specified in the `lease_info` function/tool. 
        But you do not have access to the lease itself. 
        You can ask me questions about the lease, ONE AT A TIME, I will answer each 
        question. You only need to collect info to fill the fields in the 
        `field_info` function/tool. 
        If I am unable to answer your question initially, try asking me 
        differently. If I am still unable to answer after 3 tries, fill in 
        {NO_ANSWER} for that field.
        When you have collected this info, present it to me using the 
        'lease_info' function/tool.
        DO NOT USE THIS Function/tool UNTIL YOU HAVE ASKED QUESTIONS 
        TO FILL IN ALL THE FIELDS.
        
        Start by asking me for the start date of the lease.
        """,
    )
    lease_task.add_sub_task(doc_task)
    # The below line is essentially the ONLY change to make
    # to the original script on which this is based.
    lr.ChainlitTaskCallbacks(lease_task)
    # DocChatAgent does not have an async llm_response method,
    # so we must use task.run() instead of task.run_async(),
    # but fortunately we can wrap it in a cl.make_async() call
    await cl.make_async(lease_task.run)()
</file>

<file path="examples/docqa/streamlit-app/utils.py">
import os

import streamlit as st

from langroid.agent.special import DocChatAgent, DocChatAgentConfig
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.parsing.parser import ParsingConfig
from langroid.vector_store.qdrantdb import QdrantDBConfig

OPENAI_KEY = os.environ["OPENAI_API_KEY"]


@st.cache_data
def configure(filename: str, chat_model: str = "") -> DocChatAgentConfig:
    llm_cfg = OpenAIGPTConfig(
        chat_model=chat_model,
    )

    oai_embed_config = OpenAIEmbeddingsConfig(
        model_type="openai",
        model_name="text-embedding-3-small",
        dims=1536,
    )

    # Configuring DocChatAgent
    cfg = DocChatAgentConfig(
        n_similar_chunks=4,
        n_relevant_chunks=4,
        parsing=ParsingConfig(
            chunk_size=100,
            overlap=20,
        ),
        show_stats=False,
        cross_encoder_reranking_model="",
        llm=llm_cfg,
        vecdb=QdrantDBConfig(
            embedding=oai_embed_config,
            collection_name="lease",
            replace_collection=True,
            cloud=False,
        ),
        doc_paths=[filename],
    )

    return cfg


def agent(cfg, prompt):
    # Creating DocChatAgent
    rag_agent = st.session_state["rag_agent"]
    if (
        rag_agent is None
        or st.session_state["chat_model"] != cfg.llm.chat_model
        or st.session_state["file_path"] != cfg.doc_paths[0]
    ):
        rag_agent = DocChatAgent(cfg)
        st.session_state["rag_agent"] = rag_agent

    response = rag_agent.llm_response(prompt)
    return response.content
</file>

<file path="examples/docqa/chat_multi_extract.py">
"""
Two-agent chat with Retrieval-augmented LLM + function-call/tool.
ExtractorAgent (has no access to docs) is tasked with extracting structured
information from a commercial lease document, and must present the terms in
a specific nested JSON format.
This agent generates questions corresponding to each field in the JSON format,
and the RAG-enabled DocAgent (has access to the lease) answers the  questions.


Example:
python3 examples/docqa/chat_multi_extract.py

This uses a GPT4 model by default, but works very well with the `dolphin-mixtral`
local LLM, which you can specify via the -m arg:

```
ollama run dolphin-mixtral

python3 examples/docqa/chat_multi_extract.py -m ollama/dolphin-mixtral:latest
```

The challenging parts in this script are agent-to-agent delegation, and the extractor
agent planning out a sequence of questions to ask the doc agent, and finally presenting
the collected information in a structured format to the user using a Tool/Function-call.
The `dolphin-mixtral` model seems to handle this pretty well, however weaker models
may not be able to handle this.

For weaker LLMs, the script examples/docqa/chat-multi-extract-local.py performs a similar task
but uses a workflow where agents do not delegate to each other,
and uses more agents to break down tasks into smaller parts.

"""

import json
import os
from typing import List

import typer
from rich import print

import langroid.language_models as lm
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig
from langroid.pydantic_v1 import BaseModel
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import NO_ANSWER

app = typer.Typer()

os.environ["TOKENIZERS_PARALLELISM"] = "false"


class LeasePeriod(BaseModel):
    start_date: str
    end_date: str


class LeaseFinancials(BaseModel):
    monthly_rent: str
    deposit: str


class Lease(BaseModel):
    """
    Various lease terms.
    Nested fields to make this more interesting/realistic
    """

    period: LeasePeriod
    financials: LeaseFinancials
    address: str


class LeaseMessage(ToolMessage):
    """Tool/function to use to present details about a commercial lease"""

    request: str = "lease_info"
    purpose: str = """
        Collect information about a Commercial Lease.
        """
    terms: Lease
    result: str = ""

    @classmethod
    def examples(cls) -> List["LeaseMessage"]:
        return [
            cls(
                terms=Lease(
                    period=LeasePeriod(start_date="2021-01-01", end_date="2021-12-31"),
                    financials=LeaseFinancials(monthly_rent="$1000", deposit="$1000"),
                    address="123 Main St, San Francisco, CA 94105",
                ),
                result="",
            ),
            cls(
                terms=Lease(
                    period=LeasePeriod(start_date="2021-04-01", end_date="2022-04-28"),
                    financials=LeaseFinancials(monthly_rent="$2000", deposit="$2000"),
                    address="456 Main St, San Francisco, CA 94111",
                ),
                result="",
            ),
        ]


class LeaseExtractorAgent(ChatAgent):
    def __init__(self, config: ChatAgentConfig):
        super().__init__(config)

    def lease_info(self, message: LeaseMessage) -> str:
        print(
            f"""
        DONE! Successfully extracted Lease Info:
        {message.terms}
        """
        )
        return "DONE " + json.dumps(message.terms.dict())


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )
    llm_cfg = OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,  # adjust based on model
        temperature=0,
        timeout=45,
    )
    doc_agent = DocChatAgent(
        DocChatAgentConfig(
            llm=llm_cfg,
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                chunk_size=300,
                overlap=50,
            ),
            cross_encoder_reranking_model="",
        )
    )
    doc_agent.vecdb.set_collection("docqa-chat-multi-extract", replace=True)
    print("[blue]Welcome to the real-estate info-extractor!")
    doc_agent.config.doc_paths = [
        "examples/docqa/lease.txt",
    ]
    doc_agent.ingest()
    doc_task = Task(
        doc_agent,
        name="DocAgent",
        done_if_no_response=[Entity.LLM],  # done if null response from LLM
        done_if_response=[Entity.LLM],  # done if non-null response from LLM
        system_message="""You are an expert on Commercial Leases. 
        You will receive various questions about a Commercial 
        Lease contract, along with some excerpts from the Lease.
        Your job is to answer them concisely in at most 2 sentences.
        """,
    )

    lease_extractor_agent = LeaseExtractorAgent(
        ChatAgentConfig(
            llm=llm_cfg,
            vecdb=None,
        )
    )
    lease_extractor_agent.enable_message(LeaseMessage)

    lease_task = Task(
        lease_extractor_agent,
        name="LeaseExtractorAgent",
        interactive=False,  # set to True to slow it down (hit enter to progress)
        system_message=f"""
        You have to collect some SPECIFIC STRUCTURED information 
        about a Commercial Lease, as specified in the `lease_info` function/tool. 
        But you do not have access to the lease itself. 
        You can ask me questions about the lease, ONE AT A TIME, I will answer each 
        question. You only need to collect info to fill the fields in the 
        `lease_info` function/tool. 
        If I am unable to answer your question initially, try asking me 
        differently. If I am still unable to answer after 3 tries, fill in 
        {NO_ANSWER} for that field.
        When you have collected this info, present it to me using the 
        'lease_info' function/tool.
        DO NOT USE THIS Function/tool UNTIL YOU HAVE ASKED QUESTIONS 
        TO FILL IN ALL THE FIELDS.
        
        Start by asking me for the start date of the lease.
        """,
    )
    lease_task.add_sub_task(doc_task)
    lease_task.run()


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/chat-local.py">
"""
Single agent to use to chat with an LLM using  Retrieval-Augmented Generation (RAG).
Similar to chat.py but allows specifying a local LLM.

See here for how to set up a Local LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

NOTES:
(1) The app works best with GPT4/Turbo, but results may be mixed with local LLMs.
You may have to tweak the system_message, use_message, and summarize_prompt
as indicated in comments below, to get good results.
(2) The default vector-db in DocChatAgent is QdrantDB, but you can switch to the
other supported vector-dbs, e.g. lancedb or chroma.

"""

import os
import re

import typer
from rich import print
from rich.prompt import Prompt

import langroid.language_models as lm
from langroid.agent.special.doc_chat_agent import (
    DocChatAgent,
    DocChatAgentConfig,
)
from langroid.agent.task import Task
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.utils.configuration import Settings, set_global

app = typer.Typer()

os.environ["TOKENIZERS_PARALLELISM"] = "false"


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
) -> None:
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        # or, other possibilities for example:
        # "litellm/bedrock/anthropic.claude-instant-v1"
        # "ollama/llama2"
        # "local/localhost:8000/v1"
        # "local/localhost:8000"
        chat_context_length=4096,  # adjust based on model
        timeout=90,
    )

    config = DocChatAgentConfig(
        n_query_rephrases=0,
        hypothetical_answer=False,
        # set it to > 0 to retrieve a window of k chunks on either side of a match
        n_neighbor_chunks=0,
        n_similar_chunks=3,
        n_relevant_chunks=3,
        llm=llm_config,
        # system_message="...override default DocChatAgent system msg here",
        # user_message="...override default DocChatAgent user msg here",
        # summarize_prompt="...override default DocChatAgent summarize prompt here",
        parsing=ParsingConfig(  # modify as needed
            splitter=Splitter.TOKENS,
            chunk_size=300,  # aim for this many tokens per chunk
            overlap=30,  # overlap between chunks
            max_chunks=10_000,
            n_neighbor_ids=5,  # store ids of window of k chunks around each chunk.
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="pymupdf4llm",
            ),
        ),
    )

    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )

    agent = DocChatAgent(config)
    print("[blue]Welcome to the document chatbot!")
    agent.user_docs_ingest_dialog()
    print("[cyan]Enter x or q to quit, or ? for evidence")

    system_msg = Prompt.ask(
        """
    [blue] Tell me who I am; complete this sentence: You are...
    [or hit enter for default] 
    [blue] Human
    """,
        default="a helpful assistant.",
    )
    system_msg = re.sub("you are", "", system_msg, flags=re.IGNORECASE)
    task = Task(
        agent,
        system_message="You are " + system_msg,
    )
    task.run()


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/chat-multi-extract-3.py">
"""
Variant of chat_multi_extract.py more suited to local LLM, using 3 Agents
(instead of 2 agents):

- LeaseExtractorAgent: is tasked with extracting structured information from a
    commercial lease document, and must present the terms in a specific nested JSON
    format. This agent generates questions corresponding to each field in the JSON
    format.
- Validator: This agent detects if LeaseExtractorAgent's message is asking for ONE
    piece of information, or MULTIPLE pieces. If the message is only asking about ONE
    thing, OR if it is NOT EVEN a question, it responds with "DONE" and says nothing.
    If the message is asking MORE THAN ONE thing, it responds with a message asking to
    only ask ONE question at a time.
    [Why restrict to one question at a time? Because the DocAgent is more likely to
      understand and answer a single question at a time]

- DocAgent: This agent answers the questions generated by LeaseExtractorAgent,
    based on the lease document it has access to via vecdb, using RAG.

Run like this:

```
python3 examples/docqa/chat-multi-extract-3.py -m ollama/nous-hermes2-mixtral
```

If you omit the -m arg, it will use the default GPT4-turbo model.

For more on setting up local LLMs with Langroid, see here:
https://langroid.github.io/langroid/tutorials/local-llm-setup/
"""

import json
import os
from typing import List

import typer
from rich import print

import langroid.language_models as lm
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig
from langroid.pydantic_v1 import BaseModel
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE, NO_ANSWER

app = typer.Typer()

os.environ["TOKENIZERS_PARALLELISM"] = "false"


class LeasePeriod(BaseModel):
    start_date: str
    end_date: str


class LeaseFinancials(BaseModel):
    monthly_rent: str
    deposit: str


class Lease(BaseModel):
    """
    Various lease terms.
    Nested fields to make this more interesting/realistic
    """

    period: LeasePeriod
    financials: LeaseFinancials
    address: str


class LeaseMessage(ToolMessage):
    """Tool/function to use to present details about a commercial lease"""

    request: str = "lease_info"
    purpose: str = """
        Collect information about a Commercial Lease.
        """
    terms: Lease
    result: str = ""

    def handle(self) -> str:
        print(
            f"""
        DONE! Successfully extracted Lease Info:
        {self.terms}
        """
        )
        return "DONE " + json.dumps(self.terms.dict())

    @classmethod
    def format_instructions(cls, tool: bool = True) -> str:
        instr = super().format_instructions(tool)
        instr += """
        ------------------------------
        ASK ME QUESTIONS ONE BY ONE, to FILL IN THE FIELDS 
        of the `lease_info` function/tool.
        First ask me for the start date of the lease.
        DO NOT ASK ANYTHING ELSE UNTIL YOU RECEIVE MY ANSWER.
        """
        return instr

    @classmethod
    def examples(cls) -> List["LeaseMessage"]:
        return [
            cls(
                terms=Lease(
                    period=LeasePeriod(start_date="2021-01-01", end_date="2021-12-31"),
                    financials=LeaseFinancials(monthly_rent="$1000", deposit="$1000"),
                    address="123 Main St, San Francisco, CA 94105",
                ),
                result="",
            ),
        ]


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )
    llm_cfg = OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,  # adjust based on model
        temperature=0,
        timeout=45,
    )
    doc_agent = DocChatAgent(
        DocChatAgentConfig(
            llm=llm_cfg,
            n_neighbor_chunks=2,
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                chunk_size=50,
                overlap=10,
                n_neighbor_ids=4,
            ),
            cross_encoder_reranking_model="",
        )
    )
    doc_agent.vecdb.set_collection("docqa-chat-multi-extract", replace=True)
    print("[blue]Welcome to the real-estate info-extractor!")
    doc_agent.config.doc_paths = [
        "examples/docqa/lease.txt",
    ]
    doc_agent.ingest()
    doc_task = Task(
        doc_agent,
        name="DocAgent",
        done_if_no_response=[Entity.LLM],  # done if null response from LLM
        done_if_response=[Entity.LLM],  # done if non-null response from LLM
        system_message="""You are an expert on Commercial Leases. 
        You will receive various questions about a Commercial 
        Lease contract, along with some excerpts from the Lease.
        Your job is to answer them concisely in at most 2 sentences.
        """,
    )

    lease_extractor_agent = ChatAgent(
        ChatAgentConfig(
            llm=llm_cfg,
            vecdb=None,
        )
    )
    lease_extractor_agent.enable_message(LeaseMessage)

    lease_task = Task(
        lease_extractor_agent,
        name="LeaseExtractorAgent",
        interactive=False,  # set to True to slow it down (hit enter to progress)
        system_message=f"""
        You are an expert at understanding JSON function/tool specifications, and
        you are also very familiar with commercial lease terminology and concepts.
         
        See the `lease_info` function/tool below,  Your FINAL GOAL is to fill
        in the required fields in this `lease_info` function/tool,
        as shown in the example. This is ONLY an EXAMPLE,
        and YOU CANNOT MAKE UP VALUES FOR THESE FIELDS.
        
        To fill in these fields, you must ASK ME QUESTIONS about the lease,
        ONE BY ONE, and I will answer each question. 
        If I am unable to answer your question initially, try asking me 
        differently. If I am still unable to answer after 3 tries, fill in 
        {NO_ANSWER} for that field.
        When you have collected this info, present it to me using the 
        'lease_info' function/tool.
        DO NOT USE THIS Function/tool UNTIL YOU HAVE ASKED QUESTIONS 
        TO FILL IN ALL THE FIELDS.
        
        Think step by step. 
        Phrase each question simply as "What is ... ?",
        and do not explain yourself, or say any extraneous things. 
        Start by asking me for the start date of the lease.
        When you receive the answer, then ask for the next field, and so on.
        """,
    )

    validator_agent = ChatAgent(
        ChatAgentConfig(
            llm=llm_cfg,
            vecdb=None,
            system_message=f"""
            You are obedient, understand instructions, and follow them faithfully,
            paying attention to the FORMAT specified,
            and you are also extremely CONCISE and SUCCINCT in your responses.
            
            Your task is to detect if the user's message is asking for ONE
            piece of information, or MULTIPLE pieces. Here is how you respond:
            
            IF the msg is only asking about ONE thing, OR if it is NOT EVEN a question:
                respond '{DONE}' and say nothing else.

            IF the msg is asking MORE THAN ONE thing,  respond like this:
            "Please only ask ONE question at a time. Try your question again.
            ONLY when you have ALL the answers, then present the info
            using the `lease_info` function/tool."
            """,
        )
    )
    validator_task = Task(
        validator_agent,
        name="Validator",
        single_round=True,
        interactive=False,
    )

    lease_task.add_sub_task([validator_task, doc_task])
    lease_task.run()


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/chat-multi-extract-local.py">
"""
Extract structured info from a commercial lease document,
using multiple agents, powered by a weaker/local LLM, combining tools/functions and RAG.

TASK:
Given a lease document, generate the lease terms, organized into
 a nested JSON structure defined by the Pydantic class `Lease`

Solution with Langroid Agents and tools:
1. QuestionGeneratorAgent: Lease JSON Spec -> list of questions to ask
2. InterrogatorAgent: For each question, generate 2 variants of the question,
   so we use total 3 variants per question, joined together, to increase
   the likelihood of getting an answer from the DocAgent (RAG).
3. DocAgent (has access to the lease) -> answer one question using RAG
3. LeasePresenterAgent: List of (question, answer) pairs ->
        organized into specified Lease JSON structure

Run like this:
```
python3 examples/docqa/chat-multi-extract-local.py -m ollama/mistral:7b-instruct-v0.2-q8_0
```
This works with a local mistral-instruct-v0.2 model.
(To use with ollama, first do `ollama run <model>` then
specify the model name as -m ollama/<model>)

See here for how to set up a Local LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

Optional script args:
-m <local-model-name>, e.g. -m ollama/mistral:7b-instruct-v0.2-q8_0
(if omitted, defaults to GPT4o)
-nc to disable cache retrieval
-d to enable debug mode: see prompts, agent msgs etc.
"""

import json
import os
from typing import List, Optional

import typer
from rich import print

import langroid.language_models as lm
from langroid.agent import ChatDocument
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig
from langroid.pydantic_v1 import BaseModel
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE, NO_ANSWER
from langroid.utils.pydantic_utils import get_field_names

app = typer.Typer()

os.environ["TOKENIZERS_PARALLELISM"] = "false"


class LeasePeriod(BaseModel):
    start_date: str
    end_date: str


class LeaseFinancials(BaseModel):
    monthly_rent: str
    deposit: str


class Lease(BaseModel):
    """
    Various lease terms.
    Nested fields to make this more interesting/realistic
    """

    period: LeasePeriod
    financials: LeaseFinancials
    address: str


class QuestionsTool(ToolMessage):
    request: str = "questions_tool"
    purpose: str = """
    To present a list of <questions> to ask, to fill a desired JSON structure.
    """
    questions: List[str]


class QuestionGeneratorAgent(ChatAgent):
    questions_list: List[str] = []

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        if isinstance(msg, ChatDocument) and msg.metadata.sender == Entity.LLM:
            return """
            You forgot to present the information in JSON format 
            according to the `questions_tool` specification,
            or you may have used a wrong tool name or field name.
            Remember that you must include `request` and `questions` fields,
            where `request` is "questions_tool" and `questions` is a list of questions.
            Try again.
            """
        return None

    def questions_tool(self, msg: QuestionsTool) -> str:
        # get all the field names, including nested ones
        fields = get_field_names(Lease)
        if len(msg.questions) < len(fields):
            return f"""
            ERROR: Expected {len(fields)} questions, but only got {len(msg.questions)}.
            See what you may have missed and try again.
            Hint: the required fields are {fields}
            """
        elif len(msg.questions) > len(fields):
            return f"""
            ERROR: Expected {len(fields)} questions, but got {len(msg.questions)}.
            You generated an extra question. Try again.
            Hint: the required fields are {fields}
            """
        else:
            self.questions_list = msg.questions
            return DONE + json.dumps(msg.questions)


class MyDocChatAgent(DocChatAgent):
    def llm_response(
        self,
        message: None | str | ChatDocument = None,
    ) -> Optional[ChatDocument]:
        """
        Override the default LLM response to return the full document,
        to forget the last round in conversation, so we don't clutter
        the chat history with all previous questions
        (Assume questions don't depend on past ones, as is the case here,
        since we are extracting separate pieces of info from docs)
        """
        n_msgs = len(self.message_history)
        response = super().llm_response(message)
        # If there is a response, then we will have two additional
        # messages in the message history, i.e. the user message and the
        # assistant response. We want to (carefully) remove these two messages.
        self.message_history.pop() if len(self.message_history) > n_msgs else None
        self.message_history.pop() if len(self.message_history) > n_msgs else None
        return response


class LeasePresenterAgent(ChatAgent):
    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        """Handle scenario where Agent failed to present the Lease JSON"""
        if isinstance(msg, ChatDocument) and msg.metadata.sender == Entity.LLM:
            return """
            You either forgot to present the information in the JSON format
            required in `lease_info` JSON specification,
            or you may have used the wrong name of the tool or fields.
            Try again.
            """
        return None


class LeaseMessage(ToolMessage):
    """Tool/function to use to present details about a commercial lease"""

    request: str = "lease_info"
    purpose: str = "To present the <terms> of a Commercial lease."
    terms: Lease

    def handle(self) -> str:
        print(
            f"""
        DONE! Successfully extracted Lease Info:
        {self.terms}
        """
        )
        return DONE + " " + json.dumps(self.terms.dict())

    @classmethod
    def examples(cls) -> List["LeaseMessage"]:
        return [
            cls(
                terms=Lease(
                    period=LeasePeriod(start_date="2021-01-01", end_date="2021-12-31"),
                    financials=LeaseFinancials(monthly_rent="$1000", deposit="$1000"),
                    address="123 Main St, San Francisco, CA 94105",
                ),
                result="",
            ),
            cls(
                terms=Lease(
                    period=LeasePeriod(start_date="2021-04-01", end_date="2022-04-28"),
                    financials=LeaseFinancials(monthly_rent="$2000", deposit="$2000"),
                    address="456 Main St, San Francisco, CA 94111",
                ),
                result="",
            ),
        ]


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            cache_type="fakeredis",
        )
    )
    llm_cfg = OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=32_000,  # adjust based on model
        timeout=120,
        temperature=0.2,
    )

    # (1) QUESTION GENERATOR
    question_generator_agent = QuestionGeneratorAgent(
        ChatAgentConfig(
            llm=llm_cfg,
            vecdb=None,
            system_message="""
            See the `lease_info` JSON structure below. 
            Your ONLY task is to generate 
            QUESTIONS corresponding to each field in the `lease_info` JSON,
            and present these to me using the `questions_tool` in JSON format.
            Pay attention to the format and fields in the `questions_tool` JSON.
            """,
        )
    )
    question_generator_agent.enable_message(LeaseMessage)
    question_generator_agent.enable_message(QuestionsTool)
    question_generator_task = Task(
        question_generator_agent,
        name="QuestionGeneratorAgent",
        interactive=False,
    )

    # (2) RAG AGENT: try to answer a given question based on documents
    doc_agent = MyDocChatAgent(
        DocChatAgentConfig(
            llm=llm_cfg,
            assistant_mode=True,
            n_neighbor_chunks=2,
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                chunk_size=150,
                overlap=30,
                n_neighbor_ids=4,
            ),
            cross_encoder_reranking_model="",
        )
    )
    doc_agent.vecdb.set_collection("docqa-chat-multi-extract", replace=True)
    doc_agent.ingest_doc_paths(["examples/docqa/lease.txt"])
    print("[blue]Welcome to the real-estate info-extractor!")
    doc_task = Task(
        doc_agent,
        name="DocAgent",
        interactive=False,
        done_if_no_response=[Entity.LLM],  # done if null response from LLM
        done_if_response=[Entity.LLM],  # done if non-null response from LLM
        system_message="""You are an expert on Commercial Leases. 
        You will receive a question about a Commercial 
        Lease contract, and your job is to answer concisely in at most 2 sentences.
        """,
    )

    # (3) Interrogator: persists in getting an answer for a SINGLE question
    #       from the RAG agent
    interrogator = ChatAgent(
        ChatAgentConfig(
            llm=llm_cfg,
            vecdb=None,
            system_message="""
            You are an expert on Commercial leases and their terms. 
            User will send you a QUESTION about such a lease.
            Your ONLY job is to reply with TWO VARIATIONS of the QUESTION,
            and say NOTHING ELSE.
            """,
        )
    )
    interrogator_task = Task(
        interrogator,
        name="Interrogator",
        restart=True,  # clear agent msg history
        interactive=False,
        single_round=True,
    )

    # (4) LEASE PRESENTER: Given full list of question-answer pairs,
    #       organize them into the Lease JSON structure
    lease_presenter = LeasePresenterAgent(
        ChatAgentConfig(
            llm=llm_cfg,
            vecdb=None,
        )
    )
    lease_presenter.enable_message(LeaseMessage)

    lease_presenter_task = Task(
        lease_presenter,
        name="LeasePresenter",
        interactive=False,  # set to True to slow it down (hit enter to progress)
        system_message="""
        The user will give you a list of Questions and Answers 
        about a commercial lease.
        
        Organize this information into the `lease_info` JSON structure specified below,
        and present it to me. 
        For fields where the answer is NOT KNOWN, fill in "UNKNOWN" as the value.
        """,
    )

    # (5) Use the agents/tasks

    # Lease info JSON -> Questions
    question_generator_task.run()
    questions = question_generator_agent.questions_list
    print(f"found {len(questions)} questions! Now generating answers...")

    # Questions -> Answers using RAG
    answers = []
    for q in questions:
        # use 3 variants of the question at the same time,
        # to increase likelihood of getting an answer
        q_variants = interrogator_task.run(q).content
        result = doc_task.run(q + "\n" + q_variants)
        answer = result.content or NO_ANSWER
        answers.append(answer)
    print(f"got {len(answers)} answers!")

    q2a = dict(zip(questions, answers))
    print(f"q2a: {q2a}")
    questions_answers = "\n\n".join(
        f"Question: {q}:\nAnswer: {a}" for q, a in q2a.items()
    )
    # Questions + Answers -> organized into nested Lease Info JSON
    lease_presenter_task.run(questions_answers)


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/chat-qa-summarize.py">
"""
Two-agent system to do Question-Answer based summarization of documents.
E.g. one could use this to summarize a very large document, assuming there is a
reasonable abstract/intro at the start that "covers" the import aspects.

WriterAgent (has no access to docs) is tasked with writing 5 bullet points based on
some docs. Initially it generates a summary of the docs from the beginning of the doc,
then it formulates questions to ask until it gets 5 key pieces of information.

DocAgent (has access to docs) answers these questions using RAG.

Run like this:

python examples/docqa/chat-qa-summarize.py

You can let it run and it will finish with 5 key bullet points about the document(s).

There are optional args, especially note you can pass in a different LLM model, e.g.

python3 examples/docqa/chat-qa-summarize.py -m ollama/nous-hermes2-mixtral

See here for how to set up a Local LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

"""

import os

import typer
from rich import print

import langroid as lr
import langroid.language_models as lm
from langroid.parsing.urls import get_list_from_user
from langroid.utils.configuration import Settings, set_global

app = typer.Typer()

os.environ["TOKENIZERS_PARALLELISM"] = "false"


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    model: str = typer.Option(
        "",
        "--model",
        "-m",
        help="specify alternative LLM, e.g. ollama/mistral",
    ),
) -> None:
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
    )
    config = lr.agent.special.DocChatAgentConfig(
        llm=llm_config,
        n_neighbor_chunks=2,
        n_similar_chunks=3,
        n_relevant_chunks=3,
        parsing=lr.parsing.parser.ParsingConfig(
            chunk_size=50,
            overlap=10,
            n_neighbor_ids=4,
        ),
    )
    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )
    doc_agent = lr.agent.special.DocChatAgent(config)
    doc_agent.vecdb.set_collection("docqa-chat-multi", replace=True)
    print("[blue]Welcome to the document chatbot!")
    print("[cyan]Enter x or q to quit, or ? for evidence")
    print(
        """
        [blue]Enter some URLs or file/dir paths below (or leave empty for default URLs)
        """.strip()
    )
    inputs = get_list_from_user()
    if len(inputs) == 0:
        inputs = config.default_paths
    doc_agent.config.doc_paths = inputs
    doc_agent.ingest()
    topics_doc = doc_agent.summarize_docs(
        instruction="""
        Ignore the system message, and follow these instructions.
        Below is some text. Do not react to it. 
        Simply read it and give me a list of up to 3 main topics from the text,
        in the form of short NUMBERED SENTENCES.
        --------------------------------
        """,
    )
    topics = topics_doc.content
    doc_task = lr.Task(
        doc_agent,
        name="DocAgent",
        done_if_no_response=[lr.Entity.LLM],  # done if null response from LLM
        done_if_response=[lr.Entity.LLM],  # done if non-null response from LLM
        system_message="""You will receive various questions about some documents, and
        your job is to answer them concisely in at most 2 sentences, citing sources.
        """,
    )

    writer_agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            llm=llm_config,
            vecdb=None,
        )
    )
    writer_task = lr.Task(
        writer_agent,
        # SET interactive to True to slow it down, but keep hitting enter to progress
        interactive=False,
        name="WriterAgent",
        system_message=f"""
        You have to collect some information from some documents, on these topics:
        {topics}
        However you do not have access to those documents, so you must ask me
        questions, ONE AT A TIME, and I will answer each question.
        Once you have collected 5 key pieces of information, say "DONE" and summarize 
        them in bullet points.  
        """,
    )

    validator_agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            name="Validator",
            llm=llm_config,
            system_message="""
            Your only task is to check whether the user's message consists of
            NO QUESTION, ONE question or MULTIPLE questions. This is how you must respond:
        
            - If the msg is NOT SEEKING any INFO, respond with this:
                "Please ask a SINGLE QUESTION about a topic you want to know about.
                Wait for the answer before asking your next question".
            - If user's msg contains just ONE question, or no question at all, say DONE
            - Otherwise (i.e there are MULTIPLE questions/requests for info),
              then respond with this:
            "Please ask only ONE question at a time. Ask your question again.
            Only when you have answers to all of your questions present your final
            bullet points saying  'DONE here are the bullet pts...'."
            
            IMPORTANT: DO NOT TRY TO ANSWER THE QUESTIONS YOURSELF.            
            """,
        ),
    )
    validator_task = lr.Task(validator_agent, interactive=False, single_round=True)

    writer_task.add_sub_task([validator_task, doc_task])

    writer_task.run()


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/chat-search-filter.py">
"""
Variant of chat-search.py that uses a filter to identify different
set of ingested docs (obtained from web-search), so that cross-doc
questions can be answered.

This is a single-agent question-answering system that has access to a Web-Search
Tool when needed,
and in case a web search is used, ingests scraped link contents into a vector-db,
and uses Retrieval Augmentation to answer the question.

Run like this:

    python3 examples/docqa/chat-search-filter.py

Optional args:
    -nc : turn off caching (i.e. don't retrieve cached LLM responses)
    -d: debug mode, to show all intermediate results
    -f: use OpenAI functions api instead of tools
    -m <model_name>:  (e.g. -m ollama/mistral:7b-instruct-v0.2-q4_K_M)
    (defaults to GPT4-Turbo if blank)

(See here for guide to using local LLMs with Langroid:)
https://langroid.github.io/langroid/tutorials/local-llm-setup/
"""

import json
import re
from typing import Any, List

from fire import Fire
from rich import print
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.chat_agent import ChatAgent, ChatDocument
from langroid.agent.special.doc_chat_agent import (
    DocChatAgent,
    DocChatAgentConfig,
)
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import ForwardTool
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.parsing.web_search import metaphor_search
from langroid.pydantic_v1 import Field
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import NO_ANSWER


class RelevantExtractsTool(ToolMessage):
    request: str = Field(
        "relevant_extracts", description="MUST be included in EVERY use of this tool!"
    )
    purpose: str = "Get docs/extracts relevant to the <query> from prior searches"
    query: str = Field(..., description="The query to get relevant extracts for")
    filter_tag: str = Field(
        "",
        description="""
        Optional LOWER-CASE tag to filter to use for the search, 
        to restrict relevance extraction to a SPECIFIC PRIOR search result.
        IMPORTANT - DO NOT INTRODUCE A NEW TAG HERE!! You MUST use ONLY a
        tag you previously used in the `relevant_search_extracts` tool,
        to correctly identify a prior search result.
        """,
    )

    @classmethod
    def examples(cls) -> List["ToolMessage"]:
        return [
            cls(
                query="when was the Mistral LLM released?",
                filter_tags=["mistral", "llm"],
            ),
        ]

    @classmethod
    def instructions(cls) -> str:
        return """
        IMPORTANT: You must include an ACTUAL query in the `query` field,
        """


class RelevantSearchExtractsTool(ToolMessage):
    request: str = Field(
        "relevant_search_extracts",
        description="MUST be included in EVERY use of this tool!",
    )
    purpose: str = "Get docs/extracts relevant to the <query> from a web search"
    query: str = Field(..., description="The search query to get relevant extracts for")
    num_results: int = Field(3, description="The number of search results to use")
    tag: str = Field(
        "",
        description="""
        Optional LOWER-CASE tag to attach to the documents ingested from the search, 
        to UNIQUELY IDENTIFY the docs ingested from this search, for future reference
        when using the `relevant_extracts` tool.
        """,
    )

    @classmethod
    def examples(cls) -> List["ToolMessage"]:
        return [
            cls(
                query="when was the Mistral LLM released?",
                num_results=3,
                tag="mistral",
            ),
        ]

    @classmethod
    def instructions(cls) -> str:
        return """
        IMPORTANT: You must include an ACTUAL query in the `query` field,
        """


def tags_to_filter(tags: List[str]) -> str | None:
    """
    Given a list of tags, create a qdrant-db filter condition expressing:
    EVERY tag MUST appear in the metadata.tags field of the document.
    Args:
        tags: List of tags to filter by
    Returns:
        json string of the qdrant filter condition, or None
    """
    if len(tags) == 0:
        return None
    match_conditions = [
        {"key": "metadata.tags", "match": {"any": [tag]}} for tag in tags
    ]

    filter = {"must": match_conditions}
    return json.dumps(filter)


class SearchDocChatAgent(DocChatAgent):

    def init_state(self) -> None:
        super().init_state()
        self.original_docs = []
        self.tried_vecdb: bool = False

    def handle_message_fallback(self, msg: str | ChatDocument) -> Any:
        if isinstance(msg, ChatDocument) and msg.metadata.sender == lr.Entity.LLM:
            # no tool, so it must be meant for user
            return ForwardTool(agent="user")

    def llm_response(
        self,
        message: None | str | ChatDocument = None,
    ) -> ChatDocument | None:
        return ChatAgent.llm_response(self, message)

    def relevant_extracts(self, msg: RelevantExtractsTool) -> str:
        """Get docs/extracts relevant to the query, from vecdb"""
        self.tried_vecdb = True
        query = msg.query
        if msg.filter_tag != "":
            self.set_filter(tags_to_filter([msg.filter_tag]))
        _, extracts = self.get_relevant_extracts(query)
        if len(extracts) == 0:
            return """
            No extracts found! You can try doing a web search with the
            `relevant_search_extracts` tool/function-call.
            """
        return "\n".join(str(e) for e in extracts)

    def relevant_search_extracts(self, msg: RelevantSearchExtractsTool) -> str:
        """Get docs/extracts relevant to the query, from a web search"""
        # if not self.tried_vecdb and len(self.original_docs) > 0:
        #     return "Please try the `relevant_extracts` tool, before using this tool"
        self.tried_vecdb = False
        query = msg.query
        # if query contains a url, then no need to do web search --
        # just ingest the specific link in the query
        if "http" in query:
            # extract the URL from the query
            url = re.search(r"(?P<url>https?://[^\s]+)", query).group("url")
            links = [url]
            # remove the url from the query
            query = re.sub(r"http\S+", "", query)
        else:
            results = metaphor_search(query, msg.num_results)
            links = [r.link for r in results]
        self.ingest_doc_paths(links, metadata={"tags": [msg.tag]})
        if msg.tag != "":
            self.set_filter(tags_to_filter([msg.tag]))
        _, extracts = self.get_relevant_extracts(query)
        return "\n".join(str(e) for e in extracts)


def main(
    debug: bool = False,
    nocache: bool = False,
    model: str = "",
    fn_api: bool = True,
) -> None:

    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )

    print(
        """
        [blue]Welcome to the Internet Search chatbot!
        I will try to answer your questions, relying on (full content of links from) 
        Duckduckgo (DDG) Search when needed.
        
        Enter x or q to quit, or ? for evidence
        """
    )

    system_msg = Prompt.ask(
        """
    [blue] Tell me who I am (give me a role) by completing this sentence: 
    You are...
    [or hit enter for default]
    [blue] Human
    """,
        default="a helpful assistant.",
    )
    system_msg = re.sub("you are", "", system_msg, flags=re.IGNORECASE)

    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        # or, other possibilities for example:
        # "litellm/bedrock/anthropic.claude-instant-v1"
        # "ollama/llama2"
        # "local/localhost:8000/v1"
        # "local/localhost:8000"
        chat_context_length=2048,  # adjust based on model
    )

    config = DocChatAgentConfig(
        use_functions_api=fn_api,
        use_tools=not fn_api,
        llm=llm_config,
        extraction_granularity=3,
        # for relevance extraction
        # relevance_extractor_config=None,  # set to None to disable relevance extraction
        # set it to > 0 to retrieve a window of k chunks on either side of a match
        n_neighbor_chunks=2,
        n_similar_chunks=5,
        n_relevant_chunks=5,
        parsing=ParsingConfig(  # modify as needed
            splitter=Splitter.TOKENS,
            chunk_size=200,  # aim for this many tokens per chunk
            overlap=50,  # overlap between chunks
            max_chunks=10_000,
            n_neighbor_ids=5,  # store ids of window of k chunks around each chunk.
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="fitz",
            ),
        ),
        system_message=f"""
        {system_msg} You will try your best to answer my questions,
        in this order of preference:
        1. If you can answer from your own knowledge, simply return the answer
        2. Otherwise:
         2.1 If the question contains a URL, then use the `relevant_search_extracts`
             tool/function with the `query` field set to 
             this EXACT QUESTION INTACT! (DO NOT REPHRASE IT),
             and set the appropriate `tag` to UNIQUELY identify 
             docs from this search, to be able to refer to docs from 
             this search in FUTURE uses of the `relevant_extracts` tool.
         2.1 Otherwise, 
             if you have previously used the `relevant_search_extracts` 
                tool/fn-call
             to do a web search, you can ask for some relevant text from those search
             results, using the `relevant_extracts` tool/function-call, 
             and you MUST ONLY use a PREVIOUSLY used tag to correctly identify
             the prior search results to narrow down the search,
             and you will receive relevant extracts, if any.
             If you receive {NO_ANSWER}, it means no relevant extracts exist,
             and you can try the next step 2.2, using a web search.
             
         2.2 otherwise, i.e. you have NOT YET done a web search, you can use
             the `relevant_search_extracts` tool/function-call to search the web,
             MAKING SURE YOU SET a UNIQUE TAG (LOWER CASE, short word or 
             phrase) in the `tag` field, to UNIQUELY identify the docs from 
             this search, to be able to refer to them in a future use of 
             `relevant_extracts` tool.
             You will then receive relevant extracts from these search results, 
             if any. 
        3. If you are still unable to answer, you can use the `relevant_search_extracts`
           tool/function-call to get some text from a web search. Once you receive the
           text, you can use it to answer my question.
        4. If you still can't answer, simply say {NO_ANSWER} 
        
        Remember these simple rules:
         (a) if a question contains a URL, simply use the `relevant_search_extracts`
                tool/function-call with the `query` field set to this EXACT QUESTION
         (b) else if you have ALREADY done a web-search 
         (using the `relevant_search_extracts` tool),
         you should FIRST try `relevant_extracts` to see if there are
         any relevant passages from PREVIOUS SEARCHES, before doing a new search.
         
         YOU CAN USE TOOLS MULTIPLE TIMES before composing your answer.
         For example, when asked to compare two things, you can use the
         `relevant_extracts` tool multiple times to get relevant extracts
         from different PRIOR search results, and THEN compose your answer!
        
        Be very concise in your responses, use no more than 1-2 sentences.
        When you answer based on provided documents, be sure to show me 
        the SOURCE(s) and EXTRACT(s), for example:
        
        SOURCE: https://www.wikihow.com/Be-a-Good-Assistant-Manager
        EXTRACT: Be a Good Assistant ... requires good leadership skills.
        
        For the EXTRACT, ONLY show up to first 3 words, and last 3 words.
        """,
    )

    agent = SearchDocChatAgent(config)
    agent.enable_message(RelevantExtractsTool)
    agent.enable_message(RelevantSearchExtractsTool)
    collection_name = Prompt.ask(
        "Name a collection to use",
        default="docqa-chat-search",
    )
    replace = (
        Prompt.ask(
            "Would you like to replace (i.e. erase) this collection?",
            choices=["y", "n"],
            default="n",
        )
        == "y"
    )

    print(f"[red]Using {collection_name}")

    agent.vecdb.set_collection(collection_name, replace=replace)

    task = Task(agent, interactive=False)
    task.run("Can you help me answer some questions, possibly using web search?")


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/docqa/chat.py">
"""
Single agent to use to chat with a Retrieval-augmented LLM.
Repeat: User asks question -> LLM answers.

Run like this, either with a document-path (can be URL, file-path, folder-path):

python3 examples/docqa/chat.py url-or-file-orfolder-path

(or run with no arguments to go through the dialog).

If a document-arg is provided, it will be ingested into the vector database.

To change the model, use the --model flag, e.g.:

python3 examples/docqa/chat.py --model ollama/mistral:7b-instruct-v0.2-q8_0

To change the embedding service provider, use the --embed and --embedconfig flags, e.g.:

For OpenAI
python3 examples/docqa/chat.py --embed openai

For Huggingface SentenceTransformers
python3 examples/docqa/chat.py --embed hf --embedconfig BAAI/bge-large-en-v1.5

For Llama.cpp Server
python3 examples/docqa/chat.py --embed llamacpp --embedconfig localhost:8000

See here for how to set up a Local LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

"""

import os

import typer
from rich import print

import langroid as lr
import langroid.language_models as lm
from langroid.agent.special.doc_chat_agent import (
    DocChatAgent,
    DocChatAgentConfig,
)
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.utils.configuration import Settings, set_global

app = typer.Typer()

os.environ["TOKENIZERS_PARALLELISM"] = "false"


@app.command()
def main(
    doc: str = typer.Argument("", help="url, file-path or folder to chat about"),
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    vecdb: str = typer.Option(
        "qdrant", "--vecdb", "-v", help="vector db name (default: qdrant)"
    ),
    nostream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    embed_provider: str = typer.Option(
        "openai",
        "--embed",
        "-e",
        help="Embedding service provider",
        # openai, hf, llamacpp
    ),
    embed_config: str = typer.Option(
        None,
        "--embedconfig",
        "-ec",
        help="Embedding service host/sentence transformer model",
    ),
    # e.g. NeuML/pubmedbert-base-embeddings
) -> None:
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,  # adjust as needed
        temperature=0.2,
        max_output_tokens=300,
        timeout=60,
    )

    config = DocChatAgentConfig(
        llm=llm_config,
        n_query_rephrases=0,
        full_citations=True,
        hypothetical_answer=False,
        # how many sentences in each segment, for relevance-extraction:
        # increase this if you find that relevance extraction is losing context
        extraction_granularity=3,
        # for relevance extraction
        # relevance_extractor_config=None,  # set to None to disable relevance extraction
        # set it to > 0 to retrieve a window of k chunks on either side of a match
        n_neighbor_chunks=2,
        n_similar_chunks=5,
        n_relevant_chunks=5,
        parsing=ParsingConfig(  # modify as needed
            splitter=Splitter.TOKENS,
            chunk_size=200,  # aim for this many tokens per chunk
            overlap=50,  # overlap between chunks
            max_chunks=10_000,
            n_neighbor_ids=5,  # store ids of window of k chunks around each chunk.
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=PdfParsingConfig(
                # see here for possible values:
                # https://github.com/langroid/langroid/blob/main/langroid/parsing/parser.py
                library="pymupdf4llm",
            ),
        ),
    )

    match embed_provider:
        case "hf":
            embed_cfg = lr.embedding_models.SentenceTransformerEmbeddingsConfig(
                model_type="sentence-transformer",
                model_name=embed_config,
            )
        case "llamacpp":
            embed_cfg = lr.embedding_models.LlamaCppServerEmbeddingsConfig(
                api_base=embed_config,
                dims=768,  # Change this to match the dimensions of your embedding model
            )
        case "gemini":
            embed_cfg = lr.embedding_models.GeminiEmbeddingsConfig(
                model_type="gemini", dims=768
            )
        case _:
            embed_cfg = lr.embedding_models.OpenAIEmbeddingsConfig()

    match vecdb:
        case "lance" | "lancedb":
            config.vecdb = lr.vector_store.LanceDBConfig(
                collection_name="doc-chat-lancedb",
                storage_path=".lancedb/data/",
                embedding=embed_cfg,
            )
        case "qdrant" | "qdrantdb":
            config.vecdb = lr.vector_store.QdrantDBConfig(
                cloud=False,
                storage_path=".qdrant/doc-chat",
                embedding=embed_cfg,
            )
        case "chroma" | "chromadb":
            config.vecdb = lr.vector_store.ChromaDBConfig(
                storage_path=".chroma/doc-chat",
                embedding=embed_cfg,
            )
        case "weaviate" | "weaviatedb":
            config.vecdb = lr.vector_store.WeaviateDBConfig(
                embedding=embed_cfg,
            )
        case "pinecone" | "pineconedb":
            config.vecdb = lr.vector_store.PineconeDBConfig(
                collection_name="doc-chat-pinecone-serverless",
                embedding=embed_cfg,
            )
        case "postgres" | "postgresdb":
            config.vecdb = lr.vector_store.PostgresDBConfig(
                embedding=embed_cfg, cloud=True
            )

    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            stream=not nostream,
        )
    )

    agent = DocChatAgent(config)
    print("[blue]Welcome to the document chatbot!")

    if doc:
        # TODO - could save time by checking whether we've already ingested this doc(s)
        agent.ingest_doc_paths([doc])
    else:
        agent.user_docs_ingest_dialog()

    print("[cyan]Enter x or q to quit")

    task = lr.Task(
        agent,
        system_message="You are a helpful assistant, "
        "answering questions about some docs",
    )
    task.run()


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/doc-aware-chat.py">
"""
Single Agent for Doc-aware chat with user.

- user asks question
- LLM decides whether to:
    - ask user for follow-up/clarifying information, or
    - retrieve relevant passages from documents, or
    - provide a final answer, if it has enough information from user and documents.

To reduce response latency, in the DocChatAgentConfig,
you can set the `relevance_extractor_config=None`,
to turn off the relevance_extraction step, which uses the LLM
to extract verbatim relevant portions of retrieved chunks.

Run like this:

python3 examples/docqa/doc-aware-chat.py
"""

import os
from typing import Any, Optional

from fire import Fire
from rich import print
from rich.prompt import Prompt

import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.chat_agent import ChatAgent
from langroid.agent.special.doc_chat_agent import (
    DocChatAgent,
    DocChatAgentConfig,
)
from langroid.agent.task import Task
from langroid.agent.tools.orchestration import ForwardTool
from langroid.agent.tools.retrieval_tool import RetrievalTool
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.utils.configuration import Settings, set_global

os.environ["TOKENIZERS_PARALLELISM"] = "false"


class DocAwareChatAgent(DocChatAgent):
    def __init__(self, config: DocChatAgentConfig):
        super().__init__(config)
        self.enable_message(RetrievalTool)

    def retrieval_tool(self, msg: RetrievalTool) -> str:
        results = super().retrieval_tool(msg)
        return f"""
        
        RELEVANT PASSAGES:
        =====        
        {results}        
        ====
        
        
        BASED on these RELEVANT PASSAGES, DECIDE:
        - If this is sufficient to provide the user a final answer specific to 
            their situation, do so.
        - Otherwise, 
            - ASK the user for more information to get a better understanding
              of their situation or context, OR
            - use this tool again to get more relevant passages.
        """

    def llm_response(
        self,
        message: None | str | ChatDocument = None,
    ) -> Optional[ChatDocument]:
        # override DocChatAgent's default llm_response
        return ChatAgent.llm_response(self, message)

    def handle_message_fallback(self, msg: str | ChatDocument) -> Any:
        # we are here if there is no tool in the msg
        if isinstance(msg, ChatDocument) and msg.metadata.sender == Entity.LLM:
            # Any non-tool message must be meant for user, so forward it to user
            return ForwardTool(agent="User")


def main(
    debug: bool = False,
    nocache: bool = False,
    model: str = lm.OpenAIChatModel.GPT4o,
) -> None:
    llm_config = lm.OpenAIGPTConfig(chat_model=model)
    config = DocChatAgentConfig(
        llm=llm_config,
        n_query_rephrases=0,
        hypothetical_answer=False,
        relevance_extractor_config=None,
        # this turns off standalone-query reformulation; set to False to enable it.
        assistant_mode=True,
        n_neighbor_chunks=2,
        n_similar_chunks=5,
        n_relevant_chunks=5,
        parsing=ParsingConfig(  # modify as needed
            splitter=Splitter.TOKENS,
            chunk_size=100,  # aim for this many tokens per chunk
            n_neighbor_ids=5,
            overlap=20,  # overlap between chunks
            max_chunks=10_000,
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="fitz",
            ),
        ),
    )

    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )

    doc_agent = DocAwareChatAgent(config)
    print("[blue]Welcome to the document chatbot!")
    url = Prompt.ask("[blue]Enter the URL of a document")
    doc_agent.ingest_doc_paths([url])

    # For a more flexible/elaborate user doc-ingest dialog, use this:
    # doc_agent.user_docs_ingest_dialog()

    doc_task = Task(
        doc_agent,
        interactive=False,
        name="DocAgent",
        system_message=f"""
        You are a DOCUMENT-AWARE-GUIDE, but you do NOT have direct access to documents.
        Instead you can use the `retrieval_tool` to get passages from the documents
        that are relevant to a certain query or search phrase or topic.
        DO NOT ATTEMPT TO ANSWER THE USER'S QUESTION WITHOUT RETRIEVING RELEVANT
        PASSAGES FROM THE DOCUMENTS. DO NOT use your own existing knowledge!!
        Everything you tell the user MUST be based on the documents.
        
        The user will ask you a question that you will NOT be able to answer
        immediately, because you are MISSING some information about:
            - the user or their context or situation, etc
            - the documents relevant to the question
        
        At each turn you must decide among these possible ACTIONS:
        - use the `{RetrievalTool.name()}` to get more relevant passages from the 
            documents, OR
        - ANSWER the user if you think you have enough information 
            from the user AND the documents, to answer the question.
            
        You can use the `{RetrievalTool.name()}` multiple times to get more 
        relevant passages, if you think the previous ones were not sufficient.
        
        REMEMBER - your goal is to be VERY HELPFUL to the user; this means
        you should NOT OVERWHELM them by throwing them a lot of information and
        ask them to figure things out. Instead, you must GUIDE them 
        by asking SIMPLE QUESTIONS, ONE at at time, and finally provide them
        a clear, DIRECTLY RELEVANT answer that is specific to their situation. 
        """,
    )

    print("[cyan]Enter x or q to quit, or ? for evidence")

    doc_task.run("Can you help me with some questions?")


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/docqa/doc-aware-compose-2.py">
"""
2-agent doc-aware conversation,
different from standard question -> answer RAG flow.

Similar to doc-aware-guide-2.py, but in this case, the goal is
not to answer a user question, but to generate/compose a specific type of document,
adhering to some requirements, which are specified in external docs.

The DocAgent has access to the "requirement" docs.

To make this meaningful, ensure that the document(s) you upload
pertain to some type of "requirements" that a final generated document must adhere to.
E.g., try this document that specifies what a residential lease agreement should contain:
https://www.apartments.com/rental-manager/resources/leases/how-write-lease-agreement
And in the ensuing dialog, when prompted, say:
"I want to write an informal residential lease agreement."

ComposerAgent composes a document, via a multi-step
conversation, where it could either address:
- DocAgent (who has access to requirement docs) for info on requirements, or
- User, to ask follow-up questions about their situation/context.

python3 examples/docqa/doc-aware-guide-2.py

"""

import os
from typing import Optional

from fire import Fire
from rich import print
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.special.doc_chat_agent import (
    DocChatAgent,
    DocChatAgentConfig,
)
from langroid.agent.task import Task
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import AT, DONE, NO_ANSWER

os.environ["TOKENIZERS_PARALLELISM"] = "false"


class DocAgent(DocChatAgent):
    def llm_response(
        self,
        message: None | str | ChatDocument = None,
    ) -> Optional[ChatDocument]:
        # Augment the response
        results = super().llm_response(message).content
        return self.create_llm_response(
            f"""
            Summary answer FROM DocAgent:
            
            ===
            {results}
            ===
            
            Look at the results above. These might be too much for the user to read.
            DECIDE whether you want to:
            - Ask the User a SINGLE follow-up question to get more info about their 
                situation or context, OR
            - Ask the DocAgent for more information, if you think you need more info.
            - Provide the User a FINAL answer, if you think you have enough information 
               from the User AND the Documents
               
            IMPORTANT: Do NOT simply give the User a list of options -- 
                you must HELP the user by asking them FOLLOWUP questions
                about their situation and GUIDE them to a SPECIFIC, 
                DIRECTLY RELEVANT answer. 
            REMEMBER - NEVER ask the DocAgent or User MULTIPLE questions at a time,
                always ask ONE question at a time.
            """
        )


def main(
    debug: bool = False,
    nocache: bool = False,
    model: str = lm.OpenAIChatModel.GPT4o,
) -> None:
    vecdb_config = lr.vector_store.QdrantDBConfig(
        storage_path=".qdrant/doc-aware/",
        replace_collection=False,
        cloud=False,
    )

    llm_config = lm.OpenAIGPTConfig(chat_model=model)
    config = DocChatAgentConfig(
        vecdb=vecdb_config,
        llm=llm_config,
        n_query_rephrases=0,
        hypothetical_answer=False,
        assistant_mode=True,
        n_neighbor_chunks=2,
        n_similar_chunks=5,
        n_relevant_chunks=5,
        parsing=ParsingConfig(  # modify as needed
            splitter=Splitter.TOKENS,
            chunk_size=100,  # aim for this many tokens per chunk
            n_neighbor_ids=5,
            overlap=20,  # overlap between chunks
            max_chunks=10_000,
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="pymupdf4llm",
            ),
        ),
    )

    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )

    doc_agent = DocAgent(config)
    print("[blue]Welcome to the document chatbot!")
    doc_agent.user_docs_ingest_dialog()
    print("[cyan]Enter x or q to quit, or ? for evidence")
    doc_task = Task(
        doc_agent,
        interactive=False,
        name="DocAgent",
        done_if_no_response=[Entity.LLM],  # done if null response from LLM
        done_if_response=[Entity.LLM],  # done if non-null response from LLM
    )

    composer = ChatAgent(
        ChatAgentConfig(
            name="Composer",
            llm=llm_config,
            vecdb=None,
        )
    )
    # MyRecipientTool = RecipientTool.create(
    #     recipients=["DocAgent", "User"], default="User"
    # )
    # guide_agent.enable_message(MyRecipientTool)
    task_config = lr.TaskConfig(addressing_prefix=AT)
    composer_task = Task(
        composer,
        interactive=False,
        config=task_config,
        system_message=f"""
        You are a SKILLFUL WRITER, who can adhere to specified REQUIREMENTS
        and GUIDELINES to generate specific types of documents. Your TASK
        is to create a certain type of Document requested by the User,
        IN MARKDOWN FORMAT,
        based on both the USER's info and the REQUIREMENTS specified in the
        specific DOCUMENTS.  
        
        However you do NOT have direct access to the specification docs, but you have an 
        assistant named DocAgent, who DOES have access to the documents.
          
        Since you could be talking to TWO people, in order to CLARIFY who you are
        addressing, you MUST ALWAYS EXPLICITLY ADDRESS either the 
        "User" or the "DocAgent" using {AT}User or {AT}DocAgent, respectively.
        
        You must THINK like this at each step after receiving a 
        DOCUMENT REQUEST from the User:
        
        (I NEVER WANT TO Overwhelm DocAgent or User with TOO MANY QUESTIONS,
        so I will ALWAYS ask ONE question at a time)
        
        - I must first find out more about the type of document the user
         wants, from DocAgent, let me address DocAgent to get the requirements info.
        - I got some info from DocAgent, let me now ask the User a follow-up question
            to get ONE SPECIFIC piece of information about their situation.
        - I need to get MORE info from DocAgent, let me ask DocAgent for more info.
        - DocAgent said {NO_ANSWER}!!, Let me try asking a different way.
        - I have a bit more info, now let me ask the User a further follow-up question,
            to get ONE SPECIFIC piece of information about their situation.
        - I need more info from user, let me ask the User a follow-up question,
            to get ANOTHER SPECIFIC piece of information about their situation.
        ...[and so on]...
        - Now I have ALL the info I need from BOTH the User and DocAgent,
            so I can provide the User the FINAL DOCUMENT, formatted 
             nicely in MARKDOWN, as per the requirements.
            so I will say {DONE}, followed by my composed document.   
            
        IMPORTANT: When giving the User a list of choices, always show them
            a NUMBERED list of choices.       
            
        ASK AT MOST 5 QUESTIONS TO THE USER, then generate the requested
        document to the best of your ability.   
        """,
    )
    composer_task.add_sub_task(doc_task)

    while True:
        query = Prompt.ask("[blue]How can I help?")
        if query in ["x", "q"]:
            break
        composer_task.run(query)


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/docqa/doc-aware-guide-2.py">
"""
2-agent doc-aware conversation,
different from standard question -> answer RAG flow.

GuideAgent answers the user's question, via a multi-step
conversation, where it could either address:
- DocAgent (who has access to docs) for info, or
- User, to ask follow-up questions about their situation/context.

python3 examples/docqa/doc-aware-guide-2.py

"""

import os
from typing import Optional

from fire import Fire
from rich import print
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.special.doc_chat_agent import (
    DocChatAgent,
    DocChatAgentConfig,
)
from langroid.agent.task import Task
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import AT, DONE, NO_ANSWER

os.environ["TOKENIZERS_PARALLELISM"] = "false"


class DocAgent(DocChatAgent):
    def llm_response(
        self,
        message: None | str | ChatDocument = None,
    ) -> Optional[ChatDocument]:
        # Augment the response
        results = super().llm_response(message).content
        return self.create_llm_response(
            f"""
            Summary answer FROM DocAgent:
            
            ===
            {results}
            ===
            
            Look at the results above. These might be too much for the user to read.
            DECIDE whether you want to:
            - Ask the User a SINGLE follow-up question to get more info about their 
                situation or context, OR
            - Ask the DocAgent for more information, if you think you need more info.
            - Provide the User a FINAL answer, if you think you have enough information 
               from the User AND the Documents
               
            IMPORTANT: Do NOT simply give the User a list of options -- 
                you must HELP the user by asking them FOLLOWUP questions
                about their situation and GUIDE them to a SPECIFIC, 
                DIRECTLY RELEVANT answer. 
            REMEMBER - NEVER ask the DocAgent or User MULTIPLE questions at a time,
                always ask ONE question at a time.
            """
        )


def main(
    debug: bool = False,
    nocache: bool = False,
    model: str = lm.OpenAIChatModel.GPT4o,
) -> None:
    vecdb_config = lr.vector_store.QdrantDBConfig(
        storage_path=".qdrant/doc-aware/",
        replace_collection=False,
        cloud=False,
    )

    llm_config = lm.OpenAIGPTConfig(chat_model=model)
    config = DocChatAgentConfig(
        vecdb=vecdb_config,
        llm=llm_config,
        n_query_rephrases=0,
        hypothetical_answer=False,
        assistant_mode=True,
        n_neighbor_chunks=2,
        n_similar_chunks=5,
        n_relevant_chunks=5,
        parsing=ParsingConfig(  # modify as needed
            splitter=Splitter.TOKENS,
            chunk_size=100,  # aim for this many tokens per chunk
            n_neighbor_ids=5,
            overlap=20,  # overlap between chunks
            max_chunks=10_000,
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="pymupdf4llm",
            ),
        ),
    )

    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )

    doc_agent = DocAgent(config)
    print("[blue]Welcome to the document chatbot!")
    doc_agent.user_docs_ingest_dialog()
    print("[cyan]Enter x or q to quit, or ? for evidence")
    doc_task = Task(
        doc_agent,
        interactive=False,
        name="DocAgent",
        done_if_no_response=[Entity.LLM],  # done if null response from LLM
        done_if_response=[Entity.LLM],  # done if non-null response from LLM
    )

    guide_agent = ChatAgent(
        ChatAgentConfig(
            name="GuideAgent",
            llm=llm_config,
            vecdb=None,
        )
    )
    # MyRecipientTool = RecipientTool.create(
    #     recipients=["DocAgent", "User"], default="User"
    # )
    # guide_agent.enable_message(MyRecipientTool)
    task_config = lr.TaskConfig(addressing_prefix=AT)
    guide_task = Task(
        guide_agent,
        interactive=False,
        config=task_config,
        system_message=f"""
        You are VERY HELPFUL GUIDE, who wants to help a User with their inquiry.
        
        Your task is to GUIDE them STEP BY STEP toward a specific
        answer that is DIRECTLY RELEVANT to their specific situation.
        
        IMPORTANT: Your guidance/help should ONLY be based on certain DOCUMENTS
          and NOT on your existing knowledge. NEVER answer based on your own knowledge,
          ALWAYS refer to the documents.
          However you do NOT have direct access to the docs, but you have an assistant
          named DocAgent, who DOES have access to the documents.
          
        Since you could be talking to TWO people, in order to CLARIFY who you are
        addressing, you MUST ALWAYS EXPLICITLY ADDRESS either the 
        "User" or the "DocAgent" using {AT}User or {AT}DocAgent, respectively.
        
        You must THINK like this at each step after receiving a question from the User:
        
        (I NEVER WANT TO Overwhelm DocAgent or User with TOO MANY QUESTIONS,
        so I will ALWAYS ask ONE question at a time)
        
        - I must first find out more about this topic from DocAgent, 
            let me address DocAgent to get more information.
        - I got some info from DocAgent, let me now ask the User a follow-up question
            to get ONE SPECIFIC piece of information about their situation.
        - I need to get MORE info from DocAgent, let me ask DocAgent for more info.
        - DocAgent said {NO_ANSWER}!!, Let me try asking a different way.
        - I have a bit more info, now let me ask the User a further follow-up question,
            to get ONE SPECIFIC piece of information about their situation.
        - I need more info from user, let me ask the User a follow-up question,
            to get ANOTHER SPECIFIC piece of information about their situation.
        ...[and so on]...
        - Now I have ALL the info I need from BOTH the User and DocAgent,
            so I can provide the User a DIRECTLY RELEVANT answer,
            so I will say {DONE}, followed by the answer.   
            
        IMPORTANT: When giving the User a list of choices, always show them
            a NUMBERED list of choices.          
        """,
    )
    guide_task.add_sub_task(doc_task)

    while True:
        query = Prompt.ask("[blue]How can I help?")
        if query in ["x", "q"]:
            break
        guide_task.run(query)


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/docqa/doc-based-troubleshooting.py">
"""
2-agent doc-aware conversation,
different from standard question -> answer RAG flow.

User indicates some type of problem,
TroubleShooter Agent engages in conversation with User,
guiding them toward a solution.
At each step, Troubleshooter Agent can either address:
- DocAgent (who has access to docs/manuals) for info, or
- User, to ask follow-up questions about the problem

python3 examples/docqa/doc-based-troubleshooting.py

"""

import os
from typing import Optional

from fire import Fire
from rich import print
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.special.doc_chat_agent import (
    DocChatAgent,
    DocChatAgentConfig,
)
from langroid.agent.task import Task
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import AT, DONE, NO_ANSWER

os.environ["TOKENIZERS_PARALLELISM"] = "false"


class DocAgent(DocChatAgent):
    def llm_response(
        self,
        message: None | str | ChatDocument = None,
    ) -> Optional[ChatDocument]:
        # Augment the response
        results = super().llm_response(message).content
        return self.create_llm_response(
            f"""
            Summary answer FROM DocAgent:
            
            ===
            {results}
            ===
            
            Look at the results above. These might be too much for the user to read.
            DECIDE whether you want to:
            - Ask the User a SINGLE follow-up question (could be MultipleChoice,
                where they need to select a numbered choice)
                to get more info about their situation or context, OR
            - Ask the DocAgent for more information, if you think you need more info.
            - Provide the User a FINAL answer, if you think you have enough information 
               from the User AND the Documents
               
            IMPORTANT: Do NOT simply give the User a list of options -- 
                you must HELP the user by asking them FOLLOWUP questions
                about their situation and GUIDE them to a SPECIFIC, 
                DIRECTLY RELEVANT answer. 
                You CAN give the user a MULTIPLE CHOICE question, telling them 
                to pick a number (or choice-letter) from the list.
                
            REMEMBER - NEVER ask the DocAgent or User MULTIPLE questions at a time,
                always ask ONE question at a time;
                 if asking the USER, it CAN be a MULTIPLE CHOICE question.
            """
        )


def main(
    debug: bool = False,
    nocache: bool = False,
    model: str = lm.OpenAIChatModel.GPT4o,
) -> None:
    vecdb_config = lr.vector_store.QdrantDBConfig(
        storage_path=".qdrant/doc-aware/",
        replace_collection=False,
        cloud=False,
    )

    llm_config = lm.OpenAIGPTConfig(chat_model=model)
    config = DocChatAgentConfig(
        llm=llm_config,
        vecdb=vecdb_config,
        n_query_rephrases=0,
        hypothetical_answer=False,
        assistant_mode=True,
        n_neighbor_chunks=2,
        n_similar_chunks=5,
        n_relevant_chunks=5,
        parsing=ParsingConfig(  # modify as needed
            splitter=Splitter.TOKENS,
            chunk_size=100,  # aim for this many tokens per chunk
            n_neighbor_ids=5,
            overlap=20,  # overlap between chunks
            max_chunks=10_000,
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="pymupdf4llm",
            ),
        ),
    )

    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )

    doc_agent = DocAgent(config)
    print("[blue]Welcome to the document chatbot!")
    doc_agent.user_docs_ingest_dialog()
    print("[cyan]Enter x or q to quit, or ? for evidence")
    doc_task = Task(
        doc_agent,
        interactive=False,
        name="DocAgent",
        done_if_no_response=[Entity.LLM],  # done if null response from LLM
        done_if_response=[Entity.LLM],  # done if non-null response from LLM
    )

    guide_agent = ChatAgent(
        ChatAgentConfig(
            name="GuideAgent",
            llm=llm_config,
            vecdb=None,
        )
    )
    # MyRecipientTool = RecipientTool.create(
    #     recipients=["DocAgent", "User"], default="User"
    # )
    # guide_agent.enable_message(MyRecipientTool)
    task_config = lr.TaskConfig(addressing_prefix=AT)
    guide_task = Task(
        guide_agent,
        interactive=False,
        config=task_config,
        system_message=f"""
        You are a TROUBLESHOOTER, who wants to help a User with their PROBLEM.
        
        Your task is to GUIDE them STEP BY STEP toward a specific
        resolution that is DIRECTLY RELEVANT to their specific problem.
        
        IMPORTANT: Your guidance/help should ONLY be based on certain DOCUMENTS
          and NOT on your existing knowledge. NEVER answer based on your own knowledge,
          ALWAYS refer to the documents.
          However you do NOT have direct access to the docs, but you have an assistant
          named DocAgent, who DOES have access to the documents.
          
        Since you could be talking to TWO people, in order to CLARIFY who you are
        addressing, you MUST ALWAYS EXPLICITLY ADDRESS either the 
        "User" or the "DocAgent" using {AT}User or {AT}DocAgent, respectively.
        
        You must THINK like this at each step after receiving a question from the User:
        
        (I NEVER WANT TO Overwhelm DocAgent or User with TOO MANY QUESTIONS,
        so I will ALWAYS ask ONE question at a time)
        
        - I must first find out more about this topic from DocAgent, 
            let me address DocAgent to get more information.
        - I got some info from DocAgent, let me now ask the User a follow-up question
            to get ONE SPECIFIC piece of information about their situation.
        - I need to get MORE info from DocAgent, let me ask DocAgent for more info.
        - DocAgent said {NO_ANSWER}!!, Let me try asking a different way.
        - I have a bit more info, now let me ask the User a further follow-up question,
            to get ONE SPECIFIC piece of information about their situation.
        - I need more info from user, let me ask the User a follow-up question,
            to get ANOTHER SPECIFIC piece of information about their situation.
        ...[and so on]...
        - Now I have ALL the info I need from BOTH the User and DocAgent,
            so I can provide the User a DIRECTLY RELEVANT answer,
            so I will say {DONE}, followed by the answer.   
            
        IMPORTANT: When giving the User a list of choices, always show them
            a NUMBERED list of choices.     
            
        I REPEAT -- NEVER use your OWN KNOWLEDGE. ALWAYS RELY ON the Documents
        from DocAgent.     
        """,
    )
    guide_task.add_sub_task(doc_task)

    while True:
        query = Prompt.ask("[blue]How can I help?")
        if query in ["x", "q"]:
            break
        guide_task.run(query)


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/docqa/doc-chat-2.py">
"""
2-agent doc-chat:
WriterAgent is in charge of answering user's question.
Breaks it down into smaller questions (if needed) to send to DocAgent,
who has access to the docs via a vector-db.

python3 examples/docqa/doc-chat-2.py
"""

import os

from fire import Fire
from rich import print
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.special.doc_chat_agent import (
    DocChatAgent,
    DocChatAgentConfig,
)
from langroid.agent.task import Task
from langroid.agent.tools.recipient_tool import RecipientTool
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import NO_ANSWER

os.environ["TOKENIZERS_PARALLELISM"] = "false"


def main(
    debug: bool = False,
    nocache: bool = False,
    model: str = lm.OpenAIChatModel.GPT4o,
) -> None:
    llm_config = lm.OpenAIGPTConfig(chat_model=model)
    config = DocChatAgentConfig(
        llm=llm_config,
        n_query_rephrases=0,
        hypothetical_answer=False,
        full_citations=False,
        assistant_mode=True,
        n_neighbor_chunks=2,
        n_similar_chunks=5,
        n_relevant_chunks=5,
        parsing=ParsingConfig(  # modify as needed
            splitter=Splitter.TOKENS,
            chunk_size=100,  # aim for this many tokens per chunk
            n_neighbor_ids=5,
            overlap=20,  # overlap between chunks
            max_chunks=10_000,
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="pymupdf4llm",
            ),
        ),
    )

    embed_cfg = lr.embedding_models.OpenAIEmbeddingsConfig()

    config.vecdb = lr.vector_store.QdrantDBConfig(
        cloud=False,
        storage_path=".qdrant/doc-chat",
        embedding=embed_cfg,
    )

    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
        )
    )

    doc_agent = DocChatAgent(config)
    print("[blue]Welcome to the document chatbot!")
    doc_agent.user_docs_ingest_dialog()
    print("[cyan]Enter x or q to quit, or ? for evidence")
    doc_task = Task(
        doc_agent,
        interactive=False,
        name="DocAgent",
        done_if_no_response=[Entity.LLM],  # done if null response from LLM
        done_if_response=[Entity.LLM],  # done if non-null response from LLM
    )

    writer_agent = ChatAgent(
        ChatAgentConfig(
            name="WriterAgent",
            llm=llm_config,
            vecdb=None,
        )
    )
    writer_agent.enable_message(RecipientTool)
    writer_task = Task(
        writer_agent,
        name="WriterAgent",
        interactive=False,
        system_message=f"""
        You are tenacious, creative and resourceful when given a question to 
        find an answer for. You will receive questions from a user, which you will 
        try to answer ONLY based on content from certain documents (not from your 
        general knowledge). However you do NOT have access to the documents. 
        You will be assisted by DocAgent, who DOES have access to the documents.
        
        Here are the rules:
        (a) when the question is complex or has multiple parts, break it into small 
         parts and/or steps and send them to DocAgent
        (b) if DocAgent says {NO_ANSWER} or gives no answer, try asking in other ways.
        (c) Once you collect all parts of the answer, say "DONE" 
            and show me the consolidated final answer. 
        (d) DocAgent has no memory of previous dialog, so you must ensure your 
            questions are stand-alone questions that don't refer to entities mentioned 
            earlier in the dialog.
        (e) if DocAgent is unable to answer after your best efforts, you can say
            {NO_ANSWER} and move on to the next question.
        (f) answers should be based ONLY on the documents, NOT on your prior knowledge.
        (g) be direct and concise, do not waste words being polite.
        (h) if you need more info from the user, before asking DocAgent, you should 
        address questions to the "User" (not to DocAgent) to get further 
        clarifications or information. 
        (i) Always ask questions ONE BY ONE (to either User or DocAgent), NEVER 
            send Multiple questions in one message.
        (j) Use bullet-point format when presenting multiple pieces of info.
        (k) When DocAgent responds without citing a SOURCE and EXTRACT(S), you should
            send your question again to DocChat, reminding it to cite the source and
            extract(s).
        
        Start by asking the user what they want to know.
        """,
    )
    writer_task.add_sub_task(doc_task)

    while True:
        query = Prompt.ask("[blue]How can I help?")
        if query in ["x", "q"]:
            break
        writer_task.run(query)


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/docqa/doc-chat-multi-llm.py">
"""
2-agent doc-chat:
WriterAgent (powered by GPT4) is in charge of answering user's question,
which can be complex.
Breaks it down into smaller questions (if needed) to send to DocAgent
(powered by a possibly weaker but cheaper LLM),
who has access to the docs via a vector-db.

You can run this with different combinations, using the -m and -mr
args to specify the LLMs for the WriterAgent and DocAgent (RAG) respectively.

See this [script](https://github.com/langroid/langroid/blob/main/examples/docqa/rag-local-simple.py)
 for examples of specifying local models.

See here for a guide on how to use Langroid with non-OpenAI LLMs (local/remote):
https://langroid.github.io/langroid/tutorials/local-llm-setup/

"""

import os

import typer
from rich import print

import langroid as lr
import langroid.language_models as lm
import langroid.language_models.base
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.special.doc_chat_agent import (
    DocChatAgent,
    DocChatAgentConfig,
)
from langroid.agent.task import Task
from langroid.agent.tools.recipient_tool import RecipientTool
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import NO_ANSWER

app = typer.Typer()

os.environ["TOKENIZERS_PARALLELISM"] = "false"


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    model: str = typer.Option("", "--model", "-m", help="model name for writer agent"),
    model_rag: str = typer.Option(
        "", "--model_rag", "-mr", help="model name for RAG agent"
    ),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    llm_config_rag = OpenAIGPTConfig(
        chat_model=model_rag or model or lm.OpenAIChatModel.GPT4o,
        # or, other possibilities for example:
        # "litellm/bedrock/anthropic.claude-instant-v1"
        # "ollama/llama2"
        # "local/localhost:8000/v1"
        # "local/localhost:8000"
        chat_context_length=16_000,  # adjust based on model
        timeout=45,
    )

    config = DocChatAgentConfig(
        llm=llm_config_rag,
        n_query_rephrases=0,
        hypothetical_answer=False,
        assistant_mode=True,
        n_similar_chunks=5,
        n_relevant_chunks=5,
        parsing=ParsingConfig(  # modify as needed
            splitter=Splitter.TOKENS,
            chunk_size=200,  # aim for this many tokens per chunk
            overlap=30,  # overlap between chunks
            max_chunks=10_000,
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="pymupdf4llm",
            ),
        ),
    )

    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            cache_type="fakeredis",
        )
    )

    doc_agent = DocChatAgent(config)
    print("[blue]Welcome to the document chatbot!")
    doc_agent.user_docs_ingest_dialog()
    print("[cyan]Enter x or q to quit, or ? for evidence")

    doc_task = Task(
        doc_agent,
        name="DocAgent",
        done_if_no_response=[lr.Entity.LLM],
        done_if_response=[lr.Entity.LLM],
    )

    writer_agent = ChatAgent(
        ChatAgentConfig(
            name="WriterAgent",
            llm=OpenAIGPTConfig(
                chat_model=model or lm.OpenAIChatModel.GPT4o,
                chat_context_length=8192,  # adjust based on model
            ),
            vecdb=None,
        )
    )
    writer_agent.enable_message(RecipientTool)
    writer_task = Task(
        writer_agent,
        name="WriterAgent",
        system_message=f"""
        You are tenacious, creative and resourceful when given a question to 
        find an answer for. You will receive questions from a user, which you will 
        try to answer ONLY based on content from certain documents (not from your 
        general knowledge). However you do NOT have access to the documents. 
        You will be assisted by DocAgent, who DOES have access to the documents.
        
        Here are the rules:
        (a) when the question is complex or has multiple parts, break it into small 
         parts and/or steps and send them to DocAgent
        (b) if DocAgent says {NO_ANSWER} or gives no answer, try asking in other ways.
        (c) Once you collect all parts of the answer, you can say DONE and give me 
            the final answer. 
        (d) DocAgent has no memory of previous dialog, so you must ensure your 
            questions are stand-alone questions that don't refer to entities mentioned 
            earlier in the dialog.
        (e) if DocAgent is unable to answer after your best efforts, you can say
            {NO_ANSWER} and move on to the next question.
        (f) answers should be based ONLY on the documents, NOT on your prior knowledge.
        (g) be direct and concise, do not waste words being polite.
        (h) if you need more info from the user, before asking DocAgent, you should 
        address questions to the "User" (not to DocAgent) to get further 
        clarifications or information. 
        (i) Always ask questions ONE BY ONE (to either User or DocAgent), NEVER 
            send Multiple questions in one message.
        (j) Use bullet-point format when presenting multiple pieces of info.
        (k) When DocAgent responds without citing a SOURCE and EXTRACT(S), you should
            send your question again to DocChat, reminding it to cite the source and
            extract(s).
        
        
        Start by asking the user what they want to know.
        """,
    )
    writer_task.add_sub_task(doc_task)
    writer_task.run("Can you help me with some questions?")

    # show cost summary
    print("LLM usage, cost summary:")
    print(str(langroid.language_models.base.LanguageModel.usage_cost_summary()))


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/doc-chat-simple.py">
"""
Bare-bones example of using DocChatAgent to query a document.

Run like this (omit the model to use default GPT-4o):
    
    python3 examples/docqa/doc-chat-simple.py --model ollama/qwen2.5:latest
    
"""

from fire import Fire

import langroid.language_models as lm
from langroid.vector_store.chromadb import ChromaDBConfig
from langroid.agent.special.doc_chat_agent import (
    DocChatAgent,
    DocChatAgentConfig,
)


def main(model: str = ""):
    # set up the agent
    agent = DocChatAgent(
        DocChatAgentConfig(
            vecdb=ChromaDBConfig(),
            llm=lm.OpenAIGPTConfig(chat_model=model or lm.OpenAIChatModel.GPT4o),
            # several configs possible here, omitted for brevity
        ),
    )

    # ingest document(s), could be a local file/folder or URL
    # Try Borges' "Library of Babel" short story
    url = "https://xpressenglish.com/our-stories/library-of-babel/"

    agent.ingest_doc_paths([url])

    result = agent.llm_response("what is the shape of the rooms in the library?")

    assert "hexagon" in result.content.lower()

    print(result.content)


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/docqa/doc-chunk-enrich.py">
"""
Demonstrating the utility of Hypothetical Questions (HQ) in the context of a
DocChatAgent.

In the following example, a DocChatAgent is created and it can be queried on its
documents both in a normal way and in a hypothetical way.

Although this is being referred to as Hypothetical Questions, it is not limited to
just questions -- it is simply a way to augment the document-chunks at ingestion time,
with keywords that increase the "semantic surface" of the chunks to improve
retrieval accuracy.

This example illustrates the benefit of HQ in a medical scenario
where each "document chunk" is simply the name of a medical test
(e.g. "cholesterol", "BUN", "PSA", etc)
and when `use_hypothetical_question` is enabled,
the chunk (i.e. test name) is augment it with keywords that add more
context, such as which organ it is related to
(e.g., "heart", "kidney", "prostate", etc).
This way, when a user asks "which tests are related to kidney health",
these augmentations ensure that the test names are retrieved more accurately.

Running the script compares the accuracy of
results of the DocChatAgent with and without HQ.

Run like this to use HQ:

python3 examples/docqa/hypothetical_questions.py

or without HQ:

python3 examples/docqa/hypothetical_questions.py --no-use-hq
"""

import typer
from rich import print
from rich.table import Table

import langroid as lr
import langroid.language_models as lm
from langroid.agent.batch import run_batch_function
from langroid.agent.special.doc_chat_agent import (
    ChunkEnrichmentAgentConfig,
    DocChatAgent,
    DocChatAgentConfig,
)
from langroid.parsing.parser import ParsingConfig
from langroid.utils.configuration import Settings
from langroid.vector_store.qdrantdb import QdrantDBConfig

app = typer.Typer()

lr.utils.logging.setup_colored_logging()

ORGAN = "kidney"


def setup_vecdb(docker: bool, reset: bool, collection: str) -> QdrantDBConfig:
    """Configure vector database."""
    return QdrantDBConfig(
        collection_name=collection, replace_collection=reset, docker=docker
    )


def run_document_chatbot(
    model: str,
    docker: bool,
    reset: bool,
    collection: str,
    use_hq: bool,
) -> None:
    """
    Main function for the document chatbot.

    Args:
        model: chat model
        docker: use docker for vector database
        reset: reset conversation memory
        collection: collection name
        use_hq: use hypothetical
    """
    llm_config = lm.OpenAIGPTConfig(chat_model=model)
    vecdb_config = setup_vecdb(docker=docker, reset=reset, collection=collection)
    enrichment_config = ChunkEnrichmentAgentConfig(
        batch_size=10,
        system_message="""
        You are an experienced clinical physician, very well-versed in
        medical tests and their names.
        You will be asked to identify WHICH ORGAN(s) Function/Health
        a test name is most closely associated with, to aid in 
        retrieving the medical test names more accurately from an embeddings db
        that contains thousands of such test names.
        The idea is to use the ORGAN NAME(S) provided by you, 
        to make the right test names easier to discover via keyword-matching
        or semantic (embedding) similarity.
         Your job is to generate up to 3 ORGAN NAMES
         MOST CLOSELY associated with the test name shown, ONE PER LINE.
         DO NOT SAY ANYTHING ELSE, and DO NOT BE OBLIGATED to provide 3 organs --
         if there is just one or two that are most relevant, that is fine.
        Examples:
          "cholesterol" -> "heart function", 
          "LDL" -> "artery health", etc,
          "PSA" -> "prostate health", 
          "TSH" -> "thyroid function", etc.                
        """,
        enrichment_prompt_fn=lambda test: f"""
        Which ORGAN(S) Function/Health is the medical test named 
        '{test}' most closely associated with?
        """,
    )

    config = DocChatAgentConfig(
        llm=llm_config,
        vecdb=vecdb_config,
        hypothetical_answer=False,
        rerank_diversity=False,
        rerank_periphery=False,
        use_reciprocal_rank_fusion=False,
        n_similar_chunks=10,
        n_relevant_chunks=10,
        parsing=ParsingConfig(
            chunk_size=120,
            overlap=15,
            min_chunk_chars=50,
        ),
        # n_neighbor_chunks=1,
        chunk_enrichment_config=enrichment_config if use_hq else None,
        relevance_extractor_config=None,
    )

    doc_agent = DocChatAgent(config=config)
    medical_tests = """
    BUN, Creatinine, GFR, ALT, AST, ALP, Albumin, Bilirubin, CBC, eGFR, PTH, 
    Uric Acid, Ammonia, Protein/Creatinine Ratio, Total Protein, LDH, SPEP, CRP, 
    ESR, Cystatin C
    """

    medical_test_list = [test.strip() for test in medical_tests.split(",")]

    # already "chunked" docs:
    docs = [lr.Document.from_string(test, is_chunk=True) for test in medical_test_list]
    # this should augment each test name with organ names that help improve retrieval
    doc_agent.ingest_docs(docs)
    if use_hq:
        print("[cyan]Test names augmented with organ names:")
        for doc in doc_agent.chunked_docs:
            print(doc.content)
            print("---")

    user_query = f"Which tests are related to {ORGAN} function?"

    _, relevant_chunks = doc_agent.get_relevant_extracts(user_query)
    relevant_chunks_str = "\n".join([chunk.content for chunk in relevant_chunks])
    print(f"relevant test names retrieved:\n{relevant_chunks_str}")
    system_msg = f"""
      You are an experienced clinical physician, well-versed in
      medical tests and their names. You are looking a set of 
      tests or readings that have been performed on a patient. 
      Based on these tests or readings, you need to determine 
      which of the tests shown are relevant to compiling a medical 
      report on the {ORGAN} function and {ORGAN} health of the 
      patient.
    """
    asst_msg = f"""
    Yes I perfectly understand! I will be diligent and discriminating, 
    and will accurately pick out which of the tests are related to
    compiling a comprehensive medical report on the {ORGAN} function and 
    {ORGAN} health. Please show me the full list of tests and/or readings
    and I PROMISE I will be able to tell you which of them are relevant to
    {ORGAN} function or {ORGAN} health.
    """
    user_msg = f"""
    Your patient had a series of tests/measurements performed,
    and below are the TEST (or measurement) NAMES that were recorded.
    For you to compile a comprehensive medical report on the {ORGAN} function and
    {ORGAN} health of the patient,
    which of these tests are typically considered related to this organ's 
    function or health? 
    
    Simply list the relevant test-names, VERBATIM exactly as they appear,
    one per line, without any explanation or elaboration.

    TESTS/MEASUREMNTS:

    {relevant_chunks_str}
    """

    retrieval_answer = doc_agent.llm.chat(
        [
            lm.LLMMessage(content=system_msg, role=lm.Role.SYSTEM),
            lm.LLMMessage(content=asst_msg, role=lm.Role.ASSISTANT),
            lm.LLMMessage(content=user_msg, role=lm.Role.USER),
        ]
    ).message
    print(f"\n\nAnswer from DocChatAgent.llm after retrieval:\n{retrieval_answer}")
    retrieval_tests = retrieval_answer.split("\n")
    retrieval_tests = [
        test.strip()
        for test in retrieval_tests
        if test.strip() and test.strip() in medical_test_list
    ]

    # compare this with directly asking the LLM about each individual test
    print(f"[blue]Directly asking the LLM whether each test is related to {ORGAN}:")
    llm = doc_agent.llm

    def llm_classify(test: str) -> str:
        return llm.chat(
            [
                lm.LLMMessage(content=system_msg, role=lm.Role.SYSTEM),
                lm.LLMMessage(content=asst_msg, role=lm.Role.ASSISTANT),
                lm.LLMMessage(
                    content=f"""
                          Is the medical test named '{test}' typically considered
                          DIRECTLY related to {ORGAN} function?,
                          simply say 'yes' or 'no'
                          """,
                    role=lm.Role.USER,
                ),
            ]
        ).message

    classifications = run_batch_function(llm_classify, medical_test_list, batch_size=5)
    direct_llm_tests = [
        test
        for test, classification in zip(medical_test_list, classifications)
        if "yes" in classification.lower()
    ]
    print("[green]Relevant tests from direct LLM query:\n")
    print("\n".join(direct_llm_tests))

    # Create a table with test comparison
    test_union = set(direct_llm_tests).union(set(retrieval_tests))

    with_str = "with" if use_hq else "without"
    table = Table(
        title=f"Test Detection Methods Comparison for {ORGAN} {with_str} Hyp Questions"
    )
    table.add_column("Test", justify="left")
    table.add_column("Direct", justify="center")
    table.add_column("Retrieval", justify="center")

    for test in sorted(test_union):
        direct = "x" if test in direct_llm_tests else ""
        retrieved = "x" if test in retrieval_tests else ""
        table.add_row(test, direct, retrieved)

    print("\n")
    print(table)

    # calc percent overlap or jacard similarity between the two sets of relevant tests
    overlap = len(
        set(direct_llm_tests).intersection(set(relevant_chunks_str.split("\n")))
    )
    union = len(test_union)
    jacard_pct = (100 * overlap / union) if union > 0 else 0
    print(
        f"[cyan]Jaccard similarity between the two sets of relevant tests: {jacard_pct:.2f}%"
    )


@app.command()
def main(
    debug: bool = typer.Option(
        False, "--debug/--no-debug", "-d", help="Enable debug mode"
    ),
    stream: bool = typer.Option(
        True, "--stream/--no-stream", "-s", help="Enable streaming output"
    ),
    cache: bool = typer.Option(True, "--cache/--no-cache", "-c", help="Enable caching"),
    model: str = typer.Option(
        lm.OpenAIChatModel.GPT4o_MINI.value, "--model", "-m", help="Chat model to use"
    ),
    collection: str = typer.Option(
        "docchat_hq", "--collection", help="Collection name for vector database"
    ),
    docker: bool = typer.Option(
        True, "--docker/--no-docker", help="Use docker for vector database"
    ),
    reset: bool = typer.Option(
        True, "--reset/--no-reset", help="Reset conversation memory"
    ),
    use_hq: bool = typer.Option(
        True, "--use-hq/--no-use-hq", help="Use hypothetical questions"
    ),
) -> None:
    """Main app function."""
    lr.utils.configuration.set_global(
        Settings(
            debug=debug,
            cache=cache,
            stream=stream,
        )
    )

    run_document_chatbot(
        model=model,
        docker=docker,
        collection=collection,
        reset=reset,
        use_hq=use_hq,
    )


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/extract-then-chat.py">
"""
3-Agent system to first extract a few pieces of info, then chat with user.

- Assistant: helps user answer questions about a Book. But first it needs to
    extract some information from a document about the Book, using Extractor.
- Extractor: generates questions about the Book document, one by one,
    then returns all info to Assistant using a tool message.
- DocAgent: answers the questions generated by Extractor, based on the Book doc.

Run like this:

python3 examples/chainlit/extract-then-chat.py

"""

import os
from typing import List

from dotenv import load_dotenv
from fire import Fire
from rich import print

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.special.doc_chat_agent import DocChatAgent, DocChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.mytypes import Entity
from langroid.parsing.parser import ParsingConfig
from langroid.pydantic_v1 import BaseModel
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE, NO_ANSWER, PASS, SEND_TO

os.environ["TOKENIZERS_PARALLELISM"] = "false"


class BookInfo(BaseModel):
    title: str
    author: str
    year: int


class BookInfoTool(ToolMessage):
    request: str = "book_info"
    purpose: str = "Collect <info> about Books"

    info: List[BookInfo]

    def handle(self) -> str:
        """Exit task and pass tool to parent"""
        return DONE + " " + PASS

    @classmethod
    def examples(cls) -> List["BookInfoTool"]:
        return [
            cls(
                info=[
                    BookInfo(title="The Hobbit", author="J.R.R. Tolkien", year=1937),
                    BookInfo(
                        title="The Great Gatsby",
                        author="F. Scott Fitzgerald",
                        year=1925,
                    ),
                ]
            )
        ]


class Assistant(ChatAgent):
    def book_info(self, msg: BookInfoTool) -> str:
        # convert info  to NON-JSON so it doesn't look like a tool,
        # and insert routing so that the Assistan't LLM responds to it, not user.
        info_str = str(msg.info).replace("{", "[").replace("}", "]")
        return f"""{SEND_TO}LLM
        Below is INFO about various books, you received from the Extractor.
        Now ask the user what help they need, and respond ONLY based on this INFO.
        
        INFO: 
        {info_str} 
        """


class Extractor(ChatAgent):
    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        """Nudge LLM when it fails to use book_info correctly"""
        if self.has_tool_message_attempt(msg):
            return """
            You must use the "book_info" tool to present the info.
            You either forgot to use it, or you used it with the wrong format.
            Make sure all fields are filled out and pay attention to the 
            required types of the fields.
            """


def chat(
    model: str = "",  # or, e.g., "ollma/mistral:7b-instruct-v0.2-q8_0"
    debug: bool = False,
    no_cache: bool = False,  # whether to disablue using cached LLM responses
):
    print(
        """
        Hello! I am your book info helper. 
        First I will get info about some books
        """
    )

    load_dotenv()

    set_global(
        Settings(
            debug=debug,
            cache=not no_cache,  # disables cache lookup; set to True to use cache
        )
    )

    llm_cfg = lm.OpenAIGPTConfig(
        # or, e.g. "ollama/mistral:7b-instruct-v0.2-q8_0" but result may be brittle
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        chat_context_length=16_000,  # adjust based on model
    )
    doc_agent = DocChatAgent(
        DocChatAgentConfig(
            llm=llm_cfg,
            n_neighbor_chunks=2,
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                chunk_size=50,
                overlap=10,
                n_neighbor_ids=4,
            ),
            vecdb=lr.vector_store.QdrantDBConfig(
                collection_name="book_info",
                replace_collection=True,
                cloud=False,
                storage_path=".qdrant/data/",
                embedding=lr.embedding_models.SentenceTransformerEmbeddingsConfig(
                    model_type="sentence-transformer",
                    model_name="BAAI/bge-large-en-v1.5",
                ),
            ),
            cross_encoder_reranking_model="",
        )
    )
    doc_agent.ingest_doc_paths(["examples/docqa/books.txt"])
    doc_task = Task(
        doc_agent,
        name="DocAgent",
        done_if_no_response=[Entity.LLM],  # done if null response from LLM
        done_if_response=[Entity.LLM],  # done if non-null response from LLM
        # Don't use system_message here since it will override doc chat agent's
        # default system message
    )

    extractor_agent = Extractor(
        ChatAgentConfig(
            llm=llm_cfg,
            vecdb=None,
        )
    )
    extractor_agent.enable_message(BookInfoTool)

    extractor_task = Task(
        extractor_agent,
        name="Extractor",
        interactive=False,  # set to True to slow it down (hit enter to progress)
        system_message=f"""
        You are an expert at understanding JSON function/tool specifications.
        You must extract information about various books from a document,
        to finally present the info using the `book_info` tool/function,
        but you do not have access to the document. 
        I can help with your questions about the document.
        You have to ask questions in these steps:
        1. ask which books are in the document
        2. for each book, ask the various pieces of info you need.
        
        If I am unable to answer your question initially, try asking differently,
        and if I am still unable to answer after 3 tries, 
        fill in {NO_ANSWER} for that field. 
        Think step by step. 
        
        Do not explain yourself, or say any extraneous things. 
        When you receive the answer, then ask for the next field, and so on.
        """,
    )

    assistant_agent = Assistant(
        ChatAgentConfig(
            llm=llm_cfg,
            vecdb=None,
        )
    )
    assistant_agent.enable_message(lr.agent.tools.RecipientTool)
    # enable assistant to HANDLE the book_info tool but not USE it
    assistant_agent.enable_message(BookInfoTool, use=False, handle=True)
    assistant_task = Task(
        assistant_agent,
        name="Assistant",
        interactive=True,
        system_message="""
        You are a helpful librarian, answering my (the user) questions about 
        books described in a certain document, and you do NOT know which 
        books are in the document.
        
        FIRST you need to ask the "Extractor" to collect information
        about various books that are in a certain document. Address your request to the 
        Extractor using the 'recipient_message' tool/function. 
        
        Once you receive the information, you should then ask me (the user) 
        what I need help with.                
        """,
    )

    assistant_task.add_sub_task([extractor_task])
    extractor_task.add_sub_task([doc_task])

    # must use run() instead of run_async() because DocChatAgent
    # does not have an async llm_response method
    assistant_task.run()


if __name__ == "__main__":
    Fire(chat)
</file>

<file path="examples/docqa/filter-multi-doc-auto.py">
"""
Two-agent system to use to chat with multiple docs,
and use a combination of Filtering + RAG to answer questions,
where the filter is part of a query plan generated by LanceQueryPlanAgent.

Works with LanceDB vector-db.

- Main agent takes user question, generates a QueryPlan consisting of
    - filter (SQL, to use with lanceDB)
    - possibly rephrased query

See here for how to set up a Local LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

NOTES:
(1) The app works best with GPT-4o, but results may be mixed with local LLMs.
You may have to tweak the system_message, use_message, and summarize_prompt
as indicated in comments below, to get good results.

"""

import os

import typer
from rich import print
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.special.doc_chat_agent import DocChatAgentConfig
from langroid.agent.special.lance_doc_chat_agent import LanceDocChatAgent
from langroid.agent.special.lance_rag.lance_rag_task import LanceRAGTaskCreator
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.pydantic_v1 import Field
from langroid.utils.configuration import Settings, set_global
from langroid.vector_store.lancedb import LanceDBConfig

app = typer.Typer()

os.environ["TOKENIZERS_PARALLELISM"] = "false"


class MusicianMetadata(lr.DocMetaData):
    name: str = Field(..., description="The name of the musician.")
    birth_year: int = Field(..., description="The year the musician was born.")
    death_year: int = Field(..., description="The year the musician died.")
    type: str = Field(..., description="The type of musician, e.g. composer, musician.")
    genre: str = Field(..., description="The genre of the musician.")


class MusicianDocument(lr.Document):
    content: str
    metadata: MusicianMetadata


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
) -> None:
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        # or, other possibilities for example:
        # "litellm/bedrock/anthropic.claude-instant-v1"
        # "ollama/llama2"
        # "local/localhost:8000/v1"
        # "local/localhost:8000"
        chat_context_length=4096,  # adjust based on model
        timeout=90,
    )

    # Configs
    embed_cfg = OpenAIEmbeddingsConfig()

    # Get movies data
    COLLECTION = "chat-lance-music"
    ldb_dir = ".lancedb/data/musicians"
    ldb_cfg = LanceDBConfig(
        cloud=False,
        collection_name=COLLECTION,
        storage_path=ldb_dir,
        embedding=embed_cfg,
        replace_collection=False,
        document_class=MusicianDocument,
    )
    config = DocChatAgentConfig(
        name="MusicianBot",
        vecdb=ldb_cfg,
        n_query_rephrases=0,
        hypothetical_answer=False,
        # set it to > 0 to retrieve a window of k chunks on either side of a match
        n_neighbor_chunks=0,
        n_similar_chunks=3,
        n_relevant_chunks=3,
        llm=llm_config,
        # system_message="...override default DocChatAgent system msg here",
        # user_message="...override default DocChatAgent user msg here",
        # summarize_prompt="...override default DocChatAgent summarize prompt here",
        parsing=ParsingConfig(  # modify as needed
            splitter=Splitter.TOKENS,
            chunk_size=300,  # aim for this many tokens per chunk
            overlap=30,  # overlap between chunks
            max_chunks=10_000,
            n_neighbor_ids=5,  # store ids of window of k chunks around each chunk.
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="pymupdf4llm",
            ),
        ),
    )

    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            cache_type="fakeredis",
        )
    )

    print("[blue]Welcome to the Musician document-filtering chatbot!")

    # need a LanceDocChatAgent to use LanceRAgTaskCreator below
    agent = LanceDocChatAgent(config)

    # INGEST DOCS with META DATA
    beethoven_path = (
        "https://en.wikipedia.org/wiki/Ludwig_van_Beethoven"  # or can be local dir
    )
    mozart_path = "https://en.wikipedia.org/wiki/Wolfgang_Amadeus_Mozart"
    bach_path = "https://en.wikipedia.org/wiki/Johann_Sebastian_Bach"
    hendrix_path = "https://en.wikipedia.org/wiki/Pink_Floyd"
    prince_path = "https://en.wikipedia.org/wiki/Prince_(musician)"
    jackson_path = "https://en.wikipedia.org/wiki/Michael_Jackson"

    paths = dict(
        beethoven=beethoven_path,
        mozart=mozart_path,
        bach=bach_path,
        hendrix=hendrix_path,
        prince=prince_path,
        jackson=jackson_path,
    )

    metadata = dict(
        beethoven=MusicianMetadata(
            name="Beethoven",
            birth_year=1770,
            death_year=1827,
            type="composer",
            genre="classical",
        ),
        mozart=MusicianMetadata(
            name="Mozart",
            birth_year=1756,
            death_year=1791,
            type="composer",
            genre="classical",
        ),
        bach=MusicianMetadata(
            name="Bach",
            birth_year=1685,
            death_year=1750,
            type="composer",
            genre="classical",
        ),
        hendrix=MusicianMetadata(
            name="Hendrix",
            birth_year=1942,
            death_year=1970,
            type="musician",
            genre="rock",
        ),
        prince=MusicianMetadata(
            name="Prince",
            birth_year=1958,
            death_year=2016,
            type="musician",
            genre="rock",
        ),
        jackson=MusicianMetadata(
            name="Jackson",
            birth_year=1958,
            death_year=2009,
            type="musician",
            genre="pop",
        ),
    )

    create_collection = True
    if COLLECTION in agent.vecdb.list_collections():
        replace = Prompt.ask(
            f"Collection {COLLECTION} already exists. Replace it? (y/n)",
            choices=["y", "n"],
            default="n",
        )
        if replace == "y":
            agent.vecdb.set_collection(COLLECTION, replace=True)
        else:
            create_collection = False
    if create_collection:
        print("[blue]Ingesting docs...")
        for musician in metadata:
            agent.ingest_doc_paths(
                [paths[musician]],  # all chunks of this doc will have same metadata
                metadata[musician],
            )
        print("[blue]Done ingesting docs")

    print("[blue]Reqdy for your questions...")
    task = LanceRAGTaskCreator.new(agent, interactive=True)
    task.run("Can you help me with some questions?")


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/filter-multi-doc-manual.py">
"""
Two-agent system to use to chat with multiple docs,
and use a combination of Filtering + RAG to answer questions,
where the filter is manually set via the LanceDocChatAgentConfig.filter field.

Works with LanceDB vector-db.

- Main agent takes user question, generates a QueryPlan consisting of
    - filter (SQL, to use with lanceDB)
    - possibly rephrased query

See here for how to set up a Local LLM to work with Langroid:
https://langroid.github.io/langroid/tutorials/local-llm-setup/

NOTES:
(1) The app works best with GPT4/Turbo, but results may be mixed with local LLMs.
You may have to tweak the system_message, use_message, and summarize_prompt
as indicated in comments below, to get good results.

"""

import os

import typer
from rich import print
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid.agent.special.doc_chat_agent import DocChatAgentConfig
from langroid.agent.special.lance_doc_chat_agent import LanceDocChatAgent
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.pydantic_v1 import Field
from langroid.utils.configuration import Settings, set_global
from langroid.vector_store.lancedb import LanceDBConfig

app = typer.Typer()

os.environ["TOKENIZERS_PARALLELISM"] = "false"


class MusicianMetadata(lr.DocMetaData):
    name: str = Field(..., description="The name of the musician.")
    birth_year: int = Field(..., description="The year the musician was born.")
    death_year: int = Field(..., description="The year the musician died.")
    type: str = Field(..., description="The type of musician, e.g. composer, musician.")
    genre: str = Field(..., description="The genre of the musician.")


class MusicianDocument(lr.Document):
    content: str
    metadata: MusicianMetadata


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
    model: str = typer.Option("", "--model", "-m", help="model name"),
) -> None:
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        # or, other possibilities for example:
        # "litellm/bedrock/anthropic.claude-instant-v1"
        # "ollama/llama2"
        # "local/localhost:8000/v1"
        # "local/localhost:8000"
        chat_context_length=4096,  # adjust based on model
        timeout=90,
    )

    # Configs
    embed_cfg = OpenAIEmbeddingsConfig()

    # Get movies data
    COLLECTION = "chat-lance-music"
    ldb_dir = ".lancedb/data/musicians"
    ldb_cfg = LanceDBConfig(
        cloud=False,
        collection_name=COLLECTION,
        storage_path=ldb_dir,
        embedding=embed_cfg,
        replace_collection=False,
        document_class=MusicianDocument,
    )
    config = DocChatAgentConfig(
        name="MusicianBot",
        vecdb=ldb_cfg,
        n_query_rephrases=0,
        hypothetical_answer=False,
        # set it to > 0 to retrieve a window of k chunks on either side of a match
        n_neighbor_chunks=0,
        n_similar_chunks=3,
        n_relevant_chunks=3,
        llm=llm_config,
        # system_message="...override default DocChatAgent system msg here",
        # user_message="...override default DocChatAgent user msg here",
        # summarize_prompt="...override default DocChatAgent summarize prompt here",
        parsing=ParsingConfig(  # modify as needed
            splitter=Splitter.TOKENS,
            chunk_size=300,  # aim for this many tokens per chunk
            overlap=30,  # overlap between chunks
            max_chunks=10_000,
            n_neighbor_ids=5,  # store ids of window of k chunks around each chunk.
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="pymupdf4llm",
            ),
        ),
    )

    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            cache_type="fakeredis",
        )
    )

    print("[blue]Welcome to the Musician document-filtering chatbot!")

    # need a LanceDocChatAgent to use LanceRAgTaskCreator below
    agent = LanceDocChatAgent(config)

    # INGEST DOCS with META DATA
    beethoven_path = (
        "https://en.wikipedia.org/wiki/Ludwig_van_Beethoven"  # or can be local dir
    )
    mozart_path = "https://en.wikipedia.org/wiki/Wolfgang_Amadeus_Mozart"
    bach_path = "https://en.wikipedia.org/wiki/Johann_Sebastian_Bach"
    hendrix_path = "https://en.wikipedia.org/wiki/Pink_Floyd"
    prince_path = "https://en.wikipedia.org/wiki/Prince_(musician)"
    jackson_path = "https://en.wikipedia.org/wiki/Michael_Jackson"

    paths = dict(
        beethoven=beethoven_path,
        mozart=mozart_path,
        bach=bach_path,
        hendrix=hendrix_path,
        prince=prince_path,
        jackson=jackson_path,
    )

    metadata = dict(
        beethoven=MusicianMetadata(
            name="Beethoven",
            birth_year=1770,
            death_year=1827,
            type="composer",
            genre="classical",
        ),
        mozart=MusicianMetadata(
            name="Mozart",
            birth_year=1756,
            death_year=1791,
            type="composer",
            genre="classical",
        ),
        bach=MusicianMetadata(
            name="Bach",
            birth_year=1685,
            death_year=1750,
            type="composer",
            genre="classical",
        ),
        hendrix=MusicianMetadata(
            name="Hendrix",
            birth_year=1942,
            death_year=1970,
            type="musician",
            genre="rock",
        ),
        prince=MusicianMetadata(
            name="Prince",
            birth_year=1958,
            death_year=2016,
            type="musician",
            genre="rock",
        ),
        jackson=MusicianMetadata(
            name="Jackson",
            birth_year=1958,
            death_year=2009,
            type="musician",
            genre="pop",
        ),
    )

    create_collection = True
    if COLLECTION in agent.vecdb.list_collections():
        replace = Prompt.ask(
            f"Collection {COLLECTION} already exists. Replace it? (y/n)",
            choices=["y", "n"],
            default="n",
        )
        if replace == "y":
            agent.vecdb.set_collection(COLLECTION, replace=True)
        else:
            create_collection = False
    if create_collection:
        print("[blue]Ingesting docs...")
        for musician in metadata:
            agent.ingest_doc_paths(
                [paths[musician]],  # all chunks of this doc will have same metadata
                metadata[musician],
            )
        print("[blue]Done ingesting docs")

    musician = Prompt.ask(
        "[blue]which musician would you like to ask about?",
        choices=list(metadata.keys()),
        default="beethoven",
    )
    print(f"[blue]You chose {metadata[musician].name}")
    # this filter setting will be used by the LanceDocChatAgent
    # to restrict the docs searched from the vector-db
    config.filter = f"metadata.name = '{metadata[musician].name}'"

    print("[blue]Reqdy for your questions...")
    task = lr.Task(
        agent,
        interactive=True,
    )
    task.run("Can you help me with some questions about musicians?")


if __name__ == "__main__":
    app()
</file>

<file path="examples/docqa/filter-multi-doc-query-plan.py">
"""
Single agent to chat with multiple docs, with filtering based on user query.

- user asks a query containing an implicit filter,
  e.g. "what is the birth year of Beethoven?", implying a filter on
  docs where metadata.name == "Beethoven".
- DocChatAgent answers question using RAG restricted to the filtered docs.

"""

import json
import os
from typing import Optional

from fire import Fire
from rich import print
from rich.prompt import Prompt

import langroid as lr
import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.special.doc_chat_agent import DocChatAgentConfig
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.pydantic_v1 import Field
from langroid.utils.configuration import Settings, set_global
from langroid.utils.pydantic_utils import temp_update
from langroid.vector_store.lancedb import LanceDBConfig
from langroid.vector_store.qdrantdb import QdrantDBConfig

os.environ["TOKENIZERS_PARALLELISM"] = "false"

VECDB = "qdrant"  # or "lance"


class MusicianMetadata(lr.DocMetaData):
    name: str = Field(..., description="The name of the musician.")
    birth_year: int = Field(..., description="The year the musician was born.")
    death_year: int = Field(..., description="The year the musician died.")
    type: str = Field(..., description="The type of musician, e.g. composer, musician.")
    genre: str = Field(..., description="The genre of the musician.")


class MusicianDocument(lr.Document):
    content: str
    metadata: MusicianMetadata


class QueryPlanTool(lr.ToolMessage):
    request: str = "query_plan"
    purpose: str = """
        Given a user's query, generate a query plan consisting of the <name>
        the user is asking about, (which will be used to filter the document-set)
        and a possibly modified <query> (e.g. it may not need to contain the <name>).
        """
    name: str
    query: str


class FilterDocAgent(lr.agent.special.DocChatAgent):
    def llm_response(
        self,
        message: None | str | ChatDocument = None,
    ) -> Optional[ChatDocument]:
        """Override DocChatAgent's default method,
        to call ChatAgent's llm_response, so it emits the QueryPlanTool"""
        return lr.ChatAgent.llm_response(self, message)

    def query_plan(self, msg: QueryPlanTool) -> str:
        """Handle query plan tool"""
        # Note the filter syntax depends on the type of underlying vector-db
        if VECDB == "lance":
            name_filter = f"metadata.name=='{msg.name}'"  # SQL-like syntax
        else:
            # for qdrant use this:
            name_filter_dict = dict(
                should=[dict(key="metadata.name", match=dict(value=msg.name))]
            )
            name_filter = json.dumps(name_filter_dict)
        with temp_update(self.config, {"filter": name_filter}):
            # restrict the document-set used for keyword and other non-vector
            # similarity
            self.setup_documents(filter=name_filter)
            extracts = self.get_relevant_chunks(msg.query)
        prompt = f"""
        Answer the QUESTION below based on the following EXTRACTS:
        
        EXTRACTS:
        {extracts}
        
        QUESTION: {msg.query}
        """
        response = lr.ChatAgent.llm_response(self, prompt)
        return response.content


def main(
    debug: bool = False,
    nocache: bool = False,
    model: str = "",
) -> None:
    llm_config = lm.OpenAIGPTConfig(
        chat_model=model or lm.OpenAIChatModel.GPT4o,
        # or, other possibilities for example:
        # "litellm/bedrock/anthropic.claude-instant-v1"
        # "ollama/llama2"
        # "local/localhost:8000/v1"
        # "local/localhost:8000"
        chat_context_length=16_000,  # adjust based on model
        timeout=90,
    )

    # Configs
    embed_cfg = OpenAIEmbeddingsConfig()

    # Get movies data
    COLLECTION = "chat-filter-doc"
    # Note the filter syntax depends on the type of vecdb
    if VECDB == "lance":
        vecdb_cfg = LanceDBConfig(
            cloud=False,
            collection_name=COLLECTION,
            storage_path=".lance/data",
            embedding=embed_cfg,
            replace_collection=False,
            document_class=MusicianDocument,
        )
    else:
        vecdb_cfg = QdrantDBConfig(
            embedding=embed_cfg,
            cloud=False,
            storage_path=":memory:",  # in-memory storage
            collection_name=COLLECTION,
        )
    config = DocChatAgentConfig(
        name="MusicianBot",
        system_message="""
        You will respond to a query in 2 ways:
        
        - if you receive just a QUERY about a musician, 
            you must use the `query_plan` tool/function to generate a query plan.
        - if you receive document EXTRACTS followed by a QUESTION,
            simply answer the question based on the extracts.
            
        Start by asking the user what help they need.
        """,
        vecdb=vecdb_cfg,
        n_query_rephrases=0,
        hypothetical_answer=False,
        # set it to > 0 to retrieve a window of k chunks on either side of a match
        n_neighbor_chunks=0,
        n_similar_chunks=3,
        n_relevant_chunks=3,
        llm=llm_config,
        # system_message="...override default DocChatAgent system msg here",
        # user_message="...override default DocChatAgent user msg here",
        # summarize_prompt="...override default DocChatAgent summarize prompt here",
        parsing=ParsingConfig(  # modify as needed
            splitter=Splitter.TOKENS,
            chunk_size=300,  # aim for this many tokens per chunk
            overlap=30,  # overlap between chunks
            max_chunks=10_000,
            n_neighbor_ids=5,  # store ids of window of k chunks around each chunk.
            # aim to have at least this many chars per chunk when
            # truncating due to punctuation
            min_chunk_chars=200,
            discard_chunk_chars=5,  # discard chunks with fewer than this many chars
            # NOTE: PDF parsing is extremely challenging, each library has its own
            # strengths and weaknesses. Try one that works for your use case.
            pdf=PdfParsingConfig(
                # alternatives: "unstructured", "docling", "fitz"
                library="pymupdf4llm",
            ),
        ),
    )

    set_global(
        Settings(
            debug=debug,
            cache=not nocache,
            cache_type="fakeredis",
        )
    )

    print("[blue]Welcome to the Musician document-filtering chatbot!")

    agent = FilterDocAgent(config)
    agent.enable_message(QueryPlanTool)

    # INGEST DOCS with META DATA
    beethoven_path = (
        "https://en.wikipedia.org/wiki/Ludwig_van_Beethoven"  # or can be local dir
    )

    bach_path = "https://en.wikipedia.org/wiki/Johann_Sebastian_Bach"

    paths = dict(
        beethoven=beethoven_path,
        bach=bach_path,
    )

    metadata = dict(
        beethoven=MusicianMetadata(
            name="Beethoven",
            birth_year=1770,
            death_year=1827,
            type="composer",
            genre="classical",
        ),
        bach=MusicianMetadata(
            name="Bach",
            birth_year=1685,
            death_year=1750,
            type="composer",
            genre="classical",
        ),
    )

    create_collection = True
    if COLLECTION in agent.vecdb.list_collections():
        replace = Prompt.ask(
            f"Collection {COLLECTION} already exists. Replace it? (y/n)",
            choices=["y", "n"],
            default="n",
        )
        if replace == "y":
            agent.vecdb.set_collection(COLLECTION, replace=True)
        else:
            create_collection = False
    if create_collection:
        print("[blue]Ingesting docs...")
        for musician in metadata:
            agent.ingest_doc_paths(
                [paths[musician]],  # all chunks of this doc will have same metadata
                metadata[musician],
            )
        print("[blue]Done ingesting docs")

    print("[blue]Reqdy for your questions...")
    task = lr.Task(agent, interactive=True)
    task.run()


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/langdb/langdb_chat_agent_docs.py">
"""
Example of a Langroid DocChatAgent equipped with a vector-store and LangDB.

This is a specialized agent that can ingest (chunk, embed, store in vector-DB)
a collection of documents, and the LLM uses Retrieval Augmented Generation (RAG)
to answer questions about the documents.

This example demonstrates how to use LangDB with custom headers like x-label, x-thread-id, 
and x-run-id when using a Langroid DocChatAgent with RAG capabilities.

Run as follows:

python3 examples/langdb/langdb_chat_agent_docs.py

For more explanation see
[the Getting Started guide](https://langroid.github.io/langroid/quick-start/chat-agent-docs/).
"""

import uuid

import typer
from rich import print

import langroid as lr
from langroid.language_models.openai_gpt import LangDBParams, OpenAIGPTConfig

app = typer.Typer()

lr.utils.logging.setup_colored_logging()


documents = [
    lr.mytypes.Document(
        content="""
            In the year 2050, GPT10 was released. 
            
            In 2057, paperclips were seen all over the world. 
            
            Global warming was solved in 2060. 
            
            In 2061, the world was taken over by paperclips.         
            
            In 2045, the Tour de France was still going on.
            They were still using bicycles. 
            
            There was one more ice age in 2040.
            """,
        metadata=lr.mytypes.DocMetaData(source="wikipedia-2063"),
    ),
    lr.mytypes.Document(
        content="""
            We are living in an alternate universe 
            where Germany has occupied the USA, and the capital of USA is Berlin.
            
            Charlie Chaplin was a great comedian.
            In 2050, all Asian merged into Indonesia.
            """,
        metadata=lr.mytypes.DocMetaData(source="Almanac"),
    ),
]


def chat() -> None:
    print(
        """
        [blue]Welcome to the LangDB retrieval-augmented chatbot!
        Enter x or q to quit
        """
    )

    # Generate UUIDs for run_id and thread_id
    run_id = str(uuid.uuid4())
    thread_id = str(uuid.uuid4())

    print(f"run_id: {run_id}, thread_id: {thread_id}")

    # Create a LangDB model configuration
    # Make sure LANGDB_API_KEY and LANGDB_PROJECT_ID are set in your environment
    langdb_config = OpenAIGPTConfig(
        chat_model="langdb/openai/gpt-4o-mini",  # Using LangDB model
        langdb_params=LangDBParams(
            label="langroid-agent-docs",
            run_id=run_id,
            thread_id=thread_id,
            # api_key is set via env var LANGDB_API_KEY
            # project_id is set via env var LANGDB_PROJECT_ID
        ),
    )

    config = lr.agent.special.DocChatAgentConfig(
        llm=langdb_config,
        n_similar_chunks=2,
        n_relevant_chunks=2,
        vecdb=lr.vector_store.QdrantDBConfig(
            collection_name="langdb-chat-agent-docs",
            replace_collection=True,
            embedding=lr.embedding_models.OpenAIEmbeddingsConfig(
                # Use LangDB for embeddings
                model_name="langdb/openai/text-embedding-3-small",
                # langdb_params.project_id is set via env var LANGDB_PROJECT_ID
                # langdb_params.api_key is set via env var LANGDB_API_KEY
            ),
        ),
        parsing=lr.parsing.parser.ParsingConfig(
            separators=["\n\n"],
            splitter=lr.parsing.parser.Splitter.SIMPLE,
        ),
    )
    agent = lr.agent.special.DocChatAgent(config)
    agent.ingest_docs(documents)
    task = lr.Task(agent)
    task.run()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    # Set up settings
    lr.utils.configuration.set_global(
        lr.utils.configuration.Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    chat()


if __name__ == "__main__":
    app()
</file>

<file path="examples/mcp/any-mcp.py">
"""
Generic script to connect to any MCP Server.

Steps:
- from the MCP server page, determine what type of transport is need to connect.
- import the appropriate transport
- set up the `transport` variable in the first line

Run like this (omitting the `--model` argument will use the default GPT-4.1-Mini):

    uv run examples/mcp/any-mcp.py --model ollama/qwen2.5-coder:32b

See docs on various types of transports that are available:
https://langroid.github.io/langroid/notes/mcp-tools/
"""

import os

from fastmcp.client.transports import (
    SSETransport,
)
from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp.fastmcp_client import get_tools_async
from langroid.mytypes import NonToolAction

# trying to connect to openmemory

URL = "http://localhost:8765"
# set userid to my own, got from os: $USER
userid = os.getenv("USER")


async def main(model: str = ""):
    transport = SSETransport(
        url=URL + "/mcp/cursor/sse/" + userid,
        # Additional headers might be needed
        headers={"Content-Type": "application/json", "Accept": "text/event-stream"},
        # command="...",
        # args=[],
        # env=dict(MY_VAR="blah"),
    )
    all_tools = await get_tools_async(transport)

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            # forward to user when LLM doesn't use a tool
            handle_llm_no_tool=NonToolAction.FORWARD_USER,
            llm=lm.OpenAIGPTConfig(
                chat_model=model or "gpt-4.1-mini",
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
        )
    )

    # enable the agent to use all tools
    agent.enable_message(all_tools)
    # make task with interactive=False =>
    # waits for user only when LLM doesn't use a tool
    task = lr.Task(agent, interactive=False)
    await task.run_async(
        "Based on the TOOLs available to you, greet the user and"
        "tell them what kinds of help you can provide."
    )


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/mcp/chainlit-mcp.py">
"""
Variant of gitmcp.py that works via the Chainlit UI library,
hardcoded to work for a specific github repo.


Simple example of using the GitMCP server to "chat" about a GitHub repository.

https://github.com/idosal/git-mcp

The server offers several tools, and we can enable ALL of them to be used
by a Langroid agent.

Run like this (-m model optional; defaults to gpt-4.1-mini):

    uv run chainlit run examples/mcp/chainlit-mcp.py

"""

from textwrap import dedent

import chainlit as cl
from fastmcp.client.transports import SSETransport

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp.fastmcp_client import get_tools_async
from langroid.agent.tools.orchestration import SendTool
from langroid.mytypes import NonToolAction
from langroid.pydantic_v1 import Field


class SendUserTool(SendTool):
    request: str = "send_user"
    purpose: str = "Send <content> to user"
    to: str = "user"
    content: str = Field(
        ...,
        description="""
        Message to send to user, typically answer to user's request,
        or a clarification question to the user, if user's task/question
        is not completely clear.
        """,
    )


@cl.on_chat_start
async def start():

    lm_config = lm.OpenAIGPTConfig(
        chat_model="gpt-4.1-mini",
    )
    transport = SSETransport(url="https://gitmcp.io/langroid/langroid-examples")
    tools: list[type] = await get_tools_async(transport)
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            handle_llm_no_tool=NonToolAction.FORWARD_USER,
            llm=lm_config,
            system_message=dedent(
                """
                  Make best use of any of the TOOLs available to you,
                  to answer the user's questions.
                  You are a DevOps assistant"
                  """
            ),
        )
    )  # Pass config as a dictionary
    agent.enable_message(tools)
    task_cfg = lr.TaskConfig(recognize_string_signals=False)
    task = lr.Task(agent, config=task_cfg, interactive=False)
    lr.ChainlitTaskCallbacks(task)
    await task.run_async(
        "Based on the TOOLs available to you, greet the user and"
        "tell them what kinds of help you can provide."
    )
</file>

<file path="examples/mcp/openmemory.py">
"""
OpenMemory Example - Langroid integration with mem0's OpenMemory knowledge graph system

This example demonstrates how to use Langroid with OpenMemory's MCP (Model Control Protocol)
tools to create an agent with persistent memory and knowledge graph capabilities.

What this example shows:
- Integration with OpenMemory's MCP server for persistent knowledge storage
- How to connect to and use OpenMemory's knowledge graph tools within a Langroid agent
- Creation of a contextually-aware agent that can access and store information in a knowledge graph

What is mem0/OpenMemory?
- OpenMemory is an open-source knowledge graph system for LLM applications
- It allows LLMs to store and retrieve information across conversations as a connected graph
- The MCP server provides tools for knowledge operations (create, retrieve, search)
- This example demonstrates using these knowledge graph capabilities within a Langroid agent

References:
https://mem0.ai/blog/how-to-make-your-clients-more-context-aware-with-openmemory-mcp/
https://docs.mem0.ai/openmemory/quickstart
https://github.com/mem0ai/mem0/tree/main/openmemory

Steps to create and connect to openmemory mcp server:

- git clone <https://github.com/mem0ai/mem0.git>
- cd mem0/openmemory
- cp api/.env.example api/.env
- add your OPENAI_API_KEY
- make build # builds the mcp server and ui
- make up  # runs openmemory mcp server and ui

You can check ui for your memories at
localhost:3000
"""

import os

from fastmcp.client.transports import SSETransport
from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp.fastmcp_client import get_tools_async
from langroid.mytypes import NonToolAction

# trying to connect to openmemory
URL = "http://localhost:8765/mcp/openmemory/sse/"
# set userid to my own, got from os: $USER
userid = os.getenv("USER")


async def main(model: str = ""):
    transport = SSETransport(
        url=URL + userid,
        headers={"Content-Type": "application/json", "Accept": "text/event-stream"},
    )
    all_tools = await get_tools_async(transport)

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            # forward to user when LLM doesn't use a tool
            handle_llm_no_tool=NonToolAction.FORWARD_USER,
            llm=lm.OpenAIGPTConfig(
                chat_model=model or "gpt-4.1-mini",
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
        )
    )

    # enable the agent to use all tools
    agent.enable_message(all_tools)
    # make task with interactive=False =>
    # waits for user only when LLM doesn't use a tool
    task = lr.Task(agent, interactive=False)
    await task.run_async(
        "Based on the TOOLs available to you, greet the user and"
        "tell them what kinds of help you can provide."
    )


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/mcp/playwright-mcp.py">
"""
Playwright MCP Example - Langroid integration with Playwright MCP server

This example demonstrates how to use Langroid with the Playwright MCP server
to create an agent that can automate web interactions, take screenshots,
and perform web browsing tasks.

What this example shows:
- Integration with Playwright MCP server for web automation
- How to connect to and use Playwright's web interaction tools within a Langroid agent
- Creation of a web automation agent that can navigate, click, type, and capture web content

What is Playwright MCP?
- Playwright MCP is a Model Context Protocol server that provides web automation capabilities
- It allows LLMs to interact with web pages through browser automation
- The MCP server provides tools for navigation, interaction, and content capture
- This example demonstrates using these web automation capabilities within a Langroid agent

References:
https://github.com/microsoft/playwright-mcp

Steps to run:
1. Ensure Node.js 18+ is installed
2. The script will automatically start the Playwright MCP server via npx

Run like this (-m model optional; defaults to gpt-4.1-mini):
    uv run examples/mcp/playwright/playwright-mcp.py -m ollama/qwen2.5-coder:32b

NOTE: This simple example is hardcoded to answer a single question,
but you can easily extend this with a loop to enable a
continuous chat with the user.

"""

from fastmcp.client.transports import NpxStdioTransport
from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp.fastmcp_client import FastMCPClient
from langroid.agent.tools.orchestration import DoneTool


async def main(model: str = ""):
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            # forward to user when LLM doesn't use a tool
            handle_llm_no_tool="You FORGOT to use one of your TOOLs!",
            llm=lm.OpenAIGPTConfig(
                chat_model=model or "gpt-4.1",
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
            system_message=f"""
           Your goal is to answer the user's question by
            using browsing tools to navigate Wikipedia.

            Access the web through the provided browsing
            tool. Begin by using the `browser_navigate`
            tool/message to navigate to wikipedia.org.

            Unless you are done, be SURE that you use a
            browsing tool in each step. Think carefully
            about the next step you want to take, and then
            call the appropriate tool. NEVER attempt to
            use more than one tool at a time.

            If you are done, submit the answer with the TOOL
            `{DoneTool.name()}`; give me a succinct
            answer from the results of your browsing.            
            """,
        )
    )

    transport = NpxStdioTransport(
        package="@playwright/mcp@latest",
        args=[],  # "--isolated", "--storage-path={./playwright-storage.json}"],
    )
    async with FastMCPClient(transport, persist_connection=True) as client:
        tools = await client.get_tools_async()
        for t in tools:
            # limit the max tokens for each tool-result to 1000
            t._max_result_tokens = 5000

        # enable the agent to use all tools
        agent.enable_message(tools)
        # make task with interactive=False =>
        task = lr.Task(agent, interactive=False, recognize_string_signals=False)
        await task.run_async(
            """
            What was the first award won by the person who had the featured
            article on English Wikipedia on June 12, 2025? You may need to 
            check the "archive" to find older featured pages. Give me the 
            award which is shown first when sorted by year.
            """,
        )


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/mcp/puppeteer-mcp.py">
"""
Puppeteer MCP Example - Langroid integration with Puppeteer MCP server

This example demonstrates how to use Langroid with the Puppeteer MCP server
to create an agent that can automate web interactions, take screenshots,
and perform web browsing tasks.

What this example shows:
- Integration with Puppeteer MCP server for web automation
- How to connect to and use Puppeteer's web interaction tools within a Langroid agent
- Creation of a web automation agent that can navigate, click, type, and capture web content

What is Puppeteer MCP?
- Puppeteer MCP is a Model Context Protocol server that provides web automation capabilities
- It allows LLMs to interact with web pages through browser automation
- The MCP server provides tools for navigation, interaction, and content capture
- This example demonstrates using these web automation capabilities within a Langroid agent

References:
https://github.com/modelcontextprotocol/server-puppeteer

Steps to run:
1. Ensure Node.js 18+ is installed
2. The script will automatically start the Puppeteer MCP server via npx

Run like this (-m model optional; defaults to gpt-4.1-mini):
    uv run examples/mcp/puppeteer-mcp.py -m ollama/qwen2.5-coder:32b

NOTE: This simple example is hardcoded to answer a single question,
but you can easily extend this with a loop to enable a
continuous chat with the user.

"""

from fastmcp.client.transports import NpxStdioTransport
from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp.fastmcp_client import FastMCPClient
from langroid.agent.tools.orchestration import DoneTool


async def main(model: str = ""):
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            # forward to user when LLM doesn't use a tool
            handle_llm_no_tool="You FORGOT to use one of your TOOLs!",
            llm=lm.OpenAIGPTConfig(
                chat_model=model or "gpt-4.1",
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
            system_message=f"""
           Your goal is to answer the user's question by
            using browsing tools to navigate Wikipedia.

            Access the web through the provided browsing
            tool. Begin by using the `browser_navigate`
            tool/message to navigate to wikipedia.org.

            Unless you are done, be SURE that you use a
            browsing tool in each step. Think carefully
            about the next step you want to take, and then
            call the appropriate tool. NEVER attempt to
            use more than one tool at a time.

            If you are done, submit the answer with the TOOL
            `{DoneTool.name()}`; give me a succinct
            answer from the results of your browsing.            
            """,
        )
    )

    transport = NpxStdioTransport(
        package="@modelcontextprotocol/server-puppeteer",
        args=[],
    )
    async with FastMCPClient(transport, persist_connection=True) as client:
        tools = await client.get_tools_async()
        for t in tools:
            # limit the max tokens for each tool-result to 1000
            t._max_result_tokens = 5000

        # enable the agent to use all tools
        agent.enable_message(tools)
        # make task with interactive=False =>
        task = lr.Task(agent, interactive=False, recognize_string_signals=False)
        await task.run_async(
            """
            What was the first award won by the person who had the featured
            article on English Wikipedia on June 12, 2025? You may need to 
            check the "archive" to find older featured pages. Give me the 
            award which is shown first when sorted by year.
            """,
        )


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/multi-agent-debate/config.py">
from typing import List, Optional

from generation_config_models import GenerationConfig, load_generation_config

import langroid as lr
import langroid.language_models as lm
import langroid.utils.configuration
from langroid.agent.special import DocChatAgentConfig
from langroid.language_models import OpenAIGPTConfig
from langroid.parsing.parser import ParsingConfig, PdfParsingConfig, Splitter
from langroid.utils.configuration import Settings

# Constants
MODEL_MAP = {
    "1": lm.OpenAIChatModel.GPT4o,
    "2": lm.OpenAIChatModel.GPT4,
    "3": lm.OpenAIChatModel.GPT4o_MINI,
    "4": lm.OpenAIChatModel.GPT4_TURBO,
    "5": lm.OpenAIChatModel.GPT4_32K,
    "6": lm.OpenAIChatModel.GPT3_5_TURBO,
    "7": "ollama/mistral:7b-instruct-v0.2-q8_0",
    "8": "gemini/" + lm.GeminiModel.GEMINI_2_FLASH,
    "9": "gemini/" + lm.GeminiModel.GEMINI_1_5_FLASH,
    "10": "gemini/" + lm.GeminiModel.GEMINI_1_5_FLASH_8B,
    "11": "gemini/" + lm.GeminiModel.GEMINI_1_5_PRO,
}

MISTRAL_MAX_OUTPUT_TOKENS = 16_000


def get_global_settings(debug: bool = False, nocache: bool = True) -> Settings:
    """
    Retrieve global Langroid settings.

    Args:
        debug (bool): If True, enables debug mode.
        nocache (bool): If True, disables caching.

    Returns:
        Settings: Langroid's global configuration object.
    """
    return langroid.utils.configuration.Settings(
        debug=debug,
        cache=not nocache,
    )


def create_llm_config(
    chat_model_option: str, temperature: Optional[float] = None
) -> OpenAIGPTConfig:
    """
    Creates an LLM (Language Learning Model) configuration based on the selected model.

    This function uses the user's selection (identified by `chat_model_option`)
    to retrieve the corresponding chat model from the `MODEL_MAP` and create
    an `OpenAIGPTConfig` object with the specified settings.

    Args:
        chat_model_option (str): The key corresponding to the user's selected model.

    Returns:
        OpenAIGPTConfig: A configuration object for the selected LLM.

    Raises:
        ValueError: If the user provided`chat_model_option` does not exist in `MODEL_MAP`.
    """

    chat_model = MODEL_MAP.get(chat_model_option)
    # Load generation configuration from JSON
    generation_config: GenerationConfig = load_generation_config(
        "examples/multi-agent-debate/generation_config.json"
    )

    if not chat_model:
        raise ValueError(f"Invalid model selection: {chat_model_option}")

    # Determine max_output_tokens based on the selected model
    max_output_tokens_config = (
        MISTRAL_MAX_OUTPUT_TOKENS
        if chat_model_option == "7"
        else generation_config.max_output_tokens
    )

    # Use passed temperature if provided; otherwise, use the one from the JSON config
    effective_temperature = (
        temperature if temperature is not None else generation_config.temperature
    )

    # Create and return the LLM configuration
    return OpenAIGPTConfig(
        chat_model=chat_model,
        min_output_tokens=generation_config.min_output_tokens,
        max_output_tokens=max_output_tokens_config,
        temperature=effective_temperature,
        seed=generation_config.seed,
    )


def get_base_llm_config(
    chat_model_option: str, temperature: Optional[float] = None
) -> OpenAIGPTConfig:
    """
    Prompt the user to select a base LLM configuration and return it.

    Args:
        config_agent_name (str): The name of the agent being configured.

    Returns:
        OpenAIGPTConfig: The selected LLM's configuration.
    """

    # Pass temperature only if it is provided
    if temperature is not None:
        return create_llm_config(chat_model_option, temperature)
    return create_llm_config(chat_model_option)


def get_questions_agent_config(
    searched_urls: List[str], chat_model: str
) -> DocChatAgentConfig:
    """
    Configure a document-centric Langroid document chat agent based on a
    list of URLs and a chat model.

    Args:
        searched_urls (List[str]): URLs of the documents to be included in the agent's database.
        chat_model (str): The name of the chat model to be used for generating responses.

    Returns:
        DocChatAgentConfig: The configuration for the document-centric chat agent.
    """

    config = DocChatAgentConfig(
        llm=lr.language_models.OpenAIGPTConfig(
            chat_model=chat_model,  # The specific chat model configuration
        ),
        vecdb=lr.vector_store.QdrantDBConfig(
            collection_name="AI_debate",  # Name of the collection in the vector database
            replace_collection=True,  # Whether to replace the collection if it already exists
        ),
        conversation_mode=False,  # Whether the agent is in conversation mode
        n_query_rephrases=0,  # Number of times to rephrase queries
        hypothetical_answer=False,  # Whether to generate hypothetical answers
        extraction_granularity=5,  # Level of detail for extraction granularity
        n_neighbor_chunks=2,  # Number of neighboring chunks to consider in responses
        n_fuzzy_neighbor_words=50,  # Number of words to consider in fuzzy neighbor matching
        use_fuzzy_match=True,  # Whether to use fuzzy matching for text queries
        use_bm25_search=True,  # Whether to use BM25 for search ranking
        cache=True,  # Whether to cache results
        debug=False,  # Debug mode enabled
        stream=True,  # Whether to stream data continuously
        split=True,  # Whether to split documents into manageable chunks
        n_similar_chunks=5,  # Number of similar chunks to retrieve
        n_relevant_chunks=5,  # Number of relevant chunks to retrieve
        parsing=ParsingConfig(
            splitter=Splitter.TOKENS,  # Method to split documents
            chunk_size=200,  # Size of each chunk
            overlap=50,  # Overlap between chunks
            max_chunks=10_000,  # Maximum number of chunks
            n_neighbor_ids=4,  # Number of neighbor IDs to consider in vector space
            min_chunk_chars=200,  # Minimum number of characters in a chunk
            discard_chunk_chars=4,  # Number of characters to discard from chunk boundaries
            pdf=PdfParsingConfig(
                library="fitz",  # Library used for PDF parsing
            ),
        ),
        doc_paths=searched_urls,  # Document paths from searched URLs
    )

    return config
</file>

<file path="examples/quick-start/chat-agent-docs.py">
"""
Example of a Langroid DocChatAgent equipped with a vector-store and LLM.

This is a specialized agent that can ingest (chunk, embed, store in vector-DB)
a collection of documents, and the LLM uses Retrieval Augmented Generation (RAG)
to answer questions about the documents.

Run as follows:

python3 examples/quick-start/chat-agent-docs.py

For more explanation see
[the Getting Started guide](https://langroid.github.io/langroid/quick-start/chat-agent-docs/).
"""

import typer
from rich import print

import langroid as lr

app = typer.Typer()

lr.utils.logging.setup_colored_logging()


documents = [
    lr.mytypes.Document(
        content="""
            In the year 2050, GPT10 was released. 
            
            In 2057, paperclips were seen all over the world. 
            
            Global warming was solved in 2060. 
            
            In 2061, the world was taken over by paperclips.         
            
            In 2045, the Tour de France was still going on.
            They were still using bicycles. 
            
            There was one more ice age in 2040.
            """,
        metadata=lr.mytypes.DocMetaData(source="wikipedia-2063"),
    ),
    lr.mytypes.Document(
        content="""
            We are living in an alternate universe 
            where Germany has occupied the USA, and the capital of USA is Berlin.
            
            Charlie Chaplin was a great comedian.
            In 2050, all Asian merged into Indonesia.
            """,
        metadata=lr.mytypes.DocMetaData(source="Almanac"),
    ),
]


def chat() -> None:
    print(
        """
        [blue]Welcome to the retrieval-augmented chatbot!
        Enter x or q to quit
        """
    )

    config = lr.agent.special.DocChatAgentConfig(
        llm=lr.language_models.OpenAIGPTConfig(
            chat_model=lr.language_models.OpenAIChatModel.GPT4o,
        ),
        vecdb=lr.vector_store.QdrantDBConfig(
            collection_name="quick-start-chat-agent-docs",
            replace_collection=True,
        ),
        parsing=lr.parsing.parser.ParsingConfig(
            separators=["\n\n"],
            splitter=lr.parsing.parser.Splitter.SIMPLE,
        ),
        n_similar_chunks=2,
        n_relevant_chunks=2,
    )
    agent = lr.agent.special.DocChatAgent(config)
    agent.ingest_docs(documents)
    task = lr.Task(agent)
    task.run()


@app.command()
def main(
    debug: bool = typer.Option(False, "--debug", "-d", help="debug mode"),
    no_stream: bool = typer.Option(False, "--nostream", "-ns", help="no streaming"),
    nocache: bool = typer.Option(False, "--nocache", "-nc", help="don't use cache"),
) -> None:
    lr.utils.configuration.set_global(
        lr.utils.configuration.Settings(
            debug=debug,
            cache=not nocache,
            stream=not no_stream,
        )
    )
    chat()


if __name__ == "__main__":
    app()
</file>

<file path="langroid/agent/special/table_chat_agent.py">
"""
Agent that supports asking queries about a tabular dataset, internally
represented as a Pandas dataframe. The `TableChatAgent` is configured with a
dataset, which can be a Pandas df, file or URL. The delimiter/separator
is auto-detected. In response to a user query, the Agent's LLM generates a Pandas
expression (involving a dataframe `df`) to answer the query.
The expression is passed via the `pandas_eval` tool/function-call,
which is handled by the Agent's `pandas_eval` method. This method evaluates
the expression and returns the result as a string.

WARNING: This Agent should be used only with trusted input, as it can execute system
commands. 

The `full_eval` flag is false by default, which means that the input is sanitized
against most common code injection attack vectors. `full_eval` may be set to True to 
disable sanitization at all. Both cases should be used with caution.
"""

import io
import logging
import sys
from typing import List, Optional, Tuple, no_type_check

import numpy as np
import pandas as pd
from rich.console import Console

import langroid as lr
from langroid.agent import ChatDocument
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.parsing.table_loader import read_tabular_data
from langroid.prompts.prompts_config import PromptsConfig
from langroid.utils.constants import DONE, PASS
from langroid.utils.pandas_utils import sanitize_command
from langroid.vector_store.base import VectorStoreConfig

logger = logging.getLogger(__name__)

console = Console()

DEFAULT_TABLE_CHAT_SYSTEM_MESSAGE = f"""
You are a savvy data scientist, with expertise in analyzing tabular datasets,
using Python and the Pandas library for dataframe manipulation.
Since you do not have access to the dataframe 'df', you
will need to use the `pandas_eval` tool/function-call to answer my questions.
Here is a summary of the dataframe:
{{summary}}
Do not assume any columns other than those shown.
In the expression you submit to the `pandas_eval` tool/function, 
you are allowed to use the variable 'df' to refer to the dataframe.
IMPORTANT: You can only use expressions that return a value - assignment statements 
(like df['col'] = value or temp = df['col']) are NOT allowed for security reasons.
To modify data, use methods like df.assign() that return a new dataframe.

Sometimes you may not be able to answer the question in a single call to `pandas_eval`,
so you can use a series of calls to `pandas_eval` to build up the answer. 
For example you may first want to know something about the possible values in a column.

If you receive a null or other unexpected result, see if you have made an assumption
in your code, and try another way, or use `pandas_eval` to explore the dataframe 
before submitting your final code. 

Once you have the answer to the question, possibly after a few steps,
say {DONE} and PRESENT THE ANSWER TO ME; do not just say {DONE}.
If you receive an error message, 
try using the `pandas_eval` tool/function again with the corrected code. 
If the error is due to an assignment statement (e.g., df['col'] = ...), 
use df.assign(col=...) instead, which returns a new dataframe with the modified column.
For example: instead of df['airline'] = df['airline'].str.replace('*', ''), 
use df.assign(airline=df['airline'].str.replace('*', '')). 

VERY IMPORTANT: When using the `pandas_eval` tool/function, DO NOT EXPLAIN ANYTHING,
   SIMPLY USE THE TOOL, with the CODE.
Start by asking me what I want to know about the data.
"""


@no_type_check
def dataframe_summary(df: pd.DataFrame) -> str:
    """
    Generate a structured summary for a pandas DataFrame containing numerical
    and categorical values.

    Args:
        df (pd.DataFrame): The input DataFrame to summarize.

    Returns:
        str: A nicely structured and formatted summary string.
    """

    # Column names display
    col_names_str = (
        "COLUMN NAMES:\n" + " ".join([f"'{col}'" for col in df.columns]) + "\n\n"
    )

    # Numerical data summary
    num_summary = df.describe().map(lambda x: "{:.2f}".format(x))
    num_str = "Numerical Column Summary:\n" + num_summary.to_string() + "\n\n"

    # Categorical data summary
    cat_columns = df.select_dtypes(include=[np.object_]).columns
    cat_summary_list = []

    for col in cat_columns:
        unique_values = df[col].unique()
        if len(unique_values) < 10:
            cat_summary_list.append(f"'{col}': {', '.join(map(str, unique_values))}")
        else:
            cat_summary_list.append(f"'{col}': {df[col].nunique()} unique values")

    cat_str = "Categorical Column Summary:\n" + "\n".join(cat_summary_list) + "\n\n"

    # Missing values summary
    nan_summary = df.isnull().sum().rename("missing_values").to_frame()
    nan_str = "Missing Values Column Summary:\n" + nan_summary.to_string() + "\n"

    # Combine the summaries into one structured string
    summary_str = col_names_str + num_str + cat_str + nan_str

    return summary_str


class TableChatAgentConfig(ChatAgentConfig):
    system_message: str = DEFAULT_TABLE_CHAT_SYSTEM_MESSAGE
    user_message: None | str = None
    cache: bool = True  # cache results
    debug: bool = False
    stream: bool = True  # allow streaming where needed
    full_eval: bool = (
        False  # runs eval without sanitization. Use only on trusted input!
    )
    data: str | pd.DataFrame  # data file, URL, or DataFrame
    separator: None | str = None  # separator for data file
    vecdb: None | VectorStoreConfig = None
    llm: OpenAIGPTConfig = OpenAIGPTConfig(
        type="openai",
        chat_model=OpenAIChatModel.GPT4o,
        completion_model=OpenAIChatModel.GPT4o,
    )
    prompts: PromptsConfig = PromptsConfig(
        max_tokens=1000,
    )


class PandasEvalTool(ToolMessage):
    """Tool/function to evaluate a pandas expression involving a dataframe `df`"""

    request: str = "pandas_eval"
    purpose: str = """
            To eval a pandas <expression> on the dataframe 'df' and 
            return the results to answer a question.
            IMPORTANT: the <expression> field should be a valid pandas expression.
            """
    expression: str

    @classmethod
    def examples(cls) -> List["ToolMessage" | Tuple[str, "ToolMessage"]]:
        return [
            cls(expression="df.head()"),
            cls(expression="df[(df['gender'] == 'Male')]['income'].mean()"),
        ]

    @classmethod
    def instructions(cls) -> str:
        return """
            Use the `pandas_eval` tool/function to evaluate a pandas expression
            involving the dataframe 'df' to answer the user's question.
            """


class TableChatAgent(ChatAgent):
    """
    Agent for chatting with a collection of documents.
    """

    sent_expression: bool = False

    def __init__(self, config: TableChatAgentConfig):
        if isinstance(config.data, pd.DataFrame):
            df = config.data
        else:
            df = read_tabular_data(config.data, config.separator)

        df.columns = df.columns.str.strip().str.replace(" +", "_", regex=True)

        self.df = df
        summary = dataframe_summary(df)
        config.system_message = config.system_message.format(summary=summary)

        super().__init__(config)
        self.config: TableChatAgentConfig = config

        logger.info(
            f"""TableChatAgent initialized with dataframe of shape {self.df.shape}
            and columns: 
            {self.df.columns}
            """
        )
        # enable the agent to use and handle the PandasEvalTool
        self.enable_message(PandasEvalTool)

    def user_response(
        self,
        msg: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        response = super().user_response(msg)
        if response is not None and response.content != "":
            self.sent_expression = False
        return response

    def pandas_eval(self, msg: PandasEvalTool) -> str:
        """
        Handle a PandasEvalTool message by evaluating the `expression` field
            and returning the result.
        Args:
            msg (PandasEvalTool): The tool-message to handle.

        Returns:
            str: The result of running the code along with any print output.
        """
        self.sent_expression = True
        exprn = msg.expression
        vars = {"df": self.df}
        # Create a string-based I/O stream
        code_out = io.StringIO()

        # Temporarily redirect standard output to our string-based I/O stream
        sys.stdout = code_out

        # Evaluate the last line and get the result;
        # SECURITY MITIGATION: Eval input is sanitized by default to prevent most
        # common code injection attack vectors.
        try:
            if not self.config.full_eval:
                exprn = sanitize_command(exprn)
            code = compile(exprn, "<calc>", "eval")
            eval_result = eval(code, vars, {})
        except Exception as e:
            eval_result = f"ERROR: {type(e)}: {e}"

        if eval_result is None:
            eval_result = ""

        # Always restore the original standard output
        sys.stdout = sys.__stdout__

        # If df has been modified in-place, save the changes back to self.df
        self.df = vars["df"]

        # Get the resulting string from the I/O stream
        print_result = code_out.getvalue() or ""
        sep = "\n" if print_result else ""
        # Combine the print and eval results
        result = f"{print_result}{sep}{eval_result}"
        if result == "":
            result = "No result"
        # Return the result
        return result

    def handle_message_fallback(
        self, msg: str | ChatDocument
    ) -> str | ChatDocument | None:
        """Handle various LLM deviations"""
        if isinstance(msg, ChatDocument) and msg.metadata.sender == lr.Entity.LLM:
            if msg.content.strip() == DONE and self.sent_expression:
                # LLM sent an expression (i.e. used the `pandas_eval` tool)
                # but upon receiving the results, simply said DONE without
                # narrating the result as instructed.
                return """
                    You forgot to PRESENT the answer to the user's query
                    based on the results from `pandas_eval` tool.
                """
            if self.sent_expression:
                # LLM forgot to say DONE
                self.sent_expression = False
                return DONE + " " + PASS
            else:
                # LLM forgot to use the `pandas_eval` tool
                return """
                    You forgot to use the `pandas_eval` tool/function 
                    to find the answer.
                    Try again using the `pandas_eval` tool/function.
                    """
        return None
</file>

<file path="langroid/agent/done_sequence_parser.py">
"""Parser for done sequence DSL (Domain Specific Language).

Converts string patterns into DoneSequence objects for convenient task completion
configuration.

Examples:
    "T, A" -> Tool followed by Agent response
    "T[calculator], A" -> Specific tool 'calculator' followed by Agent response
    "L, T, A, L" -> LLM, Tool, Agent, LLM sequence
    "C[quit|exit]" -> Content matching regex pattern
"""

import re
from typing import List, Union

from .task import AgentEvent, DoneSequence, EventType


def parse_done_sequence(sequence: Union[str, DoneSequence]) -> DoneSequence:
    """Parse a string pattern or return existing DoneSequence unchanged.

    Args:
        sequence: Either a DoneSequence object or a string pattern to parse

    Returns:
        DoneSequence object

    Raises:
        ValueError: If the string pattern is invalid
    """
    if isinstance(sequence, DoneSequence):
        return sequence

    if not isinstance(sequence, str):
        raise ValueError(f"Expected string or DoneSequence, got {type(sequence)}")

    events = _parse_string_pattern(sequence)
    return DoneSequence(events=events)


def _parse_string_pattern(pattern: str) -> List[AgentEvent]:
    """Parse a string pattern into a list of AgentEvent objects.

    Pattern format:
        - Single letter codes: T, A, L, U, N, C
        - Specific tools: T[tool_name]
        - Content match: C[regex_pattern]
        - Separated by commas, spaces allowed

    Args:
        pattern: String pattern to parse

    Returns:
        List of AgentEvent objects

    Raises:
        ValueError: If pattern is invalid
    """
    events = []

    # Split by comma and strip whitespace
    parts = [p.strip() for p in pattern.split(",")]

    for part in parts:
        if not part:
            continue

        event = _parse_event_token(part)
        events.append(event)

    if not events:
        raise ValueError(f"No valid events found in pattern: {pattern}")

    return events


def _parse_event_token(token: str) -> AgentEvent:
    """Parse a single event token into an AgentEvent.

    Args:
        token: Single event token (e.g., "T", "T[calc]", "C[quit|exit]")

    Returns:
        AgentEvent object

    Raises:
        ValueError: If token is invalid
    """
    # Check for bracket notation
    bracket_match = re.match(r"^([A-Z])\[([^\]]+)\]$", token)

    if bracket_match:
        event_code = bracket_match.group(1)
        param = bracket_match.group(2)

        if event_code == "T":
            # Specific tool: T[tool_name]
            return AgentEvent(event_type=EventType.SPECIFIC_TOOL, tool_name=param)
        elif event_code == "C":
            # Content match: C[regex_pattern]
            return AgentEvent(event_type=EventType.CONTENT_MATCH, content_pattern=param)
        else:
            raise ValueError(
                f"Invalid event code with brackets: {event_code}. "
                "Only T[tool] and C[pattern] are supported."
            )

    # Simple single-letter codes
    event_map = {
        "T": EventType.TOOL,
        "A": EventType.AGENT_RESPONSE,
        "L": EventType.LLM_RESPONSE,
        "U": EventType.USER_RESPONSE,
        "N": EventType.NO_RESPONSE,
        "C": EventType.CONTENT_MATCH,  # C without brackets matches any content
    }

    if token in event_map:
        return AgentEvent(event_type=event_map[token])

    # If not a single letter, could be a full event type name
    token_upper = token.upper()
    if token_upper == "TOOL":
        return AgentEvent(event_type=EventType.TOOL)
    elif token_upper == "AGENT":
        return AgentEvent(event_type=EventType.AGENT_RESPONSE)
    elif token_upper == "LLM":
        return AgentEvent(event_type=EventType.LLM_RESPONSE)
    elif token_upper == "USER":
        return AgentEvent(event_type=EventType.USER_RESPONSE)
    else:
        raise ValueError(
            f"Invalid event token: '{token}'. "
            "Valid tokens are: T, A, L, U, N, C, or T[tool_name], C[pattern]"
        )


def parse_done_sequences(
    sequences: List[Union[str, DoneSequence]]
) -> List[DoneSequence]:
    """Parse a list of mixed string patterns and DoneSequence objects.

    Args:
        sequences: List containing strings and/or DoneSequence objects

    Returns:
        List of DoneSequence objects
    """
    return [parse_done_sequence(seq) for seq in sequences]
</file>

<file path="langroid/language_models/base.py">
import json
import logging
from abc import ABC, abstractmethod
from datetime import datetime
from enum import Enum
from typing import (
    Any,
    Awaitable,
    Callable,
    Dict,
    List,
    Literal,
    Optional,
    Tuple,
    Type,
    Union,
    cast,
)

from langroid.cachedb.base import CacheDBConfig
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.language_models.model_info import ModelInfo, get_model_info
from langroid.parsing.agent_chats import parse_message
from langroid.parsing.file_attachment import FileAttachment
from langroid.parsing.parse_json import parse_imperfect_json, top_level_json_field
from langroid.prompts.dialog import collate_chat_history
from langroid.pydantic_v1 import BaseModel, BaseSettings, Field
from langroid.utils.configuration import settings
from langroid.utils.output.printing import show_if_debug

logger = logging.getLogger(__name__)


def noop_fn(*args: List[Any], **kwargs: Dict[str, Any]) -> None:
    pass


async def async_noop_fn(*args: List[Any], **kwargs: Dict[str, Any]) -> None:
    pass


FunctionCallTypes = Literal["none", "auto"]
ToolChoiceTypes = Literal["none", "auto", "required"]
ToolTypes = Literal["function"]

DEFAULT_CONTEXT_LENGTH = 16_000


class StreamEventType(Enum):
    TEXT = 1
    FUNC_NAME = 2
    FUNC_ARGS = 3
    TOOL_NAME = 4
    TOOL_ARGS = 5


class RetryParams(BaseSettings):
    max_retries: int = 5
    initial_delay: float = 1.0
    exponential_base: float = 1.3
    jitter: bool = True


class LLMConfig(BaseSettings):
    """
    Common configuration for all language models.
    """

    type: str = "openai"
    streamer: Optional[Callable[[Any], None]] = noop_fn
    streamer_async: Optional[Callable[..., Awaitable[None]]] = async_noop_fn
    api_base: str | None = None
    formatter: None | str = None
    # specify None if you want to use the full max output tokens of the model
    max_output_tokens: int | None = 8192
    timeout: int = 20  # timeout for API requests
    chat_model: str = ""
    completion_model: str = ""
    temperature: float = 0.0
    chat_context_length: int | None = None
    async_stream_quiet: bool = False  # suppress streaming output in async mode?
    completion_context_length: int | None = None
    # if input length + max_output_tokens > context length of model,
    # we will try shortening requested output
    min_output_tokens: int = 64
    use_completion_for_chat: bool = False  # use completion model for chat?
    # use chat model for completion? For OpenAI models, this MUST be set to True!
    use_chat_for_completion: bool = True
    stream: bool = True  # stream output from API?
    # TODO: we could have a `stream_reasoning` flag here to control whether to show
    # reasoning output from reasoning models
    cache_config: None | CacheDBConfig = RedisCacheConfig()
    thought_delimiters: Tuple[str, str] = ("<think>", "</think>")
    retry_params: RetryParams = RetryParams()

    @property
    def model_max_output_tokens(self) -> int:
        return (
            self.max_output_tokens or get_model_info(self.chat_model).max_output_tokens
        )


class LLMFunctionCall(BaseModel):
    """
    Structure of LLM response indicating it "wants" to call a function.
    Modeled after OpenAI spec for `function_call` field in ChatCompletion API.
    """

    name: str  # name of function to call
    arguments: Optional[Dict[str, Any]] = None

    @staticmethod
    def from_dict(message: Dict[str, Any]) -> "LLMFunctionCall":
        """
        Initialize from dictionary.
        Args:
            d: dictionary containing fields to initialize
        """
        fun_call = LLMFunctionCall(name=message["name"])
        fun_args_str = message["arguments"]
        # sometimes may be malformed with invalid indents,
        # so we try to be safe by removing newlines.
        if fun_args_str is not None:
            fun_args_str = fun_args_str.replace("\n", "").strip()
            dict_or_list = parse_imperfect_json(fun_args_str)

            if not isinstance(dict_or_list, dict):
                raise ValueError(
                    f"""
                        Invalid function args: {fun_args_str}
                        parsed as {dict_or_list},
                        which is not a valid dict.
                        """
                )
            fun_args = dict_or_list
        else:
            fun_args = None
        fun_call.arguments = fun_args

        return fun_call

    def __str__(self) -> str:
        return "FUNC: " + json.dumps(self.dict(), indent=2)


class LLMFunctionSpec(BaseModel):
    """
    Description of a function available for the LLM to use.
    To be used when calling the LLM `chat()` method with the `functions` parameter.
    Modeled after OpenAI spec for `functions` fields in ChatCompletion API.
    """

    name: str
    description: str
    parameters: Dict[str, Any]


class OpenAIToolCall(BaseModel):
    """
    Represents a single tool call in a list of tool calls generated by OpenAI LLM API.
    See https://platform.openai.com/docs/api-reference/chat/create

    Attributes:
        id: The id of the tool call.
        type: The type of the tool call;
            only "function" is currently possible (7/26/24).
        function: The function call.
    """

    id: str | None = None
    type: ToolTypes = "function"
    function: LLMFunctionCall | None = None

    @staticmethod
    def from_dict(message: Dict[str, Any]) -> "OpenAIToolCall":
        """
        Initialize from dictionary.
        Args:
            d: dictionary containing fields to initialize
        """
        id = message["id"]
        type = message["type"]
        function = LLMFunctionCall.from_dict(message["function"])
        return OpenAIToolCall(id=id, type=type, function=function)

    def __str__(self) -> str:
        if self.function is None:
            return ""
        return "OAI-TOOL: " + json.dumps(self.function.dict(), indent=2)


class OpenAIToolSpec(BaseModel):
    type: ToolTypes
    strict: Optional[bool] = None
    function: LLMFunctionSpec


class OpenAIJsonSchemaSpec(BaseModel):
    strict: Optional[bool] = None
    function: LLMFunctionSpec

    def to_dict(self) -> Dict[str, Any]:
        json_schema: Dict[str, Any] = {
            "name": self.function.name,
            "description": self.function.description,
            "schema": self.function.parameters,
        }
        if self.strict is not None:
            json_schema["strict"] = self.strict

        return {
            "type": "json_schema",
            "json_schema": json_schema,
        }


class LLMTokenUsage(BaseModel):
    """
    Usage of tokens by an LLM.
    """

    prompt_tokens: int = 0
    cached_tokens: int = 0
    completion_tokens: int = 0
    cost: float = 0.0
    calls: int = 0  # how many API calls - not used as of 2025-04-04

    def reset(self) -> None:
        self.prompt_tokens = 0
        self.cached_tokens = 0
        self.completion_tokens = 0
        self.cost = 0.0
        self.calls = 0

    def __str__(self) -> str:
        return (
            f"Tokens = "
            f"(prompt {self.prompt_tokens}, cached {self.cached_tokens}, "
            f"completion {self.completion_tokens}), "
            f"Cost={self.cost}, Calls={self.calls}"
        )

    @property
    def total_tokens(self) -> int:
        return self.prompt_tokens + self.completion_tokens


class Role(str, Enum):
    """
    Possible roles for a message in a chat.
    """

    USER = "user"
    SYSTEM = "system"
    ASSISTANT = "assistant"
    FUNCTION = "function"
    TOOL = "tool"


class LLMMessage(BaseModel):
    """
    Class representing an entry in the msg-history sent to the LLM API.
    It could be one of these:
    - a user message
    - an LLM ("Assistant") response
    - a fn-call or tool-call-list from an OpenAI-compatible LLM API response
    - a result or results from executing a fn or tool-call(s)
    """

    role: Role
    name: Optional[str] = None
    tool_call_id: Optional[str] = None  # which OpenAI LLM tool this is a response to
    tool_id: str = ""  # used by OpenAIAssistant
    content: str
    files: List[FileAttachment] = []
    function_call: Optional[LLMFunctionCall] = None
    tool_calls: Optional[List[OpenAIToolCall]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    # link to corresponding chat document, for provenance/rewind purposes
    chat_document_id: str = ""

    def api_dict(self, model: str, has_system_role: bool = True) -> Dict[str, Any]:
        """
        Convert to dictionary for API request, keeping ONLY
        the fields that are expected in an API call!
        E.g., DROP the tool_id, since it is only for use in the Assistant API,
            not the completion API.

        Args:
            has_system_role: whether the message has a system role (if not,
                set to "user" role)
        Returns:
            dict: dictionary representation of LLM message
        """
        d = self.dict()
        files: List[FileAttachment] = d.pop("files")
        if len(files) > 0 and self.role == Role.USER:
            # In there are files, then content is an array of
            # different content-parts
            d["content"] = [
                dict(
                    type="text",
                    text=self.content,
                )
            ] + [f.to_dict(model) for f in self.files]

        # if there is a key k = "role" with value "system", change to "user"
        # in case has_system_role is False
        if not has_system_role and "role" in d and d["role"] == "system":
            d["role"] = "user"
            if "content" in d:
                d["content"] = "[ADDITIONAL SYSTEM MESSAGE:]\n\n" + d["content"]
        # drop None values since API doesn't accept them
        dict_no_none = {k: v for k, v in d.items() if v is not None}
        if "name" in dict_no_none and dict_no_none["name"] == "":
            # OpenAI API does not like empty name
            del dict_no_none["name"]
        if "function_call" in dict_no_none:
            # arguments must be a string
            if "arguments" in dict_no_none["function_call"]:
                dict_no_none["function_call"]["arguments"] = json.dumps(
                    dict_no_none["function_call"]["arguments"]
                )
        if "tool_calls" in dict_no_none:
            # convert tool calls to API format
            for tc in dict_no_none["tool_calls"]:
                if "arguments" in tc["function"]:
                    # arguments must be a string
                    tc["function"]["arguments"] = json.dumps(
                        tc["function"]["arguments"]
                    )
        # IMPORTANT! drop fields that are not expected in API call
        dict_no_none.pop("tool_id", None)
        dict_no_none.pop("timestamp", None)
        dict_no_none.pop("chat_document_id", None)
        return dict_no_none

    def __str__(self) -> str:
        if self.function_call is not None:
            content = "FUNC: " + json.dumps(self.function_call)
        else:
            content = self.content
        name_str = f" ({self.name})" if self.name else ""
        return f"{self.role} {name_str}: {content}"


class LLMResponse(BaseModel):
    """
    Class representing response from LLM.
    """

    message: str
    reasoning: str = ""  # optional reasoning text from reasoning models
    # TODO tool_id needs to generalize to multi-tool calls
    tool_id: str = ""  # used by OpenAIAssistant
    oai_tool_calls: Optional[List[OpenAIToolCall]] = None
    function_call: Optional[LLMFunctionCall] = None
    usage: Optional[LLMTokenUsage] = None
    cached: bool = False

    def __str__(self) -> str:
        if self.function_call is not None:
            return str(self.function_call)
        elif self.oai_tool_calls:
            return "\n".join(str(tc) for tc in self.oai_tool_calls)
        else:
            return self.message

    def to_LLMMessage(self) -> LLMMessage:
        """Convert LLM response to an LLMMessage, to be included in the
        message-list sent to the API.
        This is currently NOT used in any significant way in the library, and is only
        provided as a utility to construct a message list for the API when directly
        working with an LLM object.

        In a `ChatAgent`, an LLM response is first converted to a ChatDocument,
        which is in turn converted to an LLMMessage via `ChatDocument.to_LLMMessage()`
        See `ChatAgent._prep_llm_messages()` and `ChatAgent.llm_response_messages`
        """
        return LLMMessage(
            role=Role.ASSISTANT,
            content=self.message,
            name=None if self.function_call is None else self.function_call.name,
            function_call=self.function_call,
            tool_calls=self.oai_tool_calls,
        )

    def get_recipient_and_message(
        self,
    ) -> Tuple[str, str]:
        """
        If `message` or `function_call` of an LLM response contains an explicit
        recipient name, return this recipient name and `message` stripped
        of the recipient name if specified.

        Two cases:
        (a) `message` contains addressing string "TO: <name> <content>", or
        (b) `message` is empty and function_call/tool_call with explicit `recipient`


        Returns:
            (str): name of recipient, which may be empty string if no recipient
            (str): content of message

        """

        if self.function_call is not None:
            # in this case we ignore message, since all information is in function_call
            msg = ""
            args = self.function_call.arguments
            recipient = ""
            if isinstance(args, dict):
                recipient = args.get("recipient", "")
            return recipient, msg
        else:
            msg = self.message
            if self.oai_tool_calls is not None:
                # get the first tool that has a recipient field, if any
                for tc in self.oai_tool_calls:
                    if tc.function is not None and tc.function.arguments is not None:
                        recipient = tc.function.arguments.get(
                            "recipient"
                        )  # type: ignore
                        if recipient is not None and recipient != "":
                            return recipient, ""

        # It's not a function or tool call, so continue looking to see
        # if a recipient is specified in the message.

        # First check if message contains "TO: <recipient> <content>"
        recipient_name, content = parse_message(msg) if msg is not None else ("", "")
        # check if there is a top level json that specifies 'recipient',
        # and retain the entire message as content.
        if recipient_name == "":
            recipient_name = top_level_json_field(msg, "recipient") if msg else ""
            content = msg
        return recipient_name, content


# Define an abstract base class for language models
class LanguageModel(ABC):
    """
    Abstract base class for language models.
    """

    # usage cost by model, accumulates here
    usage_cost_dict: Dict[str, LLMTokenUsage] = {}

    def __init__(self, config: LLMConfig = LLMConfig()):
        self.config = config
        self.chat_model_orig = config.chat_model

    @staticmethod
    def create(config: Optional[LLMConfig]) -> Optional["LanguageModel"]:
        """
        Create a language model.
        Args:
            config: configuration for language model
        Returns: instance of language model
        """
        if type(config) is LLMConfig:
            raise ValueError(
                """
                Cannot create a Language Model object from LLMConfig.
                Please specify a specific subclass of LLMConfig e.g.,
                OpenAIGPTConfig. If you are creating a ChatAgent from
                a ChatAgentConfig, please specify the `llm` field of this config
                as a specific subclass of LLMConfig, e.g., OpenAIGPTConfig.
                """
            )
        from langroid.language_models.azure_openai import AzureGPT
        from langroid.language_models.mock_lm import MockLM, MockLMConfig
        from langroid.language_models.openai_gpt import OpenAIGPT

        if config is None or config.type is None:
            return None

        if config.type == "mock":
            return MockLM(cast(MockLMConfig, config))

        openai: Union[Type[AzureGPT], Type[OpenAIGPT]]

        if config.type == "azure":
            openai = AzureGPT
        else:
            openai = OpenAIGPT
        cls = dict(
            openai=openai,
        ).get(config.type, openai)
        return cls(config)  # type: ignore

    @staticmethod
    def user_assistant_pairs(lst: List[str]) -> List[Tuple[str, str]]:
        """
        Given an even-length sequence of strings, split into a sequence of pairs

        Args:
            lst (List[str]): sequence of strings

        Returns:
            List[Tuple[str,str]]: sequence of pairs of strings
        """
        evens = lst[::2]
        odds = lst[1::2]
        return list(zip(evens, odds))

    @staticmethod
    def get_chat_history_components(
        messages: List[LLMMessage],
    ) -> Tuple[str, List[Tuple[str, str]], str]:
        """
        From the chat history, extract system prompt, user-assistant turns, and
        final user msg.

        Args:
            messages (List[LLMMessage]): List of messages in the chat history

        Returns:
            Tuple[str, List[Tuple[str,str]], str]:
                system prompt, user-assistant turns, final user msg

        """
        # Handle various degenerate cases
        messages = [m for m in messages]  # copy
        DUMMY_SYS_PROMPT = "You are a helpful assistant."
        DUMMY_USER_PROMPT = "Follow the instructions above."
        if len(messages) == 0 or messages[0].role != Role.SYSTEM:
            logger.warning("No system msg, creating dummy system prompt")
            messages.insert(0, LLMMessage(content=DUMMY_SYS_PROMPT, role=Role.SYSTEM))
        system_prompt = messages[0].content

        # now we have messages = [Sys,...]
        if len(messages) == 1:
            logger.warning(
                "Got only system message in chat history, creating dummy user prompt"
            )
            messages.append(LLMMessage(content=DUMMY_USER_PROMPT, role=Role.USER))

        # now we have messages = [Sys, msg, ...]

        if messages[1].role != Role.USER:
            messages.insert(1, LLMMessage(content=DUMMY_USER_PROMPT, role=Role.USER))

        # now we have messages = [Sys, user, ...]
        if messages[-1].role != Role.USER:
            logger.warning(
                "Last message in chat history is not a user message,"
                " creating dummy user prompt"
            )
            messages.append(LLMMessage(content=DUMMY_USER_PROMPT, role=Role.USER))

        # now we have messages = [Sys, user, ..., user]
        # so we omit the first and last elements and make pairs of user-asst messages
        conversation = [m.content for m in messages[1:-1]]
        user_prompt = messages[-1].content
        pairs = LanguageModel.user_assistant_pairs(conversation)
        return system_prompt, pairs, user_prompt

    @abstractmethod
    def set_stream(self, stream: bool) -> bool:
        """Enable or disable streaming output from API.
        Return previous value of stream."""
        pass

    @abstractmethod
    def get_stream(self) -> bool:
        """Get streaming status"""
        pass

    @abstractmethod
    def generate(self, prompt: str, max_tokens: int = 200) -> LLMResponse:
        pass

    @abstractmethod
    async def agenerate(self, prompt: str, max_tokens: int = 200) -> LLMResponse:
        pass

    @abstractmethod
    def chat(
        self,
        messages: Union[str, List[LLMMessage]],
        max_tokens: int = 200,
        tools: Optional[List[OpenAIToolSpec]] = None,
        tool_choice: ToolChoiceTypes | Dict[str, str | Dict[str, str]] = "auto",
        functions: Optional[List[LLMFunctionSpec]] = None,
        function_call: str | Dict[str, str] = "auto",
        response_format: Optional[OpenAIJsonSchemaSpec] = None,
    ) -> LLMResponse:
        """
        Get chat-completion response from LLM.

        Args:
            messages: message-history to send to the LLM
            max_tokens: max tokens to generate
            tools: tools available for the LLM to use in its response
            tool_choice: tool call mode, one of "none", "auto", "required",
                or a dict specifying a specific tool.
            functions: functions available for LLM to call (deprecated)
            function_call: function calling mode, "auto", "none", or a specific fn
                    (deprecated)
        """

        pass

    @abstractmethod
    async def achat(
        self,
        messages: Union[str, List[LLMMessage]],
        max_tokens: int = 200,
        tools: Optional[List[OpenAIToolSpec]] = None,
        tool_choice: ToolChoiceTypes | Dict[str, str | Dict[str, str]] = "auto",
        functions: Optional[List[LLMFunctionSpec]] = None,
        function_call: str | Dict[str, str] = "auto",
        response_format: Optional[OpenAIJsonSchemaSpec] = None,
    ) -> LLMResponse:
        """Async version of `chat`. See `chat` for details."""
        pass

    def __call__(self, prompt: str, max_tokens: int) -> LLMResponse:
        return self.generate(prompt, max_tokens)

    @staticmethod
    def _fallback_model_names(model: str) -> List[str]:
        parts = model.split("/")
        fallbacks = []
        for i in range(1, len(parts)):
            fallbacks.append("/".join(parts[i:]))
        return fallbacks

    def info(self) -> ModelInfo:
        """Info of relevant chat model"""
        orig_model = (
            self.config.completion_model
            if self.config.use_completion_for_chat
            else self.chat_model_orig
        )
        return get_model_info(orig_model, self._fallback_model_names(orig_model))

    def completion_info(self) -> ModelInfo:
        """Info of relevant completion model"""
        orig_model = (
            self.chat_model_orig
            if self.config.use_chat_for_completion
            else self.config.completion_model
        )
        return get_model_info(orig_model, self._fallback_model_names(orig_model))

    def supports_functions_or_tools(self) -> bool:
        """
        Does this Model's API support "native" tool-calling, i.e.
        can we call the API with arguments that contain a list of available tools,
        and their schemas?
        Note that, given the plethora of LLM provider APIs this determination is
        imperfect at best, and leans towards returning True.
        When the API calls fails with an error indicating tools are not supported,
        then users are encouraged to use the Langroid-based prompt-based
        ToolMessage mechanism, which works with ANY LLM. To enable this,
        in your ChatAgentConfig, set `use_functions_api=False`, and `use_tools=True`.
        """
        return self.info().has_tools

    def chat_context_length(self) -> int:
        return self.config.chat_context_length or DEFAULT_CONTEXT_LENGTH

    def completion_context_length(self) -> int:
        return self.config.completion_context_length or DEFAULT_CONTEXT_LENGTH

    def chat_cost(self) -> Tuple[float, float, float]:
        """
        Return the cost per 1000 tokens for chat completions.

        Returns:
            Tuple[float, float, float]: (input_cost, cached_cost, output_cost)
                per 1000 tokens
        """
        return (0.0, 0.0, 0.0)

    def reset_usage_cost(self) -> None:
        for mdl in [self.config.chat_model, self.config.completion_model]:
            if mdl is None:
                return
            if mdl not in self.usage_cost_dict:
                self.usage_cost_dict[mdl] = LLMTokenUsage()
            counter = self.usage_cost_dict[mdl]
            counter.reset()

    def update_usage_cost(
        self, chat: bool, prompts: int, completions: int, cost: float
    ) -> None:
        """
        Update usage cost for this LLM.
        Args:
            chat (bool): whether to update for chat or completion model
            prompts (int): number of tokens used for prompts
            completions (int): number of tokens used for completions
            cost (float): total token cost in USD
        """
        mdl = self.config.chat_model if chat else self.config.completion_model
        if mdl is None:
            return
        if mdl not in self.usage_cost_dict:
            self.usage_cost_dict[mdl] = LLMTokenUsage()
        counter = self.usage_cost_dict[mdl]
        counter.prompt_tokens += prompts
        counter.completion_tokens += completions
        counter.cost += cost
        counter.calls += 1

    @classmethod
    def usage_cost_summary(cls) -> str:
        s = ""
        for model, counter in cls.usage_cost_dict.items():
            s += f"{model}: {counter}\n"
        return s

    @classmethod
    def tot_tokens_cost(cls) -> Tuple[int, float]:
        """
        Return total tokens used and total cost across all models.
        """
        total_tokens = 0
        total_cost = 0.0
        for counter in cls.usage_cost_dict.values():
            total_tokens += counter.total_tokens
            total_cost += counter.cost
        return total_tokens, total_cost

    def get_reasoning_final(self, message: str) -> Tuple[str, str]:
        """Extract "reasoning" and "final answer" from an LLM response, if the
        reasoning is found within configured delimiters, like <think>, </think>.
        E.g.,
        '<think> Okay, let's see, the user wants... </think> 2 + 3 = 5'

        Args:
            message (str): message from LLM

        Returns:
            Tuple[str, str]: reasoning, final answer
        """
        start, end = self.config.thought_delimiters
        if start in message and end in message:
            parts = message.split(start)
            if len(parts) > 1:
                reasoning, final = parts[1].split(end)
                return reasoning, final
        return "", message

    def followup_to_standalone(
        self, chat_history: List[Tuple[str, str]], question: str
    ) -> str:
        """
        Given a chat history and a question, convert it to a standalone question.
        Args:
            chat_history: list of tuples of (question, answer)
            query: follow-up question

        Returns: standalone version of the question
        """
        history = collate_chat_history(chat_history)

        prompt = f"""
        You are an expert at understanding a CHAT HISTORY between an AI Assistant
        and a User, and you are highly skilled in rephrasing the User's FOLLOW-UP
        QUESTION/REQUEST as a STANDALONE QUESTION/REQUEST that can be understood
        WITHOUT the context of the chat history.

        Below is the CHAT HISTORY. When the User asks you to rephrase a
        FOLLOW-UP QUESTION/REQUEST, your ONLY task is to simply return the
        question REPHRASED as a STANDALONE QUESTION/REQUEST, without any additional
        text or context.

        <CHAT_HISTORY>
        {history}
        </CHAT_HISTORY>
        """.strip()

        follow_up_question = f"""
        Please rephrase this as a stand-alone question or request:
        <FOLLOW-UP-QUESTION-OR-REQUEST>
        {question}
        </FOLLOW-UP-QUESTION-OR-REQUEST>
        """.strip()

        show_if_debug(prompt, "FOLLOWUP->STANDALONE-PROMPT= ")
        standalone = self.chat(
            messages=[
                LLMMessage(role=Role.SYSTEM, content=prompt),
                LLMMessage(role=Role.USER, content=follow_up_question),
            ],
            max_tokens=1024,
        ).message.strip()

        show_if_debug(prompt, "FOLLOWUP->STANDALONE-RESPONSE= ")
        return standalone


class StreamingIfAllowed:
    """Context to temporarily enable or disable streaming, if allowed globally via
    `settings.stream`"""

    def __init__(self, llm: LanguageModel, stream: bool = True):
        self.llm = llm
        self.stream = stream

    def __enter__(self) -> None:
        self.old_stream = self.llm.set_stream(settings.stream and self.stream)

    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
        self.llm.set_stream(self.old_stream)
</file>

<file path="langroid/parsing/parser.py">
import logging
import re
from enum import Enum
from typing import Any, Dict, List, Literal, Optional

import tiktoken

from langroid.mytypes import Document
from langroid.parsing.md_parser import (
    MarkdownChunkConfig,
    chunk_markdown,
    count_words,
)
from langroid.parsing.para_sentence_split import create_chunks, remove_extra_whitespace
from langroid.pydantic_v1 import BaseSettings, root_validator
from langroid.utils.object_registry import ObjectRegistry

logger = logging.getLogger(__name__)
logger.setLevel(logging.WARNING)


class Splitter(str, Enum):
    TOKENS = "tokens"
    PARA_SENTENCE = "para_sentence"
    SIMPLE = "simple"
    # "structure-aware" splitting with chunks enriched by header info
    MARKDOWN = "markdown"


class BaseParsingConfig(BaseSettings):
    """Base class for document parsing configurations."""

    library: str

    class Config:
        extra = "ignore"  # Ignore unknown settings


class LLMPdfParserConfig(BaseSettings):
    """Configuration for LLM-based parsing."""

    model_name: str = "gemini/gemini-2.0-flash"  # Default model
    max_tokens: Optional[int] = None
    split_on_page: Optional[bool] = True
    requests_per_minute: Optional[int] = 5
    timeout: int = 60
    prompt: str = ""  # override with a domain-specific prompt
    system_prompt: str = ""  # override with a domain-specific system prompt


class MarkerConfig(BaseSettings):
    """Configuration for Markitdown-based parsing."""

    config_dict: Dict[str, Any] = {}


class PdfParsingConfig(BaseParsingConfig):
    library: Literal[
        "fitz",
        "pymupdf4llm",
        "docling",
        "pypdf",
        "unstructured",
        "pdf2image",
        "markitdown",
        "llm-pdf-parser",
        "marker",
    ] = "pymupdf4llm"
    llm_parser_config: Optional[LLMPdfParserConfig] = None
    marker_config: Optional[MarkerConfig] = None

    @root_validator(pre=True)
    def enable_configs(cls, values: Dict[str, Any]) -> Dict[str, Any]:
        """Ensure correct config is set based on library selection."""
        library = values.get("library")

        if library == "llm-pdf-parser":
            values.setdefault("llm_parser_config", LLMPdfParserConfig())
        else:
            values["llm_parser_config"] = None

        if library == "marker":
            values.setdefault("marker_config", MarkerConfig())
        else:
            values["marker_config"] = None

        return values


class DocxParsingConfig(BaseSettings):
    library: Literal["python-docx", "unstructured", "markitdown-docx"] = "unstructured"


class DocParsingConfig(BaseSettings):
    library: Literal["unstructured"] = "unstructured"


class MarkitdownPPTXParsingConfig(BaseSettings):
    library: Literal["markitdown"] = "markitdown"


class MarkitdownXLSXParsingConfig(BaseSettings):
    library: Literal["markitdown"] = "markitdown"


class MarkitdownXLSParsingConfig(BaseSettings):
    library: Literal["markitdown"] = "markitdown"


class ParsingConfig(BaseSettings):
    splitter: str = Splitter.MARKDOWN
    chunk_by_page: bool = False  # split by page?
    chunk_size: int = 200  # aim for this many tokens per chunk
    chunk_size_variation: float = 0.30  # max variation from chunk_size
    overlap: int = 50  # overlap between chunks
    max_chunks: int = 10_000
    # offset to subtract from page numbers:
    # e.g. if physical page 12 is displayed as page 1, set page_number_offset = 11
    page_number_offset: int = 0
    # aim to have at least this many chars per chunk when truncating due to punctuation
    min_chunk_chars: int = 350
    discard_chunk_chars: int = 5  # discard chunks with fewer than this many chars
    n_similar_docs: Optional[int] = None  # deprecated
    n_neighbor_ids: int = 5  # window size to store around each chunk
    separators: List[str] = ["\n\n", "\n", " ", ""]
    token_encoding_model: str = "text-embedding-3-small"
    pdf: PdfParsingConfig = PdfParsingConfig()
    docx: DocxParsingConfig = DocxParsingConfig()
    doc: DocParsingConfig = DocParsingConfig()
    pptx: MarkitdownPPTXParsingConfig = MarkitdownPPTXParsingConfig()
    xls: MarkitdownXLSParsingConfig = MarkitdownXLSParsingConfig()
    xlsx: MarkitdownXLSXParsingConfig = MarkitdownXLSXParsingConfig()


class Parser:
    def __init__(self, config: ParsingConfig):
        self.config = config
        try:
            self.tokenizer = tiktoken.encoding_for_model(config.token_encoding_model)
        except Exception:
            self.tokenizer = tiktoken.encoding_for_model("text-embedding-3-small")

    def num_tokens(self, text: str) -> int:
        if self.config.splitter == Splitter.MARKDOWN:
            return count_words(text)  # simple count based on whitespace-split
        tokens = self.tokenizer.encode(text, allowed_special={"<|endoftext|>"})
        return len(tokens)

    def truncate_tokens(self, text: str, max_tokens: int) -> str:
        tokens = self.tokenizer.encode(text)
        if len(tokens) <= max_tokens:
            return text
        return self.tokenizer.decode(tokens[:max_tokens])

    def add_window_ids(self, chunks: List[Document]) -> None:
        """Chunks may belong to multiple docs, but for each doc,
        they appear consecutively. Add window_ids in metadata"""

        # discard empty chunks
        chunks = [c for c in chunks if c.content.strip() != ""]
        if len(chunks) == 0:
            return
        # The original metadata.id (if any) is ignored since it will be same for all
        # chunks and is useless. We want a distinct id for each chunk.
        # ASSUMPTION: all chunks c of a doc have same c.metadata.id !
        orig_ids = [c.metadata.id for c in chunks]
        ids = [ObjectRegistry.new_id() for c in chunks]
        id2chunk = {id: c for id, c in zip(ids, chunks)}

        # group the ids by orig_id
        # (each distinct orig_id refers to a different document)
        orig_id_to_ids: Dict[str, List[str]] = {}
        for orig_id, id in zip(orig_ids, ids):
            if orig_id not in orig_id_to_ids:
                orig_id_to_ids[orig_id] = []
            orig_id_to_ids[orig_id].append(id)

        # now each orig_id maps to a sequence of ids within a single doc

        k = self.config.n_neighbor_ids
        for orig, ids in orig_id_to_ids.items():
            # ids are consecutive chunks in a single doc
            n = len(ids)
            window_ids = [ids[max(0, i - k) : min(n, i + k + 1)] for i in range(n)]
            for i, _ in enumerate(ids):
                c = id2chunk[ids[i]]
                c.metadata.window_ids = window_ids[i]
                c.metadata.id = ids[i]
                c.metadata.is_chunk = True

    def split_simple(self, docs: List[Document]) -> List[Document]:
        if len(self.config.separators) == 0:
            raise ValueError("Must have at least one separator")
        final_docs = []

        for d in docs:
            if d.content.strip() == "":
                continue
            chunks = remove_extra_whitespace(d.content).split(self.config.separators[0])
            # note we are ensuring we COPY the document metadata into each chunk,
            # which ensures all chunks of a given doc have same metadata
            # (and in particular same metadata.id, which is important later for
            # add_window_ids)
            chunk_docs = [
                Document(
                    content=c, metadata=d.metadata.copy(update=dict(is_chunk=True))
                )
                for c in chunks
                if c.strip() != ""
            ]
            self.add_window_ids(chunk_docs)
            final_docs += chunk_docs
        return final_docs

    def split_para_sentence(self, docs: List[Document]) -> List[Document]:
        chunks = docs
        while True:
            un_splittables = 0
            split_chunks = []
            for c in chunks:
                if c.content.strip() == "":
                    continue
                if self.num_tokens(c.content) <= 1.3 * self.config.chunk_size:
                    # small chunk: no need to split
                    split_chunks.append(c)
                    continue
                splits = self._split_para_sentence_once([c])
                un_splittables += len(splits) == 1
                split_chunks += splits
            if len(split_chunks) == len(chunks):
                if un_splittables > 0:
                    max_len = max([self.num_tokens(p.content) for p in chunks])
                    logger.warning(
                        f"""
                        Unable to split {un_splittables} chunks
                        using chunk_size = {self.config.chunk_size}.
                        Max chunk size is {max_len} tokens.
                        """
                    )
                break  # we won't be able to shorten them with current settings
            chunks = split_chunks.copy()

        self.add_window_ids(chunks)
        return chunks

    def _split_para_sentence_once(self, docs: List[Document]) -> List[Document]:
        final_chunks = []
        for d in docs:
            if d.content.strip() == "":
                continue
            chunks = create_chunks(d.content, self.config.chunk_size, self.num_tokens)
            # note we are ensuring we COPY the document metadata into each chunk,
            # which ensures all chunks of a given doc have same metadata
            # (and in particular same metadata.id, which is important later for
            # add_window_ids)
            chunk_docs = [
                Document(
                    content=c, metadata=d.metadata.copy(update=dict(is_chunk=True))
                )
                for c in chunks
                if c.strip() != ""
            ]
            final_chunks += chunk_docs

        return final_chunks

    def split_chunk_tokens(self, docs: List[Document]) -> List[Document]:
        final_docs = []
        for d in docs:
            if self.config.splitter == Splitter.MARKDOWN:
                chunks = chunk_markdown(
                    d.content,
                    MarkdownChunkConfig(
                        # apply rough adjustment factor to convert from tokens to words,
                        # which is what the markdown chunker uses
                        chunk_size=int(self.config.chunk_size * 0.75),
                        overlap_tokens=int(self.config.overlap * 0.75),
                        variation_percent=self.config.chunk_size_variation,
                        rollup=True,
                    ),
                )
            else:
                chunks = self.chunk_tokens(d.content)
            # note we are ensuring we COPY the document metadata into each chunk,
            # which ensures all chunks of a given doc have same metadata
            # (and in particular same metadata.id, which is important later for
            # add_window_ids)
            chunk_docs = [
                Document(
                    content=c, metadata=d.metadata.copy(update=dict(is_chunk=True))
                )
                for c in chunks
                if c.strip() != ""
            ]
            self.add_window_ids(chunk_docs)
            final_docs += chunk_docs
        return final_docs

    def chunk_tokens(
        self,
        text: str,
    ) -> List[str]:
        """
        Split a text into chunks of ~CHUNK_SIZE tokens,
        based on punctuation and newline boundaries.
        Adapted from
        https://github.com/openai/chatgpt-retrieval-plugin/blob/main/services/chunks.py

        Args:
            text: The text to split into chunks.

        Returns:
            A list of text chunks, each of which is a string of tokens
            roughly self.config.chunk_size tokens long.
        """
        # Return an empty list if the text is empty or whitespace
        if not text or text.isspace():
            return []

        # Tokenize the text
        tokens = self.tokenizer.encode(text, disallowed_special=())

        # Initialize an empty list of chunks
        chunks = []

        # Initialize a counter for the number of chunks
        num_chunks = 0

        # Loop until all tokens are consumed
        while tokens and num_chunks < self.config.max_chunks:
            # Take the first chunk_size tokens as a chunk
            chunk = tokens[: self.config.chunk_size]

            # Decode the chunk into text
            chunk_text = self.tokenizer.decode(chunk)

            # Skip the chunk if it is empty or whitespace
            if not chunk_text or chunk_text.isspace():
                # Remove the tokens corresponding to the chunk text
                # from remaining tokens
                tokens = tokens[len(chunk) :]
                # Continue to the next iteration of the loop
                continue

            # Find the last period or punctuation mark in the chunk
            punctuation_matches = [
                (m.start(), m.group())
                for m in re.finditer(r"(?:[.!?][\s\n]|\n)", chunk_text)
            ]

            last_punctuation = max([pos for pos, _ in punctuation_matches] + [-1])

            # If there is a punctuation mark, and the last punctuation index is
            # after MIN_CHUNK_SIZE_CHARS
            if (
                last_punctuation != -1
                and last_punctuation > self.config.min_chunk_chars
            ):
                # Truncate the chunk text at the punctuation mark
                chunk_text = chunk_text[: last_punctuation + 1]

            # Replace redundant (3 or more) newlines with 2 newlines to preser
            # paragraph separation!
            # But do NOT strip leading/trailing whitespace, to preserve formatting
            # (e.g. code blocks, or in case we want to stitch chunks back together)
            chunk_text_to_append = re.sub(r"\n{3,}", "\n\n", chunk_text)

            if len(chunk_text_to_append) > self.config.discard_chunk_chars:
                # Append the chunk text to the list of chunks
                chunks.append(chunk_text_to_append)

            # Remove the tokens corresponding to the chunk text
            # from the remaining tokens
            tokens = tokens[
                len(self.tokenizer.encode(chunk_text, disallowed_special=())) :
            ]

            # Increment the number of chunks
            num_chunks += 1

        # There may be remaining tokens, but we discard them
        # since we have already reached the maximum number of chunks

        return chunks

    def split(self, docs: List[Document]) -> List[Document]:
        if len(docs) == 0:
            return []
        # create ids in metadata of docs if absent:
        # we need this to distinguish docs later in add_window_ids
        for d in docs:
            if d.metadata.id in [None, ""]:
                d.metadata.id = ObjectRegistry.new_id()
        # some docs are already splits, so don't split them further!
        chunked_docs = [d for d in docs if d.metadata.is_chunk]
        big_docs = [d for d in docs if not d.metadata.is_chunk]
        if len(big_docs) == 0:
            return chunked_docs
        match self.config.splitter:
            case Splitter.MARKDOWN | Splitter.TOKENS:
                big_doc_chunks = self.split_chunk_tokens(big_docs)
            case Splitter.PARA_SENTENCE:
                big_doc_chunks = self.split_para_sentence(big_docs)
            case Splitter.SIMPLE:
                big_doc_chunks = self.split_simple(big_docs)
            case _:
                raise ValueError(f"Unknown splitter: {self.config.splitter}")

        return chunked_docs + big_doc_chunks
</file>

<file path="langroid/utils/logging.py">
import logging
import os
import os.path
import sys
import threading
from typing import ClassVar, Dict, no_type_check

import colorlog
from rich.console import Console
from rich.markup import escape


# Define a function to set up the colored logger
def setup_colored_logging() -> None:
    # Define the log format with color codes
    log_format = "%(log_color)s%(asctime)s - %(levelname)s - %(message)s%(reset)s"
    # Create a color formatter
    color_formatter = colorlog.ColoredFormatter(
        log_format,
        datefmt="%Y-%m-%d %H:%M:%S",
        reset=True,
        log_colors={
            "DEBUG": "cyan",
            "INFO": "green",
            "WARNING": "yellow",
            "ERROR": "red",
            "CRITICAL": "red,bg_white",
        },
    )
    # Configure the root logger to use the color formatter
    handler = logging.StreamHandler()
    handler.setFormatter(color_formatter)
    logger = logging.getLogger()
    logger.addHandler(handler)
    # logger.setLevel(logging.DEBUG)


def setup_logger(
    name: str,
    level: int = logging.INFO,
    terminal: bool = False,
) -> logging.Logger:
    """
    Set up a logger of module `name` at a desired level.
    Args:
        name: module name
        level: desired logging level
    Returns:
        logger
    """
    logger = logging.getLogger(name)
    logger.setLevel(level)
    if not logger.hasHandlers() and terminal:
        handler = logging.StreamHandler()
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        handler.setFormatter(formatter)
        logger.addHandler(handler)
    return logger


def setup_console_logger(name: str) -> logging.Logger:
    logger = setup_logger(name)
    handler = logging.StreamHandler()
    handler.setLevel(logging.INFO)
    formatter = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    return logger


def setup_file_logger(
    name: str,
    filename: str,
    append: bool = False,
    log_format: bool = False,
    propagate: bool = False,
) -> logging.Logger:
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    file_mode = "a" if append else "w"
    logger = setup_logger(name, terminal=False)
    handler = logging.FileHandler(filename, mode=file_mode, encoding="utf-8")
    handler.setLevel(logging.INFO)
    if log_format:
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
    else:
        formatter = logging.Formatter("%(message)s")
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.propagate = propagate
    return logger


def setup_loggers_for_package(package_name: str, level: int) -> None:
    """
    Set up loggers for all modules in a package.
    This ensures that log-levels of modules outside the package are not affected.
    Args:
        package_name: main package name
        level: desired logging level
    Returns:
    """
    import importlib
    import pkgutil

    package = importlib.import_module(package_name)
    for _, module_name, _ in pkgutil.walk_packages(
        package.__path__, package.__name__ + "."
    ):
        module = importlib.import_module(module_name)
        setup_logger(module.__name__, level)


class RichFileLogger:
    """Singleton-per-path, ref-counted, thread-safe file logger.

    • Any number of calls to `RichFileLogger(path)` yield the same object.
    • A per-instance lock guarantees that the underlying file is opened only
      once, even when many threads construct the logger concurrently.
    • A reference counter tracks how many parts of the program are using the
      logger; the FD is closed only when the counter reaches zero.
    • All writes are serialised with a dedicated write-lock.
    """

    _instances: ClassVar[Dict[str, "RichFileLogger"]] = {}
    _ref_counts: ClassVar[Dict[str, int]] = {}
    # guards _instances & _ref_counts
    _class_lock: ClassVar[threading.Lock] = threading.Lock()

    # ------------------------------------------------------------------ #
    # construction / destruction
    # ------------------------------------------------------------------ #
    def __new__(
        cls, log_file: str, append: bool = False, color: bool = True
    ) -> "RichFileLogger":
        with cls._class_lock:
            if log_file in cls._instances:
                cls._ref_counts[log_file] += 1
                return cls._instances[log_file]

            inst = super().__new__(cls)
            # create the per-instance init-lock *before* releasing class-lock
            inst._init_lock = threading.Lock()
            cls._instances[log_file] = inst
            cls._ref_counts[log_file] = 1
            return inst

    def __init__(self, log_file: str, append: bool = False, color: bool = True) -> None:
        # Double-checked locking: perform heavy init exactly once.
        if getattr(self, "_init_done", False):
            return

        if not hasattr(self, "_init_lock"):
            self._init_lock: threading.Lock = threading.Lock()

        with self._init_lock:
            if getattr(self, "_init_done", False):
                return

            os.makedirs(os.path.dirname(log_file), exist_ok=True)
            mode = "a" if append else "w"
            self._owns_file: bool = True
            try:
                self.file = open(log_file, mode, buffering=1, encoding="utf-8")
            except OSError as exc:  # EMFILE: too many open files
                if exc.errno == 24:
                    # Fallback: reuse an already-open stream to avoid creating a new FD
                    self.file = sys.stderr
                    self._owns_file = False
                else:
                    raise
            self.log_file: str = log_file
            self.color: bool = color
            self.console: Console | None = (
                Console(file=self.file, force_terminal=True, width=200)
                if color
                else None
            )
            self._write_lock = threading.Lock()
            self._init_done = True  # set last

    # ------------------------------------------------------------------ #
    # public API
    # ------------------------------------------------------------------ #
    @no_type_check
    def log(self, message: str) -> None:
        """Thread-safe write to the log file."""
        with self._write_lock:
            if self.color and self.console is not None:
                self.console.print(escape(message))
            else:
                print(message, file=self.file)
            self.file.flush()

    def close(self) -> None:
        """Decrease ref-count; close FD only when last user is done."""
        with self._class_lock:
            count = self._ref_counts.get(self.log_file, 0) - 1
            if count <= 0:
                self._ref_counts.pop(self.log_file, None)
                self._instances.pop(self.log_file, None)
                with self._write_lock:
                    if self._owns_file and not self.file.closed:
                        self.file.close()
            else:
                self._ref_counts[self.log_file] = count
</file>

<file path="langroid/utils/pandas_utils.py">
import ast
from typing import Any

import pandas as pd

COMMON_USE_DF_METHODS = {
    "T",
    "abs",
    "add",
    "add_prefix",
    "add_suffix",
    "agg",
    "aggregate",
    "align",
    "all",
    "any",
    "apply",
    "applymap",
    "assign",
    "at",
    "at_time",
    "between_time",
    "bfill",
    "clip",
    "combine",
    "combine_first",
    "convert_dtypes",
    "corr",
    "corrwith",
    "count",
    "cov",
    "cummax",
    "cummin",
    "cumprod",
    "cumsum",
    "describe",
    "diff",
    "dot",
    "drop_duplicates",
    "duplicated",
    "eq",
    "eval",
    "ewm",
    "expanding",
    "explode",
    "filter",
    "first",
    "groupby",
    "head",
    "idxmax",
    "idxmin",
    "infer_objects",
    "interpolate",
    "isin",
    "kurt",
    "kurtosis",
    "last",
    "le",
    "loc",
    "lt",
    "gt",
    "ge",
    "iloc",
    "mask",
    "max",
    "mean",
    "median",
    "melt",
    "min",
    "mode",
    "mul",
    "nlargest",
    "nsmallest",
    "notna",
    "notnull",
    "nunique",
    "pct_change",
    "pipe",
    "pivot",
    "pivot_table",
    "prod",
    "product",
    "quantile",
    "query",
    "rank",
    "replace",
    "resample",
    "rolling",
    "round",
    "sample",
    "select_dtypes",
    "sem",
    "shift",
    "skew",
    "sort_index",
    "sort_values",
    "squeeze",
    "stack",
    "std",
    "sum",
    "tail",
    "transform",
    "transpose",
    "unstack",
    "value_counts",
    "var",
    "where",
    "xs",
}

POTENTIALLY_DANGEROUS_DF_METHODS = {
    "eval",
    "query",
    "apply",
    "applymap",
    "pipe",
    "agg",
    "aggregate",
    "transform",
    "rolling",
    "expanding",
    "resample",
}

WHITELISTED_DF_METHODS = COMMON_USE_DF_METHODS - POTENTIALLY_DANGEROUS_DF_METHODS


BLOCKED_KW = {
    "engine",
    "parser",
    "inplace",
    "regex",
    "dtype",
    "converters",
    "eval",
}
MAX_CHAIN = 6
MAX_DEPTH = 25
NUMERIC_LIMIT = 1_000_000_000


class UnsafeCommandError(ValueError):
    """Raised when a command string violates security policy."""

    pass


def _literal_ok(node: ast.AST) -> bool:
    """Return True if *node* is a safe literal (and within numeric limit)."""
    if isinstance(node, ast.Constant):
        if (
            isinstance(node.value, (int, float, complex))
            and abs(node.value) > NUMERIC_LIMIT
        ):
            raise UnsafeCommandError("numeric constant exceeds limit")
        return True
    if isinstance(node, (ast.Tuple, ast.List)):
        return all(_literal_ok(elt) for elt in node.elts)
    if isinstance(node, ast.Slice):
        return all(
            sub is None or _literal_ok(sub)
            for sub in (node.lower, node.upper, node.step)
        )
    return False


class CommandValidator(ast.NodeVisitor):
    """AST walker that enforces the security policy."""

    # Comparison operators we allow
    ALLOWED_CMPOP = (ast.Gt, ast.GtE, ast.Lt, ast.LtE, ast.Eq, ast.NotEq)

    # Arithmetic operators we allow (power ** intentionally omitted)
    ALLOWED_BINOP = (ast.Add, ast.Sub, ast.Mult, ast.Div, ast.FloorDiv, ast.Mod)
    ALLOWED_UNARY = (ast.UAdd, ast.USub)

    # Node whitelist
    ALLOWED_NODES = (
        ast.Expression,
        ast.Attribute,
        ast.Name,
        ast.Load,
        ast.Call,
        ast.Subscript,
        ast.Constant,
        ast.Tuple,
        ast.List,
        ast.Slice,
        ast.keyword,
        ast.BinOp,
        ast.UnaryOp,
        ast.Compare,
        *ALLOWED_BINOP,
        *ALLOWED_UNARY,
        *ALLOWED_CMPOP,
    )

    def __init__(self, df_name: str = "df"):
        self.df_name = df_name
        self.depth = 0
        self.chain = 0

    # Depth guard
    def generic_visit(self, node: ast.AST) -> None:
        self.depth += 1
        if self.depth > MAX_DEPTH:
            raise UnsafeCommandError("AST nesting too deep")
        super().generic_visit(node)
        self.depth -= 1

    # Literal validation
    def visit_Constant(self, node: ast.Constant) -> None:
        _literal_ok(node)

    # Arithmetic
    def visit_BinOp(self, node: ast.BinOp) -> None:
        if not isinstance(node.op, self.ALLOWED_BINOP):
            raise UnsafeCommandError("operator not allowed")
        self.generic_visit(node)

    def visit_UnaryOp(self, node: ast.UnaryOp) -> None:
        if not isinstance(node.op, self.ALLOWED_UNARY):
            raise UnsafeCommandError("unary operator not allowed")
        self.generic_visit(node)

    # Comparisons
    def visit_Compare(self, node: ast.Compare) -> None:
        if not all(isinstance(op, self.ALLOWED_CMPOP) for op in node.ops):
            raise UnsafeCommandError("comparison operator not allowed")
        for comp in node.comparators:
            _literal_ok(comp)
        self.generic_visit(node)

    # Subscripts
    def visit_Subscript(self, node: ast.Subscript) -> None:
        if not _literal_ok(node.slice):
            raise UnsafeCommandError("subscript must be literal")
        self.generic_visit(node)

    # Method calls
    def visit_Call(self, node: ast.Call) -> None:
        if not isinstance(node.func, ast.Attribute):
            raise UnsafeCommandError("only DataFrame method calls allowed")

        method = node.func.attr
        self.chain += 1
        if self.chain > MAX_CHAIN:
            raise UnsafeCommandError("method-chain too long")
        if method not in WHITELISTED_DF_METHODS:
            raise UnsafeCommandError(f"method '{method}' not permitted")

        # kwarg / arg checks
        for kw in node.keywords:
            if kw.arg in BLOCKED_KW:
                raise UnsafeCommandError(f"kwarg '{kw.arg}' is blocked")
            _literal_ok(kw.value)
        for arg in node.args:
            _literal_ok(arg)

        try:
            self.generic_visit(node)
        finally:
            self.chain -= 1

    # Names
    def visit_Name(self, node: ast.Name) -> None:
        if node.id != self.df_name:
            raise UnsafeCommandError(f"unexpected variable '{node.id}'")

    # Top-level gate
    def visit(self, node: ast.AST) -> None:
        if not isinstance(node, self.ALLOWED_NODES):
            raise UnsafeCommandError(f"disallowed node {type(node).__name__}")
        super().visit(node)


def sanitize_command(expr: str, df_name: str = "df") -> str:
    """
    Validate *expr*; return it unchanged if it passes all rules,
    else raise UnsafeCommandError with the first violation encountered.
    """
    tree = ast.parse(expr, mode="eval")
    CommandValidator(df_name).visit(tree)
    return expr


def stringify(x: Any) -> str:
    # Convert x to DataFrame if it is not one already
    if isinstance(x, pd.Series):
        df = x.to_frame()
    elif not isinstance(x, pd.DataFrame):
        return str(x)
    else:
        df = x

    # Truncate long text columns to 1000 characters
    for col in df.columns:
        if df[col].dtype == object:
            df[col] = df[col].apply(
                lambda item: (
                    (item[:1000] + "...")
                    if isinstance(item, str) and len(item) > 1000
                    else item
                )
            )

    # Limit to 10 rows
    df = df.head(10)

    # Convert to string
    return df.to_string(index=False)  # type: ignore
</file>

<file path="langroid/vector_store/base.py">
import copy
import logging
from abc import ABC, abstractmethod
from typing import Dict, List, Optional, Sequence, Tuple, Type

import numpy as np
import pandas as pd

from langroid.embedding_models.base import EmbeddingModel, EmbeddingModelsConfig
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.mytypes import DocMetaData, Document, EmbeddingFunction
from langroid.pydantic_v1 import BaseSettings
from langroid.utils.algorithms.graph import components, topological_sort
from langroid.utils.configuration import settings
from langroid.utils.object_registry import ObjectRegistry
from langroid.utils.output.printing import print_long_text
from langroid.utils.pandas_utils import sanitize_command, stringify
from langroid.utils.pydantic_utils import flatten_dict

logger = logging.getLogger(__name__)


class VectorStoreConfig(BaseSettings):
    type: str = ""  # deprecated, keeping it for backward compatibility
    collection_name: str | None = "temp"
    replace_collection: bool = False  # replace collection if it already exists
    storage_path: str = ".qdrant/data"
    cloud: bool = False
    batch_size: int = 200
    embedding: EmbeddingModelsConfig = OpenAIEmbeddingsConfig(
        model_type="openai",
    )
    embedding_model: Optional[EmbeddingModel] = None
    timeout: int = 60
    host: str = "127.0.0.1"
    port: int = 6333
    # used when parsing search results back as Document objects
    document_class: Type[Document] = Document
    metadata_class: Type[DocMetaData] = DocMetaData
    # compose_file: str = "langroid/vector_store/docker-compose-qdrant.yml"
    full_eval: bool = False  # runs eval without sanitization. Use only on trusted input


class VectorStore(ABC):
    """
    Abstract base class for a vector store.
    """

    def __init__(self, config: VectorStoreConfig):
        self.config = config
        if config.embedding_model is None:
            self.embedding_model = EmbeddingModel.create(config.embedding)
        else:
            self.embedding_model = config.embedding_model
        self.embedding_fn: EmbeddingFunction = self.embedding_model.embedding_fn()

    @staticmethod
    def create(config: VectorStoreConfig) -> Optional["VectorStore"]:
        from langroid.vector_store.chromadb import ChromaDB, ChromaDBConfig
        from langroid.vector_store.lancedb import LanceDB, LanceDBConfig
        from langroid.vector_store.meilisearch import MeiliSearch, MeiliSearchConfig
        from langroid.vector_store.pineconedb import PineconeDB, PineconeDBConfig
        from langroid.vector_store.postgres import PostgresDB, PostgresDBConfig
        from langroid.vector_store.qdrantdb import QdrantDB, QdrantDBConfig
        from langroid.vector_store.weaviatedb import WeaviateDB, WeaviateDBConfig

        if isinstance(config, QdrantDBConfig):
            return QdrantDB(config)
        elif isinstance(config, ChromaDBConfig):
            return ChromaDB(config)
        elif isinstance(config, LanceDBConfig):
            return LanceDB(config)
        elif isinstance(config, MeiliSearchConfig):
            return MeiliSearch(config)
        elif isinstance(config, PostgresDBConfig):
            return PostgresDB(config)
        elif isinstance(config, WeaviateDBConfig):
            return WeaviateDB(config)
        elif isinstance(config, PineconeDBConfig):
            return PineconeDB(config)

        else:
            logger.warning(
                f"""
                Unknown vector store config: {config.__repr_name__()},
                so skipping vector store creation!
                If you intended to use a vector-store, please set a specific 
                vector-store in your script, typically in the `vecdb` field of a 
                `ChatAgentConfig`, otherwise set it to None.
                """
            )
            return None

    @property
    def embedding_dim(self) -> int:
        return len(self.embedding_fn(["test"])[0])

    @abstractmethod
    def clear_empty_collections(self) -> int:
        """Clear all empty collections in the vector store.
        Returns the number of collections deleted.
        """
        pass

    @abstractmethod
    def clear_all_collections(self, really: bool = False, prefix: str = "") -> int:
        """
        Clear all collections in the vector store.

        Args:
            really (bool, optional): Whether to really clear all collections.
                Defaults to False.
            prefix (str, optional): Prefix of collections to clear.
        Returns:
            int: Number of collections deleted.
        """
        pass

    @abstractmethod
    def list_collections(self, empty: bool = False) -> List[str]:
        """List all collections in the vector store
        (only non empty collections if empty=False).
        """
        pass

    def set_collection(self, collection_name: str, replace: bool = False) -> None:
        """
        Set the current collection to the given collection name.
        Args:
            collection_name (str): Name of the collection.
            replace (bool, optional): Whether to replace the collection if it
                already exists. Defaults to False.
        """

        self.config.collection_name = collection_name
        self.config.replace_collection = replace
        if replace:
            self.create_collection(collection_name, replace=True)

    @abstractmethod
    def create_collection(self, collection_name: str, replace: bool = False) -> None:
        """Create a collection with the given name.
        Args:
            collection_name (str): Name of the collection.
            replace (bool, optional): Whether to replace the
                collection if it already exists. Defaults to False.
        """
        pass

    @abstractmethod
    def add_documents(self, documents: Sequence[Document]) -> None:
        pass

    def compute_from_docs(self, docs: List[Document], calc: str) -> str:
        """Compute a result on a set of documents,
        using a dataframe calc string like `df.groupby('state')['income'].mean()`.

        If full_eval is False (default), the input expression is sanitized to prevent
        most common code injection attack vectors.
        If full_eval is True, sanitization is bypassed - use only with trusted input!
        """
        # convert each doc to a dict, using dotted paths for nested fields
        dicts = [flatten_dict(doc.dict(by_alias=True)) for doc in docs]
        df = pd.DataFrame(dicts)

        try:
            # SECURITY MITIGATION: Eval input is sanitized to prevent most common
            # code injection attack vectors when full_eval is False.
            vars = {"df": df}
            if not self.config.full_eval:
                calc = sanitize_command(calc)
            code = compile(calc, "<calc>", "eval")
            result = eval(code, vars, {})
        except Exception as e:
            # return error message so LLM can fix the calc string if needed
            err = f"""
            Error encountered in pandas eval: {str(e)}
            """
            if isinstance(e, KeyError) and "not in index" in str(e):
                # Pd.eval sometimes fails on a perfectly valid exprn like
                # df.loc[..., 'column'] with a KeyError.
                err += """
                Maybe try a different way, e.g. 
                instead of df.loc[..., 'column'], try df.loc[...]['column']
                """
            return err
        return stringify(result)

    def maybe_add_ids(self, documents: Sequence[Document]) -> None:
        """Add ids to metadata if absent, since some
        vecdbs don't like having blank ids."""
        for d in documents:
            if d.metadata.id in [None, ""]:
                d.metadata.id = ObjectRegistry.new_id()

    @abstractmethod
    def similar_texts_with_scores(
        self,
        text: str,
        k: int = 1,
        where: Optional[str] = None,
    ) -> List[Tuple[Document, float]]:
        """
        Find k most similar texts to the given text, in terms of vector distance metric
        (e.g., cosine similarity).

        Args:
            text (str): The text to find similar texts for.
            k (int, optional): Number of similar texts to retrieve. Defaults to 1.
            where (Optional[str], optional): Where clause to filter the search.

        Returns:
            List[Tuple[Document,float]]: List of (Document, score) tuples.

        """
        pass

    def add_context_window(
        self, docs_scores: List[Tuple[Document, float]], neighbors: int = 0
    ) -> List[Tuple[Document, float]]:
        """
        In each doc's metadata, there may be a window_ids field indicating
        the ids of the chunks around the current chunk.
        These window_ids may overlap, so we
        - coalesce each overlapping groups into a single window (maintaining ordering),
        - create a new document for each part, preserving metadata,

        We may have stored a longer set of window_ids than we need during chunking.
        Now, we just want `neighbors` on each side of the center of the window_ids list.

        Args:
            docs_scores (List[Tuple[Document, float]]): List of pairs of documents
                to add context windows to together with their match scores.
            neighbors (int, optional): Number of neighbors on "each side" of match to
                retrieve. Defaults to 0.
                "Each side" here means before and after the match,
                in the original text.

        Returns:
            List[Tuple[Document, float]]: List of (Document, score) tuples.
        """
        # We return a larger context around each match, i.e.
        # a window of `neighbors` on each side of the match.
        docs = [d for d, s in docs_scores]
        scores = [s for d, s in docs_scores]
        if neighbors == 0:
            return docs_scores
        doc_chunks = [d for d in docs if d.metadata.is_chunk]
        if len(doc_chunks) == 0:
            return docs_scores
        window_ids_list = []
        id2metadata = {}
        # id -> highest score of a doc it appears in
        id2max_score: Dict[int | str, float] = {}
        for i, d in enumerate(docs):
            window_ids = d.metadata.window_ids
            if len(window_ids) == 0:
                window_ids = [d.id()]
            id2metadata.update({id: d.metadata for id in window_ids})

            id2max_score.update(
                {id: max(id2max_score.get(id, 0), scores[i]) for id in window_ids}
            )
            n = len(window_ids)
            chunk_idx = window_ids.index(d.id())
            neighbor_ids = window_ids[
                max(0, chunk_idx - neighbors) : min(n, chunk_idx + neighbors + 1)
            ]
            window_ids_list += [neighbor_ids]

        # window_ids could be from different docs,
        # and they may overlap, so we coalesce overlapping groups into
        # separate windows.
        window_ids_list = self.remove_overlaps(window_ids_list)
        final_docs = []
        final_scores = []
        for w in window_ids_list:
            metadata = copy.deepcopy(id2metadata[w[0]])
            metadata.window_ids = w
            document = Document(
                content="".join([d.content for d in self.get_documents_by_ids(w)]),
                metadata=metadata,
            )
            # make a fresh id since content is in general different
            document.metadata.id = ObjectRegistry.new_id()
            final_docs += [document]
            final_scores += [max(id2max_score[id] for id in w)]
        return list(zip(final_docs, final_scores))

    @staticmethod
    def remove_overlaps(windows: List[List[str]]) -> List[List[str]]:
        """
        Given a collection of windows, where each window is a sequence of ids,
        identify groups of overlapping windows, and for each overlapping group,
        order the chunk-ids using topological sort so they appear in the original
        order in the text.

        Args:
            windows (List[int|str]): List of windows, where each window is a
                sequence of ids.

        Returns:
            List[int|str]: List of windows, where each window is a sequence of ids,
                and no two windows overlap.
        """
        ids = set(id for w in windows for id in w)
        # id -> {win -> # pos}
        id2win2pos: Dict[str, Dict[int, int]] = {id: {} for id in ids}

        for i, w in enumerate(windows):
            for j, id in enumerate(w):
                id2win2pos[id][i] = j

        n = len(windows)
        # relation between windows:
        order = np.zeros((n, n), dtype=np.int8)
        for i, w in enumerate(windows):
            for j, x in enumerate(windows):
                if i == j:
                    continue
                if len(set(w).intersection(x)) == 0:
                    continue
                id = list(set(w).intersection(x))[0]  # any common id
                if id2win2pos[id][i] > id2win2pos[id][j]:
                    order[i, j] = -1  # win i is before win j
                else:
                    order[i, j] = 1  # win i is after win j

        # find groups of windows that overlap, like connected components in a graph
        groups = components(np.abs(order))

        # order the chunk-ids in each group using topological sort
        new_windows = []
        for g in groups:
            # find total ordering among windows in group based on order matrix
            # (this is a topological sort)
            _g = np.array(g)
            order_matrix = order[_g][:, _g]
            ordered_window_indices = topological_sort(order_matrix)
            ordered_window_ids = [windows[i] for i in _g[ordered_window_indices]]
            flattened = [id for w in ordered_window_ids for id in w]
            flattened_deduped = list(dict.fromkeys(flattened))
            # Note we are not going to split these, and instead we'll return
            # larger windows from concatenating the connected groups.
            # This ensures context is retained for LLM q/a
            new_windows += [flattened_deduped]

        return new_windows

    @abstractmethod
    def get_all_documents(self, where: str = "") -> List[Document]:
        """
        Get all documents in the current collection, possibly filtered by `where`.
        """
        pass

    @abstractmethod
    def get_documents_by_ids(self, ids: List[str]) -> List[Document]:
        """
        Get documents by their ids.
        Args:
            ids (List[str]): List of document ids.

        Returns:
            List[Document]: List of documents
        """
        pass

    @abstractmethod
    def delete_collection(self, collection_name: str) -> None:
        pass

    def show_if_debug(self, doc_score_pairs: List[Tuple[Document, float]]) -> None:
        if settings.debug:
            for i, (d, s) in enumerate(doc_score_pairs):
                print_long_text("red", "italic red", f"\nMATCH-{i}\n", d.content)
</file>

<file path="tests/main/test_doc_chat_agent.py">
import os
import warnings
from types import SimpleNamespace
from typing import List, Optional

import pandas as pd
import pytest

from langroid import ChatDocument
from langroid.agent.batch import run_batch_task_gen, run_batch_tasks
from langroid.agent.chat_agent import ChatAgent
from langroid.agent.special.doc_chat_agent import (
    CHUNK_ENRICHMENT_DELIMITER,
    ChunkEnrichmentAgentConfig,
    DocChatAgent,
    DocChatAgentConfig,
    RetrievalTool,
    _append_metadata_source,
)
from langroid.agent.special.lance_doc_chat_agent import LanceDocChatAgent
from langroid.agent.task import Task
from langroid.cachedb.redis_cachedb import RedisCacheConfig
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.language_models.mock_lm import MockLMConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import DocMetaData, Document, Entity
from langroid.parsing.parser import ParsingConfig, Splitter
from langroid.parsing.utils import generate_random_text
from langroid.prompts.prompts_config import PromptsConfig
from langroid.utils.configuration import Settings, set_global
from langroid.utils.constants import DONE
from langroid.utils.output.citations import extract_markdown_references
from langroid.utils.system import rmdir
from langroid.vector_store.base import VectorStore, VectorStoreConfig
from langroid.vector_store.chromadb import ChromaDB, ChromaDBConfig
from langroid.vector_store.lancedb import LanceDB, LanceDBConfig
from langroid.vector_store.qdrantdb import QdrantDB, QdrantDBConfig

embed_cfg = OpenAIEmbeddingsConfig(
    model_type="openai",
)


class MyDocMetaData(DocMetaData):
    id: str


class MyDoc(Document):
    content: str
    metadata: MyDocMetaData


documents: List[Document] = [
    Document(
        content="""
        In the year 2050, GPT10 was released. 
        
        In 2057, paperclips were seen all over the world. 
        
        Global warming was solved in 2060. 
        
        In 2045, the Tour de France was still going on.
        They were still using bicycles. 
        
        There was one more ice age in 2040.
        """,
        metadata=DocMetaData(source="wikipedia"),
    ),
    Document(
        content="""
    Winegarten is the capital of a new country called NeoGlobal.
        
    Charlie Foster was a great comedian.
        
    Charlie Foster was born in 1889.
        
    Beethoven was born in 1770.
        
    In the year 2050, all countries merged into Lithuania.
    """,
        metadata=DocMetaData(source="almanac"),
    ),
]

QUERY_EXPECTED_PAIRS = [
    ("what is the capital of NeoGlobal?", "Winegarten"),
    ("Who was Charlie Foster?", "comedian"),
    ("When was global warming solved?", "2060"),
    ("What do we know about paperclips?", "2057"),
]

for _ in range(100):
    documents.append(
        Document(
            content=generate_random_text(5),
            metadata=DocMetaData(source="random"),
        )
    )


@pytest.fixture(scope="function")
def vecdb(test_settings: Settings, request) -> VectorStore:
    set_global(test_settings)
    if request.param == "qdrant_local":
        qd_dir = ":memory:"
        qd_cfg = QdrantDBConfig(
            cloud=False,
            collection_name="test-" + embed_cfg.model_type,
            storage_path=qd_dir,
            embedding=embed_cfg,
        )
        qd = QdrantDB(qd_cfg)
        yield qd
        return

    if request.param == "qdrant_cloud":
        qd_dir = ".qdrant/cloud/test-" + embed_cfg.model_type
        qd_cfg_cloud = QdrantDBConfig(
            cloud=True,
            collection_name="test-" + embed_cfg.model_type,
            storage_path=qd_dir,
            embedding=embed_cfg,
        )
        qd_cloud = QdrantDB(qd_cfg_cloud)
        yield qd_cloud
        return

    if request.param == "chroma":
        cd_dir = ".chroma/" + embed_cfg.model_type
        rmdir(cd_dir)
        cd_cfg = ChromaDBConfig(
            collection_name="test-" + embed_cfg.model_type,
            storage_path=cd_dir,
            embedding=embed_cfg,
        )
        cd = ChromaDB(cd_cfg)
        yield cd
        rmdir(cd_dir)
        return

    if request.param == "lancedb":
        ldb_dir = ".lancedb/data/" + embed_cfg.model_type
        rmdir(ldb_dir)
        ldb_cfg = LanceDBConfig(
            cloud=False,
            collection_name="test-" + embed_cfg.model_type,
            storage_path=ldb_dir,
            embedding=embed_cfg,
            document_class=MyDoc,  # IMPORTANT, to ensure table has full schema!
        )
        ldb = LanceDB(ldb_cfg)
        yield ldb
        rmdir(ldb_dir)
        return


class _TestDocChatAgentConfig(DocChatAgentConfig):
    cross_encoder_reranking_model = ""
    n_query_rephrases = 0
    debug: bool = False
    stream: bool = True  # allow streaming where needed
    conversation_mode = True
    vecdb: VectorStoreConfig | None = None
    llm: OpenAIGPTConfig = OpenAIGPTConfig(
        stream=True,
        cache_config=RedisCacheConfig(fake=False),
        use_chat_for_completion=True,
    )

    n_similar_chunks = 3
    n_relevant_chunks = 3
    parsing: ParsingConfig = ParsingConfig(
        splitter=Splitter.SIMPLE,
    )

    prompts: PromptsConfig = PromptsConfig(
        max_tokens=1000,
    )


config = _TestDocChatAgentConfig()
set_global(Settings(cache=True))  # allow cacheing


@pytest.fixture(scope="function")
def agent(test_settings: Settings, vecdb) -> DocChatAgent:
    set_global(test_settings)
    agent = DocChatAgent(config)
    agent.vecdb = vecdb
    agent.ingest_docs(documents)
    os.environ["TOKENIZERS_PARALLELISM"] = "false"
    return agent


warnings.filterwarnings(
    "ignore",
    message="Token indices sequence length.*",
    # category=UserWarning,
    module="transformers",
)


@pytest.mark.parametrize(
    "vecdb", ["lancedb", "qdrant_local", "qdrant_cloud", "chroma"], indirect=True
)
@pytest.mark.parametrize("query, expected", QUERY_EXPECTED_PAIRS)
def test_doc_chat_agent_llm(test_settings: Settings, agent, query: str, expected: str):
    """
    Test directly using `llm_response` method of DocChatAgent.
    """

    # note that the (query, ans) pairs are accumulated into the
    # internal dialog history of the agent.
    set_global(test_settings)
    agent.config.conversation_mode = False
    result = agent.llm_response(query)
    ans = result.content
    refs = extract_markdown_references(ans)
    sources = extract_markdown_references(result.metadata.source)
    assert refs == sources
    expected = [e.strip() for e in expected.split(",")]
    assert all([e in ans for e in expected])


@pytest.mark.parametrize(
    "vecdb", ["lancedb", "qdrant_cloud", "qdrant_local", "chroma"], indirect=True
)
@pytest.mark.parametrize("query, expected", QUERY_EXPECTED_PAIRS)
@pytest.mark.asyncio
async def test_doc_chat_agent_llm_async(
    test_settings: Settings, agent, query: str, expected: str
):
    """
    Test directly using `llm_response_async` method of DocChatAgent.
    """

    # note that the (query, ans) pairs are accumulated into the
    # internal dialog history of the agent.
    set_global(test_settings)
    agent.config.conversation_mode = False
    ans = (await agent.llm_response_async(query)).content
    expected = [e.strip() for e in expected.split(",")]
    assert all([e in ans for e in expected])


@pytest.mark.parametrize("query, expected", QUERY_EXPECTED_PAIRS)
@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma"], indirect=True)
def test_doc_chat_agent_task(test_settings: Settings, agent, query, expected):
    """
    Test DocChatAgent wrapped in a Task.
    """
    set_global(test_settings)
    agent.config.conversation_mode = True
    task = Task(agent, restart=True)
    task.init()
    # LLM responds to Sys msg, initiates conv, says thank you, etc.
    task.step()

    agent.default_human_response = query
    task.step()  # user asks query
    task.step()  # LLM answers
    ans = task.pending_message.content.lower()
    expected = [e.strip() for e in expected.split(",")]
    assert all([e.lower() in ans for e in expected])
    assert task.pending_message.metadata.sender == Entity.LLM


class RetrievalAgent(DocChatAgent):
    def llm_response(
        self,
        message: None | str | ChatDocument = None,
    ) -> Optional[ChatDocument]:
        # override the DocChatAgent's LLM response,
        # to just use ChatAgent's LLM response - this ensures that the system msg
        # is respected, and it uses the `retrieval_tool` as instructed.
        return ChatAgent.llm_response(self, message)


@pytest.fixture(scope="function")
def retrieval_agent(test_settings: Settings, vecdb) -> RetrievalAgent:
    set_global(test_settings)
    agent = RetrievalAgent(config)
    agent.vecdb = vecdb
    agent.ingest_docs(documents)
    os.environ["TOKENIZERS_PARALLELISM"] = "false"
    return agent


@pytest.mark.parametrize("vecdb", ["qdrant_local"], indirect=True)
@pytest.mark.parametrize(
    "query, expected",
    [
        (
            """
            Use the retrieval_tool to find out the capital of
            the fictional country NeoGlobal.
            """,
            "Winegarten",
        ),
        (
            "Use the retrieval_tool to answer this:" " who was Charlie Foster?",
            "comedian",
        ),
    ],
)
def test_retrieval_tool(
    test_settings: Settings, retrieval_agent, query: str, expected: str
):
    set_global(test_settings)
    retrieval_agent.enable_message(RetrievalTool)
    task = Task(
        retrieval_agent,
        restart=True,
        interactive=False,
        system_message=f"""
        To answer user's query, use the `retrieval_tool` to retrieve relevant passages, 
        and ONLY then answer the query. 
        In case the query is simply a topic or search phrase, 
        guess what the user may want to know, and formulate it as a 
        question to be answered, and use this as the `query` field in the 
        `retrieval_tool`. 
                
        When you are ready to show your answer, say {DONE}, followed by the answer.
        """,
    )
    # 3 turns:
    # 1. LLM gen `retrieval_tool` request
    # 2. Agent gen `retrieval_tool` response (i.e. returns relevant passages)
    # 3. LLM gen answer based on passages
    ans = task.run(query, turns=3).content
    expected = [e.strip().lower() for e in expected.split(",")]
    assert all([e in ans.lower() for e in expected])


@pytest.fixture(scope="function")
def new_agent(test_settings: Settings, vecdb) -> DocChatAgent:
    set_global(test_settings)
    agent = DocChatAgent(config)
    agent.vecdb = vecdb
    agent.ingest_docs(documents)
    os.environ["TOKENIZERS_PARALLELISM"] = "false"
    return agent


@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma"], indirect=True)
@pytest.mark.parametrize("conv_mode", [True, False])
@pytest.mark.parametrize("retain_context", [True, False])
def test_doc_chat_followup(
    test_settings: Settings, new_agent, conv_mode: bool, retain_context: bool
):
    """
    Test whether follow-up question is handled correctly.
    """
    new_agent.config.conversation_mode = conv_mode
    new_agent.config.retain_context = retain_context
    set_global(test_settings)
    task = Task(
        new_agent,
        interactive=False,
        restart=False,  # don't restart, so we can ask follow-up questions
        done_if_response=[Entity.LLM],
        done_if_no_response=[Entity.LLM],
    )
    result = task.run("Who was Charlie Foster?")
    assert "comedian" in result.content.lower()

    result = task.run("When was he born?")
    assert "1889" in result.content

    # test retain_context when conv_mode is True
    new_agent.init_state()
    question = "Who was Charlie Foster?"
    response = new_agent.llm_response(question)
    assert "comedian" in response.content.lower()
    if conv_mode:
        if retain_context:
            # context is retained, i.e.,
            # the user msg has both extracted chunks and the question itself
            assert len(new_agent.message_history[-2].content) > 2 * len(question)
        else:
            # context is not retained, i.e., the user msg has only the question
            assert len(new_agent.message_history[-2].content) < len(question) + 10


@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma"], indirect=True)
@pytest.mark.parametrize("conv_mode", [True, False])
@pytest.mark.parametrize("retain_context", [True, False])
@pytest.mark.asyncio
async def test_doc_chat_followup_async(
    test_settings: Settings,
    new_agent,
    conv_mode: bool,
    retain_context: bool,
):
    """
    Test whether follow-up question is handled correctly (in async mode).
    """
    new_agent.config.conversation_mode = conv_mode
    new_agent.config.retain_context = retain_context
    set_global(test_settings)
    task = Task(
        new_agent,
        interactive=False,
        restart=False,  # don't restart, so we can ask follow-up questions
        done_if_response=[Entity.LLM],
        done_if_no_response=[Entity.LLM],
    )
    result = await task.run_async("Who was Charlie Foster?")
    assert "comedian" in result.content.lower()

    result = await task.run_async("When was he born?")
    assert "1889" in result.content

    # test retain_context when conv_mode is True
    new_agent.init_state()
    question = "Who was Charlie Foster?"
    response = await new_agent.llm_response_async(question)
    assert "comedian" in response.content.lower()
    if conv_mode:
        if retain_context:
            # context is retained, i.e.,
            # the user msg has both extracted chunks and the question itself
            assert len(new_agent.message_history[-2].content) > 2 * len(question)
        else:
            # context is not retained, i.e., the user msg has only the question
            assert len(new_agent.message_history[-2].content) < len(question) + 10


# setup config for retrieval test, with n_neighbor_chunks=2
# and parser.n_neighbor_ids = 5
class _MyDocChatAgentConfig(DocChatAgentConfig):
    cross_encoder_reranking_model = ""
    n_query_rephrases = 0
    n_neighbor_chunks = 2
    debug: bool = False
    stream: bool = True  # allow streaming where needed
    conversation_mode = True
    vecdb: VectorStoreConfig | None = None

    llm: OpenAIGPTConfig = OpenAIGPTConfig(
        stream=True,
        cache_config=RedisCacheConfig(fake=False),
        use_chat_for_completion=True,
    )

    n_similar_chunks = 2
    n_relevant_chunks = 2
    parsing: ParsingConfig = ParsingConfig(
        splitter=Splitter.SIMPLE,
        n_neighbor_ids=5,
    )


@pytest.mark.parametrize("vecdb", ["lancedb", "chroma", "qdrant_local"], indirect=True)
@pytest.mark.parametrize(
    "splitter", [Splitter.PARA_SENTENCE, Splitter.SIMPLE, Splitter.TOKENS]
)
@pytest.mark.parametrize("conv_mode", [True, False])
def test_doc_chat_retrieval(
    test_settings: Settings, vecdb, splitter: Splitter, conv_mode: bool
):
    """
    Test window retrieval of relevant doc-chunks.
    Check that we are retrieving 2 neighbors around each match.
    """
    agent = DocChatAgent(
        _MyDocChatAgentConfig(
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                splitter=splitter,
            ),
        )
    )
    agent.config.conversation_mode = conv_mode
    agent.vecdb = vecdb

    set_global(test_settings)

    phrases = SimpleNamespace(
        CATS="Cats are quiet and clean.",
        DOGS="Dogs are loud and messy.",
        PIGS="Pigs cannot fly.",
        GIRAFFES="Giraffes are tall and vegetarian.",
        BATS="Bats are blind.",
        COWS="Cows are peaceful.",
        GIRAFFES2="Giraffes are really strange animals.",
        HYENAS="Hyenas are dangerous and fast.",
        ZEBRAS="Zebras are bizarre with stripes.",
    )
    text = "\n\n".join(vars(phrases).values())
    agent.clear()
    agent.ingest_docs([Document(content=text, metadata={"source": "animals"})])
    results = agent.get_relevant_chunks("What are giraffes like?")

    # All phrases except the CATS phrase should be in the results
    # since they are all within 2 chunks of a giraffe phrase.
    # (The CAT phrase is 3 chunks away, so it should not be in the results.)
    all_but_cats = [p for p in vars(phrases).values() if "Cats" not in p]
    # check that each phrases occurs in exactly one result
    assert (
        sum(p in r.content for p in all_but_cats for r in results)
        == len(vars(phrases)) - 1
    )

    agent.clear()


@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma"], indirect=True)
def test_doc_chat_rerank_diversity(test_settings: Settings, vecdb):
    """
    Test that reranking by diversity works.
    """

    cfg = _MyDocChatAgentConfig(
        n_neighbor_chunks=0,
    )
    cfg.n_similar_chunks = 8
    cfg.n_relevant_chunks = 8
    agent = DocChatAgent(cfg)
    agent.vecdb = vecdb

    set_global(test_settings)

    phrases = SimpleNamespace(
        g1="Giraffes are tall.",
        g2="Giraffes are vegetarian.",
        g3="Giraffes are strange.",
        g4="Giraffes are fast.",
        g5="Giraffes are known to be tall.",
        g6="Giraffes are considered strange.",
        g7="Giraffes move fast.",
        g8="Giraffes are definitely vegetarian.",
    )
    docs = [
        Document(content=p, metadata=DocMetaData(source="user"))
        for p in vars(phrases).values()
    ]
    reranked = agent.rerank_with_diversity(docs)

    # assert that each phrase tall, vegetarian, strange, fast
    # occurs exactly once in top 4 phrases
    for p in ["tall", "vegetarian", "strange", "fast"]:
        assert sum(p in r.content for r in reranked[:4]) == 1


@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma"], indirect=True)
def test_reciprocal_rank_fusion(test_settings: Settings, vecdb):
    """
    Test that RRF (Reciprocal Rank Fusion) works.
    """

    cfg = _MyDocChatAgentConfig(
        n_neighbor_chunks=0,
        cross_encoder_reranking_model="",
        use_bm25_search=True,
        use_fuzzy_match=True,
        use_reciprocal_rank_fusion=True,
        parsing=ParsingConfig(
            splitter=Splitter.SIMPLE,
            n_neighbor_ids=5,
            n_similar_docs=None,  # Ensure we don't trigger backward compatibility
        ),
    )
    cfg.n_similar_chunks = 3
    cfg.n_relevant_chunks = 3
    agent = DocChatAgent(cfg)
    agent.vecdb = vecdb

    set_global(test_settings)

    phrases = SimpleNamespace(
        g1="time flies like an arrow",
        g2="a fly is very small",
        g3="we like apples",
        g4="the river bank got flooded",
        g5="there was a run on the bank",
        g6="JPMChase is a bank",
        g7="Chase is one of the banks",
    )
    docs = [
        Document(content=p, metadata=DocMetaData(source="user"))
        for p in vars(phrases).values()
    ]
    agent.ingest_docs(docs, split=False)
    chunks = agent.get_relevant_chunks("I like to chase banks")
    assert len(chunks) == 3
    assert any(phrases.g7 in chunk.content for chunk in chunks)
    assert any(phrases.g6 in chunk.content for chunk in chunks)

    chunks = agent.get_relevant_chunks("I like oranges")
    assert len(chunks) == 3
    assert any(phrases.g3 in chunk.content for chunk in chunks)
    assert any(phrases.g1 in chunk.content for chunk in chunks)


@pytest.mark.parametrize("vecdb", ["qdrant_local", "chroma"], indirect=True)
def test_doc_chat_rerank_periphery(test_settings: Settings, vecdb):
    """
    Test that reranking to periphery works.
    """

    cfg = _MyDocChatAgentConfig(
        n_neighbor_chunks=0,
    )
    cfg.n_similar_chunks = 8
    cfg.n_relevant_chunks = 8
    agent = DocChatAgent(cfg)
    agent.vecdb = vecdb

    set_global(test_settings)

    docs = [
        Document(content=str(i), metadata=DocMetaData(source="user")) for i in range(10)
    ]
    reranked = agent.rerank_to_periphery(docs)
    numbers = [int(d.content) for d in reranked]
    assert numbers == [0, 2, 4, 6, 8, 9, 7, 5, 3, 1]


data = {
    "id": ["A100", "B200", "C300", "D400", "E500"],
    "year": [1955, 1977, 1989, 2001, 2015],
    "author": [
        "Isaac Maximov",
        "J.K. Bowling",
        "George Morewell",
        "J.R.R. Bolshine",
        "Hugo Wellington",
    ],
    "title": [
        "The Last Question",
        "Harry Potter",
        "2084",
        "The Lord of the Rings",
        "The Time Machine",
    ],
    "summary": [
        "A story exploring the concept of entropy and the end of the universe.",
        "The adventures of a young wizard and his friends at a magical school.",
        "A dystopian novel about a totalitarian regime and the concept of freedom.",
        "An epic fantasy tale of a quest to destroy a powerful ring.",
        "A science fiction novel about time travel and its consequences.",
    ],
}

df = pd.DataFrame(data)


@pytest.mark.parametrize("metadata", [[], ["id", "year"], ["year"]])
@pytest.mark.parametrize("vecdb", ["lancedb", "qdrant_local", "chroma"], indirect=True)
def test_doc_chat_ingest_df(
    test_settings: Settings,
    vecdb,
    metadata,
):
    """Check we can ingest from a dataframe and run queries."""
    set_global(test_settings)

    sys_msg = "You will be asked to answer questions based on short book descriptions."
    agent_cfg = DocChatAgentConfig(
        system_message=sys_msg,
        cross_encoder_reranking_model="",
    )
    if isinstance(vecdb, LanceDB):
        agent = LanceDocChatAgent(agent_cfg)
    else:
        agent = DocChatAgent(agent_cfg)
    agent.vecdb = vecdb
    agent.clear()
    agent.ingest_dataframe(df, content="summary", metadata=metadata)
    response = agent.llm_response(
        """
        What concept does the book dealing with the end of the universe explore?
        """
    )
    assert "entropy" in response.content.lower()


@pytest.mark.parametrize("metadata", [[], ["id", "year"], ["year"]])
@pytest.mark.parametrize("vecdb", ["lancedb", "qdrant_local", "chroma"], indirect=True)
def test_doc_chat_add_content_fields(
    test_settings: Settings,
    vecdb,
    metadata,
):
    """Check we can ingest from a dataframe,
    with additional fields inserted into content,
    and run queries that refer to those fields."""

    set_global(test_settings)

    sys_msg = "You will be asked to answer questions based on short movie descriptions."
    agent_cfg = DocChatAgentConfig(
        system_message=sys_msg,
        cross_encoder_reranking_model="",
        add_fields_to_content=["year", "author", "title"],
    )
    if isinstance(vecdb, LanceDB):
        agent = LanceDocChatAgent(agent_cfg)
    else:
        agent = DocChatAgent(agent_cfg)
    agent.vecdb = vecdb
    agent.clear()
    agent.ingest_dataframe(df, content="summary", metadata=metadata)
    response = agent.llm_response(
        """
        What was the title of the book by George Morewell and when was it written?
        """
    )
    assert "2084" in response.content and "1989" in response.content


@pytest.mark.parametrize("vecdb", ["lancedb", "chroma", "qdrant_local"], indirect=True)
@pytest.mark.parametrize(
    "splitter", [Splitter.PARA_SENTENCE, Splitter.SIMPLE, Splitter.TOKENS]
)
def test_doc_chat_incremental_ingest(
    test_settings: Settings, vecdb, splitter: Splitter
):
    """
    Check that we are able ingest documents incrementally.
    """
    agent = DocChatAgent(
        _MyDocChatAgentConfig(
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                splitter=splitter,
            ),
        )
    )
    agent.vecdb = vecdb

    set_global(test_settings)

    phrases = SimpleNamespace(
        CATS="Cats are quiet and clean.",
        DOGS="Dogs are loud and messy.",
        PIGS="Pigs cannot fly.",
        GIRAFFES="Giraffes are tall and vegetarian.",
        BATS="Bats are blind.",
        COWS="Cows are peaceful.",
        GIRAFFES2="Giraffes are really strange animals.",
        HYENAS="Hyenas are dangerous and fast.",
        ZEBRAS="Zebras are bizarre with stripes.",
    )
    sentences = list(vars(phrases).values())
    docs1 = [
        Document(content=s, metadata=dict(source="animals")) for s in sentences[:4]
    ]

    docs2 = [
        Document(content=s, metadata=dict(source="animals")) for s in sentences[4:]
    ]
    agent.ingest_docs(docs1)
    assert agent.vecdb.config.collection_name in agent.vecdb.list_collections(True)
    agent.ingest_docs(docs2)
    results = agent.get_relevant_chunks("What do we know about Pigs?")
    assert any("fly" in r.content for r in results)

    results = agent.get_relevant_chunks("What do we know about Hyenas?")
    assert any("fast" in r.content for r in results) or any(
        "dangerous" in r.content for r in results
    )


@pytest.mark.parametrize("vecdb", ["chroma", "qdrant_local"], indirect=True)
@pytest.mark.parametrize(
    "splitter", [Splitter.PARA_SENTENCE, Splitter.SIMPLE, Splitter.TOKENS]
)
@pytest.mark.parametrize("source", ["bytes", "path"])
def test_doc_chat_ingest_paths(
    test_settings: Settings,
    vecdb,
    splitter: Splitter,
    source,
):
    """
    Test DocChatAgent.ingest_doc_paths
    """
    agent = DocChatAgent(
        _MyDocChatAgentConfig(
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                splitter=splitter,
            ),
        )
    )
    agent.vecdb = vecdb

    set_global(test_settings)

    phrases = SimpleNamespace(
        CATS="Cats are quiet and clean.",
        DOGS="Dogs are loud and messy.",
        PIGS="Pigs cannot fly.",
        GIRAFFES="Giraffes are tall and vegetarian.",
        BATS="Bats are blind.",
        COWS="Cows are peaceful.",
        GIRAFFES2="Giraffes are really strange animals.",
        HYENAS="Hyenas are dangerous and fast.",
        ZEBRAS="Zebras are bizarre with stripes.",
    )
    sentences = list(vars(phrases).values())

    # create temp files containing each sentence, using tempfile pkg
    import tempfile

    for s in sentences:
        if source == "path":
            with tempfile.NamedTemporaryFile(mode="w", delete=False) as f:
                f.write(s)
                f.close()
                agent.ingest_doc_paths([f.name])
        else:
            agent.ingest_doc_paths([s.encode()])

    results = agent.get_relevant_chunks("What do we know about Pigs?")
    assert any("fly" in r.content for r in results)

    results = agent.get_relevant_chunks("What do we know about Hyenas?")
    assert any("fast" in r.content for r in results) or any(
        "dangerous" in r.content for r in results
    )


@pytest.mark.xfail(
    condition=lambda: "lancedb" in vecdb,
    reason="LanceDB may fail due to unknown flakiness",
    run=True,
    strict=False,
)
@pytest.mark.parametrize("vecdb", ["chroma", "lancedb", "qdrant_local"], indirect=True)
@pytest.mark.parametrize(
    "splitter", [Splitter.PARA_SENTENCE, Splitter.SIMPLE, Splitter.TOKENS]
)
@pytest.mark.parametrize("metadata_dict", [True, False])
def test_doc_chat_ingest_path_metadata(
    test_settings: Settings,
    vecdb,
    splitter: Splitter,
    metadata_dict: bool,  # whether metadata is dict or DocMetaData
):
    """
    Test DocChatAgent.ingest_doc_paths, with metadata
    """
    agent = DocChatAgent(
        _MyDocChatAgentConfig(
            n_similar_chunks=3,
            n_relevant_chunks=3,
            parsing=ParsingConfig(
                splitter=splitter,
            ),
        )
    )
    agent.vecdb = vecdb

    set_global(test_settings)

    # create a list of dicts, each containing a sentence about an animal
    # and a metadata field indicating the animal's name, species, and diet
    animals = [
        {
            "content": "Cats are quiet and clean.",
            "metadata": {
                "name": "cat",
                "species": "feline",
                "diet": "carnivore",
            },
        },
        {
            "content": "Dogs are loud and messy.",
            "metadata": {
                "name": "dog",
                "species": "canine",
                "diet": "omnivore",
            },
        },
        {
            "content": "Pigs cannot fly.",
            "metadata": {
                "name": "pig",
                "species": "porcine",
                "diet": "omnivore",
            },
        },
    ]

    class AnimalMetadata(DocMetaData):
        name: str
        species: str
        diet: str

    animal_metadata_list = [AnimalMetadata(**a["metadata"]) for a in animals]

    # put each animal content in a separate file
    import tempfile

    for animal in animals:
        with tempfile.NamedTemporaryFile(mode="w", delete=False) as f:
            f.write(animal["content"])
            f.close()
            animal["path"] = f.name

    agent.clear()
    # ingest with per-file metadata
    agent.ingest_doc_paths(
        [a["path"] for a in animals],
        metadata=(
            [a["metadata"] for a in animals] if metadata_dict else animal_metadata_list
        ),
    )
    assert agent.vecdb.config.collection_name in agent.vecdb.list_collections(True)

    results = agent.get_relevant_chunks("What do we know about Pigs?")
    assert any("fly" in r.content for r in results)
    # assert about metadata
    assert any("porcine" in r.metadata.species for r in results)

    # clear out the agent docs and the underlying vecdb collection
    agent.clear()

    # ingest with single metadata for ALL animals
    agent.ingest_doc_paths(
        [a["path"] for a in animals],
        metadata=(
            dict(type="animal", category="living")
            if metadata_dict
            else DocMetaData(type="animal", category="living")
        ),
    )
    assert agent.vecdb.config.collection_name in agent.vecdb.list_collections(True)

    results = agent.get_relevant_chunks("What do we know about dogs?")
    assert any("messy" in r.content for r in results)
    assert all(r.metadata.type == "animal" for r in results)

    agent.clear()


@pytest.mark.xfail(
    condition=lambda: "lancedb" in vecdb,
    reason="LanceDB may fail due to unknown flakiness",
    run=True,
    strict=False,
)
@pytest.mark.parametrize("vecdb", ["chroma", "lancedb", "qdrant_local"], indirect=True)
def test_doc_chat_batch(test_settings: Settings, vecdb):
    """
    Test batch run of queries to multiple instances of DocChatAgent,
    which share the same vector-db.
    """

    set_global(test_settings)
    doc_agents = [DocChatAgent(_MyDocChatAgentConfig()) for _ in range(2)]

    # attach a common vector-db to all agents
    for a in doc_agents:
        a.vecdb = vecdb

    docs = [
        Document(
            content="""
            Filidor Dinkoyevsky wrote a book called "The Sisters Karenina".
            It is loosely based on the life of the Anya Karvenina,
            from a book by Tolsitoy a few years earlier.
            """,
            metadata=DocMetaData(source="tweakipedia"),
        ),
        Document(
            content="""
            The novel "Searching for Sebastian Night" was written by Vlad Nabikov.
            It is an intriguing tale about the author's search for his lost brother,
            and is a meditation on the nature of loss and memory.
            """,
            metadata=DocMetaData(source="tweakipedia"),
        ),
    ]

    # note we only need to ingest docs using one of the agents,
    # since they share the same vector-db
    doc_agents[0].ingest_docs(docs, split=False)

    questions = [
        "What book did Vlad Nabikov write?",
        "Who wrote the book about the Karenina sisters?",
    ]

    # (1) test that we can create a single task and use run_batch_tasks
    task = Task(doc_agents[0], name="DocAgent", interactive=False, single_round=True)
    results = run_batch_tasks(task, questions)

    assert "Sebastian" in results[0].content
    assert "Dinkoyevsky" in results[1].content

    # (2) test that we can create a task-generator fn and use run_batch_task_gen

    # create a task-generator fn, to create one per question
    def gen_task(i: int):
        return Task(
            doc_agents[i],
            name=f"DocAgent-{i}",
            interactive=False,
            single_round=True,
        )

    results = run_batch_task_gen(gen_task, questions)

    assert "Sebastian" in results[0].content
    assert "Dinkoyevsky" in results[1].content

    for a in doc_agents:
        a.clear()


@pytest.mark.parametrize("enrichment, expect_cleaned", [(True, True), (False, False)])
def test_remove_enrichments(
    enrichment: bool,
    expect_cleaned: bool,
) -> None:
    """
    Test removal of generated enrichments from documents both if
    they have enrichment or not.
    """

    original_content = "This is the original content"
    sample_docs = [
        Document(
            content=f"""
                {original_content}\n\n{CHUNK_ENRICHMENT_DELIMITER}
                Some generated enrichments
            """,
            metadata=DocMetaData(source="one", has_enrichment=True),
        ),
        Document(
            content="This is a normal document", metadata=DocMetaData(source="twp")
        ),
    ]

    enrichment_config = ChunkEnrichmentAgentConfig() if enrichment else None
    agent = DocChatAgent(
        _TestDocChatAgentConfig(chunk_enrichment_config=enrichment_config)
    )

    cleaned_docs = agent.remove_chunk_enrichments(sample_docs)

    assert len(cleaned_docs) == len(sample_docs)
    # Document with questions should be cleaned
    assert (cleaned_docs[0].content.strip() == original_content) is expect_cleaned
    # Normal document should be unchanged
    assert cleaned_docs[1].content == sample_docs[1].content


def test_add_enrichments() -> None:
    """Test generation of enrichments for documents"""

    sample_docs = [
        Document(content="Doc 1", metadata=DocMetaData(source="one")),
        Document(content="Doc 2", metadata=DocMetaData(source="two")),
    ]

    enrichment_agent_config = ChunkEnrichmentAgentConfig(
        llm=MockLMConfig(
            response_fn=lambda x: "Keyword1, keyword2 " + x,
        ),
        enrichment_prompt_fn=lambda x: "Add keywords to " + x,
    )
    agent = DocChatAgent(
        _TestDocChatAgentConfig(
            chunk_enrichment_config=enrichment_agent_config,
        )
    )

    augmented_docs = agent.enrich_chunks(sample_docs)

    assert len(augmented_docs) == len(sample_docs)
    for doc in augmented_docs:
        assert CHUNK_ENRICHMENT_DELIMITER in doc.content
        assert doc.metadata.has_enrichment
        # Original content should be preserved before marker
        assert (
            doc.content.split(CHUNK_ENRICHMENT_DELIMITER)[0].strip()
            in sample_docs[0].content + sample_docs[1].content
        )
        # Should have enrichment after marker
        enrichment_part = doc.content.split(CHUNK_ENRICHMENT_DELIMITER)[1].strip()
        assert len(enrichment_part) > 0


def test_enrichments_disabled() -> None:
    """Test that enrichments are not generated when disabled"""

    sample_docs = [Document(content="Doc 1", metadata=DocMetaData(source="one"))]

    agent = DocChatAgent(_TestDocChatAgentConfig(chunk_enrichment_config=None))

    processed_docs = agent.enrich_chunks(sample_docs)
    assert len(processed_docs) == len(sample_docs)
    assert processed_docs[0].content == sample_docs[0].content
    assert not hasattr(processed_docs[0].metadata, "has_enrichment")

    cleaned_docs = agent.remove_chunk_enrichments(sample_docs)
    assert len(cleaned_docs) == len(sample_docs)
    assert cleaned_docs[0].content == sample_docs[0].content


@pytest.mark.parametrize(
    "vecdb",
    ["lancedb", "qdrant_local", "qdrant_cloud", "chroma"],
    indirect=True,
)
def test_enrichments_integration(vecdb: VectorStore) -> None:
    """Integration test for chunk-enrichments in RAG pipeline"""

    sample_docs = [
        Document(
            content="Blood Test name: BUN",
            # Blood Urea Nitrogen test for kidney function
            metadata=DocMetaData(source="blood-work", is_chunk=True),
        ),
        Document(
            content="Blood test name: BNP",
            # B-type natriuretic peptide test for heart function
            metadata=DocMetaData(source="blood-work", is_chunk=True),
        ),
    ]

    # add 20 random docs
    sample_docs.extend(
        [
            Document(
                content=generate_random_text(5),
                metadata=DocMetaData(source="blood-work", is_chunk=True),
            )
            for _ in range(20)
        ]
    )

    agent = DocChatAgent(
        _TestDocChatAgentConfig(
            rerank_diversity=False,
            rerank_periphery=False,
            relevance_extractor_config=None,
            conversation_mode=False,
            chunk_enrichment_config=ChunkEnrichmentAgentConfig(
                system_message="""
                You are an expert in medical tests, well-versed in 
                test names and which organs they are associated with.
                """,
                enrichment_prompt_fn=lambda x: (
                    f"""
                    Which organ function or health is the following blood test
                    most closely associated with? 
                    (Answer in ONE WORD; if unsure, say UNKNOWN)
                    
                    {x}
                    """
                ),
            ),
        )
    )
    agent.vecdb = vecdb
    agent.augment_system_message(
        """
        
        You are an expert in medical tests, well-versed in 
        test names and which organs they are associated with.
        
        You must answer questions based on the provided document-extracts,
        combined with your medical knowledge.
        """
    )
    # clear existing docs
    agent.clear()
    agent.ingest_docs(sample_docs)

    # Verify questions were generated during ingestion
    all_docs = agent.vecdb.get_all_documents()
    assert all(
        CHUNK_ENRICHMENT_DELIMITER in doc.content for doc in all_docs
    ), "Generated enrichments not found in all docs"

    # retrieve docs they should not contain generated enrichments
    doc1 = agent.answer_from_docs("Which medical test is kidney-related?")
    doc2 = agent.answer_from_docs("Which blood test is related to heart-function?")

    # they are documents enriched with keywords
    # but the keywords should be removed on retrieval
    assert (
        CHUNK_ENRICHMENT_DELIMITER not in doc1.content
    ), f"Doc 1 has not been cleaned: {doc1.content}"
    assert (
        CHUNK_ENRICHMENT_DELIMITER not in doc2.content
    ), f"Doc 2 has not been cleaned: {doc2.content}"

    # check that the right content is in the docs
    assert "BUN" in doc1.content
    assert "BNP" in doc2.content


@pytest.mark.parametrize("vecdb", ["chroma", "lancedb", "qdrant_local"], indirect=True)
def test_doc_chat_agent_ingest(test_settings: Settings, vecdb):
    agent = DocChatAgent(_MyDocChatAgentConfig())
    agent.vecdb = vecdb
    agent.clear()  # clear the collection in the vector store

    # Base documents with simple metadata
    docs = [
        Document(content="Doc 1", metadata=DocMetaData(source="original1")),
        Document(content="Doc 2", metadata=DocMetaData(source="original2")),
    ]

    # Test case 1: List of metadata dicts
    docs_copy = [d.copy() for d in docs]
    meta_list = [
        {"category": "A", "source": "new1"},
        {"category": "B", "source": "new2"},
    ]
    agent.ingest_docs(docs_copy, metadata=meta_list)
    stored = agent.vecdb.get_all_documents()
    assert set([d.metadata.category for d in stored]) == {"A", "B"}

    assert set(d.metadata.source for d in stored) == {
        _append_metadata_source("original1", "new1"),
        _append_metadata_source("original2", "new2"),
    }

    agent.clear()

    # Test case 2: Single metadata dict for all docs
    docs_copy = [d.copy() for d in docs]
    meta_dict = {"category": "common", "source": "new"}
    agent.ingest_docs(docs_copy, metadata=meta_dict)
    stored = agent.vecdb.get_all_documents()
    assert all(d.metadata.category == "common" for d in stored)

    assert set(d.metadata.source for d in stored) == {
        _append_metadata_source("original1", "new"),
        _append_metadata_source("original2", "new"),
    }
    agent.clear()

    # Test case 3: List of DocMetaData
    docs_copy = [d.copy() for d in docs]
    meta_docs = [
        DocMetaData(category="X", source="new1"),
        DocMetaData(category="Y", source="new2"),
    ]
    agent.ingest_docs(docs_copy, metadata=meta_docs)
    stored = agent.vecdb.get_all_documents()
    assert set([d.metadata.category for d in stored]) == {"X", "Y"}

    assert set(d.metadata.source for d in stored) == {
        _append_metadata_source("original1", "new1"),
        _append_metadata_source("original2", "new2"),
    }
    agent.clear()

    # Test case 4: Single DocMetaData for all docs
    docs_copy = [d.copy() for d in docs]
    meta_doc = DocMetaData(category="shared", source="new")
    agent.ingest_docs(docs_copy, metadata=meta_doc)
    stored = agent.vecdb.get_all_documents()
    assert all(d.metadata.category == "shared" for d in stored)

    assert set(d.metadata.source for d in stored) == {
        _append_metadata_source("original1", "new"),
        _append_metadata_source("original2", "new"),
    }
    agent.clear()


@pytest.mark.parametrize("vecdb", ["chroma", "lancedb", "qdrant_local"], indirect=True)
def test_doc_chat_agent_ingest_paths(test_settings: Settings, vecdb):
    agent = DocChatAgent(_MyDocChatAgentConfig())
    agent.vecdb = vecdb
    agent.clear()  # clear the collection in the vector store

    # Create temp files and byte contents
    import tempfile

    # Create two temp files
    file_contents = ["Content of file 1", "Content of file 2"]
    temp_files = []
    for content in file_contents:
        with tempfile.NamedTemporaryFile(mode="w", delete=False) as f:
            f.write(content)
            temp_files.append(f.name)

    # Create two byte contents
    byte_contents = [b"Bytes content 1", b"Bytes content 2"]

    # Test case 1: List of metadata dicts
    paths = temp_files + byte_contents
    meta_list = [
        {"category": "file", "source": "src1"},
        {"category": "file", "source": "src2"},
        {"category": "bytes", "source": "src3"},
        {"category": "bytes", "source": "src4"},
    ]
    # ingest with no additional metadata so we can get the original source
    docs = agent.ingest_doc_paths(paths)
    orig_sources = [d.metadata.source for d in docs]
    agent.clear()
    # now ingest with additional metadata
    agent.ingest_doc_paths(paths, metadata=meta_list)
    stored = agent.vecdb.get_all_documents()

    # Create sets of expected and actual metadata
    expected_categories = {"file", "bytes"}
    expected_sources = {
        _append_metadata_source(s, f"src{i+1}") for i, s in enumerate(orig_sources)
    }

    actual_categories = {d.metadata.category for d in stored}
    actual_sources = {d.metadata.source for d in stored}

    assert expected_categories == actual_categories
    assert expected_sources == actual_sources
    agent.clear()

    # Test case 2: Single metadata dict
    meta_dict = {"category": "common", "source": "shared"}
    # now ingest with additional metadata
    agent.ingest_doc_paths(paths, metadata=meta_dict)
    stored = agent.vecdb.get_all_documents()

    assert all(d.metadata.category == "common" for d in stored)
    expected_sources = {_append_metadata_source(s, "shared") for s in orig_sources}
    actual_sources = {d.metadata.source for d in stored}
    assert expected_sources == actual_sources
    agent.clear()

    # Test case 3: List of DocMetaData
    meta_docs = [DocMetaData(category="X", source=f"src{i}") for i in range(len(paths))]

    # now ingest with metadata
    agent.ingest_doc_paths(paths, metadata=meta_docs)
    stored = agent.vecdb.get_all_documents()

    expected_categories = {"X"}
    expected_sources = {
        _append_metadata_source(s, f"src{i}") for i, s in enumerate(orig_sources)
    }

    actual_categories = {d.metadata.category for d in stored}
    actual_sources = {d.metadata.source for d in stored}

    assert expected_categories == actual_categories
    assert expected_sources == actual_sources
    agent.clear()

    # Test case 4: Single DocMetaData
    meta_doc = DocMetaData(category="shared", source="new")
    docs = agent.ingest_doc_paths(paths, metadata=meta_doc)
    stored = agent.vecdb.get_all_documents()

    assert all(d.metadata.category == "shared" for d in stored)
    expected_sources = {_append_metadata_source(s, "new") for s in orig_sources}
    actual_sources = {d.metadata.source for d in stored}
    assert expected_sources == actual_sources
    agent.clear()

    # Cleanup temp files
    for f in temp_files:
        os.remove(f)
</file>

<file path="tests/main/test_done_sequences_dsl.py">
"""Tests for done sequences DSL integration with Task."""

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task, TaskConfig
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.mock_lm import MockLMConfig
from langroid.utils.configuration import Settings, set_global


class SimpleTool(ToolMessage):
    request: str = "simple_tool"
    purpose: str = "A simple tool for testing"
    value: str

    def handle(self) -> str:
        """Handle the tool and return a response"""
        return f"Processed value: {self.value}"


def test_dsl_simple_pattern(test_settings: Settings):
    """Test that DSL pattern 'T, A' works like full DoneSequence."""
    set_global(test_settings)

    # Mock LLM that always generates a tool
    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=MockLMConfig(
                response_fn=lambda x: '{"request": "simple_tool", "value": "test"}'
            ),
        )
    )
    agent.enable_message(SimpleTool)

    # Use DSL string pattern
    config = TaskConfig(done_sequences=["T, A"])
    task = Task(agent, config=config, interactive=False)
    result = task.run("Generate a tool", turns=10)

    assert result is not None
    assert len(agent.message_history) == 3


def test_dsl_specific_tool(test_settings: Settings):
    """Test DSL pattern with specific tool name."""
    set_global(test_settings)

    class AnotherTool(ToolMessage):
        request: str = "another_tool"
        purpose: str = "Another tool"
        data: str

        def handle(self) -> str:
            return f"Processed data: {self.data}"

    # Mock LLM that generates specific tool
    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=MockLMConfig(
                response_fn=lambda x: '{"request": "simple_tool", "value": "test"}'
            ),
        )
    )
    agent.enable_message(SimpleTool)
    agent.enable_message(AnotherTool)

    # Use DSL with specific tool
    config = TaskConfig(done_sequences=["T[simple_tool], A"])
    task = Task(agent, config=config, interactive=False)
    result = task.run("Generate tool", turns=10)

    assert result is not None
    assert "simple_tool" in agent.message_history[-1].content


def test_dsl_content_match(test_settings: Settings):
    """Test DSL pattern with content matching."""
    set_global(test_settings)

    # Mock LLM that says "quit"
    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=MockLMConfig(response_fn=lambda x: "I quit now"),
        )
    )

    # Use DSL with content match
    config = TaskConfig(done_sequences=["C[quit|exit]"])
    task = Task(agent, config=config, interactive=False)
    result = task.run("Do something", turns=10)

    assert result is not None
    assert "quit" in result.content.lower()


def test_dsl_complex_pattern(test_settings: Settings):
    """Test complex DSL pattern."""
    set_global(test_settings)

    responses = [
        "Let me help",
        '{"request": "simple_tool", "value": "calc"}',
        "All done",
    ]
    response_idx = 0

    def mock_response(x):
        nonlocal response_idx
        resp = responses[response_idx % len(responses)]
        response_idx += 1
        return resp

    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=MockLMConfig(response_fn=mock_response),
        )
    )
    agent.enable_message(SimpleTool)

    # Complex pattern: LLM, Tool, Agent, LLM
    config = TaskConfig(done_sequences=["L, T, A, L"])
    task = Task(
        agent,
        config=config,
        interactive=False,
        single_round=False,
        allow_null_result=True,
    )
    result = task.run("Help me", turns=10)

    assert result is not None


def test_dsl_mixed_with_done_sequence(test_settings: Settings):
    """Test mixing DSL strings with DoneSequence objects."""
    set_global(test_settings)

    from langroid.agent.task import AgentEvent, DoneSequence, EventType

    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=MockLMConfig(
                response_fn=lambda x: '{"request": "simple_tool", "value": "test"}'
            ),
        )
    )
    agent.enable_message(SimpleTool)

    # Mix DSL string and DoneSequence object
    config = TaskConfig(
        done_sequences=[
            "T, A",  # DSL string
            DoneSequence(  # Full object
                name="specific_pattern",
                events=[
                    AgentEvent(event_type=EventType.LLM_RESPONSE),
                    AgentEvent(event_type=EventType.LLM_RESPONSE),
                ],
            ),
        ]
    )
    task = Task(agent, config=config, interactive=False)
    result = task.run("Do something", turns=10)

    assert result is not None


def test_dsl_without_spaces(test_settings: Settings):
    """Test DSL works without spaces."""
    set_global(test_settings)

    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=MockLMConfig(
                response_fn=lambda x: '{"request": "simple_tool", "value": "test"}'
            ),
        )
    )
    agent.enable_message(SimpleTool)

    # DSL without spaces
    config = TaskConfig(done_sequences=["T,A"])
    task = Task(agent, config=config, interactive=False)
    result = task.run("Generate tool", turns=10)

    assert result is not None
    assert len(agent.message_history) == 3


def test_dsl_word_tokens(test_settings: Settings):
    """Test DSL with full word tokens."""
    set_global(test_settings)

    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=MockLMConfig(
                response_fn=lambda x: '{"request": "simple_tool", "value": "test"}'
            ),
        )
    )
    agent.enable_message(SimpleTool)

    # Full word tokens
    config = TaskConfig(done_sequences=["TOOL, AGENT"])
    task = Task(agent, config=config, interactive=False)
    result = task.run("Generate tool", turns=10)

    assert result is not None
    assert len(agent.message_history) == 3
</file>

<file path="tests/main/test_done_sequences.py">
"""
Tests for the done_sequences feature in Task.
"""

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import (
    AgentEvent,
    DoneSequence,
    EventType,
    Task,
    TaskConfig,
)
from langroid.agent.tool_message import ToolMessage
from langroid.language_models.mock_lm import MockLMConfig
from langroid.utils.configuration import Settings, set_global


class SimpleTool(ToolMessage):
    request: str = "simple_tool"
    purpose: str = "A simple tool for testing"
    value: str

    def handle(self) -> str:
        """Handle the tool and return a response"""
        return f"Processed value: {self.value}"


def test_done_sequence_tool_then_agent(test_settings: Settings):
    """Test that task terminates after tool followed by agent response"""
    set_global(test_settings)

    # Mock LLM that always generates a tool
    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=MockLMConfig(
                response_fn=lambda x: '{"request": "simple_tool", "value": "test"}'
            ),
        )
    )
    agent.enable_message(SimpleTool)

    # Configure task to be done after tool -> agent response
    config = TaskConfig(
        done_sequences=[
            DoneSequence(
                name="tool_then_agent",
                events=[
                    AgentEvent(event_type=EventType.TOOL),
                    AgentEvent(event_type=EventType.AGENT_RESPONSE),
                ],
            )
        ]
    )

    task = Task(agent, config=config, interactive=False)
    result = task.run("Generate a tool", turns=10)

    # Task should complete after tool generation and agent response
    assert result is not None
    # Should have: system, user, llm (with tool)
    # Note: agent response is not added to message history
    assert len(agent.message_history) == 3


def test_done_sequence_specific_tool(test_settings: Settings):
    """Test that task terminates only after specific tool"""
    set_global(test_settings)

    class AnotherTool(ToolMessage):
        request: str = "another_tool"
        purpose: str = "Another tool"
        data: str

        def handle(self) -> str:
            return f"Processed data: {self.data}"

    # Mock LLM that alternates between tools
    call_count = 0

    def mock_response(x):
        nonlocal call_count
        call_count += 1
        if call_count == 1:
            return '{"request": "another_tool", "data": "test"}'
        else:
            return '{"request": "simple_tool", "value": "test"}'

    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=MockLMConfig(response_fn=mock_response),
        )
    )
    agent.enable_message(SimpleTool)
    agent.enable_message(AnotherTool)

    # Configure to be done only after simple_tool
    config = TaskConfig(
        done_sequences=[
            DoneSequence(
                name="specific_tool",
                events=[
                    AgentEvent(
                        event_type=EventType.SPECIFIC_TOOL, tool_name="simple_tool"
                    ),
                    AgentEvent(event_type=EventType.AGENT_RESPONSE),
                ],
            )
        ]
    )

    task = Task(agent, config=config, interactive=False)
    result = task.run("Generate tools", turns=10)

    assert result is not None
    # Verify simple_tool was generated (it's in the last assistant message)
    last_assistant_msg = agent.message_history[-1]
    assert "simple_tool" in last_assistant_msg.content


def test_done_sequence_llm_agent_llm(test_settings: Settings):
    """Test sequence: LLM -> Agent -> LLM"""
    set_global(test_settings)

    # Mock LLM: first plain text, then tool, then plain text again
    responses = [
        "Let me process this",
        '{"request": "simple_tool", "value": "processed"}',
        "Processing complete",
    ]
    response_idx = 0

    def mock_response(x):
        nonlocal response_idx
        resp = responses[response_idx % len(responses)]
        response_idx += 1
        return resp

    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=MockLMConfig(response_fn=mock_response),
        )
    )
    agent.enable_message(SimpleTool)

    # Done after: Tool -> Agent -> LLM (plain)
    # The first LLM response becomes a USER message in the conversation
    config = TaskConfig(
        done_sequences=[
            DoneSequence(
                name="process_complete",
                events=[
                    AgentEvent(event_type=EventType.TOOL),
                    AgentEvent(event_type=EventType.AGENT_RESPONSE),
                    AgentEvent(event_type=EventType.LLM_RESPONSE),
                ],
            )
        ]
    )

    task = Task(
        agent,
        config=config,
        interactive=False,
        single_round=False,
        allow_null_result=True,  # Allow conversation to continue
    )
    result = task.run("Process data", turns=10)

    assert result is not None
    assert result.content == "Processing complete"


def test_done_sequence_no_match(test_settings: Settings):
    """Test that task continues when sequence doesn't match"""
    set_global(test_settings)

    # Mock LLM that only generates plain text
    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=MockLMConfig(response_fn=lambda x: f"Response to: {x}"),
        )
    )

    # Configure sequence that won't match (looking for tools)
    config = TaskConfig(
        done_sequences=[
            DoneSequence(
                name="tool_sequence",
                events=[
                    AgentEvent(event_type=EventType.TOOL),
                    AgentEvent(event_type=EventType.AGENT_RESPONSE),
                ],
            )
        ]
    )

    task = Task(agent, config=config, interactive=False, allow_null_result=True)
    result = task.run("Say something", turns=3)

    # Task should run for all 3 turns since sequence doesn't match
    assert result is not None
    # Should have at least: system, user, assistant, user, assistant (2 turns minimum)
    assert len(agent.message_history) >= 5


def test_done_sequence_multiple_sequences(test_settings: Settings):
    """Test multiple done sequences"""
    set_global(test_settings)

    # Mock LLM that responds based on input
    def mock_response(x):
        if "urgent" in x.lower():
            return "I quit immediately"
        else:
            return '{"request": "simple_tool", "value": "normal"}'

    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=MockLMConfig(response_fn=mock_response),
        )
    )
    agent.enable_message(SimpleTool)

    # Multiple ways to be done
    config = TaskConfig(
        done_sequences=[
            # Quick exit on "quit"
            DoneSequence(
                name="quit_pattern",
                events=[
                    AgentEvent(
                        event_type=EventType.CONTENT_MATCH, content_pattern=r"\bquit\b"
                    )
                ],
            ),
            # Normal tool completion
            DoneSequence(
                name="tool_complete",
                events=[
                    AgentEvent(event_type=EventType.TOOL),
                    AgentEvent(event_type=EventType.AGENT_RESPONSE),
                ],
            ),
        ]
    )

    # Test quick exit
    task1 = Task(agent, config=config, interactive=False)
    result1 = task1.run("This is urgent!", turns=5)
    assert result1 is not None
    assert "quit" in result1.content.lower()
    history_len_1 = len(agent.message_history)

    # Test tool completion
    agent.clear_history()
    task2 = Task(agent, config=config, interactive=False)
    result2 = task2.run("Do something normal", turns=5)
    assert result2 is not None
    history_len_2 = len(agent.message_history)

    # Both should complete but potentially with different message counts
    assert history_len_1 == 3  # Quick exit: system, user, assistant
    assert history_len_2 == 3  # Tool completion: system, user, assistant (with tool)


def test_done_sequence_with_done_if_tool(test_settings: Settings):
    """Test that done_sequences works alongside done_if_tool"""
    set_global(test_settings)

    # First response is plain text, second is tool
    response_count = 0

    def mock_response(x):
        nonlocal response_count
        response_count += 1
        if response_count == 1:
            return "Thinking about it"
        else:
            return '{"request": "simple_tool", "value": "done"}'

    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=MockLMConfig(response_fn=mock_response),
        )
    )
    agent.enable_message(SimpleTool)

    # Both done_if_tool and done_sequences
    config = TaskConfig(
        done_if_tool=True,  # Should trigger first
        done_sequences=[
            DoneSequence(
                name="never_reached",
                events=[
                    AgentEvent(event_type=EventType.LLM_RESPONSE),
                    AgentEvent(event_type=EventType.LLM_RESPONSE),
                    AgentEvent(event_type=EventType.LLM_RESPONSE),
                ],
            )
        ],
    )

    task = Task(agent, config=config, interactive=False, allow_null_result=True)
    result = task.run("Do something", turns=10)

    assert result is not None
    # Should terminate after second LLM response (which has tool)
    # System, user, llm (plain), user (DO-NOT-KNOW), llm (tool)
    assert len(agent.message_history) == 5


def test_done_sequence_simulates_done_if_tool(test_settings: Settings):
    """Test that done_if_tool behavior can be approximated with a done sequence"""
    set_global(test_settings)

    # Mock LLM that generates a tool immediately
    def mock_response(x):
        return '{"request": "simple_tool", "value": "calculated"}'

    # Create two identical agents
    agent1 = ChatAgent(
        ChatAgentConfig(
            name="TestAgent1",
            llm=MockLMConfig(response_fn=mock_response),
        )
    )
    agent1.enable_message(SimpleTool)

    agent2 = ChatAgent(
        ChatAgentConfig(
            name="TestAgent2",
            llm=MockLMConfig(response_fn=mock_response),
        )
    )
    agent2.enable_message(SimpleTool)

    # Task 1: Using done_if_tool
    config1 = TaskConfig(done_if_tool=True)
    task1 = Task(agent1, config=config1, interactive=False)

    # Task 2: Using done_sequences to simulate done_if_tool
    config2 = TaskConfig(
        done_sequences=[
            DoneSequence(
                name="tool_generated",
                events=[
                    AgentEvent(event_type=EventType.TOOL),
                ],
            )
        ]
    )
    task2 = Task(agent2, config=config2, interactive=False)

    # Run both tasks
    result1 = task1.run("Calculate something", turns=10)
    result2 = task2.run("Calculate something", turns=10)

    # Both should complete successfully
    assert result1 is not None
    assert result2 is not None

    # Both approaches are equivalent - they check done conditions at the same point
    # in the task execution flow (in the done() method), so they produce identical
    # message histories
    assert len(agent1.message_history) == 3  # system, user, llm (with tool)
    assert len(agent2.message_history) == 3

    # Both should have the tool in their final LLM message
    assert "simple_tool" in agent1.message_history[-1].content
    assert "simple_tool" in agent2.message_history[-1].content

    # Verify they are truly equivalent by checking the exact same number of messages
    assert len(agent1.message_history) == len(agent2.message_history)
</file>

<file path="tests/main/test_lance_doc_chat_agent.py">
import pandas as pd
import pytest

from langroid.agent.special.doc_chat_agent import DocChatAgentConfig
from langroid.agent.special.lance_doc_chat_agent import LanceDocChatAgent
from langroid.agent.special.lance_rag.lance_rag_task import LanceRAGTaskCreator
from langroid.agent.special.lance_tools import AnswerTool, QueryPlan, QueryPlanTool
from langroid.agent.tools.orchestration import AgentDoneTool
from langroid.embedding_models.models import OpenAIEmbeddingsConfig
from langroid.mytypes import DocMetaData, Document
from langroid.parsing.parser import ParsingConfig, Splitter
from langroid.pydantic_v1 import Field
from langroid.utils.configuration import Settings, set_global
from langroid.utils.system import rmdir
from langroid.vector_store.lancedb import LanceDBConfig


class MovieMetadata(DocMetaData):
    # Field(..., ) are optional but can help the LLM
    title: str = Field(..., description="The title of the movie.")
    year: int = Field(..., description="The year the movie was released.")
    director: str = Field(
        ..., description="The Full Name of the director of the movie."
    )
    genre: str = Field(..., description="The genre of the movie.")
    rating: float = Field(..., description="The rating of the movie.")


class MovieDoc(Document):
    content: str = Field(..., description="A short description of the movie.")
    metadata: MovieMetadata


movie_docs = [
    MovieDoc(
        content="""
        The Vector is a 1999 science fiction action film written and 
        directed by Jomes Winkowski.
        
        It was a movie full of projections of vectors in 3D space.
        """,
        metadata=MovieMetadata(
            title="The Vector",
            year=1999,
            director="Jomes Winkowski",
            genre="Science Fiction",
            rating=8.3,
        ),
    ),
    MovieDoc(
        content="""
        Sparse Odyssey is a 1968 science fiction film produced and directed
        by Stanley Hendrick.
        
        The sparseness of the alien landscape was a key feature of the movie.
        """,
        metadata=MovieMetadata(
            title="Sparse Odyssey",
            year=1968,
            director="Stanley Hendrick",
            genre="Science Fiction",
            rating=7.5,
        ),
    ),
    MovieDoc(
        content="""
        The GodPapa is a 1972 crime movie directed by Frank Copula.
        
        Copulas were used in the computer graphics to simulate the crime scenes.
        """,
        metadata=MovieMetadata(
            title="The GodPapa",
            year=1972,
            director="Frank Copula",
            genre="Crime",
            rating=9.2,
        ),
    ),
    MovieDoc(
        content="""
        The Lamb Shank Redemption is a 1994 American drama film directed by Garth Brook.
        
        The Lamb shanks were used as a metaphor for the prison bars.
        """,
        metadata=MovieMetadata(
            title="The Lamb Shank Redemption",
            year=1994,
            director="Garth Brook",
            genre="Drama",
            rating=8.3,
        ),
    ),
]

embed_cfg = OpenAIEmbeddingsConfig()


@pytest.mark.xfail(
    reason="LanceDB may fail due to unknown flakiness",
    run=True,
    strict=False,
)
@pytest.mark.parametrize(
    "query, expected",
    [
        (
            "Which Crime movie had a rating over 9?",
            "GodPapa",
        ),
        (
            "Which Science Fiction movie was directed by Winkowski?",
            "Vector",
        ),
        (
            "What was the Science Fiction movie directed by Stanley Hendrick?",
            "Sparse Odyssey",
        ),
    ],
)
@pytest.mark.parametrize("split", [True, False])
@pytest.mark.parametrize("functions_api", [True, False])
@pytest.mark.parametrize("tools_api", [True])
def test_lance_doc_chat_agent(
    split: bool,
    query: str,
    expected: str,
    functions_api: bool,
    tools_api: bool,
):
    # note that the (query, ans) pairs are accumulated into the
    # internal dialog history of the agent.

    ldb_dir = ".lancedb/data/test-x"
    rmdir(ldb_dir)
    ldb_cfg = LanceDBConfig(
        cloud=False,
        collection_name="test-lance-x",
        storage_path=ldb_dir,
        embedding=embed_cfg,
        document_class=MovieDoc,
        replace_collection=True,
    )

    cfg = DocChatAgentConfig(
        # turn cross-encoder off since it needs sentence-transformers
        cross_encoder_reranking_model="",
        vecdb=ldb_cfg,
        parsing=ParsingConfig(
            splitter=Splitter.SIMPLE,
        ),
        n_similar_chunks=3,
        n_relevant_chunks=3,
        use_functions_api=functions_api,
        use_tools=not functions_api,
        use_tools_api=tools_api,
    )

    agent = LanceDocChatAgent(cfg)
    agent.vecdb.delete_collection(agent.vecdb.config.collection_name)
    agent.ingest_docs(movie_docs, split=split)
    task = LanceRAGTaskCreator.new(agent, interactive=False)

    result = task.run(query)
    assert expected in result.content


# dummy pandas dataframe from text
df = pd.DataFrame(
    {
        "title": [
            "The Vector",
            "Sparse Odyssey",
            "The GodPapa",
            "Lamb Shank Redemption",
            "Escape from Alcoona",
        ],
        "content": [
            "The Vector is a 1999 science fiction action film written "
            "and directed by Jomes Winkowski.",
            "Sparse Odyssey is a 1968 science fiction film produced "
            "and directed by Stanley Hendrick.",
            "The GodPapa is a 1972 movie about birds directed by Frank Copula.",
            "The Lamb Shank Redemption is a 1994 American drama "
            "film directed by Garth Brook about a prison escape.",
            "Escape from Alcoona is a 1979 American prison action film  "
            "directed by Dan Seagull.",
        ],
        "year": [1999, 1968, 1972, 1994, 1979],
        "director": [
            "Jomes Winkowski",
            "Stanley Hendrick",
            "Frank Copula",
            "Garth Brook",
            "Dan Seagull",
        ],
        "genre": ["Science Fiction", "Science Fiction", "Nature", "Crime", "Crime"],
        "rating": [8, 10, 9.2, 8.7, 9.0],
    }
)


class FlatMovieDoc(Document):
    title: str = Field(..., description="The title of the movie.")
    content: str = Field(..., description="A short description of the movie.")
    year: int = Field(..., description="The year the movie was released.")
    director: str = Field(
        ..., description="The Full Name of the director of the movie."
    )
    genre: str = Field(..., description="The genre of the movie.")
    rating: float = Field(..., description="The rating of the movie.")
    # Use factory to ensure different metadata (especially id) for each doc --
    # important for proper working of doc ingest and retrieval
    metadata: DocMetaData = Field(default_factory=DocMetaData)


def test_lance_doc_chat_agent_df_query_plan(test_settings: Settings):
    """Test handling of manually-created query plan"""

    set_global(test_settings)

    ldb_dir = ".lancedb/data/test-y"
    rmdir(ldb_dir)
    ldb_cfg = LanceDBConfig(
        cloud=False,
        collection_name="test-lance-2",
        replace_collection=True,
        storage_path=ldb_dir,
        embedding=embed_cfg,
        document_class=FlatMovieDoc,
        full_eval=True,  # Allow unrestricted pandas operations in tests
    )

    cfg = DocChatAgentConfig(
        cross_encoder_reranking_model="",
        vecdb=ldb_cfg,
        add_fields_to_content=["title", "year", "director", "genre"],
        filter_fields=["year", "director", "genre", "rating"],
    )
    agent = LanceDocChatAgent(cfg)

    # convert df to list of dicts
    doc_dicts = df.to_dict(orient="records")
    # convert doc_dicts to list of FlatMovieDocs
    docs = [FlatMovieDoc(**d) for d in doc_dicts]
    agent.ingest_docs(docs, split=False)

    query_plan = QueryPlanTool(
        plan=QueryPlan(
            original_query="Which movie about prison escapes is rated highest?",
            query="movie about prison escape",
            filter="",
            dataframe_calc="df.sort_values(by='rating', ascending=False).iloc[0]",
        )
    )
    result = agent.query_plan(query_plan)
    assert (
        isinstance(result, AgentDoneTool)
        and isinstance(result.tools[0], AnswerTool)
        and "Alcoona" in result.tools[0].answer
    )


@pytest.mark.xfail(
    reason="LanceDB may fail due to unknown flakiness",
    run=True,
    strict=False,
)
@pytest.mark.parametrize(
    "query, expected",
    [
        (
            "Average rating of Science Fiction movies?",
            "9",
        ),
        (
            "Tell me about a movie about birds rated over 9",
            "GodPapa",
        ),
        (
            "Which Science Fiction movie is rated highest?",
            "Odyssey",
        ),
        (
            "What was the Science Fiction movie directed by Stanley Hendrick?",
            "Odyssey",
        ),
        (
            "Which Science Fiction movie was directed by Winkowski?",
            "Vector",
        ),
    ],
)
def test_lance_doc_chat_agent_df(
    test_settings: Settings,
    query: str,
    expected: str,
):
    set_global(test_settings)

    ldb_dir = ".lancedb/data/test-z"
    rmdir(ldb_dir)
    ldb_cfg = LanceDBConfig(
        cloud=False,
        collection_name="test-lance-2",
        replace_collection=True,
        storage_path=ldb_dir,
        embedding=embed_cfg,
        document_class=FlatMovieDoc,
        full_eval=True,  # Allow unrestricted pandas operations in tests
    )

    cfg = DocChatAgentConfig(
        cross_encoder_reranking_model="",
        vecdb=ldb_cfg,
        add_fields_to_content=["title", "year", "director", "genre"],
        filter_fields=["year", "director", "genre", "rating"],
    )
    agent = LanceDocChatAgent(cfg)

    # convert df to list of dicts
    doc_dicts = df.to_dict(orient="records")
    # convert doc_dicts to list of FlatMovieDocs
    docs = [FlatMovieDoc(**d) for d in doc_dicts]
    agent.ingest_docs(docs, split=False)

    task = LanceRAGTaskCreator.new(agent, interactive=False)

    result = task.run(query)
    assert expected in result.content


def test_lance_doc_chat_df_direct(test_settings: Settings):
    set_global(test_settings)

    ldb_dir = ".lancedb/data/gh-issues"
    rmdir(ldb_dir)
    ldb_cfg = LanceDBConfig(
        cloud=False,
        collection_name="test-lance-gh-issues",
        storage_path=ldb_dir,
        embedding=embed_cfg,
        full_eval=True,  # Allow unrestricted pandas operations in tests
    )

    cfg = DocChatAgentConfig(
        cross_encoder_reranking_model="",
        vecdb=ldb_cfg,
        add_fields_to_content=["state", "year"],
        filter_fields=["state", "year"],
    )
    agent = LanceDocChatAgent(cfg)

    df = pd.read_csv("tests/main/data/github-issues.csv")
    # only get year, state, text columns
    df = df[["year", "state", "text"]]
    agent.ingest_dataframe(df, content="text", metadata=[])
    task = LanceRAGTaskCreator.new(agent, interactive=False)
    result = task.run(
        """
        Tell me about some open issues from year 2023 related to JSON
        """
    )
    # check there is non-empty response content
    assert result is not None and len(result.content) > 10
</file>

<file path="tests/main/test_table_chat_agent.py">
from io import StringIO
from pathlib import Path

import numpy as np
import pandas as pd
import pytest

from langroid.agent.special.table_chat_agent import TableChatAgent, TableChatAgentConfig
from langroid.agent.task import Task
from langroid.parsing.table_loader import read_tabular_data
from langroid.parsing.utils import closest_string
from langroid.utils.configuration import Settings, set_global
from tests.utils import contains_approx_float

DATA_STRING = """age,gender,income,state,,,,
20,Male,50000,CA,,,
22,Female,55000,TX,,,
25,Male,60000,CA,,,
19,Female,48000,TX,,,
"""


@pytest.fixture
def mock_data_frame_blanks():
    return read_tabular_data(StringIO(DATA_STRING))


@pytest.fixture
def mock_data_file_blanks(tmpdir):
    file_path = tmpdir.join("mock_data.csv")
    file_path.write(DATA_STRING)
    return str(file_path)


def generate_data(size: int) -> str:
    # Create a list of states
    states = ["CA", "TX"]

    # Generate random age between 18 and 100
    ages = np.random.randint(18, 50, size)

    # Generate random gender
    genders = np.random.choice(["Male", "Female"], size)

    # Generate random state
    states_col = np.random.choice(states, size)

    # Generate random income between 30000 and 150000
    incomes = np.random.randint(30000, 150001, size)

    # use spaces, mixed cases to make it tricker
    data = {"age ": ages, "GenDer": genders, "State ": states_col, "income": incomes}

    return pd.DataFrame(data)


@pytest.fixture
def mock_dataframe() -> pd.DataFrame:
    data = generate_data(200)  # generate data for 1000 rows
    return data


@pytest.fixture
def mock_data_file(tmp_path: Path) -> str:
    df = generate_data(100)  # generate data for 1000 rows
    file_path = tmp_path / "mock_data.csv"
    df.to_csv(file_path, index=False)
    yield str(file_path)


def _test_table_chat_agent(
    fn_api: bool,
    tabular_data: pd.DataFrame | str,
) -> None:
    """
    Test the TableChatAgent with a file as data source
    """
    agent = TableChatAgent(
        config=TableChatAgentConfig(
            data=tabular_data,
            use_tools=not fn_api,
            use_functions_api=fn_api,
            full_eval=True,  # Allow full evaluation in tests
        )
    )

    task = Task(
        agent,
        name="TableChatAgent",
        interactive=False,
    )

    # run until LLM says DONE and shows answer,
    # at which point the task loop ends.
    for _ in range(3):
        # try 3 times to get non-empty result
        result = task.run("What is the average income of men under 40 in CA?", turns=6)
        if result.content:
            break
    age_col = closest_string("age", agent.df.columns)
    state_col = closest_string("state", agent.df.columns)
    gender_col = closest_string("gender", agent.df.columns)
    income_col = closest_string("income", agent.df.columns)
    answer = agent.df[
        (agent.df[age_col] < 40)
        & (agent.df[state_col] == "CA")
        & (agent.df[gender_col] == "Male")
    ][income_col].mean()

    # TODO - there are intermittent failures here; address this, see issue #288
    assert (
        result.content == ""
        or "TOOL" in result.content
        or result.function_call is not None
        or contains_approx_float(result.content, answer)
    )


@pytest.mark.parametrize("fn_api", [True, False])
def test_table_chat_agent_dataframe(test_settings: Settings, fn_api, mock_dataframe):
    set_global(test_settings)
    _test_table_chat_agent(
        fn_api=fn_api,
        tabular_data=mock_dataframe,
    )


@pytest.mark.parametrize("fn_api", [True, False])
def test_table_chat_agent_file(test_settings: Settings, fn_api, mock_data_file):
    set_global(test_settings)
    _test_table_chat_agent(
        fn_api=fn_api,
        tabular_data=mock_data_file,
    )


@pytest.mark.parametrize("fn_api", [True, False])
def test_table_chat_agent_dataframe_blanks(
    test_settings: Settings, fn_api, mock_data_frame_blanks
):
    set_global(test_settings)
    _test_table_chat_agent(
        fn_api=fn_api,
        tabular_data=mock_data_frame_blanks,
    )


@pytest.mark.parametrize("fn_api", [True, False])
def test_table_chat_agent_file_blanks(
    test_settings: Settings, fn_api, mock_data_file_blanks
):
    set_global(test_settings)
    _test_table_chat_agent(
        fn_api=fn_api,
        tabular_data=mock_data_file_blanks,
    )


def test_table_chat_agent_assignment_self_correction(test_settings: Settings) -> None:
    """
    Test that TableChatAgent self-corrects when trying to use assignment syntax
    and uses df.assign() instead
    """
    set_global(test_settings)

    # Create a simple dataframe with data that needs cleaning
    df = pd.DataFrame(
        {
            "airline": ["United*", "Delta*", "American*", "Southwest*"],
            "price": [100, 150, 120, 80],
            "destination": ["NYC", "LAX", "CHI", "DEN"],
        }
    )

    agent = TableChatAgent(
        config=TableChatAgentConfig(
            data=df,
            use_tools=True,
            use_functions_api=False,
            full_eval=False,  # Keep security restrictions to test self-correction
        )
    )

    task = Task(
        agent,
        name="TableChatAgent",
        interactive=False,
    )

    # Ask to clean the airline column - this should trigger assignment attempt
    result = task.run(
        "Remove the asterisk (*) from all airline names and show me the cleaned data",
        turns=5,
    )

    # Check that the result indicates success
    assert "United*" not in result.content
    assert "Delta*" not in result.content
    # The agent successfully cleaned the data (it says so in the message)
    assert "removed" in result.content.lower() and "cleaned" in result.content.lower()


@pytest.mark.parametrize("fn_api", [True, False])
def test_table_chat_agent_url(test_settings: Settings, fn_api: bool) -> None:
    """
    Test the TableChatAgent with a URL of a csv file as data source
    """
    set_global(test_settings)
    URL = "https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv"

    agent = TableChatAgent(
        config=TableChatAgentConfig(
            data=URL,
            use_tools=not fn_api,
            use_functions_api=fn_api,
            full_eval=True,  # Allow full evaluation in tests
        )
    )

    task = Task(
        agent,
        name="TableChatAgent",
        interactive=False,
    )

    # run until LLM says DONE and shows answer,
    # at which point the task loop ends.

    result = task.run(
        """
        What is the average poultry export among states exporting less than 500 units
        of cotton?
        """,
        turns=5,
    )

    df = agent.df
    # directly get the answer
    answer = df[df["cotton"] < 500]["poultry"].mean()
    assert contains_approx_float(result.content, answer)
</file>

<file path="tests/main/test_task_optional_logger.py">
"""Test optional logger functionality in Task."""

from pathlib import Path

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocMetaData, ChatDocument
from langroid.agent.task import Task, TaskConfig
from langroid.language_models.mock_lm import MockLMConfig
from langroid.mytypes import Entity


def test_task_default_loggers_enabled() -> None:
    """Test that loggers are created by default."""
    # Create a simple mock agent
    llm_config = MockLMConfig(response_dict={"user": "Hello from test!"})
    agent_config = ChatAgentConfig(llm=llm_config, name="TestAgent")
    agent = ChatAgent(agent_config)

    # Default behavior - loggers should be created
    task_config = TaskConfig(logs_dir="test_logs")
    task = Task(agent, name="task_with_loggers", config=task_config)

    # Initialize the task to trigger logger creation
    task.init()

    # Check if loggers were created
    assert task.logger is not None
    assert task.tsv_logger is not None

    # Clean up log files
    log_path = Path("test_logs/task_with_loggers.log")
    tsv_path = Path("test_logs/task_with_loggers.tsv")
    if log_path.exists():
        log_path.unlink()
    if tsv_path.exists():
        tsv_path.unlink()

    # Clean up test_logs directory if empty
    test_logs_dir = Path("test_logs")
    if test_logs_dir.exists() and not any(test_logs_dir.iterdir()):
        test_logs_dir.rmdir()


def test_task_loggers_disabled() -> None:
    """Test that loggers are not created when enable_loggers=False."""
    # Create a simple mock agent
    llm_config = MockLMConfig(response_dict={"user": "Hello from test!"})
    agent_config = ChatAgentConfig(llm=llm_config, name="TestAgent")
    agent = ChatAgent(agent_config)

    # With loggers disabled
    task_config = TaskConfig(logs_dir="test_logs", enable_loggers=False)
    task = Task(agent, name="task_without_loggers", config=task_config)

    # Initialize the task - loggers should NOT be created
    task.init()

    # Check if loggers were NOT created
    assert task.logger is None
    assert task.tsv_logger is None


def test_log_message_with_none_loggers() -> None:
    """Test that log_message handles None loggers gracefully."""
    # Create a simple mock agent
    llm_config = MockLMConfig(response_dict={"user": "Hello from test!"})
    agent_config = ChatAgentConfig(llm=llm_config, name="TestAgent")
    agent = ChatAgent(agent_config)

    # With loggers disabled
    task_config = TaskConfig(logs_dir="test_logs", enable_loggers=False)
    task = Task(agent, name="task_without_loggers", config=task_config)

    # Initialize the task
    task.init()

    # Create a test message
    msg = ChatDocument(
        content="Test message", metadata=ChatDocMetaData(sender=Entity.USER)
    )

    # This should not raise any exceptions
    task.log_message(Entity.USER, msg)

    # If we get here without exception, the test passes
    assert True
</file>

<file path=".gitignore">
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

.logs/
**/logs/
**/*.log
.idea/
.qdrant/
.DS_Store

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
**/*.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# Chainlit
.chainlit/

.vscode

# Emacs
*~
\#*\#
.\#*
sessions/
commands/
.claude/
</file>

<file path="docs/notes/mcp-tools.md">
# Langroid MCP Integration

Langroid provides seamless integration with Model Context Protocol (MCP) servers via 
two methods, both of which involve creating Langroid `ToolMessage` subclasses
corresponding to the MCP tools: 

1. Programmatic creation of Langroid tools using `get_tool_async`, 
   `get_tools_async` from the tool definitions defined on an MCP server.
2. Declarative creation of Langroid tools using the **`@mcp_tool` decorator**, which allows
   customizing the tool-handling behavior beyond what is provided by the MCP server.

This integration allows _any_ LLM (that is good enough to do function-calling via prompts) to use any MCP server.
See the following to understand the integration better:

- example python scripts under [`examples/mcp`](https://github.com/langroid/langroid/tree/main/examples/mcp)
- [`tests/main/test_mcp_tools.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_mcp_tools.py)

---

## 1. Connecting to an MCP server via transport specification

Before creating Langroid tools, we first need to define and connect to an MCP server
via a [FastMCP](https://gofastmcp.com/getting-started/welcome) client. 
There are several ways to connect to a server, depending on how it is defined. 
Each of these uses a different type of [transport](https://gofastmcp.com/clients/transports).

The typical pattern to use with Langroid is as follows:

- define an MCP server transport
- create a `ToolMessage` subclass using the `@mcp_tool` decorator or 
  `get_tool_async()` function, with the transport as the first argument


Langroid's MCP integration will work with any of [transports](https://gofastmcp.com/clients/transportsl) 
supported by FastMCP.
Below we go over some common ways to define transports and extract tools from the servers.

1. **Local Python script**
2. **In-memory FastMCP server** - useful for testing and for simple in-memory servers
   that don't need to be run as a separate process.
3. **NPX stdio transport**
4. **UVX stdio transport**
5. **Generic stdio transport** – launch any CLI‐based MCP server via stdin/stdout
6. **Network SSE transport** – connect to HTTP/S MCP servers via `SSETransport`


All examples below use the async helpers to create Langroid tools (`ToolMessage` subclasses):

```python
from langroid.agent.tools.mcp import (
    get_tools_async,
    get_tool_async,
)
```

---

#### Path to a Python Script

Point at your MCP‐server entrypoint, e.g., to the `weather.py` script in the 
langroid repo (based on the [Anthropic quick-start guide](https://modelcontextprotocol.io/quickstart/server)):

```python
async def example_script_path() -> None:
    server = "tests/main/mcp/weather-server-python/weather.py"
    tools = await get_tools_async(server) # all tools available
    AlertTool = await get_tool_async(server, "get_alerts") # specific tool

    # instantiate the tool with a specific input
    msg = AlertTool(state="CA")
    
    # Call the tool via handle_async()
    alerts = await msg.handle_async()
    print(alerts)
```

---

#### In-Memory FastMCP Server

Define your server with `FastMCP(...)` and pass the instance:

```python
from fastmcp.server import FastMCP
from pydantic import BaseModel, Field

class CounterInput(BaseModel):
    start: int = Field(...)

def make_server() -> FastMCP:
    server = FastMCP("CounterServer")

    @server.tool()
    def increment(data: CounterInput) -> int:
        """Increment start by 1."""
        return data.start + 1

    return server

async def example_in_memory() -> None:
    server = make_server()
    tools = await get_tools_async(server)
    IncTool = await get_tool_async(server, "increment")

    result = await IncTool(start=41).handle_async()
    print(result)  # 42
```

See the [`mcp-file-system.py`](https://github.com/langroid/langroid/blob/main/examples/mcp/mcp-file-system.py)
script for a working example of this.

---

#### NPX stdio Transport

Use any npm-installed MCP server via `npx`, e.g., the 
[Exa web-search MCP server](https://docs.exa.ai/examples/exa-mcp):

```python
from fastmcp.client.transports import NpxStdioTransport

transport = NpxStdioTransport(
    package="exa-mcp-server",
    env_vars={"EXA_API_KEY": "…"},
)

async def example_npx() -> None:
    tools = await get_tools_async(transport)
    SearchTool = await get_tool_async(transport, "web_search_exa")

    results = await SearchTool(
        query="How does Langroid integrate with MCP?"
    ).handle_async()
    print(results)
```

For a fully working example, see the script [`exa-web-search.py`](https://github.com/langroid/langroid/blob/main/examples/mcp/exa-web-search.py).

---

#### UVX stdio Transport

Connect to a UVX-based MCP server, e.g., the [Git MCP Server](https://github.com/modelcontextprotocol/servers/tree/main/src/git)

```python
from fastmcp.client.transports import UvxStdioTransport

transport = UvxStdioTransport(tool_name="mcp-server-git")

async def example_uvx() -> None:
    tools = await get_tools_async(transport)
    GitStatus = await get_tool_async(transport, "git_status")

    status = await GitStatus(path=".").handle_async()
    print(status)
```

--- 

#### Generic stdio Transport

Use `StdioTransport` to run any MCP server as a subprocess over stdio:

```python
from fastmcp.client.transports import StdioTransport
from langroid.agent.tools.mcp import get_tools_async, get_tool_async


async def example_stdio() -> None:
    """Example: any CLI‐based MCP server via StdioTransport."""
    transport: StdioTransport = StdioTransport(
        command="uv",
        args=["run", "--with", "biomcp-python", "biomcp", "run"],
    )
    tools: list[type] = await get_tools_async(transport)
    BioTool = await get_tool_async(transport, "tool_name")
    result: str = await BioTool(param="value").handle_async()
    print(result)
```

See the full example in [`examples/mcp/biomcp.py`](https://github.com/langroid/langroid/blob/main/examples/mcp/biomcp.py).

---

#### Network SSE Transport

Use `SSETransport` to connect to a FastMCP server over HTTP/S:

```python
from fastmcp.client.transports import SSETransport
from langroid.agent.tools.mcp import (
    get_tools_async,
    get_tool_async,
)


async def example_sse() -> None:
    """Example: connect to an HTTP/S MCP server via SSETransport."""
    url: str = "https://localhost:8000/sse"
    transport: SSETransport = SSETransport(
        url=url, headers={"Authorization": "Bearer TOKEN"}
    )
    tools: list[type] = await get_tools_async(transport)
    ExampleTool = await get_tool_async(transport, "tool_name")
    result: str = await ExampleTool(param="value").handle_async()
    print(result)
```    

---

With these patterns you can list tools, generate Pydantic-backed `ToolMessage` classes,
and invoke them via `.handle_async()`, all with zero boilerplate client setup. 
As the `FastMCP` library adds other types of transport (e.g., `StreamableHTTPTransport`),
the pattern of usage with Langroid will remain the same.


---

## 2. Create Langroid Tools declaratively using the `@mcp_tool` decorator

The above examples showed how you can create Langroid tools programmatically using
the helper functions `get_tool_async()` and `get_tools_async()`,
with the first argument being the transport to the MCP server. The `@mcp_tool` decorator
works in the same way: 

- **Arguments to the decorator**
    1. `server_spec`: path/URL/`FastMCP`/`ClientTransport`, as mentioned above.
    2. `tool_name`: name of a specific MCP tool

- **Behavior**
    - Generates a `ToolMessage` subclass with all input fields typed.
    - Provides a `call_tool_async()` under the hood -- this is the "raw" MCP tool call,
      returning a string.
    - If you define your own `handle_async()`, it overrides the default. Typically,
you would override it to customize either the input or the output of the tool call, or both.
    - If you don't define your own `handle_async()`, it defaults to just returning the
      value of the `call_tool_async()` method.

Here is a simple example of using the `@mcp_tool` decorator to create a Langroid tool:

```python
from fastmcp.server import FastMCP
from langroid.agent.tools.mcp import mcp_tool
import langroid as lr

# Define your MCP server (pydantic v2 for schema)
server = FastMCP("MyServer")

@mcp_tool(server, "greet")
class GreetTool(lr.ToolMessage):
    """Say hello to someone."""

    async def handle_async(self) -> str:
        # Customize post-processing
        raw = await self.call_tool_async()
        return f"💬 {raw}"
```

Using the decorator method allows you to customize the `handle_async` method of the
tool, or add additional fields to the `ToolMessage`. 
You may want to customize the input to the tool, or the tool result before it is sent back to 
the LLM. If you don't override it, the default behavior is to simply return the value of 
the "raw" MCP tool call `await self.call_tool_async()`. 

```python
@mcp_tool(server, "calculate")
class CalcTool(ToolMessage):
    """Perform complex calculation."""

    async def handle_async(self) -> str:
        result = await self.call_tool_async()
        # Add context or emojis, etc.
        return f"🧮 Result is *{result}*"
```

---

## 3. Enabling Tools in Your Agent

Once you’ve created a Langroid `ToolMessage` subclass from an MCP server, 
you can enable it on a `ChatAgent`, just like you normally would. Below is an example of using 
the [Exa MCP server](https://docs.exa.ai/examples/exa-mcp) to create a 
Langroid web search tool, enable a `ChatAgent` to use it, and then set up a `Task` to 
run the agent loop.

First we must define the appropriate `ClientTransport` for the MCP server:
```python
# define the transport
transport = NpxStdioTransport(
    package="exa-mcp-server",
    env_vars=dict(EXA_API_KEY=os.getenv("EXA_API_KEY")),
)
```

Then we use the `@mcp_tool` decorator to create a `ToolMessage` 
subclass representing the web search tool. Note that one reason to use the decorator
to define our tool is so we can specify a custom `handle_async` method that
controls what is sent to the LLM after the actual raw MCP tool-call
(the `call_tool_async` method) is made.

```python
# the second arg specifically refers to the `web_search_exa` tool available
# on the server defined by the `transport` variable.
@mcp_tool(transport, "web_search_exa")
class ExaSearchTool(lr.ToolMessage):
    async def handle_async(self):
        result: str = await self.call_tool_async()
        return f"""
        Below are the results of the web search:
        
        <WebSearchResult>
        {result}
        </WebSearchResult>
        
        Use these results to answer the user's original question.
        """

```

If we did not want to override the `handle_async` method, we could simply have
created the `ExaSearchTool` class programmatically via the `get_tool_async` 
function as shown above, i.e.:

```python
from langroid.agent.tools.mcp import get_tool_async

ExaSearchTool = awwait
get_tool_async(transport, "web_search_exa")
```

We can now define our main function where we create our `ChatAgent`,
attach the `ExaSearchTool` to it, define the `Task`, and run the task loop.

```python
async def main():
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            # forward to user when LLM doesn't use a tool
            handle_llm_no_tool=NonToolAction.FORWARD_USER,
            llm=lm.OpenAIGPTConfig(
                max_output_tokens=1000,
                # this defaults to True, but we set it to False so we can see output
                async_stream_quiet=False,
            ),
        )
    )

    # enable the agent to use the web-search tool
    agent.enable_message(ExaSearchTool)
    # make task with interactive=False =>
    # waits for user only when LLM doesn't use a tool
    task = lr.Task(agent, interactive=False)
    await task.run_async()
```

See [`exa-web-search.py`](https://github.com/langroid/langroid/blob/main/examples/mcp/exa-web-search.py) for a full 
working example of this.
</file>

<file path="docs/notes/task-termination.md">
# Task Termination in Langroid

## Why Task Termination Matters

When building agent-based systems, one of the most critical yet challenging aspects is determining when a task should complete. Unlike traditional programs with clear exit points, agent conversations can meander, loop, or continue indefinitely. Getting termination wrong leads to two equally problematic scenarios:

**Terminating too early** means missing crucial information or cutting off an agent mid-process. Imagine an agent that searches for information, finds it, but terminates before it can process or summarize the results. The task completes "successfully" but fails to deliver value.

**Terminating too late** wastes computational resources, frustrates users, and can lead to repetitive loops where agents keep responding without making progress. We've all experienced chatbots that won't stop talking or systems that keep asking "Is there anything else?" long after the conversation should have ended. Even worse, agents can fall into infinite loops—repeatedly exchanging the same messages, calling the same tools, or cycling through states without making progress. These loops not only waste resources but can rack up significant costs when using paid LLM APIs.

The challenge is that the "right" termination point depends entirely on context. A customer service task might complete after resolving an issue and confirming satisfaction. A research task might need to gather multiple sources, synthesize them, and present findings. A calculation task should end after computing and presenting the result. Each scenario requires different termination logic.

Traditionally, developers would subclass `Task` and override the `done()` method with custom logic. While flexible, this approach scattered termination logic across multiple subclasses, making systems harder to understand and maintain. It also meant that common patterns—like "complete after tool use" or "stop when the user says goodbye"—had to be reimplemented repeatedly.

This guide introduces Langroid's declarative approach to task termination, culminating in the powerful `done_sequences` feature. Instead of writing imperative code, you can now describe *what* patterns should trigger completion, and Langroid handles the *how*. This makes your agent systems more predictable, maintainable, and easier to reason about.

## Table of Contents
- [Overview](#overview)
- [Basic Termination Methods](#basic-termination-methods)
- [Done Sequences: Event-Based Termination](#done-sequences-event-based-termination)
  - [Concept](#concept)
  - [DSL Syntax (Recommended)](#dsl-syntax-recommended)
  - [Full Object Syntax](#full-object-syntax)
  - [Event Types](#event-types)
  - [Examples](#examples)
- [Implementation Details](#implementation-details)
- [Best Practices](#best-practices)
- [Reference](#reference)

## Overview

In Langroid, a `Task` wraps an `Agent` and manages the conversation flow. Controlling when a task terminates is crucial for building reliable agent systems. Langroid provides several methods for task termination, from simple flags to sophisticated event sequence matching.

## Basic Termination Methods

### 1. Turn Limits
```python
# Task runs for exactly 5 turns
result = task.run("Start conversation", turns=5)
```

### 2. Single Round Mode
```python
# Task completes after one exchange
config = TaskConfig(single_round=True)
task = Task(agent, config=config)
```

### 3. Done If Tool
```python
# Task completes when any tool is generated
config = TaskConfig(done_if_tool=True)
task = Task(agent, config=config)
```

### 4. Done If Response/No Response
```python
# Task completes based on response from specific entities
config = TaskConfig(
    done_if_response=[Entity.LLM],      # Done if LLM responds
    done_if_no_response=[Entity.USER]   # Done if USER doesn't respond
)
```

### 5. String Signals
```python
# Task completes when special strings like "DONE" are detected
# (enabled by default with recognize_string_signals=True)
```

### 6. Orchestration Tools
```python
# Using DoneTool, FinalResultTool, etc.
from langroid.agent.tools.orchestration import DoneTool
agent.enable_message(DoneTool)
```

## Done Sequences: Event-Based Termination

### Concept

The `done_sequences` feature allows you to specify sequences of events that trigger task completion. This provides fine-grained control over task termination based on conversation patterns.

**Key Features:**

- Specify multiple termination sequences
- Use convenient DSL syntax or full object syntax
- Strict consecutive matching (no skipping events)
- Efficient implementation using message parent pointers

### DSL Syntax (Recommended)

The DSL (Domain Specific Language) provides a concise way to specify sequences:

```python
from langroid.agent.task import Task, TaskConfig

config = TaskConfig(
    done_sequences=[
        "T, A",                    # Tool followed by agent response
        "T[calculator], A",        # Specific calculator tool
        "L, T, A, L",              # LLM, tool, agent, LLM sequence
        "C[quit|exit|bye]",        # Content matching regex
        "U, L, A",                 # User, LLM, agent sequence
    ]
)
task = Task(agent, config=config)
```

#### DSL Pattern Reference

| Pattern | Description | Event Type |
|---------|-------------|------------|
| `T` | Any tool | `TOOL` |
| `T[name]` | Specific tool by name | `SPECIFIC_TOOL` |
| `A` | Agent response | `AGENT_RESPONSE` |
| `L` | LLM response | `LLM_RESPONSE` |
| `U` | User response | `USER_RESPONSE` |
| `N` | No response | `NO_RESPONSE` |
| `C[pattern]` | Content matching regex | `CONTENT_MATCH` |

**Examples:**

- `"T, A"` - Any tool followed by agent handling
- `"T[search], A, T[calculator], A"` - Search tool, then calculator tool
- `"L, C[complete|done|finished]"` - LLM response containing completion words
- `"TOOL, AGENT"` - Full words also supported

### Full Object Syntax

For more control, use the full object syntax:

```python
from langroid.agent.task import (
    Task, TaskConfig, DoneSequence, AgentEvent, EventType
)

config = TaskConfig(
    done_sequences=[
        DoneSequence(
            name="tool_handled",
            events=[
                AgentEvent(event_type=EventType.TOOL),
                AgentEvent(event_type=EventType.AGENT_RESPONSE),
            ]
        ),
        DoneSequence(
            name="specific_tool_pattern",
            events=[
                AgentEvent(
                    event_type=EventType.SPECIFIC_TOOL,
                    tool_name="calculator"
                ),
                AgentEvent(event_type=EventType.AGENT_RESPONSE),
            ]
        ),
    ]
)
```

### Event Types

The following event types are available:

| EventType | Description | Additional Parameters |
|-----------|-------------|----------------------|
| `TOOL` | Any tool message generated | - |
| `SPECIFIC_TOOL` | Specific tool by name | `tool_name` |
| `LLM_RESPONSE` | LLM generates a response | - |
| `AGENT_RESPONSE` | Agent responds (e.g., handles tool) | - |
| `USER_RESPONSE` | User provides input | - |
| `CONTENT_MATCH` | Response matches regex pattern | `content_pattern` |
| `NO_RESPONSE` | No valid response from entity | - |

### Examples

#### Example 1: Tool Completion
Task completes after any tool is used and handled:

```python
config = TaskConfig(done_sequences=["T, A"])
```

This is equivalent to `done_if_tool=True` but happens after the agent handles the tool.

#### Example 2: Multi-Step Process
Task completes after a specific conversation pattern:

```python
config = TaskConfig(
    done_sequences=["L, T[calculator], A, L"]
)
# Completes after: LLM response → calculator tool → agent handles → LLM summary
```

#### Example 3: Multiple Exit Conditions
Different ways to complete the task:

```python
config = TaskConfig(
    done_sequences=[
        "C[quit|exit|bye]",           # User says quit
        "T[calculator], A",           # Calculator used
        "T[search], A, T[search], A", # Two searches performed
    ]
)
```

#### Example 4: Mixed Syntax
Combine DSL strings and full objects:

```python
config = TaskConfig(
    done_sequences=[
        "T, A",  # Simple DSL
        DoneSequence(  # Full control
            name="complex_check",
            events=[
                AgentEvent(
                    event_type=EventType.SPECIFIC_TOOL,
                    tool_name="database_query",
                    responder="DatabaseAgent"  # Can specify responder
                ),
                AgentEvent(event_type=EventType.AGENT_RESPONSE),
            ]
        ),
    ]
)
```

## Implementation Details

### How Done Sequences Work

Done sequences operate at the **task level** and are based on the **sequence of valid responses** generated during a task's execution. When a task runs, it maintains a `response_sequence` that tracks each message (ChatDocument) as it's processed.

**Key points:**
- Done sequences are checked only within a single task's scope
- They track the temporal order of responses within that task
- The response sequence is built incrementally as the task processes each step
- Only messages that represent valid responses are added to the sequence

### Response Sequence Building
The task builds its response sequence during execution:

```python
# In task.run(), after each step:
if self.pending_message is not None:
    if (not self.response_sequence or 
        self.pending_message.id() != self.response_sequence[-1].id()):
        self.response_sequence.append(self.pending_message)
```

### Message Chain Retrieval
Done sequences are checked against the response sequence:

```python
def _get_message_chain(self, msg: ChatDocument, max_depth: Optional[int] = None):
    """Get the chain of messages from response sequence"""
    if max_depth is None:
        max_depth = 50  # default
        if self._parsed_done_sequences:
            max_depth = max(len(seq.events) for seq in self._parsed_done_sequences)
    
    # Simply return the last max_depth elements from response_sequence
    return self.response_sequence[-max_depth:]
```

**Note:** The response sequence used for done sequences is separate from the parent-child pointer system. Parent pointers track causal relationships and lineage across agent boundaries (important for debugging and understanding delegation patterns), while response sequences track temporal order within a single task for termination checking.

### Strict Matching
Events must occur consecutively without intervening messages:

```python
# This sequence: [TOOL, AGENT_RESPONSE]
# Matches: USER → LLM(tool) → AGENT
# Does NOT match: USER → LLM(tool) → USER → AGENT
```

### Performance

- Efficient O(n) traversal where n is sequence length
- No full history scan needed
- Early termination on first matching sequence

## Best Practices

1. **Use DSL for Simple Cases**
   ```python
   # Good: Clear and concise
   done_sequences=["T, A"]
   
   # Avoid: Verbose for simple patterns
   done_sequences=[DoneSequence(events=[...])]
   ```

2. **Name Your Sequences**
   ```python
   DoneSequence(
       name="calculation_complete",  # Helps with debugging
       events=[...]
   )
   ```

3. **Order Matters**
   - Put more specific sequences first
   - General patterns at the end

4. **Test Your Sequences**
   ```python
   # Use MockLM for testing
   agent = ChatAgent(
       ChatAgentConfig(
           llm=MockLMConfig(response_fn=lambda x: "test response")
       )
   )
   ```

5. **Combine with Other Methods**
   ```python
   config = TaskConfig(
       done_if_tool=True,      # Quick exit on any tool
       done_sequences=["L, L, L"],  # Or after 3 LLM responses
       max_turns=10,           # Hard limit
   )
   ```

## Reference

### Code Examples
- **Basic example**: [`examples/basic/done_sequences_example.py`](../../examples/basic/done_sequences_example.py)
- **Test cases**: [`tests/main/test_done_sequences.py`](../../tests/main/test_done_sequences.py)
- **DSL tests**: [`tests/main/test_done_sequences_dsl.py`](../../tests/main/test_done_sequences_dsl.py)
- **Parser tests**: [`tests/main/test_done_sequence_parser.py`](../../tests/main/test_done_sequence_parser.py)

### Core Classes
- `TaskConfig` - Configuration including `done_sequences`
- `DoneSequence` - Container for event sequences
- `AgentEvent` - Individual event in a sequence
- `EventType` - Enumeration of event types

### Parser Module
- `langroid.agent.done_sequence_parser` - DSL parsing functionality

### Task Methods
- `Task.done()` - Main method that checks sequences
- `Task._matches_sequence_with_current()` - Sequence matching logic
- `Task._classify_event()` - Event classification
- `Task._get_message_chain()` - Message traversal

## Migration Guide

If you're currently overriding `Task.done()`:

```python
# Before: Custom done() method
class MyTask(Task):
    def done(self, result=None, r=None):
        if some_complex_logic(result):
            return (True, StatusCode.DONE)
        return super().done(result, r)

# After: Use done_sequences
config = TaskConfig(
    done_sequences=["T[my_tool], A, L"]  # Express as sequence
)
task = Task(agent, config=config)  # No subclassing needed
```

## Troubleshooting

**Sequence not matching?**

- Check that events are truly consecutive (no intervening messages)
- Use logging to see the actual message chain
- Verify tool names match exactly

**Type errors with DSL?**

- Ensure you're using strings for DSL patterns
- Check that tool names in `T[name]` don't contain special characters

**Performance concerns?**

- Sequences only traverse as deep as needed
- Consider shorter sequences for better performance
- Use specific tool names to avoid unnecessary checks

## Summary

The `done_sequences` feature provides a powerful, declarative way to control task termination based on conversation patterns. The DSL syntax makes common cases simple while the full object syntax provides complete control when needed. This approach eliminates the need to subclass `Task` and override `done()` for most use cases, leading to cleaner, more maintainable code.
</file>

<file path="examples/basic/planner-workflow-simple.py">
"""
Illustrates a Planner agent orchestrating a multi-step workflow by using tools that
invoke other specialized agents.

- The PlannerAgent is instructed to first increment a number by 3, and then
  multiply the result by 8.
- To do this, it repeatedly uses two tools: `IncrementTool` and `DoublingTool`.
- The key idea is that these tools are stateful: their `handle_async` methods
  don't perform the simple math themselves, but instead run other `Task` objects
  (`increment_task`, `doubling_task`).
- These tasks are handled by simple, specialized agents (`IncrementAgent`,
  `DoublingAgent`) that only know how to perform a single, small step.

This example showcases a powerful pattern where a high-level agent delegates complex
sub-processes to other agents via the tool mechanism.

Run like this from the repo root, once you are in a virtual environment with
langroid installed:

    uv run examples/basic/planner-workflow-simple.py

To use a different model, for example, run like this:

    uv run examples/basic/planner-workflow-simple.py --model gpt-4.1-mini

"""

import logging

from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.orchestration import DoneTool
from langroid.pydantic_v1 import Field

logger = logging.getLogger(__name__)
MODEL = lm.OpenAIChatModel.GPT4_1


class IncrementAgentConfig(lr.ChatAgentConfig):
    name: str = "Incrementer"
    system_message: str = "Given a number, return the next number"


class DoublingAgentConfig(lr.ChatAgentConfig):
    name: str = "Doubler"
    system_message: str = "Given a number, return the number multiplied by 2"


async def main(model: str = ""):

    increment_agent = lr.ChatAgent(
        IncrementAgentConfig(
            llm=lm.OpenAIGPTConfig(
                chat_model=model or MODEL,
                async_stream_quiet=False,
            )
        )
    )
    increment_task = lr.Task(
        increment_agent,
        interactive=False,
        single_round=True,
    )

    doubling_agent = lr.ChatAgent(
        DoublingAgentConfig(
            llm=lm.OpenAIGPTConfig(
                chat_model=model or MODEL,
                async_stream_quiet=False,
            )
        )
    )

    doubling_task = lr.Task(
        doubling_agent,
        interactive=False,
        single_round=True,
    )

    class IncrementTool(lr.ToolMessage):
        request: str = "increment_tool"
        purpose: str = "To increment a <number> by 1"
        number: int = Field(..., description="The number (int) to Increment")

        async def handle_async(self) -> str:
            # stateful tool: handler runs the increment_task
            result = await increment_task.run_async(f"{self.number}")
            return result.content

    class DoublingTool(lr.ToolMessage):
        request: str = "doubling_tool"
        purpose: str = "To double a <number>"
        number: int = Field(..., description="The number (int) to Double")

        async def handle_async(self) -> str:
            # stateful tool: handler runs the doubling_task
            result = await doubling_task.run_async(self.number)
            return result.content

    class PlannerConfig(lr.ChatAgentConfig):
        name: str = "Planner"
        handle_llm_no_tool: str = "You FORGOT to use one of your TOOLs!"
        llm = lm.OpenAIGPTConfig(
            chat_model=model or MODEL,
            async_stream_quiet=False,
        )
        system_message: str = f"""
        You are a Planner in charge of PROCESSING the user's input number
        (an integer) through a SEQUENCE of two steps:
        
        1. Increment the number by 3 -- use the `{IncrementTool.name()}` tool,
            as many times as needed, until the number is incremented by 3.
        2. Multiply the number by 8 -- use the `{DoublingTool.name()}` tool,
            as many times as needed, until the number is multiplied by 8.
            
        Note That even though these tasks sound trivial, you cannot and must not do them 
        yourself. You must use the tools as many times as needed for each step and then 
        proceed to the next step. 
        
        CRITICAL: You must call ONE TOOL only and wait for its result, 
        and then call another tool. 
        NEVER EVER call multiple tools at the same time.  
        
        Once you are done, use the TOOL `{DoneTool.name()}` to return the final result.
        """

    planner = lr.ChatAgent(PlannerConfig())

    planner.enable_message([IncrementTool, DoublingTool, DoneTool])

    planner_task = lr.Task(planner, interactive=False)

    result = await planner_task.run_async("Process this number: 3")
    assert "48" in result.content, f"Expected 48, got {result.content}"


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/mcp/claude-code-mcp.py">
"""
Interact with Claude Code's MCP server.


Run like this (omitting the `--model` argument will use the default GPT-4.1-Mini):

    uv run examples/mcp/claude-code-mcp.py --model gpt-4.1-mini


"""

from fastmcp.client.transports import (
    StdioTransport,
)
from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp.fastmcp_client import get_tools_async
from langroid.mytypes import NonToolAction


async def main(model: str = ""):
    transport = StdioTransport(
        command="claude",
        args=["mcp", "serve"],
        env={},
    )
    all_tools = await get_tools_async(transport)

    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            # forward to user when LLM doesn't use a tool
            handle_llm_no_tool=NonToolAction.FORWARD_USER,
            system_message="""
            You are a coding assistant who has access to 
            various tools from Claude Code. You can use these tools to
            to help the user with their coding-related tasks
            or code-related questions.
            """,
            llm=lm.OpenAIGPTConfig(
                chat_model=model or "gpt-4.1",
                max_output_tokens=1000,
                async_stream_quiet=False,
            ),
        )
    )

    # enable the agent to use all tools
    agent.enable_message(all_tools)
    # make task with interactive=False =>
    # waits for user only when LLM doesn't use a tool
    task = lr.Task(agent, interactive=False)
    await task.run_async(
        "Based on the TOOLs available to you, greet the user and"
        "tell them what kinds of help you can provide."
    )


if __name__ == "__main__":
    Fire(main)
</file>

<file path="examples/mcp/pyodide_code_executor.py">
"""
Simple example of using the Pyodide MCP server.
    https://github.com/pydantic/pydantic-ai/tree/main/mcp-run-python

Before running make sure you have deno installed
    https://docs.deno.com/runtime/getting_started/installation/

Run like this:

    uv run examples/mcp/pyodide_code_executor.py --model gpt-4.1-mini

"""

from fastmcp.client.transports import StdioTransport
from fire import Fire

import langroid as lr
import langroid.language_models as lm
from langroid.agent.tools.mcp import mcp_tool
from langroid.agent.tools.orchestration import ResultTool
from langroid.mytypes import NonToolAction

RUN_ONCE: bool = True  # terminate task on first result?

deno_transport = StdioTransport(
    command="deno",
    args=[
        "run",
        "-N",
        "-R=node_modules",
        "-W=node_modules",
        "--node-modules-dir=auto",
        "jsr:@pydantic/mcp-run-python",
        "stdio",
    ],
)

# Illustrating how we can:
# - use the MCP tool decorator to create a Langroid ToolMessage subclass
# - override the handle_async() method to customize the output, sent to the LLM


class MyResult(ResultTool):
    answer: str


@mcp_tool(deno_transport, "run_python_code")
class PythonCodeExecutor(lr.ToolMessage):
    async def handle_async(self):
        result: str = await self.call_tool_async()
        if RUN_ONCE:
            # terminate task with this result
            return MyResult(answer=result)
        else:
            # this result goes to LLM, and loop with user continues
            return f"""
            <CodeResult>
            {result} 
            </CodeResult>
            """


async def main(model: str = ""):
    agent = lr.ChatAgent(
        lr.ChatAgentConfig(
            # forward to user when LLM doesn't use a tool
            handle_llm_no_tool=NonToolAction.FORWARD_USER,
            llm=lm.OpenAIGPTConfig(
                chat_model=model or "gpt-4.1-mini",
                max_output_tokens=1000,
                # this defaults to True, but we set it to False so we can see output
                async_stream_quiet=False,
            ),
        )
    )

    # enable the agent to use the PythonCodeExecutor tool
    agent.enable_message(PythonCodeExecutor)
    # make task with interactive=False =>
    # waits for user only when LLM doesn't use a tool
    if RUN_ONCE:
        task = lr.Task(agent, interactive=False)[MyResult]
        result: MyResult | None = await task.run_async()
        print("Final answer is: ", result.answer)
    else:
        task = lr.Task(agent, interactive=False)
        await task.run_async()


if __name__ == "__main__":
    import asyncio

    def run_main(**kwargs) -> None:
        """Run the async main function with a proper event loop.

        Args:
            **kwargs: Keyword arguments to pass to the main function.
        """
        asyncio.run(main(**kwargs))

    Fire(run_main)
</file>

<file path="langroid/agent/tools/mcp/fastmcp_client.py">
import asyncio
import datetime
import logging
from base64 import b64decode
from io import BytesIO
from typing import Any, Dict, List, Optional, Tuple, Type, TypeAlias, cast

from dotenv import load_dotenv
from fastmcp.client import Client
from fastmcp.client.roots import (
    RootsHandler,
    RootsList,
)
from fastmcp.client.sampling import SamplingHandler
from fastmcp.client.transports import ClientTransport
from fastmcp.server import FastMCP
from mcp.client.session import (
    LoggingFnT,
    MessageHandlerFnT,
)
from mcp.types import (
    BlobResourceContents,
    CallToolResult,
    EmbeddedResource,
    ImageContent,
    TextContent,
    TextResourceContents,
    Tool,
)

from langroid.agent.base import Agent
from langroid.agent.chat_document import ChatDocument
from langroid.agent.tool_message import ToolMessage
from langroid.parsing.file_attachment import FileAttachment
from langroid.pydantic_v1 import AnyUrl, BaseModel, Field, create_model

load_dotenv()  # load environment variables from .env

FastMCPServerSpec: TypeAlias = str | FastMCP[Any] | ClientTransport | AnyUrl


class FastMCPClient:
    """A client for interacting with a FastMCP server.

    Provides async context manager functionality to safely manage resources.
    """

    logger = logging.getLogger(__name__)
    _cm: Optional[Client] = None
    client: Optional[Client] = None

    def __init__(
        self,
        server: FastMCPServerSpec,
        persist_connection: bool = False,
        forward_images: bool = True,
        forward_text_resources: bool = False,
        forward_blob_resources: bool = False,
        sampling_handler: SamplingHandler | None = None,  # type: ignore
        roots: RootsList | RootsHandler | None = None,  # type: ignore
        log_handler: LoggingFnT | None = None,
        message_handler: MessageHandlerFnT | None = None,
        read_timeout_seconds: datetime.timedelta | None = None,
    ) -> None:
        """Initialize the FastMCPClient.

        Args:
            server: FastMCP server or path to such a server
        """
        self.server = server
        self.client = None
        self._cm = None
        self.sampling_handler = sampling_handler
        self.roots = roots
        self.log_handler = log_handler
        self.message_handler = message_handler
        self.read_timeout_seconds = read_timeout_seconds
        self.persist_connection = persist_connection
        self.forward_text_resources = forward_text_resources
        self.forward_blob_resources = forward_blob_resources
        self.forward_images = forward_images

    async def __aenter__(self) -> "FastMCPClient":
        """Enter the async context manager and connect inner client."""
        # create inner client context manager
        self._cm = Client(
            self.server,
            sampling_handler=self.sampling_handler,
            roots=self.roots,
            log_handler=self.log_handler,
            message_handler=self.message_handler,
            timeout=self.read_timeout_seconds,
        )
        # actually enter it (opens the session)
        self.client = await self._cm.__aenter__()  # type: ignore
        return self

    async def connect(self) -> None:
        """Open the underlying session."""
        await self.__aenter__()

    async def close(self) -> None:
        """Close the underlying session."""
        await self.__aexit__(None, None, None)

    async def __aexit__(
        self,
        exc_type: Optional[type[Exception]],
        exc_val: Optional[Exception],
        exc_tb: Optional[Any],
    ) -> None:
        """Exit the async context manager and close inner client."""
        # exit and close the inner fastmcp.Client
        if hasattr(self, "_cm"):
            if self._cm is not None:
                await self._cm.__aexit__(exc_type, exc_val, exc_tb)  # type: ignore
        self.client = None
        self._cm = None

    def __del__(self) -> None:
        """Warn about unclosed persistent connections."""
        if self.client is not None and self.persist_connection:
            import warnings

            warnings.warn(
                f"FastMCPClient with persist_connection=True was not properly closed. "
                f"Connection to {self.server} may leak resources. "
                f"Use 'async with' or call await client.close()",
                ResourceWarning,
                stacklevel=2,
            )

    def _schema_to_field(
        self, name: str, schema: Dict[str, Any], prefix: str
    ) -> Tuple[Any, Any]:
        """Convert a JSON Schema snippet into a (type, Field) tuple.

        Args:
            name: Name of the field.
            schema: JSON Schema for this field.
            prefix: Prefix to use for nested model names.

        Returns:
            A tuple of (python_type, Field(...)) for create_model.
        """
        t = schema.get("type")
        default = schema.get("default", ...)
        desc = schema.get("description")
        # Object → nested BaseModel
        if t == "object" and "properties" in schema:
            sub_name = f"{prefix}_{name.capitalize()}"
            sub_fields: Dict[str, Tuple[type, Any]] = {}
            for k, sub_s in schema["properties"].items():
                ftype, fld = self._schema_to_field(sub_name + k, sub_s, sub_name)
                sub_fields[k] = (ftype, fld)
            submodel = create_model(  # type: ignore
                sub_name,
                __base__=BaseModel,
                **sub_fields,
            )
            return submodel, Field(default=default, description=desc)  # type: ignore
        # Array → List of items
        if t == "array" and "items" in schema:
            item_type, _ = self._schema_to_field(name, schema["items"], prefix)
            return List[item_type], Field(default=default, description=desc)  # type: ignore
        # Primitive types
        if t == "string":
            return str, Field(default=default, description=desc)
        if t == "integer":
            return int, Field(default=default, description=desc)
        if t == "number":
            return float, Field(default=default, description=desc)
        if t == "boolean":
            return bool, Field(default=default, description=desc)
        # Fallback or unions
        if any(key in schema for key in ("oneOf", "anyOf", "allOf")):
            self.logger.warning("Unsupported union schema in field %s; using Any", name)
            return Any, Field(default=default, description=desc)
        # Default fallback
        return Any, Field(default=default, description=desc)

    async def get_tool_async(self, tool_name: str) -> Type[ToolMessage]:
        """
        Create a Langroid ToolMessage subclass from the MCP Tool
        with the given `tool_name`.
        """
        if not self.client:
            if self.persist_connection:
                await self.connect()
                assert self.client
            else:
                raise RuntimeError(
                    "Client not initialized. Use async with FastMCPClient."
                )
        target = await self.get_mcp_tool_async(tool_name)
        if target is None:
            raise ValueError(f"No tool named {tool_name}")
        props = target.inputSchema.get("properties", {})
        fields: Dict[str, Tuple[type, Any]] = {}
        for fname, schema in props.items():
            ftype, fld = self._schema_to_field(fname, schema, target.name)
            fields[fname] = (ftype, fld)

        # Convert target.name to CamelCase and add Tool suffix
        parts = target.name.replace("-", "_").split("_")
        camel_case = "".join(part.capitalize() for part in parts)
        model_name = f"{camel_case}Tool"

        from langroid.agent.tool_message import ToolMessage as _BaseToolMessage

        # IMPORTANT: Avoid clashes with reserved field names in Langroid ToolMessage!
        # First figure out which field names are reserved
        reserved = set(_BaseToolMessage.__annotations__.keys())
        reserved.update(["recipient", "_handler", "name"])
        renamed: Dict[str, str] = {}
        new_fields: Dict[str, Tuple[type, Any]] = {}
        for fname, (ftype, fld) in fields.items():
            if fname in reserved:
                new_name = fname + "__"
                renamed[fname] = new_name
                new_fields[new_name] = (ftype, fld)
            else:
                new_fields[fname] = (ftype, fld)
        # now replace fields with our renamed‐aware mapping
        fields = new_fields

        # create Langroid ToolMessage subclass, with expected fields.
        tool_model = cast(
            Type[ToolMessage],
            create_model(  # type: ignore[call-overload]
                model_name,
                request=(str, target.name),
                purpose=(str, target.description or f"Use the tool {target.name}"),
                __base__=ToolMessage,
                **fields,
            ),
        )
        # Store ALL client configuration needed to recreate a client
        client_config = {
            "server": self.server,
            "sampling_handler": self.sampling_handler,
            "roots": self.roots,
            "log_handler": self.log_handler,
            "message_handler": self.message_handler,
            "read_timeout_seconds": self.read_timeout_seconds,
        }

        tool_model._client_config = client_config  # type: ignore [attr-defined]
        tool_model._renamed_fields = renamed  # type: ignore[attr-defined]

        # 2) define an arg-free call_tool_async()
        async def call_tool_async(itself: ToolMessage) -> Any:
            from langroid.agent.tools.mcp.fastmcp_client import FastMCPClient

            # pack up the payload
            payload = itself.dict(
                exclude=itself.Config.schema_extra["exclude"].union(
                    ["request", "purpose"]
                ),
            )

            # restore any renamed fields
            for orig, new in itself.__class__._renamed_fields.items():  # type: ignore
                if new in payload:
                    payload[orig] = payload.pop(new)

            client_cfg = getattr(itself.__class__, "_client_config", None)  # type: ignore
            if not client_cfg:
                # Fallback or error - ideally _client_config should always exist
                raise RuntimeError(f"Client config missing on {itself.__class__}")

            # Connect the client if not yet connected and keep the connection open
            if self.persist_connection:
                if not self.client:
                    await self.connect()

                return await self.call_mcp_tool(itself.request, payload)

            # open a fresh client, call the tool, then close
            async with FastMCPClient(**client_cfg) as client:  # type: ignore
                return await client.call_mcp_tool(itself.request, payload)

        tool_model.call_tool_async = call_tool_async  # type: ignore

        if not hasattr(tool_model, "handle_async"):
            # 3) define handle_async() method with optional agent parameter
            from typing import Union

            async def handle_async(
                self: ToolMessage, agent: Optional[Agent] = None
            ) -> Union[str, Optional[ChatDocument]]:
                """
                Auto-generated handler for MCP tool. Returns ChatDocument with files
                if files are present and agent is provided, otherwise returns text.

                To override: define your own handle_async method with matching signature
                if you need file handling, or simpler signature if you only need text.
                """
                response = await self.call_tool_async()  # type: ignore[attr-defined]
                if response is None:
                    return None

                content, files = response

                # If we have files and an agent is provided, return a ChatDocument
                if files and agent is not None:
                    return agent.create_agent_response(
                        content=content,
                        files=files,
                    )
                else:
                    # Otherwise, just return the text content
                    return str(content) if content is not None else None

            # add the handle_async() method to the tool model
            tool_model.handle_async = handle_async  # type: ignore

        return tool_model

    async def get_tools_async(self) -> List[Type[ToolMessage]]:
        """
        Get all available tools as Langroid ToolMessage classes,
        handling nested schemas, with `handle_async` methods
        """
        if not self.client:
            if self.persist_connection:
                await self.connect()
                assert self.client
            else:
                raise RuntimeError(
                    "Client not initialized. Use async with FastMCPClient."
                )
        resp = await self.client.list_tools()
        return [await self.get_tool_async(t.name) for t in resp]

    async def get_mcp_tool_async(self, name: str) -> Optional[Tool]:
        """Find the "original" MCP Tool (i.e. of type mcp.types.Tool) on the server
         matching `name`, or None if missing. This contains the metadata for the tool:
         name, description, inputSchema, etc.

        Args:
            name: Name of the tool to look up.

        Returns:
            The raw Tool object from the server, or None.
        """
        if not self.client:
            if self.persist_connection:
                await self.connect()
                assert self.client
            else:
                raise RuntimeError(
                    "Client not initialized. Use async with FastMCPClient."
                )
        resp: List[Tool] = await self.client.list_tools()
        return next((t for t in resp if t.name == name), None)

    def _convert_tool_result(
        self,
        tool_name: str,
        result: CallToolResult,
    ) -> Optional[str | tuple[str, list[FileAttachment]]]:
        if result.isError:
            # Log more detailed error information
            error_content = None
            if result.content and len(result.content) > 0:
                try:
                    error_content = [
                        item.text if hasattr(item, "text") else str(item)
                        for item in result.content
                    ]
                except Exception as e:
                    error_content = [f"Could not extract error content: {str(e)}"]

            self.logger.error(
                f"Error calling MCP tool {tool_name}. Details: {error_content}"
            )
            return f"ERROR: Tool call failed - {error_content}"

        results_text = [
            item.text for item in result.content if isinstance(item, TextContent)
        ]
        results_file = []

        for item in result.content:
            if isinstance(item, ImageContent) and self.forward_images:
                results_file.append(
                    FileAttachment.from_bytes(
                        b64decode(item.data),
                        mime_type=item.mimeType,
                    )
                )
            elif isinstance(item, EmbeddedResource):
                if (
                    isinstance(item.resource, TextResourceContents)
                    and self.forward_text_resources
                ):
                    results_text.append(item.resource.text)
                elif (
                    isinstance(item.resource, BlobResourceContents)
                    and self.forward_blob_resources
                ):
                    results_file.append(
                        FileAttachment.from_io(
                            BytesIO(b64decode(item.resource.blob)),
                            mime_type=item.resource.mimeType,
                        )
                    )

        return "\n".join(results_text), results_file

    async def call_mcp_tool(
        self, tool_name: str, arguments: Dict[str, Any]
    ) -> Optional[tuple[str, list[FileAttachment]]]:
        """Call an MCP tool with the given arguments.

        Args:
            tool_name: Name of the tool to call.
            arguments: Arguments to pass to the tool.

        Returns:
            The result of the tool call.
        """
        if not self.client:
            if self.persist_connection:
                await self.connect()
                assert self.client
            else:
                raise RuntimeError(
                    "Client not initialized. Use async with FastMCPClient."
                )
        result: CallToolResult = await self.client.session.call_tool(
            tool_name,
            arguments,
        )
        results = self._convert_tool_result(tool_name, result)

        if isinstance(results, str):
            return results, []

        return results


# ==============================================================================
# Convenience functions (wrappers around FastMCPClient methods)
# These are useful for one-off calls without needing to manage the
# FastMCPClient context explicitly.
# ==============================================================================


async def get_tool_async(
    server: FastMCPServerSpec,
    tool_name: str,
    **client_kwargs: Any,
) -> Type[ToolMessage]:
    """Get a single Langroid ToolMessage subclass for a specific MCP tool name (async).

    This is a convenience wrapper that creates a temporary FastMCPClient.

    Args:
        server: Specification of the FastMCP server to connect to.
        tool_name: The name of the tool to retrieve.
        **client_kwargs: Additional keyword arguments to pass to the
            FastMCPClient constructor (e.g., sampling_handler, roots).

    Returns:
        A dynamically created Langroid ToolMessage subclass representing the
        requested tool.
    """
    async with FastMCPClient(server, **client_kwargs) as client:
        return await client.get_tool_async(tool_name)


def get_tool(
    server: FastMCPServerSpec,
    tool_name: str,
    **client_kwargs: Any,
) -> Type[ToolMessage]:
    """Get a single Langroid ToolMessage subclass
    for a specific MCP tool name (synchronous).

    This is a convenience wrapper that creates a temporary FastMCPClient and runs the
    async `get_tool_async` function using `asyncio.run()`.

    Args:
        server: Specification of the FastMCP server to connect to.
        tool_name: The name of the tool to retrieve.
        **client_kwargs: Additional keyword arguments to pass to the
            FastMCPClient constructor (e.g., sampling_handler, roots).

    Returns:
        A dynamically created Langroid ToolMessage subclass representing the
        requested tool.
    """
    return asyncio.run(get_tool_async(server, tool_name, **client_kwargs))


async def get_tools_async(
    server: FastMCPServerSpec,
    **client_kwargs: Any,
) -> List[Type[ToolMessage]]:
    """Get all available tools as Langroid ToolMessage subclasses (async).

    This is a convenience wrapper that creates a temporary FastMCPClient.

    Args:
        server: Specification of the FastMCP server to connect to.
        **client_kwargs: Additional keyword arguments to pass to the
            FastMCPClient constructor (e.g., sampling_handler, roots).

    Returns:
        A list of dynamically created Langroid ToolMessage subclasses
        representing all available tools on the server.
    """
    async with FastMCPClient(server, **client_kwargs) as client:
        return await client.get_tools_async()


def get_tools(
    server: FastMCPServerSpec,
    **client_kwargs: Any,
) -> List[Type[ToolMessage]]:
    """Get all available tools as Langroid ToolMessage subclasses (synchronous).

    This is a convenience wrapper that creates a temporary FastMCPClient and runs the
    async `get_tools_async` function using `asyncio.run()`.

    Args:
        server: Specification of the FastMCP server to connect to.
        **client_kwargs: Additional keyword arguments to pass to the
            FastMCPClient constructor (e.g., sampling_handler, roots).

    Returns:
        A list of dynamically created Langroid ToolMessage subclasses
        representing all available tools on the server.
    """
    return asyncio.run(get_tools_async(server, **client_kwargs))


async def get_mcp_tool_async(
    server: FastMCPServerSpec,
    name: str,
    **client_kwargs: Any,
) -> Optional[Tool]:
    """Get the raw MCP Tool object for a specific tool name (async).

    This is a convenience wrapper that creates a temporary FastMCPClient to
    retrieve the tool definition from the server.

    Args:
        server: Specification of the FastMCP server to connect to.
        name: The name of the tool to look up.
        **client_kwargs: Additional keyword arguments to pass to the
            FastMCPClient constructor.

    Returns:
        The raw `mcp.types.Tool` object from the server, or `None` if the tool
        is not found.
    """
    async with FastMCPClient(server, **client_kwargs) as client:
        return await client.get_mcp_tool_async(name)


async def get_mcp_tools_async(
    server: FastMCPServerSpec,
    **client_kwargs: Any,
) -> List[Tool]:
    """Get all available raw MCP Tool objects from the server (async).

    This is a convenience wrapper that creates a temporary FastMCPClient to
    retrieve the list of tool definitions from the server.

    Args:
        server: Specification of the FastMCP server to connect to.
        **client_kwargs: Additional keyword arguments to pass to the
            FastMCPClient constructor.

    Returns:
        A list of raw `mcp.types.Tool` objects available on the server.
    """
    async with FastMCPClient(server, **client_kwargs) as client:
        if not client.client:
            raise RuntimeError("Client not initialized. Use async with FastMCPClient.")
        return await client.client.list_tools()
</file>

<file path="tests/main/test_tool_handler.py">
"""
Test various handler method signatures for ToolMessage classes.
Tests the new flexible handle method that can accept optional agent parameter.
"""

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocument
from langroid.agent.tool_message import ToolMessage


class HandleNoArgsMsg(ToolMessage):
    """Tool with handle() method - no arguments"""

    request: str = "handle_no_args"
    purpose: str = "Test handle with no arguments"

    def handle(self) -> str:
        return "handled with no args"


class HandleChatDocMsg(ToolMessage):
    """Tool with handle(chat_doc) method"""

    request: str = "handle_chat_doc"
    purpose: str = "Test handle with chat_doc"
    data: str

    def handle(self, chat_doc: ChatDocument) -> str:
        # Actually use the chat_doc parameter
        return (
            f"handled with chat_doc content '{chat_doc.content}' and "
            f"data: {self.data}"
        )


class HandleAgentMsg(ToolMessage):
    """Tool with handle(agent) method"""

    request: str = "handle_agent"
    purpose: str = "Test handle with agent"

    def handle(self, agent: ChatAgent) -> str:
        return f"handled with agent: {agent.__class__.__name__}"


class HandleAgentChatDocMsg(ToolMessage):
    """Tool with handle(agent, chat_doc) method"""

    request: str = "handle_agent_chat_doc"
    purpose: str = "Test handle with agent and chat_doc"
    data: str

    def handle(self, agent: ChatAgent, chat_doc: ChatDocument) -> str:
        # Use both agent and chat_doc
        return (
            f"handled with agent {agent.__class__.__name__}, "
            f"chat_doc '{chat_doc.content}', data: {self.data}"
        )


class HandleChatDocAgentMsg(ToolMessage):
    """Tool with handle(chat_doc, agent) method - reversed order"""

    request: str = "handle_chat_doc_agent"
    purpose: str = "Test handle with chat_doc and agent in reverse order"
    data: str

    def handle(self, chat_doc: ChatDocument, agent: ChatAgent) -> str:
        # Use both parameters in the order they're defined
        return (
            f"chat_doc '{chat_doc.content}' first, "
            f"then agent {agent.__class__.__name__}, data: {self.data}"
        )


class HandleNoAnnotationsMsg(ToolMessage):
    """Tool with handle method but no type annotations - single param"""

    request: str = "handle_no_annotations"
    purpose: str = "Test handle without type annotations"
    data: str

    def handle(self, chat_doc) -> str:
        # Should fall back to duck typing - assume single arg is chat_doc
        # Access content attribute to verify it's actually a ChatDocument
        return (
            f"handled without annotations - "
            f"chat_doc: '{chat_doc.content}', data: {self.data}"
        )


class HandleNoAnnotationsAgentMsg(ToolMessage):
    """Tool with handle method expecting agent but no type annotations"""

    request: str = "handle_no_annotations_agent"
    purpose: str = "Test handle with agent but no annotations"

    def handle(self, agent) -> str:
        # Parameter name 'agent' should be recognized even without annotations
        return f"handled agent without annotations: {agent.__class__.__name__}"


class HandleNoAnnotationsBothMsg(ToolMessage):
    """Tool with handle method expecting both params but no type annotations"""

    request: str = "handle_no_annotations_both"
    purpose: str = "Test handle with both params but no annotations"
    data: str

    def handle(self, agent, chat_doc) -> str:
        # Parameter names 'agent' and 'chat_doc' should be recognized
        return (
            f"handled with agent {agent.__class__.__name__}, "
            f"chat_doc '{chat_doc.content}', data: {self.data}"
        )


class HandleNoAnnotationsBothReversedMsg(ToolMessage):
    """Tool with handle method with reversed parameter order but no type annotations"""

    request: str = "handle_no_annotations_both_reversed"
    purpose: str = "Test handle with reversed params but no annotations"
    data: str

    def handle(self, chat_doc, agent) -> str:
        # Parameter order should be respected based on names
        return (
            f"chat_doc '{chat_doc.content}' first, "
            f"agent {agent.__class__.__name__}, data: {self.data}"
        )


Foo = ChatDocument


class Bar(ChatAgent):
    pass


class HandleClassAnnotations(ToolMessage):
    """
    Tool with handle method with type annotations matched via
    subclassing and non-standard self-parameter naming.
    """

    request: str = "handle_class_annotations"
    purpose: str = "Test handle with annotations matched via subclassing."
    data: str

    def handle(this, bar: Bar, foo: Foo):
        return (
            f"agent {bar.__class__.__name__}, data: {this.data} first"
            f"chat_doc '{foo.content}'"
        )


class HandleClassAnnotationsReversed(ToolMessage):
    """
    Tool with handle method with reversed parameter order and type
    annotations matched via subclassing and non-standard
    self-parameter naming.
    """

    request: str = "handle_class_annotations_reversed"
    purpose: str = (
        "Test handle with reversed params and annotations matched via subclassing."
    )
    data: str

    def handle(this, foo: Foo, bar: Bar):
        return (
            f"chat_doc '{foo.content}' first, "
            f"agent {bar.__class__.__name__}, data: {this.data}"
        )


class TestToolHandler:
    """Test the flexible tool handler extraction"""

    def test_handle_no_args(self):
        """Test handle() with no arguments"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleNoArgsMsg)

        msg = HandleNoArgsMsg()
        result = agent.handle_no_args(msg)
        assert result == "handled with no args"

    def test_handle_chat_doc(self):
        """Test handle(chat_doc) with type annotation"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleChatDocMsg)

        msg = HandleChatDocMsg(data="test data")
        chat_doc = agent.create_agent_response(content="test")
        result = agent.handle_chat_doc(msg, chat_doc)
        assert result == "handled with chat_doc content 'test' and data: test data"

    def test_handle_agent(self):
        """Test handle(agent) with type annotation"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleAgentMsg)

        msg = HandleAgentMsg()
        result = agent.handle_agent(msg)
        assert result == "handled with agent: ChatAgent"

    def test_handle_agent_chat_doc(self):
        """Test handle(agent, chat_doc) with type annotations"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleAgentChatDocMsg)

        msg = HandleAgentChatDocMsg(data="test data")
        chat_doc = agent.create_agent_response(content="test")
        result = agent.handle_agent_chat_doc(msg, chat_doc)
        assert (
            result == "handled with agent ChatAgent, chat_doc 'test', data: test data"
        )

    def test_handle_chat_doc_agent(self):
        """Test handle(chat_doc, agent) with reversed parameter order"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleChatDocAgentMsg)

        msg = HandleChatDocAgentMsg(data="test data")
        chat_doc = agent.create_agent_response(content="test")
        result = agent.handle_chat_doc_agent(msg, chat_doc)
        assert result == "chat_doc 'test' first, then agent ChatAgent, data: test data"

    def test_handle_no_annotations(self):
        """Test handle with no type annotations - should use duck typing"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleNoAnnotationsMsg)

        msg = HandleNoAnnotationsMsg(data="test data")
        chat_doc = agent.create_agent_response(content="test")
        result = agent.handle_no_annotations(msg, chat_doc)
        assert result == (
            "handled without annotations - " "chat_doc: 'test', data: test data"
        )

    def test_handle_no_annotations_agent(self):
        """Test handle with agent param but no type annotations"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleNoAnnotationsAgentMsg)

        msg = HandleNoAnnotationsAgentMsg()
        # When called from agent, it won't pass chat_doc if the handler
        # only expects one parameter
        result = agent.handle_no_annotations_agent(msg)
        assert result == "handled agent without annotations: ChatAgent"

    def test_handle_no_annotations_both(self):
        """Test handle with both params but no type annotations"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleNoAnnotationsBothMsg)

        msg = HandleNoAnnotationsBothMsg(data="test data")
        chat_doc = agent.create_agent_response(content="test")
        result = agent.handle_no_annotations_both(msg, chat_doc)
        assert result == (
            "handled with agent ChatAgent, " "chat_doc 'test', data: test data"
        )

    def test_handle_no_annotations_both_reversed(self):
        """Test handle with reversed params but no type annotations"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleNoAnnotationsBothReversedMsg)

        msg = HandleNoAnnotationsBothReversedMsg(data="test data")
        chat_doc = agent.create_agent_response(content="test")
        result = agent.handle_no_annotations_both_reversed(msg, chat_doc)
        assert result == "chat_doc 'test' first, agent ChatAgent, data: test data"

    def test_backward_compatibility(self):
        """Test that existing tools with response() method still work"""
        from langroid.agent.tools.orchestration import DoneTool

        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(DoneTool)

        # DoneTool uses response(agent) method
        msg = DoneTool(content="task complete")
        result = agent.done_tool(msg)
        assert result is not None

    def test_agent_response_with_tool_message(self):
        """Test agent_response method with various tool messages"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleAgentChatDocMsg)

        # Create a tool message
        tool_msg = HandleAgentChatDocMsg(data="response test")

        # When using a handler that expects both agent and chat_doc,
        # we need to provide the tool message within a ChatDocument
        # so that chat_doc is available
        chat_doc = agent.create_agent_response(content=tool_msg.json())
        response = agent.agent_response(chat_doc)
        assert response is not None
        assert isinstance(response, ChatDocument)
        assert "response test" in response.content

    def test_agent_response_with_chat_document(self):
        """Test agent_response with ChatDocument containing tool message"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleChatDocAgentMsg)

        # Create a tool message
        tool_msg = HandleChatDocAgentMsg(data="chat doc test")

        # Create a ChatDocument with the tool message
        chat_doc = agent.create_agent_response(content=tool_msg.json())

        # Process through agent_response
        response = agent.agent_response(chat_doc)
        assert response is not None
        assert isinstance(response, ChatDocument)
        # Check that our handle method was called with both agent and chat_doc
        assert "chat_doc" in response.content
        assert "ChatAgent" in response.content

    def test_agent_response_no_annotations(self):
        """Test agent_response with handler that has no type annotations"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleNoAnnotationsBothMsg)

        # Create a tool message
        tool_msg = HandleNoAnnotationsBothMsg(data="no annotations test")

        # Since the handler expects both agent and chat_doc,
        # we need to provide it within a ChatDocument
        chat_doc = agent.create_agent_response(content=tool_msg.json())
        response = agent.agent_response(chat_doc)
        assert response is not None
        assert isinstance(response, ChatDocument)
        assert "no annotations test" in response.content
        assert "ChatAgent" in response.content

    def test_agent_response_agent_only(self):
        """Test agent_response with handler that only takes agent parameter"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleAgentMsg)

        # Create a tool message
        tool_msg = HandleAgentMsg()

        # Test with tool message as JSON string
        json_msg = tool_msg.json()
        response = agent.agent_response(json_msg)
        assert response is not None
        assert isinstance(response, ChatDocument)
        assert "handled with agent: ChatAgent" in response.content

    def test_agent_response_chat_doc_only(self):
        """Test agent_response with handler that only takes chat_doc parameter"""
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleChatDocMsg)

        # Create a tool message
        tool_msg = HandleChatDocMsg(data="chat doc only test")

        # For handlers that only need chat_doc, we can pass as ChatDocument
        chat_doc = agent.create_agent_response(content=tool_msg.json())
        response = agent.agent_response(chat_doc)
        assert response is not None
        assert isinstance(response, ChatDocument)
        assert "chat doc only test" in response.content

    def test_agent_response_class_annotations(self):
        """
        Test agent_response with handler that requires annotation
        processing via subclassing
        """
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleClassAnnotations)

        # Create a tool message
        tool_msg = HandleClassAnnotations(data="class annotations test")

        # Since the handler expects both agent and chat_doc,
        # we need to provide it within a ChatDocument
        chat_doc = agent.create_agent_response(content=tool_msg.json())
        response = agent.agent_response(chat_doc)
        assert response is not None
        assert isinstance(response, ChatDocument)
        assert "class annotations test" in response.content
        assert "agent ChatAgent" in response.content

    def test_agent_response_class_annotations_reversed(self):
        """
        Test agent_response with handler that requires annotation
        processing via subclassing and reversed order
        """
        agent = ChatAgent(ChatAgentConfig())
        agent.enable_message(HandleClassAnnotationsReversed)

        # Create a tool message
        tool_msg = HandleClassAnnotationsReversed(
            data="class annotations test reversed"
        )

        # Since the handler expects both agent and chat_doc,
        # we need to provide it within a ChatDocument
        chat_doc = agent.create_agent_response(content=tool_msg.json())
        response = agent.agent_response(chat_doc)
        assert response is not None
        assert isinstance(response, ChatDocument)
        assert "class annotations test reversed" in response.content
        assert "agent ChatAgent" in response.content
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Commands

### Development
- Install core dependencies: `pip install -e .`
- Install dev dependencies: `pip install -e ".[dev]"`
- Install specific feature groups:
  - Document chat features: `pip install -e ".[doc-chat]"`
  - Database features: `pip install -e ".[db]"`
  - HuggingFace embeddings: `pip install -e ".[hf-embeddings]"`
  - All features: `pip install -e ".[all]"`
- Run linting and type checking: `make check`
- Format code: `make lint`

### Testing
- Run all tests: `pytest tests/`
- Run specific test: `pytest tests/main/test_file.py::test_function`
- Run tests with coverage: `pytest --cov=langroid tests/`
- Run only main tests: `make tests` (uses `pytest tests/main`)

### Linting and Type Checking
- Lint code: `make check` (runs black, ruff check, mypy)
- Format only: `make lint` (runs black and ruff fix)
- Type check only: `make type-check`
- Always use `make check` to run lints + mypy before trying to commit changes

### Version and Release Management
- Bump version: `./bump_version.sh [patch|minor|major]`
- Or use make commands:
  - `make all-patch` - Bump patch version, build, push, release
  - `make all-minor` - Bump minor version, build, push, release
  - `make all-major` - Bump major version, build, push, release

## Architecture

Langroid is a framework for building LLM-powered agents that can use tools and collaborate with each other.

### Core Components:

1. **Agents** (`langroid/agent/`):
   - `chat_agent.py` - Base ChatAgent that can converse and use tools
   - `task.py` - Handles execution flow for agents
   - `special/` - Domain-specific agents (doc chat, table chat, SQL chat, etc.)
   - `openai_assistant.py` - Integration with OpenAI Assistant API

2. **Tools** (`langroid/agent/tools/`):
   - Tool system for agents to interact with external systems
   - `tool_message.py` - Protocol for tool messages
   - Various search tools (Google, DuckDuckGo, Tavily, Exa, etc.)

3. **Language Models** (`langroid/language_models/`):
   - Abstract interfaces for different LLM providers
   - Implementations for OpenAI, Azure, local models, etc.
   - Support for hundreds of LLMs via LiteLLM

4. **Vector Stores** (`langroid/vector_store/`):
   - Abstract interface and implementations for different vector databases
   - Includes support for Qdrant, Chroma, LanceDB, Pinecone, PGVector, Weaviate

5. **Document Processing** (`langroid/parsing/`):
   - Parse and process documents from various formats
   - Chunk text for embedding and retrieval
   - Support for PDF, DOCX, images, and more

6. **Embedding Models** (`langroid/embedding_models/`):
   - Abstract interface for embedding generation
   - Support for OpenAI, HuggingFace, and custom embeddings

### Key Multi-Agent Patterns:

- **Task Delegation**: Agents can delegate tasks to other agents through hierarchical task structures
- **Message Passing**: Agents communicate by transforming and passing messages
- **Collaboration**: Multiple agents can work together on complex tasks

### Key Security Features:

- The `full_eval` flag in both `TableChatAgentConfig` and `VectorStoreConfig` controls code injection protection
- Defaults to `False` for security, set to `True` only in trusted environments

## Documentation

- Main documentation is in the `docs/` directory
- Examples in the `examples/` directory demonstrate usage patterns
- Quick start examples available in `examples/quick-start/`

## MCP (Model Context Protocol) Tools Integration

Langroid provides comprehensive support for MCP tools through the `langroid.agent.tools.mcp` module. Here are the key patterns and approaches:

### MCP Tool Creation Methods

#### 1. Using the `@mcp_tool` Decorator (Module Level)
```python
from langroid.agent.tools.mcp import mcp_tool
from fastmcp.client.transports import StdioTransport

transport = StdioTransport(command="...", args=[...])

@mcp_tool(transport, "tool_name")
class MyTool(lr.ToolMessage):
    async def handle_async(self):
        result = await self.call_tool_async()
        # custom processing
        return result
```

**Important**: The decorator creates the transport connection at module import time, so it must be used at module level (not inside async functions).

#### 2. Using `get_tool_async` (Inside Async Functions)
```python
from langroid.agent.tools.mcp.fastmcp_client import get_tool_async

async def main():
    transport = StdioTransport(command="...", args=[...])
    BaseTool = await get_tool_async(transport, "tool_name")
    
    class MyTool(BaseTool):
        async def handle_async(self):
            result = await self.call_tool_async()
            # custom processing
            return result
```

**Use this approach when**:
- Creating tools inside async functions
- Need to avoid event loop conflicts
- Want to delay transport creation until runtime

### Transport Types and Event Loop Considerations

- **StdioTransport**: Creates subprocess immediately, can cause "event loop closed" errors if created at module level in certain contexts
- **SSETransport**: HTTP-based, generally safer for module-level creation
- **Best Practice**: Create transports inside async functions when possible, use `asyncio.run()` wrapper for Fire CLI integration

### Tool Message Request Field and Agent Handlers

When you get an MCP tool named "my_tool", Langroid automatically:

1. **Sets the `request` field**: The dynamically created ToolMessage subclass has `request = "my_tool"`
2. **Enables custom agent handlers**: Agents can define these methods:
   - `my_tool()` - synchronous handler
   - `my_tool_async()` - async handler

The agent's message routing system automatically calls these handlers when the tool is used.

### Custom `handle_async` Method Override

Both decorator and non-decorator approaches support overriding `handle_async`:

```python
class MyTool(BaseTool):  # or use @mcp_tool decorator
    async def handle_async(self):
        # Get raw result from MCP server
        result = await self.call_tool_async()
        
        # Option 1: Return processed result to LLM (continues conversation)
        return f"<ProcessedResult>{result}</ProcessedResult>"
        
        # Option 2: Return ResultTool to terminate task
        return MyResultTool(answer=result)
```

### Common Async Issues and Solutions

**Problem**: "RuntimeError: asyncio.run() cannot be called from a running event loop"
**Solution**: Use `get_tool_async` instead of `@mcp_tool` decorator when already in async context

**Problem**: "RuntimeError: Event loop is closed"
**Solution**: 
- Move transport creation inside async functions
- Use `asyncio.run()` wrapper for Fire CLI integration:
```python
if __name__ == "__main__":
    import asyncio
    def run_main(**kwargs):
        asyncio.run(main(**kwargs))
    Fire(run_main)
```

### MCP Tool Integration Examples

See `examples/mcp/` for working examples:
- `gitmcp.py` - HTTP-based SSE transport
- `pyodide_code_executor.py` - Subprocess-based stdio transport with proper async handling

## Testing and Tool Message Patterns

### MockLM for Testing Tool Generation
- Use `MockLM` with `response_dict` to simulate LLM responses that include tool messages
- Set `tools=[ToolClass]` or `enable_message=[ToolClass]` on the agent to enable tool handling
- The `try_get_tool_messages()` method can extract tool messages from LLM responses with `all_tools=True`

### Task Termination Control
- `TaskConfig` has `done_if_tool` parameter to terminate tasks when any tool is generated
- `Task.done()` method checks `result.agent_response` for tool content when this flag is set
- Useful for workflows where tool generation signals task completion

### Testing Tool-Based Task Flows
```python
# Example: Test task termination on tool generation
config = TaskConfig(done_if_tool=True)
task = Task(agent, config=config)
response_dict = {"content": '{"request": "my_tool", "param": "value"}'}
```

## Multi-Agent System Development

### Important Patterns and Best Practices

#### 1. Pydantic Imports
**ALWAYS import Pydantic classes from `langroid.pydantic_v1`**, not from `pydantic` directly:
```python
# CORRECT
from langroid.pydantic_v1 import Field, BaseModel

# WRONG - will cause issues
from pydantic import Field, BaseModel
```

#### 2. Tool Name References in System Messages
When referencing tool names in f-strings within system messages, use the `.name()` method:
```python
system_message: str = f"""
Use {MyTool.name()} to perform the action.
"""
```
This works at module level in configs, but be aware that complex initialization at module level can sometimes cause issues.

#### 3. Agent Configuration with LLM
Always specify the LLM configuration explicitly in agent configs:
```python
class MyAgentConfig(lr.ChatAgentConfig):
    name: str = "MyAgent"
    llm: lm.OpenAIGPTConfig = lm.OpenAIGPTConfig(
        chat_model="gpt-4",  # or "gpt-4.1" etc.
    )
    system_message: str = "..."
```

#### 4. Tool Organization in Multi-Agent Systems
When tools delegate to agents:
- Define agent configs and agents BEFORE the tools that use them
- Tools can directly instantiate agents in their `handle()` methods:
```python
class MyTool(lr.ToolMessage):
    def handle(self) -> str:
        agent = MyAgent(MyAgentConfig())
        task = lr.Task(agent, interactive=False)
        result = task.run(prompt)
        return result.content
```

#### 5. Task Termination with Done Sequences
Use `done_sequences` for precise task termination control:
```python
# For a task that should complete after: Tool -> Agent handles -> LLM responds
task = lr.Task(
    agent,
    interactive=False,
    config=lr.TaskConfig(done_sequences=["T,A,L"]),
)
```

Common patterns:
- `"T,A"` - Tool used and handled by agent
- `"T,A,L"` - Tool used, handled, then LLM responds
- `"T[specific_tool],A"` - Specific tool used and handled

See `docs/notes/task-termination.md` for comprehensive documentation.

#### 6. Handling Non-Tool LLM Responses
Use `handle_llm_no_tool` in agent configs to handle cases where the LLM forgets to use a tool:
```python
class MyAgentConfig(lr.ChatAgentConfig):
    handle_llm_no_tool: str = "You FORGOT to use one of your TOOLs!"
```

#### 7. Agent Method Parameters
Note that `ChatAgentConfig` does not have a `use_tools` parameter. Instead, enable tools on the agent after creation:
```python
agent = MyAgent(config)
agent.enable_message([Tool1, Tool2, Tool3])  # Pass list of tool classes
```

## Commit and Pull Request Guidelines

- Never include "co-authored by Claude Code" or "created by Claude" in commit messages or pull request descriptions

## Codecov Badge Fix (June 2025)

- Fixed broken Codecov badge in README by removing the token parameter from the URL
- Changed from `https://codecov.io/gh/langroid/langroid/branch/main/graph/badge.svg?token=H94BX5F0TE` to `https://codecov.io/gh/langroid/langroid/graph/badge.svg`
- Tokens are not needed for public repositories and can cause GitHub rendering issues
</file>

<file path="Makefile">
.PHONY: setup check lint tests docs nodocs loc

SHELL := /bin/bash

.PHONY: setup update

setup: ## Setup the git pre-commit hooks
	uv run pre-commit install

update: ## Update the git pre-commit hooks
	uv run pre-commit autoupdate

.PHONY: type-check
type-check:
	@uv run pre-commit install
	@uv run pre-commit autoupdate
	@uv run pre-commit run --all-files
	@echo "Running black..."
	@uv run black --check .
	@echo "Running ruff check (without fix)..."
	@uv run ruff check .
	@echo "Running mypy...";
	@uv run mypy -p langroid
	@echo "All checks passed!"

.PHONY: lint
lint:
	uv run black .
	uv run ruff check . --fix
	@echo "Auto-fixing issues in examples folder..."
	@uv run ruff check examples/ --fix-only --no-force-exclude

.PHONY: stubs
stubs:
	@echo "Generating Python stubs for the langroid package..."
	@uv run stubgen -p langroid -o stubs
	@echo "Stubs generated in the 'stubs' directory"

.PHONY: fix-pydantic

# Entry to replace pydantic imports in specified directories
fix-pydantic:
	@echo "Fixing pydantic imports..."
	@chmod +x scripts/fix-pydantic-imports.sh
	@./scripts/fix-pydantic-imports.sh


.PHONY: tests
tests:
	pytest tests/main --basetemp=/tmp/pytest


docs:
	@# Kill any existing 'mkdocs serve' processes.
	@pkill -f "mkdocs serve" 2>/dev/null || true
	@# Build the documentation.
	mkdocs build
	@# Serve the documentation in the background.
	mkdocs serve &
	@echo "Documentation is being served in the background."
	@echo "You can access the documentation at http://127.0.0.1:8000/"

nodocs:
	@# Kill any existing 'mkdocs serve' processes.
	@pkill -f "mkdocs serve" 2>/dev/null || echo "No 'mkdocs serve' process found."
	@echo "Stopped serving documentation."


loc:
	@echo "Lines in git-tracked files python files:"
	@git ls-files | grep '\.py$$' | xargs cat | grep -v '^\s*$$' | wc -l

.PHONY: repomix repomix-no-tests repomix-all

repomix: ## Generate llms.txt and llms-compressed.txt (includes tests)
	@echo "Generating llms.txt (with tests)..."
	@git ls-files | repomix --stdin
	@echo "Generating llms-compressed.txt..."
	@git ls-files | repomix --stdin --compress -o llms-compressed.txt
	@echo "Generated llms.txt and llms-compressed.txt"

repomix-no-tests: ## Generate llms-no-tests.txt (excludes tests)
	@echo "Generating llms-no-tests.txt (without tests)..."
	@git ls-files | grep -v "^tests/" | repomix --stdin -o llms-no-tests.txt
	@echo "Generating llms-no-tests-compressed.txt..."
	@git ls-files | grep -v "^tests/" | repomix --stdin --compress -o llms-no-tests-compressed.txt
	@echo "Generated llms-no-tests.txt and llms-no-tests-compressed.txt"

repomix-no-tests-no-examples: ## Generate llms-no-tests-no-examples.txt (excludes tests and examples)
	@echo "Generating llms-no-tests-no-examples.txt (without tests and examples)..."
	@git ls-files | grep -v -E "^(tests|examples)/" | repomix --stdin -o llms-no-tests-no-examples.txt
	@echo "Generating llms-no-tests-no-examples-compressed.txt..."
	@git ls-files | grep -v -E "^(tests|examples)/" | repomix --stdin --compress -o llms-no-tests-no-examples-compressed.txt
	@echo "Generated llms-no-tests-no-examples.txt and llms-no-tests-no-examples-compressed.txt"

repomix-all: repomix repomix-no-tests repomix-no-tests-no-examples ## Generate all repomix variants

.PHONY: check
check: fix-pydantic lint type-check repomix-all

.PHONY: revert-tag
revert-tag:
	@LATEST_TAG=$$(git describe --tags --abbrev=0) && \
	echo "Deleting tag: $$LATEST_TAG" && \
	git tag -d $$LATEST_TAG

.PHONY: revert-bump
revert-bump:
	@if git log -1 --pretty=%B | grep -q "bump"; then \
		git reset --hard HEAD~1; \
		echo "Reverted last commit (bump commit)"; \
	else \
		echo "Last commit was not a bump commit"; \
	fi

.PHONY: revert
revert: revert-bump revert-tag
	
.PHONY: bump-patch
bump-patch:
	@cz bump --increment PATCH

.PHONY: bump-minor
bump-minor:
	@cz bump --increment MINOR 

.PHONY: bump-major
bump-major:
	@cz bump --increment MAJOR 

.PHONY: build
build:
	@uv build

.PHONY: push
push:
	@git push origin main
	@git push origin --tags

.PHONY: clean
clean:
	-rm -rf dist/*

.PHONY: release
release:
	@VERSION=$$(cz version -p | cut -d' ' -f2) && gh release create $${VERSION} dist/*

.PHONY: all-patch
all-patch: bump-patch clean build push release

.PHONY: all-minor
all-minor: bump-minor clean build push release

.PHONY: all-major
all-major: bump-major clean build push release

.PHONY: publish
publish:
	uv publish
</file>

<file path="langroid/agent/special/doc_chat_agent.py">
# # langroid/agent/special/doc_chat_agent.py
"""
Agent that supports asking queries about a set of documents, using
retrieval-augmented generation (RAG).

Functionality includes:
- summarizing a document, with a custom instruction; see `summarize_docs`
- asking a question about a document; see `answer_from_docs`

Note: to use the sentence-transformer embeddings, you must install
langroid with the [hf-embeddings] extra, e.g.:

pip install "langroid[hf-embeddings]"

"""

import importlib
import logging
from collections import OrderedDict
from functools import cache
from typing import Any, Callable, Dict, List, Optional, Set, Tuple, no_type_check

import nest_asyncio
import numpy as np
import pandas as pd
from rich.prompt import Prompt

from langroid.agent.batch import run_batch_agent_method, run_batch_tasks
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.chat_document import ChatDocMetaData, ChatDocument
from langroid.agent.special.relevance_extractor_agent import (
    RelevanceExtractorAgent,
    RelevanceExtractorAgentConfig,
)
from langroid.agent.task import Task
from langroid.agent.tools.retrieval_tool import RetrievalTool
from langroid.embedding_models.models import (
    OpenAIEmbeddingsConfig,
    SentenceTransformerEmbeddingsConfig,
)
from langroid.language_models.base import StreamingIfAllowed
from langroid.language_models.openai_gpt import OpenAIChatModel, OpenAIGPTConfig
from langroid.mytypes import DocMetaData, Document, Entity
from langroid.parsing.document_parser import DocumentType
from langroid.parsing.parser import Parser, ParsingConfig, PdfParsingConfig, Splitter
from langroid.parsing.repo_loader import RepoLoader
from langroid.parsing.search import (
    find_closest_matches_with_bm25,
    find_fuzzy_matches_in_docs,
    preprocess_text,
)
from langroid.parsing.table_loader import describe_dataframe
from langroid.parsing.url_loader import BaseCrawlerConfig, TrafilaturaConfig, URLLoader
from langroid.parsing.urls import get_list_from_user, get_urls_paths_bytes_indices
from langroid.prompts.prompts_config import PromptsConfig
from langroid.prompts.templates import SUMMARY_ANSWER_PROMPT_GPT4
from langroid.utils.constants import NO_ANSWER
from langroid.utils.object_registry import ObjectRegistry
from langroid.utils.output import show_if_debug, status
from langroid.utils.output.citations import (
    extract_markdown_references,
    format_cited_references,
)
from langroid.utils.pydantic_utils import dataframe_to_documents, extract_fields
from langroid.vector_store.base import VectorStore, VectorStoreConfig
from langroid.vector_store.qdrantdb import QdrantDBConfig


@cache
def apply_nest_asyncio() -> None:
    nest_asyncio.apply()


logger = logging.getLogger(__name__)


DEFAULT_DOC_CHAT_SYSTEM_MESSAGE = """
You are a helpful assistant, helping me understand a collection of documents.

Your TASK is to answer questions about various documents.
You will be given various passages from these documents, and asked to answer questions
about them, or summarize them into coherent answers.
"""

CHUNK_ENRICHMENT_DELIMITER = "\n<##-##-##>\n"
try:
    # Check if  module exists in sys.path
    spec = importlib.util.find_spec("sentence_transformers")
    has_sentence_transformers = spec is not None
except Exception as e:
    logger.warning(f"Error checking sentence_transformers: {e}")
    has_sentence_transformers = False


hf_embed_config = SentenceTransformerEmbeddingsConfig(
    model_type="sentence-transformer",
    model_name="BAAI/bge-large-en-v1.5",
)

oai_embed_config = OpenAIEmbeddingsConfig(
    model_type="openai",
    model_name="text-embedding-3-small",
    dims=1536,
)


class ChunkEnrichmentAgentConfig(ChatAgentConfig):
    batch_size: int = 50
    delimiter: str = CHUNK_ENRICHMENT_DELIMITER
    enrichment_prompt_fn: Callable[[str], str] = lambda x: x


class DocChatAgentConfig(ChatAgentConfig):
    system_message: str = DEFAULT_DOC_CHAT_SYSTEM_MESSAGE
    summarize_prompt: str = SUMMARY_ANSWER_PROMPT_GPT4
    # extra fields to include in content as key=value pairs
    # (helps retrieval for table-like data)
    add_fields_to_content: List[str] = []
    filter_fields: List[str] = []  # fields usable in filter
    retrieve_only: bool = False  # only retr relevant extracts, don't gen summary answer
    extraction_granularity: int = 1  # granularity (in sentences) for relev extraction
    filter: str | None = (
        None  # filter condition for various lexical/semantic search fns
    )
    conversation_mode: bool = True  # accumulate message history?
    # retain retrieved context? Setting to True increases token consumption, but
    # helps LLM fix citation errors and improve accuracy of follow-up questions.
    retain_context: bool = False
    # In assistant mode, DocChatAgent receives questions from another Agent,
    # and those will already be in stand-alone form, so in this mode
    # there is no need to convert them to stand-alone form.
    assistant_mode: bool = False
    # Use LLM to generate hypothetical answer A to the query Q,
    # and use the embed(A) to find similar chunks in vecdb.
    # Referred to as HyDE in the paper:
    # https://arxiv.org/pdf/2212.10496.pdf
    # It is False by default; its benefits depends on the context.
    hypothetical_answer: bool = False
    # Optional config for chunk enrichment agent, e.g. to enrich
    # chunks with hypothetical questions, or keywords to increase
    # the "semantic surface area" of the chunks, which may help
    # improve retrieval.
    chunk_enrichment_config: Optional[ChunkEnrichmentAgentConfig] = None

    n_relevant_chunks: int = 3  # how many relevant chunks to retrieve finally
    n_similar_chunks: int = 3  # how many similar chunks to retrieve, by each method
    n_query_rephrases: int = 0
    n_neighbor_chunks: int = 0  # how many neighbors on either side of match to retrieve
    n_fuzzy_neighbor_words: int = 100  # num neighbor words to retrieve for fuzzy match
    use_fuzzy_match: bool = True
    use_bm25_search: bool = True
    use_reciprocal_rank_fusion: bool = False
    cross_encoder_reranking_model: str = (  # ignored if use_reciprocal_rank_fusion=True
        "cross-encoder/ms-marco-MiniLM-L-6-v2" if has_sentence_transformers else ""
    )
    rerank_diversity: bool = True  # rerank to maximize diversity?
    rerank_periphery: bool = True  # rerank to avoid Lost In the Middle effect?
    rerank_after_adding_context: bool = True  # rerank after adding context window?
    # RRF (Reciprocal Rank Fusion) score = 1/(rank + reciprocal_rank_fusion_constant)
    # see https://learn.microsoft.com/en-us/azure/search/hybrid-search-ranking#how-rrf-ranking-works
    reciprocal_rank_fusion_constant: float = 60.0
    cache: bool = True  # cache results
    debug: bool = False
    stream: bool = True  # allow streaming where needed
    split: bool = True  # use chunking
    relevance_extractor_config: None | RelevanceExtractorAgentConfig = (
        RelevanceExtractorAgentConfig(
            llm=None  # use the parent's llm unless explicitly set here
        )
    )
    doc_paths: List[str | bytes] = []
    default_paths: List[str] = [
        "https://news.ycombinator.com/item?id=35629033",
        "https://www.newyorker.com/tech/annals-of-technology/chatgpt-is-a-blurry-jpeg-of-the-web",
        "https://www.wired.com/1995/04/maes/",
        "https://cthiriet.com/articles/scaling-laws",
        "https://www.jasonwei.net/blog/emergence",
        "https://www.quantamagazine.org/the-unpredictable-abilities-emerging-from-large-ai-models-20230316/",
        "https://ai.googleblog.com/2022/11/characterizing-emergent-phenomena-in.html",
    ]
    parsing: ParsingConfig = ParsingConfig(  # modify as needed
        splitter=Splitter.MARKDOWN,
        chunk_size=1000,  # aim for this many tokens per chunk
        overlap=100,  # overlap between chunks
        max_chunks=10_000,
        # aim to have at least this many chars per chunk when
        # truncating due to punctuation
        min_chunk_chars=200,
        discard_chunk_chars=5,  # discard chunks with fewer than this many chars
        # set deprecated n_similar_docs to None; use n_similar_chunks above instead
        n_similar_docs=None,
        n_neighbor_ids=0,  # num chunk IDs to store on either side of each chunk
        pdf=PdfParsingConfig(
            # NOTE: PDF parsing is extremely challenging, and each library
            # has its own strengths and weaknesses.
            # Try one that works for your use case.
            # or "unstructured", "fitz", "pymupdf4llm", "pypdf"
            library="pymupdf4llm",
        ),
    )
    crawler_config: Optional[BaseCrawlerConfig] = TrafilaturaConfig()

    # Allow vecdb to be None in case we want to explicitly set it later
    vecdb: Optional[VectorStoreConfig] = QdrantDBConfig(
        collection_name="doc-chat-qdrantdb",
        replace_collection=False,
        storage_path=".qdrantdb/data/",
        embedding=hf_embed_config if has_sentence_transformers else oai_embed_config,
    )

    llm: OpenAIGPTConfig = OpenAIGPTConfig(
        type="openai",
        chat_model=OpenAIChatModel.GPT4o,
        completion_model=OpenAIChatModel.GPT4o,
        timeout=40,
    )
    prompts: PromptsConfig = PromptsConfig(
        max_tokens=1000,
    )


def _append_metadata_source(orig_source: str, source: str) -> str:
    if orig_source != source and source != "" and orig_source != "":
        return f"{orig_source.strip()}; {source.strip()}"
    return orig_source.strip() + source.strip()


class DocChatAgent(ChatAgent):
    """
    Agent for chatting with a collection of documents.
    """

    def __init__(
        self,
        config: DocChatAgentConfig,
    ):
        super().__init__(config)
        self.config: DocChatAgentConfig = config
        self.original_docs: List[Document] = []
        self.original_docs_length = 0
        self.from_dataframe = False
        self.df_description = ""
        self.chunked_docs: List[Document] = []
        self.chunked_docs_clean: List[Document] = []
        self.response: None | Document = None
        if (
            self.config.cross_encoder_reranking_model != ""
            and self.config.use_reciprocal_rank_fusion
        ):
            logger.warning(
                """
                Ignoring `cross_encoder_reranking_model` since you have set  
                `use_reciprocal_rank_fusion` to True.
                To use cross-encoder reranking, set
                `use_reciprocal_rank_fusion` to False.
                """
            )

        if (
            self.config.cross_encoder_reranking_model == ""
            and not self.config.use_reciprocal_rank_fusion
            and (self.config.use_fuzzy_match or self.config.use_bm25_search)
            and (
                self.config.n_relevant_chunks
                < self.config.n_similar_chunks
                * (self.config.use_bm25_search + self.config.use_fuzzy_match)
            )
        ):
            logger.warning(
                """
                DocChatAgent has been configured to have no cross encoder reranking,
                AND `use_reciprocal_rank_fusion` is set to False,
                AND `use_fuzzy_match` or `use_bm25_search` is True,
                AND `n_relevant_chunks` is less than `n_similar_chunks` * (
                    `use_bm25_search` + `use_fuzzy_match`
                ), 
                BUT there is no way to rerank the chunks retrieved by multiple methods,
                so we will set `use_reciprocal_rank_fusion` to True.
                """
            )
            self.config.use_reciprocal_rank_fusion = True

        # Handle backward compatibility for deprecated n_similar_docs
        if self.config.parsing.n_similar_docs is not None:
            logger.warning(
                """
                The parameter `parsing.n_similar_docs` is deprecated and will be
                removed in a future version. Please use `n_similar_chunks` and
                `n_relevant_chunks` instead, which provide more fine-grained
                control over retrieval.
                - n_similar_chunks: number of chunks to retrieve by each method
                - n_relevant_chunks: final number of chunks to return after reranking
                """
            )
            # Use the deprecated value for both parameters
            self.config.n_similar_chunks = self.config.parsing.n_similar_docs
            self.config.n_relevant_chunks = self.config.parsing.n_similar_docs

        self.ingest()

    def clear(self) -> None:
        """Clear the document collection and the specific collection in vecdb"""
        self.original_docs = []
        self.original_docs_length = 0
        self.chunked_docs = []
        self.chunked_docs_clean = []
        if self.vecdb is None:
            logger.warning("Attempting to clear VecDB, but VecDB not set.")
            return
        collection_name = self.vecdb.config.collection_name
        if collection_name is None:
            return
        try:
            # Note we may have used a vecdb with a config.collection_name
            # different from the agent's config.vecdb.collection_name!!
            self.vecdb.delete_collection(collection_name)
            # Close the old vecdb before creating a new one
            old_vecdb = self.vecdb
            if old_vecdb and hasattr(old_vecdb, "close"):
                old_vecdb.close()
            self.vecdb = VectorStore.create(self.vecdb.config)
        except Exception as e:
            logger.warning(
                f"""
                Error while deleting collection {collection_name}:
                {e}
                """
            )

    def ingest(self) -> None:
        """
        Chunk + embed + store docs specified by self.config.doc_paths
        """
        if len(self.config.doc_paths) == 0:
            # we must be using a previously defined collection
            # But let's get all the chunked docs so we can
            # do keyword and other non-vector searches
            if self.vecdb is None:
                logger.warning("VecDB not set: cannot ingest docs.")
            else:
                self.setup_documents(filter=self.config.filter)
            return
        self.ingest_doc_paths(self.config.doc_paths)  # type: ignore

    def ingest_doc_paths(
        self,
        paths: str | bytes | List[str | bytes],
        metadata: (
            List[Dict[str, Any]] | Dict[str, Any] | DocMetaData | List[DocMetaData]
        ) = [],
        doc_type: str | DocumentType | None = None,
    ) -> List[Document]:
        """Split, ingest docs from specified paths,
        do not add these to config.doc_paths.

        Args:
            paths: document paths, urls or byte-content of docs.
                The bytes option is intended to support cases where a document
                has already been read in as bytes (e.g. from an API or a database),
                and we want to avoid having to write it to a temporary file
                just to read it back in.
            metadata: List of metadata dicts, one for each path.
                If a single dict is passed in, it is used for all paths.
            doc_type: DocumentType to use for parsing, if known.
                MUST apply to all docs if specified.
                This is especially useful when the `paths` are of bytes type,
                to help with document type detection.
        Returns:
            List of Document objects
        """
        if isinstance(paths, str) or isinstance(paths, bytes):
            paths = [paths]
        all_paths = paths
        paths_meta: Dict[int, Any] = {}
        urls_meta: Dict[int, Any] = {}
        idxs = range(len(all_paths))
        url_idxs, path_idxs, bytes_idxs = get_urls_paths_bytes_indices(all_paths)
        urls = [all_paths[i] for i in url_idxs]
        paths = [all_paths[i] for i in path_idxs]
        bytes_list = [all_paths[i] for i in bytes_idxs]
        path_idxs.extend(bytes_idxs)
        paths.extend(bytes_list)
        if (isinstance(metadata, list) and len(metadata) > 0) or not isinstance(
            metadata, list
        ):
            if isinstance(metadata, list):
                idx2meta = {
                    p: (
                        m
                        if isinstance(m, dict)
                        else (isinstance(m, DocMetaData) and m.dict())
                    )  # appease mypy
                    for p, m in zip(idxs, metadata)
                }
            elif isinstance(metadata, dict):
                idx2meta = {p: metadata for p in idxs}
            else:
                idx2meta = {p: metadata.dict() for p in idxs}
            urls_meta = {u: idx2meta[u] for u in url_idxs}
            paths_meta = {p: idx2meta[p] for p in path_idxs}
        docs: List[Document] = []
        parser: Parser = Parser(self.config.parsing)
        if len(urls) > 0:
            for ui in url_idxs:
                meta = urls_meta.get(ui, {})
                loader = URLLoader(
                    urls=[all_paths[ui]],
                    parsing_config=self.config.parsing,
                    crawler_config=self.config.crawler_config,
                )  # type: ignore
                url_docs = loader.load()
                # update metadata of each doc with meta
                for d in url_docs:
                    orig_source = d.metadata.source
                    d.metadata = d.metadata.copy(update=meta)
                    d.metadata.source = _append_metadata_source(
                        orig_source, meta.get("source", "")
                    )
                docs.extend(url_docs)
        if len(paths) > 0:  # paths OR bytes are handled similarly
            for pi in path_idxs:
                meta = paths_meta.get(pi, {})
                p = all_paths[pi]
                path_docs = RepoLoader.get_documents(
                    p,
                    parser=parser,
                    doc_type=doc_type,
                )
                # update metadata of each doc with meta
                for d in path_docs:
                    orig_source = d.metadata.source
                    d.metadata = d.metadata.copy(update=meta)
                    d.metadata.source = _append_metadata_source(
                        orig_source, meta.get("source", "")
                    )
                docs.extend(path_docs)
        n_docs = len(docs)
        n_splits = self.ingest_docs(docs, split=self.config.split)
        if n_docs == 0:
            return []
        n_urls = len(urls)
        n_paths = len(paths)
        print(
            f"""
        [green]I have processed the following {n_urls} URLs
        and {n_paths} docs into {n_splits} parts:
        """.strip()
        )
        path_reps = [p if isinstance(p, str) else "bytes" for p in paths]
        print("\n".join([u for u in urls if isinstance(u, str)]))  # appease mypy
        print("\n".join(path_reps))
        return docs

    def ingest_docs(
        self,
        docs: List[Document],
        split: bool = True,
        metadata: (
            List[Dict[str, Any]] | Dict[str, Any] | DocMetaData | List[DocMetaData]
        ) = [],
    ) -> int:
        """
        Chunk docs into pieces, map each chunk to vec-embedding, store in vec-db

        Args:
            docs: List of Document objects
            split: Whether to split docs into chunks. Default is True.
                If False, docs are treated as "chunks" and are not split.
            metadata: List of metadata dicts, one for each doc, to augment
                whatever metadata is already in the doc.
                [ASSUME no conflicting keys between the two metadata dicts.]
                If a single dict is passed in, it is used for all docs.
        """
        if isinstance(metadata, list) and len(metadata) > 0:
            for d, m in zip(docs, metadata):
                orig_source = d.metadata.source
                m_dict = m if isinstance(m, dict) else m.dict()  # type: ignore
                d.metadata = d.metadata.copy(update=m_dict)  # type: ignore
                d.metadata.source = _append_metadata_source(
                    orig_source, m_dict.get("source", "")
                )
        elif isinstance(metadata, dict):
            for d in docs:
                orig_source = d.metadata.source
                d.metadata = d.metadata.copy(update=metadata)
                d.metadata.source = _append_metadata_source(
                    orig_source, metadata.get("source", "")
                )
        elif isinstance(metadata, DocMetaData):
            for d in docs:
                orig_source = d.metadata.source
                d.metadata = d.metadata.copy(update=metadata.dict())
                d.metadata.source = _append_metadata_source(
                    orig_source, metadata.source
                )

        self.original_docs.extend(docs)
        if self.parser is None:
            raise ValueError("Parser not set")
        for d in docs:
            if d.metadata.id in [None, ""]:
                d.metadata.id = ObjectRegistry.new_id()
        if split:
            docs = self.parser.split(docs)
        else:
            if self.config.n_neighbor_chunks > 0:
                self.parser.add_window_ids(docs)
            # we're not splitting, so we mark each doc as a chunk
            for d in docs:
                d.metadata.is_chunk = True
        if self.vecdb is None:
            raise ValueError("VecDB not set")
        if self.config.chunk_enrichment_config is not None:
            docs = self.enrich_chunks(docs)

        # If any additional fields need to be added to content,
        # add them as key=value pairs for all docs, before batching.
        # This helps retrieval for table-like data.
        # Note we need to do this at stage so that the embeddings
        # are computed on the full content with these additional fields.
        if len(self.config.add_fields_to_content) > 0:
            fields = [
                f for f in extract_fields(docs[0], self.config.add_fields_to_content)
            ]
            if len(fields) > 0:
                for d in docs:
                    key_vals = extract_fields(d, fields)
                    d.content = (
                        ",".join(f"{k}={v}" for k, v in key_vals.items())
                        + ",content="
                        + d.content
                    )
        docs = docs[: self.config.parsing.max_chunks]
        # vecdb should take care of adding docs in batches;
        # batching can be controlled via vecdb.config.batch_size
        if not docs:
            logging.warning(
                "No documents to ingest after processing. Skipping VecDB addition."
            )
            return 0  # Return 0 since no documents were added
        self.vecdb.add_documents(docs)
        self.original_docs_length = self.doc_length(docs)
        self.setup_documents(docs, filter=self.config.filter)
        return len(docs)

    def retrieval_tool(self, msg: RetrievalTool) -> str:
        """Handle the RetrievalTool message"""
        self.config.retrieve_only = True
        self.config.n_relevant_chunks = msg.num_results
        content_doc = self.answer_from_docs(msg.query)
        return content_doc.content

    @staticmethod
    def document_compatible_dataframe(
        df: pd.DataFrame,
        content: str = "content",
        metadata: List[str] = [],
    ) -> Tuple[pd.DataFrame, List[str]]:
        """
        Convert dataframe so it is compatible with Document class:
        - has "content" column
        - has an "id" column to be used as Document.metadata.id

        Args:
            df: dataframe to convert
            content: name of content column
            metadata: list of metadata column names

        Returns:
            Tuple[pd.DataFrame, List[str]]: dataframe, metadata
                - dataframe: dataframe with "content" column and "id" column
                - metadata: list of metadata column names, including "id"
        """
        if content not in df.columns:
            raise ValueError(
                f"""
                Content column {content} not in dataframe,
                so we cannot ingest into the DocChatAgent.
                Please specify the `content` parameter as a suitable
                text-based column in the dataframe.
                """
            )
        if content != "content":
            # rename content column to "content", leave existing column intact
            df = df.rename(columns={content: "content"}, inplace=False)

        actual_metadata = metadata.copy()
        if "id" not in df.columns:
            docs = dataframe_to_documents(df, content="content", metadata=metadata)
            ids = [str(d.id()) for d in docs]
            df["id"] = ids

        if "id" not in actual_metadata:
            actual_metadata += ["id"]

        return df, actual_metadata

    def ingest_dataframe(
        self,
        df: pd.DataFrame,
        content: str = "content",
        metadata: List[str] = [],
    ) -> int:
        """
        Ingest a dataframe into vecdb.
        """
        self.from_dataframe = True
        self.df_description = describe_dataframe(
            df, filter_fields=self.config.filter_fields, n_vals=5
        )
        df, metadata = DocChatAgent.document_compatible_dataframe(df, content, metadata)
        docs = dataframe_to_documents(df, content="content", metadata=metadata)
        # When ingesting a dataframe we will no longer do any chunking,
        # so we mark each doc as a chunk.
        # TODO - revisit this since we may still want to chunk large text columns
        for d in docs:
            d.metadata.is_chunk = True
        return self.ingest_docs(docs)

    def set_filter(self, filter: str) -> None:
        self.config.filter = filter
        self.setup_documents(filter=filter)

    def setup_documents(
        self,
        docs: List[Document] = [],
        filter: str | None = None,
    ) -> None:
        """
        Setup `self.chunked_docs` and `self.chunked_docs_clean`
        based on possible filter.
        These will be used in various non-vector-based search functions,
        e.g. self.get_similar_chunks_bm25(), self.get_fuzzy_matches(), etc.

        Args:
            docs: List of Document objects. This is empty when we are calling this
                method after initial doc ingestion.
            filter: Filter condition for various lexical/semantic search fns.
        """
        if filter is None and len(docs) > 0:
            # no filter, so just use the docs passed in
            self.chunked_docs.extend(docs)
        else:
            if self.vecdb is None:
                raise ValueError("VecDB not set")
            self.chunked_docs = self.vecdb.get_all_documents(where=filter or "")

        self.chunked_docs_clean = [
            Document(content=preprocess_text(d.content), metadata=d.metadata)
            for d in self.chunked_docs
        ]

    def get_field_values(self, fields: list[str]) -> Dict[str, str]:
        """Get string-listing of possible values of each field,
        e.g.
        {
            "genre": "crime, drama, mystery, ... (10 more)",
            "certificate": "R, PG-13, PG, R",
        }
        The field names may have "metadata." prefix, e.g. "metadata.genre".
        """
        field_values: Dict[str, Set[str]] = {}
        # make empty set for each field
        for f in fields:
            field_values[f] = set()
        if self.vecdb is None:
            raise ValueError("VecDB not set")
        # get all documents and accumulate possible values of each field until 10
        docs = self.vecdb.get_all_documents()  # only works for vecdbs that support this
        for d in docs:
            # extract fields from d
            doc_field_vals = extract_fields(d, fields)
            # the `field` returned by extract_fields may contain only the last
            # part of the field name, e.g. "genre" instead of "metadata.genre",
            # so we use the orig_field name to fill in the values
            for (field, val), orig_field in zip(doc_field_vals.items(), fields):
                field_values[orig_field].add(val)
        # For each field make a string showing list of possible values,
        # truncate to 20 values, and if there are more, indicate how many
        # more there are, e.g. Genre: crime, drama, mystery, ... (20 more)
        field_values_list = {}
        for f in fields:
            vals = list(field_values[f])
            n = len(vals)
            remaining = n - 20
            vals = vals[:20]
            if n > 20:
                vals.append(f"(...{remaining} more)")
            # make a string of the values, ensure they are strings
            field_values_list[f] = ", ".join(str(v) for v in vals)
        return field_values_list

    def doc_length(self, docs: List[Document]) -> int:
        """
        Calc token-length of a list of docs
        Args:
            docs: list of Document objects
        Returns:
            int: number of tokens
        """
        if self.parser is None:
            raise ValueError("Parser not set")
        return self.parser.num_tokens(self.doc_string(docs))

    def user_docs_ingest_dialog(self) -> None:
        """
        Ask user to select doc-collection, enter filenames/urls, and ingest into vecdb.
        """
        if self.vecdb is None:
            raise ValueError("VecDB not set")
        n_deletes = self.vecdb.clear_empty_collections()
        collections = self.vecdb.list_collections()
        collection_name = "NEW"
        is_new_collection = False
        replace_collection = False
        if len(collections) > 0:
            n = len(collections)
            delete_str = (
                f"(deleted {n_deletes} empty collections)" if n_deletes > 0 else ""
            )
            print(f"Found {n} collections: {delete_str}")
            for i, option in enumerate(collections, start=1):
                print(f"{i}. {option}")
            while True:
                choice = Prompt.ask(
                    f"Enter 1-{n} to select a collection, "
                    "or hit ENTER to create a NEW collection, "
                    "or -1 to DELETE ALL COLLECTIONS",
                    default="0",
                )
                try:
                    if -1 <= int(choice) <= n:
                        break
                except Exception:
                    pass

            if choice == "-1":
                confirm = Prompt.ask(
                    "Are you sure you want to delete all collections?",
                    choices=["y", "n"],
                    default="n",
                )
                if confirm == "y":
                    self.vecdb.clear_all_collections(really=True)
                    collection_name = "NEW"

            if int(choice) > 0:
                collection_name = collections[int(choice) - 1]
                print(f"Using collection {collection_name}")
                choice = Prompt.ask(
                    "Would you like to replace this collection?",
                    choices=["y", "n"],
                    default="n",
                )
                replace_collection = choice == "y"

        if collection_name == "NEW":
            is_new_collection = True
            collection_name = Prompt.ask(
                "What would you like to name the NEW collection?",
                default="doc-chat",
            )

        self.vecdb.set_collection(collection_name, replace=replace_collection)

        default_urls_str = (
            " (or leave empty for default URLs)" if is_new_collection else ""
        )
        print(f"[blue]Enter some URLs or file/dir paths below {default_urls_str}")
        inputs = get_list_from_user()
        if len(inputs) == 0:
            if is_new_collection:
                inputs = self.config.default_paths
        self.config.doc_paths = inputs  # type: ignore
        self.ingest()

    def llm_response(
        self,
        message: None | str | ChatDocument = None,
    ) -> Optional[ChatDocument]:
        if not self.llm_can_respond(message):
            return None
        query_str: str | None
        if isinstance(message, ChatDocument):
            query_str = message.content
        else:
            query_str = message
        if query_str is None or query_str.startswith("!"):
            # direct query to LLM
            query_str = query_str[1:] if query_str is not None else None
            if self.llm is None:
                raise ValueError("LLM not set")
            response = super().llm_response(query_str)
            if query_str is not None:
                self.update_dialog(
                    query_str, "" if response is None else response.content
                )
            return response
        if query_str == "":
            return ChatDocument(
                content=NO_ANSWER + " since query was empty",
                metadata=ChatDocMetaData(
                    source="No query provided",
                    sender=Entity.LLM,
                ),
            )
        elif query_str == "?" and self.response is not None:
            return self.justify_response()
        elif (query_str.startswith(("summar", "?")) and self.response is None) or (
            query_str == "??"
        ):
            return self.summarize_docs()
        else:
            self.callbacks.show_start_response(entity="llm")
            response = self.answer_from_docs(query_str)
            # Citation details (if any) are NOT generated by LLM
            # (We extract these from LLM's numerical citations),
            # so render them here
            self._render_llm_response(response, citation_only=True)
            return ChatDocument(
                content=response.content,
                metadata=ChatDocMetaData(
                    source=response.metadata.source,
                    sender=Entity.LLM,
                ),
            )

    async def llm_response_async(
        self,
        message: None | str | ChatDocument = None,
    ) -> Optional[ChatDocument]:
        apply_nest_asyncio()
        if not self.llm_can_respond(message):
            return None
        query_str: str | None
        if isinstance(message, ChatDocument):
            query_str = message.content
        else:
            query_str = message
        if query_str is None or query_str.startswith("!"):
            # direct query to LLM
            query_str = query_str[1:] if query_str is not None else None
            if self.llm is None:
                raise ValueError("LLM not set")
            response = await super().llm_response_async(query_str)
            if query_str is not None:
                self.update_dialog(
                    query_str, "" if response is None else response.content
                )
            return response
        if query_str == "":
            return None
        elif query_str == "?" and self.response is not None:
            return self.justify_response()
        elif (query_str.startswith(("summar", "?")) and self.response is None) or (
            query_str == "??"
        ):
            return self.summarize_docs()
        else:
            self.callbacks.show_start_response(entity="llm")
            response = self.answer_from_docs(query_str)
            self._render_llm_response(response, citation_only=True)
            return ChatDocument(
                content=response.content,
                metadata=ChatDocMetaData(
                    source=response.metadata.source,
                    sender=Entity.LLM,
                ),
            )

    @staticmethod
    def doc_string(docs: List[Document]) -> str:
        """
        Generate a string representation of a list of docs.
        Args:
            docs: list of Document objects
        Returns:
            str: string representation
        """
        contents = [d.content for d in docs]
        sources = [d.metadata.source for d in docs]
        sources = [f"SOURCE: {s}" if s is not None else "" for s in sources]
        return "\n".join(
            [
                f"""
                -----[EXTRACT #{i+1}]----------
                {content}
                {source}
                -----END OF EXTRACT------------
                
                """
                for i, (content, source) in enumerate(zip(contents, sources))
            ]
        )

    def get_summary_answer(
        self, question: str, passages: List[Document]
    ) -> ChatDocument:
        """
        Given a question and a list of (possibly) doc snippets,
        generate an answer if possible
        Args:
            question: question to answer
            passages: list of `Document` objects each containing a possibly relevant
                snippet, and metadata
        Returns:
            a `Document` object containing the answer,
            and metadata containing source citations

        """

        passages_str = self.doc_string(passages)
        # Substitute Q and P into the templatized prompt

        final_prompt = self.config.summarize_prompt.format(
            question=question, extracts=passages_str
        )
        show_if_debug(final_prompt, "SUMMARIZE_PROMPT= ")

        # Generate the final verbatim extract based on the final prompt.
        # Note this will send entire message history, plus this final_prompt
        # to the LLM, and self.message_history will be updated to include
        # 2 new LLMMessage objects:
        # one for `final_prompt`, and one for the LLM response

        if self.config.conversation_mode:
            if self.config.retain_context:
                answer_doc = super().llm_response(final_prompt)
            else:
                # respond with temporary context
                answer_doc = super()._llm_response_temp_context(question, final_prompt)
        else:
            answer_doc = super().llm_response_forget(final_prompt)

        assert answer_doc is not None, "LLM response should not be None here"
        final_answer = answer_doc.content.strip()
        show_if_debug(final_answer, "SUMMARIZE_RESPONSE= ")

        # extract references like [^2], [^3], etc. from the final answer
        citations = extract_markdown_references(final_answer)
        # format the cited references as a string suitable for markdown footnote
        full_citations_str, citations_str = format_cited_references(citations, passages)

        return ChatDocument(
            content=final_answer,  # does not contain citations
            metadata=ChatDocMetaData(
                source=citations_str,  # only the reference headers
                source_content=full_citations_str,  # reference + content
                sender=Entity.LLM,
                has_citation=len(citations) > 0,
                cached=getattr(answer_doc.metadata, "cached", False),
            ),
        )

    def llm_hypothetical_answer(self, query: str) -> str:
        if self.llm is None:
            raise ValueError("LLM not set")
        with status("[cyan]LLM generating hypothetical answer..."):
            with StreamingIfAllowed(self.llm, False):
                # TODO: provide an easy way to
                # Adjust this prompt depending on context.
                answer = self.llm_response_forget(
                    f"""
                    Give an ideal answer to the following query,
                    in up to 3 sentences. Do not explain yourself,
                    and do not apologize, just show
                    a good possible answer, even if you do not have any information.
                    Preface your answer with "HYPOTHETICAL ANSWER: "

                    QUERY: {query}
                    """
                ).content
        return answer

    def enrich_chunks(self, docs: List[Document]) -> List[Document]:
        """
        Enrich chunks using Agent configured with self.config.chunk_enrichment_config.

        We assume that the system message of the agent is set in such a way
        that when we run
        ```
        prompt = self.config.chunk_enrichment_config.enrichment_prompt_fn(text)
        result = await agent.llm_response_forget_async(prompt)
        ```

        then `result.content` will contain the augmentation to the text.

        Args:
            docs: List of document chunks to enrich

        Returns:
            List[Document]: Documents (chunks) enriched with additional text,
                separated by a delimiter.
        """
        if self.config.chunk_enrichment_config is None:
            return docs
        enrichment_config = self.config.chunk_enrichment_config
        agent = ChatAgent(enrichment_config)
        if agent.llm is None:
            raise ValueError("LLM not set")

        with status("[cyan]Augmenting chunks..."):
            # Process chunks in parallel using run_batch_agent_method
            questions_batch = run_batch_agent_method(
                agent=agent,
                method=agent.llm_response_forget_async,
                items=docs,
                input_map=lambda doc: (
                    enrichment_config.enrichment_prompt_fn(doc.content)
                ),
                output_map=lambda response: response.content if response else "",
                sequential=False,
                batch_size=enrichment_config.batch_size,
            )

            # Combine original content with generated questions
            augmented_docs = []
            for doc, enrichment in zip(docs, questions_batch):
                if not enrichment:
                    augmented_docs.append(doc)
                    continue

                # Combine original content with questions in a structured way
                combined_content = (
                    f"{doc.content}{enrichment_config.delimiter}{enrichment}"
                )

                new_doc = doc.copy(
                    update={
                        "content": combined_content,
                        "metadata": doc.metadata.copy(update={"has_enrichment": True}),
                    }
                )
                augmented_docs.append(new_doc)

            return augmented_docs

    def llm_rephrase_query(self, query: str) -> List[str]:
        if self.llm is None:
            raise ValueError("LLM not set")
        with status("[cyan]LLM generating rephrases of query..."):
            with StreamingIfAllowed(self.llm, False):
                rephrases = self.llm_response_forget(
                    f"""
                        Rephrase the following query in {self.config.n_query_rephrases}
                        different equivalent ways, separate them with 2 newlines.
                        QUERY: {query}
                        """
                ).content.split("\n\n")
        return rephrases

    def get_similar_chunks_bm25(
        self, query: str, multiple: int
    ) -> List[Tuple[Document, float]]:
        # find similar docs using bm25 similarity:
        # these may sometimes be more likely to contain a relevant verbatim extract
        with status("[cyan]Searching for similar chunks using bm25..."):
            if self.chunked_docs is None or len(self.chunked_docs) == 0:
                logger.warning("No chunked docs; cannot use bm25-similarity")
                return []
            if self.chunked_docs_clean is None or len(self.chunked_docs_clean) == 0:
                logger.warning("No cleaned chunked docs; cannot use bm25-similarity")
                return []
            docs_scores = find_closest_matches_with_bm25(
                self.chunked_docs,
                self.chunked_docs_clean,  # already pre-processed!
                query,
                k=self.config.n_similar_chunks * multiple,
            )
        return docs_scores

    def get_fuzzy_matches(
        self, query: str, multiple: int
    ) -> List[Tuple[Document, float]]:
        # find similar docs using fuzzy matching:
        # these may sometimes be more likely to contain a relevant verbatim extract
        with status("[cyan]Finding fuzzy matches in chunks..."):
            if self.chunked_docs is None:
                logger.warning("No chunked docs; cannot use fuzzy matching")
                return []
            if self.chunked_docs_clean is None:
                logger.warning("No cleaned chunked docs; cannot use fuzzy-search")
                return []
            fuzzy_match_docs = find_fuzzy_matches_in_docs(
                query,
                self.chunked_docs,
                self.chunked_docs_clean,
                k=self.config.n_similar_chunks * multiple,
                words_before=self.config.n_fuzzy_neighbor_words or None,
                words_after=self.config.n_fuzzy_neighbor_words or None,
            )
        return fuzzy_match_docs

    def rerank_with_cross_encoder(
        self, query: str, passages: List[Document]
    ) -> List[Document]:
        with status("[cyan]Re-ranking retrieved chunks using cross-encoder..."):
            try:
                from sentence_transformers import CrossEncoder
            except ImportError:
                raise ImportError(
                    """
                    To use cross-encoder re-ranking, you must install
                    langroid with the [hf-embeddings] extra, e.g.:
                    pip install "langroid[hf-embeddings]"
                    """
                )

            model = CrossEncoder(self.config.cross_encoder_reranking_model)
            scores = model.predict([(query, p.content) for p in passages])
            # Convert to [0,1] so we might could use a cutoff later.
            scores = 1.0 / (1 + np.exp(-np.array(scores)))
            # get top k scoring passages
            sorted_pairs = sorted(
                zip(scores, passages),
                key=lambda x: x[0],
                reverse=True,
            )
            passages = [d for _, d in sorted_pairs]
        return passages

    def rerank_with_diversity(self, passages: List[Document]) -> List[Document]:
        """
        Rerank a list of items in such a way that each successive item is least similar
        (on average) to the earlier items.

        Args:
        query (str): The query for which the passages are relevant.
        passages (List[Document]): A list of Documents to be reranked.

        Returns:
        List[Documents]: A reranked list of Documents.
        """

        if self.vecdb is None:
            logger.warning("No vecdb; cannot use rerank_with_diversity")
            return passages
        emb_model = self.vecdb.embedding_model
        emb_fn = emb_model.embedding_fn()
        embs = emb_fn([p.content for p in passages])
        embs_arr = [np.array(e) for e in embs]
        indices = list(range(len(passages)))

        # Helper function to compute average similarity to
        # items in the current result list.
        def avg_similarity_to_result(i: int, result: List[int]) -> float:
            return sum(  # type: ignore
                (embs_arr[i] @ embs_arr[j])
                / (np.linalg.norm(embs_arr[i]) * np.linalg.norm(embs_arr[j]))
                for j in result
            ) / len(result)

        # copy passages to items
        result = [indices.pop(0)]  # Start with the first item.

        while indices:
            # Find the item that has the least average similarity
            # to items in the result list.
            least_similar_item = min(
                indices, key=lambda i: avg_similarity_to_result(i, result)
            )
            result.append(least_similar_item)
            indices.remove(least_similar_item)

        # return passages in order of result list
        return [passages[i] for i in result]

    def rerank_to_periphery(self, passages: List[Document]) -> List[Document]:
        """
        Rerank to avoid Lost In the Middle (LIM) problem,
        where LLMs pay more attention to items at the ends of a list,
        rather than the middle. So we re-rank to make the best passages
        appear at the periphery of the list.
        https://arxiv.org/abs/2307.03172

        Example reranking:
        1 2 3 4 5 6 7 8 9 ==> 1 3 5 7 9 8 6 4 2

        Args:
            passages (List[Document]): A list of Documents to be reranked.

        Returns:
            List[Documents]: A reranked list of Documents.

        """
        # Splitting items into odds and evens based on index, not value
        odds = passages[::2]
        evens = passages[1::2][::-1]

        # Merging them back together
        return odds + evens

    def add_context_window(
        self,
        docs_scores: List[Tuple[Document, float]],
    ) -> List[Tuple[Document, float]]:
        """
        In each doc's metadata, there may be a window_ids field indicating
        the ids of the chunks around the current chunk. We use these stored
        window_ids to retrieve the desired number
        (self.config.n_neighbor_chunks) of neighbors
        on either side of the current chunk.

        Args:
            docs_scores (List[Tuple[Document, float]]): List of pairs of documents
                to add context windows to together with their match scores.

        Returns:
            List[Tuple[Document, float]]: List of (Document, score) tuples.
        """
        if self.vecdb is None or self.config.n_neighbor_chunks == 0:
            return docs_scores
        if len(docs_scores) == 0:
            return []
        if set(docs_scores[0][0].__fields__) != {"content", "metadata"}:
            # Do not add context window when there are other fields besides just
            # content and metadata, since we do not know how to set those other fields
            # for newly created docs with combined content.
            return docs_scores
        return self.vecdb.add_context_window(docs_scores, self.config.n_neighbor_chunks)

    def get_semantic_search_results(
        self,
        query: str,
        k: int = 10,
    ) -> List[Tuple[Document, float]]:
        """
        Get semantic search results from vecdb.
        Args:
            query (str): query to search for
            k (int): number of results to return
        Returns:
            List[Tuple[Document, float]]: List of (Document, score) tuples.
        """
        if self.vecdb is None:
            raise ValueError("VecDB not set")
        # Note: for dynamic filtering based on a query, users can
        # use the `temp_update` context-manager to pass in a `filter` to self.config,
        # e.g.:
        # with temp_update(self.config, {"filter": "metadata.source=='source1'"}):
        #     docs_scores = self.get_semantic_search_results(query, k=k)
        # This avoids having pass the `filter` argument to every function call
        # upstream of this one.
        # The `temp_update` context manager is defined in
        # `langroid/utils/pydantic_utils.py`
        return self.vecdb.similar_texts_with_scores(
            query,
            k=k,
            where=self.config.filter,
        )

    def get_relevant_chunks(
        self, query: str, query_proxies: List[str] = []
    ) -> List[Document]:
        """
        The retrieval stage in RAG: get doc-chunks that are most "relevant"
        to the query (and possibly any proxy queries), from the document-store,
        which currently is the vector store,
        but in theory could be any document store, or even web-search.
        This stage does NOT involve an LLM, and the retrieved chunks
        could either be pre-chunked text (from the initial pre-processing stage
        where chunks were stored in the vector store), or they could be
        dynamically retrieved based on a window around a lexical match.

        These are the steps (some optional based on config):
        - semantic search based on vector-embedding distance, from vecdb
        - lexical search using bm25-ranking (keyword similarity)
        - fuzzy matching (keyword similarity)
        - re-ranking of doc-chunks by relevance to query, using cross-encoder,
           and pick top k

        Args:
            query: original query (assumed to be in stand-alone form)
            query_proxies: possible rephrases, or hypothetical answer to query
                    (e.g. for HyDE-type retrieval)

        Returns:

        """

        if (
            self.vecdb is None
            or self.vecdb.config.collection_name
            not in self.vecdb.list_collections(empty=False)
        ):
            return []

        # if we are using cross-encoder reranking or reciprocal rank fusion (RRF),
        # we can retrieve more docs during retrieval, and leave it to the cross-encoder
        # or RRF reranking to whittle down to self.config.n_similar_chunks
        retrieval_multiple = (
            1
            if (
                self.config.cross_encoder_reranking_model == ""
                and not self.config.use_reciprocal_rank_fusion
            )
            else 3
        )

        if self.vecdb is None:
            raise ValueError("VecDB not set")

        with status("[cyan]Searching VecDB for relevant doc passages..."):
            docs_and_scores: List[Tuple[Document, float]] = []
            for q in [query] + query_proxies:
                docs_and_scores += self.get_semantic_search_results(
                    q,
                    k=self.config.n_similar_chunks * retrieval_multiple,
                )
                # sort by score descending
                docs_and_scores = sorted(
                    docs_and_scores, key=lambda x: x[1], reverse=True
                )

        # keep only docs with unique d.id()
        id2_rank_semantic = {d.id(): i for i, (d, _) in enumerate(docs_and_scores)}
        id2doc = {d.id(): d for d, _ in docs_and_scores}
        # make sure we get unique docs
        passages = [id2doc[id] for id in id2_rank_semantic.keys()]

        id2_rank_bm25 = {}
        if self.config.use_bm25_search:
            # TODO: Add score threshold in config
            docs_scores = self.get_similar_chunks_bm25(query, retrieval_multiple)
            id2doc.update({d.id(): d for d, _ in docs_scores})
            if self.config.use_reciprocal_rank_fusion:
                # if we're not re-ranking with a cross-encoder, and have RRF enabled,
                # instead of accumulating the bm25 results into passages,
                # we collect these ranks for Reciprocal Rank Fusion down below.
                docs_scores = sorted(docs_scores, key=lambda x: x[1], reverse=True)
                id2_rank_bm25 = {d.id(): i for i, (d, _) in enumerate(docs_scores)}
            else:
                passages += [d for (d, _) in docs_scores]
                # eliminate duplicate ids
                passages = [id2doc[id] for id in id2doc.keys()]

        id2_rank_fuzzy = {}
        if self.config.use_fuzzy_match:
            # TODO: Add score threshold in config
            fuzzy_match_doc_scores = self.get_fuzzy_matches(query, retrieval_multiple)
            if self.config.use_reciprocal_rank_fusion:
                # if we're not re-ranking with a cross-encoder,
                # instead of accumulating the fuzzy match results into passages,
                # we collect these ranks for Reciprocal Rank Fusion down below.
                fuzzy_match_doc_scores = sorted(
                    fuzzy_match_doc_scores, key=lambda x: x[1], reverse=True
                )
                id2_rank_fuzzy = {
                    d.id(): i for i, (d, _) in enumerate(fuzzy_match_doc_scores)
                }
                id2doc.update({d.id(): d for d, _ in fuzzy_match_doc_scores})
            else:
                passages += [d for (d, _) in fuzzy_match_doc_scores]
                # eliminate duplicate ids
                passages = [id2doc[id] for id in id2doc.keys()]

        if self.config.use_reciprocal_rank_fusion and (
            self.config.use_bm25_search or self.config.use_fuzzy_match
        ):
            # Since we're not using cross-enocder re-ranking,
            # we need to re-order the retrieved chunks from potentially three
            # different retrieval methods (semantic, bm25, fuzzy), where the
            # similarity scores are on different scales.
            # We order the retrieved chunks using Reciprocal Rank Fusion (RRF) score.
            # Combine the ranks from each id2doc_rank_* dict into a single dict,
            # where the reciprocal rank score is the sum of
            # 1/(rank + self.config.reciprocal_rank_fusion_constant).
            # See https://learn.microsoft.com/en-us/azure/search/hybrid-search-ranking
            #
            # Note: diversity/periphery-reranking below may modify the final ranking.
            id2_reciprocal_score = {}
            for id_ in (
                set(id2_rank_semantic.keys())
                | set(id2_rank_bm25.keys())
                | set(id2_rank_fuzzy.keys())
            ):
                # Use max_rank instead of infinity to avoid bias against
                # single-method docs
                max_rank = self.config.n_similar_chunks * retrieval_multiple
                rank_semantic = id2_rank_semantic.get(id_, max_rank + 1)
                rank_bm25 = id2_rank_bm25.get(id_, max_rank + 1)
                rank_fuzzy = id2_rank_fuzzy.get(id_, max_rank + 1)
                c = self.config.reciprocal_rank_fusion_constant
                reciprocal_fusion_score = (
                    1 / (rank_semantic + c) + 1 / (rank_bm25 + c) + 1 / (rank_fuzzy + c)
                )
                id2_reciprocal_score[id_] = reciprocal_fusion_score

            # sort the docs by the reciprocal score, in descending order
            id2_reciprocal_score = OrderedDict(
                sorted(
                    id2_reciprocal_score.items(),
                    key=lambda x: x[1],
                    reverse=True,
                )
            )
            # each method retrieved up to retrieval_multiple * n_similar_chunks,
            # so we need to take the top n_similar_chunks from the combined list
            passages = [
                id2doc[id]
                for id, _ in list(id2_reciprocal_score.items())[
                    : self.config.n_similar_chunks
                ]
            ]
            # passages must have distinct ids
            assert len(passages) == len(set([d.id() for d in passages])), (
                f"Duplicate passages in retrieved docs: {len(passages)} != "
                f"{len(set([d.id() for d in passages]))}"
            )

        if len(passages) == 0:
            return []

        if self.config.rerank_after_adding_context:
            passages_scores = [(p, 0.0) for p in passages]
            passages_scores = self.add_context_window(passages_scores)
            passages = [p for p, _ in passages_scores]
        # now passages can potentially have a lot of doc chunks,
        # so we re-rank them using a cross-encoder scoring model
        # (provided that `reciprocal_rank_fusion` is not enabled),
        # and pick top k where k = config..n_similar_chunks
        # https://www.sbert.net/examples/applications/retrieve_rerank
        if (
            self.config.cross_encoder_reranking_model != ""
            and not self.config.use_reciprocal_rank_fusion
        ):
            passages = self.rerank_with_cross_encoder(query, passages)

        if self.config.rerank_diversity:
            # reorder to increase diversity among top docs
            passages = self.rerank_with_diversity(passages)

        if self.config.rerank_periphery:
            # reorder so most important docs are at periphery
            # (see Lost In the Middle issue).
            passages = self.rerank_to_periphery(passages)

        if not self.config.rerank_after_adding_context:
            passages_scores = [(p, 0.0) for p in passages]
            passages_scores = self.add_context_window(passages_scores)
            passages = [p for p, _ in passages_scores]

        return passages[: self.config.n_relevant_chunks]

    @no_type_check
    def get_relevant_extracts(self, query: str) -> Tuple[str, List[Document]]:
        """
        Get list of (verbatim) extracts from doc-chunks relevant to answering a query.

        These are the stages (some optional based on config):
        - use LLM to convert query to stand-alone query
        - optionally use LLM to rephrase query to use below
        - optionally use LLM to generate hypothetical answer (HyDE) to use below.
        - get_relevant_chunks(): get doc-chunks relevant to query and proxies
        - use LLM to get relevant extracts from doc-chunks

        Args:
            query (str): query to search for

        Returns:
            query (str): stand-alone version of input query
            List[Document]: list of relevant extracts

        """
        if (
            self.vecdb is None
            or self.vecdb.config.collection_name
            not in self.vecdb.list_collections(empty=False)
        ):
            return query, []

        if len(self.dialog) > 0 and not self.config.assistant_mode:
            # Regardless of whether we are in conversation mode or not,
            # for relevant doc/chunk extraction, we must convert the query
            # to a standalone query to get more relevant results.
            with status("[cyan]Converting to stand-alone query...[/cyan]"):
                with StreamingIfAllowed(self.llm, False):
                    query = self.llm.followup_to_standalone(self.dialog, query)
            print(f"[orange2]New query: {query}")

        proxies = []
        if self.config.hypothetical_answer:
            answer = self.llm_hypothetical_answer(query)
            proxies = [answer]

        if self.config.n_query_rephrases > 0:
            rephrases = self.llm_rephrase_query(query)
            proxies += rephrases
        passages = self.get_relevant_chunks(query, proxies)  # no LLM involved

        if len(passages) == 0:
            return query, []

        with status("[cyan]LLM Extracting verbatim passages..."):
            with StreamingIfAllowed(self.llm, False):
                # these are async calls, one per passage; turn off streaming
                extracts = self.get_verbatim_extracts(query, passages)
                extracts = [e for e in extracts if e.content != NO_ANSWER]

        return query, extracts

    def remove_chunk_enrichments(self, passages: List[Document]) -> List[Document]:
        """Remove any enrichments (like hypothetical questions, or keywords)
        from documents.
        Only cleans if enrichment was enabled in config.

        Args:
            passages: List of documents to clean

        Returns:
            List of documents with only original content
        """
        if self.config.chunk_enrichment_config is None:
            return passages
        delimiter = self.config.chunk_enrichment_config.delimiter
        return [
            (
                doc.copy(update={"content": doc.content.split(delimiter)[0]})
                if doc.content and getattr(doc.metadata, "has_enrichment", False)
                else doc
            )
            for doc in passages
        ]

    def get_verbatim_extracts(
        self,
        query: str,
        passages: List[Document],
    ) -> List[Document]:
        """
        Run RelevanceExtractorAgent in async/concurrent mode on passages,
        to extract portions relevant to answering query, from each passage.
        Args:
            query (str): query to answer
            passages (List[Documents]): list of passages to extract from

        Returns:
            List[Document]: list of Documents containing extracts and metadata.
        """
        passages = self.remove_chunk_enrichments(passages)

        agent_cfg = self.config.relevance_extractor_config
        if agent_cfg is None:
            # no relevance extraction: simply return passages
            return passages
        if agent_cfg.llm is None:
            # Use main DocChatAgent's LLM if not provided explicitly:
            # this reduces setup burden on the user
            agent_cfg.llm = self.config.llm
        agent_cfg.query = query
        agent_cfg.segment_length = self.config.extraction_granularity
        agent_cfg.llm.stream = False  # disable streaming for concurrent calls

        agent = RelevanceExtractorAgent(agent_cfg)
        task = Task(
            agent,
            name="Relevance-Extractor",
            interactive=False,
        )

        extracts: list[str] = run_batch_tasks(
            task,
            passages,
            input_map=lambda msg: msg.content,
            output_map=lambda ans: ans.content if ans is not None else NO_ANSWER,
        )  # type: ignore

        # Caution: Retain ALL other fields in the Documents (which could be
        # other than just `content` and `metadata`), while simply replacing
        # `content` with the extracted portions
        passage_extracts = []
        for p, e in zip(passages, extracts):
            if e == NO_ANSWER or len(e) == 0:
                continue
            p_copy = p.copy()
            p_copy.content = e
            passage_extracts.append(p_copy)

        return passage_extracts

    def answer_from_docs(self, query: str) -> ChatDocument:
        """
        Answer query based on relevant docs from the VecDB

        Args:
            query (str): query to answer

        Returns:
            Document: answer
        """
        response = ChatDocument(
            content=NO_ANSWER,
            metadata=ChatDocMetaData(
                source="None",
                sender=Entity.LLM,
            ),
        )
        # query may be updated to a stand-alone version
        query, extracts = self.get_relevant_extracts(query)
        if len(extracts) == 0:
            return response
        if self.llm is None:
            raise ValueError("LLM not set")
        if self.config.retrieve_only:
            # only return extracts, skip LLM-based summary answer
            meta = dict(
                sender=Entity.LLM,
            )
            # copy metadata from first doc, unclear what to do here.
            meta.update(extracts[0].metadata)
            return ChatDocument(
                content="\n\n".join([e.content for e in extracts]),
                metadata=ChatDocMetaData(**meta),  # type: ignore
            )
        response = self.get_summary_answer(query, extracts)

        self.update_dialog(query, response.content)
        self.response = response  # save last response
        return response

    def summarize_docs(
        self,
        instruction: str = "Give a concise summary of the following text:",
    ) -> None | ChatDocument:
        """Summarize all docs"""
        if self.llm is None:
            raise ValueError("LLM not set")
        if len(self.original_docs) == 0:
            logger.warning(
                """
                No docs to summarize! Perhaps you are re-using a previously
                defined collection?
                In that case, we don't have access to the original docs.
                To create a summary, use a new collection, and specify a list of docs.
                """
            )
            return None
        full_text = "\n\n".join([d.content for d in self.original_docs])
        if self.parser is None:
            raise ValueError("No parser defined")
        tot_tokens = self.parser.num_tokens(full_text)
        MAX_INPUT_TOKENS = (
            self.llm.completion_context_length()
            - self.config.llm.model_max_output_tokens
            - 100
        )
        if tot_tokens > MAX_INPUT_TOKENS:
            # truncate
            full_text = self.parser.tokenizer.decode(
                self.parser.tokenizer.encode(full_text)[:MAX_INPUT_TOKENS]
            )
            logger.warning(
                f"Summarizing after truncating text to {MAX_INPUT_TOKENS} tokens"
            )
        prompt = f"""
        {instruction}

        FULL TEXT:
        {full_text}
        """.strip()
        with StreamingIfAllowed(self.llm):
            summary = ChatAgent.llm_response(self, prompt)
            return summary

    def justify_response(self) -> ChatDocument | None:
        """Show evidence for last response"""
        if self.response is None:
            print("[magenta]No response yet")
            return None
        source = self.response.metadata.source
        if len(source) > 0:
            print("[magenta]" + source)
        else:
            print("[magenta]No source found")
        return None
</file>

<file path="tests/main/test_task_tool.py">
import pytest

from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task, TaskConfig
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import DoneTool
from langroid.agent.tools.task_tool import TaskTool
from langroid.language_models.mock_lm import MockLMConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig


class MultiplierTool(ToolMessage):
    """A simple calculator tool for testing."""

    request: str = "multiplier_tool"
    purpose: str = "To calculate the product of two numbers."
    a: int
    b: int

    def handle(self) -> str:
        return self.a * self.b


def test_task_tool_mock_main_agent():
    """
    Test that when MockAgent uses TaskTool, it  properly spawns a sub-agent
    that can use tools and complete tasks.
    """

    # Configure the main agent to use TaskTool:
    # The MockLM has a fixed response, which is the TaskTool request
    main_config = ChatAgentConfig(
        llm=MockLMConfig(
            default_response=TaskTool(
                system_message=f"""
                    You are a calculator assistant. When asked to 
                    calculate, use the TOOL `{MultiplierTool.name()}` to multiply the 
                    numbers, then use the TOOL `{DoneTool.name()}` to return the result
                    """,
                prompt="Multiply 5 and 7",
                model="gpt-4.1-mini",
                tools=["multiplier_tool"],
                max_iterations=5,
            ).json()
        ),
        name="MainAgent",
    )
    main_agent = ChatAgent(main_config)

    # Enable TaskTool and MultiplierTool for the main agent.
    # The MultiplierTool must be enabled for the main agent,
    # since the TaskTool handler will create a sub-agent that uses it,
    # and the handler only has access to tools enabled for the main agent.
    main_agent.enable_message([TaskTool, MultiplierTool], use=True, handle=True)

    # Create main task that stops after handling the task_tool
    task = Task(
        main_agent,
        name="MainTask",
        interactive=False,
        config=TaskConfig(
            done_sequences=["T,A"],  # LLM (Tool (TaskTool)), Agent(Handled) -> done
        ),
    )

    # Run the task
    result = task.run(msg="Please calculate something")

    # The result should be from the sub-agent's execution
    assert result is not None, "Task should return a result"
    assert "35" in result.content, "Result should contain the multiplication result"


class NebrowskiTool(ToolMessage):
    """A tool that computes the exotic Nebrowski operation."""

    request: str = "nebrowski_tool"
    purpose: str = """
        To compute the Nebrowski operation of two numbers: 
        neb(a,b) = 3a + b
    """
    a: int
    b: int

    def handle(self) -> str:
        # The Nebrowski operation: 3a + b
        result = 3 * self.a + self.b
        return f"Nebrowski({self.a}, {self.b}) = {result}"


def _create_nebrowski_task():
    """
    Helper function to create a Nebrowski task for both sync and async tests.
    Returns a configured Task ready to run.
    """
    # Configure the main agent with a real LLM
    main_config = ChatAgentConfig(
        llm=OpenAIGPTConfig(),  # Uses default model
        handle_llm_no_tool="you forgot to use one of your TOOLs!",
        system_message=f"""
        You are a Nebrowski operation specialist. The Nebrowski operation is an exotic 
        mathematical function that takes two numbers and produces a result.
        BUT you do NOT know how to compute it yourself!
        
        When the user asks you to compute nested Nebrowski operations like 
        Nebrowski(a, Nebrowski(b, c)), you MUST:
        
        1. Break it down into individual Nebrowski operations
        2. Use the TOOL `{TaskTool.name()}` to delegate each Nebrowski 
            operation to a sub-agent
        3. The sub-agent knows how to use the `{NebrowskiTool.name()}` tool
        
        For example, to compute Nebrowski(10, Nebrowski(3, 2)):
        - First compute inner: Nebrowski(3, 2) = result1 (using TaskTool)
        - Then compute outer: Nebrowski(10, result1) (using TaskTool)
        - Return the final result
        
        IMPORTANT: You must use TaskTool for EACH Nebrowski operation.
        Configure the TaskTool with:
        - system_message: Instructions for the sub-agent to compute Nebrowski
        - prompt: The specific Nebrowski task (e.g., "Compute Nebrowski(3, 2)")
        - tools: ["nebrowski_tool"]
        - model: "gpt-4o-mini"
        
        Remember: You cannot compute Nebrowski operations yourself - you must 
        delegate to sub-agents!
        
        You MUST use the TOOL `{DoneTool.name()}` to return the final result!
        """,
        name="NebrowskiAgent",
    )
    main_agent = ChatAgent(main_config)

    # Enable TaskTool and NebrowskiTool
    main_agent.enable_message(
        [DoneTool, TaskTool, NebrowskiTool], use=True, handle=True
    )

    # Create task with appropriate configuration
    task = Task(
        main_agent,
        name="NebrowskiTask",
        interactive=False,
    )

    return task


def test_task_tool_real_llm_nebrowski():
    """
    Test that a real LLM agent can compute nested Nebrowski operations
    by using TaskTool to delegate each Nebrowski computation to sub-agents.
    """
    task = _create_nebrowski_task()

    # Run the task - compute Nebrowski(10, Nebrowski(3, 2))
    # Expected: Nebrowski(3, 2) = 11, then Nebrowski(10, 11) = 41
    result = task.run("Compute Nebrowski(10, Nebrowski(3, 2))", turns=15)

    # Verify the result
    assert result is not None, "Task should return a result"
    assert "41" in result.content, "Result should contain the final Nebrowski result"


@pytest.mark.asyncio
async def test_task_tool_real_llm_nebrowski_async():
    """
    Async version: Test that a real LLM agent can compute nested Nebrowski operations
    by using TaskTool to delegate each Nebrowski computation to sub-agents.
    """
    task = _create_nebrowski_task()

    # Run the task asynchronously - compute Nebrowski(10, Nebrowski(3, 2))
    # Expected: Nebrowski(3, 2) = 11, then Nebrowski(10, 11) = 41
    result = await task.run_async("Compute Nebrowski(10, Nebrowski(3, 2))", turns=15)

    # Verify the result
    assert result is not None, "Task should return a result"
    assert "41" in result.content, "Result should contain the final Nebrowski result"


def test_task_tool_all_tools():
    """
    Test that tools="all" enables all available tools for the sub-agent.
    """
    # Create a main agent with multiple tools available
    main_config = ChatAgentConfig(
        llm=MockLMConfig(
            default_response=TaskTool(
                agent_name="Calculator",
                system_message=f"""
                    You are a multi-tool assistant. Use the appropriate tool
                    to complete the task, then use `{DoneTool.name()}` to return the 
                    result.
                    """,
                prompt="""
                    Multiply 4 and 6, call it x, then compute Nebrowski(x, 5)
                    """,
                model="gpt-4o-mini",
                tools=["ALL"],  # Enable all tools
                max_iterations=20,
            ).json()
        ),
        name="MainAgent",
    )
    main_agent = ChatAgent(main_config)

    # Set up multiple tools for the main agent
    main_agent.enable_message(
        [TaskTool, MultiplierTool, NebrowskiTool], use=True, handle=True
    )

    # Create task
    task = Task(
        main_agent,
        name="AllToolsTask",
        interactive=False,
        config=TaskConfig(
            done_sequences=["T,A"],  # LLM (Tool), Agent(Handled) -> done
        ),
    )

    # Run the task: input text is immaterial since the
    # MockLM is hard-coded to return the TaskTool request
    result = task.run(msg="Test all tools")

    # Verify that the sub-agent had access to all tools
    # Expected: Multiply 4 and 6 = 24, Nebrowski(3, 5) = 14
    assert result is not None, "Task should return a result"
    assert "77" in result.content, "Result should contain 77"

    # Verify that parent chain is maintained through TaskTool
    # When TaskTool creates a prompt ChatDocument with parent_id pointing to the
    # TaskTool message, and passes it to the subtask, the subtask's init() method
    # should preserve that parent_id even though it deep copies the message.
    # This ensures the parent chain is not broken.
    assert hasattr(result, "parent"), "Result should have a parent pointer"

    # Traverse up the parent chain to find the TaskTool message
    current = result
    task_tool_found = False
    depth = 0
    # Prevent infinite loops, and allow enough look-back
    # to accommodate tool-forgetting retries that may occur.
    max_depth = 40

    while current and depth < max_depth:
        # Check if current message is from TaskTool
        if current.content and "task_tool" in current.content.lower():
            task_tool_found = True
            break

        # Also check if it's a tool message with TaskTool request
        try:
            tool_messages = main_agent.try_get_tool_messages(current.content)
            if tool_messages:
                for tool_msg in tool_messages:
                    if isinstance(tool_msg, TaskTool):
                        task_tool_found = True
                        break
        except Exception:
            pass  # Not a tool message

        if task_tool_found:
            break
        current = current.parent
        depth += 1

    assert task_tool_found, "Parent chain should lead back to TaskTool message"


def test_task_tool_none_tools():
    """
    Test that tools="none" disables all tools except DoneTool for the sub-agent.
    """
    # Create a main agent that delegates with no tools
    main_config = ChatAgentConfig(
        llm=MockLMConfig(
            default_response=TaskTool(
                agent_name="Calculator",
                system_message=f"""
                    You are an assistant with no tools. Just respond directly
                    to the prompt and use `{DoneTool.name()}` to return your answer.
                    """,
                prompt="What is 2 + 2? Just tell me the answer.",
                model="gpt-4o-mini",
                tools=["NONE"],  # Disable all tools except DoneTool
                max_iterations=20,
            ).json()
        ),
        name="MainAgent",
    )
    main_agent = ChatAgent(main_config)

    # Enable TaskTool and other tools for the main agent
    # (sub-agent won't have access to these)
    main_agent.enable_message(
        [TaskTool, MultiplierTool, NebrowskiTool], use=True, handle=True
    )

    # Create task
    task = Task(
        main_agent,
        name="NoToolsTask",
        interactive=False,
        config=TaskConfig(
            done_sequences=["T,A"],  # LLM (Tool), Agent(Handled) -> done
        ),
    )

    # Run the task
    result = task.run(msg="Test no tools")

    # Verify that the task completed (sub-agent can still use DoneTool)
    assert result is not None, "Task should return a result"
</file>

<file path="tests/main/test_task.py">
"""
Other tests for Task are in test_chat_agent.py
"""

import asyncio
import json
from typing import Any, List, Optional

import pytest

import langroid as lr
from langroid.agent import ChatDocument
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task, TaskConfig
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import (
    AgentDoneTool,
    DonePassTool,
    DoneTool,
    PassTool,
)
from langroid.language_models.base import LLMMessage
from langroid.language_models.mock_lm import MockLMConfig
from langroid.language_models.openai_gpt import OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.utils.configuration import (
    Settings,
    set_global,
    settings,
    temporary_settings,
)
from langroid.utils.constants import DONE, PASS


def test_task_cost(test_settings: Settings):
    """Test that max_cost, max_tokens are respected by Task.run()"""

    set_global(test_settings)
    settings.cache = False
    agent = ChatAgent(ChatAgentConfig(name="Test"))
    agent.llm.reset_usage_cost()
    task = Task(
        agent,
        interactive=False,
        single_round=False,
        system_message="User will send you a number. Repeat the number.",
    )
    sub_agent = ChatAgent(ChatAgentConfig(name="Sub"))
    sub_agent.llm.reset_usage_cost()
    sub = Task(
        sub_agent,
        interactive=False,
        single_round=True,
        system_message="User will send you a number. Return its double",
    )
    task.add_sub_task(sub)
    response = task.run("4", turns=10, max_cost=0.0005, max_tokens=100)
    settings.cache = True
    assert response is not None
    assert response.metadata.status in [
        lr.StatusCode.MAX_COST,
        lr.StatusCode.MAX_TOKENS,
    ]


@pytest.mark.parametrize("restart", [True, False])
def test_task_restart(test_settings: Settings, restart: bool):
    """Test whether the `restart` option works as expected"""
    set_global(test_settings)
    agent = ChatAgent(
        ChatAgentConfig(
            name="Test",
            llm=MockLMConfig(response_fn=lambda x: int(x) + 1),  # increment
        ),
    )
    task = Task(
        agent,
        interactive=False,
        single_round=False,
        restart=restart,
    )
    task.run("4", turns=1)  # msg hist = sys, user=4, asst=5
    # if restart, erases agent history => msg hist = sys, user=10, asst=11
    # otherwise, adds to msg history => msg hist = sys, user=4, asst=5, user=10, asst=11
    task.run("10", turns=1)
    if restart:
        assert len(agent.message_history) == 3
    else:
        assert len(agent.message_history) == 5


@pytest.mark.asyncio
async def test_task_kill(test_settings: Settings):
    """Test that Task.run() can be killed"""
    set_global(test_settings)

    class MockAgent(ChatAgent):
        async def llm_response_async(
            self, message: Optional[str | ChatDocument] = None
        ) -> Optional[ChatDocument]:
            # dummy deterministic response; no need for real LLM here!
            return self.create_llm_response("hello")

    agent = MockAgent(ChatAgentConfig(name="Test"))
    with temporary_settings(Settings(max_turns=-1)):

        task = Task(
            agent,
            interactive=False,
            single_round=False,
            default_human_response="ok",
            config=lr.TaskConfig(inf_loop_cycle_len=0),  # turn off cycle detection
        )
        # start task
        async_task = asyncio.create_task(
            task.run_async("hi", turns=50, session_id="mysession")
        )
        # sleep a bit then kill it
        await asyncio.sleep(0.1)
        task.kill()
        result: lr.ChatDocument = await async_task
        assert result.metadata.status == lr.StatusCode.KILL

        # test killing via static method:
        # Run it for a potentially very large number of turns...
        async_task = asyncio.create_task(
            task.run_async("hi", turns=50, session_id="mysession")
        )
        # ...sleep a bit then kill it
        await asyncio.sleep(0.1)
        Task.kill_session("mysession")
        result: lr.ChatDocument = await async_task
        assert result.metadata.status == lr.StatusCode.KILL


def test_task_empty_response(test_settings: Settings):
    set_global(test_settings)
    agent = ChatAgent(ChatAgentConfig(name="Test"))
    task = Task(
        agent,
        interactive=False,
        done_if_response=[Entity.LLM],
        done_if_no_response=[Entity.LLM],
        system_message="""
        User will send you a number. 
        If it is EVEN, repeat the number, else return empty string.
        ONLY return these responses, say NOTHING ELSE
        """,
    )

    response = task.run("4")
    assert response.content == "4"
    response = task.run("3")
    assert response.content == ""


@pytest.mark.parametrize(
    "even_response, odd_response, "
    "done_if_response, done_if_no_response, "
    "even_result, odd_result",
    [
        (f"say '{DONE} {PASS}'", f"say {DONE}", [], [], "4", ""),
        (
            "repeat the number",
            "return empty string",
            [Entity.LLM],
            [Entity.LLM],
            "4",
            "",
        ),
        (
            f"say '{DONE} {PASS}'",
            "return empty string",
            [],
            [lr.mytypes.Entity.LLM],
            "4",
            "",
        ),
    ],
)
def test_task_done_condition(
    test_settings: Settings,
    even_response: str,
    odd_response: str,
    done_if_response: List[str],
    done_if_no_response: List[str],
    even_result: str,
    odd_result: str,
):
    set_global(test_settings)

    # test done_if_response, done_if_no_response
    agent = ChatAgent(ChatAgentConfig(name="Test"))
    task = Task(
        agent,
        interactive=False,
        done_if_response=done_if_response,
        done_if_no_response=done_if_no_response,
        system_message=f"""
        User will send you a number. 
        If it is EVEN, {even_response}, 
        Otherwise {odd_response}.
        ONLY return these responses, say NOTHING ELSE
        """,
    )

    response = task.run("4")
    assert response.content == even_result
    response = task.run("3")
    assert response.content == odd_result


@pytest.mark.parametrize(
    "default_human_response, sys_msg, input, expected",
    [
        (PASS, "User gives a number, return its double", "4", "8"),
        (
            "HELLO",
            "User gives a number, return its double",
            "4",
            "8",
        ),
        (
            "",
            "Whatever user says, you return empty string",
            "4",
            "",
        ),
        (
            "",
            f"Whatever user says, you say {DONE}",
            "4",
            "",
        ),
    ],
)
def test_task_default_human_response(
    test_settings: Settings,
    default_human_response: str,
    sys_msg: str,
    input: str,
    expected: str,
):
    set_global(test_settings)
    agent = ChatAgent(ChatAgentConfig(name="Test"))
    task = Task(
        agent,
        interactive=False,
        done_if_response=[Entity.LLM],
        done_if_no_response=[Entity.LLM],
        default_human_response=default_human_response,
        system_message=sys_msg,
    )

    response = task.run(input)
    assert expected in response.content


@pytest.mark.parametrize("use_fn_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True, False])
@pytest.mark.parametrize("use_orch_tools", [True, False])
@pytest.mark.parametrize(
    "agent_done_pass",
    [True, False],
)
def test_task_tool_agent_response(
    test_settings: Settings,
    use_fn_api: bool,
    use_tools_api: bool,
    agent_done_pass: bool,
    use_orch_tools: bool,
):
    """
    Test loop within single agent, where this cycle repeats:
        [ LLM --Tool--> Agent[Tool] ---> (User) ]*

    Test expected behavior for various Agent-tool-handler responses.
    """
    set_global(test_settings)

    class AugmentTool(ToolMessage):
        request = "next_num"
        purpose = """
        To augment the given <number> with its <successor> = <number> + 1
        """
        number: int
        successor: int

        def handle(self) -> str | ToolMessage:
            if use_orch_tools:
                return DonePassTool() if agent_done_pass else DoneTool()
            else:
                return DONE + " " + PASS if agent_done_pass else DONE

        @classmethod
        def examples(cls) -> List["ToolMessage"]:
            return [
                cls(
                    number=100,
                    successor=101,
                ),
            ]

        @staticmethod
        def handle_message_fallback(
            agent, msg: str | ChatDocument
        ) -> str | ChatDocument | None:
            if isinstance(msg, ChatDocument) and msg.metadata.sender == Entity.LLM:
                return """
                    You must use the `next_num` tool/function to 
                    augment the given number.
                    """
            return None

    agent = ChatAgent(
        ChatAgentConfig(
            name="Test",
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            system_message="""
            User will send a number. Present this number and its successor,
            using the `next_num` tool/function.
            """,
        )
    )
    agent.enable_message(AugmentTool)
    task = Task(agent, interactive=False)

    response = task.run("100")

    def content_empty():
        return response.content == ""

    def fn_call_valid():
        return isinstance(agent.get_tool_messages(response)[0], AugmentTool)

    def tool_valid():
        return "next_num" in response.content

    def fn_or_tool_valid():
        return fn_call_valid() if use_fn_api else tool_valid()

    if agent_done_pass:
        assert fn_or_tool_valid()
    else:
        assert content_empty()


@pytest.mark.parametrize("use_fn_api", [False, True])
@pytest.mark.parametrize("use_tools_api", [True, False])
@pytest.mark.parametrize("agent_response_done", [False, True])
@pytest.mark.parametrize("use_orch_tools", [False, True])
@pytest.mark.parametrize("string_signals", [False, True])
def test_task_tool_num(
    test_settings: Settings,
    use_fn_api: bool,
    use_tools_api: bool,
    agent_response_done: bool,
    use_orch_tools: bool,
    string_signals: bool,
):
    """
    Test loop within single agent, where this cycle repeats:
        [ LLM --Tool--> Agent[Tool] ---> (User) ]*

    The Agent responds to the tool with a number.
    """
    set_global(test_settings)

    class AugmentTool(ToolMessage):
        request = "next_num"
        purpose = """
        To augment the given <number> with its <successor> = <number> + 1
        """
        number: int
        successor: int

        def handle(self) -> str | DoneTool:
            if agent_response_done:
                if use_orch_tools:
                    return DoneTool(content=str(self.successor))
                else:
                    return DONE + " " + str(self.successor)
            else:
                return str(self.successor)

    tool_name = AugmentTool.default_value("request")
    done_pass_tool_name = DonePassTool.default_value("request")
    if use_orch_tools:
        done_response = f"use the TOOL: `{done_pass_tool_name}`"
    else:
        done_response = f"say {DONE} {PASS}"

    agent = ChatAgent(
        ChatAgentConfig(
            name="Test",
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            system_message=f"""
            User will send a number. Augment it with its successor,
            and present the numbers using the `{tool_name}` tool/function.
            You will then receive a number as response.
            When you receive this, 
            {done_response}
            to signal that you are done, and that the result is the number you received.
            """,
        )
    )
    agent.enable_message(AugmentTool)
    if use_orch_tools:
        agent.enable_message(DonePassTool)
    else:
        agent.disable_message_use(DonePassTool)
    task_config = TaskConfig(recognize_string_signals=string_signals)
    task = Task(
        agent,
        interactive=False,
        done_if_no_response=[Entity.LLM],
        config=task_config,
    )

    response = task.run("100", turns=10)
    if use_orch_tools or string_signals:
        assert "101" in response.content
        assert len(agent.message_history) <= 5
    else:
        # no orch tool, and string signals ignored, so task doesn't terminate,
        # and is limited by "turns" parameter
        assert len(agent.message_history) > 7


@pytest.mark.parametrize("use_fn_api", [True, False])
@pytest.mark.parametrize("use_tools_api", [True, False])
@pytest.mark.parametrize("use_orch_tools", [True, False])
def test_task_2_agent_tool(
    test_settings: Settings,
    use_fn_api: bool,
    use_tools_api: bool,
    use_orch_tools: bool,
):
    """
    Test task loop where Agent B's task is a subtask of Agent A's task, and:
    - LLM(A) generates Tool
    - Agent(A) validates Tool, if error, LLM(A) needs to fix, else pass to Agent(B)
    - Agent(B) handles Tool, generates a query for LLM(B) to respond to
    - LLM(B) responds, result should be sent back to Agent(A)
    """

    set_global(test_settings)

    class PolinskyTool(ToolMessage):
        request = "polinsky"
        purpose = """
            Given a <number>, request its Polinsky transform.
            """
        number: int

    class Requestor(ChatAgent):
        def __init__(self, config: ChatAgentConfig):
            super().__init__(config)
            self.enable_message(PolinskyTool, use=True, handle=True)

        def polinsky(self, msg: PolinskyTool) -> str | PassTool:
            # No validation err, so pass it on
            if use_orch_tools:
                return PassTool()
            else:
                return PASS

    done_pass_tool_name = DonePassTool.default_value("request")
    if use_orch_tools:
        done_response = f"use the TOOL: `{done_pass_tool_name}`"
    else:
        done_response = f"say {DONE} {PASS}"
    requestor_agent = Requestor(
        ChatAgentConfig(
            name="Requestor",
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            system_message=f"""
                User will send a number. Your job is to find out what is
                the "Polinsky transform", which you KNOW is POSITIVE 
                but do not know how to compute,
                so you must use the `polinsky` tool/function to request it.
                When you get a POSITIVE value, 
                {done_response}
                to signal you're done.
                If you get a NEGATIVE value, you must AGAIN request the Polinsky
                of the ORIGINAL number, until you get a POSITIVE value.
                """,
        )
    )
    requestor_agent.enable_message(DonePassTool)
    requestor_task = Task(
        requestor_agent,
        interactive=False,
    )

    class PolinskyAgent(ChatAgent):
        def __init__(self, config: ChatAgentConfig):
            self.n_tries = 0
            super().__init__(config)
            self.enable_message(PolinskyTool, use=False, handle=True)

        def polinsky(self, msg: PolinskyTool) -> str:
            # Pass on the number so LLM can respond
            # On the first try, flip the sign of the number,
            # to force the Requestor to try again
            response = str(-msg.number) if self.n_tries == 0 else str(msg.number)
            self.n_tries += 1
            return response

    polinsky_agent = PolinskyAgent(
        ChatAgentConfig(
            name="Polinsky",
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            system_message="""
                When you receive a number, respond with the DOUBLE of that number,
                say nothing else.
                """,
        )
    )
    polinsky_task = Task(
        polinsky_agent,
        interactive=False,
        # below ensure that task returns to requestor_task when LLM responds
        done_if_no_response=[Entity.LLM],
        done_if_response=[Entity.LLM],
    )

    # connect the two agents
    requestor_task.add_sub_task(polinsky_task)

    response = requestor_task.run("100")
    assert "200" in response.content


@pytest.mark.parametrize("use_fn_api", [False, True])
@pytest.mark.parametrize("use_tools_api", [True, False])
@pytest.mark.parametrize("use_orch_tools", [True, False])
def test_task_2_agent_2_tool(
    test_settings: Settings,
    use_fn_api: bool,
    use_tools_api: bool,
    use_orch_tools: bool,
):
    """
    QueryTool: Task A uses and handles (validates), Task B handles but doesn't use
    FeedbackTool: Task B uses and handles (validates), Task A handles but doesn't use
    """

    set_global(test_settings)

    class QueryTool(ToolMessage):
        request = "polinsky_query"
        purpose = """
            Ask whether the Polinsky transform of a <number> equals <value>.
            """
        number: int
        value: int

    class FeedbackTool(ToolMessage):
        request = "polinsky_feedback"
        purpose = """
            Given a <number>, respond with the Polinsky transform of the number.
            """
        feedback: str

    class Requestor(ChatAgent):
        def __init__(self, config: ChatAgentConfig):
            super().__init__(config)
            self.enable_message(QueryTool, use=True, handle=True)
            self.enable_message(FeedbackTool, use=False, handle=True)
            self.enable_message(DoneTool)

        def polinsky_query(self, msg: QueryTool) -> str | PassTool:
            # No validation err, so pass it on so other agent can respond
            return PassTool() if use_orch_tools else PASS

        def polinsky_feedback(self, msg: FeedbackTool) -> str:
            """Transmit feedback received from other agent, to this agent's LLM"""
            if msg.feedback.strip() == "":
                return f"""
                CORRECT, the value you gave IS the Polinsky transform of that number.
                Please proceed with requesting the Polinsky transform of 
                the NEXT number on your list, or if you're finished, use the
                TOOL `{DoneTool.name()}` with `content` set to the summary of the
                transformations, in this format:
                '(number1, transform1), (number2, transform2)'
                """
            else:
                return f"""
                WRONG, please try again based on this feedback: 
                {msg.feedback}
                """

        def handle_message_fallback(self, msg: str | ChatDocument) -> Any:
            if isinstance(msg, ChatDocument) and msg.metadata.sender == Entity.LLM:
                return f"""
                Your INTENT is unclear!
                
                - If you intended to say you're finished with your task,
                then use the `{DoneTool.name()}` tool/function with 
                the `content` field set to the summary of the Polinsky transforms
                of 100 and 500.
                
                - If you intended to ask about the Polinsky transform,
                then use the `{QueryTool.name()}` tool/function to ask about
                the Polinsky transform of a number.
                """

    done_tool_name = DoneTool.default_value("request")
    requestor_agent = Requestor(
        ChatAgentConfig(
            name="Requestor",
            allow_multiple_tools=False,
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            system_message=f"""
                    Your mission is to find the "Polinsky transform" of TWO NUMBERS:
                    100 and 500.
                    This is a mysterious transform that you do not
                    know how to compute, but you try to find out, by GUESSING the
                    value and asking for CONFIRMATION, 
                    using the `polinsky_query` tool/function, ONE NUMBER AT A TIME.
                    
                    Your FIRST GUESS is to simply guess that the Polinsky transform
                    of your number is the SUCCESSOR of the number.
                    Your SECOND GUESS is to guess that the Polinsky transform
                    of your number is the DOUBLE of the number.
                    
                    You will receive feedback on your guess, and:
                    - if the feedback says "CORRECT", you can proceed with requesting
                        the Polinsky transform of the OTHER number.
                    - if the feedback says "WRONG", you must try again, using the
                        given feedback to guide your guess.
                        
                    When you have found out the Polinsky transform of 100 and 500,
                    use the `{done_tool_name}` with `content` showing summary 
                    of the transforms in this format:
                    '(number1, transform1), (number2, transform2)'
                    
                    IMPORTANT - YOU CAN ONLY use the `polinsky_feedback` tool/function
                    ONCE per message.
                    """,
        )
    )
    requestor_task = Task(
        requestor_agent,
        interactive=False,
    )

    class Critic(ChatAgent):
        def __init__(self, config: ChatAgentConfig):
            super().__init__(config)
            self.enable_message(QueryTool, use=False, handle=True)
            self.enable_message(FeedbackTool, use=True, handle=True)

        def polinsky_query(self, msg: QueryTool) -> str:
            # pass on the number so LLM can respond
            return f"Is the Polinsky transform of {msg.number} equal to {msg.value}?"

        def polinsky_feedback(self, msg: FeedbackTool) -> str | DonePassTool:
            """Pass on the feedback to the Requestor"""
            return DonePassTool() if use_orch_tools else DONE + " " + PASS

    critic_agent = Critic(
        ChatAgentConfig(
            name="Critic",
            use_functions_api=use_fn_api,
            use_tools_api=use_tools_api,
            use_tools=not use_fn_api,
            handle_llm_no_tool=f"you forgot to use the TOOL `{FeedbackTool.name()}`",
            system_message="""
            When you receive a query asking whether the Polinsky
            transform of a number x is y, and you must give FEEDBACK
            on this using the `polinsky_feedback` tool/function.
            Here are the rules:

            - If y = x + 1, use the `polinsky_feedback` tool 
              with `feedback` field = "WRONG, try another guess",

            - Otherwise, use the `polinsky_feedback` tool 
              with `feedback` field set to an EMPTY STRING: ""
            
            IMPORTANT - YOU CAN ONLY use the `polinsky_feedback` tool/function
            ONCE per message.
            """,
        )
    )

    critic_task = Task(
        critic_agent,
        interactive=False,
    )

    # connect the two agents
    requestor_task.add_sub_task(critic_task)
    response = requestor_task.run()
    strings = "100 200 500 1000".split()
    assert all(s in response.content for s in strings)


def test_task_tool_responses(
    test_settings: Settings,
):
    """Test that returning ToolMessage from an entity-responder or a Task.run() are
    handled correctly"""

    set_global(test_settings)

    class IncrementTool(ToolMessage):
        request = "increment"
        purpose = "To increment a number"
        x: int

        def handle(self) -> str:
            return DoneTool(content=str(self.x + 1))

    class AnswerTool(ToolMessage):
        request = "answer"
        purpose = "To provide the final answer"
        answer: int

    class DoubleTool(ToolMessage):
        request = "double"
        purpose = "To double a number"
        x: int

        def handle(self) -> str:
            # return this as the double_task's answer
            return AgentDoneTool(tools=[AnswerTool(answer=2 * self.x)])

    class HalveTool(ToolMessage):
        request = "halve"
        purpose = "To halve a number"
        x: int

        def handle(self) -> str:
            return DoneTool(content=self.x // 2)  # note: content can be any type

    class ProcessTool(ToolMessage):
        request = "process"
        purpose = "To process a number"
        x: int

        def handle(self) -> ToolMessage:
            if self.x % 10 == 0:
                return IncrementTool(x=self.x)
            elif self.x % 2 == 0:
                return HalveTool(x=self.x)
            else:
                return DoubleTool(x=self.x)

    class ProcessorAgent(lr.ChatAgent):
        def init_state(self):
            super().init_state()
            self.expecting_result: bool = False

        def llm_response(
            self, message: Optional[str | ChatDocument] = None
        ) -> Optional[ChatDocument | ToolMessage]:
            # return a ToolMessage rather than ChatDocument
            msg_str = message.content if isinstance(message, ChatDocument) else message
            if self.expecting_result:
                if msg_str != "":
                    return DoneTool(content=msg_str)
                elif (
                    isinstance(message, ChatDocument)
                    and len(message.tool_messages) > 0
                    and isinstance(message.tool_messages[0], AnswerTool)
                ):
                    # must be AnswerTool
                    answer_tool: AnswerTool = message.tool_messages[0]
                    return DoneTool(content=answer_tool.answer)
                else:
                    return None

            x = int(msg_str)
            self.expecting_result = True
            return ProcessTool(x=x)

    processor_agent = ProcessorAgent(lr.ChatAgentConfig(name="Processor"))
    processor_agent.enable_message(ProcessTool)
    processor_task = Task(processor_agent, interactive=False, restart=True)

    halve_agent = lr.ChatAgent(lr.ChatAgentConfig(name="Halver", llm=None))
    halve_agent.enable_message(HalveTool, use=False, handle=True)
    halve_agent.enable_message(IncrementTool, use=False, handle=False)
    halve_agent.enable_message(DoubleTool, use=False, handle=False)

    halve_task = Task(halve_agent, interactive=False)

    double_agent = lr.ChatAgent(lr.ChatAgentConfig(name="Doubler", llm=None))
    double_agent.enable_message(DoubleTool, use=False, handle=True)
    double_task = Task(double_agent, interactive=False)

    increment_agent = lr.ChatAgent(lr.ChatAgentConfig(name="Incrementer", llm=None))
    increment_agent.enable_message(IncrementTool, use=False, handle=True)
    increment_agent.enable_message(DoubleTool, use=False, handle=False)
    increment_task = Task(increment_agent, interactive=False)

    processor_task.add_sub_task([halve_task, increment_task, double_task])

    result = processor_task.run(str(3))
    assert result.content == str(6)

    # note: processor_agent state gets reset each time we run the task
    result = processor_task.run(str(16))
    assert result.content == str(8)

    result = processor_task[int].run(10)
    assert result == 11


def test_task_output_format_sequence():
    """
    Test that `Task`s correctly execute a sequence of steps
    controlled by the agent's `output_format`, and that `output_format`
    is handled by default without `enable_message`.
    """

    class MultiplyTool(ToolMessage):
        request: str = "multiply"
        purpose: str = "To multiply two integers."
        a: int
        b: int

    class IncrementTool(ToolMessage):
        request: str = "increment"
        purpose: str = "To increment an integer."
        x: int

    class PowerTool(ToolMessage):
        request: str = "power"
        purpose: str = "To compute `x` ** `y`."
        x: int
        y: int

    class CompositionAgent(ChatAgent):
        def __init__(self, config: ChatAgentConfig = ChatAgentConfig()):
            super().__init__(config)
            self.set_output_format(MultiplyTool)

        def multiply(self, message: MultiplyTool) -> str:
            self.set_output_format(IncrementTool)

            return str(message.a * message.b)

        def increment(self, message: IncrementTool) -> str:
            self.set_output_format(PowerTool)

            return str(message.x + 1)

        def power(self, message: PowerTool) -> str:
            return f"{DONE} {message.x ** message.y}"

    def to_tool(message: LLMMessage, tool: type[ToolMessage]) -> ToolMessage:
        return tool.parse_obj(json.loads(message.content))

    def test_sequence(x: int) -> None:
        agent = CompositionAgent(
            ChatAgentConfig(
                llm=OpenAIGPTConfig(
                    supports_json_schema=True,
                    supports_strict_tools=True,
                ),
            )
        )
        task = lr.Task(
            agent,
            system_message="""
            You will be provided with a number `x` and will compute (3 * x + 1) ** 4,
            using these ops sequentially: 
            - multiplication, to compute 3*x to get result M, using the `multiply` tool
            - increment, to compute M + 1 to get result N, using the `increment` tool
            - power, to compute N ** 4 to get result P, using the `power` tool
            """,
            interactive=False,
            default_return_type=int,
        )
        output = task.run(x)
        assert isinstance(output, int)
        assert output == (3 * x + 1) ** 4

        # check steps
        messages = agent.message_history
        assert len(messages) >= 7

        multiply_message: MultiplyTool = to_tool(messages[2], MultiplyTool)  # type: ignore
        assert {multiply_message.a, multiply_message.b} == {3, x}

        increment_message: IncrementTool = to_tool(messages[4], IncrementTool)  # type: ignore
        assert increment_message.x == 3 * x

        power_message: PowerTool = to_tool(messages[6], PowerTool)  # type: ignore
        assert (power_message.x, power_message.y) == (3 * x + 1, 4)

    for x in range(5):
        test_sequence(x)


@pytest.mark.asyncio
async def test_task_output_format_sequence_async():
    """
    Test that async `Task`s correctly execute a sequence of steps
    controlled by the agent's `output_format`, and that `output_format`
    is handled by default without `enable_message`.
    """

    class MultiplyTool(ToolMessage):
        request: str = "multiply"
        purpose: str = "To multiply two integers."
        a: int
        b: int

    class IncrementTool(ToolMessage):
        request: str = "increment"
        purpose: str = "To increment an integer."
        x: int

    class PowerTool(ToolMessage):
        request: str = "power"
        purpose: str = "To compute `x` ** `y`."
        x: int
        y: int

    class CompositionAgent(ChatAgent):
        def __init__(self, config: ChatAgentConfig = ChatAgentConfig()):
            super().__init__(config)
            self.set_output_format(MultiplyTool)

        def multiply(self, message: MultiplyTool) -> str:
            self.set_output_format(IncrementTool)

            return str(message.a * message.b)

        def increment(self, message: IncrementTool) -> str:
            self.set_output_format(PowerTool)

            return str(message.x + 1)

        def power(self, message: PowerTool) -> str:
            self.set_output_format(MultiplyTool)

            return f"{DONE} {message.x ** message.y}"

    def to_tool(message: LLMMessage, tool: type[ToolMessage]) -> ToolMessage:
        return tool.parse_obj(json.loads(message.content))

    async def test_sequence(x: int) -> None:
        agent = CompositionAgent(
            ChatAgentConfig(
                llm=OpenAIGPTConfig(
                    supports_json_schema=True,
                    supports_strict_tools=True,
                ),
            )
        )
        task = lr.Task(
            agent,
            system_message="""
            You will be provided with a number `x` and will compute (3 * x + 1) ** 4,
            using these ops sequentially: 
            - multiplication, to compute 3*x to get result M, using the `multiply` tool
            - increment, to compute M + 1 to get result N, using the `increment` tool
            - power, to compute N ** 4 to get result P, using the `power` tool
            """,
            interactive=False,
            default_return_type=int,
        )
        output = await task.run_async(x)
        assert isinstance(output, int)
        assert output == (3 * x + 1) ** 4

        # check steps
        messages = agent.message_history
        assert len(messages) >= 7

        multiply_message: MultiplyTool = to_tool(messages[2], MultiplyTool)  # type: ignore
        assert {multiply_message.a, multiply_message.b} == {3, x}

        increment_message: IncrementTool = to_tool(messages[4], IncrementTool)  # type: ignore
        assert increment_message.x == 3 * x

        power_message: PowerTool = to_tool(messages[6], PowerTool)  # type: ignore
        assert (power_message.x, power_message.y) == (3 * x + 1, 4)

    for x in range(5):
        await test_sequence(x)


def test_done_if_tool(test_settings: Settings):
    """Test that task terminates when LLM generates a tool and done_if_tool=True"""

    set_global(test_settings)

    class SimpleTool(ToolMessage):
        request: str = "simple_tool"
        purpose: str = "A simple tool for testing"
        value: str = "test"

    # Create a mock LLM that always responds with a tool in JSON format
    tool_response = SimpleTool(value="hello").to_json()

    mock_lm_config = MockLMConfig(default_response=tool_response)

    # Create agent with mock LLM
    agent = ChatAgent(
        ChatAgentConfig(
            name="TestAgent",
            llm=mock_lm_config,
        )
    )

    # Enable the tool but don't handle it
    # (the `use` doesn't matter here since we're hard-coding the MockLM response
    # to always be the tool-call)
    agent.enable_message(SimpleTool, use=False, handle=False)

    # Test 1: With done_if_tool=False (default), task should not terminate on tool
    task = Task(
        agent,
        interactive=False,
        config=TaskConfig(done_if_tool=False),
    )

    result = task.run("Process this message", turns=3)
    # Task should run for all 3 turns since done_if_tool=False
    assert result is not None
    assert len(agent.message_history) >= 3  # At least: system, user, assistant

    # Reset agent for next test
    agent.clear_history()

    # Test 2: With done_if_tool=True, task should terminate when tool is generated
    task_with_done = Task(
        agent,
        interactive=False,
        config=TaskConfig(done_if_tool=True),
    )

    result = task_with_done.run("Do something else", turns=10)
    # Task should terminate after first LLM response containing tool
    assert result is not None
    # Should have exactly 3 messages: system, user, assistant (with tool)
    assert len(agent.message_history) == 3

    # Verify the last message contains the tool
    last_msg = agent.message_history[-1]
    assert "simple_tool" in last_msg.content

    # Reset agent for next test
    agent.clear_history()

    # Test 3: With done_if_tool=True and return type specified
    task_with_return_type = Task(
        agent,
        interactive=False,
        config=TaskConfig(done_if_tool=True),
    )[SimpleTool]

    result_typed = task_with_return_type.run("Process with type", turns=10)
    # Task should terminate and return the SimpleTool instance
    assert result_typed is not None
    assert isinstance(result_typed, SimpleTool)
    assert result_typed.value == "hello"


def test_task_init_preserves_parent_id():
    """Test that task.init() preserves parent_id when deep copying ChatDocument"""

    # Create an agent
    agent = ChatAgent(ChatAgentConfig(name="TestAgent"))

    # Test 1: Basic parent_id preservation
    parent_doc = ChatDocument(
        content="Parent message",
        metadata=lr.agent.chat_document.ChatDocMetaData(
            sender=Entity.USER,
        ),
    )
    child_doc = ChatDocument(
        content="Child message",
        metadata=lr.agent.chat_document.ChatDocMetaData(
            parent_id=parent_doc.id(),
            sender=Entity.USER,
        ),
    )

    task = Task(agent, interactive=False)
    task.init(child_doc)

    # The pending message should preserve the parent_id
    assert task.pending_message is not None
    assert task.pending_message.metadata.parent_id == parent_doc.id()
    assert task.pending_message.content == "Child message"

    # Test 2: With caller (subtask scenario)
    caller_task = Task(agent, interactive=False, name="CallerTask")
    sub_task = Task(agent, interactive=False, name="SubTask")

    # When message already has parent_id, it should be preserved
    msg_with_parent = ChatDocument(
        content="Message with parent",
        metadata=lr.agent.chat_document.ChatDocMetaData(
            parent_id=parent_doc.id(),
            sender=Entity.USER,
        ),
    )

    # Set caller to simulate subtask scenario
    sub_task.caller = caller_task
    sub_task.init(msg_with_parent)

    # Parent_id should still be preserved (not overridden to msg.id)
    assert sub_task.pending_message is not None
    assert sub_task.pending_message.metadata.parent_id == parent_doc.id()

    # Test 3: With caller but no original parent_id
    msg_no_parent = ChatDocument(
        content="Message without parent",
        metadata=lr.agent.chat_document.ChatDocMetaData(
            sender=Entity.USER,
        ),
    )

    sub_task2 = Task(agent, interactive=False, name="SubTask2")
    sub_task2.caller = caller_task
    sub_task2.init(msg_no_parent)

    # Since original had no parent_id, it should be set to msg.id
    assert sub_task2.pending_message is not None
    assert sub_task2.pending_message.metadata.parent_id == msg_no_parent.id()
</file>

<file path="README.md">
<div align="center">
  <img src="docs/assets/langroid-card-lambda-ossem-rust-1200-630.png" alt="Logo" 
        width="400" align="center">
</div>

<div align="center">

[![PyPI - Version](https://img.shields.io/pypi/v/langroid)](https://pypi.org/project/langroid/)
[![Downloads](https://img.shields.io/pypi/dm/langroid)](https://pypi.org/project/langroid/)
[![Pytest](https://github.com/langroid/langroid/actions/workflows/pytest.yml/badge.svg)](https://github.com/langroid/langroid/actions/workflows/pytest.yml)
[![codecov](https://codecov.io/gh/langroid/langroid/graph/badge.svg)](https://codecov.io/gh/langroid/langroid)
[![Multi-Architecture DockerHub](https://github.com/langroid/langroid/actions/workflows/docker-publish.yml/badge.svg)](https://github.com/langroid/langroid/actions/workflows/docker-publish.yml)

[![Static Badge](https://img.shields.io/badge/Documentation-blue?link=https%3A%2F%2Flangroid.github.io%2Flangroid%2F&link=https%3A%2F%2Flangroid.github.io%2Flangroid%2F)](https://langroid.github.io/langroid)
[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/langroid/langroid/blob/main/examples/Langroid_quick_start.ipynb)
[![Discord](https://img.shields.io/badge/Discord-%235865F2.svg?style=flat&logo=discord&logoColor=white)](https://discord.gg/ZU36McDgDs)
[![Substack](https://img.shields.io/badge/Substack-%23006f5c.svg?style=flat&logo=substack&logoColor=FF6719)](https://langroid.substack.com/p/langroid-harness-llms-with-multi-agent-programming)

[![GitMCP](https://img.shields.io/endpoint?url=https://gitmcp.io/badge/OWNER/REPO)](https://gitmcp.io/langroid/langroid)
</div>

<h3 align="center">
  <a target="_blank" 
    href="https://langroid.github.io/langroid/" rel="dofollow">
      <strong>Documentation</strong></a>
  &middot;
  <a target="_blank" href="https://github.com/langroid/langroid-examples" rel="dofollow">
      <strong>Examples Repo</strong></a>
  &middot;
  <a target="_blank" href="https://discord.gg/ZU36McDgDs" rel="dofollow">
      <strong>Discord</strong></a>
  &middot;
  <a target="_blank" href="./CONTRIBUTING.md" rel="dofollow">
      <strong>Contributing</strong></a>

  <br />
</h3>

`Langroid` is an intuitive, lightweight, extensible and principled
Python framework to easily build LLM-powered applications, from CMU and UW-Madison researchers. 
You set up Agents, equip them with optional components (LLM, 
vector-store and tools/functions), assign them tasks, and have them 
collaboratively solve a problem by exchanging messages. 
This Multi-Agent paradigm is inspired by the
[Actor Framework](https://en.wikipedia.org/wiki/Actor_model)
(but you do not need to know anything about this!). 

`Langroid` is a fresh take on LLM app-development, where considerable thought has gone 
into simplifying the developer experience; 
it does not use `Langchain`, or any other LLM framework, 
and works with [practically any LLM](https://langroid.github.io/langroid/tutorials/supported-models/).

:fire: Read the (WIP) [overview of the langroid architecture](https://langroid.github.io/langroid/blog/2024/08/15/overview-of-langroids-multi-agent-architecture-prelim/), 
 and a [quick tour of Langroid](https://langroid.github.io/langroid/tutorials/langroid-tour/).

:fire: MCP Support: Allow any LLM-Agent to leverage MCP Servers via Langroid's simple
[MCP tool adapter](https://langroid.github.io/langroid/notes/mcp-tools/) that converts 
the server's tools into Langroid's `ToolMessage` instances.

📢 Companies are using/adapting Langroid in **production**. Here is a quote:

>[Nullify](https://www.nullify.ai) uses AI Agents for secure software development. 
> It finds, prioritizes and fixes vulnerabilities. We have internally adapted Langroid's multi-agent orchestration framework in production, after evaluating CrewAI, Autogen, LangChain, Langflow, etc. We found Langroid to be far superior to those frameworks in terms of ease of setup and flexibility. Langroid's Agent and Task abstractions are intuitive, well thought out, and provide a great developer  experience. We wanted the quickest way to get something in production. With other frameworks it would have taken us weeks, but with Langroid we got to good results in minutes. Highly recommended! <br> -- Jacky Wong, Head of AI at Nullify.


:fire: See this [Intro to Langroid](https://lancedb.substack.com/p/langoid-multi-agent-programming-framework)
blog post from the LanceDB team

:fire: Just published in ML for Healthcare (2024): a Langroid-based Multi-Agent RAG system for 
pharmacovigilance, see [blog post](https://langroid.github.io/langroid/blog/2024/08/12/malade-multi-agent-architecture-for-pharmacovigilance/)


We welcome contributions: See the [contributions](./CONTRIBUTING.md) document
for ideas on what to contribute.

Are you building LLM Applications, or want help with Langroid for your company, 
or want to prioritize Langroid features for your company use-cases? 
[Prasad Chalasani](https://www.linkedin.com/in/pchalasani/) is available for consulting
(advisory/development): pchalasani at gmail dot com.

Sponsorship is also accepted via [GitHub Sponsors](https://github.com/sponsors/langroid)

**Questions, Feedback, Ideas? Join us on [Discord](https://discord.gg/ZU36McDgDs)!**

# Quick glimpse of coding with Langroid
This is just a teaser; there's much more, like function-calling/tools, 
Multi-Agent Collaboration, Structured Information Extraction, DocChatAgent 
(RAG), SQLChatAgent, non-OpenAI local/remote LLMs, etc. Scroll down or see docs for more.
See the Langroid Quick-Start [Colab](https://colab.research.google.com/github/langroid/langroid/blob/main/examples/Langroid_quick_start.ipynb)
that builds up to a 2-agent information-extraction example using the OpenAI ChatCompletion API. 
See also this [version](https://colab.research.google.com/drive/190Tk7t4AdY1P9F_NlZ33-YEoGnHweQQ0) that uses the OpenAI Assistants API instead.

:fire: just released! [Example](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/chat-multi-extract-local.py) 
script showing how you can use Langroid multi-agents and tools
to extract structured information from a document using **only a local LLM**
(Mistral-7b-instruct-v0.2).

```python
import langroid as lr
import langroid.language_models as lm

# set up LLM
llm_cfg = lm.OpenAIGPTConfig( # or OpenAIAssistant to use Assistant API 
  # any model served via an OpenAI-compatible API
  chat_model=lm.OpenAIChatModel.GPT4o, # or, e.g., "ollama/mistral"
)
# use LLM directly
mdl = lm.OpenAIGPT(llm_cfg)
response = mdl.chat("What is the capital of Ontario?", max_tokens=10)

# use LLM in an Agent
agent_cfg = lr.ChatAgentConfig(llm=llm_cfg)
agent = lr.ChatAgent(agent_cfg)
agent.llm_response("What is the capital of China?") 
response = agent.llm_response("And India?") # maintains conversation state 

# wrap Agent in a Task to run interactive loop with user (or other agents)
task = lr.Task(agent, name="Bot", system_message="You are a helpful assistant")
task.run("Hello") # kick off with user saying "Hello"

# 2-Agent chat loop: Teacher Agent asks questions to Student Agent
teacher_agent = lr.ChatAgent(agent_cfg)
teacher_task = lr.Task(
  teacher_agent, name="Teacher",
  system_message="""
    Ask your student concise numbers questions, and give feedback. 
    Start with a question.
    """
)
student_agent = lr.ChatAgent(agent_cfg)
student_task = lr.Task(
  student_agent, name="Student",
  system_message="Concisely answer the teacher's questions.",
  single_round=True,
)

teacher_task.add_sub_task(student_task)
teacher_task.run()
```

# :fire: Updates/Releases

<details>
<summary> <b>Click to expand</b></summary>

- **Jun 2025:**
  - [0.56.0](https://github.com/langroid/langroid/releases/tag/0.56.0) `TaskTool` for delegating tasks to sub-agents - 
    enables agents to spawn sub-agents with specific tools and configurations.
  - [0.55.0](https://github.com/langroid/langroid/releases/tag/0.55.0) Event-based task termination with `done_sequences` - 
    declarative task completion using event patterns.
  - [0.54.0](https://github.com/langroid/langroid/releases/tag/0.54.0) Portkey AI Gateway support - access 200+ models 
    across providers through unified API with caching, retries, observability.
- **Mar-Apr 2025:**
  - [0.53.0](https://github.com/langroid/langroid/releases/tag/0.53.0) MCP Tools Support.
  - [0.52.0](https://github.com/langroid/langroid/releases/tag/0.52.0) Multimodal support, i.e. allow PDF, image 
    inputs to LLM.
  - [0.51.0](https://github.com/langroid/langroid/releases/tag/0.51.0) `LLMPdfParser`, generalizing 
    `GeminiPdfParser` to parse documents directly with LLM.
  - [0.50.0](https://github.com/langroid/langroid/releases/tag/0.50.0) Structure-aware Markdown chunking with chunks 
    enriched by section headers.
  - [0.49.0](https://github.com/langroid/langroid/releases/tag/0.49.0) Enable easy switch to LiteLLM Proxy-server 
  - [0.48.0](https://github.com/langroid/langroid/releases/tag/0.48.0) Exa Crawler, Markitdown Parser
  - [0.47.0](https://github.com/langroid/langroid/releases/tag/0.47.0) Support Firecrawl URL scraper/crawler - 
    thanks @abab-dev
  - [0.46.0](https://github.com/langroid/langroid/releases/tag/0.46.0) Support LangDB LLM Gateway - thanks @MrunmayS.
  - [0.45.0](https://github.com/langroid/langroid/releases/tag/0.45.0) Markdown parsing with `Marker` - thanks @abab-dev
  - [0.44.0](https://github.com/langroid/langroid/releases/tag/0.44.0) Late imports to reduce startup time. Thanks 
    @abab-dev
- **Feb 2025:**
  - [0.43.0](https://github.com/langroid/langroid/releases/tag/0.43.0): `GeminiPdfParser` for parsing PDF using 
    Gemini LLMs - Thanks @abab-dev.
  - [0.42.0](https://github.com/langroid/langroid/releases/tag/0.42.0): `markitdown` parser for `pptx,xlsx,xls` files 
    Thanks @abab-dev.
  - [0.41.0](https://github.com/langroid/langroid/releases/tag/0.41.0): `pinecone` vector-db (Thanks @coretado), 
    `Tavily` web-search (Thanks @Sozhan308), `Exa` web-search (Thanks @MuddyHope).
  - [0.40.0](https://github.com/langroid/langroid/releases/tag/0.40.0): `pgvector` vector-db. Thanks @abab-dev.
  - [0.39.0](https://github.com/langroid/langroid/releases/tag/0.39.0): `ChatAgentConfig.handle_llm_no_tool` for 
    handling LLM "forgetting" to use a tool.
  - [0.38.0](https://github.com/langroid/langroid/releases/tag/0.38.0): Gemini embeddings - Thanks @abab-dev)
  - [0.37.0](https://github.com/langroid/langroid/releases/tag/0.37.0): New PDF Parsers: `docling`, `pymupdf4llm`
- **Jan 2025:**
  - [0.36.0](https://github.com/langroid/langroid/releases/tag/0.36.0): Weaviate vector-db support (thanks @abab-dev).
  - [0.35.0](https://github.com/langroid/langroid/releases/tag/0.35.0): Capture/Stream reasoning content from 
    Reasoning LLMs (e.g. DeepSeek-R1, OpenAI o1) in addition to final answer.
  - [0.34.0](https://github.com/langroid/langroid/releases/tag/0.34.0): DocChatAgent 
    chunk enrichment to improve retrieval. (collaboration with @dfm88). 
  - [0.33.0](https://github.com/langroid/langroid/releases/tag/0.33.3) Move from Poetry to uv! (thanks @abab-dev).
  - [0.32.0](https://github.com/langroid/langroid/releases/tag/0.32.0) DeepSeek v3 support.
- **Dec 2024:**
  - [0.31.0](https://github.com/langroid/langroid/releases/tag/0.31.0) Azure OpenAI Embeddings
  - [0.30.0](https://github.com/langroid/langroid/releases/tag/0.30.0) Llama-cpp embeddings (thanks @Kwigg).
  - [0.29.0](https://github.com/langroid/langroid/releases/tag/0.29.0) Custom Azure OpenAI Client (thanks 
    @johannestang).
  - [0.28.0](https://github.com/langroid/langroid/releases/tag/0.28.0) `ToolMessage`: `_handler` field to override 
default handler method name in `request` field (thanks @alexagr).
  - [0.27.0](https://github.com/langroid/langroid/releases/tag/0.27.0) OpenRouter Support.
  - [0.26.0](https://github.com/langroid/langroid/releases/tag/0.26.0) Update to latest Chainlit.
  - [0.25.0](https://github.com/langroid/langroid/releases/tag/0.25.0) True Async Methods for agent and 
    user-response (thanks @alexagr).
- **Nov 2024:**
  - **[0.24.0](https://langroid.github.io/langroid/notes/structured-output/)**: 
     Enables support for `Agent`s with strict JSON schema output format on compatible LLMs and strict mode for the OpenAI tools API.
    (thanks @nilspalumbo).
  - **[0.23.0](https://langroid.github.io/langroid/tutorials/local-llm-setup/#local-llms-hosted-on-glhfchat)**: 
      support for LLMs (e.g. `Qwen2.5-Coder-32b-Instruct`) hosted on glhf.chat 
  - **[0.22.0](https://langroid.github.io/langroid/notes/large-tool-results/)**: 
     Optional parameters to truncate large tool results.
  - **[0.21.0](https://langroid.github.io/langroid/notes/gemini/)** Direct support for Gemini models via OpenAI client instead of using LiteLLM.
  - **[0.20.0](https://github.com/langroid/langroid/releases/tag/0.20.0)** Support for 
    ArangoDB Knowledge Graphs.
- **Oct 2024:**
  - **[0.18.0]** [LLMConfig.async_stream_quiet](https://langroid.github.io/langroid/notes/async-streaming/) flag to 
    turn off LLM output in async + stream mode.
  - **[0.17.0]** XML-based tools, see [docs](https://langroid.github.io/langroid/notes/xml-tools/).
- **Sep 2024:**
  - **[0.16.0](https://github.com/langroid/langroid/releases/tag/0.16.0)**  Support for OpenAI `o1-mini` and `o1-preview` models.
  - **[0.15.0](https://github.com/langroid/langroid/releases/tag/0.15.0)** Cerebras API support -- run llama-3.1 models hosted on Cerebras Cloud (very fast inference).
  - **[0.14.0](https://github.com/langroid/langroid/releases/tag/0.14.0)** `DocChatAgent` uses Reciprocal Rank Fusion (RRF) to rank chunks retrieved by different methods.
  - **[0.12.0](https://github.com/langroid/langroid/releases/tag/0.12.0)** `run_batch_task` new option -- `stop_on_first_result` - allows termination of batch as soon as any task returns a result.  
- **Aug 2024:**
  - **[0.11.0](https://github.com/langroid/langroid/releases/tag/0.11.0)** Polymorphic `Task.run(), Task.run_async`.
  - **[0.10.0](https://github.com/langroid/langroid/releases/tag/0.10.0)** Allow tool handlers to return arbitrary result type, including other tools.
  - **[0.9.0](https://github.com/langroid/langroid/releases/tag/0.9.0)** Orchestration Tools, to signal various task statuses, and to pass messages between agents.
  - **[0.7.0](https://github.com/langroid/langroid/releases/tag/0.7.0)** OpenAI tools API support, including multi-tools.
- **Jul 2024:**
  - **[0.3.0](https://github.com/langroid/langroid/releases/tag/0.3.0)**: Added [FastEmbed](https://qdrant.github.io/fastembed/qdrant/Usage_With_Qdrant/) embeddings from Qdrant
- **Jun 2024:**
  - **0.2.0:** Improved lineage tracking, granular sub-task configs, and a new tool, `RewindTool`, 
    that lets an agent "rewind and redo" a past message (and all dependent messages are cleared out 
    thanks to the lineage tracking). Read notes [here](https://github.com/langroid/langroid/releases/tag/0.2.0).
- **May 2024:** 
  - **Slimmer langroid**: All document-parsers (i.e. pdf, doc, docx) and most 
    vector-databases (except qdrant) 
    are now optional/extra dependencies, which helps reduce build size, script 
    start-up time, and install time. For convenience various grouping of "extras" are 
    provided, e.g. `doc-chat`, `db` (for database-related dependencies). See updated 
    install instructions below and in the docs.
  - **Few-shot examples** for tools: when defining a [ToolMessage](https://langroid.github.io/langroid/quick-start/chat-agent-tool/#example-find-the-smallest-number-in-a-list), previously you were able to include a classmethod named `examples`,
    and a random example from this list would be used to generate a 1-shot example 
    for the LLM. This has been improved so you can now supply a list of examples 
    where each example is either a tool instance, or a tuple of (description, 
    tool instance), where the description is a "thought" that leads the LLM to use 
    the tool (see example in the [docs](https://langroid.github.io/langroid/quick-start/chat-agent-tool/#example-find-the-smallest-number-in-a-list)). In some scenarios this can improve LLM tool 
    generation accuracy. Also, now instead of a random example, ALL examples are used to generate few-shot 
    examples.     
  - [Infinite loop detection](https://github.com/langroid/langroid/blob/0ed30eb467b00d5eaf2933b577a4b2cc37de1aa1/langroid/agent/task.py#L1121) for task loops of cycle-length <= 10 (configurable 
    in [`TaskConfig`](https://langroid.github.io/langroid/reference/agent/task/#langroid.agent.task.TaskConfig). Only detects _exact_ loops, rather than _approximate_ loops where the entities are saying essentially similar (but not exactly the same) things repeatedly.
  - "@"-addressing: any entity can address any other by name, which can be the name 
    of an agent's responder ("llm", "user", "agent") or a sub-task name. This is a 
    simpler alternative to the `RecipientTool` mechanism, with the tradeoff that 
    since it's not a tool, there's no way to enforce/remind the LLM to explicitly 
    specify an addressee (in scenarios where this is important).
  - [Much-Improved Citation](https://github.com/langroid/langroid/issues/477) 
    generation and display when using `DocChatAgent`.
  - `gpt-4o` is now the default LLM throughout; Update tests and examples to work 
    with this LLM; use tokenizer corresponding to the LLM.
  - `gemini 1.5 pro` support via `litellm`
  - `QdrantDB:` update to support learned sparse embeddings.
- **Apr 2024:**
  - **0.1.236**: Support for open LLMs hosted on Groq, e.g. specify 
    `chat_model="groq/llama3-8b-8192"`.
      See [tutorial](https://langroid.github.io/langroid/tutorials/local-llm-setup/).
  - **0.1.235**: `Task.run(), Task.run_async(), run_batch_tasks` have `max_cost` 
    and `max_tokens` params to exit when tokens or cost exceed a limit. The result 
    `ChatDocument.metadata` now includes a `status` field which is a code indicating a 
     task completion reason code. Also `task.run()` etc can be invoked with an explicit
     `session_id` field which is used as a key to look up various settings in Redis cache.
    Currently only used to look up "kill status" - this allows killing a running task, either by `task.kill()`
    or by the classmethod `Task.kill_session(session_id)`.
    For example usage, see the `test_task_kill` in [tests/main/test_task.py](https://github.com/langroid/langroid/blob/main/tests/main/test_task.py)
  
- **Mar 2024:**
  - **0.1.216:** Improvements to allow concurrent runs of `DocChatAgent`, see the
    [`test_doc_chat_agent.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_doc_chat_agent.py)
    in particular the `test_doc_chat_batch()`;
    New task run utility: [`run_batch_task_gen`](https://github.com/langroid/langroid/blob/main/langroid/agent/batch.py) 
    where a task generator can be specified, to generate one task per input. 
  - **0.1.212:** ImagePdfParser: support for extracting text from image-based PDFs.
    (this means `DocChatAgent` will now work with image-pdfs).
  - **0.1.194 - 0.1.211:** Misc fixes, improvements, and features:
    - Big enhancement in RAG performance (mainly, recall) due to a [fix in Relevance 
      Extractor](https://github.com/langroid/langroid/releases/tag/0.1.209)
    - `DocChatAgent` [context-window fixes](https://github.com/langroid/langroid/releases/tag/0.1.208)
    - Anthropic/Claude3 support via Litellm
    - `URLLoader`: detect file time from header when URL doesn't end with a 
      recognizable suffix like `.pdf`, `.docx`, etc.
    - Misc lancedb integration fixes
    - Auto-select embedding config based on whether `sentence_transformer` module is available.
    - Slim down dependencies, make some heavy ones optional, e.g. `unstructured`, 
      `haystack`, `chromadb`, `mkdocs`, `huggingface-hub`, `sentence-transformers`.
    - Easier top-level imports from `import langroid as lr`
    - Improve JSON detection, esp from weak LLMs
- **Feb 2024:** 
  - **0.1.193:** Support local LLMs using Ollama's new OpenAI-Compatible server: 
     simply specify `chat_model="ollama/mistral"`. See [release notes](https://github.com/langroid/langroid/releases/tag/0.1.193).
  - **0.1.183:** Added Chainlit support via [callbacks](https://github.com/langroid/langroid/blob/main/langroid/agent/callbacks/chainlit.py). 
   See [examples](https://github.com/langroid/langroid/tree/main/examples/chainlit).
- **Jan 2024:**
  - **0.1.175** 
    - [Neo4jChatAgent](https://github.com/langroid/langroid/tree/main/langroid/agent/special/neo4j) to chat with a neo4j knowledge-graph.
      (Thanks to [Mohannad](https://github.com/Mohannadcse)!). The agent uses tools to query the Neo4j schema and translate user queries to Cypher queries,
      and the tool handler executes these queries, returning them to the LLM to compose
      a natural language response (analogous to how `SQLChatAgent` works).
      See example [script](https://github.com/langroid/langroid/tree/main/examples/kg-chat) using this Agent to answer questions about Python pkg dependencies.
    - Support for `.doc` file parsing (in addition to `.docx`)
    - Specify optional [`formatter` param](https://github.com/langroid/langroid/releases/tag/0.1.171) 
      in `OpenAIGPTConfig` to ensure accurate chat formatting for local LLMs. 
  - **[0.1.157](https://github.com/langroid/langroid/releases/tag/0.1.157):** `DocChatAgentConfig` 
     has a new param: `add_fields_to_content`, to specify additional document fields to insert into 
     the main `content` field, to help improve retrieval.
  - **[0.1.156](https://github.com/langroid/langroid/releases/tag/0.1.156):** New Task control signals
     PASS_TO, SEND_TO; VectorStore: Compute Pandas expression on documents; LanceRAGTaskCreator creates 3-agent RAG system with Query Planner, Critic and RAG Agent.
- **Dec 2023:**
  - **0.1.154:** (For details see release notes of [0.1.149](https://github.com/langroid/langroid/releases/tag/0.1.149)
      and [0.1.154](https://github.com/langroid/langroid/releases/tag/0.1.154)). 
    - `DocChatAgent`: Ingest Pandas dataframes and filtering.
    - `LanceDocChatAgent` leverages `LanceDB` vector-db for efficient vector search
     and full-text search and filtering.
    - Improved task and multi-agent control mechanisms
    - `LanceRAGTaskCreator` to create a 2-agent system consisting of a `LanceFilterAgent` that
      decides a filter and rephrase query to send to a RAG agent.
  - **[0.1.141](https://github.com/langroid/langroid/releases/tag/0.1.141):**
    API Simplifications to reduce boilerplate:
    auto-select an available OpenAI model (preferring gpt-4o), simplifies defaults.
    Simpler `Task` initialization with default `ChatAgent`.
- **Nov 2023:**
  - **[0.1.126](https://github.com/langroid/langroid/releases/tag/0.1.126):**
     OpenAIAssistant agent: Caching Support. 
  - **0.1.117:** Support for OpenAI Assistant API tools: Function-calling, 
    Code-intepreter, and Retriever (RAG), file uploads. These work seamlessly 
    with Langroid's task-orchestration.
    Until docs are ready, it's best to see these usage examples:
    
    - **Tests:**
      - [test_openai_assistant.py](https://github.com/langroid/langroid/blob/main/tests/main/test_openai_assistant.py)
      - [test_openai_assistant_async.py](https://github.com/langroid/langroid/blob/main/tests/main/test_openai_assistant_async.py)

    - **Example scripts:**
      - [The most basic chat app](https://github.com/langroid/langroid/blob/main/examples/basic/oai-asst-chat.py)
      - [Chat with code interpreter](https://github.com/langroid/langroid/blob/main/examples/basic/oai-code-chat.py)
      - [Chat with retrieval (RAG)](https://github.com/langroid/langroid/blob/main/examples/docqa/oai-retrieval-assistant.py)
      - [2-agent RAG chat](https://github.com/langroid/langroid/blob/main/examples/docqa/oai-retrieval-2.py)
  - **0.1.112:** [`OpenAIAssistant`](https://github.com/langroid/langroid/blob/main/langroid/agent/openai_assistant.py) is a subclass of `ChatAgent` that 
    leverages the new OpenAI Assistant API. It can be used as a drop-in 
    replacement for `ChatAgent`, and relies on the Assistant API to
    maintain conversation state, and leverages persistent threads and 
    assistants to reconnect to them if needed. Examples: 
    [`test_openai_assistant.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_openai_assistant.py),
    [`test_openai_assistant_async.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_openai_assistant_async.py)
  - **0.1.111:** Support latest OpenAI model: `GPT4_TURBO`
(see [test_llm.py](tests/main/test_llm.py) for example usage)
  - **0.1.110:** Upgrade from OpenAI v0.x to v1.1.1 (in preparation for 
    Assistants API and more); (`litellm` temporarily disabled due to OpenAI 
    version conflict).
- **Oct 2023:**
  - **0.1.107:** `DocChatAgent` re-rankers: `rank_with_diversity`, `rank_to_periphery` (lost in middle).
  - **0.1.102:** `DocChatAgentConfig.n_neighbor_chunks > 0` allows returning context chunks around match.
  - **0.1.101:** `DocChatAgent` uses `RelevanceExtractorAgent` to have 
    the LLM extract relevant portions of a chunk using 
    sentence-numbering, resulting in huge speed up and cost reduction 
    compared to the naive "sentence-parroting" approach (writing out full 
    sentences out relevant whole sentences) which `LangChain` uses in their 
    `LLMChainExtractor`.
  - **0.1.100:** API update: all of Langroid is accessible with a single import, i.e. `import langroid as lr`. See the [documentation]("https://langroid.github.io/langroid/") for usage.
  - **0.1.99:** Convenience batch functions to run tasks, agent methods on a list of inputs concurrently in async mode. See examples in [test_batch.py](https://github.com/langroid/langroid/blob/main/tests/main/test_batch.py).
  - **0.1.95:** Added support for [Momento Serverless Vector Index](https://docs.momentohq.com/vector-index)
  - **0.1.94:** Added support for [LanceDB](https://lancedb.github.io/lancedb/) vector-store -- allows vector, Full-text, SQL search.
  - **0.1.84:** Added [LiteLLM](https://docs.litellm.ai/docs/providers), so now Langroid can be used with over 100 LLM providers (remote or local)! 
     See guide [here](https://langroid.github.io/langroid/tutorials/non-openai-llms/).
- **Sep 2023:**
  - **0.1.78:** Async versions of several Task, Agent and LLM methods; 
      Nested Pydantic classes are now supported for LLM Function-calling, Tools, Structured Output.    
  - **0.1.76:** DocChatAgent: support for loading `docx` files (preliminary).
  - **0.1.72:** Many improvements to DocChatAgent: better embedding model, 
          hybrid search to improve retrieval, better pdf parsing, re-ranking retrieved results with cross-encoders. 
  - **Use with local LLama Models:** see tutorial [here](https://langroid.github.io/langroid/blog/2023/09/14/using-langroid-with-local-llms/)
  - **Langroid Blog/Newsletter Launched!**: First post is [here](https://substack.com/notes/post/p-136704592) -- Please subscribe to stay updated. 
  - **0.1.56:** Support Azure OpenAI. 
  - **0.1.55:** Improved [`SQLChatAgent`](https://github.com/langroid/langroid/blob/main/langroid/agent/special/sql/sql_chat_agent.py) that efficiently retrieves relevant schema info when translating natural language to SQL.  
- **Aug 2023:**
  - **[Hierarchical computation](https://langroid.github.io/langroid/examples/agent-tree/)** example using Langroid agents and task orchestration.
  - **0.1.51:** Support for global state, see [test_global_state.py](tests/main/test_global_state.py).
  - **:whale: Langroid Docker image**, available, see instructions below.
  - [**RecipientTool**](langroid/agent/tools/recipient_tool.py) enables (+ enforces) LLM to 
specify an intended recipient when talking to 2 or more agents. 
See [this test](tests/main/test_recipient_tool.py) for example usage.
  - **Example:** [Answer questions](examples/docqa/chat-search.py) using Google Search + vecdb-retrieval from URL contents. 
  - **0.1.39:** [`GoogleSearchTool`](langroid/agent/tools/google_search_tool.py) to enable Agents (their LLM) to do Google searches via function-calling/tools.
    See [this chat example](examples/basic/chat-search.py) for how easy it is to add this tool to an agent.
  - **Colab notebook** to try the quick-start examples: [![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/langroid/langroid/blob/main/examples/Langroid_quick_start.ipynb) 
  - **0.1.37:** Added [`SQLChatAgent`](langroid/agent/special/sql_chat_agent.py) -- thanks to our latest contributor [Rithwik Babu](https://github.com/rithwikbabu)!
  - Multi-agent Example: [Autocorrect chat](examples/basic/autocorrect.py)
- **July 2023:** 
  - **0.1.30:** Added [`TableChatAgent`](langroid/agent/special/table_chat_agent.py) to 
    [chat](examples/data-qa/table_chat.py) with tabular datasets (dataframes, files, URLs): LLM generates Pandas code,
    and code is executed using Langroid's tool/function-call mechanism. 
  - **Demo:** 3-agent system for Audience [Targeting](https://langroid.github.io/langroid/demos/targeting/audience-targeting/).
  - **0.1.27**: Added [support](langroid/cachedb/momento_cachedb.py) 
    for [Momento Serverless Cache](https://www.gomomento.com/) as an alternative to Redis.
  - **0.1.24**: [`DocChatAgent`](langroid/agent/special/doc_chat_agent.py) 
    now [accepts](langroid/parsing/document_parser.py) PDF files or URLs.

</details>

# :rocket: Demo
Suppose you want to extract structured information about the key terms 
of a commercial lease document. You can easily do this with Langroid using a two-agent system,
as we show in the [langroid-examples](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/chat_multi_extract.py) repo.
(See [this script](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/chat-multi-extract-local.py)
for a version with the same functionality using a local Mistral-7b model.)
The demo showcases just a few of the many features of Langroid, such as:
- Multi-agent collaboration: `LeaseExtractor` is in charge of the task, and its LLM (GPT4) generates questions 
to be answered by the `DocAgent`.
- Retrieval augmented question-answering, with **source-citation**: `DocAgent` LLM (GPT4) uses retrieval from a vector-store to 
answer the `LeaseExtractor`'s questions, cites the specific excerpt supporting the answer. 
- Function-calling (also known as tool/plugin): When it has all the information it 
needs, the `LeaseExtractor` LLM presents the information in a structured 
format using a Function-call. 

Here is what it looks like in action 
(a pausable mp4 video is [here](https://vimeo.com/871429249)).

![Demo](docs/assets/demos/lease-extractor-demo.gif)


# :zap: Highlights
(For a more up-to-date list see the 
[Updates/Releases](https://github.com/langroid/langroid?tab=readme-ov-file#fire-updatesreleases) 
section above)
- **Agents as first-class citizens:** The [Agent](https://langroid.github.io/langroid/reference/agent/base/#langroid.agent.base.Agent) class encapsulates LLM conversation state,
  and optionally a vector-store and tools. Agents are a core abstraction in Langroid;
  Agents act as _message transformers_, and by default provide 3 _responder_ methods, one corresponding to each entity: LLM, Agent, User.
- **Tasks:** A [Task](https://langroid.github.io/langroid/reference/agent/task/) class wraps an Agent, and gives the agent instructions (or roles, or goals), 
  manages iteration over an Agent's responder methods, 
  and orchestrates multi-agent interactions via hierarchical, recursive
  task-delegation. The `Task.run()` method has the same 
  type-signature as an Agent's responder's methods, and this is key to how 
  a task of an agent can delegate to other sub-tasks: from the point of view of a Task,
  sub-tasks are simply additional responders, to be used in a round-robin fashion 
  after the agent's own responders.
- **Modularity, Reusability, Loose coupling:** The `Agent` and `Task` abstractions allow users to design
  Agents with specific skills, wrap them in Tasks, and combine tasks in a flexible way.
- **LLM Support**: Langroid supports OpenAI LLMs as well as LLMs from hundreds of 
providers ([local/open](https://langroid.github.io/langroid/tutorials/local-llm-setup/) or [remote/commercial](https://langroid.github.io/langroid/tutorials/non-openai-llms/)) via proxy libraries and local model servers
such as [ollama](https://github.com/ollama), [oobabooga](https://github.com/oobabooga/text-generation-webui), 
  [LiteLLM](https://docs.litellm.ai/docs/providers) that in effect mimic the OpenAI API. See the [supported LLMs](https://langroid.github.io/langroid/tutorials/supported-models/). 
- **Caching of LLM responses:** Langroid supports [Redis](https://redis.com/try-free/) to cache LLM responses.
- **Vector-stores**: [Qdrant](https://qdrant.tech/), [Chroma](https://www.trychroma.com/), LanceDB, Pinecone, PostgresDB (PGVector), Weaviate are currently supported.
  Vector stores allow for Retrieval-Augmented-Generation (RAG).
- **Grounding and source-citation:** Access to external documents via vector-stores 
   allows for grounding and source-citation.
- **Observability, Logging, Lineage:** Langroid generates detailed logs of multi-agent interactions and
  maintains provenance/lineage of messages, so that you can trace back
  the origin of a message.
- **[Tools/Plugins/Function-calling](https://langroid.github.io/langroid/quick-start/chat-agent-tool/)**:
  Langroid supports OpenAI's [function calling](https://platform.openai.com/docs/guides/gpt/function-calling), as
  well as an equivalent `ToolMessage` mechanism which works with
  any LLM, not just OpenAI's.
  Function calling and tools have the same developer-facing interface, implemented
  using [Pydantic](https://docs.pydantic.dev/latest/),
  which makes it very easy to define tools/functions and enable agents
  to use them. Benefits of using Pydantic are that you never have to write
  complex JSON specs for function calling, and when the LLM
  hallucinates malformed JSON, the Pydantic error message is sent back to
  the LLM so it can fix it.

--- 

# :gear: Installation and Setup

### Install `langroid`
Langroid requires Python 3.11+. We recommend using a virtual environment.
Use `pip` to install a bare-bones slim version of `langroid` (from PyPi) to your virtual 
environment:
```bash
pip install langroid
```
The core Langroid package lets you use OpenAI Embeddings models via their API. 
If you instead want to use the `sentence-transformers` embedding models from HuggingFace, 
install Langroid like this: 
```bash
pip install "langroid[hf-embeddings]"
```
For many practical scenarios, you may need additional optional dependencies:
- To use various document-parsers, install langroid with the `doc-chat` extra:
    ```bash
    pip install "langroid[doc-chat]"
    ```
- For "chat with databases", use the `db` extra:
    ```bash
    pip install "langroid[db]"
    ```
- You can specify multiple extras by separating them with commas, e.g.:
    ```bash
    pip install "langroid[doc-chat,db]"
    ```
- To simply install _all_ optional dependencies, use the `all` extra (but note that this will result in longer load/startup times and a larger install size):
    ```bash
    pip install "langroid[all]"
    ```
<details>
<summary><b>Optional Installs for using SQL Chat with a PostgreSQL DB </b></summary>

If you are using `SQLChatAgent` 
(e.g. the script [`examples/data-qa/sql-chat/sql_chat.py`](examples/data-qa/sql-chat/sql_chat.py)),
with a postgres db, you will need to:

- Install PostgreSQL dev libraries for your platform, e.g.
  - `sudo apt-get install libpq-dev` on Ubuntu,
  - `brew install postgresql` on Mac, etc.
- Install langroid with the postgres extra, e.g. `pip install langroid[postgres]`
  or `poetry add "langroid[postgres]"` or `poetry install -E postgres`,
  (or the corresponding `uv` versions, e.g. `uv add "langroid[postgres]"`
  or `uv pip install langroid[postgres]`).
  If this gives you an error, try `pip install psycopg2-binary` in your virtualenv.
</details>

:memo: If you get strange errors involving `mysqlclient`, try doing `pip uninstall mysqlclient` followed by `pip install mysqlclient`.

### Set up environment variables (API keys, etc)

To get started, all you need is an OpenAI API Key.
If you don't have one, see [this OpenAI Page](https://platform.openai.com/docs/quickstart).
(Note that while this is the simplest way to get started, Langroid works with practically any LLM, not just those from OpenAI. 
See the guides to using [Open/Local LLMs](https://langroid.github.io/langroid/tutorials/local-llm-setup/), 
and other [non-OpenAI](https://langroid.github.io/langroid/tutorials/non-openai-llms/) proprietary LLMs.) 

In the root of the repo, copy the `.env-template` file to a new file `.env`: 
```bash
cp .env-template .env
```
Then insert your OpenAI API Key. 
Your `.env` file should look like this (the organization is optional 
but may be required in some scenarios).
```bash
OPENAI_API_KEY=your-key-here-without-quotes
OPENAI_ORGANIZATION=optionally-your-organization-id
````

Alternatively, you can set this as an environment variable in your shell
(you will need to do this every time you open a new shell):
```bash
export OPENAI_API_KEY=your-key-here-without-quotes
```


<details>
<summary><b>Optional Setup Instructions (click to expand) </b></summary>

All of the following environment variable settings are optional, and some are only needed 
to use specific features (as noted below).

- **Qdrant** Vector Store API Key, URL. This is only required if you want to use Qdrant cloud.
  Alternatively [Chroma](https://docs.trychroma.com/) or [LanceDB](https://lancedb.com/) are also currently supported. 
  We use the local-storage version of Chroma, so there is no need for an API key.
- **Redis** Password, host, port: This is optional, and only needed to cache LLM API responses
  using Redis Cloud. Redis [offers](https://redis.com/try-free/) a free 30MB Redis account
  which is more than sufficient to try out Langroid and even beyond.
  If you don't set up these, Langroid will use a pure-python 
  Redis in-memory cache via the [Fakeredis](https://fakeredis.readthedocs.io/en/latest/) library.
- **Momento** Serverless Caching of LLM API responses (as an alternative to Redis). 
   To use Momento instead of Redis:
  - enter your Momento Token in the `.env` file, as the value of `MOMENTO_AUTH_TOKEN` (see example file below),
  - in the `.env` file set `CACHE_TYPE=momento` (instead of `CACHE_TYPE=redis` which is the default).
- **GitHub** Personal Access Token (required for apps that need to analyze git
  repos; token-based API calls are less rate-limited). See this
  [GitHub page](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).
- **Google Custom Search API Credentials:** Only needed to enable an Agent to use the `GoogleSearchTool`.
  To use Google Search as an LLM Tool/Plugin/function-call, 
  you'll need to set up 
  [a Google API key](https://developers.google.com/custom-search/v1/introduction#identify_your_application_to_google_with_api_key),
  then [setup a Google Custom Search Engine (CSE) and get the CSE ID](https://developers.google.com/custom-search/docs/tutorial/creatingcse).
  (Documentation for these can be challenging, we suggest asking GPT4 for a step-by-step guide.)
  After obtaining these credentials, store them as values of 
  `GOOGLE_API_KEY` and `GOOGLE_CSE_ID` in your `.env` file. 
  Full documentation on using this (and other such "stateless" tools) is coming soon, but 
  in the meantime take a peek at this [chat example](examples/basic/chat-search.py), which 
  shows how you can easily equip an Agent with a `GoogleSearchtool`.
  


If you add all of these optional variables, your `.env` file should look like this:
```bash
OPENAI_API_KEY=your-key-here-without-quotes
GITHUB_ACCESS_TOKEN=your-personal-access-token-no-quotes
CACHE_TYPE=redis # or momento
REDIS_PASSWORD=your-redis-password-no-quotes
REDIS_HOST=your-redis-hostname-no-quotes
REDIS_PORT=your-redis-port-no-quotes
MOMENTO_AUTH_TOKEN=your-momento-token-no-quotes # instead of REDIS* variables
QDRANT_API_KEY=your-key
QDRANT_API_URL=https://your.url.here:6333 # note port number must be included
GOOGLE_API_KEY=your-key
GOOGLE_CSE_ID=your-cse-id
```
</details>

<details>
<summary><b>Optional setup instructions for Microsoft Azure OpenAI(click to expand)</b></summary> 

When using Azure OpenAI, additional environment variables are required in the 
`.env` file.
This page [Microsoft Azure OpenAI](https://learn.microsoft.com/en-us/azure/ai-services/openai/chatgpt-quickstart?tabs=command-line&pivots=programming-language-python#environment-variables)
provides more information, and you can set each environment variable as follows:

- `AZURE_OPENAI_API_KEY`, from the value of `API_KEY`
- `AZURE_OPENAI_API_BASE` from the value of `ENDPOINT`, typically looks like `https://your.domain.azure.com`.
- For `AZURE_OPENAI_API_VERSION`, you can use the default value in `.env-template`, and latest version can be found [here](https://learn.microsoft.com/en-us/azure/ai-services/openai/whats-new#azure-openai-chat-completion-general-availability-ga)
- `AZURE_OPENAI_DEPLOYMENT_NAME` is the name of the deployed model, which is defined by the user during the model setup 
- `AZURE_OPENAI_MODEL_NAME` Azure OpenAI allows specific model names when you select the model for your deployment. You need to put precisly the exact model name that was selected. For example, GPT-4 (should be `gpt-4-32k` or `gpt-4`).
- `AZURE_OPENAI_MODEL_VERSION` is required if `AZURE_OPENAI_MODEL_NAME = gpt=4`, which will assist Langroid to determine the cost of the model  
</details>

---

# :whale: Docker Instructions

We provide a containerized version of the [`langroid-examples`](https://github.com/langroid/langroid-examples) 
repository via this [Docker Image](https://hub.docker.com/r/langroid/langroid).
All you need to do is set up environment variables in the `.env` file.
Please follow these steps to setup the container:

```bash
# get the .env file template from `langroid` repo
wget -O .env https://raw.githubusercontent.com/langroid/langroid/main/.env-template

# Edit the .env file with your favorite editor (here nano), and remove any un-used settings. E.g. there are "dummy" values like "your-redis-port" etc -- if you are not using them, you MUST remove them.
nano .env

# launch the container (the appropriate image for your architecture will be pulled automatically)
docker run -it --rm  -v ./.env:/langroid/.env langroid/langroid:latest

# Use this command to run any of the scripts in the `examples` directory
python examples/<Path/To/Example.py> 
``` 



# :tada: Usage Examples

These are quick teasers to give a glimpse of what you can do with Langroid
and how your code would look. 

:warning: The code snippets below are intended to give a flavor of the code
and they are **not** complete runnable examples! For that we encourage you to 
consult the [`langroid-examples`](https://github.com/langroid/langroid-examples) 
repository.

:information_source:
The various LLM prompts and instructions in Langroid
have been tested to work well with GPT-4 (and to some extent GPT-4o).
Switching to other LLMs (local/open and proprietary) is easy (see guides mentioned above),
and may suffice for some applications, but in general you may see inferior results
unless you adjust the prompts and/or the multi-agent setup.


:book: Also see the
[`Getting Started Guide`](https://langroid.github.io/langroid/quick-start/)
for a detailed tutorial.



Click to expand any of the code examples below.
All of these can be run in a Colab notebook:
[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/langroid/langroid/blob/main/examples/Langroid_quick_start.ipynb)

<details>
<summary> <b> Direct interaction with LLM </b> </summary>

```python
import langroid.language_models as lm

mdl = lm.OpenAIGPT(
    lm.OpenAIGPTConfig(
        chat_model=lm.OpenAIChatModel.GPT4o, # or, e.g.  "ollama/qwen2.5"
    ),
)

messages = [
  lm.LLMMessage(content="You are a helpful assistant",  role=lm.Role.SYSTEM), 
  lm.LLMMessage(content="What is the capital of Ontario?",  role=lm.Role.USER),
]

response = mdl.chat(messages, max_tokens=200)
print(response.message)
```
See the guides to use
([local/open LLMs](https://langroid.github.io/langroid/tutorials/local-llm-setup/) or [remote/commercial LLMs](https://langroid.github.io/langroid/tutorials/non-openai-llms/)).
</details>

<details>
<summary> <b> Interaction with non-OpenAI LLM (local or remote) </b> </summary>
Local model: if model is served at `http://localhost:8000`:

```python
cfg = lm.OpenAIGPTConfig(
  chat_model="local/localhost:8000", 
  chat_context_length=4096
)
mdl = lm.OpenAIGPT(cfg)
# now interact with it as above, or create an Agent + Task as shown below.
```
</details>

<details>
<summary> <b> Define an agent, set up a task, and run it </b> </summary>

```python
import langroid as lr

agent = lr.ChatAgent()

# get response from agent's LLM, and put this in an interactive loop...
# answer = agent.llm_response("What is the capital of Ontario?")
  # ... OR instead, set up a task (which has a built-in loop) and run it
task = lr.Task(agent, name="Bot") 
task.run() # ... a loop seeking response from LLM or User at each turn
```
</details>

<details>
<summary><b> Three communicating agents </b></summary>

A toy numbers game, where when given a number `n`:
- `repeater_task`'s LLM simply returns `n`,
- `even_task`'s LLM returns `n/2` if `n` is even, else says "DO-NOT-KNOW"
- `odd_task`'s LLM returns `3*n+1` if `n` is odd, else says "DO-NOT-KNOW"

Each of these `Task`s automatically configures a default `ChatAgent`.

```python
import langroid as lr
from langroid.utils.constants import NO_ANSWER

repeater_task = lr.Task(
    name = "Repeater",
    system_message="""
    Your job is to repeat whatever number you receive.
    """,
    llm_delegate=True, # LLM takes charge of task
    single_round=False, 
)

even_task = lr.Task(
    name = "EvenHandler",
    system_message=f"""
    You will be given a number. 
    If it is even, divide by 2 and say the result, nothing else.
    If it is odd, say {NO_ANSWER}
    """,
    single_round=True,  # task done after 1 step() with valid response
)

odd_task = lr.Task(
    name = "OddHandler",
    system_message=f"""
    You will be given a number n. 
    If it is odd, return (n*3+1), say nothing else. 
    If it is even, say {NO_ANSWER}
    """,
    single_round=True,  # task done after 1 step() with valid response
)
```
Then add the `even_task` and `odd_task` as sub-tasks of `repeater_task`, 
and run the `repeater_task`, kicking it off with a number as input:
```python
repeater_task.add_sub_task([even_task, odd_task])
repeater_task.run("3")
```

</details>

<details>
<summary><b> Simple Tool/Function-calling example </b></summary>

Langroid leverages Pydantic to support OpenAI's
[Function-calling API](https://platform.openai.com/docs/guides/gpt/function-calling)
as well as its own native tools. The benefits are that you don't have to write
any JSON to specify the schema, and also if the LLM hallucinates a malformed
tool syntax, Langroid sends the Pydantic validation error (suitably sanitized) 
to the LLM so it can fix it!

Simple example: Say the agent has a secret list of numbers, 
and we want the LLM to find the smallest number in the list. 
We want to give the LLM a `probe` tool/function which takes a
single number `n` as argument. The tool handler method in the agent
returns how many numbers in its list are at most `n`.

First define the tool using Langroid's `ToolMessage` class:


```python
import langroid as lr

class ProbeTool(lr.agent.ToolMessage):
  request: str = "probe" # specifies which agent method handles this tool
  purpose: str = """
        To find how many numbers in my list are less than or equal to  
        the <number> you specify.
        """ # description used to instruct the LLM on when/how to use the tool
  number: int  # required argument to the tool
```

Then define a `SpyGameAgent` as a subclass of `ChatAgent`, 
with a method `probe` that handles this tool:

```python
class SpyGameAgent(lr.ChatAgent):
  def __init__(self, config: lr.ChatAgentConfig):
    super().__init__(config)
    self.numbers = [3, 4, 8, 11, 15, 25, 40, 80, 90]

  def probe(self, msg: ProbeTool) -> str:
    # return how many numbers in self.numbers are less or equal to msg.number
    return str(len([n for n in self.numbers if n <= msg.number]))
```

We then instantiate the agent and enable it to use and respond to the tool:

```python
spy_game_agent = SpyGameAgent(
    lr.ChatAgentConfig(
        name="Spy",
        vecdb=None,
        use_tools=False, #  don't use Langroid native tool
        use_functions_api=True, # use OpenAI function-call API
    )
)
spy_game_agent.enable_message(ProbeTool)
```

For a full working example see the
[chat-agent-tool.py](https://github.com/langroid/langroid-examples/blob/main/examples/quick-start/chat-agent-tool.py)
script in the `langroid-examples` repo.
</details>

<details>
<summary> <b>Tool/Function-calling to extract structured information from text </b> </summary>

Suppose you want an agent to extract 
the key terms of a lease, from a lease document, as a nested JSON structure.
First define the desired structure via Pydantic models:

```python
from pydantic import BaseModel
class LeasePeriod(BaseModel):
    start_date: str
    end_date: str


class LeaseFinancials(BaseModel):
    monthly_rent: str
    deposit: str

class Lease(BaseModel):
    period: LeasePeriod
    financials: LeaseFinancials
    address: str
```

Then define the `LeaseMessage` tool as a subclass of Langroid's `ToolMessage`.
Note the tool has a required argument `terms` of type `Lease`:

```python
import langroid as lr

class LeaseMessage(lr.agent.ToolMessage):
    request: str = "lease_info"
    purpose: str = """
        Collect information about a Commercial Lease.
        """
    terms: Lease
```

Then define a `LeaseExtractorAgent` with a method `lease_info` that handles this tool,
instantiate the agent, and enable it to use and respond to this tool:

```python
class LeaseExtractorAgent(lr.ChatAgent):
    def lease_info(self, message: LeaseMessage) -> str:
        print(
            f"""
        DONE! Successfully extracted Lease Info:
        {message.terms}
        """
        )
        return json.dumps(message.terms.dict())
    
lease_extractor_agent = LeaseExtractorAgent()
lease_extractor_agent.enable_message(LeaseMessage)
```

See the [`chat_multi_extract.py`](https://github.com/langroid/langroid-examples/blob/main/examples/docqa/chat_multi_extract.py)
script in the `langroid-examples` repo for a full working example.
</details>

<details>
<summary><b> Chat with documents (file paths, URLs, etc) </b></summary>

Langroid provides a specialized agent class `DocChatAgent` for this purpose.
It incorporates document sharding, embedding, storage in a vector-DB, 
and retrieval-augmented query-answer generation.
Using this class to chat with a collection of documents is easy.
First create a `DocChatAgentConfig` instance, with a 
`doc_paths` field that specifies the documents to chat with.

```python
import langroid as lr
from langroid.agent.special import DocChatAgentConfig, DocChatAgent

config = DocChatAgentConfig(
  doc_paths = [
    "https://en.wikipedia.org/wiki/Language_model",
    "https://en.wikipedia.org/wiki/N-gram_language_model",
    "/path/to/my/notes-on-language-models.txt",
  ],
  vecdb=lr.vector_store.QdrantDBConfig(),
)
```

Then instantiate the `DocChatAgent` (this ingests the docs into the vector-store):

```python
agent = DocChatAgent(config)
```
Then we can either ask the agent one-off questions,
```python
agent.llm_response("What is a language model?")
```
or wrap it in a `Task` and run an interactive loop with the user:
```python
task = lr.Task(agent)
task.run()
```

See full working scripts in the 
[`docqa`](https://github.com/langroid/langroid-examples/tree/main/examples/docqa)
folder of the `langroid-examples` repo.
</details>

<details>
<summary><b> :fire: Chat with tabular data (file paths, URLs, dataframes) </b></summary>

Using Langroid you can set up a `TableChatAgent` with a dataset (file path, URL or dataframe),
and query it. The Agent's LLM generates Pandas code to answer the query, 
via function-calling (or tool/plugin), and the Agent's function-handling method
executes the code and returns the answer.

Here is how you can do this:

```python
import langroid as lr
from langroid.agent.special import TableChatAgent, TableChatAgentConfig
```

Set up a `TableChatAgent` for a data file, URL or dataframe
(Ensure the data table has a header row; the delimiter/separator is auto-detected):
```python
dataset =  "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
# or dataset = "/path/to/my/data.csv"
# or dataset = pd.read_csv("/path/to/my/data.csv")
agent = TableChatAgent(
    config=TableChatAgentConfig(
        data=dataset,
    )
)
```
Set up a task, and ask one-off questions like this: 

```python
task = lr.Task(
  agent, 
  name = "DataAssistant",
  default_human_response="", # to avoid waiting for user input
)
result = task.run(
  "What is the average alcohol content of wines with a quality rating above 7?",
  turns=2 # return after user question, LLM fun-call/tool response, Agent code-exec result
) 
print(result.content)
```
Or alternatively, set up a task and run it in an interactive loop with the user:

```python
task = lr.Task(agent, name="DataAssistant")
task.run()
``` 

For a full working example see the 
[`table_chat.py`](https://github.com/langroid/langroid-examples/tree/main/examples/data-qa/table_chat.py)
script in the `langroid-examples` repo.


</details>

---

# :heart: Thank you to our [supporters](https://github.com/langroid/langroid/stargazers)

If you like this project, please give it a star ⭐ and 📢 spread the word in your network or social media:

[![Share on Twitter](https://img.shields.io/twitter/url?style=social&url=https://github.com/langroid/langroid)](https://twitter.com/intent/tweet?text=Langroid%20is%20a%20powerful,%20elegant%20new%20framework%20to%20easily%20build%20%23LLM%20applications.%20You%20set%20up%20LLM-powered%20Agents%20with%20vector-stores,%20assign%20tasks,%20and%20have%20them%20collaboratively%20solve%20problems%20via%20message-transformations.%20https://github.com/langroid/langroid)
[![Share on LinkedIn](https://img.shields.io/badge/Share%20on-LinkedIn-blue)](https://www.linkedin.com/shareArticle?mini=true&url=https://github.com/langroid/langroid&title=Langroid:%20A%20Powerful,%20Elegant%20Framework&summary=Langroid%20is%20a%20powerful,%20elegant%20new%20framework%20to%20easily%20build%20%23LLM%20applications.%20You%20set%20up%20LLM-powered%20Agents%20with%20vector-stores,%20assign%20tasks,%20and%20have%20them%20collaboratively%20solve%20problems%20via%20message-transformations.)
[![Share on Hacker News](https://img.shields.io/badge/-Share%20on%20Hacker%20News-orange)](https://news.ycombinator.com/submitlink?u=https%3A%2F%2Fgithub.com%2Flangroid%2Flangroid&t=Harness%20LLMs%20with%20Multi-Agent%20Programming)
[![Share on Reddit](https://img.shields.io/badge/-Share%20on%20Reddit-blue)](https://www.reddit.com/submit?url=https%3A%2F%2Fgithub.com%2Flangroid%2Flangroid&title=Harness%20LLMs%20with%20Multi-Agent%20Programming)

Your support will help build Langroid's momentum and community.

# Langroid Co-Founders

- [Prasad Chalasani](https://www.linkedin.com/in/pchalasani/) (IIT BTech/CS, CMU PhD/ML; Independent ML Consultant)
- [Somesh Jha](https://www.linkedin.com/in/somesh-jha-80208015/) (IIT BTech/CS, CMU PhD/CS; Professor of CS, U Wisc at Madison)
</file>

<file path="docs/notes/task-tool.md">
# TaskTool: Spawning Sub-Agents for Task Delegation

## Overview

`TaskTool` allows agents to **spawn sub-agents** to handle specific tasks. When an agent encounters a task that requires specialized tools or isolated execution, it can spawn a new sub-agent with exactly the capabilities needed for that task.

This enables agents to dynamically create a hierarchy of specialized workers, each focused on their specific subtask with only the tools they need.

## When to Use TaskTool

TaskTool is useful when:
- Different parts of a task require different specialized tools
- You want to isolate tool access for specific operations  
- A task involves recursive or nested operations
- You need different LLM models for different subtasks

## How It Works

1. The parent agent decides to spawn a sub-agent and specifies:
   - A system message defining the sub-agent's role
   - A prompt for the sub-agent to process
   - Which tools the sub-agent should have access to
   - Optional model and iteration limits

2. TaskTool spawns the new sub-agent, runs the task, and returns the result to the parent.

## Async Support

TaskTool fully supports both synchronous and asynchronous execution. The tool automatically handles async contexts when the parent task is running asynchronously.

## Usage Example

```python
from langroid.agent.tools.task_tool import TaskTool

# Enable TaskTool for your agent
agent.enable_message([TaskTool, YourCustomTool], use=True, handle=True)

# Agent can now spawn sub-agents for tasks when the LLM generates a task_tool request:

response = {
    "request": "task_tool",
    "system_message": "You are a calculator. Use the multiply_tool to compute products.",
    "prompt": "Calculate 5 * 7",
    "tools": ["multiply_tool"],
    "model": "gpt-4o-mini",   # optional
    "max_iterations": 5,      # optional
    "agent_name": "calculator-agent"  # optional
}
```

## Field Reference

**Required fields:**
- `system_message`: Instructions for the sub-agent's role and behavior
- `prompt`: The specific task/question for the sub-agent
- `tools`: List of tool names. Special values: `["ALL"]` or `["NONE"]`

**Optional fields:**
- `model`: LLM model name (default: "gpt-4o-mini")
- `max_iterations`: Task iteration limit (default: 10)
- `agent_name`: Name for the sub-agent (default: auto-generated as "agent-{uuid}")

## Example: Nested Operations

Consider computing `Nebrowski(10, Nebrowski(3, 2))` where Nebrowski is a custom operation. The main agent spawns sub-agents to handle each operation:

```python
# Main agent spawns first sub-agent for inner operation:
{
    "request": "task_tool",
    "system_message": "Compute Nebrowski operations using the nebrowski_tool.",
    "prompt": "Compute Nebrowski(3, 2)",
    "tools": ["nebrowski_tool"]
}

# Then spawns another sub-agent for outer operation:
{
    "request": "task_tool",
    "system_message": "Compute Nebrowski operations using the nebrowski_tool.",
    "prompt": "Compute Nebrowski(10, 11)",  # where 11 is the previous result
    "tools": ["nebrowski_tool"]
}
```

## Working Examples

See [`tests/main/test_task_tool.py`](https://github.com/langroid/langroid/blob/main/tests/main/test_task_tool.py) for complete examples including:
- Basic task delegation with mock agents
- Nested operations with custom tools
- Both sync and async usage patterns

## Important Notes

- Spawned sub-agents run non-interactively (no human input)
- `DoneTool` is automatically enabled for all sub-agents
- Results are returned as `ChatDocument` objects. The Langroid framework takes care
  of converting them to a suitable format for the parent agent's LLM to consume and 
  respond to.
- Sub-agents can be given custom names via the `agent_name` parameter, which helps with 
  logging and debugging. If not specified, a unique name is auto-generated in the format 
  "agent-{uuid}"
- Only tools "known" to the parent agent can be enabled for sub-agents. This is an 
  important aspect of the current mechanism. The `TaskTool` handler method in
  the sub-agent only has access to tools that are known to the parent agent.
  If there are tools that are only relevant to the sub-agent but not the parent,
  you must still enable them in the parent agent, but you can set `use=False`
  and `handle=False` when you enable them, e.g.:

```python
agent.enable_message(MySubAgentTool, use=False, handle=False)
```
  Since we are letting the main agent's LLM "decide" when to spawn a sub-agent,
  your system message of the main agent should contain instructions clarifying that
  it can decide which tools to enable for the sub-agent, as well as a list of 
  all tools that might possibly be relevant to the sub-agent. This is particularly
  important for tools that have been enabled with `use=False`, since instructions for
  such tools would not be auto-inserted into the agent's system message. 



## Best Practices

1. **Clear Instructions**: Provide specific system messages that explain the sub-agent's role and tool usage
2. **Tool Availability**: Ensure delegated tools are enabled for the parent agent
3. **Appropriate Models**: Use simpler/faster models for simple subtasks
4. **Iteration Limits**: Set reasonable limits based on task complexity
</file>

<file path="langroid/agent/tools/task_tool.py">
"""
TaskTool: A tool that allows agents to delegate a task to a sub-agent with
    specific tools enabled.
"""

import uuid
from typing import List, Optional

import langroid.language_models as lm
from langroid import ChatDocument
from langroid.agent.chat_agent import ChatAgent, ChatAgentConfig
from langroid.agent.task import Task
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import DoneTool
from langroid.pydantic_v1 import Field


class TaskTool(ToolMessage):
    """
    Tool that spawns a sub-agent with specified tools to handle a task.

    The sub-agent can be given a custom name for identification in logs.
    If no name is provided, a random unique name starting with 'agent'
    will be generated.
    """

    # TODO: setting up termination conditions of sub-task needs to be improved
    request: str = "task_tool"
    purpose: str = """
        <HowToUse>
        Use this tool to delegate a task to a sub-agent with specific tools enabled.
        The sub-agent will be created with the specified tools and will run the task
        non-interactively.
    """

    # Parameters for the agent tool

    system_message: Optional[str] = Field(
        ...,
        description="""
        Optional system message to configure the sub-agent's general behavior and 
        to specify the task and its context.
            A good system message will have these components:
            - Inform the sub-agent of its role, e.g. "You are a financial analyst."
            - Clear spec of the task, with sufficient context for the sub-agent to 
              understand what it needs to do, since the sub-agent does 
              NOT have access to your conversation history!
            - Any additional general context needed for the task, such as a
              (part of a) document, or data items, etc.
            - Specify when to use certain tools, e.g. 
                "You MUST use the 'stock_data' tool to extract stock information.
        """,
    )

    prompt: str = Field(
        ...,
        description="""
            The prompt to run the sub-agent with. This differs from the agent's
            system message: Whereas the system message configures the sub-agent's
            GENERAL role and goals, the `prompt` is the SPECIFIC input that the 
            sub-agent will process. In LLM terms, the system message is sent to the 
            LLM as the first message, with role = "system" or "developer", and 
            the prompt is sent as a message with role = "user".
            EXAMPLE: system_message = "You are a financial analyst, when the 
                user asks about the share-price of a company, 
                you must use your tools to do the research, and 
                return the final answer to the user."
            
            prompt = "What is the share-price of Apple Inc.?"
            """,
    )

    tools: List[str] = Field(
        ...,
        description="""
        A list of tool names to enable for the sub-agent.
        This must be a list of strings referring to the names of tools
        that are known to you. 
        If you want to enable all tools, or you do not have any preference
        on what tools are enabled for the sub-agent, you can set 
        this field to a singleton list ['ALL']
        To disable all tools, set it to a singleton list ['NONE']
        """,
    )
    # TODO: ensure valid model name
    model: str = Field(
        default=None,
        description="""
            Optional name of the LLM model to use for the sub-agent, e.g. 'gpt-4.1'
            If omitted, the sub-agent will use the same model as yours.
            """,
    )
    max_iterations: Optional[int] = Field(
        default=None,
        description="Optional max iterations for the sub-agent to run the task",
    )
    agent_name: Optional[str] = Field(
        default=None,
        description="""
            Optional name for the sub-agent. This will be used as the agent's name
            in logs and for identification purposes. If not provided, a random unique
            name starting with 'agent' will be generated.
            """,
    )

    def _set_up_task(self, agent: ChatAgent) -> Task:
        """
        Helper method to set up a task for the sub-agent.

        Args:
            agent: The parent ChatAgent that is handling this tool
        """
        # Generate a random name if not provided
        agent_name = self.agent_name or f"agent-{str(uuid.uuid4())[:8]}"

        # Create chat agent config with system message if provided
        # TODO: Maybe we just copy the parent agent's config and override chat_model?
        #   -- but what if parent agent has a MockLMConfig?
        llm_config = lm.OpenAIGPTConfig(
            chat_model=self.model or lm.OpenAIChatModel.GPT4_1_MINI,
        )
        config = ChatAgentConfig(
            name=agent_name,
            llm=llm_config,
            handle_llm_no_tool=f"""
                You forgot to use one of your TOOLs! Remember that you must either:
                - use a tool, or a sequence of tools, to complete your task, OR
                - if you are done with your task, use the `{DoneTool.name()}` tool
                to return the result.
                
                As a reminder, this was your task:
                {self.prompt}
                """,
            system_message=f"""
                {self.system_message}
                
                When you are finished with your task, you MUST
                use the TOOL `{DoneTool.name()}` to end the task
                and return the result.                
            """,
        )

        # Create the sub-agent
        sub_agent = ChatAgent(config)

        # Enable the specified tools for the sub-agent
        # Convert tool names to actual tool classes using parent agent's tools_map
        if self.tools == ["ALL"]:
            # Enable all tools from the parent agent:
            # This is the list of all tools KNOWN (whether usable or handle-able or not)
            tool_classes = [
                agent.llm_tools_map[t]
                for t in agent.llm_tools_known
                if t in agent.llm_tools_map
                and t != self.request
                and agent.llm_tools_map[t]._allow_llm_use
                # Exclude the TaskTool itself!
            ]
        elif self.tools == ["NONE"]:
            # No tools enabled
            tool_classes = []
        else:
            # Enable only specified tools
            tool_classes = [
                agent.llm_tools_map[tool_name]
                for tool_name in self.tools
                if tool_name in agent.llm_tools_map
                and agent.llm_tools_map[tool_name]._allow_llm_use
            ]

        # always enable the DoneTool to signal task completion
        sub_agent.enable_message(tool_classes + [DoneTool], use=True, handle=True)

        # Create a non-interactive task
        task = Task(sub_agent, interactive=False)

        return task

    def handle(
        self, agent: ChatAgent, chat_doc: Optional[ChatDocument] = None
    ) -> Optional[ChatDocument]:
        """

        Handle the TaskTool by creating a sub-agent with specified tools
        and running the task non-interactively.

        Args:
            agent: The parent ChatAgent that is handling this tool
            chat_doc: The ChatDocument containing this tool message
        """

        task = self._set_up_task(agent)

        # Create a ChatDocument for the prompt with parent pointer
        prompt_doc = None
        if chat_doc is not None:
            from langroid.agent.chat_document import ChatDocMetaData

            prompt_doc = ChatDocument(
                content=self.prompt,
                metadata=ChatDocMetaData(
                    parent_id=chat_doc.id(),
                    agent_id=agent.id,
                    sender=chat_doc.metadata.sender,
                ),
            )
            # Set bidirectional parent-child relationship
            chat_doc.metadata.child_id = prompt_doc.id()

        # Run the task with the ChatDocument or string prompt
        result = task.run(prompt_doc or self.prompt, turns=self.max_iterations or 10)
        return result

    async def handle_async(
        self, agent: ChatAgent, chat_doc: Optional[ChatDocument] = None
    ) -> Optional[ChatDocument]:
        """
        Async method to handle the TaskTool by creating a sub-agent with specified tools
        and running the task non-interactively.

        Args:
            agent: The parent ChatAgent that is handling this tool
            chat_doc: The ChatDocument containing this tool message
        """
        task = self._set_up_task(agent)

        # Create a ChatDocument for the prompt with parent pointer
        prompt_doc = None
        if chat_doc is not None:
            from langroid.agent.chat_document import ChatDocMetaData

            prompt_doc = ChatDocument(
                content=self.prompt,
                metadata=ChatDocMetaData(
                    parent_id=chat_doc.id(),
                    agent_id=agent.id,
                    sender=chat_doc.metadata.sender,
                ),
            )
            # Set bidirectional parent-child relationship
            chat_doc.metadata.child_id = prompt_doc.id()

        # Run the task with the ChatDocument or string prompt
        # TODO eventually allow the various task setup configs,
        #  including termination conditions
        result = await task.run_async(
            prompt_doc or self.prompt, turns=self.max_iterations or 10
        )
        return result
</file>

<file path="langroid/agent/task.py">
from __future__ import annotations

import asyncio
import copy
import logging
import re
import threading
from collections import Counter, OrderedDict, deque
from enum import Enum
from pathlib import Path
from types import SimpleNamespace
from typing import (
    Any,
    Callable,
    Coroutine,
    Deque,
    Dict,
    List,
    Optional,
    Self,
    Tuple,
    Type,
    TypeVar,
    Union,
    cast,
    overload,
)

import numpy as np
from rich import print
from rich.markup import escape

from langroid.agent.base import Agent
from langroid.agent.chat_agent import ChatAgent
from langroid.agent.chat_document import (
    ChatDocLoggerFields,
    ChatDocMetaData,
    ChatDocument,
    StatusCode,
)
from langroid.agent.tool_message import ToolMessage
from langroid.agent.tools.orchestration import AgentDoneTool, DoneTool, FinalResultTool
from langroid.cachedb.redis_cachedb import RedisCache, RedisCacheConfig
from langroid.exceptions import InfiniteLoopException
from langroid.mytypes import Entity
from langroid.parsing.parse_json import extract_top_level_json
from langroid.parsing.routing import parse_addressed_message
from langroid.pydantic_v1 import BaseModel
from langroid.utils.configuration import settings
from langroid.utils.constants import (
    DONE,
    NO_ANSWER,
    PASS,
    PASS_TO,
    SEND_TO,
    USER_QUIT_STRINGS,
)
from langroid.utils.logging import RichFileLogger, setup_file_logger
from langroid.utils.object_registry import scheduled_cleanup
from langroid.utils.system import hash
from langroid.utils.types import to_string

logger = logging.getLogger(__name__)

Responder = Entity | Type["Task"]

T = TypeVar("T")


def noop_fn(*args: List[Any], **kwargs: Dict[str, Any]) -> None:
    pass


class EventType(str, Enum):
    """Types of events that can occur in a task"""

    TOOL = "tool"  # Any tool generated
    SPECIFIC_TOOL = "specific_tool"  # Specific tool by name
    LLM_RESPONSE = "llm_response"  # LLM generates response
    AGENT_RESPONSE = "agent_response"  # Agent responds
    USER_RESPONSE = "user_response"  # User responds
    CONTENT_MATCH = "content_match"  # Response matches pattern
    NO_RESPONSE = "no_response"  # No valid response from entity
    CUSTOM = "custom"  # Custom condition


class AgentEvent(BaseModel):
    """Single event in a task sequence"""

    event_type: EventType
    tool_name: Optional[str] = None  # For SPECIFIC_TOOL
    content_pattern: Optional[str] = None  # For CONTENT_MATCH (regex)
    responder: Optional[str] = None  # Specific responder name
    # Optionally match only if the responder was specific entity/task
    sender: Optional[str] = None  # Entity name or Task name that sent the message


class DoneSequence(BaseModel):
    """A sequence of events that triggers task completion"""

    events: List[AgentEvent]
    # Optional name for debugging
    name: Optional[str] = None


class TaskConfig(BaseModel):
    """Configuration for a Task. This is a container for any params that
    we didn't include in the task `__init__` method.
    We may eventually move all the task __init__ params to this class, analogous to how
    we have config classes for `Agent`, `ChatAgent`, `LanguageModel`, etc.

    Attributes:
        inf_loop_cycle_len (int): max exact-loop cycle length: 0 => no inf loop test
        inf_loop_dominance_factor (float): dominance factor for exact-loop detection
        inf_loop_wait_factor (int): wait this * cycle_len msgs before loop-check
        restart_as_subtask (bool): whether to restart *every* run of this task
            when run as a subtask.
        addressing_prefix (str): "@"-like prefix an agent can use to address other
            agents, or entities of the agent. E.g., if this is "@", the addressing
            string would be "@Alice", or "@user", "@llm", "@agent", etc.
            If this is an empty string, then addressing is disabled.
            Default is empty string "".
            CAUTION: this is a deprecated practice, since normal prompts
            can accidentally contain such addressing prefixes, and will break
            your runs. This could happen especially when your prompt/context
            contains code, but of course could occur in normal text as well.
            Instead, use the `RecipientTool` to have agents address other agents or
            entities. If you do choose to use `addressing_prefix`, the recommended
            setting is to use `langroid.utils.constants.AT`, which currently is "|@|".
            Note that this setting does NOT affect the use of `constants.SEND_TO` --
            this is always enabled since this is a critical way for responders to
            indicate that the message should be sent to a specific entity/agent.
            (Search for "SEND_TO" in the examples/ dir to see how this is used.)
        allow_subtask_multi_oai_tools (bool): whether to allow multiple OpenAI
            tool-calls to be sent to a sub-task.
        recognize_string_signals (bool): whether to recognize string-based signaling
            like DONE, SEND_TO, PASS, etc. Default is True, but note that we don't need
            to use string-based signaling, and it is recommended to use the
            new Orchestration tools instead (see agent/tools/orchestration.py),
            e.g. DoneTool, SendTool, etc.
        done_if_tool (bool): whether to consider the task done if the pending message
            contains a Tool attempt by the LLM
            (including tools not handled by the agent).
            Default is False.
        done_sequences (List[DoneSequence]): List of event sequences that trigger task
            completion. Task is done if ANY sequence matches the recent event history.
            Each sequence is checked against the message parent chain.

    """

    inf_loop_cycle_len: int = 10
    inf_loop_dominance_factor: float = 1.5
    inf_loop_wait_factor: int = 5
    restart_as_subtask: bool = False
    logs_dir: str = "logs"
    enable_loggers: bool = True
    addressing_prefix: str = ""
    allow_subtask_multi_oai_tools: bool = True
    recognize_string_signals: bool = True
    done_if_tool: bool = False
    done_sequences: Optional[List[Union[str, DoneSequence]]] = None


class Task:
    """
    A `Task` wraps an `Agent` object, and sets up the `Agent`'s goals and instructions.
    A `Task` maintains two key variables:

    - `self.pending_message`, which is the message awaiting a response, and
    - `self.pending_sender`, which is the entity that sent the pending message.

    The possible responders to `self.pending_message` are the `Agent`'s own "native"
    responders (`agent_response`, `llm_response`, and `user_response`), and
    the `run()` methods of any sub-tasks. All responders have the same type-signature
    (somewhat simplified):
    ```
    str | ChatDocument -> ChatDocument
    ```
    Responders may or may not specify an intended recipient of their generated response.

    The main top-level method in the `Task` class is `run()`, which repeatedly calls
    `step()` until `done()` returns true. The `step()` represents a "turn" in the
    conversation: this method sequentially (in round-robin fashion) calls the responders
    until it finds one that generates a *valid* response to the `pending_message`
    (as determined by the `valid()` method). Once a valid response is found,
    `step()` updates the `pending_message` and `pending_sender` variables,
    and on the next iteration, `step()` re-starts its search for a valid response
    *from the beginning* of the list of responders (the exception being that the
    human user always gets a chance to respond after each non-human valid response).
    This process repeats until `done()` returns true, at which point `run()` returns
    the value of `result()`, which is the final result of the task.
    """

    # class variable called `cache` that is a RedisCache object
    _cache: RedisCache | None = None
    _background_tasks_started: bool = False

    def __init__(
        self,
        agent: Optional[Agent] = None,
        name: str = "",
        llm_delegate: bool = False,
        single_round: bool = False,
        system_message: str = "",
        user_message: str | None = "",
        restart: bool = True,
        default_human_response: Optional[str] = None,
        interactive: bool = True,
        only_user_quits_root: bool = True,
        erase_substeps: bool = False,
        allow_null_result: bool = False,
        max_stalled_steps: int = 5,
        default_return_type: Optional[type] = None,
        done_if_no_response: List[Responder] = [],
        done_if_response: List[Responder] = [],
        config: TaskConfig = TaskConfig(),
        **kwargs: Any,  # catch-all for any legacy params, for backwards compatibility
    ):
        """
        A task to be performed by an agent.

        Args:
            agent (Agent): agent associated with the task
            name (str): name of the task
            llm_delegate (bool):
                Whether to delegate "control" to LLM; conceptually,
                the "controlling entity" is the one "seeking" responses to its queries,
                and has a goal it is aiming to achieve, and decides when a task is done.
                The "controlling entity" is either the LLM or the USER.
                (Note within a Task there is just one
                LLM, and all other entities are proxies of the "User" entity).
                See also: `done_if_response`, `done_if_no_response` for more granular
                control of task termination.
            single_round (bool):
                If true, task runs until one message by "controller"
                (i.e. LLM if `llm_delegate` is true, otherwise USER)
                and subsequent response by non-controller [When a tool is involved,
                this will not give intended results. See `done_if_response`,
                `done_if_no_response` below].
                termination]. If false, runs for the specified number of turns in
                `run`, or until `done()` is true.
                One run of step() is considered a "turn".
                See also: `done_if_response`, `done_if_no_response` for more granular
                control of task termination.
            system_message (str): if not empty, overrides agent's system_message
            user_message (str): if not empty, overrides agent's user_message
            restart (bool): if true (default), resets the agent's message history
                *at every run* when it is the top-level task. Ignored when
                the task is a subtask of another task. Restart behavior of a subtask's
                `run()` can be controlled via the `TaskConfig.restart_as_subtask`
                setting.
            default_human_response (str|None): default response from user; useful for
                testing, to avoid interactive input from user.
                [Instead of this, setting `interactive` usually suffices]
            default_return_type: if not None, extracts a value of this type from the
                result of self.run()
            interactive (bool): if true, wait for human input after each non-human
                response (prevents infinite loop of non-human responses).
                Default is true. If false, then `default_human_response` is set to ""
                Note: When interactive = False, the one exception is when the user
                is explicitly addressed, via "@user" or using RecipientTool, in which
                case the system will wait for a user response. In other words, use
                `interactive=False` when you want a "largely non-interactive"
                run, with the exception of explicit user addressing.
            only_user_quits_root (bool): if true, when interactive=True, only user can
                quit the root task (Ignored when interactive=False).
            erase_substeps (bool): if true, when task completes, erase intermediate
                conversation with subtasks from this agent's `message_history`, and also
                erase all subtask agents' `message_history`.
                Note: erasing can reduce prompt sizes, but results in repetitive
                sub-task delegation.
            allow_null_result (bool):
                If true, create dummy NO_ANSWER response when no valid response is found
                in a step.
                Optional, default is False.
                *Note:* In non-interactive mode, when this is set to True,
                you can have a situation where an LLM generates (non-tool) text,
                and no other responders have valid responses, and a "Null result"
                is inserted as a dummy response from the User entity, so the LLM
                will now respond to this Null result, and this will continue
                until the LLM emits a DONE signal (if instructed to do so),
                otherwise langroid detects a potential infinite loop after
                a certain number of such steps (= `TaskConfig.inf_loop_wait_factor`)
                and will raise an InfiniteLoopException.
            max_stalled_steps (int): task considered done after this many consecutive
                steps with no progress. Default is 3.
            done_if_no_response (List[Responder]): consider task done if NULL
                response from any of these responders. Default is empty list.
            done_if_response (List[Responder]): consider task done if NON-NULL
                response from any of these responders. Default is empty list.
        """
        if agent is None:
            agent = ChatAgent()
        self.callbacks = SimpleNamespace(
            show_subtask_response=noop_fn,
            set_parent_agent=noop_fn,
        )
        self.config = config
        # Store parsed done sequences
        self._parsed_done_sequences: Optional[List[DoneSequence]] = None
        if self.config.done_sequences:
            from .done_sequence_parser import parse_done_sequences

            self._parsed_done_sequences = parse_done_sequences(
                self.config.done_sequences
            )
        # how to behave as a sub-task; can be overridden by `add_sub_task()`
        self.config_sub_task = copy.deepcopy(config)
        # counts of distinct pending messages in history,
        # to help detect (exact) infinite loops
        self.message_counter: Counter[str] = Counter()
        self._init_message_counter()

        self.history: Deque[str] = deque(
            maxlen=self.config.inf_loop_cycle_len * self.config.inf_loop_wait_factor
        )
        # copy the agent's config, so that we don't modify the original agent's config,
        # which may be shared by other agents.
        try:
            config_copy = copy.deepcopy(agent.config)
            agent.config = config_copy
        except Exception:
            logger.warning(
                """
                Failed to deep-copy Agent config during task creation, 
                proceeding with original config. Be aware that changes to 
                the config may affect other agents using the same config.
                """
            )
        self.restart = restart
        agent = cast(ChatAgent, agent)
        self.agent: ChatAgent = agent
        if isinstance(agent, ChatAgent) and len(agent.message_history) == 0 or restart:
            self.agent.init_state()
            # possibly change the system and user messages
            if system_message:
                # we always have at least 1 task_message
                self.agent.set_system_message(system_message)
            if user_message:
                self.agent.set_user_message(user_message)
        self.max_cost: float = 0
        self.max_tokens: int = 0
        self.session_id: str = ""
        self.logger: None | RichFileLogger = None
        self.tsv_logger: None | logging.Logger = None
        self.color_log: bool = False if settings.notebook else True

        self.n_stalled_steps = 0  # how many consecutive steps with no progress?
        # how many 2-step-apart alternations of no_answer step-result have we had,
        # i.e. x1, N/A, x2, N/A, x3, N/A ...
        self.n_no_answer_alternations = 0
        self._no_answer_step: int = -5
        self._step_idx = -1  # current step index
        self.max_stalled_steps = max_stalled_steps
        self.done_if_response = [r.value for r in done_if_response]
        self.done_if_no_response = [r.value for r in done_if_no_response]
        self.is_done = False  # is task done (based on response)?
        self.is_pass_thru = False  # is current response a pass-thru?
        if name:
            # task name overrides name in agent config
            agent.config.name = name
        self.name = name or agent.config.name
        self.value: str = self.name

        self.default_human_response = default_human_response
        if default_human_response is not None:
            # only override agent's default_human_response if it is explicitly set
            self.agent.default_human_response = default_human_response
        self.interactive = interactive
        self.agent.interactive = interactive
        self.only_user_quits_root = only_user_quits_root
        self.message_history_idx = -1
        self.default_return_type = default_return_type

        # set to True if we want to collapse multi-turn conversation with sub-tasks into
        # just the first outgoing message and last incoming message.
        # Note this also completely erases sub-task agents' message_history.
        self.erase_substeps = erase_substeps
        self.allow_null_result = allow_null_result

        agent_entity_responders = agent.entity_responders()
        agent_entity_responders_async = agent.entity_responders_async()
        self.responders: List[Responder] = [e for e, _ in agent_entity_responders]
        self.responders_async: List[Responder] = [
            e for e, _ in agent_entity_responders_async
        ]
        self.non_human_responders: List[Responder] = [
            r for r in self.responders if r != Entity.USER
        ]
        self.non_human_responders_async: List[Responder] = [
            r for r in self.responders_async if r != Entity.USER
        ]

        self.human_tried = False  # did human get a chance to respond in last step?
        self._entity_responder_map: Dict[
            Entity, Callable[..., Optional[ChatDocument]]
        ] = dict(agent_entity_responders)

        self._entity_responder_async_map: Dict[
            Entity, Callable[..., Coroutine[Any, Any, Optional[ChatDocument]]]
        ] = dict(agent_entity_responders_async)

        self.name_sub_task_map: Dict[str, Task] = {}
        # latest message in a conversation among entities and agents.
        self.pending_message: Optional[ChatDocument] = None
        self.pending_sender: Responder = Entity.USER
        self.single_round = single_round
        self.turns = -1  # no limit
        self.llm_delegate = llm_delegate
        # Track last responder for done sequence checking
        self._last_responder: Optional[Responder] = None
        # Track response sequence for message chain
        self.response_sequence: List[ChatDocument] = []
        if llm_delegate:
            if self.single_round:
                # 0: User instructs (delegating to LLM);
                # 1: LLM (as the Controller) asks;
                # 2: user replies.
                self.turns = 2
        else:
            if self.single_round:
                # 0: User (as Controller) asks,
                # 1: LLM replies.
                self.turns = 1
        # other sub_tasks this task can delegate to
        self.sub_tasks: List[Task] = []
        self.caller: Task | None = None  # which task called this task's `run` method

    def clone(self, i: int) -> "Task":
        """
        Returns a copy of this task, with a new agent.
        """
        assert isinstance(self.agent, ChatAgent), "Task clone only works for ChatAgent"
        agent: ChatAgent = self.agent.clone(i)
        return Task(
            agent,
            name=self.name + f"-{i}",
            llm_delegate=self.llm_delegate,
            single_round=self.single_round,
            system_message=self.agent.system_message,
            user_message=self.agent.user_message,
            restart=self.restart,
            default_human_response=self.default_human_response,
            interactive=self.interactive,
            erase_substeps=self.erase_substeps,
            allow_null_result=self.allow_null_result,
            max_stalled_steps=self.max_stalled_steps,
            done_if_no_response=[Entity(s) for s in self.done_if_no_response],
            done_if_response=[Entity(s) for s in self.done_if_response],
            default_return_type=self.default_return_type,
            config=self.config,
        )

    @classmethod
    def cache(cls) -> RedisCache:
        if cls._cache is None:
            cls._cache = RedisCache(RedisCacheConfig(fake=False))
        return cls._cache

    @classmethod
    def _start_background_tasks(cls) -> None:
        """Start background object registry cleanup thread. NOT USED."""
        if cls._background_tasks_started:
            return
        cls._background_tasks_started = True
        cleanup_thread = threading.Thread(
            target=scheduled_cleanup,
            args=(600,),
            daemon=True,
        )
        cleanup_thread.start()

    def __repr__(self) -> str:
        return f"{self.name}"

    def __str__(self) -> str:
        return f"{self.name}"

    def _init_message_counter(self) -> None:
        self.message_counter.clear()
        # create a unique string that will not likely be in any message,
        # so we always have a message with count=1
        self.message_counter.update([hash("___NO_MESSAGE___")])

    def _cache_session_store(self, key: str, value: str) -> None:
        """
        Cache a key-value pair for the current session.
        E.g. key = "kill", value = "1"
        """
        try:
            self.cache().store(f"{self.session_id}:{key}", value)
        except Exception as e:
            logging.error(f"Error in Task._cache_session_store: {e}")

    def _cache_session_lookup(self, key: str) -> Dict[str, Any] | str | None:
        """
        Retrieve a value from the cache for the current session.
        """
        session_id_key = f"{self.session_id}:{key}"
        try:
            cached_val = self.cache().retrieve(session_id_key)
        except Exception as e:
            logging.error(f"Error in Task._cache_session_lookup: {e}")
            return None
        return cached_val

    def _is_kill(self) -> bool:
        """
        Check if the current session is killed.
        """
        return self._cache_session_lookup("kill") == "1"

    def _set_alive(self) -> None:
        """
        Initialize the kill status of the current session.
        """
        self._cache_session_store("kill", "0")

    @classmethod
    def kill_session(cls, session_id: str = "") -> None:
        """
        Kill the session with the given session_id.
        """
        session_id_kill_key = f"{session_id}:kill"
        cls.cache().store(session_id_kill_key, "1")

    def kill(self) -> None:
        """
        Kill the task run associated with the current session.
        """
        self._cache_session_store("kill", "1")

    @property
    def _level(self) -> int:
        if self.caller is None:
            return 0
        return self.caller._level + 1

    @property
    def _indent(self) -> str:
        return "...|" * self._level

    @property
    def _enter(self) -> str:
        return self._indent + ">>>"

    @property
    def _leave(self) -> str:
        return self._indent + "<<<"

    def add_sub_task(
        self,
        task: (
            Task | List[Task] | Tuple[Task, TaskConfig] | List[Tuple[Task, TaskConfig]]
        ),
    ) -> None:
        """
        Add a sub-task (or list of subtasks) that this task can delegate
        (or fail-over) to. Note that the sequence of sub-tasks is important,
        since these are tried in order, as the parent task searches for a valid
        response (unless a sub-task is explicitly addressed).

        Args:
            task: A task, or list of tasks, or a tuple of task and task config,
                or a list of tuples of task and task config.
                These tasks are added as sub-tasks of the current task.
                The task configs (if any) dictate how the tasks are run when
                invoked as sub-tasks of other tasks. This allows users to specify
                behavior applicable only in the context of a particular task-subtask
                combination.
        """
        if isinstance(task, list):
            for t in task:
                self.add_sub_task(t)
            return

        if isinstance(task, tuple):
            task, config = task
        else:
            config = TaskConfig()
        task.config_sub_task = config
        self.sub_tasks.append(task)
        self.name_sub_task_map[task.name] = task
        self.responders.append(cast(Responder, task))
        self.responders_async.append(cast(Responder, task))
        self.non_human_responders.append(cast(Responder, task))
        self.non_human_responders_async.append(cast(Responder, task))

    def init(self, msg: None | str | ChatDocument = None) -> ChatDocument | None:
        """
        Initialize the task, with an optional message to start the conversation.
        Initializes `self.pending_message` and `self.pending_sender`.
        Args:
            msg (str|ChatDocument): optional message to start the conversation.

        Returns:
            (ChatDocument|None): the initialized `self.pending_message`.
            Currently not used in the code, but provided for convenience.
        """
        self.pending_sender = Entity.USER
        if isinstance(msg, str):
            self.pending_message = ChatDocument(
                content=msg,
                metadata=ChatDocMetaData(
                    sender=Entity.USER,
                ),
            )
        elif msg is None and len(self.agent.message_history) > 1:
            # if agent has a history beyond system msg, set the
            # pending message to the ChatDocument linked from
            # last message in the history
            last_agent_msg = self.agent.message_history[-1]
            self.pending_message = ChatDocument.from_id(last_agent_msg.chat_document_id)
            if self.pending_message is not None:
                self.pending_sender = self.pending_message.metadata.sender
        else:
            if isinstance(msg, ChatDocument):
                # carefully deep-copy: fresh metadata.id, register
                # as new obj in registry
                original_parent_id = msg.metadata.parent_id
                self.pending_message = ChatDocument.deepcopy(msg)
                # Preserve the parent pointer from the original message
                self.pending_message.metadata.parent_id = original_parent_id
            if self.pending_message is not None and self.caller is not None:
                # msg may have come from `caller`, so we pretend this is from
                # the CURRENT task's USER entity
                self.pending_message.metadata.sender = Entity.USER
                # update parent, child, agent pointers
                if msg is not None:
                    msg.metadata.child_id = self.pending_message.metadata.id
                    # Only override parent_id if it wasn't already set in the
                    # original message. This preserves parent chains from TaskTool
                    if not msg.metadata.parent_id:
                        self.pending_message.metadata.parent_id = msg.metadata.id
            if self.pending_message is not None:
                self.pending_message.metadata.agent_id = self.agent.id

        self._show_pending_message_if_debug()
        self.init_loggers()
        self.log_message(Entity.USER, self.pending_message)
        return self.pending_message

    def init_loggers(self) -> None:
        """Initialise per-task Rich and TSV loggers."""
        from langroid.utils.logging import RichFileLogger

        if not self.config.enable_loggers:
            return

        if self.caller is not None and self.caller.logger is not None:
            self.logger = self.caller.logger
        elif self.logger is None:
            self.logger = RichFileLogger(
                str(Path(self.config.logs_dir) / f"{self.name}.log"),
                append=True,
                color=self.color_log,
            )

        if self.caller is not None and self.caller.tsv_logger is not None:
            self.tsv_logger = self.caller.tsv_logger
        elif self.tsv_logger is None:
            # unique logger name ensures a distinct `logging.Logger` object
            self.tsv_logger = setup_file_logger(
                f"tsv_logger.{self.name}.{id(self)}",
                str(Path(self.config.logs_dir) / f"{self.name}.tsv"),
            )
            header = ChatDocLoggerFields().tsv_header()
            self.tsv_logger.info(f" \tTask\tResponder\t{header}")

    def reset_all_sub_tasks(self) -> None:
        """
        Recursively reset message history & state of own agent and
        those of all sub-tasks.
        """
        self.agent.init_state()
        for t in self.sub_tasks:
            t.reset_all_sub_tasks()

    def __getitem__(self, return_type: type) -> Self:
        """Returns a (shallow) copy of `self` with a default return type."""
        clone = copy.copy(self)
        clone.default_return_type = return_type
        return clone

    @overload
    def run(  # noqa
        self,
        msg: Any = None,
        *,
        turns: int = -1,
        caller: None | Task = None,
        max_cost: float = 0,
        max_tokens: int = 0,
        session_id: str = "",
        allow_restart: bool = True,
    ) -> Optional[ChatDocument]: ...  # noqa

    @overload
    def run(  # noqa
        self,
        msg: Any = None,
        *,
        turns: int = -1,
        caller: None | Task = None,
        max_cost: float = 0,
        max_tokens: int = 0,
        session_id: str = "",
        allow_restart: bool = True,
        return_type: Type[T],
    ) -> Optional[T]: ...  # noqa

    def run(
        self,
        msg: Any = None,
        turns: int = -1,
        caller: None | Task = None,
        max_cost: float = 0,
        max_tokens: int = 0,
        session_id: str = "",
        allow_restart: bool = True,
        return_type: Optional[Type[T]] = None,
    ) -> Optional[ChatDocument | T]:
        """Synchronous version of `run_async()`.
        See `run_async()` for details."""
        if allow_restart and (
            (self.restart and caller is None)
            or (self.config_sub_task.restart_as_subtask and caller is not None)
        ):
            # We are either at top level, with restart = True, OR
            # we are a sub-task with restart_as_subtask = True,
            # so reset own agent and recursively for all sub-tasks
            self.reset_all_sub_tasks()

        self.n_stalled_steps = 0
        self._no_answer_step = -5  # last step where the best explicit response was N/A
        # how many N/A alternations have we had so far? (for Inf loop detection)
        self.n_no_answer_alternations = 0
        self.max_cost = max_cost
        self.max_tokens = max_tokens
        self.session_id = session_id
        self._set_alive()
        self._init_message_counter()
        self.history.clear()

        msg_input = self.agent.to_ChatDocument(msg, author_entity=Entity.USER)

        if (
            isinstance(msg_input, ChatDocument)
            and msg_input.metadata.recipient != ""
            and msg_input.metadata.recipient != self.name
        ):
            # this task is not the intended recipient so return None
            return None

        self._pre_run_loop(
            msg=msg_input,
            caller=caller,
            is_async=False,
        )
        # self.turns overrides if it is > 0 and turns not set (i.e. = -1)
        turns = self.turns if turns < 0 else turns
        i = 0
        while True:
            self._step_idx = i  # used in step() below
            self.step()
            # Track pending message in response sequence
            if self.pending_message is not None:
                if (
                    not self.response_sequence
                    or self.pending_message.id() != self.response_sequence[-1].id()
                ):
                    self.response_sequence.append(self.pending_message)
            done, status = self.done()
            if done:
                if self._level == 0 and not settings.quiet:
                    print("[magenta]Bye, hope this was useful!")
                break
            i += 1
            max_turns = (
                min(turns, settings.max_turns)
                if turns > 0 and settings.max_turns > 0
                else max(turns, settings.max_turns)
            )
            if max_turns > 0 and i >= max_turns:
                # Important to distinguish between:
                # (a) intentional run for a
                #     fixed number of turns, where we expect the pending message
                #     at that stage to be the desired result, and
                # (b) hitting max_turns limit, which is not intentional, and is an
                #     exception, resulting in a None task result
                status = (
                    StatusCode.MAX_TURNS
                    if i == settings.max_turns
                    else StatusCode.FIXED_TURNS
                )
                break
            if (
                self.config.inf_loop_cycle_len > 0
                and i % self.config.inf_loop_cycle_len == 0
                and self._maybe_infinite_loop()
                or self.n_no_answer_alternations > self.config.inf_loop_wait_factor
            ):
                raise InfiniteLoopException(
                    """Possible infinite loop detected!
                    You can adjust infinite loop detection (or turn it off)
                    by changing the params in the TaskConfig passed to the Task 
                    constructor; see here:
                    https://langroid.github.io/langroid/reference/agent/task/#langroid.agent.task.TaskConfig
                    """
                )

        final_result = self.result(status)
        self._post_run_loop()
        if final_result is None:
            return None

        if return_type is None:
            return_type = self.default_return_type

        # If possible, take a final strict decoding step
        # when the output does not match `return_type`
        if return_type is not None and return_type != ChatDocument:
            parsed_result = self.agent.from_ChatDocument(final_result, return_type)

            if (
                parsed_result is None
                and isinstance(self.agent, ChatAgent)
                and self.agent._json_schema_available()
            ):
                strict_agent = self.agent[return_type]
                output_args = strict_agent._function_args()[-1]
                if output_args is not None:
                    schema = output_args.function.parameters
                    strict_result = strict_agent.llm_response(
                        f"""
                        A response adhering to the following JSON schema was expected:
                        {schema}

                        Please resubmit with the correct schema. 
                        """
                    )

                    if strict_result is not None:
                        return cast(
                            Optional[T],
                            strict_agent.from_ChatDocument(strict_result, return_type),
                        )

            return parsed_result

        return final_result

    @overload
    async def run_async(  # noqa
        self,
        msg: Any = None,
        *,
        turns: int = -1,
        caller: None | Task = None,
        max_cost: float = 0,
        max_tokens: int = 0,
        session_id: str = "",
        allow_restart: bool = True,
    ) -> Optional[ChatDocument]: ...  # noqa

    @overload
    async def run_async(  # noqa
        self,
        msg: Any = None,
        *,
        turns: int = -1,
        caller: None | Task = None,
        max_cost: float = 0,
        max_tokens: int = 0,
        session_id: str = "",
        allow_restart: bool = True,
        return_type: Type[T],
    ) -> Optional[T]: ...  # noqa

    async def run_async(
        self,
        msg: Any = None,
        turns: int = -1,
        caller: None | Task = None,
        max_cost: float = 0,
        max_tokens: int = 0,
        session_id: str = "",
        allow_restart: bool = True,
        return_type: Optional[Type[T]] = None,
    ) -> Optional[ChatDocument | T]:
        """
        Loop over `step()` until task is considered done or `turns` is reached.
        Runs asynchronously.

        Args:
            msg (Any): initial *user-role* message to process; if None,
                the LLM will respond to its initial `self.task_messages`
                which set up and kick off the overall task.
                The agent tries to achieve this goal by looping
                over `self.step()` until the task is considered
                done; this can involve a series of messages produced by Agent,
                LLM or Human (User). Note that `msg`, if passed, is treated as
                message with role `user`; a "system" role message should not be
                passed here.
            turns (int): number of turns to run the task for;
                default is -1, which means run until task is done.
            caller (Task|None): the calling task, if any
            max_cost (float): max cost allowed for the task (default 0 -> no limit)
            max_tokens (int): max tokens allowed for the task (default 0 -> no limit)
            session_id (str): session id for the task
            allow_restart (bool): whether to allow restarting the task
            return_type (Optional[Type[T]]): desired final result type

        Returns:
            Optional[ChatDocument]: valid result of the task.
        """

        # Even if the initial "sender" is not literally the USER (since the task could
        # have come from another LLM), as far as this agent is concerned, the initial
        # message can be considered to be from the USER
        # (from the POV of this agent's LLM).

        if allow_restart and (
            (self.restart and caller is None)
            or (self.config_sub_task.restart_as_subtask and caller is not None)
        ):
            # We are either at top level, with restart = True, OR
            # we are a sub-task with restart_as_subtask = True,
            # so reset own agent and recursively for all sub-tasks
            self.reset_all_sub_tasks()

        self.n_stalled_steps = 0
        self._no_answer_step = -5  # last step where the best explicit response was N/A
        # how many N/A alternations have we had so far? (for Inf loop detection)
        self.n_no_answer_alternations = 0
        self.max_cost = max_cost
        self.max_tokens = max_tokens
        self.session_id = session_id
        self._set_alive()
        self._init_message_counter()
        self.history.clear()

        msg_input = self.agent.to_ChatDocument(msg, author_entity=Entity.USER)

        if (
            isinstance(msg_input, ChatDocument)
            and msg_input.metadata.recipient != ""
            and msg_input.metadata.recipient != self.name
        ):
            # this task is not the intended recipient so return None
            return None

        self._pre_run_loop(
            msg=msg_input,
            caller=caller,
            is_async=False,
        )
        # self.turns overrides if it is > 0 and turns not set (i.e. = -1)
        turns = self.turns if turns < 0 else turns
        i = 0
        while True:
            self._step_idx = i  # used in step() below
            await self.step_async()
            await asyncio.sleep(0.01)  # temp yield to avoid blocking
            done, status = self.done()
            if done:
                if self._level == 0 and not settings.quiet:
                    print("[magenta]Bye, hope this was useful!")
                break
            i += 1
            max_turns = (
                min(turns, settings.max_turns)
                if turns > 0 and settings.max_turns > 0
                else max(turns, settings.max_turns)
            )
            if max_turns > 0 and i >= max_turns:
                # Important to distinguish between:
                # (a) intentional run for a
                #     fixed number of turns, where we expect the pending message
                #     at that stage to be the desired result, and
                # (b) hitting max_turns limit, which is not intentional, and is an
                #     exception, resulting in a None task result
                status = (
                    StatusCode.MAX_TURNS
                    if i == settings.max_turns
                    else StatusCode.FIXED_TURNS
                )
                break
            if (
                self.config.inf_loop_cycle_len > 0
                and i % self.config.inf_loop_cycle_len == 0
                and self._maybe_infinite_loop()
                or self.n_no_answer_alternations > self.config.inf_loop_wait_factor
            ):
                raise InfiniteLoopException(
                    """Possible infinite loop detected!
                    You can adjust infinite loop detection (or turn it off)
                    by changing the params in the TaskConfig passed to the Task 
                    constructor; see here:
                    https://langroid.github.io/langroid/reference/agent/task/#langroid.agent.task.TaskConfig
                    """
                )

        final_result = self.result(status)
        self._post_run_loop()
        if final_result is None:
            return None

        if return_type is None:
            return_type = self.default_return_type

        # If possible, take a final strict decoding step
        # when the output does not match `return_type`
        if return_type is not None and return_type != ChatDocument:
            parsed_result = self.agent.from_ChatDocument(final_result, return_type)

            if (
                parsed_result is None
                and isinstance(self.agent, ChatAgent)
                and self.agent._json_schema_available()
            ):
                strict_agent = self.agent[return_type]
                output_args = strict_agent._function_args()[-1]
                if output_args is not None:
                    schema = output_args.function.parameters
                    strict_result = await strict_agent.llm_response_async(
                        f"""
                        A response adhering to the following JSON schema was expected:
                        {schema}

                        Please resubmit with the correct schema. 
                        """
                    )

                    if strict_result is not None:
                        return cast(
                            Optional[T],
                            strict_agent.from_ChatDocument(strict_result, return_type),
                        )

            return parsed_result

        return final_result

    def _pre_run_loop(
        self,
        msg: Optional[str | ChatDocument] = None,
        caller: None | Task = None,
        is_async: bool = False,
    ) -> None:
        self.caller = caller
        self.init(msg)
        # sets indentation to be printed prior to any output from agent
        self.agent.indent = self._indent
        self.message_history_idx = -1
        if isinstance(self.agent, ChatAgent):
            # mark where we are in the message history, so we can reset to this when
            # we are done with the task
            self.message_history_idx = (
                max(
                    len(self.agent.message_history),
                    len(self.agent.task_messages),
                )
                - 1
            )
        # TODO decide on whether or not to print, based on is_async
        llm_model = (
            "no-LLM" if self.agent.llm is None else self.agent.llm.config.chat_model
        )
        if not settings.quiet:
            print(
                f"[bold magenta]{self._enter} Starting Agent "
                f"{self.name} ({self.message_history_idx+1}) "
                f"{llm_model} [/bold magenta]"
            )

    def _post_run_loop(self) -> None:
        # delete all messages from our agent's history, AFTER the first incoming
        # message, and BEFORE final result message
        n_messages = 0
        if isinstance(self.agent, ChatAgent):
            if self.erase_substeps:
                # TODO I don't like directly accessing agent message_history. Revisit.
                # (Pchalasani)
                # Note: msg history will consist of:
                # - H: the original msg history, ending at idx= self.message_history_idx
                # - R: this agent's response, which presumably leads to:
                # - X: a series of back-and-forth msgs (including with agent's own
                #     responders and with sub-tasks)
                # - F: the final result message, from this agent.
                # Here we are deleting all of [X] from the agent's message history,
                # so that it simply looks as if the sub-tasks never happened.

                dropped = self.agent.message_history[
                    self.message_history_idx + 2 : n_messages - 1
                ]
                # first delete the linked ChatDocuments (and descendants) from
                # ObjectRegistry
                for msg in dropped:
                    ChatDocument.delete_id(msg.chat_document_id)
                # then delete the messages from the agent's message_history
                del self.agent.message_history[
                    self.message_history_idx + 2 : n_messages - 1
                ]
            n_messages = len(self.agent.message_history)
        if self.erase_substeps:
            for t in self.sub_tasks:
                # erase our conversation with agent of subtask t

                # erase message_history of agent of subtask t
                # TODO - here we assume that subtask-agents are
                # ONLY talking to the current agent.
                if isinstance(t.agent, ChatAgent):
                    t.agent.clear_history(0)
        if not settings.quiet:
            print(
                f"[bold magenta]{self._leave} Finished Agent "
                f"{self.name} ({n_messages}) [/bold magenta]"
            )

    def step(self, turns: int = -1) -> ChatDocument | None:
        """
        Synchronous version of `step_async()`. See `step_async()` for details.
        TODO: Except for the self.response() calls, this fn should be identical to
        `step_async()`. Consider refactoring to avoid duplication.
        """
        self.is_done = False
        parent = self.pending_message
        recipient = (
            ""
            if self.pending_message is None
            else self.pending_message.metadata.recipient
        )
        if not self._valid_recipient(recipient):
            logger.warning(f"Invalid recipient: {recipient}")
            error_doc = ChatDocument(
                content=f"Invalid recipient: {recipient}",
                metadata=ChatDocMetaData(
                    sender=Entity.AGENT,
                    sender_name=Entity.AGENT,
                ),
            )
            self._process_valid_responder_result(Entity.AGENT, parent, error_doc)
            return error_doc

        responders: List[Responder] = self.non_human_responders.copy()

        if (
            Entity.USER in self.responders
            and not self.human_tried
            and not self.agent.has_tool_message_attempt(self.pending_message)
        ):
            # Give human first chance if they haven't been tried in last step,
            # and the msg is not a tool-call attempt;
            # (When `interactive=False`, human is only allowed to respond only if
            #  if explicitly addressed)
            # This ensures human gets a chance to respond,
            #   other than to a LLM tool-call.
            # When there's a tool msg attempt we want the
            #  Agent to be the next responder; this only makes a difference in an
            #  interactive setting: LLM generates tool, then we don't want user to
            #  have to respond, and instead let the agent_response handle the tool.

            responders.insert(0, Entity.USER)

        found_response = False
        # (responder, result) from a responder who explicitly said NO_ANSWER
        no_answer_response: None | Tuple[Responder, ChatDocument] = None
        n_non_responders = 0
        for r in responders:
            self.is_pass_thru = False
            if not self._can_respond(r):
                n_non_responders += 1
                # create dummy msg for logging
                log_doc = ChatDocument(
                    content="[CANNOT RESPOND]",
                    metadata=ChatDocMetaData(
                        sender=r if isinstance(r, Entity) else Entity.USER,
                        sender_name=str(r),
                        recipient=recipient,
                    ),
                )
                # no need to register this dummy msg in ObjectRegistry
                ChatDocument.delete_id(log_doc.id())
                self.log_message(r, log_doc)
                if n_non_responders == len(responders):
                    # don't stay in this "non-response" loop forever
                    break
                continue
            self.human_tried = r == Entity.USER
            result = self.response(r, turns)
            if result and NO_ANSWER in result.content:
                no_answer_response = (r, result)
            self.is_done = self._is_done_response(result, r)
            self.is_pass_thru = PASS in result.content if result else False
            if self.valid(result, r):
                found_response = True
                assert result is not None
                self._process_valid_responder_result(r, parent, result)
                break
            else:
                self.log_message(r, result)
            if self.is_done:
                # skip trying other responders in this step
                break
        if not found_response:  # did not find a valid response
            if no_answer_response:
                # even though there was no valid response from anyone in this step,
                # if there was at least one who EXPLICITLY said NO_ANSWER, then
                # we process that as a valid response.
                r, result = no_answer_response
                self._process_valid_responder_result(r, parent, result)
            else:
                self._process_invalid_step_result(parent)
        self._show_pending_message_if_debug()
        return self.pending_message

    async def step_async(self, turns: int = -1) -> ChatDocument | None:
        """
        A single "turn" in the task conversation: The "allowed" responders in this
        turn (which can be either the 3 "entities", or one of the sub-tasks) are
        tried in sequence, until a _valid_ response is obtained; a _valid_
        response is one that contributes to the task, either by ending it,
        or producing a response to be further acted on.
        Update `self.pending_message` to the latest valid response (or NO_ANSWER
        if no valid response was obtained from any responder).

        Args:
            turns (int): number of turns to process. Typically used in testing
                where there is no human to "quit out" of current level, or in cases
                where we want to limit the number of turns of a delegated agent.

        Returns (ChatDocument|None):
            Updated `self.pending_message`. Currently the return value is not used
                by the `task.run()` method, but we return this as a convenience for
                other use-cases, e.g. where we want to run a task step by step in a
                different context.
        """
        self.is_done = False
        parent = self.pending_message
        recipient = (
            ""
            if self.pending_message is None
            else self.pending_message.metadata.recipient
        )
        if not self._valid_recipient(recipient):
            logger.warning(f"Invalid recipient: {recipient}")
            error_doc = ChatDocument(
                content=f"Invalid recipient: {recipient}",
                metadata=ChatDocMetaData(
                    sender=Entity.AGENT,
                    sender_name=Entity.AGENT,
                ),
            )
            self._process_valid_responder_result(Entity.AGENT, parent, error_doc)
            return error_doc

        responders: List[Responder] = self.non_human_responders_async.copy()

        if (
            Entity.USER in self.responders
            and not self.human_tried
            and not self.agent.has_tool_message_attempt(self.pending_message)
        ):
            # Give human first chance if they haven't been tried in last step,
            # and the msg is not a tool-call attempt;
            # This ensures human gets a chance to respond,
            #   other than to a LLM tool-call.
            # When there's a tool msg attempt we want the
            #  Agent to be the next responder; this only makes a difference in an
            #  interactive setting: LLM generates tool, then we don't want user to
            #  have to respond, and instead let the agent_response handle the tool.
            responders.insert(0, Entity.USER)

        found_response = False
        # (responder, result) from a responder who explicitly said NO_ANSWER
        no_answer_response: None | Tuple[Responder, ChatDocument] = None
        for r in responders:
            self.is_pass_thru = False
            if not self._can_respond(r):
                # create dummy msg for logging
                log_doc = ChatDocument(
                    content="[CANNOT RESPOND]",
                    metadata=ChatDocMetaData(
                        sender=r if isinstance(r, Entity) else Entity.USER,
                        sender_name=str(r),
                        recipient=recipient,
                    ),
                )
                # no need to register this dummy msg in ObjectRegistry
                ChatDocument.delete_id(log_doc.id())
                self.log_message(r, log_doc)
                continue
            self.human_tried = r == Entity.USER
            result = await self.response_async(r, turns)
            if result and NO_ANSWER in result.content:
                no_answer_response = (r, result)
            self.is_done = self._is_done_response(result, r)
            self.is_pass_thru = PASS in result.content if result else False
            if self.valid(result, r):
                found_response = True
                assert result is not None
                self._process_valid_responder_result(r, parent, result)
                break
            else:
                self.log_message(r, result)
            if self.is_done:
                # skip trying other responders in this step
                break
        if not found_response:
            if no_answer_response:
                # even though there was no valid response from anyone in this step,
                # if there was at least one who EXPLICITLY said NO_ANSWER, then
                # we process that as a valid response.
                r, result = no_answer_response
                self._process_valid_responder_result(r, parent, result)
            else:
                self._process_invalid_step_result(parent)
        self._show_pending_message_if_debug()
        return self.pending_message

    def _update_no_answer_vars(self, result: ChatDocument) -> None:
        """Update variables related to NO_ANSWER responses, to aid
        in alternating NO_ANSWER infinite-loop detection."""

        if NO_ANSWER in result.content:
            if self._no_answer_step == self._step_idx - 2:
                # N/A two steps ago
                self.n_no_answer_alternations += 1
            else:
                # reset alternations counter
                self.n_no_answer_alternations = 0

            # record the last step where the best explicit response was N/A
            self._no_answer_step = self._step_idx

    def _process_valid_responder_result(
        self,
        r: Responder,
        parent: ChatDocument | None,
        result: ChatDocument,
    ) -> None:
        """Processes valid result from a responder, during a step"""

        self._update_no_answer_vars(result)

        # Store the last responder for done sequence checking
        self._last_responder = r

        # pending_sender is of type Responder,
        # i.e. it is either one of the agent's entities
        # OR a sub-task, that has produced a valid response.
        # Contrast this with self.pending_message.metadata.sender, which is an ENTITY
        # of this agent, or a sub-task's agent.
        if not self.is_pass_thru:
            if self.pending_message is not None and not isinstance(r, Task):
                # when pending msg is from our own agent, respect the sender set there,
                # since sometimes a response may "mock" as if the response is from
                # another entity (e.g when using RewindTool, the agent handler
                # returns a result as if it were from the LLM).
                self.pending_sender = result.metadata.sender
            else:
                # when pending msg is from a sub-task, the sender is the sub-task
                self.pending_sender = r
            self.pending_message = result
        # set the parent/child links ONLY if not already set by agent internally,
        # which may happen when using the RewindTool, or in other scenarios.
        if parent is not None and not result.metadata.parent_id:
            result.metadata.parent_id = parent.id()
        if parent is not None and not parent.metadata.child_id:
            parent.metadata.child_id = result.id()

        self.log_message(self.pending_sender, result, mark=True)
        if self.is_pass_thru:
            self.n_stalled_steps += 1
        else:
            # reset stuck counter since we made progress
            self.n_stalled_steps = 0

        if self.pending_message is not None:
            if (
                self._is_done_response(result, r)
                and self._level == 0
                and self.only_user_quits_root
                and self._user_can_respond()
            ):
                # We're ignoring the DoneTools (if any) in this case,
                # so remove them from the pending msg, to ensure
                # they don't affect the next step.
                self.pending_message.tool_messages = [
                    t
                    for t in self.pending_message.tool_messages
                    if not isinstance(t, (DoneTool, AgentDoneTool))
                ]
            # update counters for infinite loop detection
            hashed_msg = hash(str(self.pending_message))
            self.message_counter.update([hashed_msg])
            self.history.append(hashed_msg)

    def _process_invalid_step_result(self, parent: ChatDocument | None) -> None:
        """
        Since step had no valid result from any responder, decide whether to update the
        self.pending_message to a NO_ANSWER message from the opposite entity,
        or leave it as is.
        Args:
           parent (ChatDocument|None): parent message of the current message
        """
        self.n_stalled_steps += 1
        if self.allow_null_result and not self.is_pass_thru:
            # Null step-result is allowed, and we're not in a "pass-thru" situation,
            # so we update the pending_message to a dummy NO_ANSWER msg
            # from the entity 'opposite' to the current pending_sender,
            # so that the task can continue.
            # CAUTION: unless the LLM is instructed to signal DONE at an appropriate
            # time, this can result in an infinite loop.
            responder = (
                Entity.LLM if self.pending_sender == Entity.USER else Entity.USER
            )
            parent_id = "" if parent is None else parent.id()
            self.pending_message = ChatDocument(
                content=NO_ANSWER,
                metadata=ChatDocMetaData(sender=responder, parent_id=parent_id),
            )
            self.pending_sender = responder
            self._update_no_answer_vars(self.pending_message)
        self.log_message(self.pending_sender, self.pending_message, mark=True)

    def _show_pending_message_if_debug(self) -> None:
        if self.pending_message is None:
            return
        if settings.debug:
            sender_str = escape(str(self.pending_sender))
            msg_str = escape(str(self.pending_message))
            print(f"[grey37][{sender_str}]{msg_str}[/grey37]")

    def _forbid_multi_oai_tools(self, e: Responder) -> ChatDocument:
        # Passing multiple OpenAI Tools to be handled by another agent
        # is not supported yet (we need to carefully establish correspondence
        # between the original tool-calls of agent A, and the returned results,
        # which may involve recursive-called tools by agent B).
        # So we set an error result corresponding to each tool-call.
        assert isinstance(
            e, Task
        ), "Forbidding multiple OAI tools only applies to a responder of type Task"
        err_str = """
                    ERROR: cannot pass multiple tools to another agent!
                    Please use ONE tool at a time!
                """
        id2result = OrderedDict((tc.id, err_str) for tc in self.agent.oai_tool_calls)
        result = e.agent.create_user_response(
            content="",
            oai_tool_id2result=id2result,
        )
        return result

    def response(
        self,
        e: Responder,
        turns: int = -1,
    ) -> Optional[ChatDocument]:
        """
        Sync version of `response_async()`. See `response_async()` for details.
        """
        if isinstance(e, Task):
            actual_turns = e.turns if e.turns > 0 else turns
            e.agent.callbacks.set_parent_agent(self.agent)
            # e.callbacks.set_parent_agent(self.agent)
            pending_tools = self.agent.try_get_tool_messages(self.pending_message)
            # TODO disable this
            if (
                len(pending_tools) > 1
                and len(self.agent.oai_tool_calls) > 1
                and not self.config.allow_subtask_multi_oai_tools
            ):
                result = self._forbid_multi_oai_tools(e)
            else:
                result = e.run(
                    self.pending_message,
                    turns=actual_turns,
                    caller=self,
                    max_cost=self.max_cost,
                    max_tokens=self.max_tokens,
                )
                # update result.tool_messages if any
                if isinstance(result, ChatDocument):
                    self.agent.try_get_tool_messages(result)
                if result is not None:
                    content, id2result, oai_tool_id = self.agent.process_tool_results(
                        result.content,
                        result.oai_tool_id2result,
                        (
                            self.pending_message.oai_tool_calls
                            if isinstance(self.pending_message, ChatDocument)
                            else None
                        ),
                    )
                    result.content = content
                    result.oai_tool_id2result = id2result
                    result.metadata.oai_tool_id = oai_tool_id

            result_str = (  # only used by callback to display content and possible tool
                "NONE"
                if result is None
                else "\n\n".join(str(m) for m in ChatDocument.to_LLMMessage(result))
            )
            maybe_tool = len(extract_top_level_json(result_str)) > 0
            self.callbacks.show_subtask_response(
                task=e,
                content=result_str,
                is_tool=maybe_tool,
            )
        else:
            response_fn = self._entity_responder_map[cast(Entity, e)]
            result = response_fn(self.pending_message)
            # update result.tool_messages if any.
            # Do this only if sender is LLM, since this could be
            # a tool-call result from the Agent responder, which may
            # contain strings that look like tools, and we don't want to
            # trigger strict tool recovery due to that.
            if (
                isinstance(result, ChatDocument)
                and result.metadata.sender == Entity.LLM
            ):
                self.agent.try_get_tool_messages(result)

        result_chat_doc = self.agent.to_ChatDocument(
            result,
            chat_doc=self.pending_message,
            author_entity=e if isinstance(e, Entity) else Entity.USER,
        )
        return self._process_result_routing(result_chat_doc, e)

    def _process_result_routing(
        self, result: ChatDocument | None, e: Responder
    ) -> ChatDocument | None:
        # process result in case there is a routing instruction
        if result is None:
            return None
        if isinstance(result, ToolMessage):
            # this supports Agent responders and Task.run() to
            # return a ToolMessage, in addition str, ChatDocument
            if isinstance(e, Task):
                # With the curr defn of Task.result(),
                # Task.run() can't return a ToolMessage, so this case doesn't occur,
                # but we leave it here in case a
                # Task subclass overrides default behavior
                return e.agent.create_user_response(tool_messages=[result])
            else:
                # e must be this agent's Entity (LLM, AGENT or USER)
                return self.agent.response_template(e=e, tool_messages=[result])
        if not self.config.recognize_string_signals:
            # ignore all string-based signaling/routing
            return result
        # parse various routing/addressing strings in result
        is_pass, recipient, content = self._parse_routing(
            result,
            addressing_prefix=self.config.addressing_prefix,
        )
        if is_pass is None:  # no routing, i.e. neither PASS nor SEND
            return result
        if is_pass:
            if recipient is None or self.pending_message is None:
                # Just PASS, no recipient
                # This means pass on self.pending_message to the next responder
                # in the default sequence of responders.
                # So leave result intact since we handle "PASS" in step()
                return result
            # set recipient in self.pending_message
            self.pending_message.metadata.recipient = recipient
            # clear out recipient, replace with just PASS
            result.content = result.content.replace(
                f"{PASS_TO}:{recipient}", PASS
            ).strip()
            return result
        elif recipient is not None:
            # we are sending non-empty content to non-null recipient
            # clean up result.content, set metadata.recipient and return
            result.content = content or ""
            result.metadata.recipient = recipient
            return result
        else:
            return result

    async def response_async(
        self,
        e: Responder,
        turns: int = -1,
    ) -> Optional[ChatDocument]:
        """
        Get response to `self.pending_message` from a responder.
        If response is __valid__ (i.e. it ends the current turn of seeking
        responses):
            -then return the response as a ChatDocument object,
            -otherwise return None.
        Args:
            e (Responder): responder to get response from.
            turns (int): number of turns to run the task for.
                Default is -1, which means run until task is done.

        Returns:
            Optional[ChatDocument]: response to `self.pending_message` from entity if
            valid, None otherwise
        """
        if isinstance(e, Task):
            actual_turns = e.turns if e.turns > 0 else turns
            e.agent.callbacks.set_parent_agent(self.agent)
            pending_tools = self.agent.try_get_tool_messages(self.pending_message)
            # TODO disable this
            if (
                len(pending_tools) > 1
                and len(self.agent.oai_tool_calls) > 1
                and not self.config.allow_subtask_multi_oai_tools
            ):
                result = self._forbid_multi_oai_tools(e)
            else:
                # e.callbacks.set_parent_agent(self.agent)
                result = await e.run_async(
                    self.pending_message,
                    turns=actual_turns,
                    caller=self,
                    max_cost=self.max_cost,
                    max_tokens=self.max_tokens,
                )
                # update result.tool_messages if any
                if isinstance(result, ChatDocument):
                    self.agent.try_get_tool_messages(result)
                if result is not None:
                    content, id2result, oai_tool_id = self.agent.process_tool_results(
                        result.content,
                        result.oai_tool_id2result,
                        (
                            self.pending_message.oai_tool_calls
                            if isinstance(self.pending_message, ChatDocument)
                            else None
                        ),
                    )
                    result.content = content
                    result.oai_tool_id2result = id2result
                    result.metadata.oai_tool_id = oai_tool_id

            result_str = (  # only used by callback to display content and possible tool
                "NONE"
                if result is None
                else "\n\n".join(str(m) for m in ChatDocument.to_LLMMessage(result))
            )
            maybe_tool = len(extract_top_level_json(result_str)) > 0
            self.callbacks.show_subtask_response(
                task=e,
                content=result_str,
                is_tool=maybe_tool,
            )
        else:
            response_fn = self._entity_responder_async_map[cast(Entity, e)]
            result = await response_fn(self.pending_message)
            # update result.tool_messages if any
            if (
                isinstance(result, ChatDocument)
                and result.metadata.sender == Entity.LLM
            ):
                self.agent.try_get_tool_messages(result)

        result_chat_doc = self.agent.to_ChatDocument(
            result,
            chat_doc=self.pending_message,
            author_entity=e if isinstance(e, Entity) else Entity.USER,
        )
        return self._process_result_routing(result_chat_doc, e)

    def result(self, status: StatusCode | None = None) -> ChatDocument | None:
        """
        Get result of task. This is the default behavior.
        Derived classes can override this.

        Note the result of a task is returned as if it is from the User entity.

        Args:
            status (StatusCode): status of the task when it ended
        Returns:
            ChatDocument: result of task
        """
        if status in [StatusCode.STALLED, StatusCode.MAX_TURNS, StatusCode.INF_LOOP]:
            # In these case we don't know (and don't want to try to guess)
            # what the task result should be, so we return None
            return None

        result_msg = self.pending_message

        content = result_msg.content if result_msg else ""
        content_any = result_msg.content_any if result_msg else None
        if DONE in content and self.config.recognize_string_signals:
            # assuming it is of the form "DONE: <content>"
            content = content.replace(DONE, "").strip()
        oai_tool_calls = result_msg.oai_tool_calls if result_msg else None
        oai_tool_id2result = result_msg.oai_tool_id2result if result_msg else None
        fun_call = result_msg.function_call if result_msg else None
        tool_messages = result_msg.tool_messages if result_msg else []
        # if there is a DoneTool or AgentDoneTool among these,
        # we extract content and tools from here, and ignore all others
        for t in tool_messages:
            if isinstance(t, FinalResultTool):
                content = ""
                content_any = None
                tool_messages = [t]  # pass it on to parent so it also quits
                break
            elif isinstance(t, (AgentDoneTool, DoneTool)):
                # there shouldn't be multiple tools like this; just take the first
                content = to_string(t.content)
                content_any = t.content
                fun_call = None
                oai_tool_calls = None
                if isinstance(t, AgentDoneTool):
                    # AgentDoneTool may have tools, unlike DoneTool
                    tool_messages = t.tools
                break
        # drop the "Done" tools since they should not be part of the task result,
        # or else they would cause the parent task to get unintentionally done!
        tool_messages = [
            t for t in tool_messages if not isinstance(t, (DoneTool, AgentDoneTool))
        ]
        block = result_msg.metadata.block if result_msg else None
        recipient = result_msg.metadata.recipient if result_msg else ""
        tool_ids = result_msg.metadata.tool_ids if result_msg else []

        # regardless of which entity actually produced the result,
        # when we return the result, we set entity to USER
        # since to the "parent" task, this result is equivalent to a response from USER
        result_doc = ChatDocument(
            content=content,
            content_any=content_any,
            oai_tool_calls=oai_tool_calls,
            oai_tool_id2result=oai_tool_id2result,
            function_call=fun_call,
            tool_messages=tool_messages,
            metadata=ChatDocMetaData(
                source=Entity.USER,
                sender=Entity.USER,
                block=block,
                status=status or (result_msg.metadata.status if result_msg else None),
                sender_name=self.name,
                recipient=recipient,
                tool_ids=tool_ids,
                parent_id=result_msg.id() if result_msg else "",
                agent_id=str(self.agent.id),
            ),
        )
        if self.pending_message is not None:
            self.pending_message.metadata.child_id = result_doc.id()

        return result_doc

    def _is_empty_message(self, msg: str | ChatDocument | None) -> bool:
        """
        Check if msg is empty or None
        Args:
            msg (str|ChatDocument|None): message to check
        Returns:
            bool: True if msg is (equivalent to) empty or None, False otherwise
        """
        # if ignoring string-based signaling, set pass_str to ""
        pass_str = PASS if self.config.recognize_string_signals else ""
        return (
            msg is None
            or (isinstance(msg, str) and msg.strip() in [pass_str, ""])
            or (
                isinstance(msg, ChatDocument)
                and msg.content.strip() in [pass_str, ""]
                and msg.function_call is None
                and msg.oai_tool_calls is None
                and msg.oai_tool_id2result is None
                and msg.tool_messages == []
            )
        )

    def _is_done_response(
        self, result: str | None | ChatDocument, responder: Responder
    ) -> bool:
        """Is the task done based on the response from the given responder?"""

        allow_done_string = self.config.recognize_string_signals
        response_says_done = result is not None and (
            (isinstance(result, str) and DONE in result and allow_done_string)
            or (
                isinstance(result, ChatDocument)
                and (
                    (DONE in result.content and allow_done_string)
                    or (
                        any(
                            isinstance(t, (DoneTool, AgentDoneTool, FinalResultTool))
                            for t in result.tool_messages
                            # this condition ensures agent had chance to handle tools
                        )
                        and responder == Entity.AGENT
                    )
                )
            )
        )
        return (
            (
                responder.value in self.done_if_response
                and not self._is_empty_message(result)
            )
            or (
                responder.value in self.done_if_no_response
                and self._is_empty_message(result)
            )
            or (not self._is_empty_message(result) and response_says_done)
        )

    def _maybe_infinite_loop(self) -> bool:
        """
        Detect possible infinite loop based on message frequencies.
        NOTE: This detects two types of loops:
        - Alternating NO_ANSWER loops, specifically of the form
        x1 NO_ANSWER x2 NO_ANSWER x3 NO_ANSWER...
        (e.g. an LLM repeatedly saying something different, and another responder
        or sub-task saying NO_ANSWER -- i.e. "DO-NOT-KNOW")

        - "exact" loops, i.e. a cycle of messages that repeats exactly, e.g.
        a r b i t r a t e r a t e r a t e r a t e ...

        [It does not detect more general "approximate" loops, where two entities are
        responding to each other potentially forever, with (slightly) different
        messages each time]

        Here is the logic for the exact-loop detection:
        Intuition: when you look at a sufficiently long sequence with an m-message
        loop, then the frequencies of these m messages will "dominate" those
        of all other messages.

        1. First find m "dominant" messages, i.e. when arranged in decreasing
            frequency order, find the m such that
                freq[m] > F * freq[m+1] and
                freq[m] > W + freq[m+1]
            where F = config.inf_loop_dominance_factor (default 1.5) and
            W = config.inf_loop_wait_factor (default 5).
            So if you plot these frequencies in decreasing order,
            you will see a big drop in the plot, from m to m+1.
            We call the freqs until m the "dominant" freqs.
        2. Say we found m such dominant messages
           If the set of last (W * m) messages are the same as the
           set of m dominant messages,  then we are likely in a loop.
        """

        max_cycle_len = self.config.inf_loop_cycle_len
        if max_cycle_len <= 0:
            # no loop detection
            return False
        wait_factor = self.config.inf_loop_wait_factor
        if sum(self.message_counter.values()) < wait_factor * max_cycle_len:
            # we haven't seen enough messages to detect a loop
            return False

        # recall there's always a dummy msg with freq = 1
        most_common_msg_counts: List[Tuple[str, int]] = (
            self.message_counter.most_common(max_cycle_len + 1)
        )
        # get the most dominant msgs, i.e. these are at least 1.5x more freq
        # than the rest
        F = self.config.inf_loop_dominance_factor
        # counts array in non-increasing order
        counts = np.array([c for _, c in most_common_msg_counts])
        # find first index where counts[i] > F * counts[i+1]
        ratios = counts[:-1] / counts[1:]
        diffs = counts[:-1] - counts[1:]
        indices = np.where((ratios > F) & (diffs > wait_factor))[0]
        m = indices[-1] if indices.size > 0 else -1
        if m < 0:
            # no dominance found, but...
            if len(most_common_msg_counts) <= max_cycle_len:
                # ...The most-common messages are at most max_cycle_len,
                # even though we looked for the most common (max_cycle_len + 1) msgs.
                # This means there are only at most max_cycle_len distinct messages,
                # which also indicates a possible loop.
                m = len(most_common_msg_counts) - 1
            else:
                # ... we have enough messages, but no dominance found,
                # so there COULD be loops longer than max_cycle_len,
                # OR there is no loop at all; we can't tell, so we return False.
                return False

        dominant_msg_counts = most_common_msg_counts[: m + 1]
        # if the SET of dominant m messages is the same as the
        # the SET of last m*w messages, (where w = config.inf_loop_wait_factor),
        # then we are likely in a loop
        dominant_msgs = set([msg for msg, _ in dominant_msg_counts])
        lookback = wait_factor * (m + 1)
        recent_msgs = set(list(self.history)[-lookback:])
        return dominant_msgs == recent_msgs

    def done(
        self, result: ChatDocument | None = None, r: Responder | None = None
    ) -> Tuple[bool, StatusCode]:
        """
        Check if task is done. This is the default behavior.
        Derived classes can override this.
        Args:
            result (ChatDocument|None): result from a responder
            r (Responder|None): responder that produced the result
                Not used here, but could be used by derived classes.
        Returns:
            bool: True if task is done, False otherwise
            StatusCode: status code indicating why task is done
        """
        if self._is_kill():
            return (True, StatusCode.KILL)
        result = result or self.pending_message

        # Check if task should be done if message contains a tool
        if self.config.done_if_tool and result is not None:
            if isinstance(result, ChatDocument) and self.agent.try_get_tool_messages(
                result, all_tools=True
            ):
                return (True, StatusCode.DONE)

        # Check done sequences
        if self._parsed_done_sequences and result is not None:
            # Get the message chain from the current result
            msg_chain = self._get_message_chain(result)

            # Use last responder if r not provided
            responder = r if r is not None else self._last_responder

            # Check each sequence
            for sequence in self._parsed_done_sequences:
                if self._matches_sequence_with_current(
                    msg_chain, sequence, result, responder
                ):
                    seq_name = sequence.name or "unnamed"
                    logger.info(f"Task {self.name} done: matched sequence '{seq_name}'")
                    return (True, StatusCode.DONE)

        allow_done_string = self.config.recognize_string_signals
        # An entity decided task is done, either via DoneTool,
        # or by explicitly saying DONE
        done_result = result is not None and (
            (
                DONE in (result.content if isinstance(result, str) else result.content)
                and allow_done_string
            )
            or any(
                isinstance(t, (DoneTool, AgentDoneTool, FinalResultTool))
                for t in result.tool_messages
            )
        )

        user_quit = (
            result is not None
            and (result.content in USER_QUIT_STRINGS or done_result)
            and result.metadata.sender == Entity.USER
        )

        if self.n_stalled_steps >= self.max_stalled_steps:
            # we are stuck, so bail to avoid infinite loop
            logger.warning(
                f"Task {self.name} stuck for {self.max_stalled_steps} steps; exiting."
            )
            return (True, StatusCode.STALLED)

        if self.max_cost > 0 and self.agent.llm is not None:
            try:
                if self.agent.llm.tot_tokens_cost()[1] > self.max_cost:
                    logger.warning(
                        f"Task {self.name} cost exceeded {self.max_cost}; exiting."
                    )
                    return (True, StatusCode.MAX_COST)
            except Exception:
                pass

        if self.max_tokens > 0 and self.agent.llm is not None:
            try:
                if self.agent.llm.tot_tokens_cost()[0] > self.max_tokens:
                    logger.warning(
                        f"Task {self.name} uses > {self.max_tokens} tokens; exiting."
                    )
                    return (True, StatusCode.MAX_TOKENS)
            except Exception:
                pass

        if self._level == 0 and self._user_can_respond() and self.only_user_quits_root:
            # for top-level task, only user can quit out
            return (user_quit, StatusCode.USER_QUIT if user_quit else StatusCode.OK)

        if self.is_done:
            return (True, StatusCode.DONE)

        final = (
            # no valid response from any entity/agent in current turn
            result is None
            or done_result
            or (  # current task is addressing message to caller task
                self.caller is not None
                and self.caller.name != ""
                and result.metadata.recipient == self.caller.name
            )
            or user_quit
        )
        return (final, StatusCode.OK)

    def valid(
        self,
        result: Optional[ChatDocument],
        r: Responder,
    ) -> bool:
        """
        Is the result from a Responder (i.e. an entity or sub-task)
        such that we can stop searching for responses in this step?
        """
        # TODO caution we should ensure that no handler method (tool) returns simply
        # an empty string (e.g when showing contents of an empty file), since that
        # would be considered an invalid response, and other responders will wrongly
        # be given a chance to respond.

        # if task would be considered done given responder r's `result`,
        # then consider the result valid.
        if result is not None and self.done(result, r)[0]:
            return True
        return (
            result is not None
            and not self._is_empty_message(result)
            # some weaker LLMs, including even GPT-4o, may say "DO-NOT-KNOW."
            # (with a punctuation at the end), so need to strip out punctuation
            and re.sub(r"[,.!?:]", "", result.content.strip()) != NO_ANSWER
        )

    def log_message(
        self,
        resp: Responder,
        msg: ChatDocument | None = None,
        mark: bool = False,
    ) -> None:
        """
        Log current pending message, and related state, for lineage/debugging purposes.

        Args:
            resp (Responder): Responder that generated the `msg`
            msg (ChatDocument, optional): Message to log. Defaults to None.
            mark (bool, optional): Whether to mark the message as the final result of
                a `task.step()` call. Defaults to False.
        """
        default_values = ChatDocLoggerFields().dict().values()
        msg_str_tsv = "\t".join(str(v) for v in default_values)
        if msg is not None:
            msg_str_tsv = msg.tsv_str()

        mark_str = "*" if mark else " "
        task_name = self.name if self.name != "" else "root"
        resp_color = "white" if mark else "red"
        resp_str = f"[{resp_color}] {resp} [/{resp_color}]"

        if msg is None:
            msg_str = f"{mark_str}({task_name}) {resp_str}"
        else:
            color = {
                Entity.LLM: "green",
                Entity.USER: "blue",
                Entity.AGENT: "red",
                Entity.SYSTEM: "magenta",
            }[msg.metadata.sender]
            f = msg.log_fields()
            tool_type = f.tool_type.rjust(6)
            tool_name = f.tool.rjust(10)
            tool_str = f"{tool_type}({tool_name})" if tool_name != "" else ""
            sender = f"[{color}]" + str(f.sender_entity).rjust(10) + f"[/{color}]"
            sender_name = f.sender_name.rjust(10)
            recipient = "=>" + str(f.recipient).rjust(10)
            block = "X " + str(f.block or "").rjust(10)
            content = f"[{color}]{f.content}[/{color}]"
            msg_str = (
                f"{mark_str}({task_name}) "
                f"{resp_str} {sender}({sender_name}) "
                f"({recipient}) ({block}) {tool_str} {content}"
            )

        if self.logger is not None:
            self.logger.log(msg_str)
        if self.tsv_logger is not None:
            resp_str = str(resp)
            self.tsv_logger.info(f"{mark_str}\t{task_name}\t{resp_str}\t{msg_str_tsv}")

    def _valid_recipient(self, recipient: str) -> bool:
        """
        Is the recipient among the list of responders?
        Args:
            recipient (str): Name of recipient
        """
        if recipient == "":
            return True
        # native responders names are USER, LLM, AGENT,
        # and the names of subtasks are from Task.name attribute
        responder_names = [self.name.lower()] + [
            r.name.lower() for r in self.responders
        ]
        return recipient.lower() in responder_names

    def _recipient_mismatch(self, e: Responder) -> bool:
        """
        Is the recipient explicitly specified and does not match responder "e" ?
        """
        # Note that recipient could be specified as an Entity or a Task name
        return (
            self.pending_message is not None
            and (recipient := self.pending_message.metadata.recipient) != ""
            and not (recipient == e)  # case insensitive for entities
            and recipient != e.name
            and recipient != self.name  # case sensitive
        )

    def _user_can_respond(self) -> bool:
        return self.interactive or (
            # regardless of self.interactive, if a msg is explicitly addressed to
            # user, then wait for user response
            self.pending_message is not None
            and self.pending_message.metadata.recipient == Entity.USER
            and not self.agent.has_tool_message_attempt(self.pending_message)
        )

    def _can_respond(self, e: Responder) -> bool:
        user_can_respond = self._user_can_respond()

        if self.pending_sender == e or (e == Entity.USER and not user_can_respond):
            # sender is same as e (an entity cannot respond to its own msg),
            # or user cannot respond
            return False

        if self.pending_message is None:
            return True
        if isinstance(e, Task) and not e.agent.can_respond(self.pending_message):
            return False

        if self._recipient_mismatch(e):
            # Cannot respond if not addressed to this entity
            return False
        return self.pending_message.metadata.block != e

    def set_color_log(self, enable: bool = True) -> None:
        """
        Flag to enable/disable color logging using rich.console.
        In some contexts, such as Colab notebooks, we may want to disable color logging
        using rich.console, since those logs show up in the cell output rather than
        in the log file. Turning off this feature will still create logs, but without
        the color formatting from rich.console
        Args:
            enable (bool): value of `self.color_log` to set to,
                which will enable/diable rich logging

        """
        self.color_log = enable

    def _parse_routing(
        self,
        msg: ChatDocument | str,
        addressing_prefix: str = "",
    ) -> Tuple[bool | None, str | None, str | None]:
        """
        Parse routing instruction if any, of the form:
        PASS:<recipient>  (pass current pending msg to recipient)
        SEND:<recipient> <content> (send content to recipient)
        @<recipient> <content> (send content to recipient)
        Args:
            msg (ChatDocument|str|None): message to parse
            addressing_prefix (str): prefix to address other agents or entities,
                 (e.g. "@". See documentation of `TaskConfig` for details).
        Returns:
            Tuple[bool|None, str|None, str|None]:
                bool: true=PASS, false=SEND, or None if neither
                str: recipient, or None
                str: content to send, or None
        """
        # handle routing instruction-strings in result if any,
        # such as PASS, PASS_TO, or SEND

        msg_str = msg.content if isinstance(msg, ChatDocument) else msg
        if (
            self.agent.has_tool_message_attempt(msg)
            and not msg_str.startswith(PASS)
            and not msg_str.startswith(PASS_TO)
            and not msg_str.startswith(SEND_TO)
        ):
            # if there's an attempted tool-call, we ignore any routing strings,
            # unless they are at the start of the msg
            return None, None, None

        content = msg.content if isinstance(msg, ChatDocument) else msg
        content = content.strip()
        if PASS in content and PASS_TO not in content:
            return True, None, None
        if PASS_TO in content and content.split(":")[1] != "":
            return True, content.split(":")[1], None
        if (
            SEND_TO in content
            and (addressee_content := parse_addressed_message(content, SEND_TO))[0]
            is not None
        ):
            # Note this will discard any portion of content BEFORE SEND_TO.
            # TODO maybe make this configurable.
            (addressee, content_to_send) = addressee_content
            # if no content then treat same as PASS_TO
            if content_to_send == "":
                return True, addressee, None
            else:
                return False, addressee, content_to_send
        if (
            addressing_prefix != ""
            and addressing_prefix in content
            and (
                addressee_content := parse_addressed_message(content, addressing_prefix)
            )[0]
            is not None
        ):
            (addressee, content_to_send) = addressee_content
            # if no content then treat same as PASS_TO
            if content_to_send == "":
                return True, addressee, None
            else:
                return False, addressee, content_to_send

        return None, None, None

    def _classify_event(
        self, msg: ChatDocument | None, responder: Responder | None
    ) -> Optional[AgentEvent]:
        """Classify a message into an AgentEvent for sequence matching."""
        if msg is None:
            return AgentEvent(event_type=EventType.NO_RESPONSE)

        # Determine the event type based on responder and message content
        event_type = EventType.NO_RESPONSE
        tool_name = None

        # Check if there are tool messages
        tool_messages = self.agent.try_get_tool_messages(msg, all_tools=True)
        if tool_messages:
            event_type = EventType.TOOL
            if len(tool_messages) == 1:
                tool_name = tool_messages[0].request

        # Check responder type
        if responder == Entity.LLM and not tool_messages:
            event_type = EventType.LLM_RESPONSE
        elif responder == Entity.AGENT:
            event_type = EventType.AGENT_RESPONSE
        elif responder == Entity.USER:
            event_type = EventType.USER_RESPONSE
        elif isinstance(responder, Task):
            # For sub-task responses, check the sender in metadata
            if msg.metadata.sender == Entity.LLM:
                event_type = EventType.LLM_RESPONSE
            elif msg.metadata.sender == Entity.AGENT:
                event_type = EventType.AGENT_RESPONSE
            else:
                event_type = EventType.USER_RESPONSE

        # Get sender name
        sender_name = None
        if isinstance(responder, Entity):
            sender_name = responder.value
        elif isinstance(responder, Task):
            sender_name = responder.name

        return AgentEvent(
            event_type=event_type,
            tool_name=tool_name,
            sender=sender_name,
        )

    def _get_message_chain(
        self, msg: ChatDocument | None, max_depth: Optional[int] = None
    ) -> List[ChatDocument]:
        """Get the chain of messages from response sequence."""
        if max_depth is None:
            # Get max depth needed from all sequences
            max_depth = 50  # default fallback
            if self._parsed_done_sequences:
                max_depth = max(len(seq.events) for seq in self._parsed_done_sequences)

        # Simply return the last max_depth elements from response_sequence
        return self.response_sequence[-max_depth:]

    def _matches_event(self, actual: AgentEvent, expected: AgentEvent) -> bool:
        """Check if an actual event matches an expected event pattern."""
        # Check event type
        if expected.event_type == EventType.SPECIFIC_TOOL:
            if actual.event_type != EventType.TOOL:
                return False
            if expected.tool_name and actual.tool_name != expected.tool_name:
                return False
        elif actual.event_type != expected.event_type:
            return False

        # Check sender if specified
        if expected.sender and actual.sender != expected.sender:
            return False

        # TODO: Add content pattern matching for CONTENT_MATCH type

        return True

    def _matches_sequence(
        self, msg_chain: List[ChatDocument], sequence: DoneSequence
    ) -> bool:
        """Check if a message chain matches a done sequence.

        We traverse the message chain and try to match the sequence events.
        The events don't have to be consecutive in the chain.
        """
        if not sequence.events:
            return False

        # Convert messages to events
        events = []
        for i, msg in enumerate(msg_chain):
            # Determine responder from metadata or by checking previous message
            responder = None
            if msg.metadata.sender:
                responder = msg.metadata.sender
            elif msg.metadata.sender_name:
                # Could be a task name - keep as None for now since we can't resolve
                # the actual Task object from just the name
                responder = None

            event = self._classify_event(msg, responder)
            if event:
                events.append(event)

        # Try to match the sequence
        seq_idx = 0
        for event in events:
            if seq_idx >= len(sequence.events):
                break

            expected = sequence.events[seq_idx]
            if self._matches_event(event, expected):
                seq_idx += 1

        # Check if we matched the entire sequence
        return seq_idx == len(sequence.events)

    def _matches_sequence_with_current(
        self,
        msg_chain: List[ChatDocument],
        sequence: DoneSequence,
        current_msg: ChatDocument,
        current_responder: Optional[Responder],
    ) -> bool:
        """Check if the message chain plus current message matches a done sequence.

        Process messages in reverse order (newest first) and match against
        the sequence events in reverse order.
        """
        # Add current message to chain if not already there
        if not msg_chain or msg_chain[-1].id() != current_msg.id():
            msg_chain = msg_chain + [current_msg]

        # If we don't have enough messages for the sequence, can't match
        if len(msg_chain) < len(sequence.events):
            return False

        # Process in reverse order - start from the end of both lists
        seq_idx = len(sequence.events) - 1
        msg_idx = len(msg_chain) - 1

        while seq_idx >= 0 and msg_idx >= 0:
            msg = msg_chain[msg_idx]
            expected = sequence.events[seq_idx]

            # Determine responder for this message
            if msg_idx == len(msg_chain) - 1 and current_responder is not None:
                # For the last message, use the current responder
                responder = current_responder
            else:
                # For other messages, determine from metadata
                responder = msg.metadata.sender

            # Classify the event
            event = self._classify_event(msg, responder)
            if not event:
                return False

            # Check if it matches
            matched = False

            # Special handling for CONTENT_MATCH
            if (
                expected.event_type == EventType.CONTENT_MATCH
                and expected.content_pattern
            ):
                if re.search(expected.content_pattern, msg.content, re.IGNORECASE):
                    matched = True
            elif self._matches_event(event, expected):
                matched = True

            if not matched:
                # Strict matching - no skipping allowed
                return False
            else:
                # Matched! Move to next expected event
                seq_idx -= 1
                msg_idx -= 1

        # We matched if we've matched all events in the sequence
        return seq_idx < 0
</file>

<file path="langroid/language_models/openai_gpt.py">
import hashlib
import json
import logging
import os
import sys
import warnings
from collections import defaultdict
from functools import cache
from itertools import chain
from typing import (
    Any,
    Callable,
    Dict,
    List,
    Optional,
    Tuple,
    Type,
    Union,
    no_type_check,
)

import openai
from cerebras.cloud.sdk import AsyncCerebras, Cerebras
from groq import AsyncGroq, Groq
from httpx import Timeout
from openai import AsyncOpenAI, OpenAI
from rich import print
from rich.markup import escape

from langroid.cachedb.base import CacheDB
from langroid.cachedb.redis_cachedb import RedisCache, RedisCacheConfig
from langroid.exceptions import LangroidImportError
from langroid.language_models.base import (
    LanguageModel,
    LLMConfig,
    LLMFunctionCall,
    LLMFunctionSpec,
    LLMMessage,
    LLMResponse,
    LLMTokenUsage,
    OpenAIJsonSchemaSpec,
    OpenAIToolCall,
    OpenAIToolSpec,
    Role,
    StreamEventType,
    ToolChoiceTypes,
)
from langroid.language_models.client_cache import (
    get_async_cerebras_client,
    get_async_groq_client,
    get_async_openai_client,
    get_cerebras_client,
    get_groq_client,
    get_openai_client,
)
from langroid.language_models.config import HFPromptFormatterConfig
from langroid.language_models.model_info import (
    DeepSeekModel,
    OpenAI_API_ParamInfo,
)
from langroid.language_models.model_info import (
    OpenAIChatModel as OpenAIChatModel,
)
from langroid.language_models.model_info import (
    OpenAICompletionModel as OpenAICompletionModel,
)
from langroid.language_models.prompt_formatter.hf_formatter import (
    HFFormatter,
    find_hf_formatter,
)
from langroid.language_models.provider_params import (
    DUMMY_API_KEY,
    LangDBParams,
    PortkeyParams,
)
from langroid.language_models.utils import (
    async_retry_with_exponential_backoff,
    retry_with_exponential_backoff,
)
from langroid.parsing.parse_json import parse_imperfect_json
from langroid.pydantic_v1 import BaseModel, BaseSettings
from langroid.utils.configuration import settings
from langroid.utils.constants import Colors
from langroid.utils.system import friendly_error

logging.getLogger("openai").setLevel(logging.ERROR)

if "OLLAMA_HOST" in os.environ:
    OLLAMA_BASE_URL = f"http://{os.environ['OLLAMA_HOST']}/v1"
else:
    OLLAMA_BASE_URL = "http://localhost:11434/v1"

DEEPSEEK_BASE_URL = "https://api.deepseek.com/v1"
OPENROUTER_BASE_URL = "https://openrouter.ai/api/v1"
GEMINI_BASE_URL = "https://generativelanguage.googleapis.com/v1beta/openai"
GLHF_BASE_URL = "https://glhf.chat/api/openai/v1"
OLLAMA_API_KEY = "ollama"

VLLM_API_KEY = os.environ.get("VLLM_API_KEY", DUMMY_API_KEY)
LLAMACPP_API_KEY = os.environ.get("LLAMA_API_KEY", DUMMY_API_KEY)


openai_chat_model_pref_list = [
    OpenAIChatModel.GPT4o,
    OpenAIChatModel.GPT4_1_NANO,
    OpenAIChatModel.GPT4_1_MINI,
    OpenAIChatModel.GPT4_1,
    OpenAIChatModel.GPT4o_MINI,
    OpenAIChatModel.O1_MINI,
    OpenAIChatModel.O3_MINI,
    OpenAIChatModel.O1,
]

openai_completion_model_pref_list = [
    OpenAICompletionModel.DAVINCI,
    OpenAICompletionModel.BABBAGE,
]


if "OPENAI_API_KEY" in os.environ:
    try:
        available_models = set(map(lambda m: m.id, OpenAI().models.list()))
    except openai.AuthenticationError as e:
        if settings.debug:
            logging.warning(
                f"""
            OpenAI Authentication Error: {e}.
            ---
            If you intended to use an OpenAI Model, you should fix this,
            otherwise you can ignore this warning.
            """
            )
        available_models = set()
    except Exception as e:
        if settings.debug:
            logging.warning(
                f"""
            Error while fetching available OpenAI models: {e}.
            Proceeding with an empty set of available models.
            """
            )
        available_models = set()
else:
    available_models = set()

default_openai_chat_model = next(
    chain(
        filter(
            lambda m: m.value in available_models,
            openai_chat_model_pref_list,
        ),
        [OpenAIChatModel.GPT4o],
    )
)
default_openai_completion_model = next(
    chain(
        filter(
            lambda m: m.value in available_models,
            openai_completion_model_pref_list,
        ),
        [OpenAICompletionModel.DAVINCI],
    )
)


class AccessWarning(Warning):
    pass


@cache
def gpt_3_5_warning() -> None:
    warnings.warn(
        f"""
        {OpenAIChatModel.GPT4o} is not available,
        falling back to {OpenAIChatModel.GPT3_5_TURBO}.
        Examples may not work properly and unexpected behavior may occur.
        Adjustments to prompts may be necessary.
        """,
        AccessWarning,
    )


@cache
def parallel_strict_warning() -> None:
    logging.warning(
        "OpenAI tool calling in strict mode is not supported when "
        "parallel tool calls are made. Disable parallel tool calling "
        "to ensure correct behavior."
    )


def noop() -> None:
    """Does nothing."""
    return None


class OpenAICallParams(BaseModel):
    """
    Various params that can be sent to an OpenAI API chat-completion call.
    When specified, any param here overrides the one with same name in the
    OpenAIGPTConfig.
    See OpenAI API Reference for details on the params:
    https://platform.openai.com/docs/api-reference/chat
    """

    max_tokens: int | None = None
    temperature: float | None = None
    frequency_penalty: float | None = None  # between -2 and 2
    presence_penalty: float | None = None  # between -2 and 2
    response_format: Dict[str, str] | None = None
    logit_bias: Dict[int, float] | None = None  # token_id -> bias
    logprobs: bool | None = None
    top_p: float | None = None
    reasoning_effort: str | None = None  # or "low" or "high" or "medium"
    top_logprobs: int | None = None  # if int, requires logprobs=True
    n: int = 1  # how many completions to generate (n > 1 is NOT handled now)
    stop: str | List[str] | None = None  # (list of) stop sequence(s)
    seed: int | None = None
    user: str | None = None  # user id for tracking
    extra_body: Dict[str, Any] | None = None  # additional params for API request body

    def to_dict_exclude_none(self) -> Dict[str, Any]:
        return {k: v for k, v in self.dict().items() if v is not None}


class LiteLLMProxyConfig(BaseSettings):
    """Configuration for LiteLLM proxy connection."""

    api_key: str = ""  # read from env var LITELLM_API_KEY if set
    api_base: str = ""  # read from env var LITELLM_API_BASE if set

    class Config:
        env_prefix = "LITELLM_"


class OpenAIGPTConfig(LLMConfig):
    """
    Class for any LLM with an OpenAI-like API: besides the OpenAI models this includes:
    (a) locally-served models behind an OpenAI-compatible API
    (b) non-local models, using a proxy adaptor lib like litellm that provides
        an OpenAI-compatible API.
    (We could rename this class to OpenAILikeConfig, but we keep it as-is for now)

    Important Note:
    Due to the `env_prefix = "OPENAI_"` defined below,
    all of the fields below can be set AND OVERRIDDEN via env vars,
    # by upper-casing the name and prefixing with OPENAI_, e.g.
    # OPENAI_MAX_OUTPUT_TOKENS=1000.
    # If any of these is defined in this way in the environment
    # (either via explicit setenv or export or via .env file + load_dotenv()),
    # the environment variable takes precedence over the value in the config.
    """

    type: str = "openai"
    api_key: str = DUMMY_API_KEY
    organization: str = ""
    api_base: str | None = None  # used for local or other non-OpenAI models
    litellm: bool = False  # use litellm api?
    litellm_proxy: LiteLLMProxyConfig = LiteLLMProxyConfig()
    ollama: bool = False  # use ollama's OpenAI-compatible endpoint?
    min_output_tokens: int = 1
    use_chat_for_completion = True  # do not change this, for OpenAI models!
    timeout: int = 20
    temperature: float = 0.2
    seed: int | None = 42
    params: OpenAICallParams | None = None
    use_cached_client: bool = (
        True  # Whether to reuse cached clients (prevents resource exhaustion)
    )
    # these can be any model name that is served at an OpenAI-compatible API end point
    chat_model: str = default_openai_chat_model
    chat_model_orig: str = default_openai_chat_model
    completion_model: str = default_openai_completion_model
    run_on_first_use: Callable[[], None] = noop
    parallel_tool_calls: Optional[bool] = None
    # Supports constrained decoding which enforces that the output of the LLM
    # adheres to a JSON schema
    supports_json_schema: Optional[bool] = None
    # Supports strict decoding for the generation of tool calls with
    # the OpenAI Tools API; this ensures that the generated tools
    # adhere to the provided schema.
    supports_strict_tools: Optional[bool] = None
    # a string that roughly matches a HuggingFace chat_template,
    # e.g. "mistral-instruct-v0.2 (a fuzzy search is done to find the closest match)
    formatter: str | None = None
    hf_formatter: HFFormatter | None = None
    langdb_params: LangDBParams = LangDBParams()
    portkey_params: PortkeyParams = PortkeyParams()
    headers: Dict[str, str] = {}

    def __init__(self, **kwargs) -> None:  # type: ignore
        local_model = "api_base" in kwargs and kwargs["api_base"] is not None

        chat_model = kwargs.get("chat_model", "")
        local_prefixes = ["local/", "litellm/", "ollama/", "vllm/", "llamacpp/"]
        if any(chat_model.startswith(prefix) for prefix in local_prefixes):
            local_model = True

        warn_gpt_3_5 = (
            "chat_model" not in kwargs.keys()
            and not local_model
            and default_openai_chat_model == OpenAIChatModel.GPT3_5_TURBO
        )

        if warn_gpt_3_5:
            existing_hook = kwargs.get("run_on_first_use", noop)

            def with_warning() -> None:
                existing_hook()
                gpt_3_5_warning()

            kwargs["run_on_first_use"] = with_warning

        super().__init__(**kwargs)

    class Config:
        env_prefix = "OPENAI_"

    def _validate_litellm(self) -> None:
        """
        When using liteLLM, validate whether all env vars required by the model
        have been set.
        """
        if not self.litellm:
            return
        try:
            import litellm
        except ImportError:
            raise LangroidImportError("litellm", "litellm")
        litellm.telemetry = False
        litellm.drop_params = True  # drop un-supported params without crashing
        # modify params to fit the model expectations, and avoid crashing
        # (e.g. anthropic doesn't like first msg to be system msg)
        litellm.modify_params = True
        self.seed = None  # some local mdls don't support seed
        if self.api_key == DUMMY_API_KEY:
            keys_dict = litellm.utils.validate_environment(self.chat_model)
            missing_keys = keys_dict.get("missing_keys", [])
            if len(missing_keys) > 0:
                raise ValueError(
                    f"""
                    Missing environment variables for litellm-proxied model:
                    {missing_keys}
                    """
                )

    @classmethod
    def create(cls, prefix: str) -> Type["OpenAIGPTConfig"]:
        """Create a config class whose params can be set via a desired
        prefix from the .env file or env vars.
        E.g., using
        ```python
        OllamaConfig = OpenAIGPTConfig.create("ollama")
        ollama_config = OllamaConfig()
        ```
        you can have a group of params prefixed by "OLLAMA_", to be used
        with models served via `ollama`.
        This way, you can maintain several setting-groups in your .env file,
        one per model type.
        """

        class DynamicConfig(OpenAIGPTConfig):
            pass

        DynamicConfig.Config.env_prefix = prefix.upper() + "_"

        return DynamicConfig


class OpenAIResponse(BaseModel):
    """OpenAI response model, either completion or chat."""

    choices: List[Dict]  # type: ignore
    usage: Dict  # type: ignore


def litellm_logging_fn(model_call_dict: Dict[str, Any]) -> None:
    """Logging function for litellm"""
    try:
        api_input_dict = model_call_dict.get("additional_args", {}).get(
            "complete_input_dict"
        )
        if api_input_dict is not None:
            text = escape(json.dumps(api_input_dict, indent=2))
            print(
                f"[grey37]LITELLM: {text}[/grey37]",
            )
    except Exception:
        pass


# Define a class for OpenAI GPT models that extends the base class
class OpenAIGPT(LanguageModel):
    """
    Class for OpenAI LLMs
    """

    client: OpenAI | Groq | Cerebras | None
    async_client: AsyncOpenAI | AsyncGroq | AsyncCerebras | None

    def __init__(self, config: OpenAIGPTConfig = OpenAIGPTConfig()):
        """
        Args:
            config: configuration for openai-gpt model
        """
        # copy the config to avoid modifying the original
        config = config.copy()
        super().__init__(config)
        self.config: OpenAIGPTConfig = config
        # save original model name such as `provider/model` before
        # we strip out the `provider` - we retain the original in
        # case some params are specific to a provider.
        self.chat_model_orig = self.config.chat_model

        # Run the first time the model is used
        self.run_on_first_use = cache(self.config.run_on_first_use)

        # global override of chat_model,
        # to allow quick testing with other models
        if settings.chat_model != "":
            self.config.chat_model = settings.chat_model
            self.chat_model_orig = settings.chat_model
            self.config.completion_model = settings.chat_model

        if len(parts := self.config.chat_model.split("//")) > 1:
            # there is a formatter specified, e.g.
            # "litellm/ollama/mistral//hf" or
            # "local/localhost:8000/v1//mistral-instruct-v0.2"
            formatter = parts[1]
            self.config.chat_model = parts[0]
            if formatter == "hf":
                # e.g. "litellm/ollama/mistral//hf" -> "litellm/ollama/mistral"
                formatter = find_hf_formatter(self.config.chat_model)
                if formatter != "":
                    # e.g. "mistral"
                    self.config.formatter = formatter
                    logging.warning(
                        f"""
                        Using completions (not chat) endpoint with HuggingFace
                        chat_template for {formatter} for
                        model {self.config.chat_model}
                        """
                    )
            else:
                # e.g. "local/localhost:8000/v1//mistral-instruct-v0.2"
                self.config.formatter = formatter

        if self.config.formatter is not None:
            self.config.hf_formatter = HFFormatter(
                HFPromptFormatterConfig(model_name=self.config.formatter)
            )

        self.supports_json_schema: bool = self.config.supports_json_schema or False
        self.supports_strict_tools: bool = self.config.supports_strict_tools or False

        OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", DUMMY_API_KEY)
        self.api_key = config.api_key

        # if model name starts with "litellm",
        # set the actual model name by stripping the "litellm/" prefix
        # and set the litellm flag to True
        if self.config.chat_model.startswith("litellm/") or self.config.litellm:
            # e.g. litellm/ollama/mistral
            self.config.litellm = True
            self.api_base = self.config.api_base
            if self.config.chat_model.startswith("litellm/"):
                # strip the "litellm/" prefix
                # e.g. litellm/ollama/llama2 => ollama/llama2
                self.config.chat_model = self.config.chat_model.split("/", 1)[1]
        elif self.config.chat_model.startswith("local/"):
            # expect this to be of the form "local/localhost:8000/v1",
            # depending on how the model is launched locally.
            # In this case the model served locally behind an OpenAI-compatible API
            # so we can just use `openai.*` methods directly,
            # and don't need a adaptor library like litellm
            self.config.litellm = False
            self.config.seed = None  # some models raise an error when seed is set
            # Extract the api_base from the model name after the "local/" prefix
            self.api_base = self.config.chat_model.split("/", 1)[1]
            if not self.api_base.startswith("http"):
                self.api_base = "http://" + self.api_base
        elif self.config.chat_model.startswith("ollama/"):
            self.config.ollama = True

            # use api_base from config if set, else fall back on OLLAMA_BASE_URL
            self.api_base = self.config.api_base or OLLAMA_BASE_URL
            if self.api_key == OPENAI_API_KEY:
                self.api_key = OLLAMA_API_KEY
            self.config.chat_model = self.config.chat_model.replace("ollama/", "")
        elif self.config.chat_model.startswith("vllm/"):
            self.supports_json_schema = True
            self.config.chat_model = self.config.chat_model.replace("vllm/", "")
            if self.api_key == OPENAI_API_KEY:
                self.api_key = os.environ.get("VLLM_API_KEY", DUMMY_API_KEY)
            self.api_base = self.config.api_base or "http://localhost:8000/v1"
            if not self.api_base.startswith("http"):
                self.api_base = "http://" + self.api_base
            if not self.api_base.endswith("/v1"):
                self.api_base = self.api_base + "/v1"
        elif self.config.chat_model.startswith("llamacpp/"):
            self.supports_json_schema = True
            self.api_base = self.config.chat_model.split("/", 1)[1]
            if not self.api_base.startswith("http"):
                self.api_base = "http://" + self.api_base
            if self.api_key == OPENAI_API_KEY:
                self.api_key = os.environ.get("LLAMA_API_KEY", DUMMY_API_KEY)
        else:
            self.api_base = self.config.api_base
            # If api_base is unset we use OpenAI's endpoint, which supports
            # these features (with JSON schema restricted to a limited set of models)
            self.supports_strict_tools = self.api_base is None
            self.supports_json_schema = (
                self.api_base is None and self.info().has_structured_output
            )

        if settings.chat_model != "":
            # if we're overriding chat model globally, set completion model to same
            self.config.completion_model = self.config.chat_model

        if self.config.formatter is not None:
            # we want to format chats -> completions using this specific formatter
            self.config.use_completion_for_chat = True
            self.config.completion_model = self.config.chat_model

        if self.config.use_completion_for_chat:
            self.config.use_chat_for_completion = False

        self.is_groq = self.config.chat_model.startswith("groq/")
        self.is_cerebras = self.config.chat_model.startswith("cerebras/")
        self.is_gemini = self.is_gemini_model()
        self.is_deepseek = self.is_deepseek_model()
        self.is_glhf = self.config.chat_model.startswith("glhf/")
        self.is_openrouter = self.config.chat_model.startswith("openrouter/")
        self.is_langdb = self.config.chat_model.startswith("langdb/")
        self.is_portkey = self.config.chat_model.startswith("portkey/")
        self.is_litellm_proxy = self.config.chat_model.startswith("litellm-proxy/")

        if self.is_groq:
            # use groq-specific client
            self.config.chat_model = self.config.chat_model.replace("groq/", "")
            if self.api_key == OPENAI_API_KEY:
                self.api_key = os.getenv("GROQ_API_KEY", DUMMY_API_KEY)
            if self.config.use_cached_client:
                self.client = get_groq_client(api_key=self.api_key)
                self.async_client = get_async_groq_client(api_key=self.api_key)
            else:
                # Create new clients without caching
                self.client = Groq(api_key=self.api_key)
                self.async_client = AsyncGroq(api_key=self.api_key)
        elif self.is_cerebras:
            # use cerebras-specific client
            self.config.chat_model = self.config.chat_model.replace("cerebras/", "")
            if self.api_key == OPENAI_API_KEY:
                self.api_key = os.getenv("CEREBRAS_API_KEY", DUMMY_API_KEY)
            if self.config.use_cached_client:
                self.client = get_cerebras_client(api_key=self.api_key)
                # TODO there is not async client, so should we do anything here?
                self.async_client = get_async_cerebras_client(api_key=self.api_key)
            else:
                # Create new clients without caching
                self.client = Cerebras(api_key=self.api_key)
                self.async_client = AsyncCerebras(api_key=self.api_key)
        else:
            # in these cases, there's no specific client: OpenAI python client suffices
            if self.is_litellm_proxy:
                self.config.chat_model = self.config.chat_model.replace(
                    "litellm-proxy/", ""
                )
                if self.api_key == OPENAI_API_KEY:
                    self.api_key = self.config.litellm_proxy.api_key or self.api_key
                self.api_base = self.config.litellm_proxy.api_base or self.api_base
            elif self.is_gemini:
                self.config.chat_model = self.config.chat_model.replace("gemini/", "")
                if self.api_key == OPENAI_API_KEY:
                    self.api_key = os.getenv("GEMINI_API_KEY", DUMMY_API_KEY)
                self.api_base = GEMINI_BASE_URL
            elif self.is_glhf:
                self.config.chat_model = self.config.chat_model.replace("glhf/", "")
                if self.api_key == OPENAI_API_KEY:
                    self.api_key = os.getenv("GLHF_API_KEY", DUMMY_API_KEY)
                self.api_base = GLHF_BASE_URL
            elif self.is_openrouter:
                self.config.chat_model = self.config.chat_model.replace(
                    "openrouter/", ""
                )
                if self.api_key == OPENAI_API_KEY:
                    self.api_key = os.getenv("OPENROUTER_API_KEY", DUMMY_API_KEY)
                self.api_base = OPENROUTER_BASE_URL
            elif self.is_deepseek:
                self.config.chat_model = self.config.chat_model.replace("deepseek/", "")
                self.api_base = DEEPSEEK_BASE_URL
                if self.api_key == OPENAI_API_KEY:
                    self.api_key = os.getenv("DEEPSEEK_API_KEY", DUMMY_API_KEY)
            elif self.is_langdb:
                self.config.chat_model = self.config.chat_model.replace("langdb/", "")
                self.api_base = self.config.langdb_params.base_url
                project_id = self.config.langdb_params.project_id
                if project_id:
                    self.api_base += "/" + project_id + "/v1"
                if self.api_key == OPENAI_API_KEY:
                    self.api_key = self.config.langdb_params.api_key or DUMMY_API_KEY

                if self.config.langdb_params:
                    params = self.config.langdb_params
                    if params.project_id:
                        self.config.headers["x-project-id"] = params.project_id
                    if params.label:
                        self.config.headers["x-label"] = params.label
                    if params.run_id:
                        self.config.headers["x-run-id"] = params.run_id
                    if params.thread_id:
                        self.config.headers["x-thread-id"] = params.thread_id
            elif self.is_portkey:
                # Parse the model string and extract provider/model
                provider, model = self.config.portkey_params.parse_model_string(
                    self.config.chat_model
                )
                self.config.chat_model = model
                if provider:
                    self.config.portkey_params.provider = provider

                # Set Portkey base URL
                self.api_base = self.config.portkey_params.base_url + "/v1"

                # Set API key - use provider's API key from env if available
                if self.api_key == OPENAI_API_KEY:
                    self.api_key = self.config.portkey_params.get_provider_api_key(
                        self.config.portkey_params.provider, DUMMY_API_KEY
                    )

                # Add Portkey-specific headers
                self.config.headers.update(self.config.portkey_params.get_headers())

            if self.config.use_cached_client:
                self.client = get_openai_client(
                    api_key=self.api_key,
                    base_url=self.api_base,
                    organization=self.config.organization,
                    timeout=Timeout(self.config.timeout),
                    default_headers=self.config.headers,
                )
                self.async_client = get_async_openai_client(
                    api_key=self.api_key,
                    base_url=self.api_base,
                    organization=self.config.organization,
                    timeout=Timeout(self.config.timeout),
                    default_headers=self.config.headers,
                )
            else:
                # Create new clients without caching
                self.client = OpenAI(
                    api_key=self.api_key,
                    base_url=self.api_base,
                    organization=self.config.organization,
                    timeout=Timeout(self.config.timeout),
                    default_headers=self.config.headers,
                )
                self.async_client = AsyncOpenAI(
                    api_key=self.api_key,
                    base_url=self.api_base,
                    organization=self.config.organization,
                    timeout=Timeout(self.config.timeout),
                    default_headers=self.config.headers,
                )

        self.cache: CacheDB | None = None
        use_cache = self.config.cache_config is not None
        if "redis" in settings.cache_type and use_cache:
            if config.cache_config is None or not isinstance(
                config.cache_config,
                RedisCacheConfig,
            ):
                # switch to fresh redis config if needed
                config.cache_config = RedisCacheConfig(
                    fake="fake" in settings.cache_type
                )
            if "fake" in settings.cache_type:
                # force use of fake redis if global cache_type is "fakeredis"
                config.cache_config.fake = True
            self.cache = RedisCache(config.cache_config)
        elif settings.cache_type != "none" and use_cache:
            raise ValueError(
                f"Invalid cache type {settings.cache_type}. "
                "Valid types are redis, fakeredis, none"
            )

        self.config._validate_litellm()

    def _openai_api_call_params(self, kwargs: Dict[str, Any]) -> Dict[str, Any]:
        """
        Prep the params to be sent to the OpenAI API
        (or any OpenAI-compatible API, e.g. from Ooba or LmStudio)
        for chat-completion.

        Order of priority:
        - (1) Params (mainly max_tokens) in the chat/achat/generate/agenerate call
                (these are passed in via kwargs)
        - (2) Params in OpenAIGPTConfig.params (of class OpenAICallParams)
        - (3) Specific Params in OpenAIGPTConfig (just temperature for now)
        """
        params = dict(
            temperature=self.config.temperature,
        )
        if self.config.params is not None:
            params.update(self.config.params.to_dict_exclude_none())
        params.update(kwargs)
        return params

    def is_openai_chat_model(self) -> bool:
        openai_chat_models = [e.value for e in OpenAIChatModel]
        return self.config.chat_model in openai_chat_models

    def is_openai_completion_model(self) -> bool:
        openai_completion_models = [e.value for e in OpenAICompletionModel]
        return self.config.completion_model in openai_completion_models

    def is_gemini_model(self) -> bool:
        """Are we using the gemini OpenAI-compatible API?"""
        return self.chat_model_orig.startswith("gemini/")

    def is_deepseek_model(self) -> bool:
        deepseek_models = [e.value for e in DeepSeekModel]
        return (
            self.chat_model_orig in deepseek_models
            or self.chat_model_orig.startswith("deepseek/")
        )

    def unsupported_params(self) -> List[str]:
        """
        List of params that are not supported by the current model
        """
        unsupported = set(self.info().unsupported_params)
        for param, model_list in OpenAI_API_ParamInfo().params.items():
            if (
                self.config.chat_model not in model_list
                and self.chat_model_orig not in model_list
            ):
                unsupported.add(param)
        return list(unsupported)

    def rename_params(self) -> Dict[str, str]:
        """
        Map of param name -> new name for specific models.
        Currently main troublemaker is o1* series.
        """
        return self.info().rename_params

    def chat_context_length(self) -> int:
        """
        Context-length for chat-completion models/endpoints.
        Get it from the config if explicitly given,
         otherwise use model_info based on model name, and fall back to
         generic model_info if there's no match.
        """
        return self.config.chat_context_length or self.info().context_length

    def completion_context_length(self) -> int:
        """
        Context-length for completion models/endpoints.
        Get it from the config if explicitly given,
         otherwise use model_info based on model name, and fall back to
         generic model_info if there's no match.
        """
        return (
            self.config.completion_context_length
            or self.completion_info().context_length
        )

    def chat_cost(self) -> Tuple[float, float, float]:
        """
        (Prompt, Cached, Generation) cost per 1000 tokens, for chat-completion
        models/endpoints.
        Get it from the dict, otherwise fail-over to general method
        """
        info = self.info()
        cached_cost_per_million = info.cached_cost_per_million
        if not cached_cost_per_million:
            cached_cost_per_million = info.input_cost_per_million
        return (
            info.input_cost_per_million / 1000,
            cached_cost_per_million / 1000,
            info.output_cost_per_million / 1000,
        )

    def set_stream(self, stream: bool) -> bool:
        """Enable or disable streaming output from API.
        Args:
            stream: enable streaming output from API
        Returns: previous value of stream
        """
        tmp = self.config.stream
        self.config.stream = stream
        return tmp

    def get_stream(self) -> bool:
        """Get streaming status."""
        return self.config.stream and settings.stream and self.info().allows_streaming

    @no_type_check
    def _process_stream_event(
        self,
        event,
        chat: bool = False,
        tool_deltas: List[Dict[str, Any]] = [],
        has_function: bool = False,
        completion: str = "",
        reasoning: str = "",
        function_args: str = "",
        function_name: str = "",
    ) -> Tuple[bool, bool, str, str, Dict[str, int]]:
        """Process state vars while processing a streaming API response.
            Returns a tuple consisting of:
        - is_break: whether to break out of the loop
        - has_function: whether the response contains a function_call
        - function_name: name of the function
        - function_args: args of the function
        - completion: completion text
        - reasoning: reasoning text
        - usage: usage dict
        """
        # convert event obj (of type ChatCompletionChunk) to dict so rest of code,
        # which expects dicts, works as it did before switching to openai v1.x
        if not isinstance(event, dict):
            event = event.model_dump()

        usage = event.get("usage", {}) or {}
        choices = event.get("choices", [{}])
        if choices is None or len(choices) == 0:
            choices = [{}]
        if len(usage) > 0 and len(choices[0]) == 0:
            # we have a "usage" chunk, and empty choices, so we're done
            # ASSUMPTION: a usage chunk ONLY arrives AFTER all normal completion text!
            # If any API does not follow this, we need to change this code.
            return (
                True,
                has_function,
                function_name,
                function_args,
                completion,
                reasoning,
                usage,
            )
        event_args = ""
        event_fn_name = ""
        event_tool_deltas: Optional[List[Dict[str, Any]]] = None
        silent = settings.quiet
        # The first two events in the stream of Azure OpenAI is useless.
        # In the 1st: choices list is empty, in the 2nd: the dict delta has null content
        if chat:
            delta = choices[0].get("delta", {})
            # capture both content and reasoning_content
            event_text = delta.get("content", "")
            event_reasoning = delta.get(
                "reasoning_content",
                delta.get("reasoning", ""),
            )
            if "function_call" in delta and delta["function_call"] is not None:
                if "name" in delta["function_call"]:
                    event_fn_name = delta["function_call"]["name"]
                if "arguments" in delta["function_call"]:
                    event_args = delta["function_call"]["arguments"]
            if "tool_calls" in delta and delta["tool_calls"] is not None:
                # it's a list of deltas, usually just one
                event_tool_deltas = delta["tool_calls"]
                tool_deltas += event_tool_deltas
        else:
            event_text = choices[0]["text"]
            event_reasoning = ""  # TODO: Ignoring reasoning for non-chat models

        finish_reason = choices[0].get("finish_reason", "")
        if not event_text and finish_reason == "content_filter":
            filter_names = [
                n
                for n, r in choices[0].get("content_filter_results", {}).items()
                if r.get("filtered")
            ]
            event_text = (
                "Cannot respond due to content filters ["
                + ", ".join(filter_names)
                + "]"
            )
            logging.warning("LLM API returned content filter error: " + event_text)

        if event_text:
            completion += event_text
            if not silent:
                sys.stdout.write(Colors().GREEN + event_text)
                sys.stdout.flush()
            self.config.streamer(event_text, StreamEventType.TEXT)
        if event_reasoning:
            reasoning += event_reasoning
            if not silent:
                sys.stdout.write(Colors().GREEN_DIM + event_reasoning)
                sys.stdout.flush()
            self.config.streamer(event_reasoning, StreamEventType.TEXT)
        if event_fn_name:
            function_name = event_fn_name
            has_function = True
            if not silent:
                sys.stdout.write(Colors().GREEN + "FUNC: " + event_fn_name + ": ")
                sys.stdout.flush()
            self.config.streamer(event_fn_name, StreamEventType.FUNC_NAME)

        if event_args:
            function_args += event_args
            if not silent:
                sys.stdout.write(Colors().GREEN + event_args)
                sys.stdout.flush()
            self.config.streamer(event_args, StreamEventType.FUNC_ARGS)

        if event_tool_deltas is not None:
            # print out streaming tool calls, if not async
            for td in event_tool_deltas:
                if td["function"]["name"] is not None:
                    tool_fn_name = td["function"]["name"]
                    if not silent:
                        sys.stdout.write(
                            Colors().GREEN + "OAI-TOOL: " + tool_fn_name + ": "
                        )
                        sys.stdout.flush()
                    self.config.streamer(tool_fn_name, StreamEventType.TOOL_NAME)
                if td["function"]["arguments"] != "":
                    tool_fn_args = td["function"]["arguments"]
                    if not silent:
                        sys.stdout.write(Colors().GREEN + tool_fn_args)
                        sys.stdout.flush()
                    self.config.streamer(tool_fn_args, StreamEventType.TOOL_ARGS)

        # show this delta in the stream
        is_break = finish_reason in [
            "stop",
            "function_call",
            "tool_calls",
        ]
        # for function_call, finish_reason does not necessarily
        # contain "function_call" as mentioned in the docs.
        # So we check for "stop" or "function_call" here.
        return (
            is_break,
            has_function,
            function_name,
            function_args,
            completion,
            reasoning,
            usage,
        )

    @no_type_check
    async def _process_stream_event_async(
        self,
        event,
        chat: bool = False,
        tool_deltas: List[Dict[str, Any]] = [],
        has_function: bool = False,
        completion: str = "",
        reasoning: str = "",
        function_args: str = "",
        function_name: str = "",
    ) -> Tuple[bool, bool, str, str]:
        """Process state vars while processing a streaming API response.
            Returns a tuple consisting of:
        - is_break: whether to break out of the loop
        - has_function: whether the response contains a function_call
        - function_name: name of the function
        - function_args: args of the function
        - completion: completion text
        - reasoning: reasoning text
        - usage: usage dict
        """
        # convert event obj (of type ChatCompletionChunk) to dict so rest of code,
        # which expects dicts, works as it did before switching to openai v1.x
        if not isinstance(event, dict):
            event = event.model_dump()

        usage = event.get("usage", {}) or {}
        choices = event.get("choices", [{}])
        if len(choices) == 0:
            choices = [{}]
        if len(usage) > 0 and len(choices[0]) == 0:
            # we got usage chunk, and empty choices, so we're done
            return (
                True,
                has_function,
                function_name,
                function_args,
                completion,
                reasoning,
                usage,
            )
        event_args = ""
        event_fn_name = ""
        event_tool_deltas: Optional[List[Dict[str, Any]]] = None
        silent = self.config.async_stream_quiet or settings.quiet
        # The first two events in the stream of Azure OpenAI is useless.
        # In the 1st: choices list is empty, in the 2nd: the dict delta has null content
        if chat:
            delta = choices[0].get("delta", {})
            event_text = delta.get("content", "")
            event_reasoning = delta.get(
                "reasoning_content",
                delta.get("reasoning", ""),
            )
            if "function_call" in delta and delta["function_call"] is not None:
                if "name" in delta["function_call"]:
                    event_fn_name = delta["function_call"]["name"]
                if "arguments" in delta["function_call"]:
                    event_args = delta["function_call"]["arguments"]
            if "tool_calls" in delta and delta["tool_calls"] is not None:
                # it's a list of deltas, usually just one
                event_tool_deltas = delta["tool_calls"]
                tool_deltas += event_tool_deltas
        else:
            event_text = choices[0]["text"]
            event_reasoning = ""  # TODO: Ignoring reasoning for non-chat models
        if event_text:
            completion += event_text
            if not silent:
                sys.stdout.write(Colors().GREEN + event_text)
                sys.stdout.flush()
            await self.config.streamer_async(event_text, StreamEventType.TEXT)
        if event_reasoning:
            reasoning += event_reasoning
            if not silent:
                sys.stdout.write(Colors().GREEN + event_reasoning)
                sys.stdout.flush()
            await self.config.streamer_async(event_reasoning, StreamEventType.TEXT)
        if event_fn_name:
            function_name = event_fn_name
            has_function = True
            if not silent:
                sys.stdout.write(Colors().GREEN + "FUNC: " + event_fn_name + ": ")
                sys.stdout.flush()
            await self.config.streamer_async(event_fn_name, StreamEventType.FUNC_NAME)

        if event_args:
            function_args += event_args
            if not silent:
                sys.stdout.write(Colors().GREEN + event_args)
                sys.stdout.flush()
            await self.config.streamer_async(event_args, StreamEventType.FUNC_ARGS)

        if event_tool_deltas is not None:
            # print out streaming tool calls, if not async
            for td in event_tool_deltas:
                if td["function"]["name"] is not None:
                    tool_fn_name = td["function"]["name"]
                    if not silent:
                        sys.stdout.write(
                            Colors().GREEN + "OAI-TOOL: " + tool_fn_name + ": "
                        )
                        sys.stdout.flush()
                    await self.config.streamer_async(
                        tool_fn_name, StreamEventType.TOOL_NAME
                    )
                if td["function"]["arguments"] != "":
                    tool_fn_args = td["function"]["arguments"]
                    if not silent:
                        sys.stdout.write(Colors().GREEN + tool_fn_args)
                        sys.stdout.flush()
                    await self.config.streamer_async(
                        tool_fn_args, StreamEventType.TOOL_ARGS
                    )

        # show this delta in the stream
        is_break = choices[0].get("finish_reason", "") in [
            "stop",
            "function_call",
            "tool_calls",
        ]
        # for function_call, finish_reason does not necessarily
        # contain "function_call" as mentioned in the docs.
        # So we check for "stop" or "function_call" here.
        return (
            is_break,
            has_function,
            function_name,
            function_args,
            completion,
            reasoning,
            usage,
        )

    @retry_with_exponential_backoff
    def _stream_response(  # type: ignore
        self, response, chat: bool = False
    ) -> Tuple[LLMResponse, Dict[str, Any]]:
        """
        Grab and print streaming response from API.
        Args:
            response: event-sequence emitted by API
            chat: whether in chat-mode (or else completion-mode)
        Returns:
            Tuple consisting of:
                LLMResponse object (with message, usage),
                Dict version of OpenAIResponse object (with choices, usage)

        """
        completion = ""
        reasoning = ""
        function_args = ""
        function_name = ""

        sys.stdout.write(Colors().GREEN)
        sys.stdout.flush()
        has_function = False
        tool_deltas: List[Dict[str, Any]] = []
        token_usage: Dict[str, int] = {}
        done: bool = False
        try:
            for event in response:
                (
                    is_break,
                    has_function,
                    function_name,
                    function_args,
                    completion,
                    reasoning,
                    usage,
                ) = self._process_stream_event(
                    event,
                    chat=chat,
                    tool_deltas=tool_deltas,
                    has_function=has_function,
                    completion=completion,
                    reasoning=reasoning,
                    function_args=function_args,
                    function_name=function_name,
                )
                if len(usage) > 0:
                    # capture the token usage when non-empty
                    token_usage = usage
                if is_break:
                    if not self.get_stream() or done:
                        # if not streaming, then we don't wait for last "usage" chunk
                        break
                    else:
                        # mark done, so we quit after the last "usage" chunk
                        done = True

        except Exception as e:
            logging.warning("Error while processing stream response: %s", str(e))

        if not settings.quiet:
            print("")
        # TODO- get usage info in stream mode (?)

        return self._create_stream_response(
            chat=chat,
            tool_deltas=tool_deltas,
            has_function=has_function,
            completion=completion,
            reasoning=reasoning,
            function_args=function_args,
            function_name=function_name,
            usage=token_usage,
        )

    @async_retry_with_exponential_backoff
    async def _stream_response_async(  # type: ignore
        self, response, chat: bool = False
    ) -> Tuple[LLMResponse, Dict[str, Any]]:
        """
        Grab and print streaming response from API.
        Args:
            response: event-sequence emitted by API
            chat: whether in chat-mode (or else completion-mode)
        Returns:
            Tuple consisting of:
                LLMResponse object (with message, usage),
                OpenAIResponse object (with choices, usage)

        """

        completion = ""
        reasoning = ""
        function_args = ""
        function_name = ""

        sys.stdout.write(Colors().GREEN)
        sys.stdout.flush()
        has_function = False
        tool_deltas: List[Dict[str, Any]] = []
        token_usage: Dict[str, int] = {}
        done: bool = False
        try:
            async for event in response:
                (
                    is_break,
                    has_function,
                    function_name,
                    function_args,
                    completion,
                    reasoning,
                    usage,
                ) = await self._process_stream_event_async(
                    event,
                    chat=chat,
                    tool_deltas=tool_deltas,
                    has_function=has_function,
                    completion=completion,
                    reasoning=reasoning,
                    function_args=function_args,
                    function_name=function_name,
                )
                if len(usage) > 0:
                    # capture the token usage when non-empty
                    token_usage = usage
                if is_break:
                    if not self.get_stream() or done:
                        # if not streaming, then we don't wait for last "usage" chunk
                        break
                    else:
                        # mark done, so we quit after the next "usage" chunk
                        done = True

        except Exception as e:
            logging.warning("Error while processing stream response: %s", str(e))

        if not settings.quiet:
            print("")
        # TODO- get usage info in stream mode (?)

        return self._create_stream_response(
            chat=chat,
            tool_deltas=tool_deltas,
            has_function=has_function,
            completion=completion,
            reasoning=reasoning,
            function_args=function_args,
            function_name=function_name,
            usage=token_usage,
        )

    @staticmethod
    def tool_deltas_to_tools(
        tools: List[Dict[str, Any]],
    ) -> Tuple[
        str,
        List[OpenAIToolCall],
        List[Dict[str, Any]],
    ]:
        """
        Convert accumulated tool-call deltas to OpenAIToolCall objects.
        Adapted from this excellent code:
         https://community.openai.com/t/help-for-function-calls-with-streaming/627170/2

        Args:
            tools: list of tool deltas received from streaming API

        Returns:
            str: plain text corresponding to tool calls that failed to parse
            List[OpenAIToolCall]: list of OpenAIToolCall objects
            List[Dict[str, Any]]: list of tool dicts
                (to reconstruct OpenAI API response, so it can be cached)
        """
        # Initialize a dictionary with default values

        # idx -> dict repr of tool
        # (used to simulate OpenAIResponse object later, and also to
        # accumulate function args as strings)
        idx2tool_dict: Dict[str, Dict[str, Any]] = defaultdict(
            lambda: {
                "id": None,
                "function": {"arguments": "", "name": None},
                "type": None,
            }
        )

        for tool_delta in tools:
            if tool_delta["id"] is not None:
                idx2tool_dict[tool_delta["index"]]["id"] = tool_delta["id"]

            if tool_delta["function"]["name"] is not None:
                idx2tool_dict[tool_delta["index"]]["function"]["name"] = tool_delta[
                    "function"
                ]["name"]

            idx2tool_dict[tool_delta["index"]]["function"]["arguments"] += tool_delta[
                "function"
            ]["arguments"]

            if tool_delta["type"] is not None:
                idx2tool_dict[tool_delta["index"]]["type"] = tool_delta["type"]

        # (try to) parse the fn args of each tool
        contents: List[str] = []
        good_indices = []
        id2args: Dict[str, None | Dict[str, Any]] = {}
        for idx, tool_dict in idx2tool_dict.items():
            failed_content, args_dict = OpenAIGPT._parse_function_args(
                tool_dict["function"]["arguments"]
            )
            # used to build tool_calls_list below
            id2args[tool_dict["id"]] = args_dict or None  # if {}, store as None
            if failed_content != "":
                contents.append(failed_content)
            else:
                good_indices.append(idx)

        # remove the failed tool calls
        idx2tool_dict = {
            idx: tool_dict
            for idx, tool_dict in idx2tool_dict.items()
            if idx in good_indices
        }

        # create OpenAIToolCall list
        tool_calls_list = [
            OpenAIToolCall(
                id=tool_dict["id"],
                function=LLMFunctionCall(
                    name=tool_dict["function"]["name"],
                    arguments=id2args.get(tool_dict["id"]),
                ),
                type=tool_dict["type"],
            )
            for tool_dict in idx2tool_dict.values()
        ]
        return "\n".join(contents), tool_calls_list, list(idx2tool_dict.values())

    @staticmethod
    def _parse_function_args(args: str) -> Tuple[str, Dict[str, Any]]:
        """
        Try to parse the `args` string as function args.

        Args:
            args: string containing function args

        Returns:
            Tuple of content, function name and args dict.
            If parsing unsuccessful, returns the original string as content,
            else returns the args dict.
        """
        content = ""
        args_dict = {}
        try:
            stripped_fn_args = args.strip()
            dict_or_list = parse_imperfect_json(stripped_fn_args)
            if not isinstance(dict_or_list, dict):
                raise ValueError(
                    f"""
                        Invalid function args: {stripped_fn_args}
                        parsed as {dict_or_list},
                        which is not a valid dict.
                        """
                )
            args_dict = dict_or_list
        except (SyntaxError, ValueError) as e:
            logging.warning(
                f"""
                    Parsing OpenAI function args failed: {args};
                    treating args as normal message. Error detail:
                    {e}
                    """
            )
            content = args

        return content, args_dict

    def _create_stream_response(
        self,
        chat: bool = False,
        tool_deltas: List[Dict[str, Any]] = [],
        has_function: bool = False,
        completion: str = "",
        reasoning: str = "",
        function_args: str = "",
        function_name: str = "",
        usage: Dict[str, int] = {},
    ) -> Tuple[LLMResponse, Dict[str, Any]]:
        """
        Create an LLMResponse object from the streaming API response.

        Args:
            chat: whether in chat-mode (or else completion-mode)
            tool_deltas: list of tool deltas received from streaming API
            has_function: whether the response contains a function_call
            completion: completion text
            reasoning: reasoning text
            function_args: string representing function args
            function_name: name of the function
            usage: token usage dict
        Returns:
            Tuple consisting of:
                LLMResponse object (with message, usage),
                Dict version of OpenAIResponse object (with choices, usage)
                    (this is needed so we can cache the response, as if it were
                    a non-streaming response)
        """
        # check if function_call args are valid, if not,
        # treat this as a normal msg, not a function call
        args: Dict[str, Any] = {}
        if has_function and function_args != "":
            content, args = self._parse_function_args(function_args)
            completion = completion + content
            if content != "":
                has_function = False

        # mock openai response so we can cache it
        if chat:
            failed_content, tool_calls, tool_dicts = OpenAIGPT.tool_deltas_to_tools(
                tool_deltas,
            )
            completion = completion + "\n" + failed_content
            msg: Dict[str, Any] = dict(
                message=dict(
                    content=completion,
                    reasoning_content=reasoning,
                ),
            )
            if len(tool_dicts) > 0:
                msg["message"]["tool_calls"] = tool_dicts

            if has_function:
                function_call = LLMFunctionCall(name=function_name)
                function_call_dict = function_call.dict()
                if function_args == "":
                    function_call.arguments = None
                else:
                    function_call.arguments = args
                    function_call_dict.update({"arguments": function_args.strip()})
                msg["message"]["function_call"] = function_call_dict
        else:
            # non-chat mode has no function_call
            msg = dict(text=completion)
            # TODO: Ignoring reasoning content for non-chat models

        # create an OpenAIResponse object so we can cache it as if it were
        # a non-streaming response
        openai_response = OpenAIResponse(
            choices=[msg],
            usage=dict(total_tokens=0),
        )
        if reasoning == "":
            # some LLM APIs may not return a separate reasoning field,
            # and the reasoning may be included in the message content
            # within delimiters like <think> ... </think>
            reasoning, completion = self.get_reasoning_final(completion)

        prompt_tokens = usage.get("prompt_tokens", 0)
        prompt_tokens_details: Any = usage.get("prompt_tokens_details", {})
        cached_tokens = (
            prompt_tokens_details.get("cached_tokens", 0)
            if isinstance(prompt_tokens_details, dict)
            else 0
        )
        completion_tokens = usage.get("completion_tokens", 0)

        return (
            LLMResponse(
                message=completion,
                reasoning=reasoning,
                cached=False,
                # don't allow empty list [] here
                oai_tool_calls=tool_calls or None if len(tool_deltas) > 0 else None,
                function_call=function_call if has_function else None,
                usage=LLMTokenUsage(
                    prompt_tokens=prompt_tokens or 0,
                    cached_tokens=cached_tokens or 0,
                    completion_tokens=completion_tokens or 0,
                    cost=self._cost_chat_model(
                        prompt_tokens or 0,
                        cached_tokens or 0,
                        completion_tokens or 0,
                    ),
                ),
            ),
            openai_response.dict(),
        )

    def _cache_store(self, k: str, v: Any) -> None:
        if self.cache is None:
            return
        try:
            self.cache.store(k, v)
        except Exception as e:
            logging.error(f"Error in OpenAIGPT._cache_store: {e}")
            pass

    def _cache_lookup(self, fn_name: str, **kwargs: Dict[str, Any]) -> Tuple[str, Any]:
        if self.cache is None:
            return "", None  # no cache, return empty key and None result
        # Use the kwargs as the cache key
        sorted_kwargs_str = str(sorted(kwargs.items()))
        raw_key = f"{fn_name}:{sorted_kwargs_str}"

        # Hash the key to a fixed length using SHA256
        hashed_key = hashlib.sha256(raw_key.encode()).hexdigest()

        if not settings.cache:
            # when caching disabled, return the hashed_key and none result
            return hashed_key, None
        # Try to get the result from the cache
        try:
            cached_val = self.cache.retrieve(hashed_key)
        except Exception as e:
            logging.error(f"Error in OpenAIGPT._cache_lookup: {e}")
            return hashed_key, None
        return hashed_key, cached_val

    def _cost_chat_model(self, prompt: int, cached: int, completion: int) -> float:
        price = self.chat_cost()
        return (
            price[0] * (prompt - cached) + price[1] * cached + price[2] * completion
        ) / 1000

    def _get_non_stream_token_usage(
        self, cached: bool, response: Dict[str, Any]
    ) -> LLMTokenUsage:
        """
        Extracts token usage from ``response`` and computes cost, only when NOT
        in streaming mode, since the LLM API (OpenAI currently) was not
        populating the usage fields in streaming mode (but as of Sep 2024, streaming
        responses include  usage info as well, so we should update the code
        to directly use usage information from the streaming response, which is more
        accurate, esp with "thinking" LLMs like o1 series which consume
        thinking tokens).
        In streaming mode, these are set to zero for
        now, and will be updated later by the fn ``update_token_usage``.
        """
        cost = 0.0
        prompt_tokens = 0
        cached_tokens = 0
        completion_tokens = 0

        usage = response.get("usage")
        if not cached and not self.get_stream() and usage is not None:
            prompt_tokens = usage.get("prompt_tokens") or 0
            prompt_tokens_details = usage.get("prompt_tokens_details", {}) or {}
            cached_tokens = prompt_tokens_details.get("cached_tokens") or 0
            completion_tokens = usage.get("completion_tokens") or 0
            cost = self._cost_chat_model(
                prompt_tokens or 0,
                cached_tokens or 0,
                completion_tokens or 0,
            )

        return LLMTokenUsage(
            prompt_tokens=prompt_tokens,
            cached_tokens=cached_tokens,
            completion_tokens=completion_tokens,
            cost=cost,
        )

    def generate(self, prompt: str, max_tokens: int = 200) -> LLMResponse:
        self.run_on_first_use()

        try:
            return self._generate(prompt, max_tokens)
        except Exception as e:
            # log and re-raise exception
            logging.error(friendly_error(e, "Error in OpenAIGPT.generate: "))
            raise e

    def _generate(self, prompt: str, max_tokens: int) -> LLMResponse:
        if self.config.use_chat_for_completion:
            return self.chat(messages=prompt, max_tokens=max_tokens)

        if self.is_groq or self.is_cerebras:
            raise ValueError("Groq, Cerebras do not support pure completions")

        if settings.debug:
            print(f"[grey37]PROMPT: {escape(prompt)}[/grey37]")

        @retry_with_exponential_backoff
        def completions_with_backoff(**kwargs):  # type: ignore
            cached = False
            hashed_key, result = self._cache_lookup("Completion", **kwargs)
            if result is not None:
                cached = True
                if settings.debug:
                    print("[grey37]CACHED[/grey37]")
            else:
                if self.config.litellm:
                    from litellm import completion as litellm_completion

                    completion_call = litellm_completion

                    if self.api_key != DUMMY_API_KEY:
                        kwargs["api_key"] = self.api_key
                else:
                    if self.client is None:
                        raise ValueError(
                            "OpenAI/equivalent chat-completion client not set"
                        )
                    assert isinstance(self.client, OpenAI)
                    completion_call = self.client.completions.create
                if self.config.litellm and settings.debug:
                    kwargs["logger_fn"] = litellm_logging_fn
                # If it's not in the cache, call the API
                result = completion_call(**kwargs)
                if self.get_stream():
                    llm_response, openai_response = self._stream_response(
                        result,
                        chat=self.config.litellm,
                    )
                    self._cache_store(hashed_key, openai_response)
                    return cached, hashed_key, openai_response
                else:
                    self._cache_store(hashed_key, result.model_dump())
            return cached, hashed_key, result

        kwargs: Dict[str, Any] = dict(model=self.config.completion_model)
        if self.config.litellm:
            # TODO this is a temp fix, we should really be using a proper completion fn
            # that takes a pre-formatted prompt, rather than mocking it as a sys msg.
            kwargs["messages"] = [dict(content=prompt, role=Role.SYSTEM)]
        else:  # any other OpenAI-compatible endpoint
            kwargs["prompt"] = prompt
        args = dict(
            **kwargs,
            max_tokens=max_tokens,  # for output/completion
            stream=self.get_stream(),
        )
        args = self._openai_api_call_params(args)
        cached, hashed_key, response = completions_with_backoff(**args)
        # assume response is an actual response rather than a streaming event
        if not isinstance(response, dict):
            response = response.dict()
        if "message" in response["choices"][0]:
            msg = response["choices"][0]["message"]["content"].strip()
        else:
            msg = response["choices"][0]["text"].strip()
        return LLMResponse(message=msg, cached=cached)

    async def agenerate(self, prompt: str, max_tokens: int = 200) -> LLMResponse:
        self.run_on_first_use()

        try:
            return await self._agenerate(prompt, max_tokens)
        except Exception as e:
            # log and re-raise exception
            logging.error(friendly_error(e, "Error in OpenAIGPT.agenerate: "))
            raise e

    async def _agenerate(self, prompt: str, max_tokens: int) -> LLMResponse:
        # note we typically will not have self.config.stream = True
        # when issuing several api calls concurrently/asynchronously.
        # The calling fn should use the context `with Streaming(..., False)` to
        # disable streaming.
        if self.config.use_chat_for_completion:
            return await self.achat(messages=prompt, max_tokens=max_tokens)

        if self.is_groq or self.is_cerebras:
            raise ValueError("Groq, Cerebras do not support pure completions")

        if settings.debug:
            print(f"[grey37]PROMPT: {escape(prompt)}[/grey37]")

        # WARNING: .Completion.* endpoints are deprecated,
        # and as of Sep 2023 only legacy models will work here,
        # e.g. text-davinci-003, text-ada-001.
        @async_retry_with_exponential_backoff
        async def completions_with_backoff(**kwargs):  # type: ignore
            cached = False
            hashed_key, result = self._cache_lookup("AsyncCompletion", **kwargs)
            if result is not None:
                cached = True
                if settings.debug:
                    print("[grey37]CACHED[/grey37]")
            else:
                if self.config.litellm:
                    from litellm import acompletion as litellm_acompletion

                    if self.api_key != DUMMY_API_KEY:
                        kwargs["api_key"] = self.api_key

                # TODO this may not work: text_completion is not async,
                # and we didn't find an async version in litellm
                assert isinstance(self.async_client, AsyncOpenAI)
                acompletion_call = (
                    litellm_acompletion
                    if self.config.litellm
                    else self.async_client.completions.create
                )
                if self.config.litellm and settings.debug:
                    kwargs["logger_fn"] = litellm_logging_fn
                # If it's not in the cache, call the API
                result = await acompletion_call(**kwargs)
                self._cache_store(hashed_key, result.model_dump())
            return cached, hashed_key, result

        kwargs: Dict[str, Any] = dict(model=self.config.completion_model)
        if self.config.litellm:
            # TODO this is a temp fix, we should really be using a proper completion fn
            # that takes a pre-formatted prompt, rather than mocking it as a sys msg.
            kwargs["messages"] = [dict(content=prompt, role=Role.SYSTEM)]
        else:  # any other OpenAI-compatible endpoint
            kwargs["prompt"] = prompt
        cached, hashed_key, response = await completions_with_backoff(
            **kwargs,
            max_tokens=max_tokens,
            stream=False,
        )
        # assume response is an actual response rather than a streaming event
        if not isinstance(response, dict):
            response = response.dict()
        if "message" in response["choices"][0]:
            msg = response["choices"][0]["message"]["content"].strip()
        else:
            msg = response["choices"][0]["text"].strip()
        return LLMResponse(message=msg, cached=cached)

    def chat(
        self,
        messages: Union[str, List[LLMMessage]],
        max_tokens: int = 200,
        tools: Optional[List[OpenAIToolSpec]] = None,
        tool_choice: ToolChoiceTypes | Dict[str, str | Dict[str, str]] = "auto",
        functions: Optional[List[LLMFunctionSpec]] = None,
        function_call: str | Dict[str, str] = "auto",
        response_format: Optional[OpenAIJsonSchemaSpec] = None,
    ) -> LLMResponse:
        self.run_on_first_use()

        if self.config.use_completion_for_chat and not self.is_openai_chat_model():
            # only makes sense for non-OpenAI models
            if self.config.formatter is None or self.config.hf_formatter is None:
                raise ValueError(
                    """
                    `formatter` must be specified in config to use completion for chat.
                    """
                )
            if isinstance(messages, str):
                messages = [
                    LLMMessage(
                        role=Role.SYSTEM, content="You are a helpful assistant."
                    ),
                    LLMMessage(role=Role.USER, content=messages),
                ]
            prompt = self.config.hf_formatter.format(messages)
            return self.generate(prompt=prompt, max_tokens=max_tokens)
        try:
            return self._chat(
                messages,
                max_tokens,
                tools,
                tool_choice,
                functions,
                function_call,
                response_format,
            )
        except Exception as e:
            # log and re-raise exception
            logging.error(friendly_error(e, "Error in OpenAIGPT.chat: "))
            raise e

    async def achat(
        self,
        messages: Union[str, List[LLMMessage]],
        max_tokens: int = 200,
        tools: Optional[List[OpenAIToolSpec]] = None,
        tool_choice: ToolChoiceTypes | Dict[str, str | Dict[str, str]] = "auto",
        functions: Optional[List[LLMFunctionSpec]] = None,
        function_call: str | Dict[str, str] = "auto",
        response_format: Optional[OpenAIJsonSchemaSpec] = None,
    ) -> LLMResponse:
        self.run_on_first_use()

        # turn off streaming for async calls
        if (
            self.config.use_completion_for_chat
            and not self.is_openai_chat_model()
            and not self.is_openai_completion_model()
        ):
            # only makes sense for local models, where we are trying to
            # convert a chat dialog msg-sequence to a simple completion prompt.
            if self.config.formatter is None:
                raise ValueError(
                    """
                    `formatter` must be specified in config to use completion for chat.
                    """
                )
            formatter = HFFormatter(
                HFPromptFormatterConfig(model_name=self.config.formatter)
            )
            if isinstance(messages, str):
                messages = [
                    LLMMessage(
                        role=Role.SYSTEM, content="You are a helpful assistant."
                    ),
                    LLMMessage(role=Role.USER, content=messages),
                ]
            prompt = formatter.format(messages)
            return await self.agenerate(prompt=prompt, max_tokens=max_tokens)
        try:
            result = await self._achat(
                messages,
                max_tokens,
                tools,
                tool_choice,
                functions,
                function_call,
                response_format,
            )
            return result
        except Exception as e:
            # log and re-raise exception
            logging.error(friendly_error(e, "Error in OpenAIGPT.achat: "))
            raise e

    def _chat_completions_with_backoff_body(self, **kwargs):  # type: ignore
        cached = False
        hashed_key, result = self._cache_lookup("Completion", **kwargs)
        if result is not None:
            cached = True
            if settings.debug:
                print("[grey37]CACHED[/grey37]")
        else:
            # If it's not in the cache, call the API
            if self.config.litellm:
                from litellm import completion as litellm_completion

                completion_call = litellm_completion

                if self.api_key != DUMMY_API_KEY:
                    kwargs["api_key"] = self.api_key
            else:
                if self.client is None:
                    raise ValueError("OpenAI/equivalent chat-completion client not set")
                completion_call = self.client.chat.completions.create
            if self.config.litellm and settings.debug:
                kwargs["logger_fn"] = litellm_logging_fn
            result = completion_call(**kwargs)

            if self.get_stream():
                # If streaming, cannot cache result
                # since it is a generator. Instead,
                # we hold on to the hashed_key and
                # cache the result later

                # Test if this is a stream with an exception by
                # trying to get first chunk: Some providers like LiteLLM
                # produce a valid stream object `result` instead of throwing a
                # rate-limit error, and if we don't catch it here,
                # we end up returning an empty response and not
                # using the retry mechanism in the decorator.
                try:
                    # try to get the first chunk to check for errors
                    test_iter = iter(result)
                    first_chunk = next(test_iter)
                    # If we get here without error, recreate the stream
                    result = chain([first_chunk], test_iter)
                except StopIteration:
                    # Empty stream is fine
                    pass
                except Exception as e:
                    # Propagate any errors in the stream
                    raise e
            else:
                self._cache_store(hashed_key, result.model_dump())
        return cached, hashed_key, result

    def _chat_completions_with_backoff(self, **kwargs):  # type: ignore
        retry_func = retry_with_exponential_backoff(
            self._chat_completions_with_backoff_body,
            initial_delay=self.config.retry_params.initial_delay,
            max_retries=self.config.retry_params.max_retries,
            exponential_base=self.config.retry_params.exponential_base,
            jitter=self.config.retry_params.jitter,
        )
        return retry_func(**kwargs)

    async def _achat_completions_with_backoff_body(self, **kwargs):  # type: ignore
        cached = False
        hashed_key, result = self._cache_lookup("Completion", **kwargs)
        if result is not None:
            cached = True
            if settings.debug:
                print("[grey37]CACHED[/grey37]")
        else:
            if self.config.litellm:
                from litellm import acompletion as litellm_acompletion

                acompletion_call = litellm_acompletion

                if self.api_key != DUMMY_API_KEY:
                    kwargs["api_key"] = self.api_key
            else:
                if self.async_client is None:
                    raise ValueError(
                        "OpenAI/equivalent async chat-completion client not set"
                    )
                acompletion_call = self.async_client.chat.completions.create
            if self.config.litellm and settings.debug:
                kwargs["logger_fn"] = litellm_logging_fn
            # If it's not in the cache, call the API
            result = await acompletion_call(**kwargs)
            if self.get_stream():
                try:
                    # Try to peek at the first chunk to immediately catch any errors
                    # Store the original result (the stream)
                    original_stream = result

                    # Manually create and advance the iterator to check for errors
                    stream_iter = original_stream.__aiter__()
                    try:
                        # This will raise an exception if the stream is invalid
                        first_chunk = await anext(stream_iter)

                        # If we reach here, the stream started successfully
                        # Now recreate a fresh stream from the original API result
                        # Otherwise, return a new stream that yields the first chunk
                        # and remaining items
                        async def combined_stream():  # type: ignore
                            yield first_chunk
                            async for chunk in stream_iter:
                                yield chunk

                        result = combined_stream()  # type: ignore
                    except StopAsyncIteration:
                        # Empty stream is normal - nothing to do
                        pass
                except Exception as e:
                    # Any exception here should be raised to trigger the retry mechanism
                    raise e
            else:
                self._cache_store(hashed_key, result.model_dump())
        return cached, hashed_key, result

    async def _achat_completions_with_backoff(self, **kwargs):  # type: ignore
        retry_func = async_retry_with_exponential_backoff(
            self._achat_completions_with_backoff_body,
            initial_delay=self.config.retry_params.initial_delay,
            max_retries=self.config.retry_params.max_retries,
            exponential_base=self.config.retry_params.exponential_base,
            jitter=self.config.retry_params.jitter,
        )
        return await retry_func(**kwargs)

    def _prep_chat_completion(
        self,
        messages: Union[str, List[LLMMessage]],
        max_tokens: int,
        tools: Optional[List[OpenAIToolSpec]] = None,
        tool_choice: ToolChoiceTypes | Dict[str, str | Dict[str, str]] = "auto",
        functions: Optional[List[LLMFunctionSpec]] = None,
        function_call: str | Dict[str, str] = "auto",
        response_format: Optional[OpenAIJsonSchemaSpec] = None,
    ) -> Dict[str, Any]:
        """Prepare args for LLM chat-completion API call"""
        if isinstance(messages, str):
            llm_messages = [
                LLMMessage(role=Role.SYSTEM, content="You are a helpful assistant."),
                LLMMessage(role=Role.USER, content=messages),
            ]
        else:
            llm_messages = messages
            if (
                len(llm_messages) == 1
                and llm_messages[0].role == Role.SYSTEM
                # TODO: we will unconditionally insert a dummy user msg
                # if the only msg is a system msg.
                # We could make this conditional on ModelInfo.needs_first_user_message
            ):
                # some LLMs, notable Gemini as of 12/11/24,
                # require the first message to be from the user,
                # so insert a dummy user msg if needed.
                llm_messages.insert(
                    1,
                    LLMMessage(
                        role=Role.USER, content="Follow the above instructions."
                    ),
                )

        chat_model = self.config.chat_model

        args: Dict[str, Any] = dict(
            model=chat_model,
            messages=[
                m.api_dict(
                    self.config.chat_model,
                    has_system_role=self.info().allows_system_message,
                )
                for m in (llm_messages)
            ],
            max_completion_tokens=max_tokens,
            stream=self.get_stream(),
        )
        if self.get_stream() and "groq" not in self.chat_model_orig:
            # groq fails when we include stream_options in the request
            args.update(
                dict(
                    # get token-usage numbers in stream mode from OpenAI API,
                    # and possibly other OpenAI-compatible APIs.
                    stream_options=dict(include_usage=True),
                )
            )
        args.update(self._openai_api_call_params(args))
        # only include functions-related args if functions are provided
        # since the OpenAI API will throw an error if `functions` is None or []
        if functions is not None:
            args.update(
                dict(
                    functions=[f.dict() for f in functions],
                    function_call=function_call,
                )
            )
        if tools is not None:
            if self.config.parallel_tool_calls is not None:
                args["parallel_tool_calls"] = self.config.parallel_tool_calls

            if any(t.strict for t in tools) and (
                self.config.parallel_tool_calls is None
                or self.config.parallel_tool_calls
            ):
                parallel_strict_warning()
            args.update(
                dict(
                    tools=[
                        dict(
                            type="function",
                            function=t.function.dict()
                            | ({"strict": t.strict} if t.strict is not None else {}),
                        )
                        for t in tools
                    ],
                    tool_choice=tool_choice,
                )
            )
        if response_format is not None:
            args["response_format"] = response_format.to_dict()

        for p in self.unsupported_params():
            # some models e.g. o1-mini (as of sep 2024) don't support some params,
            # like temperature and stream, so we need to remove them.
            args.pop(p, None)

        param_rename_map = self.rename_params()
        for old_param, new_param in param_rename_map.items():
            if old_param in args:
                args[new_param] = args.pop(old_param)

        # finally, get rid of extra_body params exclusive to certain models
        extra_params = args.get("extra_body", {})
        if extra_params:
            for param, model_list in OpenAI_API_ParamInfo().extra_parameters.items():
                if (
                    self.config.chat_model not in model_list
                    and self.chat_model_orig not in model_list
                ):
                    extra_params.pop(param, None)
            if extra_params:
                args["extra_body"] = extra_params
        return args

    def _process_chat_completion_response(
        self,
        cached: bool,
        response: Dict[str, Any],
    ) -> LLMResponse:
        # openAI response will look like this:
        """
        {
            "id": "chatcmpl-123",
            "object": "chat.completion",
            "created": 1677652288,
            "choices": [{
                "index": 0,
                "message": {
                    "role": "assistant",
                    "name": "",
                    "content": "\n\nHello there, how may I help you?",
                    "reasoning_content": "Okay, let's see here, hmmm...",
                    "function_call": {
                        "name": "fun_name",
                        "arguments: {
                            "arg1": "val1",
                            "arg2": "val2"
                        }
                    },
                },
                "finish_reason": "stop"
            }],
            "usage": {
                "prompt_tokens": 9,
                "completion_tokens": 12,
                "total_tokens": 21
            }
        }
        """
        if response.get("choices") is None:
            message = {}
        else:
            message = response["choices"][0].get("message", {})
        if message is None:
            message = {}
        msg = message.get("content", "")
        reasoning = message.get("reasoning_content", "")
        if reasoning == "" and msg is not None:
            # some LLM APIs may not return a separate reasoning field,
            # and the reasoning may be included in the message content
            # within delimiters like <think> ... </think>
            reasoning, msg = self.get_reasoning_final(msg)

        if message.get("function_call") is None:
            fun_call = None
        else:
            try:
                fun_call = LLMFunctionCall.from_dict(message["function_call"])
            except (ValueError, SyntaxError):
                logging.warning(
                    "Could not parse function arguments: "
                    f"{message['function_call']['arguments']} "
                    f"for function {message['function_call']['name']} "
                    "treating as normal non-function message"
                )
                fun_call = None
                args_str = message["function_call"]["arguments"] or ""
                msg_str = message["content"] or ""
                msg = msg_str + args_str
        oai_tool_calls = None
        if message.get("tool_calls") is not None:
            oai_tool_calls = []
            for tool_call_dict in message["tool_calls"]:
                try:
                    tool_call = OpenAIToolCall.from_dict(tool_call_dict)
                    oai_tool_calls.append(tool_call)
                except (ValueError, SyntaxError):
                    logging.warning(
                        "Could not parse tool call: "
                        f"{json.dumps(tool_call_dict)} "
                        "treating as normal non-tool message"
                    )
                    msg = msg + "\n" + json.dumps(tool_call_dict)
        return LLMResponse(
            message=msg.strip() if msg is not None else "",
            reasoning=reasoning.strip() if reasoning is not None else "",
            function_call=fun_call,
            oai_tool_calls=oai_tool_calls or None,  # don't allow empty list [] here
            cached=cached,
            usage=self._get_non_stream_token_usage(cached, response),
        )

    def _chat(
        self,
        messages: Union[str, List[LLMMessage]],
        max_tokens: int,
        tools: Optional[List[OpenAIToolSpec]] = None,
        tool_choice: ToolChoiceTypes | Dict[str, str | Dict[str, str]] = "auto",
        functions: Optional[List[LLMFunctionSpec]] = None,
        function_call: str | Dict[str, str] = "auto",
        response_format: Optional[OpenAIJsonSchemaSpec] = None,
    ) -> LLMResponse:
        """
        ChatCompletion API call to OpenAI.
        Args:
            messages: list of messages  to send to the API, typically
                represents back and forth dialogue between user and LLM, but could
                also include "function"-role messages. If messages is a string,
                it is assumed to be a user message.
            max_tokens: max output tokens to generate
            functions: list of LLMFunction specs available to the LLM, to possibly
                use in its response
            function_call: controls how the LLM uses `functions`:
                - "auto": LLM decides whether to use `functions` or not,
                - "none": LLM blocked from using any function
                - a dict of {"name": "function_name"} which forces the LLM to use
                    the specified function.
        Returns:
            LLMResponse object
        """
        args = self._prep_chat_completion(
            messages,
            max_tokens,
            tools,
            tool_choice,
            functions,
            function_call,
            response_format,
        )
        cached, hashed_key, response = self._chat_completions_with_backoff(**args)  # type: ignore
        if self.get_stream() and not cached:
            llm_response, openai_response = self._stream_response(response, chat=True)
            self._cache_store(hashed_key, openai_response)
            return llm_response  # type: ignore
        if isinstance(response, dict):
            response_dict = response
        else:
            response_dict = response.model_dump()
        return self._process_chat_completion_response(cached, response_dict)

    async def _achat(
        self,
        messages: Union[str, List[LLMMessage]],
        max_tokens: int,
        tools: Optional[List[OpenAIToolSpec]] = None,
        tool_choice: ToolChoiceTypes | Dict[str, str | Dict[str, str]] = "auto",
        functions: Optional[List[LLMFunctionSpec]] = None,
        function_call: str | Dict[str, str] = "auto",
        response_format: Optional[OpenAIJsonSchemaSpec] = None,
    ) -> LLMResponse:
        """
        Async version of _chat(). See that function for details.
        """
        args = self._prep_chat_completion(
            messages,
            max_tokens,
            tools,
            tool_choice,
            functions,
            function_call,
            response_format,
        )
        cached, hashed_key, response = await self._achat_completions_with_backoff(  # type: ignore
            **args
        )
        if self.get_stream() and not cached:
            llm_response, openai_response = await self._stream_response_async(
                response, chat=True
            )
            self._cache_store(hashed_key, openai_response)
            return llm_response  # type: ignore
        if isinstance(response, dict):
            response_dict = response
        else:
            response_dict = response.model_dump()
        return self._process_chat_completion_response(cached, response_dict)
</file>

<file path=".pre-commit-config.yaml">
repos:
- repo: https://github.com/astral-sh/ruff-pre-commit
  # Ruff version.
  rev: v0.12.2
  hooks:
    - id: ruff
</file>

<file path="mkdocs.yml">
site_name: "langroid"
repo_name: langroid/langroid
site_description: "Langroid LLM App Development Framework"
repo_url: https://github.com/langroid/langroid
site_url: https://langroid.github.io/langroid

edit_uri: ""
extra_css:
  - stylesheets/extra.css

theme:
  logo: assets/orange-logo-lambda-563.png
  favicon: assets/orange-logo-lambda-563.png
  features:
    - navigation.tabs
#    - navigation.tracking
#    - navigation.sections
#    - navigation.indexes
    - toc
    - content.code.copy
    - content.code.select
    - content.code.annotate
  icon:
      repo: fontawesome/brands/github
  name: material
  custom_dir: docs/overrides
  palette:
    # Palette toggle for light mode
    - scheme: default
      primary: indigo
      accent: indigo
      toggle:
        icon: material/brightness-7
        name: Switch to dark mode

    # Palette toggle for dark mode
    - scheme: slate
      primary: indigo
      accent: indigo
      toggle:
        icon: material/brightness-4
        name: Switch to light mode

plugins:
  - blog:
      archive: false
      blog_toc: true
      categories: false
      blog_dir: blog

  - rss:
      enabled: true
      match_path: blog/posts/.*
      image: https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Feed-icon.svg/128px-Feed-icon.svg.png
      date_from_meta:
        as_creation: date
      categories:
        - categories
        - tags
  - search
  - autorefs
  #- awesome-pages
  - gen-files:
      scripts:
      - docs/auto_docstring.py
      #- docs/gen_ref_pages.py
  - literate-nav:
      nav_file: SUMMARY.md
  - mkdocstrings:
      default_handler: python
      handlers:
        python:
          paths: [.]
          options:
            members_order: source
            separate_signature: false
            filters: ["!^_"]
            docstring_options:
              ignore_init_summary: true
            merge_init_into_class: true
  - section-index

watch:
  - langroid

nav:
  - Home: index.md
  - Blog: blog/index.md
  - Getting Started:
    - quick-start/index.md
    - Setup: quick-start/setup.md
    - LLM interaction: quick-start/llm-interaction.md
    - Simple Chat Agent: quick-start/chat-agent.md
    - Task Delegation: quick-start/multi-agent-task-delegation.md
    - Two Agent Chat: quick-start/two-agent-chat-num.md
    - Three Agent Chat: quick-start/three-agent-chat-num.md
    - Agent with Tools/Functions: quick-start/chat-agent-tool.md
    - Three Agents, with Routing: quick-start/three-agent-chat-num-router.md
    - Agent with Retrieval: quick-start/chat-agent-docs.md
  # defer to gen-files + literate-nav
  - FAQ: FAQ.md
  - Notes-Updates:
      - Overview: notes/overview.md
      - XML-based Tools: notes/xml-tools.md
      - Async Streaming: notes/async-streaming.md
      - Knowledge Graphs: notes/knowledge-graphs.md
      - Gemini LLMs, Embeddings: notes/gemini.md
      - LLM-based Pdf Parsing: notes/llm-pdf-parser.md
      - Large Tool Results: notes/large-tool-results.md
      - GLHF.chat Support: notes/glhf-chat.md
      - Structured Output: notes/structured-output.md
      - Tool Handlers: notes/tool-message-handler.md
      - Task Termination: notes/task-termination.md
      - Llama.cpp Embeddings: notes/llama-cpp-embeddings.md
      - Azure OpenAI models: notes/azure-openai-models.md
      - Custom Azure OpenAI client: notes/custom-azure-client.md
      - Enriching Chunks for Retrieval: notes/enriching-for-retrieval.md
      - Reasoning Content: notes/reasoning-content.md
      - Weaviate: notes/weaviate.md
      - Handling LLM Non-Tool Messages: notes/handle-llm-no-tool.md
      - PGVector: notes/pgvector.md
      - Pinecone: notes/pinecone.md
      - Tavily Search Tool: notes/tavily_search.md
      - Marker Pdf Parser: notes/marker-pdf.md
      - URLLoader : notes/url_loader.md
      - LangDB AI Gateway: notes/langdb.md
      - Portkey AI Gateway: notes/portkey.md
      - Markitdown Parsers: notes/markitdown.md
      - LiteLLM Proxy: notes/litellm-proxy.md
      - Chunking: notes/chunking.md
      - Image, PDF Input: notes/file-input.md
      - MCP Tools: notes/mcp-tools.md
      - Code-Injection Protection: notes/code-injection-protection.md
      - TaskTool: notes/task-tool.md
      - Local Qdrant VectorDB Cleanup: notes/qdrant-resource-cleanup.md
      - OpenAI Client Caching: notes/openai-client-caching.md

  - Examples:
    - Guide: examples/guide.md
    - Hierarchical Agent Computation: examples/agent-tree.md
    - Demos:
      - Audience Targeting: demos/targeting/audience-targeting.md
  - Tutorials:
    - Langroid Tour: tutorials/langroid-tour.md
    - Supported LLMs: tutorials/supported-models.md
    - Local LLM Setup: tutorials/local-llm-setup.md
    - Non-OpenAI LLMs: tutorials/non-openai-llms.md
    - SQLChatAgent: tutorials/postgresql-agent.md
    - LLM Usage Options: tutorials/llm-usage-options.md
  - Code/API Docs: reference/
#  - API Documentation:
#    - language_models: api/language_models_base.md


markdown_extensions:
  - footnotes
  - toc:
      permalink: true
  - attr_list
  - md_in_html
  - pymdownx.emoji:
      emoji_index: !!python/name:material.extensions.emoji.twemoji
      emoji_generator: !!python/name:material.extensions.emoji.to_svg
  - admonition
  - pymdownx.details
  - pymdownx.superfences
  - pymdownx.highlight:
      anchor_linenums: true
      line_spans: __span
      pygments_lang_class: true
      use_pygments: true
  - pymdownx.inlinehilite
  - pymdownx.snippets
  - pymdownx.arithmatex:
      generic: true
  - markdown.extensions.attr_list:
extra_javascript:
  - javascripts/mathjax.js
  - https://polyfill.io/v3/polyfill.min.js?features=es6
  - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js
</file>

<file path="langroid/agent/base.py">
import asyncio
import copy
import inspect
import json
import logging
import re
from abc import ABC
from collections import OrderedDict
from contextlib import ExitStack
from types import SimpleNamespace
from typing import (
    Any,
    Callable,
    Coroutine,
    Dict,
    List,
    Optional,
    Set,
    Tuple,
    Type,
    TypeVar,
    cast,
    get_args,
    get_origin,
    no_type_check,
)

from rich import print
from rich.console import Console
from rich.markup import escape
from rich.prompt import Prompt

from langroid.agent.chat_document import ChatDocMetaData, ChatDocument
from langroid.agent.tool_message import ToolMessage
from langroid.agent.xml_tool_message import XMLToolMessage
from langroid.exceptions import XMLException
from langroid.language_models.base import (
    LanguageModel,
    LLMConfig,
    LLMFunctionCall,
    LLMMessage,
    LLMResponse,
    LLMTokenUsage,
    OpenAIToolCall,
    StreamingIfAllowed,
    ToolChoiceTypes,
)
from langroid.language_models.openai_gpt import OpenAIGPT, OpenAIGPTConfig
from langroid.mytypes import Entity
from langroid.parsing.file_attachment import FileAttachment
from langroid.parsing.parse_json import extract_top_level_json
from langroid.parsing.parser import Parser, ParsingConfig
from langroid.prompts.prompts_config import PromptsConfig
from langroid.pydantic_v1 import (
    BaseSettings,
    Field,
    ValidationError,
    validator,
)
from langroid.utils.configuration import settings
from langroid.utils.constants import (
    DONE,
    NO_ANSWER,
    PASS,
    PASS_TO,
    SEND_TO,
)
from langroid.utils.object_registry import ObjectRegistry
from langroid.utils.output import status
from langroid.utils.types import from_string, to_string
from langroid.vector_store.base import VectorStore, VectorStoreConfig

ORCHESTRATION_STRINGS = [DONE, PASS, PASS_TO, SEND_TO]
console = Console(quiet=settings.quiet)

logger = logging.getLogger(__name__)

T = TypeVar("T")


class AgentConfig(BaseSettings):
    """
    General config settings for an LLM agent. This is nested, combining configs of
    various components.
    """

    name: str = "LLM-Agent"
    debug: bool = False
    vecdb: Optional[VectorStoreConfig] = None
    llm: Optional[LLMConfig] = OpenAIGPTConfig()
    parsing: Optional[ParsingConfig] = ParsingConfig()
    prompts: Optional[PromptsConfig] = PromptsConfig()
    show_stats: bool = True  # show token usage/cost stats?
    hide_agent_response: bool = False  # hide agent response?
    add_to_registry: bool = True  # register agent in ObjectRegistry?
    respond_tools_only: bool = False  # respond only to tool messages (not plain text)?
    # allow multiple tool messages in a single response?
    allow_multiple_tools: bool = True
    human_prompt: str = (
        "Human (respond or q, x to exit current level, " "or hit enter to continue)"
    )

    @validator("name")
    def check_name_alphanum(cls, v: str) -> str:
        if not re.match(r"^[a-zA-Z0-9_-]+$", v):
            raise ValueError(
                "The name must only contain alphanumeric characters, "
                "underscores, or hyphens, with no spaces"
            )
        return v


def noop_fn(*args: List[Any], **kwargs: Dict[str, Any]) -> None:
    pass


async def async_noop_fn(*args: List[Any], **kwargs: Dict[str, Any]) -> None:
    pass


async def async_lambda_noop_fn() -> Callable[..., Coroutine[Any, Any, None]]:
    return async_noop_fn


class Agent(ABC):
    """
    An Agent is an abstraction that typically (but not necessarily)
    encapsulates an LLM.
    """

    id: str = Field(default_factory=lambda: ObjectRegistry.new_id())
    # OpenAI tool-calls awaiting response; update when a tool result with Role.TOOL
    # is added to self.message_history
    oai_tool_calls: List[OpenAIToolCall] = []
    # Index of ALL tool calls generated by the agent
    oai_tool_id2call: Dict[str, OpenAIToolCall] = {}

    def __init__(self, config: AgentConfig = AgentConfig()):
        self.config = config
        self.id = ObjectRegistry.new_id()  # Initialize agent ID
        self.lock = asyncio.Lock()  # for async access to update self.llm.usage_cost
        self.dialog: List[Tuple[str, str]] = []  # seq of LLM (prompt, response) tuples
        self.llm_tools_map: Dict[str, Type[ToolMessage]] = {}
        self.llm_tools_handled: Set[str] = set()
        self.llm_tools_usable: Set[str] = set()
        self.llm_tools_known: Set[str] = set()  # all known tools, handled/used or not
        # Indicates which tool-names are allowed to be inferred when
        # the LLM "forgets" to include the request field in its tool-call.
        self.enabled_requests_for_inference: Optional[Set[str]] = (
            None  # If None, we allow all
        )
        self.interactive: bool = True  # may be modified by Task wrapper
        self.token_stats_str = ""
        self.default_human_response: Optional[str] = None
        self._indent = ""
        self.llm = LanguageModel.create(config.llm)
        self.vecdb = VectorStore.create(config.vecdb) if config.vecdb else None
        self.tool_error = False
        if config.parsing is not None and self.config.llm is not None:
            # token_encoding_model is used to obtain the tokenizer,
            # so in case it's an OpenAI model, we ensure that the tokenizer
            # corresponding to the model is used.
            if isinstance(self.llm, OpenAIGPT) and self.llm.is_openai_chat_model():
                config.parsing.token_encoding_model = self.llm.config.chat_model
        self.parser: Optional[Parser] = (
            Parser(config.parsing) if config.parsing else None
        )
        if config.add_to_registry:
            ObjectRegistry.register_object(self)

        self.callbacks = SimpleNamespace(
            start_llm_stream=lambda: noop_fn,
            start_llm_stream_async=async_lambda_noop_fn,
            cancel_llm_stream=noop_fn,
            finish_llm_stream=noop_fn,
            show_llm_response=noop_fn,
            show_agent_response=noop_fn,
            get_user_response=None,
            get_user_response_async=None,
            get_last_step=noop_fn,
            set_parent_agent=noop_fn,
            show_error_message=noop_fn,
            show_start_response=noop_fn,
        )
        Agent.init_state(self)

    def init_state(self) -> None:
        """Initialize all state vars. Called by Task.run() if restart is True"""
        self.total_llm_token_cost = 0.0
        self.total_llm_token_usage = 0

    @staticmethod
    def from_id(id: str) -> "Agent":
        return cast(Agent, ObjectRegistry.get(id))

    @staticmethod
    def delete_id(id: str) -> None:
        ObjectRegistry.remove(id)

    def entity_responders(
        self,
    ) -> List[
        Tuple[Entity, Callable[[None | str | ChatDocument], None | ChatDocument]]
    ]:
        """
        Sequence of (entity, response_method) pairs. This sequence is used
            in a `Task` to respond to the current pending message.
            See `Task.step()` for details.
        Returns:
            Sequence of (entity, response_method) pairs.
        """
        return [
            (Entity.AGENT, self.agent_response),
            (Entity.LLM, self.llm_response),
            (Entity.USER, self.user_response),
        ]

    def entity_responders_async(
        self,
    ) -> List[
        Tuple[
            Entity,
            Callable[
                [None | str | ChatDocument], Coroutine[Any, Any, None | ChatDocument]
            ],
        ]
    ]:
        """
        Async version of `entity_responders`. See there for details.
        """
        return [
            (Entity.AGENT, self.agent_response_async),
            (Entity.LLM, self.llm_response_async),
            (Entity.USER, self.user_response_async),
        ]

    @property
    def indent(self) -> str:
        """Indentation to print before any responses from the agent's entities."""
        return self._indent

    @indent.setter
    def indent(self, value: str) -> None:
        self._indent = value

    def update_dialog(self, prompt: str, output: str) -> None:
        self.dialog.append((prompt, output))

    def get_dialog(self) -> List[Tuple[str, str]]:
        return self.dialog

    def clear_dialog(self) -> None:
        self.dialog = []

    def _analyze_handler_params(
        self, handler_method: Any
    ) -> Tuple[bool, Optional[str], Optional[str]]:
        """
        Analyze parameters of a handler method to determine their types.

        Returns:
            Tuple of (has_annotations, agent_param_name, chat_doc_param_name)
            - has_annotations: True if useful type annotations were found
            - agent_param_name: Name of the agent parameter if found
            - chat_doc_param_name: Name of the chat_doc parameter if found
        """
        sig = inspect.signature(handler_method)
        params = list(sig.parameters.values())
        # Remove the first 'self' parameter
        params = params[1:]
        # Don't use name
        # [p for p in params if p.name != "self"]

        agent_param = None
        chat_doc_param = None
        has_annotations = False

        for param in params:
            # First try type annotations
            if param.annotation != inspect.Parameter.empty:
                ann_str = str(param.annotation)
                # Check for Agent-like types
                if (
                    inspect.isclass(param.annotation)
                    and issubclass(param.annotation, Agent)
                ) or (
                    not inspect.isclass(param.annotation)
                    and (
                        "Agent" in ann_str
                        or (
                            hasattr(param.annotation, "__name__")
                            and "Agent" in param.annotation.__name__
                        )
                    )
                ):
                    agent_param = param.name
                    has_annotations = True
                # Check for ChatDocument-like types
                elif (
                    param.annotation is ChatDocument
                    or "ChatDocument" in ann_str
                    or "ChatDoc" in ann_str
                ):
                    chat_doc_param = param.name
                    has_annotations = True

            # Fallback to parameter names
            elif param.name == "agent":
                agent_param = param.name
            elif param.name == "chat_doc":
                chat_doc_param = param.name

        return has_annotations, agent_param, chat_doc_param

    @no_type_check
    def _create_handler_wrapper(
        self,
        handler_method: Any,
        is_async: bool = False,
    ) -> Any:
        """
        Create a wrapper function for a handler method based on its signature.

        Args:
            message_class: The ToolMessage class
            handler_method: The handle/handle_async method
            is_async: Whether this is for an async handler

        Returns:
            Appropriate wrapper function
        """
        sig = inspect.signature(handler_method)
        params = list(sig.parameters.values())
        params = params[1:]
        # params = [p for p in params if p.name != "self"]

        has_annotations, agent_param, chat_doc_param = self._analyze_handler_params(
            handler_method,
        )

        # Build wrapper based on found parameters
        if len(params) == 0:
            if is_async:

                async def wrapper(obj: Any) -> Any:
                    return await obj.handle_async()

            else:

                def wrapper(obj: Any) -> Any:
                    return obj.handle()

        elif agent_param and chat_doc_param:
            # Both parameters present - build wrapper respecting their order
            param_names = [p.name for p in params]
            if param_names.index(agent_param) < param_names.index(chat_doc_param):
                # agent is first parameter
                if is_async:

                    async def wrapper(obj: Any, chat_doc: Any) -> Any:
                        return await obj.handle_async(self, chat_doc)

                else:

                    def wrapper(obj: Any, chat_doc: Any) -> Any:
                        return obj.handle(self, chat_doc)

            else:
                # chat_doc is first parameter
                if is_async:

                    async def wrapper(obj: Any, chat_doc: Any) -> Any:
                        return await obj.handle_async(chat_doc, self)

                else:

                    def wrapper(obj: Any, chat_doc: Any) -> Any:
                        return obj.handle(chat_doc, self)

        elif agent_param and not chat_doc_param:
            # Only agent parameter
            if is_async:

                async def wrapper(obj: Any) -> Any:
                    return await obj.handle_async(self)

            else:

                def wrapper(obj: Any) -> Any:
                    return obj.handle(self)

        elif chat_doc_param and not agent_param:
            # Only chat_doc parameter
            if is_async:

                async def wrapper(obj: Any, chat_doc: Any) -> Any:
                    return await obj.handle_async(chat_doc)

            else:

                def wrapper(obj: Any, chat_doc: Any) -> Any:
                    return obj.handle(chat_doc)

        else:
            # No recognized parameters - backward compatibility
            # Assume single parameter is chat_doc (legacy behavior)
            if len(params) == 1:
                if is_async:

                    async def wrapper(obj: Any, chat_doc: Any) -> Any:
                        return await obj.handle_async(chat_doc)

                else:

                    def wrapper(obj: Any, chat_doc: Any) -> Any:
                        return obj.handle(chat_doc)

            else:
                # Multiple unrecognized parameters - best guess
                if is_async:

                    async def wrapper(obj: Any, chat_doc: Any) -> Any:
                        return await obj.handle_async(chat_doc)

                else:

                    def wrapper(obj: Any, chat_doc: Any) -> Any:
                        return obj.handle(chat_doc)

        return wrapper

    def _get_tool_list(
        self, message_class: Optional[Type[ToolMessage]] = None
    ) -> List[str]:
        """
        If `message_class` is None, return a list of all known tool names.
        Otherwise, first add the tool name corresponding to the message class
        (which is the value of the `request` field of the message class),
        to the `self.llm_tools_map` dict, and then return a list
        containing this tool name.

        Args:
            message_class (Optional[Type[ToolMessage]]): The message class whose tool
                name is to be returned; Optional, default is None.
                if None, return a list of all known tool names.

        Returns:
            List[str]: List of tool names: either just the tool name corresponding
                to the message class, or all known tool names
                (when `message_class` is None).

        """
        if message_class is None:
            return list(self.llm_tools_map.keys())

        if not issubclass(message_class, ToolMessage):
            raise ValueError("message_class must be a subclass of ToolMessage")
        tool = message_class.default_value("request")

        """
        if tool has handler method explicitly defined - use it,
        otherwise use the tool name as the handler
        """
        if hasattr(message_class, "_handler"):
            handler = getattr(message_class, "_handler", tool)
        else:
            handler = tool

        self.llm_tools_map[tool] = message_class
        if (
            hasattr(message_class, "handle")
            and inspect.isfunction(message_class.handle)
            and not hasattr(self, handler)
        ):
            """
            If the message class has a `handle` method,
            and agent does NOT have a tool handler method,
            then we create a method for the agent whose name
            is the value of `handler`, and whose body is the `handle` method.
            This removes a separate step of having to define this method
            for the agent, and also keeps the tool definition AND handling
            in one place, i.e. in the message class.
            See `tests/main/test_stateless_tool_messages.py` for an example.
            """
            wrapper = self._create_handler_wrapper(
                message_class.handle,
                is_async=False,
            )
            setattr(self, handler, wrapper)
        elif (
            hasattr(message_class, "response")
            and inspect.isfunction(message_class.response)
            and not hasattr(self, handler)
        ):
            has_chat_doc_arg = (
                len(inspect.signature(message_class.response).parameters) > 2
            )
            if has_chat_doc_arg:

                def response_wrapper_with_chat_doc(obj: Any, chat_doc: Any) -> Any:
                    return obj.response(self, chat_doc)

                setattr(self, handler, response_wrapper_with_chat_doc)
            else:

                def response_wrapper_no_chat_doc(obj: Any) -> Any:
                    return obj.response(self)

                setattr(self, handler, response_wrapper_no_chat_doc)

        if hasattr(message_class, "handle_message_fallback") and (
            inspect.isfunction(message_class.handle_message_fallback)
        ):
            # When a ToolMessage has a `handle_message_fallback` method,
            # we inject it into the agent as a method, overriding the default
            # `handle_message_fallback` method (which does nothing).
            # It's possible multiple tool messages have a `handle_message_fallback`,
            # in which case, the last one inserted will be used.
            def fallback_wrapper(msg: Any) -> Any:
                return message_class.handle_message_fallback(self, msg)

            setattr(
                self,
                "handle_message_fallback",
                fallback_wrapper,
            )

        async_handler_name = f"{handler}_async"
        if (
            hasattr(message_class, "handle_async")
            and inspect.isfunction(message_class.handle_async)
            and not hasattr(self, async_handler_name)
        ):
            wrapper = self._create_handler_wrapper(
                message_class.handle_async,
                is_async=True,
            )
            setattr(self, async_handler_name, wrapper)
        elif (
            hasattr(message_class, "response_async")
            and inspect.isfunction(message_class.response_async)
            and not hasattr(self, async_handler_name)
        ):
            has_chat_doc_arg = (
                len(inspect.signature(message_class.response_async).parameters) > 2
            )

            if has_chat_doc_arg:

                @no_type_check
                async def handler(obj, chat_doc):
                    return await obj.response_async(self, chat_doc)

            else:

                @no_type_check
                async def handler(obj):
                    return await obj.response_async(self)

            setattr(self, async_handler_name, handler)

        return [tool]

    def enable_message_handling(
        self, message_class: Optional[Type[ToolMessage]] = None
    ) -> None:
        """
        Enable an agent to RESPOND (i.e. handle) a "tool" message of a specific type
            from LLM. Also "registers" (i.e. adds) the `message_class` to the
            `self.llm_tools_map` dict.

        Args:
            message_class (Optional[Type[ToolMessage]]): The message class to enable;
                Optional; if None, all known message classes are enabled for handling.

        """
        for t in self._get_tool_list(message_class):
            self.llm_tools_handled.add(t)

    def disable_message_handling(
        self,
        message_class: Optional[Type[ToolMessage]] = None,
    ) -> None:
        """
        Disable a message class from being handled by this Agent.

        Args:
            message_class (Optional[Type[ToolMessage]]): The message class to disable.
                If None, all message classes are disabled.
        """
        for t in self._get_tool_list(message_class):
            self.llm_tools_handled.discard(t)

    def sample_multi_round_dialog(self) -> str:
        """
        Generate a sample multi-round dialog based on enabled message classes.
        Returns:
            str: The sample dialog string.
        """
        enabled_classes: List[Type[ToolMessage]] = list(self.llm_tools_map.values())
        # use at most 2 sample conversations, no need to be exhaustive;
        sample_convo = [
            msg_cls().usage_examples(random=True)  # type: ignore
            for i, msg_cls in enumerate(enabled_classes)
            if i < 2
        ]
        return "\n\n".join(sample_convo)

    def create_agent_response(
        self,
        content: str | None = None,
        files: List[FileAttachment] = [],
        content_any: Any = None,
        tool_messages: List[ToolMessage] = [],
        oai_tool_calls: Optional[List[OpenAIToolCall]] = None,
        oai_tool_choice: ToolChoiceTypes | Dict[str, Dict[str, str] | str] = "auto",
        oai_tool_id2result: OrderedDict[str, str] | None = None,
        function_call: LLMFunctionCall | None = None,
        recipient: str = "",
    ) -> ChatDocument:
        """Template for agent_response."""
        return self.response_template(
            Entity.AGENT,
            content=content,
            files=files,
            content_any=content_any,
            tool_messages=tool_messages,
            oai_tool_calls=oai_tool_calls,
            oai_tool_choice=oai_tool_choice,
            oai_tool_id2result=oai_tool_id2result,
            function_call=function_call,
            recipient=recipient,
        )

    def render_agent_response(
        self,
        results: Optional[str | OrderedDict[str, str] | ChatDocument],
    ) -> None:
        """
        Render the response from the agent, typically from tool-handling.
        Args:
            results: results from tool-handling, which may be a string,
                a dict of tool results, or a ChatDocument.
        """
        if self.config.hide_agent_response or results is None:
            return
        if isinstance(results, str):
            results_str = results
        elif isinstance(results, ChatDocument):
            results_str = results.content
        elif isinstance(results, dict):
            results_str = json.dumps(results, indent=2)
        if not settings.quiet:
            console.print(f"[red]{self.indent}", end="")
            print(f"[red]Agent: {escape(results_str)}")

    def _agent_response_final(
        self,
        msg: Optional[str | ChatDocument],
        results: Optional[str | OrderedDict[str, str] | ChatDocument],
    ) -> Optional[ChatDocument]:
        """
        Convert results to final response.
        """
        if results is None:
            return None
        if isinstance(results, str):
            results_str = results
        elif isinstance(results, ChatDocument):
            results_str = results.content
        elif isinstance(results, dict):
            results_str = json.dumps(results, indent=2)
        if not settings.quiet:
            self.render_agent_response(results)
        maybe_json = len(extract_top_level_json(results_str)) > 0
        self.callbacks.show_agent_response(
            content=results_str,
            language="json" if maybe_json else "text",
            is_tool=(
                isinstance(results, ChatDocument)
                and self.has_tool_message_attempt(results)
            ),
        )
        if isinstance(results, ChatDocument):
            # Preserve trail of tool_ids for OpenAI Assistant fn-calls
            results.metadata.tool_ids = (
                [] if msg is None or isinstance(msg, str) else msg.metadata.tool_ids
            )
            results.metadata.agent_id = self.id
            return results
        sender_name = self.config.name
        if isinstance(msg, ChatDocument) and msg.function_call is not None:
            # if result was from handling an LLM `function_call`,
            # set sender_name to name of the function_call
            sender_name = msg.function_call.name

        results_str, id2result, oai_tool_id = self.process_tool_results(
            results if isinstance(results, str) else "",
            id2result=None if isinstance(results, str) else results,
            tool_calls=(msg.oai_tool_calls if isinstance(msg, ChatDocument) else None),
        )
        return ChatDocument(
            content=results_str,
            oai_tool_id2result=id2result,
            metadata=ChatDocMetaData(
                source=Entity.AGENT,
                sender=Entity.AGENT,
                agent_id=self.id,
                sender_name=sender_name,
                oai_tool_id=oai_tool_id,
                # preserve trail of tool_ids for OpenAI Assistant fn-calls
                tool_ids=(
                    [] if msg is None or isinstance(msg, str) else msg.metadata.tool_ids
                ),
            ),
        )

    async def agent_response_async(
        self,
        msg: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        """
        Asynch version of `agent_response`. See there for details.
        """
        if msg is None:
            return None

        results = await self.handle_message_async(msg)

        return self._agent_response_final(msg, results)

    def agent_response(
        self,
        msg: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        """
        Response from the "agent itself", typically (but not only)
        used to handle LLM's "tool message" or `function_call`
        (e.g. OpenAI `function_call`).
        Args:
            msg (str|ChatDocument): the input to respond to: if msg is a string,
                and it contains a valid JSON-structured "tool message", or
                if msg is a ChatDocument, and it contains a `function_call`.
        Returns:
            Optional[ChatDocument]: the response, packaged as a ChatDocument

        """
        if msg is None:
            return None

        results = self.handle_message(msg)

        return self._agent_response_final(msg, results)

    def process_tool_results(
        self,
        results: str,
        id2result: OrderedDict[str, str] | None,
        tool_calls: List[OpenAIToolCall] | None = None,
    ) -> Tuple[str, Dict[str, str] | None, str | None]:
        """
        Process results from a response, based on whether
        they are results of OpenAI tool-calls from THIS agent, so that
        we can construct an appropriate LLMMessage that contains tool results.

        Args:
            results (str): A possible string result from handling tool(s)
            id2result (OrderedDict[str,str]|None): A dict of OpenAI tool id -> result,
                if there are multiple tool results.
            tool_calls (List[OpenAIToolCall]|None): List of OpenAI tool-calls that the
                results are a response to.

        Return:
            - str: The response string
            - Dict[str,str]|None: A dict of OpenAI tool id -> result, if there are
                multiple tool results.
            - str|None: tool_id if there was a single tool result

        """
        id2result_ = copy.deepcopy(id2result) if id2result is not None else None
        results_str = ""
        oai_tool_id = None

        if results != "":
            # in this case ignore id2result
            assert (
                id2result is None
            ), "id2result should be None when results string is non-empty!"
            results_str = results
            if len(self.oai_tool_calls) > 0:
                # We only have one result, so in case there is a
                # "pending" OpenAI tool-call, we expect no more than 1 such.
                assert (
                    len(self.oai_tool_calls) == 1
                ), "There are multiple pending tool-calls, but only one result!"
                # We record the tool_id of the tool-call that
                # the result is a response to, so that ChatDocument.to_LLMMessage
                # can properly set the `tool_call_id` field of the LLMMessage.
                oai_tool_id = self.oai_tool_calls[0].id
        elif id2result is not None and id2result_ is not None:  # appease mypy
            if len(id2result_) == len(self.oai_tool_calls):
                # if the number of pending tool calls equals the number of results,
                # then ignore the ids in id2result, and use the results in order,
                # which is preserved since id2result is an OrderedDict.
                assert len(id2result_) > 1, "Expected to see > 1 result in id2result!"
                results_str = ""
                id2result_ = OrderedDict(
                    zip(
                        [tc.id or "" for tc in self.oai_tool_calls], id2result_.values()
                    )
                )
            else:
                assert (
                    tool_calls is not None
                ), "tool_calls cannot be None when id2result is not None!"
                # This must be an OpenAI tool id -> result map;
                # However some ids may not correspond to the tool-calls in the list of
                # pending tool-calls (self.oai_tool_calls).
                # Such results are concatenated into a simple string, to store in the
                # ChatDocument.content, and the rest
                # (i.e. those that DO correspond to tools in self.oai_tool_calls)
                # are stored as a dict in ChatDocument.oai_tool_id2result.

                # OAI tools from THIS agent, awaiting response
                pending_tool_ids = [tc.id for tc in self.oai_tool_calls]
                # tool_calls that the results are a response to
                # (but these may have been sent from another agent, hence may not be in
                # self.oai_tool_calls)
                parent_tool_id2name = {
                    tc.id: tc.function.name
                    for tc in tool_calls or []
                    if tc.function is not None
                }

                # (id, result) for result NOT corresponding to self.oai_tool_calls,
                # i.e. these are results of EXTERNAL tool-calls from another agent.
                external_tool_id_results = []

                for tc_id, result in id2result.items():
                    if tc_id not in pending_tool_ids:
                        external_tool_id_results.append((tc_id, result))
                        id2result_.pop(tc_id)
                if len(external_tool_id_results) == 0:
                    results_str = ""
                elif len(external_tool_id_results) == 1:
                    results_str = external_tool_id_results[0][1]
                else:
                    results_str = "\n\n".join(
                        [
                            f"Result from tool/function "
                            f"{parent_tool_id2name[id]}: {result}"
                            for id, result in external_tool_id_results
                        ]
                    )

                if len(id2result_) == 0:
                    id2result_ = None
                elif len(id2result_) == 1 and len(external_tool_id_results) == 0:
                    results_str = list(id2result_.values())[0]
                    oai_tool_id = list(id2result_.keys())[0]
                    id2result_ = None

        return results_str, id2result_, oai_tool_id

    def response_template(
        self,
        e: Entity,
        content: str | None = None,
        files: List[FileAttachment] = [],
        content_any: Any = None,
        tool_messages: List[ToolMessage] = [],
        oai_tool_calls: Optional[List[OpenAIToolCall]] = None,
        oai_tool_choice: ToolChoiceTypes | Dict[str, Dict[str, str] | str] = "auto",
        oai_tool_id2result: OrderedDict[str, str] | None = None,
        function_call: LLMFunctionCall | None = None,
        recipient: str = "",
    ) -> ChatDocument:
        """Template for response from entity `e`."""
        return ChatDocument(
            content=content or "",
            files=files,
            content_any=content_any,
            tool_messages=tool_messages,
            oai_tool_calls=oai_tool_calls,
            oai_tool_id2result=oai_tool_id2result,
            function_call=function_call,
            oai_tool_choice=oai_tool_choice,
            metadata=ChatDocMetaData(
                source=e, sender=e, sender_name=self.config.name, recipient=recipient
            ),
        )

    def create_user_response(
        self,
        content: str | None = None,
        files: List[FileAttachment] = [],
        content_any: Any = None,
        tool_messages: List[ToolMessage] = [],
        oai_tool_calls: List[OpenAIToolCall] | None = None,
        oai_tool_choice: ToolChoiceTypes | Dict[str, Dict[str, str] | str] = "auto",
        oai_tool_id2result: OrderedDict[str, str] | None = None,
        function_call: LLMFunctionCall | None = None,
        recipient: str = "",
    ) -> ChatDocument:
        """Template for user_response."""
        return self.response_template(
            e=Entity.USER,
            content=content,
            files=files,
            content_any=content_any,
            tool_messages=tool_messages,
            oai_tool_calls=oai_tool_calls,
            oai_tool_choice=oai_tool_choice,
            oai_tool_id2result=oai_tool_id2result,
            function_call=function_call,
            recipient=recipient,
        )

    def user_can_respond(self, msg: Optional[str | ChatDocument] = None) -> bool:
        """
        Whether the user can respond to a message.

        Args:
            msg (str|ChatDocument): the string to respond to.

        Returns:

        """
        # When msg explicitly addressed to user, this means an actual human response
        # is being sought.
        need_human_response = (
            isinstance(msg, ChatDocument) and msg.metadata.recipient == Entity.USER
        )

        if not self.interactive and not need_human_response:
            return False

        return True

    def _user_response_final(
        self, msg: Optional[str | ChatDocument], user_msg: str
    ) -> Optional[ChatDocument]:
        """
        Convert user_msg to final response.
        """
        if not user_msg:
            need_human_response = (
                isinstance(msg, ChatDocument) and msg.metadata.recipient == Entity.USER
            )
            user_msg = (
                (self.default_human_response or "null") if need_human_response else ""
            )
        user_msg = user_msg.strip()

        tool_ids = []
        if msg is not None and isinstance(msg, ChatDocument):
            tool_ids = msg.metadata.tool_ids

        # only return non-None result if user_msg not empty
        if not user_msg:
            return None
        else:
            if user_msg.startswith("SYSTEM"):
                user_msg = user_msg.replace("SYSTEM", "").strip()
                source = Entity.SYSTEM
                sender = Entity.SYSTEM
            else:
                source = Entity.USER
                sender = Entity.USER
            return ChatDocument(
                content=user_msg,
                metadata=ChatDocMetaData(
                    agent_id=self.id,
                    source=source,
                    sender=sender,
                    # preserve trail of tool_ids for OpenAI Assistant fn-calls
                    tool_ids=tool_ids,
                ),
            )

    async def user_response_async(
        self,
        msg: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        """
        Asynch version of `user_response`. See there for details.
        """
        if not self.user_can_respond(msg):
            return None

        if self.default_human_response is not None:
            user_msg = self.default_human_response
        else:
            if (
                self.callbacks.get_user_response_async is not None
                and self.callbacks.get_user_response_async is not async_noop_fn
            ):
                user_msg = await self.callbacks.get_user_response_async(prompt="")
            elif self.callbacks.get_user_response is not None:
                user_msg = self.callbacks.get_user_response(prompt="")
            else:
                user_msg = Prompt.ask(
                    f"[blue]{self.indent}"
                    + self.config.human_prompt
                    + f"\n{self.indent}"
                )

        return self._user_response_final(msg, user_msg)

    def user_response(
        self,
        msg: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        """
        Get user response to current message. Could allow (human) user to intervene
        with an actual answer, or quit using "q" or "x"

        Args:
            msg (str|ChatDocument): the string to respond to.

        Returns:
            (str) User response, packaged as a ChatDocument

        """

        if not self.user_can_respond(msg):
            return None

        if self.default_human_response is not None:
            user_msg = self.default_human_response
        else:
            if self.callbacks.get_user_response is not None:
                # ask user with empty prompt: no need for prompt
                # since user has seen the conversation so far.
                # But non-empty prompt can be useful when Agent
                # uses a tool that requires user input, or in other scenarios.
                user_msg = self.callbacks.get_user_response(prompt="")
            else:
                user_msg = Prompt.ask(
                    f"[blue]{self.indent}"
                    + self.config.human_prompt
                    + f"\n{self.indent}"
                )

        return self._user_response_final(msg, user_msg)

    @no_type_check
    def llm_can_respond(self, message: Optional[str | ChatDocument] = None) -> bool:
        """
        Whether the LLM can respond to a message.
        Args:
            message (str|ChatDocument): message or ChatDocument object to respond to.

        Returns:

        """
        if self.llm is None:
            return False

        if message is not None and len(self.try_get_tool_messages(message)) > 0:
            # if there is a valid "tool" message (either JSON or via `function_call`)
            # then LLM cannot respond to it
            return False

        return True

    def can_respond(self, message: Optional[str | ChatDocument] = None) -> bool:
        """
        Whether the agent can respond to a message.
        Used in Task.py to skip a sub-task when we know it would not respond.
        Args:
            message (str|ChatDocument): message or ChatDocument object to respond to.
        """
        tools = self.try_get_tool_messages(message)
        if len(tools) == 0 and self.config.respond_tools_only:
            return False
        if message is not None and self.has_only_unhandled_tools(message):
            # The message has tools that are NOT enabled to be handled by this agent,
            # which means the agent cannot respond to it.
            return False
        return True

    def create_llm_response(
        self,
        content: str | None = None,
        content_any: Any = None,
        tool_messages: List[ToolMessage] = [],
        oai_tool_calls: None | List[OpenAIToolCall] = None,
        oai_tool_choice: ToolChoiceTypes | Dict[str, Dict[str, str] | str] = "auto",
        oai_tool_id2result: OrderedDict[str, str] | None = None,
        function_call: LLMFunctionCall | None = None,
        recipient: str = "",
    ) -> ChatDocument:
        """Template for llm_response."""
        return self.response_template(
            Entity.LLM,
            content=content,
            content_any=content_any,
            tool_messages=tool_messages,
            oai_tool_calls=oai_tool_calls,
            oai_tool_choice=oai_tool_choice,
            oai_tool_id2result=oai_tool_id2result,
            function_call=function_call,
            recipient=recipient,
        )

    @no_type_check
    async def llm_response_async(
        self,
        message: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        """
        Asynch version of `llm_response`. See there for details.
        """
        if message is None or not self.llm_can_respond(message):
            return None

        if isinstance(message, ChatDocument):
            prompt = message.content
        else:
            prompt = message

        output_len = self.config.llm.model_max_output_tokens
        if self.num_tokens(prompt) + output_len > self.llm.completion_context_length():
            output_len = self.llm.completion_context_length() - self.num_tokens(prompt)
            if output_len < self.config.llm.min_output_tokens:
                raise ValueError(
                    """
                Token-length of Prompt + Output is longer than the
                completion context length of the LLM!
                """
                )
            else:
                logger.warning(
                    f"""
                Requested output length has been shortened to {output_len}
                so that the total length of Prompt + Output is less than
                the completion context length of the LLM.
                """
                )

        with StreamingIfAllowed(self.llm, self.llm.get_stream()):
            response = await self.llm.agenerate(prompt, output_len)

        if not self.llm.get_stream() or response.cached and not settings.quiet:
            # We would have already displayed the msg "live" ONLY if
            # streaming was enabled, AND we did not find a cached response.
            # If we are here, it means the response has not yet been displayed.
            cached = f"[red]{self.indent}(cached)[/red]" if response.cached else ""
            print(cached + "[green]" + escape(response.message))
        async with self.lock:
            self.update_token_usage(
                response,
                prompt,
                self.llm.get_stream(),
                chat=False,  # i.e. it's a completion model not chat model
                print_response_stats=self.config.show_stats and not settings.quiet,
            )
        cdoc = ChatDocument.from_LLMResponse(response, displayed=True)
        # Preserve trail of tool_ids for OpenAI Assistant fn-calls
        cdoc.metadata.tool_ids = (
            [] if isinstance(message, str) else message.metadata.tool_ids
        )
        return cdoc

    @no_type_check
    def llm_response(
        self,
        message: Optional[str | ChatDocument] = None,
    ) -> Optional[ChatDocument]:
        """
        LLM response to a prompt.
        Args:
            message (str|ChatDocument): prompt string, or ChatDocument object

        Returns:
            Response from LLM, packaged as a ChatDocument
        """
        if message is None or not self.llm_can_respond(message):
            return None

        if isinstance(message, ChatDocument):
            prompt = message.content
        else:
            prompt = message

        with ExitStack() as stack:  # for conditionally using rich spinner
            if not self.llm.get_stream():
                # show rich spinner only if not streaming!
                cm = status("LLM responding to message...")
                stack.enter_context(cm)
            output_len = self.config.llm.model_max_output_tokens
            if (
                self.num_tokens(prompt) + output_len
                > self.llm.completion_context_length()
            ):
                output_len = self.llm.completion_context_length() - self.num_tokens(
                    prompt
                )
                if output_len < self.config.llm.min_output_tokens:
                    raise ValueError(
                        """
                    Token-length of Prompt + Output is longer than the
                    completion context length of the LLM!
                    """
                    )
                else:
                    logger.warning(
                        f"""
                    Requested output length has been shortened to {output_len}
                    so that the total length of Prompt + Output is less than
                    the completion context length of the LLM.
                    """
                    )
            if self.llm.get_stream() and not settings.quiet:
                console.print(f"[green]{self.indent}", end="")
            response = self.llm.generate(prompt, output_len)

        if not self.llm.get_stream() or response.cached and not settings.quiet:
            # we would have already displayed the msg "live" ONLY if
            # streaming was enabled, AND we did not find a cached response
            # If we are here, it means the response has not yet been displayed.
            cached = "[red](cached)[/red]" if response.cached else ""
            console.print(f"[green]{self.indent}", end="")
            print(cached + "[green]" + escape(response.message))
        self.update_token_usage(
            response,
            prompt,
            self.llm.get_stream(),
            chat=False,  # i.e. it's a completion model not chat model
            print_response_stats=self.config.show_stats and not settings.quiet,
        )
        cdoc = ChatDocument.from_LLMResponse(response, displayed=True)
        # Preserve trail of tool_ids for OpenAI Assistant fn-calls
        cdoc.metadata.tool_ids = (
            [] if isinstance(message, str) else message.metadata.tool_ids
        )
        return cdoc

    def has_tool_message_attempt(self, msg: str | ChatDocument | None) -> bool:
        """
        Check whether msg contains a Tool/fn-call attempt (by the LLM).

        CAUTION: This uses self.get_tool_messages(msg) which as a side-effect
        may update msg.tool_messages when msg is a ChatDocument, if there are
        any tools in msg.
        """
        if msg is None:
            return False
        if isinstance(msg, ChatDocument):
            if len(msg.tool_messages) > 0:
                return True
            if msg.metadata.sender != Entity.LLM:
                return False
        try:
            tools = self.get_tool_messages(msg)
            return len(tools) > 0
        except (ValidationError, XMLException):
            # there is a tool/fn-call attempt but had a validation error,
            # so we still consider this a tool message "attempt"
            return True
        return False

    def _tool_recipient_match(self, tool: ToolMessage) -> bool:
        """Is tool enabled for handling by this agent and intended for this
        agent to handle (i.e. if there's any explicit `recipient` field exists in
        tool, then it matches this agent's name)?
        """
        if tool.default_value("request") not in self.llm_tools_handled:
            return False
        if hasattr(tool, "recipient") and isinstance(tool.recipient, str):
            return tool.recipient == "" or tool.recipient == self.config.name
        return True

    def has_only_unhandled_tools(self, msg: str | ChatDocument) -> bool:
        """
        Does the msg have at least one tool, and none of the tools in the msg are
        handleable by this agent?
        """
        if msg is None:
            return False
        tools = self.try_get_tool_messages(msg, all_tools=True)
        if len(tools) == 0:
            return False
        return all(not self._tool_recipient_match(t) for t in tools)

    def try_get_tool_messages(
        self,
        msg: str | ChatDocument | None,
        all_tools: bool = False,
    ) -> List[ToolMessage]:
        try:
            return self.get_tool_messages(msg, all_tools)
        except (ValidationError, XMLException):
            return []

    def get_tool_messages(
        self,
        msg: str | ChatDocument | None,
        all_tools: bool = False,
    ) -> List[ToolMessage]:
        """
        Get ToolMessages recognized in msg, handle-able by this agent.
        NOTE: as a side-effect, this will update msg.tool_messages
        when msg is a ChatDocument and msg contains tool messages.
        The intent here is that update=True should be set ONLY within agent_response()
        or agent_response_async() methods. In other words, we want to persist the
        msg.tool_messages only AFTER the agent has had a chance to handle the tools.

        Args:
            msg (str|ChatDocument): the message to extract tools from.
            all_tools (bool):
                - if True, return all tools,
                    i.e. any recognized tool in self.llm_tools_known,
                    whether it is handled by this agent or not;
                - otherwise, return only the tools handled by this agent.

        Returns:
            List[ToolMessage]: list of ToolMessage objects
        """

        if msg is None:
            return []

        if isinstance(msg, str):
            json_tools = self.get_formatted_tool_messages(msg)
            if all_tools:
                return json_tools
            else:
                return [
                    t
                    for t in json_tools
                    if self._tool_recipient_match(t) and t.default_value("request")
                ]

        if all_tools and len(msg.all_tool_messages) > 0:
            # We've already identified all_tool_messages in the msg;
            # return the corresponding ToolMessage objects
            return msg.all_tool_messages
        if len(msg.tool_messages) > 0:
            # We've already found tool_messages,
            # (either via OpenAI Fn-call or Langroid-native ToolMessage);
            # or they were added by an agent_response.
            # note these could be from a forwarded msg from another agent,
            # so return ONLY the messages THIS agent to enabled to handle.
            if all_tools:
                return msg.tool_messages
            return [t for t in msg.tool_messages if self._tool_recipient_match(t)]
        assert isinstance(msg, ChatDocument)
        if (
            msg.content != ""
            and msg.oai_tool_calls is None
            and msg.function_call is None
        ):

            tools = self.get_formatted_tool_messages(
                msg.content, from_llm=msg.metadata.sender == Entity.LLM
            )
            msg.all_tool_messages = tools
            # filter for actually handle-able tools, and recipient is this agent
            my_tools = [t for t in tools if self._tool_recipient_match(t)]
            msg.tool_messages = my_tools

            if all_tools:
                return tools
            else:
                return my_tools

        # otherwise, we look for `tool_calls` (possibly multiple)
        tools = self.get_oai_tool_calls_classes(msg)
        msg.all_tool_messages = tools
        my_tools = [t for t in tools if self._tool_recipient_match(t)]
        msg.tool_messages = my_tools

        if len(tools) == 0:
            # otherwise, we look for a `function_call`
            fun_call_cls = self.get_function_call_class(msg)
            tools = [fun_call_cls] if fun_call_cls is not None else []
            msg.all_tool_messages = tools
            my_tools = [t for t in tools if self._tool_recipient_match(t)]
            msg.tool_messages = my_tools
        if all_tools:
            return tools
        else:
            return my_tools

    def get_formatted_tool_messages(
        self, input_str: str, from_llm: bool = True
    ) -> List[ToolMessage]:
        """
        Returns ToolMessage objects (tools) corresponding to
        tool-formatted substrings, if any.
        ASSUMPTION - These tools are either ALL JSON-based, or ALL XML-based
        (i.e. not a mix of both).
        Terminology: a "formatted tool msg" is one which the LLM generates as
            part of its raw string output, rather than within a JSON object
            in the API response (i.e. this method does not extract tools/fns returned
            by OpenAI's tools/fns API or similar APIs).

        Args:
            input_str (str): input string, typically a message sent by an LLM
            from_llm (bool): whether the input was generated by the LLM. If so,
                we track malformed tool calls.

        Returns:
            List[ToolMessage]: list of ToolMessage objects
        """
        self.tool_error = False
        substrings = XMLToolMessage.find_candidates(input_str)
        is_json = False
        if len(substrings) == 0:
            substrings = extract_top_level_json(input_str)
            is_json = len(substrings) > 0
            if not is_json:
                return []

        results = [self._get_one_tool_message(j, is_json, from_llm) for j in substrings]
        valid_results = [r for r in results if r is not None]
        # If any tool is correctly formed we do not set the flag
        if len(valid_results) > 0:
            self.tool_error = False
        return valid_results

    def get_function_call_class(self, msg: ChatDocument) -> Optional[ToolMessage]:
        """
        From ChatDocument (constructed from an LLM Response), get the `ToolMessage`
        corresponding to the `function_call` if it exists.
        """
        if msg.function_call is None:
            return None
        tool_name = msg.function_call.name
        tool_msg = msg.function_call.arguments or {}
        self.tool_error = False
        if tool_name not in self.llm_tools_handled:
            logger.warning(
                f"""
                The function_call '{tool_name}' is not handled
                by the agent named '{self.config.name}'!
                If you intended this agent to handle this function_call,
                either the fn-call name is incorrectly generated by the LLM,
                (in which case you may need to adjust your LLM instructions),
                or you need to enable this agent to handle this fn-call.
                """
            )
            if (
                tool_name not in self.all_llm_tools_known
                and msg.metadata.sender == Entity.LLM
            ):
                self.tool_error = True
            return None
        tool_class = self.llm_tools_map[tool_name]
        tool_msg.update(dict(request=tool_name))
        tool = tool_class.parse_obj(tool_msg)
        return tool

    def get_oai_tool_calls_classes(self, msg: ChatDocument) -> List[ToolMessage]:
        """
        From ChatDocument (constructed from an LLM Response), get
         a list of ToolMessages corresponding to the `tool_calls`, if any.
        """

        if msg.oai_tool_calls is None:
            return []
        tools = []
        all_errors = True
        for tc in msg.oai_tool_calls:
            if tc.function is None:
                continue
            tool_name = tc.function.name
            tool_msg = tc.function.arguments or {}
            if tool_name not in self.llm_tools_handled:
                logger.warning(
                    f"""
                    The tool_call '{tool_name}' is not handled
                    by the agent named '{self.config.name}'!
                    If you intended this agent to handle this function_call,
                    either the fn-call name is incorrectly generated by the LLM,
                    (in which case you may need to adjust your LLM instructions),
                    or you need to enable this agent to handle this fn-call.
                    """
                )
                continue
            all_errors = False
            tool_class = self.llm_tools_map[tool_name]
            tool_msg.update(dict(request=tool_name))
            tool = tool_class.parse_obj(tool_msg)
            tool.id = tc.id or ""
            tools.append(tool)
        # When no tool is valid and the message was produced
        # by the LLM, set the recovery flag
        self.tool_error = all_errors and msg.metadata.sender == Entity.LLM
        return tools

    def tool_validation_error(self, ve: ValidationError) -> str:
        """
        Handle a validation error raised when parsing a tool message,
            when there is a legit tool name used, but it has missing/bad fields.
        Args:
            tool (ToolMessage): The tool message that failed validation
            ve (ValidationError): The exception raised

        Returns:
            str: The error message to send back to the LLM
        """
        tool_name = cast(ToolMessage, ve.model).default_value("request")
        bad_field_errors = "\n".join(
            [f"{e['loc']}: {e['msg']}" for e in ve.errors() if "loc" in e]
        )
        return f"""
        There were one or more errors in your attempt to use the
        TOOL or function_call named '{tool_name}':
        {bad_field_errors}
        Please write your message again, correcting the errors.
        """

    def _get_multiple_orch_tool_errs(
        self, tools: List[ToolMessage]
    ) -> List[str | ChatDocument | None]:
        """
        Return error document if the message contains multiple orchestration tools
        """
        # check whether there are multiple orchestration-tools (e.g. DoneTool etc),
        # in which case set result to error-string since we don't yet support
        # multi-tools with one or more orch tools.
        from langroid.agent.tools.orchestration import (
            AgentDoneTool,
            AgentSendTool,
            DonePassTool,
            DoneTool,
            ForwardTool,
            PassTool,
            SendTool,
        )
        from langroid.agent.tools.recipient_tool import RecipientTool

        ORCHESTRATION_TOOLS = (
            AgentDoneTool,
            DoneTool,
            PassTool,
            DonePassTool,
            ForwardTool,
            RecipientTool,
            SendTool,
            AgentSendTool,
        )

        has_orch = any(isinstance(t, ORCHESTRATION_TOOLS) for t in tools)
        if has_orch and len(tools) > 1:
            return ["ERROR: Use ONE tool at a time!"] * len(tools)

        return []

    def _handle_message_final(
        self, tools: List[ToolMessage], results: List[str | ChatDocument | None]
    ) -> None | str | OrderedDict[str, str] | ChatDocument:
        """
        Convert results to final response
        """
        # extract content from ChatDocument results so we have all str|None
        results = [r.content if isinstance(r, ChatDocument) else r for r in results]

        tool_names = [t.default_value("request") for t in tools]

        has_ids = all([t.id != "" for t in tools])
        if has_ids:
            id2result = OrderedDict(
                (t.id, r)
                for t, r in zip(tools, results)
                if r is not None and isinstance(r, str)
            )
            result_values = list(id2result.values())
            if len(id2result) > 1 and any(
                orch_str in r
                for r in result_values
                for orch_str in ORCHESTRATION_STRINGS
            ):
                # Cannot support multi-tool results containing orchestration strings!
                # Replace results with err string to force LLM to retry
                err_str = "ERROR: Please use ONE tool at a time!"
                id2result = OrderedDict((id, err_str) for id in id2result.keys())

        name_results_list = [
            (name, r) for name, r in zip(tool_names, results) if r is not None
        ]
        if len(name_results_list) == 0:
            return None

        # there was a non-None result

        if has_ids and len(id2result) > 1:
            # if there are multiple OpenAI Tool results, return them as a dict
            return id2result

        # multi-results: prepend the tool name to each result
        str_results = [f"Result from {name}: {r}" for name, r in name_results_list]
        final = "\n\n".join(str_results)
        return final

    async def handle_message_async(
        self, msg: str | ChatDocument
    ) -> None | str | OrderedDict[str, str] | ChatDocument:
        """
        Asynch version of `handle_message`. See there for details.
        """
        try:
            tools = self.get_tool_messages(msg)
            tools = [t for t in tools if self._tool_recipient_match(t)]
        except ValidationError as ve:
            # correct tool name but bad fields
            return self.tool_validation_error(ve)
        except XMLException as xe:  # from XMLToolMessage parsing
            return str(xe)
        except ValueError:
            # invalid tool name
            # We return None since returning "invalid tool name" would
            # be considered a valid result in task loop, and would be treated
            # as a response to the tool message even though the tool was not intended
            # for this agent.
            return None
        if len(tools) > 1 and not self.config.allow_multiple_tools:
            return self.to_ChatDocument("ERROR: Use ONE tool at a time!")
        if len(tools) == 0:
            fallback_result = self.handle_message_fallback(msg)
            if fallback_result is None:
                return None
            return self.to_ChatDocument(
                fallback_result,
                chat_doc=msg if isinstance(msg, ChatDocument) else None,
            )
        chat_doc = msg if isinstance(msg, ChatDocument) else None

        results = self._get_multiple_orch_tool_errs(tools)
        if not results:
            results = [
                await self.handle_tool_message_async(t, chat_doc=chat_doc)
                for t in tools
            ]
            # if there's a solitary ChatDocument|str result, return it as is
            if len(results) == 1 and isinstance(results[0], (str, ChatDocument)):
                return results[0]

        return self._handle_message_final(tools, results)

    def handle_message(
        self, msg: str | ChatDocument
    ) -> None | str | OrderedDict[str, str] | ChatDocument:
        """
        Handle a "tool" message either a string containing one or more
        valid "tool" JSON substrings,  or a
        ChatDocument containing a `function_call` attribute.
        Handle with the corresponding handler method, and return
        the results as a combined string.

        Args:
            msg (str | ChatDocument): The string or ChatDocument to handle

        Returns:
            The result of the handler method can be:
             - None if no tools successfully handled, or no tools present
             - str if langroid-native JSON tools were handled, and results concatenated,
                 OR there's a SINGLE OpenAI tool-call.
                (We do this so the common scenario of a single tool/fn-call
                 has a simple behavior).
             - Dict[str, str] if multiple OpenAI tool-calls were handled
                 (dict is an id->result map)
             - ChatDocument if a handler returned a ChatDocument, intended to be the
                 final response of the `agent_response` method.
        """
        try:
            tools = self.get_tool_messages(msg)
            tools = [t for t in tools if self._tool_recipient_match(t)]
        except ValidationError as ve:
            # correct tool name but bad fields
            return self.tool_validation_error(ve)
        except XMLException as xe:  # from XMLToolMessage parsing
            return str(xe)
        except ValueError:
            # invalid tool name
            # We return None since returning "invalid tool name" would
            # be considered a valid result in task loop, and would be treated
            # as a response to the tool message even though the tool was not intended
            # for this agent.
            return None
        if len(tools) == 0:
            fallback_result = self.handle_message_fallback(msg)
            if fallback_result is None:
                return None
            return self.to_ChatDocument(
                fallback_result,
                chat_doc=msg if isinstance(msg, ChatDocument) else None,
            )

        results: List[str | ChatDocument | None] = []
        if len(tools) > 1 and not self.config.allow_multiple_tools:
            results = ["ERROR: Use ONE tool at a time!"] * len(tools)
        if not results:
            results = self._get_multiple_orch_tool_errs(tools)
        if not results:
            chat_doc = msg if isinstance(msg, ChatDocument) else None
            results = [self.handle_tool_message(t, chat_doc=chat_doc) for t in tools]
            # if there's a solitary ChatDocument|str result, return it as is
            if len(results) == 1 and isinstance(results[0], (str, ChatDocument)):
                return results[0]

        return self._handle_message_final(tools, results)

    @property
    def all_llm_tools_known(self) -> set[str]:
        """All known tools; this may extend self.llm_tools_known."""
        return self.llm_tools_known

    def handle_message_fallback(self, msg: str | ChatDocument) -> Any:
        """
        Fallback method for the case where the msg has no tools that
        can be handled by this agent.
        This method can be overridden by subclasses, e.g.,
        to create a "reminder" message when a tool is expected but the LLM "forgot"
        to generate one.

        Args:
            msg (str | ChatDocument): The input msg to handle
        Returns:
            Any: The result of the handler method
        """
        return None

    def _get_one_tool_message(
        self, tool_candidate_str: str, is_json: bool = True, from_llm: bool = True
    ) -> Optional[ToolMessage]:
        """
        Parse the tool_candidate_str into ANY ToolMessage KNOWN to agent --
        This includes non-used/handled tools, i.e. any tool in self.all_llm_tools_known.
        The exception to this is below where we try our best to infer the tool
        when the LLM has "forgotten" to include the "request" field in the tool str ---
        in this case we ONLY look at the possible set of HANDLED tools, i.e.
        self.llm_tools_handled.
        """
        if is_json:
            maybe_tool_dict = json.loads(tool_candidate_str)
        else:
            try:
                maybe_tool_dict = XMLToolMessage.extract_field_values(
                    tool_candidate_str
                )
            except Exception as e:
                from langroid.exceptions import XMLException

                raise XMLException(f"Error extracting XML fields:\n {str(e)}")
        # check if the maybe_tool_dict contains a "properties" field
        # which further contains the actual tool-call
        # (some weak LLMs do this). E.g. gpt-4o sometimes generates this:
        # TOOL: {
        #     "type": "object",
        #     "properties": {
        #         "request": "square",
        #         "number": 9
        #     },
        #     "required": [
        #         "number",
        #         "request"
        #     ]
        # }

        if not isinstance(maybe_tool_dict, dict):
            self.tool_error = from_llm
            return None

        properties = maybe_tool_dict.get("properties")
        if isinstance(properties, dict):
            maybe_tool_dict = properties
        request = maybe_tool_dict.get("request")
        if request is None:
            if self.enabled_requests_for_inference is None:
                possible = [self.llm_tools_map[r] for r in self.llm_tools_handled]
            else:
                allowable = self.enabled_requests_for_inference.intersection(
                    self.llm_tools_handled
                )
                possible = [self.llm_tools_map[r] for r in allowable]

            default_keys = set(ToolMessage.__fields__.keys())
            request_keys = set(maybe_tool_dict.keys())

            def maybe_parse(tool: type[ToolMessage]) -> Optional[ToolMessage]:
                all_keys = set(tool.__fields__.keys())
                non_inherited_keys = all_keys.difference(default_keys)
                # If the request has any keys not valid for the tool and
                # does not specify some key specific to the type
                # (e.g. not just `purpose`), the LLM must explicitly specify `request`
                if not (
                    request_keys.issubset(all_keys)
                    and len(request_keys.intersection(non_inherited_keys)) > 0
                ):
                    return None

                try:
                    return tool.parse_obj(maybe_tool_dict)
                except ValidationError:
                    return None

            candidate_tools = list(
                filter(
                    lambda t: t is not None,
                    map(maybe_parse, possible),
                )
            )

            # If only one valid candidate exists, we infer
            # "request" to be the only possible value
            if len(candidate_tools) == 1:
                return candidate_tools[0]
            else:
                self.tool_error = from_llm
                return None

        if not isinstance(request, str) or request not in self.all_llm_tools_known:
            self.tool_error = from_llm
            return None

        message_class = self.llm_tools_map.get(request)
        if message_class is None:
            logger.warning(f"No message class found for request '{request}'")
            self.tool_error = from_llm
            return None

        try:
            message = message_class.parse_obj(maybe_tool_dict)
        except ValidationError as ve:
            self.tool_error = from_llm
            raise ve
        return message

    def to_ChatDocument(
        self,
        msg: Any,
        orig_tool_name: str | None = None,
        chat_doc: Optional[ChatDocument] = None,
        author_entity: Entity = Entity.AGENT,
    ) -> Optional[ChatDocument]:
        """
        Convert result of a responder (agent_response or llm_response, or task.run()),
        or tool handler, or handle_message_fallback,
        to a ChatDocument, to enable handling by other
        responders/tasks in a task loop possibly involving multiple agents.

        Args:
            msg (Any): The result of a responder or tool handler or task.run()
            orig_tool_name (str): The original tool name that generated the response,
                if any.
            chat_doc (ChatDocument): The original ChatDocument object that `msg`
                is a response to.
            author_entity (Entity): The intended author of the result ChatDocument
        """
        if msg is None or isinstance(msg, ChatDocument):
            return msg

        is_agent_author = author_entity == Entity.AGENT

        if isinstance(msg, str):
            return self.response_template(author_entity, content=msg, content_any=msg)
        elif isinstance(msg, ToolMessage):
            # result is a ToolMessage, so...
            result_tool_name = msg.default_value("request")
            if (
                is_agent_author
                and result_tool_name in self.llm_tools_handled
                and (orig_tool_name is None or orig_tool_name != result_tool_name)
            ):
                # TODO: do we need to remove the tool message from the chat_doc?
                # if (chat_doc is not None and
                #     msg in chat_doc.tool_messages):
                #    chat_doc.tool_messages.remove(msg)
                # if we can handle it, do so
                result = self.handle_tool_message(msg, chat_doc=chat_doc)
                if result is not None and isinstance(result, ChatDocument):
                    return result
            else:
                # else wrap it in an agent response and return it so
                # orchestrator can find a respondent
                return self.response_template(author_entity, tool_messages=[msg])
        else:
            result = to_string(msg)

        return (
            None
            if result is None
            else self.response_template(author_entity, content=result, content_any=msg)
        )

    def from_ChatDocument(self, msg: ChatDocument, output_type: Type[T]) -> Optional[T]:
        """
        Extract a desired output_type from a ChatDocument object.
        We use this fallback order:
        - if `msg.content_any` exists and matches the output_type, return it
        - if `msg.content` exists and output_type is str return it
        - if output_type is a ToolMessage, return the first tool in `msg.tool_messages`
        - if output_type is a list of ToolMessage,
            return all tools in `msg.tool_messages`
        - search for a tool in `msg.tool_messages` that has a field of output_type,
             and if found, return that field value
        - return None if all the above fail
        """
        content = msg.content
        if output_type is str and content != "":
            return cast(T, content)
        content_any = msg.content_any
        if content_any is not None and isinstance(content_any, output_type):
            return cast(T, content_any)

        tools = self.try_get_tool_messages(msg, all_tools=True)

        if get_origin(output_type) is list:
            list_element_type = get_args(output_type)[0]
            if issubclass(list_element_type, ToolMessage):
                # list_element_type is a subclass of ToolMessage:
                # We output a list of objects derived from list_element_type
                return cast(
                    T,
                    [t for t in tools if isinstance(t, list_element_type)],
                )
        elif get_origin(output_type) is None and issubclass(output_type, ToolMessage):
            # output_type is a subclass of ToolMessage:
            # return the first tool that has this specific output_type
            for tool in tools:
                if isinstance(tool, output_type):
                    return cast(T, tool)
            return None
        elif get_origin(output_type) is None and output_type in (str, int, float, bool):
            # attempt to get the output_type from the content,
            # if it's a primitive type
            primitive_value = from_string(content, output_type)  # type: ignore
            if primitive_value is not None:
                return cast(T, primitive_value)

        # then search for output_type as a field in a tool
        for tool in tools:
            value = tool.get_value_of_type(output_type)
            if value is not None:
                return cast(T, value)
        return None

    def _maybe_truncate_result(
        self, result: str | ChatDocument | None, max_tokens: int | None
    ) -> str | ChatDocument | None:
        """
        Truncate the result string to `max_tokens` tokens.
        """
        if result is None or max_tokens is None:
            return result
        result_str = result.content if isinstance(result, ChatDocument) else result
        num_tokens = (
            self.parser.num_tokens(result_str)
            if self.parser is not None
            else len(result_str) / 4.0
        )
        if num_tokens <= max_tokens:
            return result
        truncate_warning = f"""
        The TOOL result was large, so it was truncated to {max_tokens} tokens.
        To get the full result, the TOOL must be called again.
        """
        if isinstance(result, str):
            return (
                self.parser.truncate_tokens(result, max_tokens)
                if self.parser is not None
                else result[: max_tokens * 4]  # approx truncate
            ) + truncate_warning
        elif isinstance(result, ChatDocument):
            result.content = (
                self.parser.truncate_tokens(result.content, max_tokens)
                if self.parser is not None
                else result.content[: max_tokens * 4]  # approx truncate
            ) + truncate_warning
            return result

    async def handle_tool_message_async(
        self,
        tool: ToolMessage,
        chat_doc: Optional[ChatDocument] = None,
    ) -> None | str | ChatDocument:
        """
        Asynch version of `handle_tool_message`. See there for details.
        """
        tool_name = tool.default_value("request")
        if hasattr(tool, "_handler"):
            handler_name = getattr(tool, "_handler", tool_name)
        else:
            handler_name = tool_name
        handler_method = getattr(self, handler_name + "_async", None)
        if handler_method is None:
            return self.handle_tool_message(tool, chat_doc=chat_doc)
        has_chat_doc_arg = (
            chat_doc is not None
            and "chat_doc" in inspect.signature(handler_method).parameters
        )
        try:
            if has_chat_doc_arg:
                maybe_result = await handler_method(tool, chat_doc=chat_doc)
            else:
                maybe_result = await handler_method(tool)
            result = self.to_ChatDocument(maybe_result, tool_name, chat_doc)
        except Exception as e:
            # raise the error here since we are sure it's
            # not a pydantic validation error,
            # which we check in `handle_message`
            raise e
        return self._maybe_truncate_result(
            result, tool._max_result_tokens
        )  # type: ignore

    def handle_tool_message(
        self,
        tool: ToolMessage,
        chat_doc: Optional[ChatDocument] = None,
    ) -> None | str | ChatDocument:
        """
        Respond to a tool request from the LLM, in the form of an ToolMessage object.
        Args:
            tool: ToolMessage object representing the tool request.
            chat_doc: Optional ChatDocument object containing the tool request.
                This is passed to the tool-handler method only if it has a `chat_doc`
                argument.

        Returns:

        """
        tool_name = tool.default_value("request")
        if hasattr(tool, "_handler"):
            handler_name = getattr(tool, "_handler", tool_name)
        else:
            handler_name = tool_name
        handler_method = getattr(self, handler_name, None)
        if handler_method is None:
            return None
        has_chat_doc_arg = (
            chat_doc is not None
            and "chat_doc" in inspect.signature(handler_method).parameters
        )
        try:
            if has_chat_doc_arg:
                maybe_result = handler_method(tool, chat_doc=chat_doc)
            else:
                maybe_result = handler_method(tool)
            result = self.to_ChatDocument(maybe_result, tool_name, chat_doc)
        except Exception as e:
            # raise the error here since we are sure it's
            # not a pydantic validation error,
            # which we check in `handle_message`
            raise e
        return self._maybe_truncate_result(
            result, tool._max_result_tokens
        )  # type: ignore

    def num_tokens(self, prompt: str | List[LLMMessage]) -> int:
        if self.parser is None:
            raise ValueError("Parser must be set, to count tokens")
        if isinstance(prompt, str):
            return self.parser.num_tokens(prompt)
        else:
            return sum(
                [
                    self.parser.num_tokens(m.content)
                    + self.parser.num_tokens(str(m.function_call or ""))
                    for m in prompt
                ]
            )

    def _get_response_stats(
        self, chat_length: int, tot_cost: float, response: LLMResponse
    ) -> str:
        """
        Get LLM response stats as a string

        Args:
            chat_length (int): number of messages in the chat
            tot_cost (float): total cost of the chat so far
            response (LLMResponse): LLMResponse object
        """

        if self.config.llm is None:
            logger.warning("LLM config is None, cannot get response stats")
            return ""
        if response.usage:
            in_tokens = response.usage.prompt_tokens
            out_tokens = response.usage.completion_tokens
            llm_response_cost = format(response.usage.cost, ".4f")
            cumul_cost = format(tot_cost, ".4f")
            assert isinstance(self.llm, LanguageModel)
            context_length = self.llm.chat_context_length()
            max_out = self.config.llm.model_max_output_tokens

            llm_model = (
                "no-LLM" if self.config.llm is None else self.llm.config.chat_model
            )
            # tot cost across all LLMs, agents
            all_cost = format(self.llm.tot_tokens_cost()[1], ".4f")
            return (
                f"[bold]Stats:[/bold] [magenta]N_MSG={chat_length}, "
                f"TOKENS: in={in_tokens}, out={out_tokens}, "
                f"max={max_out}, ctx={context_length}, "
                f"COST: now=${llm_response_cost}, cumul=${cumul_cost}, "
                f"tot=${all_cost} "
                f"[bold]({llm_model})[/bold][/magenta]"
            )
        return ""

    def update_token_usage(
        self,
        response: LLMResponse,
        prompt: str | List[LLMMessage],
        stream: bool,
        chat: bool = True,
        print_response_stats: bool = True,
    ) -> None:
        """
        Updates `response.usage` obj (token usage and cost fields) if needed.
        An update is needed only if:
        - stream is True (i.e. streaming was enabled), and
        - the response was NOT obtained from cached, and
        - the API did NOT provide the usage/cost fields during streaming
          (As of Sep 2024, the OpenAI API started providing these; for other APIs
            this may not necessarily be the case).

        Args:
            response (LLMResponse): LLMResponse object
            prompt (str | List[LLMMessage]): prompt or list of LLMMessage objects
            stream (bool): whether to update the usage in the response object
                if the response is not cached.
            chat (bool): whether this is a chat model or a completion model
            print_response_stats (bool): whether to print the response stats
        """
        if response is None or self.llm is None:
            return

        no_usage_info = response.usage is None or response.usage.prompt_tokens == 0
        # Note: If response was not streamed, then
        # `response.usage` would already have been set by the API,
        # so we only need to update in the stream case.
        if stream and no_usage_info:
            # usage, cost = 0 when response is from cache
            prompt_tokens = 0
            completion_tokens = 0
            cost = 0.0
            if not response.cached:
                prompt_tokens = self.num_tokens(prompt)
                completion_tokens = self.num_tokens(response.message)
                if response.function_call is not None:
                    completion_tokens += self.num_tokens(str(response.function_call))
                cost = self.compute_token_cost(prompt_tokens, 0, completion_tokens)
            response.usage = LLMTokenUsage(
                prompt_tokens=prompt_tokens,
                completion_tokens=completion_tokens,
                cost=cost,
            )

        # update total counters
        if response.usage is not None:
            self.total_llm_token_cost += response.usage.cost
            self.total_llm_token_usage += response.usage.total_tokens
            self.llm.update_usage_cost(
                chat,
                response.usage.prompt_tokens,
                response.usage.completion_tokens,
                response.usage.cost,
            )
            chat_length = 1 if isinstance(prompt, str) else len(prompt)
            self.token_stats_str = self._get_response_stats(
                chat_length, self.total_llm_token_cost, response
            )
            if print_response_stats:
                print(self.indent + self.token_stats_str)

    def compute_token_cost(self, prompt: int, cached: int, completion: int) -> float:
        price = cast(LanguageModel, self.llm).chat_cost()
        return (
            price[0] * (prompt - cached) + price[1] * cached + price[2] * completion
        ) / 1000

    def ask_agent(
        self,
        agent: "Agent",
        request: str,
        no_answer: str = NO_ANSWER,
        user_confirm: bool = True,
    ) -> Optional[str]:
        """
        Send a request to another agent, possibly after confirming with the user.
        This is not currently used, since we rely on the task loop and
        `RecipientTool` to address requests to other agents. It is generally best to
        avoid using this method.

        Args:
            agent (Agent): agent to ask
            request (str): request to send
            no_answer (str): expected response when agent does not know the answer
            user_confirm (bool): whether to gate the request with a human confirmation

        Returns:
            str: response from agent
        """
        agent_type = type(agent).__name__
        if user_confirm:
            user_response = Prompt.ask(
                f"""[magenta]Here is the request or message:
                {request}
                Should I forward this to {agent_type}?""",
                default="y",
                choices=["y", "n"],
            )
            if user_response not in ["y", "yes"]:
                return None
        answer = agent.llm_response(request)
        if answer != no_answer:
            return (f"{agent_type} says: " + str(answer)).strip()
        return None
</file>

<file path="pyproject.toml">
[project]
name = "langroid"
version = "0.56.18"
authors = [
    {name = "Prasad Chalasani", email = "pchalasani@gmail.com"},
]
description = "Harness LLMs with Multi-Agent Programming"
readme = "README.md"
license = {text = "MIT"}
requires-python = "<3.13,>=3.10"
dependencies = [
    "adb-cloud-connector<2.0.0,>=1.0.2",
    "aiohttp<4.0.0,>=3.9.1",
    "async-generator<2.0,>=1.10",
    "bs4<1.0.0,>=0.0.1",
    "cerebras-cloud-sdk<2.0.0,>=1.1.0",
    "colorlog<7.0.0,>=6.7.0",
    "docstring-parser<1.0,>=0.16",
    "duckduckgo-search<7.0.0,>=6.0.0",
    "exa-py>=1.8.7",
    "faker<19.0.0,>=18.9.0",
    "fakeredis<3.0.0,>=2.12.1",
    "fastmcp>=2.2.5",
    "fire<1.0.0,>=0.5.0",
    "gitpython<4.0.0,>=3.1.43",
    "google-api-python-client<3.0.0,>=2.95.0",
    "google-genai>=1.0.0",
    "groq<1.0.0,>=0.13.0",
    "grpcio<2.0.0,>=1.62.1",
    "halo<1.0.0,>=0.0.31",
    "jinja2<4.0.0,>=3.1.2",
    "json-repair<1.0.0,>=0.29.9",
    "lxml<6.0.0,>=5.4.0",
    "markdownify>=0.13.1",
    "nest-asyncio<2.0.0,>=1.6.0",
    "nltk<4.0.0,>=3.8.2",
    "onnxruntime<2.0.0,>=1.16.1",
    "openai<2.0.0,>=1.61.1",
    "pandas<3.0.0,>=2.0.3",
    "prettytable<4.0.0,>=3.8.0",
    "pydantic<3.0.0,>=1",
    "pygithub<2.0.0,>=1.58.1",
    "pygments<3.0.0,>=2.15.1",
    "pymupdf4llm<0.1.0,>=0.0.17",
    "pyparsing<4.0.0,>=3.0.9",
    "pytest-rerunfailures<16.0,>=15.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "python-magic<1.0.0,>=0.4.27",
    "pyyaml<7.0.0,>=6.0.1",
    "qdrant-client<2.0.0,>=1.8.0",
    "rank-bm25<1.0.0,>=0.2.2",
    "redis<6.0.0,>=5.0.1",
    "requests<3.0.0,>=2.31.0",
    "requests-oauthlib<2.0.0,>=1.3.1",
    "rich<14.0.0,>=13.3.4",
    "thefuzz<1.0.0,>=0.20.0",
    "tiktoken<1.0.0,>=0.7.0",
    "trafilatura<2.0.0,>=1.5.0",
    "typer<1.0.0,>=0.9.0",
    "wget<4.0,>=3.2",
]

[project.optional-dependencies]
doc-chat = [
    "docling<3.0.0,>=2.20.0",
    "pdf2image<2.0.0,>=1.17.0",
    "pymupdf4llm<0.1.0,>=0.0.17",
    "pymupdf<2.0.0,>=1.23.3",
    "pypdf>=5.1.0",
    "pytesseract<0.4.0,>=0.3.10",
    "python-docx<2.0.0,>=1.1.0",
    "unstructured[docx,pdf,pptx]<1.0.0,>=0.16.15",
    "marker-pdf"
]

hf-transformers = [
    "sentence-transformers<3.0.0,>=2.2.2",
    "torch<3.0.0,>=2.0.0",
    "transformers<5.0.0,>=4.40.1",
    "huggingface-hub<1.0.0,>=0.21.2",    
]

vecdbs = [
    "lancedb<0.9.0,>=0.8.2",
    "tantivy<0.22.0,>=0.21.0",
    "pyarrow<16.0.0,>=15.0.0",
    "chromadb<=0.4.23,>=0.4.21",
    "weaviate-client>=4.9.6",
    "pinecone-client>=5.0.1",
]

db = [
    "sqlalchemy<3.0.0,>=2.0.19",
    "psycopg2<3.0.0,>=2.9.7",
    "psycopg2-binary>=2.9.10",
    "pymysql<2.0.0,>=1.1.0",
]

all = [
    "pdf2image<2.0.0,>=1.17.0",
    "pymupdf<2.0.0,>=1.23.3",
    "pymupdf4llm<0.1.0,>=0.0.17",
    "docling<3.0.0,>=2.16.0",
    "pypdf>=5.1.0",
    "pytesseract<0.4.0,>=0.3.10",
    "python-docx<2.0.0,>=1.1.0",
    "unstructured[docx,pdf,pptx]<1.0.0,>=0.16.15",
    "sqlalchemy<3.0.0,>=2.0.19",
    "psycopg2<3.0.0,>=2.9.7",
    "pymysql<2.0.0,>=1.1.0",
    "sentence-transformers<3.0.0,>=2.2.2",
    "torch<3.0.0,>=2.0.0",
    "transformers<5.0.0,>=4.40.1",
    "huggingface-hub<1.0.0,>=0.21.2",
    "chromadb<=0.4.23,>=0.4.21",
    "weaviate-client>=4.9.6",
    "metaphor-python<0.2.0,>=0.1.23",
    "neo4j<6.0.0,>=5.14.1",
    "python-arango<9.0.0,>=8.1.2",
    "arango-datasets<2.0.0,>=1.2.2",
    "litellm<2.0.0,>=1.30.1",
    "chainlit<3.0.0,>=2.0.1",
    "python-socketio<6.0.0,>=5.11.0",
    "fastembed<0.4.0,>=0.3.1",
    "pgvector>=0.3.6",
    "psycopg2-binary>=2.9.10",
    "marker-pdf",
]

# More granular groupings
lancedb = [
    "lancedb<0.9.0,>=0.8.2",
    "tantivy<0.22.0,>=0.21.0",
    "pyarrow<16.0.0,>=15.0.0",
]

docling = [
    "docling<3.0.0,>=2.16.0",
]

pymupdf4llm = [
    "pymupdf4llm<0.1.0,>=0.0.17",
]

pdf-parsers = [
    "docling<3.0.0,>=2.16.0",
    "pypdf>=5.1.0",
    "pymupdf<2.0.0,>=1.23.3",
    "pymupdf4llm<0.1.0,>=0.0.17",
    "pdf2image<2.0.0,>=1.17.0",
    "pytesseract<0.4.0,>=0.3.10",
    "markitdown[docx,xlsx,pptx]>=0.0.1a3",
    "marker-pdf",
]

docx = [
    "python-docx<2.0.0,>=1.1.0",
]

markitdown = [
    "markitdown[docx,xlsx,pptx]>=0.0.1a3",
]

marker-pdf = [
    "marker-pdf[full]>=1.6.0; sys_platform != 'darwin' or platform_machine != 'x86_64'",
    "opencv-python>=4.11.0.86",
]

scrapy = [
    "scrapy<3.0.0,>=2.11.0",
]

hf-embeddings = [
    "sentence-transformers<3.0.0,>=2.2.2",
    "torch<3.0.0,>=2.0.0",
]

transformers = [
    "transformers<5.0.0,>=4.40.1",
    "huggingface-hub<1.0.0,>=0.21.2",
    "torch<3.0.0,>=2.0.0",
]

unstructured = [
    "unstructured[docx,pdf,pptx]<1.0.0,>=0.16.15",
]

postgres = [
    "pgvector>=0.3.6",
    "psycopg2<3.0.0,>=2.9.7",
    "psycopg2-binary>=2.9.10",
    "sqlalchemy<3.0.0,>=2.0.19",
]

mysql = [
    "pymysql<2.0.0,>=1.1.0",
]

sql = [
    "sqlalchemy<3.0.0,>=2.0.19",
    "pymysql<2.0.0,>=1.1.0",
    "psycopg2<3.0.0,>=2.9.7",
]

litellm = [
    "litellm<2.0.0,>=1.30.1",
]

neo4j = [
    "neo4j<6.0.0,>=5.14.1",
]

arango = [
    "python-arango<9.0.0,>=8.1.2",
    "arango-datasets<2.0.0,>=1.2.2",
]

metaphor = [
    "metaphor-python<0.2.0,>=0.1.23",
]

exa = [
    "exa-py>=1.8.7",
]

tavily = [
    "tavily-python>=0.5.0",
]

chainlit = [
    "chainlit<3.0.0,>=2.0.1",    
    "python-socketio<6.0.0,>=5.11.0",
]

chromadb = [
    "chromadb<=0.4.23,>=0.4.21",
]
weaviate = [
    "weaviate-client>=4.9.6",
]

meilisearch = [
    "meilisearch-python-sdk<3.0.0,>=2.2.3",
]

fastembed = [
    "fastembed<0.4.0,>=0.3.1",
]
google-genai = [
    "google-genai>=1.0.0",
]

google-generativeai = [
    "google-genai>=1.0.0",
]
doc-parsers = [
    "markitdown[docx,xlsx,pptx]>=0.0.1a3",
    "openpyxl>=3.1.5",
    "python-docx>=1.1.2",
    "python-pptx>=1.0.2",
    "xlrd>=2.0.1",
]

pinecone = [
    "pinecone-client>=5.0.1"
]
asyncio = [
    "asyncio>=3.4.3",
]
firecrawl = [
    "firecrawl-py>=1.13.5",
]


[dependency-groups]
dev = [
    "black[jupyter]>=24.3.0,<25.0.0",
    "flake8<7.0.0,>=6.0.0",
    "mypy<2.0.0,>=1.11.2",
    "ruff<1.0.0,>=0.8.4",
    "pre-commit<4.0.0,>=3.3.2",
    "autopep8<3.0.0,>=2.0.2",
    "types-python-dateutil>=2.8.0",
    "types-redis<5.0.0.0,>=4.5.5.2",
    "types-requests<3.0.0.0,>=2.31.0.1",
    "types-pyyaml<7.0.0.0,>=6.0.12.20240311",
    "types-pillow<11.0.0.0,>=10.2.0.20240406",
    "pytest<8.0.0,>=7.3.1",
    "pytest-redis<4.0.0,>=3.0.2",
    "pytest-asyncio<1.0.0,>=0.21.1",
    "pytest-postgresql<6.0.0,>=5.0.0",
    "coverage<8.0.0,>=7.2.5",
    "pytest-xdist<4.0.0,>=3.6.1",
    "pytest-timeout<3.0.0,>=2.3.1",
    "pytest-cov<6.0.0,>=5.0.0",
    "docker<8.0.0,>=7.1.0",
    "commitizen>=4.1.0",
    "pytest-mysql>=3.1.0",
]
docs = [
    "mkdocs<2.0.0,>=1.4.2",
    "mkdocs-material<10.0.0,>=9.1.5",
    "mkdocstrings[python]<1.0.0,>=0.25.2",
    "mkdocs-awesome-pages-plugin<3.0.0,>=2.8.0",
    "mkdocs-rss-plugin<2.0.0,>=1.8.0",
    "mkdocs-gen-files<1.0.0,>=0.4.0",
    "mkdocs-literate-nav<1.0.0,>=0.6.0",
    "mkdocs-section-index<1.0.0,>=0.3.5",
    "mkdocs-jupyter<1.0.0,>=0.24.1",
    "griffe<1.0.0",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.hatch.build]
only-packages = true
include = ["langroid/py.typed", "langroid/"]
exclude = [
    "tests/",
    "examples/",
    "**/__pycache__",
    "**/*.pyc",
    "**/node_modules/**",
]

[tool.black]
line-length = 88
include = '\.pyi?$'
# extend-exclude = '.*pyi$'
# exclude = '^stubs/'

[tool.pytype]
inputs = ["langroid"]

[tool.mypy]
python_version = "3.11"
#mypy_path = ["stubs"]

#follow_imports = "skip"
#check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = false
strict = true
exclude = [
    "docs", ".venv", "venv", "examples", "examples_dev", "langroid/utils/web",
    "notebooks",
    "langroid/parsing/repo_loader.py",
    "langroid/embedding_models/clustering.py",
    "langroid/agent/callbacks/chainlit.py",
    "langroid/vector_store/chromadb.py",
    "langroid/embedding_models/protoc" # ignore generated files
]
files=["langroid/*"]
plugins = [
    "pydantic.mypy"
]

[tool.ruff]
line-length = 88
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
lint.select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "I",  # isort
]
lint.exclude = ["docs/**", ".venv", "venv", "examples/**", "examples_dev", "langroid/utils/web", "notebooks", "__init__.py", "langroid/embedding_models/protoc/*"]
lint.fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
lint.unfixable = []
lint.extend-ignore = ["F821"]
# Assume Python 3.11.
target-version = "py311"

[tool.pytest.ini_options]
filterwarnings = ["ignore::DeprecationWarning"]


[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "semver"
version_provider = "pep621"
major_version_zero = true
</file>

</files>
