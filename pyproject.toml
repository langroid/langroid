[tool.poetry]
name = "langroid"
version = "0.1.265"
description = "Harness LLMs with Multi-Agent Programming"
authors = ["Prasad Chalasani <pchalasani@gmail.com>"]
readme = "README.md"
license = "MIT"
include = ["pyproject.toml"]


# =============== MAIN DEPS ==============
[tool.poetry.dependencies]
python = ">=3.10,<3.12"

# =========== OPTIONALS ==============================
chromadb = {version=">=0.4.21, <=0.4.23", optional=true}
momento = {version="^1.10.2", optional=true}
unstructured = {extras = ["docx", "pptx", "pdf"], version = ">=0.10.16,<0.10.18", optional=true}
sentence-transformers = {version="2.2.2", optional=true}
torch = {version="2.0.0", optional=true}
psycopg2 = {version="^2.9.7", optional=true}
pymysql = {version = "^1.1.0", optional = true}
meilisearch-python-sdk = {version="^2.2.3", optional=true}
litellm = {version = "^1.30.1", optional = true}
metaphor-python = {version = "^0.1.23", optional = true}
chainlit = {version = "^1.0.400", optional = true}
python-socketio = {version="^5.11.0", optional=true}
neo4j = {version = "^5.14.1", optional = true}
huggingface-hub = {version="^0.21.2", optional=true}
transformers = {version="^4.40.1", optional=true}
lancedb = {version="^0.8.2", optional=true}
tantivy = {version="^0.21.0", optional=true}
pypdf = {version="^3.12.2", optional=true}
pymupdf = {version="^1.23.3", optional=true}
pdf2image = {version="^1.17.0", optional=true}
pytesseract = {version="^0.3.10", optional=true}
sqlalchemy = {version="^2.0.19", optional=true}
pyarrow = {version="15.0.0", optional=true}
pdfplumber = {version="^0.10.2", optional=true}
python-docx = {version="^1.1.0", optional=true}
scrapy = {version="^2.11.0", optional=true}

# ====CORE================================
pyyaml = "^6.0.1"
onnxruntime = "^1.16.1"
fire = "^0.5.0"
bs4 = "^0.0.1"
python-dotenv = "^1.0.0"
wget = "^3.2"
rich = "^13.3.4"
requests-oauthlib = "^1.3.1"
trafilatura = "^1.5.0"
halo = "^0.0.31"
typer = "^0.9.0"
colorlog = "^6.7.0"
openai = "^1.14.0"
tiktoken = "^0.7.0"
pygithub = "^1.58.1"
pygments = "^2.15.1"
redis = "^5.0.1"
fakeredis = "^2.12.1"
faker = "^18.9.0"
requests = "^2.31.0"
pyparsing = "^3.0.9"
nltk = "^3.8.1"
qdrant-client = "^1.8.0"
pydantic = ">=1,<3"
pandas = "^2.0.3"
prettytable = "^3.8.0"

google-api-python-client = "^2.95.0"
lxml = "^4.9.3"

rank-bm25 = "^0.2.2"
thefuzz = "^0.20.0"

jinja2 = "^3.1.2"
docstring-parser = "^0.15"

aiohttp = "^3.9.1"
grpcio = "^1.62.1"
duckduckgo-search = "^6.0.0"

google-generativeai = "^0.5.2"
groq = "^0.5.0"
nest-asyncio = "^1.6.0"
async-generator = "^1.10"

python-magic = "^0.4.27"

[tool.poetry.extras]
# install these using, e.g.,
# `poetry install -E [...]` where [...] is one of the extras below
# or install multiple extras using, e.g.,  `poetry install -E "litellm mysql"

# Groupings for common use-cases
doc-chat = [
    "unstructured", "python-docx", "pdfplumber", "pypdf",
    "pymupdf", "pdf2image", "pytesseract"
]
db = ["postgres", "mysql", "sqlalchemy", "psycopg2", "pymysql"]
hf-transformers = ["sentence-transformers", "torch", "transformers", "huggingface-hub"]
vecdbs = ["lancedb", "tantivy", "pyarrow", "chromadb"]
all = [
    "unstructured", "python-docx", "pdfplumber", "pypdf",
    "pymupdf", "pdf2image", "pytesseract",
    "postgres", "mysql", "sqlalchemy", "psycopg2", "pymysql",
    "sentence-transformers", "torch", "transformers", "huggingface-hub",
#    "lancedb", "tantivy", "pyarrow",
    "chromadb",
    "metaphor-python", "neo4j",
    "litellm",
    "chainlit", "python-socketio",
]
# more granular groupings
lancedb = ["lancedb", "tantivy", "pyarrow"]
pdf-parsers = ["pdfplumber", "pypdf", "pymupdf", "pdf2image", "pytesseract"]
docx = ["python-docx"]
scrapy = ["scrapy"]
hf-embeddings = ["sentence-transformers", "torch"]
transformers = ["transformers", "huggingface-hub", "torch"]
unstructured = ["unstructured"]
postgres = ["psycopg2"]
mysql = ["pymysql"]
sql = ["sqlalchemy", "pymysql",  "psycopg2"]
litellm = ["litellm"]
neo4j = ["neo4j"]
metaphor = ["metaphor-python"]
chainlit = ["chainlit", "python-socketio"]
chromadb = ["chromadb"]
mkdocs = [
    "mkdocs", "mkdocs-material", "mkdocstrings", "mkdocs-awesome-pages-plugin",
    "mkdocs-gen-files", "mkdocs-literate-nav",
    "mkdocs-section-index", "mkdocs-jupyter", "mkdocs-rss-plugin"
]
meilisearch = ["meilisearch-python-sdk"]
momento = ["momento"]


# ================= DEV DEPS =================
[tool.poetry.group.dev.dependencies]
black = {extras = ["jupyter"], version = "^24.3.0"}
flake8 = "^6.0.0"
mypy = "^1.7.0"
ruff = "^0.2.2"
pre-commit = "^3.3.2"
autopep8 = "^2.0.2"

types-redis = "^4.5.5.2"
types-requests = "^2.31.0.1"
types-pyyaml = "^6.0.12.20240311"
types-pillow = "^10.2.0.20240406"

pytest = "^7.3.1"
pytest-redis = "^3.0.2"
pytest-asyncio = "^0.21.1"
pytest-postgresql = "^5.0.0"
pytest-mysql = "^2.4.2"
coverage = "^7.2.5"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]

mkdocs = "^1.4.2"
mkdocs-material = "^9.1.5"
mkdocstrings = {extras = ["python"], version = "^0.21.2"}
mkdocs-awesome-pages-plugin = "^2.8.0"
mkdocs-rss-plugin = "^1.8.0"
mkdocs-gen-files = "^0.4.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-section-index = "^0.3.5"
mkdocs-jupyter = "^0.24.1"



# ========================================
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
include = '\.pyi?$'
# extend-exclude = '.*pyi$'
# exclude = '^stubs/'

[tool.pytype]
inputs = ["langroid"]

[tool.mypy]
python_version = "3.11"
#mypy_path = ["stubs"]

#follow_imports = "skip"
#check_untyped_defs = "True"
disallow_untyped_defs = "True"
ignore_missing_imports = "True"
warn_unused_ignores = "False"
strict = true
exclude = [
    "docs", ".venv", "venv", "examples", "examples_dev", "langroid/utils/web",
    "notebooks",
    "langroid/parsing/repo_loader.py",
    "langroid/embedding_models/clustering.py",
    "langroid/agent/callbacks/chainlit.py",
    "langroid/vector_store/chromadb.py",
    "langroid/embedding_models/protoc" # ignore generated files
]
files=["langroid/*"]
plugins = [
    "pydantic.mypy"
]

[tool.ruff]
line-length = 88
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Assume Python 3.11.
target-version = "py311"
lint.select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "I",  # isort
]
lint.exclude = ["docs/**", ".venv", "venv", "examples/**", "examples_dev", "langroid/utils/web", "notebooks", "__init__.py", "langroid/embedding_models/protoc/*"]
lint.fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
lint.unfixable = []
lint.extend-ignore = ["F821"]

[tool.pytest.ini_options]
filterwarnings = ["ignore::DeprecationWarning"]
